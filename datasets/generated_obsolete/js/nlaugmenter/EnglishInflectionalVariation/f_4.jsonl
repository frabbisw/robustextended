{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const length = numbers.length;\n  let hasClose = false;\n  for (let i = 0; i < length; i++) {\n    if (numbers[i] < min + threshold || numbers[i] > max - threshold) {\n      return false;\n    }\n  }\n  return hasClose;\n};\n\n/*\n  Function that adds a number to the given list, if it isn't already in the list.\n  >>> addNumberIfNotInList([1, 2, 3, 4, 5], 4)\n  [1, 2, 3, 4, 5, 4]\n  >>> addNumberIfNotInList([1, 2, 3, 4, 5], 6)\n  [1, 2, 3, 4, 5, 6]\n  */\nconst addNumberIfNotInList = (numbers, number) => {\n  const index = numbers.indexOf(number);\n  if (index === -1) {\n    return [...numbers, number];\n  }\n  return numbers;\n};\n\n/*\n  Function that subtracts a number from the given list, if it isn't already in the list.\n  >>> subtractNumberIfNotInList([1, 2, 3, 4, 5], 4)\n  [1, 2, 3, 4, 5, 3]\n  >>> subtractNumberIfNotInList([1, 2, 3, 4, 5], 6)\n  [1, 2, 3, 4, 5, 4]\n  */\nconst subtractNumberIfNotInList = (numbers, number) => {\n  const index = numbers.indexOf(number);\n  if (index === -1) {\n    return [...numbers, number];\n  }\n  return numbers;\n};\n\nmodule.exports = {\n  hasCloseElements,\n  addNumberIfNotInList,\n  subtractNumberIfNotInList,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = []\n  const stack = []\n  const currentGroup = []\n\n  for (let i = 0; i < paren_string.length; i++) {\n    const char = paren_string[i]\n    if (char === '(') {\n      stack.push(currentGroup)\n      currentGroup = []\n    } else if (char === ')') {\n      if (stack.length === 0) {\n        groups.push(currentGroup)\n      } else {\n        currentGroup.push(stack.pop())\n      }\n    } else {\n      currentGroup.push(char)\n    }\n  }\n  return groups\n}\n\n/*\n  Given a string contains multiple group of nested parentheses, split them into\n  substring. Each substring is an individual group.\n  >>> splitParens('(()())')\n  ['(()())', '(())']\n  >>> splitParens('()')\n  ['()', '']\n  >>> splitParens('(())')\n  ['(())', '(())']\n  >>> splitParens('(())()')\n  ['(())', '(())']\n  >>> splitParens('(()())')\n  ['(()())', '(())']\n  >>> splitParens('(())')\n  ['(())', '']\n  >>> splitParens('(()')\n  ['(()', '']\n  >>> splitParens('(()))')\n  ['(())', '(())']\n  >>> splitParens('()()')\n  ['()()', '']\n  >>> splitParens('()')\n  ['()', '']\n  >>> splitParens('(()())')\n  ['(()())', '(())']\n  >>> splitParens('(()))')\n  ['(()))', '()())']\n  >>> splitParens('()))')\n  ['()))', '']\n  >>> splitParens('()(())')\n  ['(()())', '(())']\n  >>> splitParens('())')\n  ['())', '']\n  >>> splitParens('(())')\n  ['(())', '']\n  >>> splitParens('()')\n  ['()', '']\n  >>> splitParens('()()')\n  ['()()', '']\n  >>> splitParens('())')\n  ['())', '']\n  >>> splitParens('(())')\n  ['(())', '']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())()')\n  ['(())', '']\n  >>> splitParens('(())')\n  ['(())', '']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())()')\n  ['(())', '']\n  >>> splitParens('(())')\n  ['(())', '']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('()())')\n  ['(())', '']\n  >>> splitParens('()')\n  ['()', '']\n  >>> splitParens('()()')\n  ['()()', '']\n  >>> splitParens('())')\n  ['())', '']\n  >>> splitParens('()()')\n  ['()()', '']\n  >>> splitParens('(())')\n  ['(())', '']\n  >>> splitParens('()')\n  ['()', '']\n  >>> splitParens('()())')\n  ['(())())', '()()']\n  >>> splitParens('())')\n  ['())', '']\n  >>> splitParens('(())')\n  ['(())', '']\n  >>> splitParens('()())')\n  ['(())())', '(())']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())()')\n  ['(())', '']\n  >>> splitParens('(())')\n  ['(())', '']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())()')\n  ['(())', '']\n  >>> splitParens('(())')\n  ['(())', '']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())()')\n  ['(())', '']\n  >>> splitParens('(())')\n  ['(())', '']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())())')\n  ['(())())', '(())']\n  >>> splitParens('(())())')"}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number <= 0) {\n    return 0\n  }\n  const integerPart = Math.floor(number)\n  const decimalPart = number - integerPart\n  if (decimalPart == 0) {\n    return integerPart\n  }\n  return {integerPart, decimalPart}\n}\n\nexport default truncateNumber\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  if (!Array.isArray(operations)) {\n    throw new TypeError('Argument must be an array of numbers');\n  }\n  const sum = operations.reduce((prev, current) => prev + current, 0);\n  const low = sum - operations.reduce((prev, current) => prev - current, 0);\n  return low < 0;\n};\n\nmodule.exports = belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n    const absDiff = (a, b) => Math.abs(a - b);\n    const absDiffToMean = (a, b) => a - b;\n\n    const mean = numbers.reduce((a, b) => a + b) / numbers.length;\n    const meanAbsDeviation = numbers.reduce(\n        (a, b) => a + absDiff(b, mean),\n        0\n    );\n    return meanAbsDeviation / (numbers.length - 1);\n};\n\n// http://www.johndcook.com/blog/solving-the-pythagorean-triple/\nconst pythagoreanTriple = (a, b) => {\n    let d = a * a + b * b;\n    while (d < 4) {\n        b = a + b;\n        d = a * a + b * b;\n    }\n    return {a, b};\n};\n\nconst pythagoreanTripleFromNumber = (n) => {\n    const result = pythagoreanTriple(2, 2);\n    result.a = n;\n    result.b = n;\n    return result;\n};\n\nconst triangleNumbers = () => {\n    const result = [];\n    let n = 0;\n    while (n < 100) {\n        const number = pythagoreanTripleFromNumber(n);\n        result.push(number.a + number.b);\n        n += 1;\n    }\n    return result;\n};\n\nconst triangleNumbersWithFunction = (f) => {\n    const result = [];\n    let n = 0;\n    while (n < 100) {\n        const number = pythagoreanTripleFromNumber(n);\n        result.push(f(number.a, number.b));\n        n += 1;\n    }\n    return result;\n};\n\nconst triangleNumbersWithSum = (sum) => triangleNumbers();\n\nconst triangleNumbersWithFunctionAndSum = (f, sum) => triangleNumbersWithFunction(f);\n\n// const triangleNumbersWithSumAndFunction = (sum, f) => triangleNumbersWithFunction(f);\n\nconst main = () => {\n    const triangleNumbersWithSumAndFunction = (sum, f) => triangleNumbersWithFunction(f);\n    const triangleNumbersWithSumAndFunctionAndMean = (sum, f) => triangleNumbersWithFunctionAndSum(f, sum);\n\n    const triangleNumbersWithSumAndFunctionAndMean = (sum, f) => triangleNumbersWithFunctionAndSum(f, sum);\n    // const triangleNumbersWithSumAndFunctionAndMean = (sum, f) => triangleNumbersWithFunctionAndSum(sum, f);\n\n    const triangleNumbersWithSumAndFunctionAndMean = (sum, f) => triangleNumbersWithFunctionAndSum(sum, f);\n    // const triangleNumbersWithSumAndFunctionAndMean = (sum, f) => triangleNumbersWithFunctionAndSum(sum, f);\n\n    const triangleNumbersWithSumAndFunctionAndMean = (sum, f) => triangleNumbersWithFunctionAndSum(sum, f);\n    // const triangleNumbersWithSumAndFunctionAndMean = (sum, f) => triangleNumbersWithFunctionAndSum(sum, f);\n\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMean([1, 2, 3, 4]));\n    // console.log(triangleNumbersWithSumAndFunctionAndMe"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    return [].concat.apply([], [].concat(numbers).map((n) => n * delimeter));\n};\n\n/*\n  >>> intersperse([], '-')\n  ''\n  >>> intersperse([1, 2, 3], '-')\n  '1-2-3'\n  */\nconst intersperse_string = (numbers, delimeter) => {\n    return intersperse(numbers.map(Number), delimeter);\n};\n\n/*\n  >>> intersperse([], '-')\n  ''\n  >>> intersperse([1, 2, 3], '-')\n  '1-2-3'\n  */\nconst intersperse_string_string = (numbers, delimeter) => {\n    return intersperse_string(numbers.map(Number), delimeter);\n};\n\n/*\n  >>> intersperse([1, 2, 3], '-')\n  '1-2-3'\n  >>> intersperse([1, 2, 3], '-')\n  '1-2-3'\n  >>> intersperse([1, 2, 3], '-')\n  '1-2-3'\n  >>> intersperse([1, 2, 3], '-')\n  '1-2-3'\n  */\nconst intersperse_string_string_string = (numbers, delimeter) => {\n    return intersperse_string_string(numbers.map(Number), delimeter);\n};\n\n/*\n  >>> intersperse([1, 2, 3], '-')\n  '1-2-3'\n  >>> intersperse([1, 2, 3], '-')\n  '1-2-3'\n  >>> intersperse([1, 2, 3], '-')\n  '1-2-3'\n  >>> intersperse([1, 2, 3], '-')\n  '1-2-3'\n  */\nconst intersperse_string_string_string_string = (numbers, delimeter) => {\n    return intersperse_string_string_string(numbers.map(Number), delimeter);\n};\n\n/*\n  >>> intersperse([1, 2, 3], '-')\n  '1-2-3'\n  >>> intersperse([1, 2, 3], '-')\n  '1-2-3'\n  >>> intersperse([1, 2, 3], '-')\n  '1-2-3'\n  >>> intersperse([1, 2, 3], '-')\n  '1-2-3'\n  */\nconst intersperse_string_string_string_string_string = (numbers, delimeter) => {\n    return intersperse_string_string_string_string(numbers.map(Number), delimeter);\n};\n\nmodule.exports = {\n    intersperse,\n    intersperse_string,\n    intersperse_string_string,\n    intersperse_string_string_string,\n    intersperse_string_string_string_string\n};<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let stack = [],\n    level = 0,\n    result = [0];\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(level + 1);\n      level++;\n    } else if (paren_string[i] === ')') {\n      level = stack.pop() - 1;\n    }\n  }\n  if (level!== 0) {\n    throw new Error('The string is not valid.');\n  }\n  return result;\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring)!== -1);\n};\n\nexport default filterBySubstring;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sums = []\n  const products = []\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i])\n    products.push(1)\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      sums.push(numbers[i] + numbers[j])\n      products.push(numbers[i] * numbers[j])\n    }\n  }\n  return (sums, products)\n}\n\n// console.log(sumProduct([1, 2, 3, 4], 10))\n// [10, 24]\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const rollingMaxResult = [numbers[0]];\n  let previousNumber = numbers[0];\n\n  for (let i = 1; i < numbers.length; i++) {\n    const currentNumber = numbers[i];\n    const previousNumber = previousNumber + 1;\n    const rollingMaxResult = rollingMaxResult.concat([previousNumber > currentNumber? previousNumber : currentNumber]);\n    previousNumber = currentNumber;\n  }\n  return rollingMaxResult;\n};\n\nexport default rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (!string) return '';\n  const prefix = makePalindrome(string.slice(0, -1));\n  const suffix = makePalindrome(string.slice(1));\n  return prefix + string.slice(0, -1) + suffix;\n}\n\nmodule.exports = {\n  makePalindrome,\n  isPalindrome\n}<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  if (a === b) {\n    return a\n  }\n  return a + b + a + b\n}\n\nexport default stringXor\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  const longestString = strings[0];\n  strings.forEach(s => {\n    if (s.length > longestString.length) {\n      longestString = s;\n    }\n  });\n  return longestString;\n};\n\nconsole.log(longest(['a', 'b', 'c'])); // \"a\"\nconsole.log(longest(['a', 'bb', 'ccc'])); // \"ccc\"\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) return b\n  if (b === 0) return a\n  if (a > b) return greatestCommonDivisor(b, a)\n  if (a < b) return greatestCommonDivisor(a, b)\n  return a\n}\n\n/* Return a sum of two integers\n  >>> sum(1, 2)\n  3\n  >>> sum(1, 2, 3)\n  6\n  >>> sum(1, 2, 3, 4)\n  10\n  */\nconst sum = (a, b) => a + b\n\n/* Return a difference of two integers\n  >>> difference(1, 2)\n  -1\n  >>> difference(1, 2, 3)\n  2\n  >>> difference(1, 2, 3, 4)\n  3\n  */\nconst difference = (a, b) => a - b\n\n/* Return a product of two integers\n  >>> product(1, 2)\n  2\n  >>> product(1, 2, 3)\n  6\n  >>> product(1, 2, 3, 4)\n  24\n  */\nconst product = (a, b) => a * b\n\n/* Return a quotient of two integers\n  >>> quotient(3, 2)\n  1\n  >>> quotient(3, 2, 3)\n  0\n  >>> quotient(3, 2, 3, 4)\n  0\n  */\nconst quotient = (a, b) => a / b\n\n/* Return an inverse of an integer\n  >>> inverse(5)\n  -2\n  >>> inverse(2)\n  -1\n  >>> inverse(0)\n  Infinity\n  */\nconst inverse = (a) => {\n  let b = 1\n  while (b * a!== 1) {\n    b = (b + a) % a\n  }\n  return b\n}\n\n/* Return the first prime number less than or equal to n\n  >>> firstPrime(100)\n  2\n  >>> firstPrime(2)\n  2\n  >>> firstPrime(1)\n  1\n  >>> firstPrime(0)\n  Infinity\n  */\nconst firstPrime = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime++\n  }\n  return n\n}\n\n/* Return the nth prime number\n  >>> nthPrime(1)\n  2\n  >>> nthPrime(2)\n  3\n  >>> nthPrime(3)\n  5\n  >>> nthPrime(4)\n  7\n  >>> nthPrime(5)\n  11\n  >>> nthPrime(6)\n  13\n  >>> nthPrime(7)\n  17\n  >>> nthPrime(8)\n  19\n  >>> nthPrime(9)\n  23\n  >>> nthPrime(10)\n  29\n  >>> nthPrime(11)\n  31\n  >>> nthPrime(12)\n  37\n  >>> nthPrime(13)\n  41\n  >>> nthPrime(14)\n  43\n  >>> nthPrime(15)\n  47\n  >>> nthPrime(16)\n  53\n  >>> nthPrime(17)\n  59\n  >>> nthPrime(18)\n  61\n  >>> nthPrime(19)\n  67\n  >>> nthPrime(20)\n  71\n  >>> nthPrime(21)\n  73\n  >>> nthPrime(22)\n  79\n  >>> nthPrime(23)\n  83\n  >>> nthPrime(24)\n  89\n  >>> nthPrime(25)\n  97\n  >>> nthPrime(26)\n  101\n  >>> nthPrime(27)\n  103\n  >>> nthPrime(28)\n  107\n  >>> nthPrime(29)\n  109\n  >>> nthPrime(30)\n  113\n  >>> nthPrime(31)\n  127\n  >>> nthPrime(32)\n  131\n  >>> nthPrime(33)\n  137\n  >>> nthPrime(34)\n  139\n  >>> nthPrime(35)\n  149\n  >>> nthPrime(36)\n  151\n  >>> nthPrime(37)\n  157\n  >>> nthPrime(38)\n  163\n  >>> nthPrime(39)\n  167\n  >>> nthPrime(40)\n  173\n  >>> nthPrime(41)\n  179\n  >>> nthPrime(42)\n  181\n  >>> nthPrime(43)\n  191\n  >>> nthPrime(44)\n  193\n  >>> nthPrime(45)\n  197\n  >>> nthPrime(46)\n  199\n  >>> nthPrime(47)\n  211\n  >>> nthPrime(48)\n  223\n  >>> nthPrime(49)\n  227\n  >>> nthPrime(50)\n  229\n  >>> nthPrime(51)\n  233\n  >>> nthPrime(52)\n  239\n  >>> nthPrime(53)\n  241\n  >>> nthPrime(54)\n  251\n  >>> nthPrime(55)\n  257\n  >>> nthPrime(56)\n  263\n  >>> nthPrime(57)\n  269\n  >>> nthPrime(58)\n  271\n  >>> nthPrime(59)\n  277\n  >>> nthPrime(60)\n  281\n  >>> nthPrime(61)\n  283\n  >>> nthPrime(62)\n  289\n  >>> nthPrime(63)\n  293\n  >>> nthPrime(64)\n  307\n  >>> nthPrime(65)\n  311\n  >>> nthPrime(66)\n  313\n  >>> nthPrime(67)\n  317\n  >>> nthPrime(68)\n  331\n  >>> nthPrime(69)\n  337\n  >>> nthPrime(70)\n  347\n  >>> nthPrime(71)\n  349\n  >>> nthPrime(72)\n  353\n  >>> nthPrime(73)\n  359\n  >>> nthPrime(74)\n  367\n  >>> nthPrime(75)\n  373\n  >>> nthPrime(76)\n  379\n"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  const prefix = 'abc';\n  const len = string.length;\n  for (let i = 0; i <= len; i++) {\n    const prefix = string.substring(0, i);\n    if (prefix.length === len) {\n      result.push(prefix);\n    }\n  }\n  return result;\n};\n\n/* Return longest prefix of the input string\n  >>> longestPrefix('abc')\n  'abc'\n  >>> longestPrefix('ab')\n  'ab'\n  >>> longestPrefix('')\n  ''\n  >>> longestPrefix('')\n  ''\n  */\nconst longestPrefix = (string) => {\n  const len = string.length;\n  if (len === 0) {\n    return '';\n  }\n  const prefix = string.substring(0, 1);\n  return prefix;\n};\n\n/* Return longest prefix of the input string\n  >>> longestPrefix('abc')\n  'abc'\n  >>> longestPrefix('ab')\n  'ab'\n  >>> longestPrefix('')\n  ''\n  >>> longestPrefix('')\n  ''\n  */\nconst longestPrefix = (string) => {\n  const result = longestPrefix(string.slice(0, -1));\n  return result + string.slice(0, -1);\n};\n\n/* Return longest prefix of the input string\n  >>> longestPrefix('abc')\n  'abc'\n  >>> longestPrefix('ab')\n  'ab'\n  >>> longestPrefix('')\n  ''\n  >>> longestPrefix('')\n  ''\n  */\nconst longestPrefix = (string) => {\n  const len = string.length;\n  if (len === 0) {\n    return '';\n  }\n  const prefix = string.slice(0, 1);\n  return prefix;\n};\n\nmodule.exports = {\n  allPrefixes,\n  longestPrefix\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = ''\n  for (let i = 0; i <= n; i++) {\n    result += i\n  }\n  return result\n}\n\nmodule.exports = {\n  stringSequence\n}\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charArray = string.toUpperCase().split('')\n  let result = 1\n  let char, count, maxCount = 0\n  for (let i = 0; i < charArray.length; i++) {\n    char = charArray[i]\n    count = charArray.indexOf(char)\n    if (count > maxCount) {\n      maxCount = count\n    }\n  }\n  return maxCount\n}\n\n/*\n  # Gives a string, found out how many non-duplicate characters done it consisting of\n  >>> countNonDuplicateCharacters('xyzXYZ')\n  3\n  >>> countNonDuplicateCharacters('zabcabc')\n  1\n  >>> countNonDuplicateCharacters('xYaBCz')\n  3\n  >>> countNonDuplicateCharacters('abcabcab')\n  1\n  */\nconst countNonDuplicateCharacters = (string) => {\n  const charArray = string.toUpperCase().split('')\n  let result = 0\n  for (let i = 0; i < charArray.length; i++) {\n    if (charArray.indexOf(charArray[i])!== i) {\n      result++\n    }\n  }\n  return result\n}\n\nconst word = {\n  name: 'word',\n  description: 'Find the number of characters in a word',\n  inputs: [\n    {\n      name:'string',\n      description: 'The string that you want to search'\n    }\n  ],\n  outputs: [\n    {\n      name: 'int',\n      description: 'The number of characters in the string'\n    }\n  ],\n  eval: (data) => {\n    return countDistinctCharacters(data.string)\n  }\n}\n\nconst letter = {\n  name: 'letter',\n  description: 'Find the number of non-duplicate characters in a string',\n  inputs: [\n    {\n      name:'string',\n      description: 'The string that you want to search'\n    }\n  ],\n  outputs: [\n    {\n      name: 'int',\n      description: 'The number of non-duplicate characters in the string'\n    }\n  ],\n  eval: (data) => {\n    return countNonDuplicateCharacters(data.string)\n  }\n}\n\nconst string = {\n  name:'string',\n  description: 'Find the number of non-duplicate characters in a string',\n  inputs: [\n    {\n      name:'string',\n      description: 'The string that you want to search'\n    }\n  ],\n  outputs: [\n    {\n      name: 'int',\n      description: 'The number of non-duplicate characters in the string'\n    }\n  ],\n  eval: (data) => {\n    return countNonDuplicateCharacters(data.string)\n  }\n}\n\nconst number = {\n  name: 'number',\n  description: 'Find the number of characters in a string',\n  inputs: [\n    {\n      name:'string',\n      description: 'The string that you want to search'\n    }\n  ],\n  outputs: [\n    {\n      name: 'int',\n      description: 'The number of characters in the string'\n    }\n  ],\n  eval: (data) => {\n    return countDistinctCharacters(data.string)\n  }\n}\n\nconst add = {\n  name: 'add',\n  description: 'Find the number of characters in a string',\n  inputs: [\n    {\n      name:'string',\n      description: 'The string that you want to search'\n    }\n  ],\n  outputs: [\n    {\n      name: 'int',\n      description: 'The number of characters in the string'\n    }\n  ],\n  eval: (data) => {\n    return countDistinctCharacters(data.string)\n  }\n}\n\nconst subtract = {\n  name:'subtract',\n  description: 'Find the number of non-duplicate characters in a string',\n  inputs: [\n    {\n      name:'string',\n      description: 'The string that you want to search'\n    }\n  ],\n  outputs: [\n    {\n      name: 'int',\n      description: 'The number of non-duplicate characters in the string'\n    }\n  ],\n  eval: (data) => {\n    return countNonDuplicateCharacters(data.string)\n  }\n}\n\nconst multiply = {\n  name:'multiply',\n  description: 'Find the number of characters in a string',\n  inputs: [\n    {\n      name:'string',\n      description: 'The string that you want to search'\n    }\n  ],\n  outputs: [\n    {\n      name: 'int',\n      description: 'The number of characters in the string'\n    }\n  ],\n  eval: (data) => {\n    return countDistinctCharacters(data.string)\n  }\n}\n\nconst divide = {\n  name: 'divide',\n  description: 'Find the number of non-duplicate characters in a string',\n  inputs: [\n    {\n      name:'string',\n      description: 'The string that you want to search'\n    }\n  ],\n  outputs: [\n    {\n      name: 'int',\n      description: 'The number of non-duplicate characters in the string'\n    }\n  ],\n  eval: (data) => {\n    return countNonDuplicateCharacters(data.string)\n  }\n}\n\nmodule.exports = {\n  word,\n  letter,\n  string,\n  number,\n  add,\n  subtract,\n  multiply,\n  divide\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const pattern = /[o|.]/g;\n  let last_note = 0;\n  let note = 0;\n  const beat_length = 3;\n  const last_beat_length = beat_length;\n  const beats = [];\n\n  music_string = music_string.toLowerCase();\n  music_string = music_string.replace(pattern, \"\");\n\n  for (let i = 0; i < music_string.length; i += 1) {\n    if (music_string[i] === \"o\" || music_string[i] === \".\") {\n      last_note += 1;\n      note = last_note - last_beat_length;\n    } else {\n      last_note = last_beat_length;\n      last_beat_length += 1;\n    }\n    beats.push(note);\n  }\n  return beats;\n};\n\n/*\n  Let's imagine that you have a string representing a piece of music that contains only one note. Your task is to parse the string and find out if it is an octave, a flat, a sharp or a double sharp.\n  \n  >>> parseMusic('o')\n  'octave'\n  >>> parseMusic('f')\n  'flat'\n  >>> parseMusic('s')\n 'sharp'\n  >>> parseMusic('x')\n  'double sharp'\n  \n  Explanation: 'o' - octave, 'f' - flat,'s' - sharp, 'x' - double sharp\n  \n  What if there are multiple notes in the string? \n  \n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  'octave'\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  'octave'\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  'octave'\n  \n  What if the notes are not sorted?\n  \n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  'octave'\n  \n  What if there are no notes in the string?\n  \n  >>> parseMusic(' ')\n  'empty'\n  \n  What if the string is not valid?\n  \n  >>> parseMusic('not valid')\n  'invalid'\n  \n  What if the string is not a music string?\n  \n  >>> parseMusic('nope')\n  'nope'\n  \n  What if the string is empty?\n  \n  >>> parseMusic('')\n  'empty'\n  \n  What if the string is all whitespace?\n  \n  >>> parseMusic('   ')\n  'empty'\n  \n  What if the string is all punctuation marks?\n  \n  >>> parseMusic('!@#$%^&*()')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parseMusic('o f')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parseMusic('o f')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parseMusic('o f')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parseMusic('o f')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parseMusic('o f')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parseMusic('o f')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parseMusic('o f')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parseMusic('o f')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parseMusic('o f')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parseMusic('o f')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parseMusic('o f')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parseMusic('o f')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parseMusic('o f')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parseMusic('o f')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parseMusic('o f')\n  'empty'\n  \n  What if the string contains one of the letters 'o', 'f','s', 'x' or '|'?\n  \n  >>> parse"}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let start = 0;\n  let index = string.indexOf(substring, start);\n  let count = 0;\n\n  while (index!= -1) {\n    count++;\n    start = index + 1;\n    index = string.indexOf(substring, start);\n  }\n\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numberArray = numbers.split(\" \")\n  numberArray.sort((a, b) => {\n    if (a === b) return 0\n    else if (a > b) return -1\n    else return 1\n  })\n  let sortedNumbers = numberArray.join(\" \")\n  return sortedNumbers\n}\n\n/*\n  Function: reverseString\n    Reverse the order of the letters in the input string\n  */\nconst reverseString = (s) => {\n  let newString = \"\"\n  s.split(\"\").reverse().forEach((c) => {\n    newString += c\n  })\n  return newString\n}\n\n/*\n  Function: reverseString2\n    Reverse the order of the letters in the input string\n  */\nconst reverseString2 = (s) => {\n  let newString = \"\"\n  s.split(\"\").reverse().forEach((c) => {\n    newString += c\n  })\n  return newString\n}\n\n/*\n  Function: getString\n    Return the input string in reverse order\n  */\nconst getString = (s) => {\n  return reverseString(s)\n}\n\n/*\n  Function: getString2\n    Return the input string in reverse order\n  */\nconst getString2 = (s) => {\n  return reverseString2(s)\n}\n\n/*\n  Function: getDigit\n    Return the input string in reverse order\n  */\nconst getDigit = (s) => {\n  let numberArray = s.split(\"\")\n  numberArray.reverse()\n  return numberArray.join(\"\")\n}\n\n/*\n  Function: getDigit2\n    Return the input string in reverse order\n  */\nconst getDigit2 = (s) => {\n  let numberArray = s.split(\"\")\n  numberArray.reverse()\n  return numberArray.join(\"\")\n}\n\n/*\n  Function: getNumber\n    Return the input string in reverse order\n  */\nconst getNumber = (s) => {\n  return getDigit(s)\n}\n\n/*\n  Function: getNumber2\n    Return the input string in reverse order\n  */\nconst getNumber2 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber3\n    Return the input string in reverse order\n  */\nconst getNumber3 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber4\n    Return the input string in reverse order\n  */\nconst getNumber4 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber5\n    Return the input string in reverse order\n  */\nconst getNumber5 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber6\n    Return the input string in reverse order\n  */\nconst getNumber6 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber7\n    Return the input string in reverse order\n  */\nconst getNumber7 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber8\n    Return the input string in reverse order\n  */\nconst getNumber8 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber9\n    Return the input string in reverse order\n  */\nconst getNumber9 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber10\n    Return the input string in reverse order\n  */\nconst getNumber10 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber11\n    Return the input string in reverse order\n  */\nconst getNumber11 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber12\n    Return the input string in reverse order\n  */\nconst getNumber12 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber13\n    Return the input string in reverse order\n  */\nconst getNumber13 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber14\n    Return the input string in reverse order\n  */\nconst getNumber14 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber15\n    Return the input string in reverse order\n  */\nconst getNumber15 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber16\n    Return the input string in reverse order\n  */\nconst getNumber16 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber17\n    Return the input string in reverse order\n  */\nconst getNumber17 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber18\n    Return the input string in reverse order\n  */\nconst getNumber18 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber19\n    Return the input string in reverse order\n  */\nconst getNumber19 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber20\n    Return the input string in reverse order\n  */\nconst getNumber20 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber21\n    Return the input string in reverse order\n  */\nconst getNumber21 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber22\n    Return the input string in reverse order\n  */\nconst getNumber22 = (s) => {\n  return getDigit2(s)\n}\n\n/*\n  Function: getNumber23\n    Return"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let closestPair = [];\n  let closestDistance = Infinity;\n\n  // Calculate the closest distance between each number in the list\n  numbers.forEach((number) => {\n    const distance = Math.abs(number - closestPair[1]);\n\n    if (distance < closestDistance) {\n      closestPair = [number, closestPair[1]];\n      closestDistance = distance;\n    }\n  });\n\n  return closestPair;\n};\n\nconst getDirection = (x1, y1, x2, y2) => {\n  // Get the slope of the line formed by the two points\n  const slope = (y2 - y1) / (x2 - x1);\n\n  // If the slope is less than 0, then the line is going down (negative slope)\n  if (slope < 0) {\n    // Calculate the slope at the y-intercept of the line\n    const intercept = y1 - slope * x1;\n\n    // If the intercept is less than the x-coordinate of the first point, then the line is\n    // going left (negative slope)\n    if (intercept < x1) {\n      return \"LEFT\";\n    }\n\n    // If the intercept is greater than the x-coordinate of the second point, then the line is\n    // going right (positive slope)\n    if (intercept > x2) {\n      return \"RIGHT\";\n    }\n  }\n\n  // If the slope is greater than 0, then the line is going up (positive slope)\n  if (slope > 0) {\n    // Calculate the slope at the y-intercept of the line\n    const intercept = y1 + slope * x1;\n\n    // If the intercept is less than the x-coordinate of the first point, then the line is\n    // going left (negative slope)\n    if (intercept < x1) {\n      return \"LEFT\";\n    }\n\n    // If the intercept is greater than the x-coordinate of the second point, then the line is\n    // going right (positive slope)\n    if (intercept > x2) {\n      return \"RIGHT\";\n    }\n  }\n\n  // The slope is equal to zero\n  return \"NONE\";\n};\n\nconst compareDirection = (a, b) => {\n  if (a == \"LEFT\" && b == \"RIGHT\") {\n    return -1;\n  }\n\n  if (a == \"RIGHT\" && b == \"LEFT\") {\n    return 1;\n  }\n\n  if (a == \"LEFT\" && b == \"LEFT\") {\n    return 0;\n  }\n\n  if (a == \"RIGHT\" && b == \"RIGHT\") {\n    return 0;\n  }\n\n  return 0;\n};\n\nconst findLongest = (list) => {\n  let longest = 0;\n  list.forEach((item) => {\n    if (item.length > longest) {\n      longest = item.length;\n    }\n  });\n\n  return longest;\n};\n\nmodule.exports = {\n  findClosestElements,\n  getDirection,\n  findLongest,\n  compareDirection\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let min = Number.MAX_VALUE;\n  let max = Number.MIN_VALUE;\n\n  // min and max are both the smallest and largest number in the list\n  for (let i = 0; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n\n  // The smallest number in the list is the largest - rescale to 1.0\n  let rescaled = (numbers[0] - min) / (max - min);\n\n  // The largest number in the list is the smallest - rescale to 0.0\n  rescaled = 1 - rescaled;\n\n  // Return the list rescaled\n  return numbers.map((number) => rescaled * number);\n};\n\nexport default rescaleToUnit;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const returnList = [];\n  for (const item of values) {\n    if (typeof item === 'number') {\n      returnList.push(item);\n    }\n  }\n  return returnList;\n};\n\n// filterStrings takes a list of strings and returns list of strings\n// that don't start with '!'\nconst filterStrings = (values) => {\n  const returnList = [];\n  for (const item of values) {\n    if (item.indexOf('!') === -1) {\n      returnList.push(item);\n    }\n  }\n  return returnList;\n};\n\n// filterStrings takes a list of strings and returns list of strings\n// that start with '!'\nconst filterNotStrings = (values) => {\n  const returnList = [];\n  for (const item of values) {\n    if (item.indexOf('!') === 0) {\n      returnList.push(item);\n    }\n  }\n  return returnList;\n};\n\n// Filter returns list of integers and strings that start with '!'\nconst filter = (values) => {\n  return filterIntegers(filterStrings(values));\n};\n\n// filterNotStrings returns list of integers and strings that don't start with '!'\nconst filterNotStrings = (values) => {\n  return filterIntegers(filterNotStrings(values));\n};\n\n// filterNotIntegers returns list of strings that don't start with '!'\nconst filterNotIntegers = (values) => {\n  return filterStrings(filterNotIntegers(values));\n};\n\n// main returns list of strings that start with '!'\nconst main = (values) => {\n  return filterNotStrings(values);\n};\n\n// Run\nmain(['a', 3.14, '!abc', {}, []]);\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (!string) {\n    return 0;\n  }\n  return string.length;\n};\n\n// Expose the strlen function.\nexports.strlen = strlen;\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let largest = 0;\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      if (i > largest) {\n        largest = i;\n      }\n    }\n    i++;\n  }\n  return largest;\n};\n\n/*\n  # 1st\n  >>> largestDivisor(2)\n  1\n  >>> largestDivisor(7)\n  1\n  >>> largestDivisor(9)\n  3\n  >>> largestDivisor(10)\n  3\n  >>> largestDivisor(15)\n  5\n  # 2nd\n  >>> largestDivisor(9)\n  3\n  >>> largestDivisor(12)\n  6\n  >>> largestDivisor(14)\n  7\n  >>> largestDivisor(15)\n  5\n  # 3rd\n  >>> largestDivisor(7)\n  1\n  >>> largestDivisor(11)\n  3\n  >>> largestDivisor(12)\n  6\n  >>> largestDivisor(15)\n  5\n  # 4th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 5th\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 6th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 7th\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 8th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 9th\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 10th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 11th\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 12th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 13th\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 14th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 15th\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 16th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 17th\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 18th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 19th\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 20th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 21st\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 22nd\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 23rd\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 24th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 25th\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 26th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 27th\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 28th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 29th\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 30th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 31st\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 32nd\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 33rd\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 34th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 35th\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 36th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 37th\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 38th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 39th\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 40th\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 41st\n  >>> largestDivisor(10)\n  2\n  >>> largestDivisor(15)\n  5\n  # 42nd\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  10\n  # 43rd\n  >>> largestDivisor(10)\n  2\n  >>> largestDivis"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  if (n === 1) return [n]\n  const factors = []\n  let root = n\n  while (root > 1) {\n    const factor = root % n\n    if (factor === 0) root = Math.floor(root / n)\n    else {\n      const count = Math.floor(root / factor)\n      const times = factors.filter((f) => f < count).concat(factor)\n      factors.push(times)\n      root = root / factor\n    }\n  }\n  return factors\n}\n\nmodule.exports = factorize\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueElements = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (uniqueElements.indexOf(numbers[i]) === -1) {\n      uniqueElements.push(numbers[i]);\n    }\n  }\n  return uniqueElements;\n};\n\nexport default removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n    if (typeof string ==='string') {\n        return string.split('').map((ch) => ch === 'a'? 'A' : ch === 'a'? 'a' : ch === 'z'? 'Z' : ch).join('');\n    }\n    else {\n        return string;\n    }\n};\n\n/*\n  >>> flipCase('aBc')\n  'ABC'\n  >>> flipCase('AaBb')\n  'aab'\n  >>> flipCase('zZz')\n  'ZZZ'\n  */\nconst flipCase2 = (string) => {\n    if (typeof string ==='string') {\n        return string.split('').map((ch) => ch === 'a'? 'z' : ch === 'A'? 'a' : ch === 'Z'? 'z' : ch === 'b'? 'B' : ch === 'B'? 'b' : ch === 'c'? 'C' : ch === 'C'? 'c' : ch === 'z'? 'Z' : ch === 'z'? 'z' : ch === 'A'? 'a' : ch === 'a'? 'A' : ch === 'z'? 'Z' : ch === 'Z'? 'z' : ch === 'B'? 'b' : ch === 'b'? 'B' : ch === 'c'? 'C' : ch === 'C'? 'c' : ch === 'z'? 'Z' : ch === 'Z'? 'z' : ch).join('');\n    }\n    else {\n        return string;\n    }\n};\n\nmodule.exports = {\n    flipCase,\n    flipCase2\n};<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, cur) => acc + cur, '');\n};\n\n/*\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, cur) => acc + cur, '');\n};\n\n// Tests\ndescribe('concatenate', () => {\n  it('should concatenate an empty list of strings', () => {\n    expect(concatenate([])).toBe('');\n  });\n\n  it('should concatenate a list of strings', () => {\n    expect(concatenate(['a', 'b', 'c'])).toBe('abc');\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.startsWith(prefix)) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\nmodule.exports = filterByPrefix;\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0)\n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -9, -123, -1, -10]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0)\n}\n\n/*Return only numbers that are even in the list.\n  >>> getEven([1, 2, 3, 4, 5, 6])\n  [2, 4, 6]\n  >>> getEven([2, 3, 4, 5, 6, 7])\n  [2, 4, 6]\n  >>> getEven([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21])\n  [2, 4, 6]\n  >>> getEven([1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59])\n  [2, 4, 6]\n  >>> getEven([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35"}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  const len = n.length\n  if (len < 2) {\n    return false\n  }\n  let i = 2\n  let divisor\n  while (i <= Math.floor(Math.sqrt(n))) {\n    divisor = n % i\n    if (divisor === 0) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\n// const isPrime = (n) => {\n//   let i = 2\n//   let divisor\n//   while (i <= Math.floor(Math.sqrt(n))) {\n//     divisor = n % i\n//     if (divisor === 0) {\n//       return false\n//     }\n//     i += 1\n//   }\n//   return true\n// }\n\n// const isPrime = (n) => {\n//   let i = 2\n//   let divisor\n//   while (i <= Math.floor(Math.sqrt(n))) {\n//     divisor = n % i\n//     if (divisor === 0) {\n//       return false\n//     }\n//     i += 1\n//   }\n//   return true\n// }\n\n// const isPrime = (n) => {\n//   let i = 2\n//   let divisor\n//   while (i <= Math.floor(Math.sqrt(n))) {\n//     divisor = n % i\n//     if (divisor === 0) {\n//       return false\n//     }\n//     i += 1\n//   }\n//   return true\n// }\n\nexport default isPrime\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let l = xs.length - 1;\n  let r = 0;\n  let t = 0;\n  while (r < l) {\n    t = (l + r) / 2;\n    if (poly(xs[t]) === 0) {\n      return xs[t];\n    } else if (poly(xs[t]) < 0) {\n      l = t;\n    } else {\n      r = t;\n    }\n  }\n  return xs[l];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  return l.filter((x, index) => index % 3!== 0)\n     .sort((a, b) => a - b)\n     .map((x, index) => l[index]);\n}\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by five, while its value at the indicies that was divisible by five was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortFive([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> sortFive([1, 2, 3, 4, 8, 9, 5])\n  [5, 1, 2, 3, 4, 8, 9]\n  */\nconst sortFive = (l) => {\n  return l.filter((x, index) => index % 5!== 0)\n     .sort((a, b) => a - b)\n     .map((x, index) => l[index]);\n}\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortFourth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFourth = (l) => {\n  return l.filter((x, index) => index % 3!== 0)\n     .sort((a, b) => a - b)\n     .map((x, index) => l[index]);\n}\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by five, while its value at the indicies that was divisible by five was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortFourth([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> sortFourth([1, 2, 3, 4, 8, 9, 5])\n  [5, 1, 2, 3, 4, 8, 9]\n  */\nconst sortFourth = (l) => {\n  return l.filter((x, index) => index % 5!== 0)\n     .sort((a, b) => a - b)\n     .map((x, index) => l[index]);\n}\n\nconst sort = (l) => {\n  return l.sort((a, b) => a - b);\n}\n\nconst sortBy = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByNumber = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByDate = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByDate = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByTime = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByTime = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByWeight = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByWeight = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByCategory = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByCategory = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByPrice = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByPrice = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortBySize = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortBySize = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByDate = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByDate = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByTime = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByTime = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByWeight = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByWeight = (func) => {\n  return l => l.sort((a, b) => func(a) - func(b));\n}\n\nconst sortByPrice = (func) => {\n  return l => l."}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i])\n    }\n  }\n  return a\n}\n\n/* Return a list with unique elements sorted by their length\n  >>> unique_length([1, 2, 3, 4, 5, 5, 3, 6, 7, 8, 9, 9, 8, 7, 8, 8, 9, 5, 2, 6, 3, 4, 5, 6, 7, 8, 9, 9, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 3, 4, 5, 6, 7, 8, 9,"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = -Infinity\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) max = l[i]\n  }\n  return max\n}\n\n/**\n  * @param {Array} l - List to check.\n  * @return {boolean} - True if list is sorted.\n  * @example\n  *   isSorted([1, 2, 3, 4, 5])\n  *   // -> true\n  *   isSorted([5, 2, 3, 1, 4])\n  *   // -> false\n  * @example\n  *   isSorted([1, 2, 3, 4, 5, 6])\n  *   // -> false\n  */\nconst isSorted = (l) => {\n  let i = 0\n  while (i < l.length) {\n    if (l[i] < l[i + 1]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/**\n  * @param {number} n - The number of elements to check.\n  * @return {boolean} - True if the list is a permutation.\n  * @example\n  *   isPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  *   // -> true\n  *   isPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  *   // -> false\n  * @example\n  *   isPermutation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  *   // -> false\n  */\nconst isPermutation = (n) => {\n  const isPermutation = (l) => {\n    let i = 0\n    let j = 0\n    while (i < l.length) {\n      if (l[i]!= l[j]) {\n        return false\n      }\n      j++\n    }\n    return true\n  }\n  if (n < 2) {\n    return true\n  }\n  const permutation = generatePermutation(n)\n  return isPermutation(permutation)\n}\n\n/**\n  * Generates a permutation from the list of numbers.\n  *\n  * @param {number} n - The number of elements to generate.\n  * @return {Array} - The permutation.\n  * @example\n  *   generatePermutation(2)\n  *   // -> [1, 0]\n  * @example\n  *   generatePermutation(5)\n  *   // -> [1, 3, 2, 0, 4]\n  * @example\n  *   generatePermutation(9)\n  *   // -> [1, 3, 6, 2, 5, 4, 0, 7, 8]\n  */\nconst generatePermutation = (n) => {\n  const l = generateUniqueList(n)\n  let permutation = []\n  let i = 0\n  while (i < n) {\n    permutation.push(l[i])\n    i++\n  }\n  return permutation\n}\n\n/**\n  * Generates a unique list of numbers.\n  *\n  * @param {number} n - The number of elements to generate.\n  * @return {Array} - The list.\n  * @example\n  *   generateUniqueList(2)\n  *   // -> [1, 0]\n  * @example\n  *   generateUniqueList(5)\n  *   // -> [1, 2, 3, 4, 0]\n  * @example\n  *   generateUniqueList(9)\n  *   // -> [1, 2, 3, 6, 4, 5, 7, 8, 0]\n  */\nconst generateUniqueList = (n) => {\n  let list = []\n  for (let i = 0; i < n; i++) {\n    let value = i + 1\n    while (list.indexOf(value)!= -1) {\n      value++\n    }\n    list.push(value)\n  }\n  return list\n}\n\nmodule.exports = {\n  maxElement,\n  isSorted,\n  isPermutation,\n  generatePermutation\n}\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let n1 = Math.floor(n / 11)\n  let n2 = Math.floor(n / 13)\n  let n3 = Math.floor(n / 17)\n  let n4 = Math.floor(n / 19)\n  let n5 = Math.floor(n / 23)\n  let n6 = Math.floor(n / 29)\n  let n7 = Math.floor(n / 31)\n  let n8 = Math.floor(n / 37)\n  let n9 = Math.floor(n / 41)\n  let n10 = Math.floor(n / 43)\n  let n11 = Math.floor(n / 47)\n  let n12 = Math.floor(n / 49)\n  let n13 = Math.floor(n / 51)\n  let n14 = Math.floor(n / 53)\n  let n15 = Math.floor(n / 59)\n  let n16 = Math.floor(n / 61)\n  let n17 = Math.floor(n / 67)\n  let n18 = Math.floor(n / 71)\n  let n19 = Math.floor(n / 73)\n  let n20 = Math.floor(n / 79)\n  let n21 = Math.floor(n / 81)\n  let n22 = Math.floor(n / 89)\n  let n23 = Math.floor(n / 97)\n  let n24 = Math.floor(n / 101)\n  let n25 = Math.floor(n / 103)\n  let n26 = Math.floor(n / 107)\n  let n27 = Math.floor(n / 109)\n  let n28 = Math.floor(n / 113)\n  let n29 = Math.floor(n / 127)\n  let n30 = Math.floor(n / 131)\n  let n31 = Math.floor(n / 137)\n  let n32 = Math.floor(n / 139)\n  let n33 = Math.floor(n / 149)\n  let n34 = Math.floor(n / 151)\n  let n35 = Math.floor(n / 157)\n  let n36 = Math.floor(n / 163)\n  let n37 = Math.floor(n / 167)\n  let n38 = Math.floor(n / 169)\n  let n39 = Math.floor(n / 173)\n  let n40 = Math.floor(n / 179)\n  let n41 = Math.floor(n / 181)\n  let n42 = Math.floor(n / 191)\n  let n43 = Math.floor(n / 193)\n  let n44 = Math.floor(n / 197)\n  let n45 = Math.floor(n / 199)\n  let n46 = Math.floor(n / 211)\n  let n47 = Math.floor(n / 223)\n  let n48 = Math.floor(n / 227)\n  let n49 = Math.floor(n / 229)\n  let n50 = Math.floor(n / 233)\n  let n51 = Math.floor(n / 239)\n  let n52 = Math.floor(n / 241)\n  let n53 = Math.floor(n / 251)\n  let n54 = Math.floor(n / 253)\n  let n55 = Math.floor(n / 257)\n  let n56 = Math.floor(n / 263)\n  let n57 = Math.floor(n / 269)\n  let n58 = Math.floor(n / 271)\n  let n59 = Math.floor(n / 277)\n  let n60 = Math.floor(n / 281)\n  let n61 = Math.floor(n / 283)\n  let n62 = Math.floor(n / 293)\n  let n63 = Math.floor(n / 307)\n  let n64 = Math.floor(n / 311)\n  let n65 = Math.floor(n / 313)\n  let n66 = Math.floor(n / 317)\n  let n67 = Math.floor(n / 329)\n  let n68 = Math.floor(n / 331)\n  let n69 = Math.floor(n / 337)\n  let n70 = Math.floor(n / 347)\n  let n71 = Math.floor(n / 349)\n  let n72 = Math.floor(n / 353)\n  let n73 = Math.floor(n / 359)\n  let n74 = Math.floor(n / 367)\n  let n75 = Math.floor(n / 373)\n  let n76 = Math.floor(n / 379)\n  let n77 = Math.floor(n / 383)\n  let n78 = Math.floor(n / 389)\n  let n79 = Math.floor(n / 391)\n  let n80 = Math.floor(n / 401)\n  let n81 = Math.floor(n / 409)\n  let n82 = Math.floor(n / 419)\n  let n83 = Math.floor(n / 421)\n  let n84 = Math.floor(n / 431)\n  let n85 = Math.floor(n / 433)\n  let n86 = Math.floor(n / 439)\n  let n87 = Math.floor(n / 443)\n  let n88 = Math.floor(n / 447)\n  let n89 = Math.floor(n / 457)\n  let n90 = Math.floor(n / 461)\n  let n91 = Math.floor(n / 463)\n  let n92 = Math.floor(n / 467)\n  let n93 = Math.floor(n / 479)\n  let n94 = Math.floor(n / 481)\n  let n95 = Math.floor(n / 491)\n  let n96 = Math.floor(n / 493)\n  let n97 = Math.floor(n / 499)\n  let n98 = Math.floor(n / 503)\n  let n99 = Math.floor(n / 509)\n  let n100 = Math.floor(n / 521)\n  let n101 = Math.floor(n / 523)\n  let n102 = Math.floor(n / 541)\n  let n103 = Math.floor(n / 547)\n  let n"}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice().reverse()\n  return l.concat(l2.slice(1))\n}\n\nmodule.exports = sortEven\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n var groups = [], groups2 = [];\n for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(Math.min((3 * i + 2), s.length), Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 2) groups2.push(group.slice(0, 2) + group[1] + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n returns an array with all the combinations of possible characters in the given string. */ const allChars = (s) => {\n const chars = [];\n for (const i of s) { chars.push(i); }\n const combinations = [];\n for (const i of chars) {\n for (const j of chars) {\n if (i!= j) { combinations.push([i, j]);\n }\n }\n }\n return combinations;\n}\n\n/*\n  given a list of combinations, this function checks if there is a valid password or not. */ const isValid = (list, validChars) => {\n for (const pair of list) {\n for (const i of validChars) {\n if (pair[0] === i) {\n for (const j of validChars) {\n if (pair[1] === j) {\n return true;\n }\n }\n }\n }\n }\n return false;\n}\n\n/*\n  returns true if the given string contains any of the given characters. */ const contains = (s, chars) => {\n for (const i of chars) {\n if (s.indexOf(i) > -1) {\n return true;\n }\n }\n return false;\n}\n\n/*\n  returns true if the given string contains any of the given characters, or if the string contains\n  one of the given groups of characters. */ const containsAny = (s, chars) => {\n const groups = [], groups2 = [];\n for (const i of chars) {\n if (s.indexOf(i) > -1) {\n groups.push(i);\n }\n }\n for (const group of groups) {\n for (const i of group) {\n if (s.indexOf(i) > -1) {\n groups2.push(i);\n }\n }\n }\n if (groups2.length > 0) {\n return true;\n }\n return false;\n}\n\n/*\n  returns true if the given string contains any of the given characters, or if the string contains\n  one of the given groups of characters. */ const containsAny = (s, chars) => {\n const groups = [], groups2 = [];\n for (const i of chars) {\n if (s.indexOf(i) > -1) {\n groups.push(i);\n }\n }\n for (const group of groups) {\n for (const i of group) {\n if (s.indexOf(i) > -1) {\n groups2.push(i);\n }\n }\n }\n if (groups2.length > 0) {\n return true;\n }\n return false;\n}\n\n/*\n  returns true if the given string contains any of the given characters, or if the string contains\n  one of the given groups of characters. */ const containsAny = (s, chars) => {\n const groups = [], groups2 = [];\n for (const i of chars) {\n if (s.indexOf(i) > -1) {\n groups.push(i);\n }\n }\n for (const group of groups) {\n for (const i of group) {\n if (s.indexOf(i) > -1) {\n groups2.push(i);\n }\n }\n }\n if (groups2.length > 0) {\n return true;\n }\n return false;\n}\n\n/*\n  returns true if the given string contains any of the given characters, or if the string contains\n  one of the given groups of characters. */ const containsAny = (s, chars) => {\n const groups = [], groups2 = [];\n for (const i of chars) {\n if (s.indexOf(i) > -1) {\n groups.push(i);\n }\n }\n for (const group of groups) {\n for (const i of group) {\n if (s.indexOf(i) > -1) {\n groups2.push(i);\n }\n }\n }\n if (groups2.length > 0) {\n return true;\n }\n return false;\n}\n\n/*\n  returns true if the given string contains any of the given characters, or if the string contains\n  one of the given groups of characters. */ const containsAny = (s, chars) => {\n const groups = [], groups2 = [];\n for (const i of chars) {\n if (s.indexOf(i) > -1) {\n groups.push(i);\n }\n }\n for (const group of groups) {\n for (const i of group) {\n if (s.indexOf(i) > -1) {\n groups2.push(i);\n }\n }\n }\n if (groups2.length > 0) {\n return true;\n }\n return false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let f = 0;\n  let p = 0;\n\n  while (f < n) {\n    p = f + f;\n    f = p;\n  }\n\n  return p;\n};\n\nexport default primeFib;<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const arr = Array.from(l).filter((i) => i > 0)\n  const uniqueElements = Array.from(arr.map((i) => i * i).filter((i) => i < 10000000))\n  const sum = uniqueElements.reduce((sum, i) => sum + i)\n  return sum === 0\n}\n\n/*\n  largestTriplet takes a list of integers as an input. it returning the largest triplet of integers that sums to zero.\n  >>> largestTriplet([1, 3, 5, 7])\n  [1, 3, 5]\n  >>> largestTriplet([1, 3, -2, 1])\n  [1, 3]\n  >>> largestTriplet([1, 2, 3, 7])\n  []\n  >>> largestTriplet([2, 4, -5, 3, 9, 7])\n  [2, 4, 9]\n  >>> largestTriplet([1])\n  []\n  */\nconst largestTriplet = (l) => {\n  const arr = Array.from(l).filter((i) => i > 0)\n  const uniqueElements = Array.from(arr.map((i) => i * i).filter((i) => i < 10000000))\n  const sum = uniqueElements.reduce((sum, i) => sum + i)\n  const largestTriplet = []\n  if (sum === 0) {\n    return largestTriplet\n  }\n  uniqueElements.forEach((element, index) => {\n    const subSum = sum - element\n    if (subSum === 0) {\n      largestTriplet.push([element, index])\n    }\n  })\n  return largestTriplet\n}\n\n/*\n  largestTriplet takes a list of integers as an input. it returning the largest triplet of integers that sums to zero.\n\n  >>> largestTriplet([1, 3, 5, 7])\n  [1, 3, 5]\n  >>> largestTriplet([1, 3, -2, 1])\n  [1, 3]\n  >>> largestTriplet([1, 2, 3, 7])\n  []\n  >>> largestTriplet([2, 4, -5, 3, 9, 7])\n  [2, 4, 9]\n  >>> largestTriplet([1])\n  []\n  */\nconst largestTriplet2 = (l) => {\n  const arr = Array.from(l).filter((i) => i > 0)\n  const uniqueElements = Array.from(arr.map((i) => i * i).filter((i) => i < 10000000))\n  const sum = uniqueElements.reduce((sum, i) => sum + i)\n  const largestTriplet = []\n  if (sum === 0) {\n    return largestTriplet\n  }\n  uniqueElements.forEach((element, index) => {\n    const subSum = sum - element\n    if (subSum === 0) {\n      largestTriplet.push([element, index])\n    }\n  })\n  return largestTriplet\n}\n\n/*\n  largestTriplet takes a list of integers as an input. it returning the largest triplet of integers that sums to zero.\n\n  >>> largestTriplet([1, 3, 5, 7])\n  [1, 3, 5]\n  >>> largestTriplet([1, 3, -2, 1])\n  [1, 3]\n  >>> largestTriplet([1, 2, 3, 7])\n  []\n  >>> largestTriplet([2, 4, -5, 3, 9, 7])\n  [2, 4, 9]\n  >>> largestTriplet([1])\n  []\n  */\nconst largestTriplet3 = (l) => {\n  const arr = Array.from(l).filter((i) => i > 0)\n  const uniqueElements = Array.from(arr.map((i) => i * i).filter((i) => i < 10000000))\n  const sum = uniqueElements.reduce((sum, i) => sum + i)\n  const largestTriplet = []\n  if (sum === 0) {\n    return largestTriplet\n  }\n  uniqueElements.forEach((element, index) => {\n    const subSum = sum - element\n    if (subSum === 0) {\n      largestTriplet.push([element, index])\n    }\n  })\n  return largestTriplet\n}\n\n/*\n  largestTriplet takes a list of integers as an input. it returning the largest triplet of integers that sums to zero.\n\n  >>> largestTriplet([1, 3, 5, 7])\n  [1, 3, 5]\n  >>> largestTriplet([1, 3, -2, 1])\n  [1, 3]\n  >>> largestTriplet([1, 2, 3, 7])\n  []\n  >>> largestTriplet([2, 4, -5, 3, 9, 7])\n  [2, 4, 9]\n  >>> largestTriplet([1])\n  []\n  */\nconst largestTriplet4 = (l) => {\n  const arr = Array.from(l).filter((i) => i > 0)\n  const uniqueElements = Array.from(arr.map((i) => i * i).filter((i) => i < 10000000))\n  const sum = uniqueElements.reduce((sum, i) => sum + i)\n  const largestTriplet = []\n  if (sum === 0) {\n    return largestTriplet\n  }\n  uniqueElements.forEach((element, index) => {\n    const subSum = sum - element\n    if (subSum === 0) {\n      largestTriplet.push([element, index])\n    }\n  })\n  return largestTriplet\n}\n\n/*\n  largestTriplet takes a list of integers as an input. it returning the largest triplet of integers that sums to zero.\n\n  >>> largestTriplet([1, 3, 5, 7])\n  [1, 3, 5]\n  >>> largestTri"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n    let colliding = false;\n    const cars = [];\n    const x = [];\n    const y = [];\n    const c = [];\n    const r = [];\n\n    for (let i = 0; i < n; i++) {\n        cars.push(i);\n        x.push(Math.random() * (2 * n - 1) - n);\n        y.push(Math.random() * (2 * n - 1) - n);\n        c.push(Math.random() * 4);\n        r.push(Math.random() * 4);\n    }\n\n    for (let i = 0; i < n; i++) {\n        cars.push(cars[n - 1]);\n        x.push(x[cars.length - 1]);\n        y.push(y[cars.length - 1]);\n        c.push(c[cars.length - 1]);\n        r.push(r[cars.length - 1]);\n    }\n\n    for (let i = 0; i < n; i++) {\n        cars.push(cars[cars.length - 1]);\n        x.push(x[cars.length - 1]);\n        y.push(y[cars.length - 1]);\n        c.push(c[cars.length - 1]);\n        r.push(r[cars.length - 1]);\n    }\n\n    const len = cars.length;\n    for (let i = 0; i < len; i++) {\n        for (let j = i + 1; j < len; j++) {\n            if (x[i] === x[j] && y[i] === y[j] && c[i] === c[j] && r[i] === r[j]) {\n                colliding = true;\n            }\n        }\n    }\n    return colliding;\n}\n\nmodule.exports = carRaceCollision;\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [...l];\n  const newLen = result.length + 1;\n  while (result.length < newLen) {\n    result.push(result[result.length - 1] + 1);\n  }\n  return result;\n};\n\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    l = l.sort((a, b) => { return a - b; });\n    for (let i = 0; i < l.length - 1; i += 2) {\n        if (l[i + 1] == 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  findPairsSumToZero takes a list of integers as an input. it returns the sum of the first pair that sum to zero, if there was one, or 0 if there wasn't.\n  >>> findPairsSumToZero([1, 3, 5, 0])\n  0\n  >>> findPairsSumToZero([1, 3, -2, 1])\n  1\n  >>> findPairsSumToZero([1, 2, 3, 7])\n  0\n  >>> findPairsSumToZero([2, 4, -5, 3, 5, 7])\n  12\n  >>> findPairsSumToZero([1])\n  0\n  */\nconst findPairsSumToZero = (l) => {\n    l = l.sort((a, b) => { return a - b; });\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i += 2) {\n        if (l[i + 1] == 0) {\n            return sum;\n        }\n        sum += l[i + 1];\n    }\n    return 0;\n};\n\n/*\n  main takes a list of numbers as an argument. it returns true if there was one pair that sum to zero, and false otherwise.\n  >>> main([1, 3, 5, 0])\n  false\n  >>> main([1, 3, -2, 1])\n  true\n  >>> main([1, 2, 3, 7])\n  false\n  >>> main([2, 4, -5, 3, 5, 7])\n  true\n  >>> main([1])\n  false\n  */\nconst main = (l) => {\n    return pairsSumToZero(l) && findPairsSumToZero(l)!= 0;\n};\n\nmodule.exports = main;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let str = '';\n  while(x>0){\n    str = String(x%base) + str;\n    x = Math.floor(x/base);\n  }\n  return str;\n};\n\nconst reverse = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return reversed;\n};\n\n// tests\nconsole.log(changeBase(8, 3));\nconsole.log(changeBase(8, 2));\nconsole.log(changeBase(7, 2));\nconsole.log(changeBase(5, 2));\nconsole.log(changeBase(3, 2));\nconsole.log(changeBase(4, 2));\nconsole.log(changeBase(3, 3));\nconsole.log(changeBase(6, 3));\nconsole.log(changeBase(1, 2));\nconsole.log(changeBase(8, 1));\nconsole.log(changeBase(9, 1));\nconsole.log(changeBase(9, 2));\nconsole.log(changeBase(9, 3));\nconsole.log(changeBase(9, 4));\nconsole.log(changeBase(9, 5));\nconsole.log(changeBase(9, 6));\nconsole.log(changeBase(9, 7));\nconsole.log(changeBase(9, 8));\nconsole.log(changeBase(9, 9));\nconsole.log(changeBase(9, 10));\nconsole.log(changeBase(9, 11));\nconsole.log(changeBase(9, 12));\nconsole.log(changeBase(9, 13));\nconsole.log(changeBase(9, 14));\nconsole.log(changeBase(9, 15));\nconsole.log(changeBase(9, 16));\nconsole.log(changeBase(9, 17));\nconsole.log(changeBase(9, 18));\nconsole.log(changeBase(9, 19));\nconsole.log(changeBase(9, 20));\nconsole.log(changeBase(9, 21));\nconsole.log(changeBase(9, 22));\nconsole.log(changeBase(9, 23));\nconsole.log(changeBase(9, 24));\nconsole.log(changeBase(9, 25));\nconsole.log(changeBase(9, 26));\nconsole.log(changeBase(9, 27));\nconsole.log(changeBase(9, 28));\nconsole.log(changeBase(9, 29));\nconsole.log(changeBase(9, 30));\nconsole.log(changeBase(9, 31));\nconsole.log(changeBase(9, 32));\nconsole.log(changeBase(9, 33));\nconsole.log(changeBase(9, 34));\nconsole.log(changeBase(9, 35));\nconsole.log(changeBase(9, 36));\nconsole.log(changeBase(9, 37));\nconsole.log(changeBase(9, 38));\nconsole.log(changeBase(9, 39));\nconsole.log(changeBase(9, 40));\nconsole.log(changeBase(9, 41));\nconsole.log(changeBase(9, 42));\nconsole.log(changeBase(9, 43));\nconsole.log(changeBase(9, 44));\nconsole.log(changeBase(9, 45));\nconsole.log(changeBase(9, 46));\nconsole.log(changeBase(9, 47));\nconsole.log(changeBase(9, 48));\nconsole.log(changeBase(9, 49));\nconsole.log(changeBase(9, 50));\nconsole.log(changeBase(9, 51));\nconsole.log(changeBase(9, 52));\nconsole.log(changeBase(9, 53));\nconsole.log(changeBase(9, 54));\nconsole.log(changeBase(9, 55));\nconsole.log(changeBase(9, 56));\nconsole.log(changeBase(9, 57));\nconsole.log(changeBase(9, 58));\nconsole.log(changeBase(9, 59));\nconsole.log(changeBase(9, 60));\nconsole.log(changeBase(9, 61));\nconsole.log(changeBase(9, 62));\nconsole.log(changeBase(9, 63));\nconsole.log(changeBase(9, 64));\nconsole.log(changeBase(9, 65));\nconsole.log(changeBase(9, 66));\nconsole.log(changeBase(9, 67));\nconsole.log(changeBase(9, 68));\nconsole.log(changeBase(9, 69));\nconsole.log(changeBase(9, 70));\nconsole.log(changeBase(9, 71));\nconsole.log(changeBase(9, 72));\nconsole.log(changeBase(9, 73));\nconsole.log(changeBase(9, 74));\nconsole.log(changeBase(9, 75));\nconsole.log(changeBase(9, 76));\nconsole.log(changeBase(9, 77));\nconsole.log(changeBase(9, 78));\nconsole.log(changeBase(9, 79));\nconsole.log(changeBase(9, 80));\nconsole.log(changeBase(9, 81));\nconsole.log(changeBase(9, 82));\nconsole.log(changeBase(9, 83));\nconsole.log(changeBase(9, 84));\nconsole.log(changeBase(9, 85));\nconsole.log(changeBase(9, 86));\nconsole.log(changeBase(9, 87));\nconsole.log(changeBase(9, 88));\nconsole.log(changeBase(9, 89));\nconsole.log(changeBase(9, 90));\nconsole.log(changeBase(9, 91));\nconsole.log(changeBase(9, 92));\nconsole.log(changeBase(9, 93));\nconsole.log(changeBase(9, 94));\nconsole.log(changeBase(9, 95));\nconsole.log(changeBase(9, 96));\nconsole.log(changeBase(9, 97));\nconsole.log(changeBase(9, 98));\nconsole.log(changeBase(9, 99));\nconsole.log(changeBase(9, 100));\nconsole.log(changeBase(9, 101));\nconsole.log(changeBase(9, 102));\nconsole.log(changeBase(9, 103));\nconsole.log(change"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs(a * h / 2);\n};\n\n/*\n  Given a triangle area and the sides a, b, c,\n  calculate the area of the parallelogram that\n  has three given points.\n  */\nconst calculateParallelogramArea = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea2 = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea3 = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea4 = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea5 = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea6 = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea7 = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea8 = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea9 = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea10 = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea11 = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea12 = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea13 = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea14 = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea15 = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a, c);\n};\n\n/*\n  Given the sides of a rectangle and the side of a triangle\n  calculate the area of the rectangle that has\n  three given points.\n  */\nconst calculateRectangleArea16 = (a, b, c, area) => {\n  return area - triangleArea(a, b) - triangleArea(b, c) + triangleArea(a"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n <= 2) {\n        return 1;\n    } else {\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    }\n}\n\nconst fib4_iterative = (n) => {\n    let result = 1;\n    let i = 0;\n\n    while (i < n) {\n        result = result + result;\n        i++;\n    }\n\n    return result;\n}\n\nconst fib4_recursive = (n) => {\n    if (n <= 2) {\n        return 1;\n    } else {\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    }\n}\n\nconsole.log(fib4(6));\nconsole.log(fib4_iterative(6));\nconsole.log(fib4_recursive(6));<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const len = l.length;\n  if (len === 0) return NaN;\n  const half = len >> 1;\n  const left = median(l.slice(0, half));\n  const right = median(l.slice(half));\n  return (left + right) / 2;\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let char = text.split('').map(c => c.charAt(0)).join('')\n  let len = text.length\n\n  if (len % 2) return false\n\n  if (text[0] === text[len - 1]) {\n    return true\n  } else {\n    return false\n  }\n}\n\nmodule.exports = isPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    if (n == 0) return 0\n    if (n < 0) return modp(-n, p)\n    let remainder = n\n    while (remainder >= p) {\n        remainder -= p\n    }\n    return remainder\n}\n\n/**\n  * Return 2^n modulo p (is aware of numerics).\n  *\n  * @param {Number} n\n  * @param {Number} p\n  * @return {Number}\n  */\nexport const modp2 = (n, p) => {\n    if (n < 0) return modp2(-n, p)\n    let remainder = n\n    while (remainder >= p) {\n        remainder -= p\n    }\n    return remainder\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\");\n } /* takes as input string encoding with decode_shift functions. Returns decoding string. */ const decode = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with decode functions. Returns decoding string. */ const encode = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode functions. Returns encoding string. */\n\nconst encode_shift = (s) => { return encodeShift(encodeShift(s)); }\n\nconst decode_shift = (s) => { return decodeShift(decodeShift(s)); }\n\nconst decode = (s) => { return decodeShift(decodeShift(s)); }\n\nconst encode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst encode_shift_to_decode = (s) => { return decodeShift(encodeShift(s)); }\n\nconst decode_shift_to_encode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst decode_to_encode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst encode_to_decode = (s) => { return decodeShift(encodeShift(s)); }\n\nconst decode_to_shift = (s) => { return decodeShift(encodeShift(s)); }\n\nconst shift_to_encode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst encode_to_shift = (s) => { return decodeShift(encodeShift(s)); }\n\nconst encode_to_shift_to_decode = (s) => { return decodeShift(encodeShift(s)); }\n\nconst decode_to_shift_to_encode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst decode_to_shift_to_encode_to_decode = (s) => { return decodeShift(encodeShift(s)); }\n\nconst encode_to_shift_to_decode = (s) => { return decodeShift(encodeShift(s)); }\n\nconst decode_to_shift_to_encode_to_decode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst decode_to_shift_to_encode_to_decode_to_encode = (s) => { return decodeShift(encodeShift(s)); }\n\nconst encode_to_shift_to_decode_to_encode = (s) => { return decodeShift(encodeShift(s)); }\n\nconst decode_to_shift_to_encode_to_encode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst decode_to_shift_to_encode_to_encode_to_decode = (s) => { return decodeShift(encodeShift(s)); }\n\nconst decode_to_shift_to_encode_to_decode_to_encode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst encode_to_shift_to_decode_to_encode_to_decode = (s) => { return decodeShift(encodeShift(s)); }\n\nconst decode_to_shift_to_encode_to_encode_to_decode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst encode_to_shift_to_decode_to_encode_to_decode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst decode_to_shift_to_encode_to_encode_to_decode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst decode_to_shift_to_encode_to_decode_to_encode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst encode_to_shift_to_decode_to_encode_to_decode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst decode_to_shift_to_encode_to_encode_to_decode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst decode_to_shift_to_encode_to_decode_to_encode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst encode_to_shift_to_decode_to_encode_to_decode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst decode_to_shift_to_encode_to_encode_to_decode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst decode_to_shift_to_encode_to_decode_to_encode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst encode_to_shift_to_decode_to_encode_to_decode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst decode_to_shift_to_encode_to_encode_to_decode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst decode_to_shift_to_encode_to_decode_to_encode = (s) => { return encodeShift(decodeShift(s)); }\n\nconst decode"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    return text.replace(new RegExp(`[${vowels.join(\"\")}]`, \"g\"), '')\n}\n\n/*\n  removePunctuation is a function that takes string and returns string without punctuation.\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuation('abcdef')\n  'abcdef'\n  >>> removePunctuation('aaaaa')\n  'aaaaa'\n  >>> removePunctuation('aaBAA')\n  'aBAA'\n  >>> removePunctuation('zbcd')\n  'zbcd'\n  */\nconst removePunctuation = (text) => {\n    let punctuation = [\"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"-\",\"_\",\"=\",\"+\",\"{\",\"}\",\"[\",\"]\",\"<\",\">\",\"\\\\\",\"|\",\"/\",\":\",\";\",\"\\\"\",\"\\'\",\"?\",\"`\",\"~\",\"_\"]\n    return text.replace(new RegExp(`[${punctuation.join(\"\")}]`, \"g\"), '')\n}\n\nconst removeSpaces = (text) => {\n    return text.replace(/\\s/g, '')\n}\n\nconst removeNumbers = (text) => {\n    return text.replace(/\\d/g, '')\n}\n\nconst removeWords = (text) => {\n    return text.replace(/\\w+/g, '')\n}\n\n/*\n  removeSpacesAndNumbers is a function that takes string and returns string without spaces and numbers.\n  >>> removeSpacesAndNumbers('')\n  ''\n  >>> removeSpacesAndNumbers(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeSpacesAndNumbers('abcdef')\n  'abcdef'\n  >>> removeSpacesAndNumbers('aaaaa')\n  'aaaaa'\n  >>> removeSpacesAndNumbers('aaBAA')\n  'aBAA'\n  >>> removeSpacesAndNumbers('zbcd')\n  'zbcd'\n  */\nconst removeSpacesAndNumbers = (text) => {\n    let spaceAndNumbers = [\" \", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    return text.replace(new RegExp(`[${spaceAndNumbers.join(\"\")}]`, \"g\"), '')\n}\n\n/*\n  removePunctuationAndNumbers is a function that takes string and returns string without punctuation and numbers.\n  >>> removePunctuationAndNumbers('')\n  ''\n  >>> removePunctuationAndNumbers(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuationAndNumbers('abcdef')\n  'abcdef'\n  >>> removePunctuationAndNumbers('aaaaa')\n  'aaaaa'\n  >>> removePunctuationAndNumbers('aaBAA')\n  'aBAA'\n  >>> removePunctuationAndNumbers('zbcd')\n  'zbcd'\n  */\nconst removePunctuationAndNumbers = (text) => {\n    let spaceAndNumbers = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \" \"]\n    return text.replace(new RegExp(`[${spaceAndNumbers.join(\"\")}]`, \"g\"), '')\n}\n\n/*\n  removePunctuationAndNumbersAndSpaces is a function that takes string and returns string without punctuation, spaces, and numbers.\n  >>> removePunctuationAndNumbersAndSpaces('')\n  ''\n  >>> removePunctuationAndNumbersAndSpaces(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removePunctuationAndNumbersAndSpaces('abcdef')\n  'abcdef'\n  >>> removePunctuationAndNumbersAndSpaces('aaaaa')\n  'aaaaa'\n  >>> removePunctuationAndNumbersAndSpaces('aaBAA')\n  'aBAA'\n  >>> removePunctuationAndNumbersAndSpaces('zbcd')\n  'zbcd'\n  */\nconst removePunctuationAndNumbersAndSpaces = (text) => {\n    let spaceAndNumbers = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \" \"]\n    return text.replace(new RegExp(`[${spaceAndNumbers.join(\"\")}]`, \"g\"), '')\n}\n\nconst removeSpacesAndNumbersAndWords = (text) => {\n    let spaceAndNumbers = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \" \"]\n    let words = [\"abcdef\", \"ghijklm\", \"abcd\", \"jklm\", \"aBcD\", \"aBcDd\", \"aBcDe\", \"abcd\", \"aBcD\", \"aBcDd\", \"aBcDe\", \"abcd\", \"aBcD\", \"aBcDd\", \"aBcDe\"]\n    return text.replace(new RegExp(`[${spaceAndNumbers.join(\"\")}]`, \"g\"), '').replace(new RegExp(`[${words.join(\"\")}]`, \"g\"), '')\n}\n\n/*\n  removeSpacesAndNumbersAndPunctuation is a function that takes string and returns string without spaces, numbers, and punctuation.\n  >>> removeSpacesAndNumbersAndPunctuation('')\n  ''\n  >>> removeSpacesAndNumbersAndPunctuation(\"abcdef\\nghijklm\")"}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.reduce((carry, val) => {\n    if (carry) {\n      return val < t;\n    } else {\n      return val <= t;\n    }\n  }, true);\n};\n\n/*\n  Returns true if the sum of the numbers in the list l was below threshold t.\n  >>> belowSumThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowSumThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowSumThreshold = (l, t) => {\n  return l.reduce((carry, val) => {\n    if (carry) {\n      return val + l.reduce((carry, val) => {\n        return val < t;\n      }, 0) < t;\n    } else {\n      return val + l.reduce((carry, val) => {\n        return val <= t;\n      }, 0) <= t;\n    }\n  }, true);\n};\n\n/*\n  Returns true if the product of the numbers in the list l was below threshold t.\n  >>> belowProductThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowProductThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowProductThreshold = (l, t) => {\n  return l.reduce((carry, val) => {\n    if (carry) {\n      return val * l.reduce((carry, val) => {\n        return val < t;\n      }, 1) < t;\n    } else {\n      return val * l.reduce((carry, val) => {\n        return val <= t;\n      }, 1) <= t;\n    }\n  }, true);\n};\n\n/*\n  Returns true if the sum of the squares of the numbers in the list l was below threshold t.\n  >>> belowSumSquaresThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowSumSquaresThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowSumSquaresThreshold = (l, t) => {\n  return l.reduce((carry, val) => {\n    if (carry) {\n      return val + l.reduce((carry, val) => {\n        return val * val < t;\n      }, 0) < t;\n    } else {\n      return val + l.reduce((carry, val) => {\n        return val * val <= t;\n      }, 0) <= t;\n    }\n  }, true);\n};\n\n/*\n  Returns true if the sum of the squares of the numbers in the list l was below threshold t.\n  >>> belowSumSquaresThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowSumSquaresThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowSumOfSquaresThreshold = (l, t) => {\n  return l.reduce((carry, val) => {\n    if (carry) {\n      return val + l.reduce((carry, val) => {\n        return val * val <= t;\n      }, 0) <= t;\n    } else {\n      return val + l.reduce((carry, val) => {\n        return val * val < t;\n      }, 0) < t;\n    }\n  }, true);\n};\n\n/*\n  Returns true if the sum of the squares of the numbers in the list l was below threshold t.\n  >>> belowSumSquaresThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowSumSquaresThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowSumOfSquaresThreshold = (l, t) => {\n  return l.reduce((carry, val) => {\n    if (carry) {\n      return val + l.reduce((carry, val) => {\n        return val * val < t;\n      }, 0) < t;\n    } else {\n      return val + l.reduce((carry, val) => {\n        return val * val <= t;\n      }, 0) < t;\n    }\n  }, true);\n};\n\nmodule.exports = {\n  sum: sumThreshold,\n  sumThreshold,\n  product: productThreshold,\n  productThreshold,\n  sumSquares: sumSquaresThreshold,\n  sumSquaresThreshold,\n  sumOfSquares: sumOfSquaresThreshold,\n  sumOfSquaresThreshold,\n  belowThreshold: belowThreshold,\n  belowThreshold,\n  belowSumThreshold: belowSumThreshold,\n  belowSumThreshold,\n  belowSumSquaresThreshold: belowSumSquaresThreshold,\n  belowSumSquaresThreshold,\n  belowSumOfSquaresThreshold: belowSumOfSquaresThreshold,\n  belowSumOfSquaresThreshold,\n  belowProductThreshold: belowProductThreshold,\n  belowProductThreshold,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst subtract = (x, y) => {\n  return x - y;\n};\n\nconst multiply = (x, y) => {\n  return x * y;\n};\n\nconst divide = (x, y) => {\n  return x / y;\n};\n\n// tests\n\n//Tests: add two numbers\nconst add2 = (x, y) => {\n  return add(x, y);\n};\n\n//Tests: subtract two numbers\nconst subtract2 = (x, y) => {\n  return subtract(x, y);\n};\n\n//Tests: multiply two numbers\nconst multiply2 = (x, y) => {\n  return multiply(x, y);\n};\n\n//Tests: divide two numbers\nconst divide2 = (x, y) => {\n  return divide(x, y);\n};\n\nconst getFraction = (numerator, denominator) => {\n  return (numerator / denominator);\n};\n\n//Tests: get fraction from a value\nconst getFraction2 = (numerator, denominator) => {\n  return (numerator / denominator);\n};\n\n// tests\n\n//Tests: get fraction from a value\nconst getFraction3 = (numerator, denominator) => {\n  return getFraction(numerator, denominator);\n};\n\n//Tests: add two numbers\nconst add3 = (x, y) => {\n  return add(x, y);\n};\n\n//Tests: subtract two numbers\nconst subtract3 = (x, y) => {\n  return subtract(x, y);\n};\n\n//Tests: multiply two numbers\nconst multiply3 = (x, y) => {\n  return multiply(x, y);\n};\n\n//Tests: divide two numbers\nconst divide3 = (x, y) => {\n  return divide(x, y);\n};\n\n// tests\n\n//Tests: add two numbers\nconst add4 = (x, y) => {\n  return add(x, y);\n};\n\n//Tests: subtract two numbers\nconst subtract4 = (x, y) => {\n  return subtract(x, y);\n};\n\n//Tests: multiply two numbers\nconst multiply4 = (x, y) => {\n  return multiply(x, y);\n};\n\n//Tests: divide two numbers\nconst divide4 = (x, y) => {\n  return divide(x, y);\n};\n\n// tests\n\n//Tests: add two numbers\nconst add5 = (x, y) => {\n  return add(x, y);\n};\n\n//Tests: subtract two numbers\nconst subtract5 = (x, y) => {\n  return subtract(x, y);\n};\n\n//Tests: multiply two numbers\nconst multiply5 = (x, y) => {\n  return multiply(x, y);\n};\n\n//Tests: divide two numbers\nconst divide5 = (x, y) => {\n  return divide(x, y);\n};\n\n// tests\n\n//Tests: add two numbers\nconst add6 = (x, y) => {\n  return add(x, y);\n};\n\n//Tests: subtract two numbers\nconst subtract6 = (x, y) => {\n  return subtract(x, y);\n};\n\n//Tests: multiply two numbers\nconst multiply6 = (x, y) => {\n  return multiply(x, y);\n};\n\n//Tests: divide two numbers\nconst divide6 = (x, y) => {\n  return divide(x, y);\n};\n\n// tests\n\n//Tests: add two numbers\nconst add7 = (x, y) => {\n  return add(x, y);\n};\n\n//Tests: subtract two numbers\nconst subtract7 = (x, y) => {\n  return subtract(x, y);\n};\n\n//Tests: multiply two numbers\nconst multiply7 = (x, y) => {\n  return multiply(x, y);\n};\n\n//Tests: divide two numbers\nconst divide7 = (x, y) => {\n  return divide(x, y);\n};\n\n// tests\n\n//Tests: add two numbers\nconst add8 = (x, y) => {\n  return add(x, y);\n};\n\n//Tests: subtract two numbers\nconst subtract8 = (x, y) => {\n  return subtract(x, y);\n};\n\n//Tests: multiply two numbers\nconst multiply8 = (x, y) => {\n  return multiply(x, y);\n};\n\n//Tests: divide two numbers\nconst divide8 = (x, y) => {\n  return divide(x, y);\n};\n\n// tests\n\n//Tests: add two numbers\nconst add9 = (x, y) => {\n  return add(x, y);\n};\n\n//Tests: subtract two numbers\nconst subtract9 = (x, y) => {\n  return subtract(x, y);\n};\n\n//Tests: multiply two numbers\nconst multiply9 = (x, y) => {\n  return multiply(x, y);\n};\n\n//Tests: divide two numbers\nconst divide9 = (x, y) => {\n  return divide(x, y);\n};\n\n// tests\n\n//Tests: add two numbers\nconst add10 = (x, y) => {\n  return add(x, y);\n};\n\n//Tests: subtract two numbers\nconst subtract10 = (x, y) => {\n  return subtract(x, y);\n};\n\n//Tests: multiply two numbers\nconst multiply10 = (x, y) => {\n  return multiply(x, y);\n};\n\n//Tests: divide two numbers\nconst divide10 = (x, y) => {\n  return divide(x, y);\n};\n\n// tests\n\n//Tests: add two numbers\nconst add11 = (x, y) => {\n  return add(x, y);\n};\n\n//Tests: subtract two numbers\nconst subtract11 = (x, y) => {\n  return subtract(x, y);\n};\n\n//Tests: multiply two numbers\nconst multiply11 = (x, y) => {\n  return multiply(x, y);\n};\n\n//Tests: divide two numbers\nconst divide11 = (x"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) return false\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false\n  }\n  return true\n}\n\n/*\n  Check if two word is the same, ignoring case.\n  >>> sameIgnoreCase('ABCD', 'aBCD')\n  true\n  >>> sameIgnoreCase('eabcd', 'dddddddabc')\n  false\n  >>> sameIgnoreCase('ABCD', 'eabcd')\n  false\n  >>> sameIgnoreCase('eabcd', 'ABCD')\n  true\n  >>> sameIgnoreCase('eabcd', 'aBCD')\n  true\n  >>> sameIgnoreCase('eabcd', 'aBCD')\n  true\n  >>> sameIgnoreCase('abcd', 'ABCD')\n  true\n  >>> sameIgnoreCase('eabcd', 'dddddddabce')\n  false\n  */\nconst sameIgnoreCase = (s0, s1) => {\n  const len0 = s0.length\n  const len1 = s1.length\n  if (len0!== len1) return false\n  for (let i = 0; i < len0; i++) {\n    if (s0[i].toUpperCase()!== s1[i].toUpperCase()) return false\n  }\n  return true\n}\n\nmodule.exports = {\n  sameChars,\n  sameIgnoreCase\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib_rec(10)\n  55\n  >>> fib_rec(1)\n  1\n  >>> fib_rec(8)\n  21\n  */\nconst fib_rec = (n) => {\n  if (n <= 1) return 1\n  return fib_rec(n - 1) + fib_rec(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib_rec2(10)\n  55\n  >>> fib_rec2(1)\n  1\n  >>> fib_rec2(8)\n  21\n  */\nconst fib_rec2 = (n) => {\n  if (n <= 1) return 1\n  return fib_rec2(n - 1) + fib_rec2(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib_rec3(10)\n  55\n  >>> fib_rec3(1)\n  1\n  >>> fib_rec3(8)\n  21\n  */\nconst fib_rec3 = (n) => {\n  if (n <= 1) return 1\n  return fib_rec3(n - 1) + fib_rec3(n - 2)\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib_iter(10)\n  55\n  >>> fib_iter(1)\n  1\n  >>> fib_iter(8)\n  21\n  */\nconst fib_iter = (n) => {\n  if (n <= 1) return 1\n  var x = 0\n  var y = 1\n  for (var i = 0; i < n - 1; i++) {\n    x = y\n    y = x + y\n  }\n  return x\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib_iter2(10)\n  55\n  >>> fib_iter2(1)\n  1\n  >>> fib_iter2(8)\n  21\n  */\nconst fib_iter2 = (n) => {\n  if (n <= 1) return 1\n  var x = 0\n  var y = 1\n  for (var i = 0; i < n - 1; i++) {\n    x = y\n    y = x + y\n  }\n  return x\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib_iter3(10)\n  55\n  >>> fib_iter3(1)\n  1\n  >>> fib_iter3(8)\n  21\n  */\nconst fib_iter3 = (n) => {\n  if (n <= 1) return 1\n  var x = 0\n  var y = 1\n  for (var i = 0; i < n - 1; i++) {\n    x = y\n    y = x + y\n  }\n  return x\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib_iter4(10)\n  55\n  >>> fib_iter4(1)\n  1\n  >>> fib_iter4(8)\n  21\n  */\nconst fib_iter4 = (n) => {\n  if (n <= 1) return 1\n  var x = 0\n  var y = 1\n  var z = 1\n  var t = 0\n  for (var i = 0; i < n - 1; i++) {\n    x = y\n    y = z\n    z = t + x\n    t = y\n  }\n  return z\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib_iter5(10)\n  55\n  >>> fib_iter5(1)\n  1\n  >>> fib_iter5(8)\n  21\n  */\nconst fib_iter5 = (n) => {\n  if (n <= 1) return 1\n  var x = 0\n  var y = 1\n  var z = 1\n  var t = 0\n  var u = 1\n  for (var i = 0; i < n - 1; i++) {\n    x = y\n    y = z\n    z = t + u\n    t = u\n    u = y\n  }\n  return z\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib_iter6(10)\n  55\n  >>> fib_iter6(1)\n  1\n  >>> fib_iter6(8)\n  21\n  */\nconst fib_iter6 = (n) => {\n  if (n <= 1) return 1\n  var x = 0\n  var y = 1\n  var z = 1\n  var t = 0\n  var u = 1\n  var v = 0\n  for (var i = 0; i < n - 1; i++) {\n    x = y\n    y = z\n    z = t + u\n    t = u\n    u = v\n    v = y\n  }\n  return z\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib_iter7(10)\n  55\n  >>> fib_iter7(1)\n  1\n  >>> fib_iter7(8)\n  21\n  */\nconst fib_iter7 = (n) => {\n  if (n <= 1) return 1\n  var x = 0\n  var y = 1\n  var z = 1\n  var t = 0\n  var u = 1\n  var v = 0\n  var w = 0\n  for (var i = 0; i < n - 1; i++) {\n    x = y\n    y = z\n    z = t + u\n    t = u\n    u = v\n    v = w\n    w = y\n  }\n  return z\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib_iter8(10)\n  55\n  >>> fib_iter8(1)\n  1\n  >>> fib_iter8(8)\n  21\n  */\nconst fib_iter8 = (n) => {\n  if (n <= 1) return 1\n  var x = 0\n  var y = 1\n  var z = 1\n  var t = 0\n  var u = 1\n  var v = 0\n  var w = 0\n  var u2"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  let i = 0\n  let j = 0\n  while (i < brackets.length) {\n    const char = brackets[i]\n    if (char === \"<\") {\n      stack.push(char)\n      i++\n      continue\n    }\n    if (char === \">\") {\n      const top = stack.pop()\n      if (top!== \"<\") {\n        return false\n      }\n      j++\n    }\n  }\n  if (stack.length!== 0) {\n    return false\n  }\n  return j === brackets.length\n}\n\nmodule.exports = correctBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    let result = true\n    for (let i = 1; i < l.length; i++) {\n        if (l[i - 1] >= l[i]) {\n            result = false\n            break\n        }\n    }\n    return result\n}\n\nmodule.exports = monotonic\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const isEqual = (a, b) => a === b\n  const commonElements = l1.filter((e, i) => isEqual(l2.indexOf(e), i))\n  const uniqueElements = []\n  const uniqueCount = 0\n  for (let i = 0; i < l2.length; i++) {\n    if (isEqual(commonElements.indexOf(l2[i]), i)) {\n      uniqueCount++\n      uniqueElements.push(l2[i])\n    }\n  }\n  return uniqueElements\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let sqrtn = Math.sqrt(n)\n  for (let i = 2; i <= sqrtn; i++) {\n    if (n % i === 0) {\n      return largestPrimeFactor(i)\n    }\n  }\n  return n\n}\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst getNumberOfPrimes = (n) => {\n  if (isPrime(n)) {\n    return 1\n  }\n  let i = largestPrimeFactor(n)\n  let count = 0\n  while (n > i) {\n    n /= i\n    count += 1\n  }\n  return count\n}\n\nconst test = () => {\n  let primeCount = getNumberOfPrimes(10000)\n  console.log(primeCount)\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  sum_to_n_prime is a functions that summing numbers from 1 to n\n  and find the sum of prime numbers from 1 to n.\n  >>> sum_to_n_prime(30)\n  {2: 15, 3: 50, 5: 210, 7: 343, 11: 675, 13: 1345, 17: 2417, 19: 3585,\n   21: 4641, 23: 6635, 29: 9587, 31: 12351, 33: 15805, 37: 19801,\n   41: 22461, 43: 27001, 47: 30251, 53: 34385, 59: 38211, 61: 41945,\n   67: 47451, 71: 51201, 73: 54841, 79: 59181, 83: 62795, 89: 67891,\n   97: 72825, 101: 78911, 103: 83731, 107: 88281, 109: 92537, 113:\n   96281, 127: 100001, 131: 103341, 137: 106365, 139: 108361, 149:\n   111601, 151: 113745, 157: 116599, 163: 120139, 167: 123525, 169:\n   126791, 173: 129641, 179: 132701, 181: 135945, 191: 140199, 193:\n   143361, 197: 146625, 199: 148641, 211: 151701, 223: 154549, 227:\n   157499, 229: 159489, 233: 162481, 239: 166465, 241: 169851, 251:\n   173325, 257: 176791, 263: 180661, 269: 184329, 271: 187901, 277:\n   191665, 283: 194749, 293: 196825, 307: 199361, 311: 202095, 313:\n   205321, 317: 208749, 331: 212989, 337: 216465, 347: 220001, 349:\n   223361, 353: 226701, 359: 229861, 367: 232825, 373: 236499, 379:\n   240365, 383: 243849, 389: 247225, 397: 250601, 403: 253989, 409:\n   257325, 417: 260361, 431: 263701, 433: 266945, 439: 268989, 443:\n   272265, 449: 276001, 457: 279549, 461: 282925, 463: 286499, 467:\n   289865, 479: 293225, 487: 296699, 491: 299489, 499: 302881, 503:\n   306225, 509: 309699, 517: 312965, 527: 316361, 539: 321701, 541:\n   326345, 547: 329601, 557: 333989, 563: 336649, 569: 340125, 587:\n   343599, 593: 347161, 599: 350865, 601: 354229, 607: 357701, 613:\n   361199, 619: 365261, 637: 370521, 641: 373989, 647: 378649, 653:\n   381325, 659: 384899, 661: 388325, 663: 391781, 667: 395229, 671:\n   398389, 673: 401661, 677: 404925, 683: 408499, 691: 412961, 701:\n   415325, 709: 421701, 717: 426345, 719: 429601, 727: 433989, 733:\n   438649, 739: 441225, 743: 446199, 751: 451199, 757: 455261, 761:\n   459001, 763: 462165, 767: 466329, 769: 469899, 773: 475989, 779:\n   480361, 787: 483725, 797: 487099, 809: 490465, 811: 493829, 823:\n   497225, 827: 501001, 829: 503469, 839: 506849, 853: 509221, 857:\n   511601, 859: 514675, 863: 518849, 877: 522425, 881: 525899, 883:\n   529965, 887: 534429, 907: 537901, 911: 541289, 919: 545661, 929:\n   548225, 937: 550801, 941: 553269, 947: 556649, 953: 559221, 967:\n   560701, 971: 563989, 977: 567565, 991: 571449, 997: 575025, 999:\n   580699, 1009: 584329, 1013: 587701, 1019: 591069, 1021: 594361,\n   1031: 598225, 1033: 601001, 1039: 603489, 1049: 606865, 1051:\n   609225, 1061: 612999, 1063: 615661, 1067: 618249, 1069: 622225,\n   1087: 624999, 1091: 627665, 1093: 631129, 1097: 634525, 1099:\n   638999, 1101: 642465, 1103: 646249, 1107: 648925, 1131: 650801,\n   1133: 653269, 1137: 656655, 1141: 659221, 1147: 662805, 1151:\n   666269, 1153: 668249, 1159: 671825, 1163: 675001, 1177: 678989,\n   1181: 682465, 1187: 686049"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketsStack = brackets.split(\"()\")\n  let stack = []\n  for (let i = 0; i < bracketsStack.length; i++) {\n    stack.push(bracketsStack[i].split(\"(\"))\n    stack[stack.length - 1].push(bracketsStack[i].split(\")\"))\n    stack[stack.length - 1][stack[stack.length - 1].length - 1].pop()\n    stack[stack.length - 1][stack[stack.length - 1].length - 1].pop()\n  }\n  for (let i = 0; i < bracketsStack.length; i++) {\n    if (stack[stack.length - 1][i].length > 0) {\n      return false\n    }\n  }\n  return true\n}\n\nexport default {\n  correctBracketing,\n  countSubStrings,\n  findSubString\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n    let N = xs.length\n    let d = new Array(N)\n    for (let i = N - 1; i >= 0; i--) {\n        let ds = xs[i]\n        for (let j = N - 1; j >= i + 1; j--) {\n            ds = ds * j\n            d[j] = d[j] + ds\n        }\n        d[i] = d[i] + 1\n    }\n    return d\n}\n\nexport {\n    derivative,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fib1 = 0\n  let fib2 = 1\n  let i = 2\n\n  while(i <= n) {\n    fib1 = fib1 + fib2\n    fib2 = fib2 + fib1\n    i++\n  }\n\n  return fib1\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (isVowel(s[i])) {\n      result.push(s[i]);\n    }\n  }\n  if (s.length > 1 && isVowel(s[s.length - 1])) {\n    result.push(s[s.length - 1]);\n  }\n  return result.length;\n};\n\nfunction isVowel(ch) {\n  return ch === 'a' || ch === 'e' || ch === 'i' || ch === 'o' || ch === 'u';\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  return (x << shift) | (x >>> (32 - shift));\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst modulus = (x, y) => {\n  return x % y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst lessThan = (x, y) => {\n  return x < y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst greaterThan = (x, y) => {\n  return x > y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst lessThanOrEqualTo = (x, y) => {\n  return x <= y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst greaterThanOrEqualTo = (x, y) => {\n  return x >= y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst equals = (x, y) => {\n  return x == y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst notEquals = (x, y) => {\n  return x!= y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst bitwiseAnd = (x, y) => {\n  return x & y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst bitwiseOr = (x, y) => {\n  return x | y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst bitwiseXor = (x, y) => {\n  return x ^ y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst bitwiseLeftShift = (x, y) => {\n  return x << y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst bitwiseRightShift = (x, y) => {\n  return x >> y;\n};\n\nexport {\n  circularShift,\n  add,\n  subtract,\n  multiply,\n  divide,\n  modulus,\n  lessThan,\n  greaterThan,\n  lessThanOrEqualTo,\n  greaterThanOrEqualTo,\n  equals,\n  notEquals,\n  bitwiseAnd,\n  bitwiseOr,\n  bitwiseXor,\n  bitwiseLeftShift,\n  bitwiseRightShift\n};\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0\n  for (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i) - 55\n  }\n  return sum\n}\n\nconst task = (arr) => {\n  const sum = 0\n  for (let i = 0; i < arr.length; i += 1) {\n    sum += digitSum(arr[i])\n  }\n  return sum\n}\n\nconsole.log(task([\"a\", \"b\", \"c\", \"d\", \"e\"]))\nconsole.log(task([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\nconsole.log(task([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\nconsole.log(task([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\nconsole.log(task([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]))\nconsole.log(task([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  const result = []\n  for (let i = 0; i < n; i++) {\n    result.push(s.split('').map((x) => parseInt(x, 10)))\n  }\n  return {\n    fruit: result.reduce((a, b) => {\n      return a + b[0] + b[1]\n    }, 0),\n    total: result.reduce((a, b) => {\n      return a + b[0] + b[1] + b[2]\n    }, 0)\n  }\n}\n\nconst solution = fruitDistribution('1 apple and 1 oranges', 1)\nconsole.log(solution)\n\n/*\n\nsolution\n{\n  fruit: 1,\n  total: 1\n}\n\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const nodes = arr.filter((node) => node > 0)\n  const smallest = nodes.reduce((smallest, node) => {\n    if (node % 2 === 0) {\n      if (smallest < node) {\n        smallest = node\n      }\n    }\n    return smallest\n  })\n\n  return [smallest, nodes.map((node) => node === smallest? 0 : node)]\n}\n\nexport { pluck }\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const freq = (lst.map((x) => x.length))\n  const res = []\n  for (let i = 0; i < lst.length; i++) {\n    if (freq[i] >= lst[i]) {\n      res.push(lst[i])\n    }\n  }\n  return res.length? res[0] : -1\n}\n\nexport default search\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return []\n  }\n\n  // Get min and max values\n  const min = Math.min(...lst)\n  const max = Math.max(...lst)\n\n  const sorted = lst.sort((a, b) => {\n    return a - b\n  })\n\n  const result = [min,...sorted.slice(1), max]\n\n  return result\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (isNaN(a) || isNaN(b) || isNaN(c)) {\n    return -1;\n  }\n  const s1 = (a + b + c) / 2;\n  const s2 = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n  const s3 = (s1 + s2) / 2;\n  if (s1 === s2 || s2 === s3 || s3 === s1) {\n    return s3;\n  }\n  return -1;\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let res = true;\n  let result = true;\n  if (typeof q === 'number') {\n    if (q < 0) {\n      res = false;\n    } else {\n      result = q === w && (q + q + q) < w;\n    }\n  } else if (typeof q === 'object') {\n    for (let i = 0; i < q.length; i++) {\n      if (q[i] < 0) {\n        res = false;\n      } else {\n        result = q[i] === w && (q[i] + q[i] + q[i]) < w;\n      }\n    }\n  }\n  return res && result;\n};\n\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 1));\nconsole.log(willItFly([3], 5));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const changeCount = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    let diff = arr[i] - arr[i + 1];\n    if (diff < 0) {\n      arr[i] += diff;\n      changeCount++;\n    }\n  }\n  return changeCount;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2])); // 1\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 3])); // 2\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 4])); // 3\nconsole.log(smallestChange([1, 2, 3, 4, 3, 3, 4])); // 4\nconsole.log(smallestChange([1, 2, 3, 4, 4, 3, 4])); // 5\nconsole.log(smallestChange([1, 2, 3, 4, 4, 3, 3])); // 0\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return lst1;\n  if (lst1.length === 1 && lst2.length === 1) return lst1;\n  const num = lst1.length;\n  let count = 0;\n  let match = [];\n  for (let i = 0; i < num; i++) {\n    for (let j = 0; j < num; j++) {\n      if (lst1[i] === lst2[j]) {\n        count++;\n      }\n    }\n  }\n  if (count === num) return lst1;\n  for (let i = 0; i < num; i++) {\n    if (lst1[i] === lst2[0]) {\n      match.push(lst1[i]);\n      return match;\n    }\n  }\n  return lst1;\n};\n\nexport default totalMatch;<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const primes = new Array(100).fill(0)\n  const i = 2\n  const j = 100\n  while (i < j) {\n    const p = i\n    while (p * p <= a) {\n      primes[p] = 1\n      p = p * 2\n    }\n    i++\n  }\n  for (let p of primes) {\n    if (a % p === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nexport {\n  isMultiplyPrime,\n  isPrime\n}\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (Math.pow(x, n) === x) {\n    return true;\n  }\n  return false;\n};\n\n/*\n * Your task is to write a function that returns true if given number is power of two and false in other case.\n * For example:\n * isPowerOfTwo(1) => false\n * isPowerOfTwo(3) => true\n * isPowerOfTwo(4) => false\n * isPowerOfTwo(8) => true\n * isPowerOfTwo(9) => false\n */\nconst isPowerOfTwo = (x) => {\n  if (x === 0) {\n    return false;\n  }\n  while (x!== 1) {\n    if (x % 2!== 0) {\n      return false;\n    }\n    x /= 2;\n  }\n  return true;\n};\n\n/*\n * Your task is to write a function that returns true if given number is prime and false in other case.\n * For example:\n * isPrime(1) => false\n * isPrime(2) => true\n * isPrime(3) => false\n * isPrime(4) => true\n * isPrime(5) => false\n * isPrime(6) => true\n * isPrime(8) => false\n * isPrime(9) => false\n */\nconst isPrime = (x) => {\n  if (x < 2) {\n    return false;\n  }\n  for (let i = 2; i < x; i++) {\n    if (x % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n * Your task is to write a function that returns true if given number is palindrome and false in other case.\n * For example:\n * isPalindrome(1221) => true\n * isPalindrome(121221) => false\n * isPalindrome(121221) => false\n */\nconst isPalindrome = (x) => {\n  if (x.toString().split('').reverse().join('')!== x) {\n    return false;\n  }\n  return true;\n};\n\n/*\n * Your task is to write a function that returns true if given number is an even number and false in other case.\n * For example:\n * isEven(1) => true\n * isEven(2) => false\n * isEven(3) => true\n * isEven(4) => false\n */\nconst isEven = (x) => {\n  if (x % 2 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n * Your task is to write a function that returns true if given number is an odd number and false in other case.\n * For example:\n * isOdd(1) => false\n * isOdd(2) => true\n * isOdd(3) => false\n * isOdd(4) => true\n */\nconst isOdd = (x) => {\n  if (x % 2!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n * Your task is to write a function that returns true if given number is a power of two and false in other case.\n * For example:\n * isPowerOfTwo(1) => false\n * isPowerOfTwo(2) => true\n * isPowerOfTwo(3) => false\n * isPowerOfTwo(4) => true\n * isPowerOfTwo(8) => false\n */\nconst isPowerOfTwo = (x) => {\n  if (x === 0) {\n    return false;\n  }\n  while (x!== 1) {\n    if (x % 2!== 0) {\n      return false;\n    }\n    x /= 2;\n  }\n  return true;\n};\n\n/*\n * Your task is to write a function that returns true if given number is prime and false in other case.\n * For example:\n * isPrime(1) => false\n * isPrime(2) => true\n * isPrime(3) => false\n * isPrime(4) => true\n * isPrime(5) => false\n * isPrime(6) => true\n * isPrime(8) => false\n */\nconst isPrime = (x) => {\n  if (x < 2) {\n    return false;\n  }\n  for (let i = 2; i < x; i++) {\n    if (x % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n * Your task is to write a function that returns true if given number is a palindrome and false in other case.\n * For example:\n * isPalindrome(1221) => true\n * isPalindrome(121221) => false\n * isPalindrome(121221) => false\n */\nconst isPalindrome = (x) => {\n  if (x.toString().split('').reverse().join('')!== x) {\n    return false;\n  }\n  return true;\n};\n\n/*\n * Your task is to write a function that returns true if given number is an even number and false in other case.\n * For example:\n * isEven(1) => true\n * isEven(2) => false\n * isEven(3) => true\n * isEven(4) => false\n */\nconst isEven = (x) => {\n  if (x % 2 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n * Your task is to write a function that returns true if given number is an odd number and false in other case.\n * For example:\n * isOdd(1) => false\n * isOdd(2) => true\n * isOdd(3) => false\n * isOdd(4) => true\n */\nconst isOdd = (x) => {\n  if (x % 2!== 0) {\n    return true;\n  }\n  return false;\n};\n\n/*"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if(a <= 0) return false;\n  let result = false;\n  for(let i = 1; i < a; i++){\n    result = result || (a%i === 0);\n  }\n  return result;\n};\n\nconsole.log(iscube(12));\nconsole.log(iscube(64));\nconsole.log(iscube(180));\nconsole.log(iscube(15));\nconsole.log(iscube(1));\nconsole.log(iscube(18));\nconsole.log(iscube(0));\nconsole.log(iscube(1));\nconsole.log(iscube(7));\nconsole.log(iscube(13));\nconsole.log(iscube(0));\nconsole.log(iscube(9));\nconsole.log(iscube(11));\nconsole.log(iscube(5));\nconsole.log(iscube(3));\nconsole.log(iscube(6));\nconsole.log(iscube(2));\nconsole.log(iscube(16));\nconsole.log(iscube(10));\nconsole.log(iscube(20));\nconsole.log(iscube(12));\nconsole.log(iscube(32));\nconsole.log(iscube(18));\nconsole.log(iscube(30));\nconsole.log(iscube(22));\nconsole.log(iscube(42));\nconsole.log(iscube(24));\nconsole.log(iscube(36));\nconsole.log(iscube(48));\nconsole.log(iscube(56));\nconsole.log(iscube(64));\nconsole.log(iscube(72));\nconsole.log(iscube(76));\nconsole.log(iscube(88));\nconsole.log(iscube(96));\nconsole.log(iscube(104));\nconsole.log(iscube(112));\nconsole.log(iscube(128));\nconsole.log(iscube(144));\nconsole.log(iscube(160));\nconsole.log(iscube(176));\nconsole.log(iscube(192));\nconsole.log(iscube(208));\nconsole.log(iscube(224));\nconsole.log(iscube(240));\nconsole.log(iscube(256));\nconsole.log(iscube(272));\nconsole.log(iscube(288));\nconsole.log(iscube(304));\nconsole.log(iscube(320));\nconsole.log(iscube(336));\nconsole.log(iscube(352));\nconsole.log(iscube(368));\nconsole.log(iscube(384));\nconsole.log(iscube(400));\nconsole.log(iscube(416));\nconsole.log(iscube(432));\nconsole.log(iscube(448));\nconsole.log(iscube(464));\nconsole.log(iscube(480));\nconsole.log(iscube(496));\nconsole.log(iscube(512));\nconsole.log(iscube(528));\nconsole.log(iscube(544));\nconsole.log(iscube(560));\nconsole.log(iscube(576));\nconsole.log(iscube(592));\nconsole.log(iscube(608));\nconsole.log(iscube(624));\nconsole.log(iscube(640));\nconsole.log(iscube(656));\nconsole.log(iscube(672));\nconsole.log(iscube(688));\nconsole.log(iscube(704));\nconsole.log(iscube(720));\nconsole.log(iscube(736));\nconsole.log(iscube(752));\nconsole.log(iscube(768));\nconsole.log(iscube(784));\nconsole.log(iscube(800));\nconsole.log(iscube(816));\nconsole.log(iscube(832));\nconsole.log(iscube(848));\nconsole.log(iscube(864));\nconsole.log(iscube(880));\nconsole.log(iscube(896));\nconsole.log(iscube(912));\nconsole.log(iscube(928));\nconsole.log(iscube(944));\nconsole.log(iscube(960));\nconsole.log(iscube(976));\nconsole.log(iscube(992));\nconsole.log(iscube(1008));\nconsole.log(iscube(1024));\nconsole.log(iscube(1040));\nconsole.log(iscube(1056));\nconsole.log(iscube(1072));\nconsole.log(iscube(1088));\nconsole.log(iscube(1104));\nconsole.log(iscube(1120));\nconsole.log(iscube(1136));\nconsole.log(iscube(1152));\nconsole.log(iscube(1168));\nconsole.log(iscube(1184));\nconsole.log(iscube(1200));\nconsole.log(iscube(1216));\nconsole.log(iscube(1232));\nconsole.log(iscube(1248));\nconsole.log(iscube(1264));\nconsole.log(iscube(1280));\nconsole.log(iscube(1296));\nconsole.log(iscube(1312));\nconsole.log(iscube(1328));\nconsole.log(iscube(1344));\nconsole.log(iscube(1360));\nconsole.log(iscube(1376));\nconsole.log(iscube(1392));\nconsole.log(iscube(1408));\nconsole.log(iscube(1424));\nconsole.log(iscube(1440));\nconsole.log(iscube(1456));\nconsole.log(iscube(1472));\nconsole.log(iscube(1488));\nconsole.log(iscube(1504));\nconsole.log(iscube(1520));\nconsole.log(iscube(1536));\nconsole.log(iscube(1552));\nconsole.log(iscube(1568));\nconsole.log(iscube(1584));\nconsole.log(iscube(1600));\nconsole.log(iscube(1616));\nconsole.log(iscube(16"}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const number = parseInt(num, 16);\n  const primeNumbers = [];\n  let numberOfDigits = 1;\n  for (let i = number; i >= 1; i--) {\n    if (number % i === 0) {\n      primeNumbers.push(i);\n      numberOfDigits++;\n    }\n  }\n  return primeNumbers.length === numberOfDigits;\n};\n\n//console.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  if(decimal === 0) {\n    return \"db\"\n  }\n  if(decimal === 1) {\n    return \"1db\"\n  }\n\n  const decimalToBinary = (decimal, binary) => {\n    if(decimal === 0) {\n      return binary + \"db\"\n    }\n    if(decimal === 1) {\n      return binary + \"1db\"\n    }\n    return decimalToBinary(Math.floor(decimal / 2), binary + \"0\") + binary + \"1db\"\n  }\n  return decimalToBinary(decimal, \"0\")\n}\n\n//This is a test function to test the convert function\nconsole.log(decimalToBinary(15))\nconsole.log(decimalToBinary(32))\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let map = {};\n  let len = s.length;\n  let check = 0;\n  let isHappy = true;\n  for (let i = 0; i < len; i++) {\n    if (map[s[i]]) {\n      check++;\n    } else {\n      map[s[i]] = true;\n      check = 1;\n    }\n    if (check === 3) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\nconsole.log(isHappy(\"a\"));\nconsole.log(isHappy(\"aa\"));\nconsole.log(isHappy(\"abcd\"));\nconsole.log(isHappy(\"aabb\"));\nconsole.log(isHappy(\"adb\"));\nconsole.log(isHappy(\"xyy\"));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const grade = grades.sort((a, b) => b - a)\n  const letterGrade = grade.map((g) => {\n    if (g >= 3.7) return 'A+'\n    if (g >= 3.3) return 'A'\n    if (g >= 3.0) return 'B'\n    if (g >= 2.7) return 'B-'\n    if (g >= 2.3) return 'C-'\n    if (g >= 2.0) return 'C'\n    if (g >= 1.7) return 'D-'\n    if (g >= 1.3) return 'D'\n    if (g >= 1.0) return 'E'\n  })\n  return letterGrade\n}\n\nconst letterGrade = (grades) => {\n  const letterGrade = grades.map((g) => {\n    if (g >= 3.7) return 'A'\n    if (g >= 3.3) return 'B'\n    if (g >= 3.0) return 'C'\n    if (g >= 2.7) return 'D'\n    if (g >= 2.3) return 'E'\n  })\n  return letterGrade\n}\n\nconst letterGrade2 = (grades) => {\n  const grade = grades.sort((a, b) => b - a)\n  const letterGrade = grade.map((g) => {\n    if (g >= 3.7) return 'A+'\n    if (g >= 3.3) return 'A'\n    if (g >= 3.0) return 'B'\n    if (g >= 2.7) return 'B-'\n    if (g >= 2.3) return 'C-'\n    if (g >= 2.0) return 'C'\n    if (g >= 1.7) return 'D-'\n    if (g >= 1.3) return 'D'\n    if (g >= 1.0) return 'E'\n  })\n  return letterGrade\n}\n\nconst letterGrade3 = (grades) => {\n  const grade = grades.sort((a, b) => b - a)\n  const letterGrade = grade.map((g) => {\n    if (g >= 3.7) return 'A+'\n    if (g >= 3.3) return 'A'\n    if (g >= 3.0) return 'B'\n    if (g >= 2.7) return 'B-'\n    if (g >= 2.3) return 'C-'\n    if (g >= 2.0) return 'C'\n    if (g >= 1.7) return 'D-'\n    if (g >= 1.3) return 'D'\n    if (g >= 1.0) return 'E'\n  })\n  return letterGrade\n}\n\nconst letterGrade4 = (grades) => {\n  const grade = grades.sort((a, b) => b - a)\n  const letterGrade = grade.map((g) => {\n    if (g >= 3.7) return 'A+'\n    if (g >= 3.3) return 'A'\n    if (g >= 3.0) return 'B'\n    if (g >= 2.7) return 'B-'\n    if (g >= 2.3) return 'C-'\n    if (g >= 2.0) return 'C'\n    if (g >= 1.7) return 'D-'\n    if (g >= 1.3) return 'D'\n    if (g >= 1.0) return 'E'\n  })\n  return letterGrade\n}\n\nconst letterGrade5 = (grades) => {\n  const grade = grades.sort((a, b) => b - a)\n  const letterGrade = grade.map((g) => {\n    if (g >= 3.7) return 'A+'\n    if (g >= 3.3) return 'A'\n    if (g >= 3.0) return 'B'\n    if (g >= 2.7) return 'B-'\n    if (g >= 2.3) return 'C-'\n    if (g >= 2.0) return 'C'\n    if (g >= 1.7) return 'D-'\n    if (g >= 1.3) return 'D'\n    if (g >= 1.0) return 'E'\n  })\n  return letterGrade\n}\n\nconst letterGrade6 = (grades) => {\n  const grade = grades.sort((a, b) => b - a)\n  const letterGrade = grade.map((g) => {\n    if (g >= 3.7) return 'A+'\n    if (g >= 3.3) return 'A'\n    if (g >= 3.0) return 'B'\n    if (g >= 2.7) return 'B-'\n    if (g >= 2.3) return 'C-'\n    if (g >= 2.0) return 'C'\n    if (g >= 1.7) return 'D-'\n    if (g >= 1.3) return 'D'\n    if (g >= 1.0) return 'E'\n  })\n  return letterGrade\n}\n\nconst letterGrade7 = (grades) => {\n  const grade = grades.sort((a, b) => b - a)\n  const letterGrade = grade.map((g) => {\n    if (g >= 3.7) return 'A+'\n    if (g >= 3.3) return 'A'\n    if (g >= 3.0) return 'B'\n    if (g >= 2.7) return 'B-'\n    if (g >= 2.3) return 'C-'\n    if (g >= 2.0) return 'C'\n    if (g >= 1.7)"}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const testString = string.split(\"\");\n  const count = testString.length;\n  let isPrime = true;\n  for (let i = 0; i < count; i += 1) {\n    if (testString[i] === \"\") {\n      continue;\n    }\n    let counter = 0;\n    for (let j = 0; j < count; j += 1) {\n      if (testString[i] === testString[j] && j!== i) {\n        counter += 1;\n      }\n    }\n    if (counter!== 1) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nexport default primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n    let result = 0;\n    for (let i = 1; i <= n; i++) {\n        result += (i - 1).toString().length === n? 1 : 0;\n    }\n    return result;\n};\n\nconst solution = startsOneEnds(10);\nconsole.log(solution); // 2\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let totalDigits = 0;\n  for (let i = N; i > 0; i -= 1) {\n    totalDigits += i % 10;\n  }\n  return totalDigits;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  return lst.filter(v => v % 2 === 0)\n     .reduce((acc, val) => acc + val, 0);\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let chars = [...s.split(\" \")]\n  let words = []\n  for(let i = 0; i < chars.length; i++){\n    let index = chars.indexOf(chars[i])\n    words.push(chars[index + 1])\n    chars.splice(index, 1)\n    chars.splice(index, 0, chars[i])\n  }\n  return words.join(\" \")\n}\n\n// console.log(antiShuffle(\"hello\"))\n// console.log(antiShuffle(\"Hello World!!!\"))\n// console.log(antiShuffle(\"Hi\"))\n// console.log(antiShuffle(\"He\"))\n\n/*\n  Write a function that checks if a string is a palindrome.\n  */\nconst isPalindrome = (s) => {\n  let chars = [...s.split(\" \")]\n  for(let i = 0; i < chars.length / 2; i++){\n    if(chars[i]!== chars[chars.length - 1 - i]){\n      return false\n    }\n  }\n  return true\n}\n\n// console.log(isPalindrome(\"Hello World\"))\n// console.log(isPalindrome(\"I\"))\n// console.log(isPalindrome(\"a b\"))\n// console.log(isPalindrome(\"A b c\"))\n// console.log(isPalindrome(\"a B c\"))\n// console.log(isPalindrome(\"abc\"))\n// console.log(isPalindrome(\"a b c\"))\n// console.log(isPalindrome(\"a b c d\"))\n// console.log(isPalindrome(\"a b c d e\"))\n\n/*\n  Write a function that checks if a string is a permutation of the original.\n  */\nconst isPermutation = (s) => {\n  let chars = [...s.split(\" \")]\n  let words = []\n  for(let i = 0; i < chars.length; i++){\n    let index = chars.indexOf(chars[i])\n    words.push(chars[index + 1])\n    chars.splice(index, 1)\n    chars.splice(index, 0, chars[i])\n  }\n  for(let i = 0; i < chars.length; i++){\n    if(chars[i]!== words[i]){\n      return false\n    }\n  }\n  return true\n}\n\n// console.log(isPermutation(\"a b c\"))\n// console.log(isPermutation(\"a b c d\"))\n// console.log(isPermutation(\"a b c d e\"))\n// console.log(isPermutation(\"a b c d e f\"))\n// console.log(isPermutation(\"a b c d e f g\"))\n// console.log(isPermutation(\"a b c d e f g h\"))\n// console.log(isPermutation(\"a b c d e f g h i\"))\n// console.log(isPermutation(\"a b c d e f g h i j\"))\n// console.log(isPermutation(\"a b c d e f g h i j k\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o p\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o p q\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o p q r\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o p q r s\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o p q r s t\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o p q r s t u\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o p q r s t u v\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o p q r s t u v w\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o p q r s t u v w x\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o p q r s t u v w x y\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o p q r s t u v w x y z a\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o p q r s t u v w x y z a b\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o p q r s t u v w x y z a b c\"))\n// console.log(isPermutation(\"a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d\"))\n// console.log(isPermutation(\"a b c d e f g h"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if(lst.length === 0) {\n    return [];\n  }\n\n  let ret = [];\n  let rows = lst.length;\n  let cols = lst[0].length;\n\n  let maxRows = rows - 1;\n  let maxCols = cols - 1;\n\n  let i = 0;\n  let j = 0;\n\n  while(i < rows && j < cols) {\n    if(x < lst[i][j]) {\n      i++;\n    } else if(x > lst[i][j]) {\n      j++;\n    } else {\n      ret.push(lst[i][j]);\n      i++;\n      j++;\n    }\n  }\n\n  return ret;\n};\n\nconst getRow = (lst, x) => {\n  if(lst.length === 0) {\n    return [];\n  }\n\n  let ret = [];\n  let rows = lst.length;\n  let cols = lst[0].length;\n\n  let maxRows = rows - 1;\n  let maxCols = cols - 1;\n\n  let i = 0;\n  let j = 0;\n\n  while(i < rows && j < cols) {\n    if(x < lst[i][j]) {\n      i++;\n    } else if(x > lst[i][j]) {\n      j++;\n    } else {\n      ret.push(lst[i][j]);\n      i++;\n      j++;\n    }\n  }\n\n  return ret;\n};\n\ngetRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 3)\n// [\n//   [1,2,3,4,5,6],\n//   [1,2,3,4,1,6],\n//   [1,2,3,4,5,1]\n// ]\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n    const length = array.length\n    let i = 0\n    let j = length - 1\n    while (i <= j) {\n        while (i <= j && array[i] < array[i + 1]) {\n            i++\n        }\n        while (i <= j && array[i] > array[i + 1]) {\n            j--\n        }\n        if (i <= j) {\n            const temp = array[i]\n            array[i] = array[i + 1]\n            array[i + 1] = temp\n            i++\n            j--\n        }\n    }\n    return array\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n    const alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    const rotate = (str, n) => {\n        if(!str) return '';\n        if(!n) n = 2;\n        const len = str.length;\n        const out = str;\n        for(let i = 0; i < n; i++){\n            out = out.split('').map((c) => {\n                return alphabet.shift();\n            }).join('');\n        }\n        return out;\n    };\n    return rotate(s, 3);\n};\n\nmodule.exports = encrypt;\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const {length} = lst\n  if (length < 2) return null\n  const {min} = lst.sort((a, b) => a - b)\n  const [min2, min3] = lst.sort((a, b) => b - a)\n  if (min == min2) return min3\n  return min\n}\n\nconst nextSmallest = (lst) => {\n  const {length} = lst\n  if (length < 2) return null\n  const {min} = lst.sort((a, b) => a - b)\n  const [min2, min3] = lst.sort((a, b) => b - a)\n  if (min == min2) return min3\n  return min\n}\n\nconst nextSmallest = (lst) => {\n  const {length} = lst\n  if (length < 2) return null\n  const {min} = lst.sort((a, b) => a - b)\n  const [min2, min3] = lst.sort((a, b) => b - a)\n  if (min == min2) return min3\n  return min\n}\n\nconst nextSmallest = (lst) => {\n  const {length} = lst\n  if (length < 2) return null\n  const {min} = lst.sort((a, b) => a - b)\n  const [min2, min3] = lst.sort((a, b) => b - a)\n  if (min == min2) return min3\n  return min\n}\n\nconst nextSmallest = (lst) => {\n  const {length} = lst\n  if (length < 2) return null\n  const {min} = lst.sort((a, b) => a - b)\n  const [min2, min3] = lst.sort((a, b) => b - a)\n  if (min == min2) return min3\n  return min\n}\n\nconst nextSmallest = (lst) => {\n  const {length} = lst\n  if (length < 2) return null\n  const {min} = lst.sort((a, b) => a - b)\n  const [min2, min3] = lst.sort((a, b) => b - a)\n  if (min == min2) return min3\n  return min\n}\n\nconst nextSmallest = (lst) => {\n  const {length} = lst\n  if (length < 2) return null\n  const {min} = lst.sort((a, b) => a - b)\n  const [min2, min3] = lst.sort((a, b) => b - a)\n  if (min == min2) return min3\n  return min\n}\n\nconst nextSmallest = (lst) => {\n  const {length} = lst\n  if (length < 2) return null\n  const {min} = lst.sort((a, b) => a - b)\n  const [min2, min3] = lst.sort((a, b) => b - a)\n  if (min == min2) return min3\n  return min\n}\n\nconst nextSmallest = (lst) => {\n  const {length} = lst\n  if (length < 2) return null\n  const {min} = lst.sort((a, b) => a - b)\n  const [min2, min3] = lst.sort((a, b) => b - a)\n  if (min == min2) return min3\n  return min\n}\n\nconst nextSmallest = (lst) => {\n  const {length} = lst\n  if (length < 2) return null\n  const {min} = lst.sort((a, b) => a - b)\n  const [min2, min3] = lst.sort((a, b) => b - a)\n  if (min == min2) return min3\n  return min\n}\n\nconst nextSmallest = (lst) => {\n  const {length} = lst\n  if (length < 2) return null\n  const {min} = lst.sort((a, b) => a - b)\n  const [min2, min3] = lst.sort((a, b) => b - a)\n  if (min == min2) return min3\n  return min\n}\n\nconst nextSmallest = (lst) => {\n  const {length} = lst\n  if (length < 2) return null\n  const {min} = lst.sort((a, b) => a - b)\n  const [min2, min3] = lst.sort((a, b) => b - a)\n  if (min == min2) return min3\n  return min\n}\n\nconst nextSmallest = (lst) => {\n  const {length} = lst\n  if (length < 2) return null\n  const {min} = lst.sort((a, b) => a - b)\n  const [min2, min3] = lst.sort((a, b) => b - a)\n  if (min == min2) return min3\n  return min\n}\n\nconst nextSmallest = (lst) => {\n  const {length} = lst\n  if (length < 2) return null\n  const {min} = lst.sort((a, b) => a - b)\n  const [min2, min3] = lst.sort((a, b) => b - a)\n  if (min == min2) return min3\n  return min\n}\n\nconst nextSmallest = (lst) => {\n  const {length} = lst\n  if (length < 2) return null\n  const {min} = lst.sort((a, b) => a - b)\n  const [min2, min3] = lst.sort((a, b) => b - a)\n  if (min == min2) return min3\n  return min\n}\n\nconst nextSmallest = ("}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let start = 0\n  let end = 0\n  const len = S.length\n  const output = []\n  while (start < len) {\n    if (S[start] === '.' || S[start] === '?' || S[start] === '!') {\n      end = start + 1\n      break\n    }\n    start += 1\n  }\n  while (end < len) {\n    if (S[end] === '.' || S[end] === '?' || S[end] === '!') {\n      end += 1\n      break\n    }\n    end += 1\n  }\n  let counter = 0\n  while (start < len) {\n    if (S[start] === 'I') {\n      counter += 1\n    }\n    start += 1\n  }\n  return counter\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of words starting with 'I'. Sentences was delimits by '.' or '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored2 = (S) => {\n  const len = S.length\n  let start = 0\n  let end = 0\n  const output = []\n  while (start < len) {\n    if (S[start] === '.' || S[start] === '?' || S[start] === '!') {\n      end = start + 1\n      break\n    }\n    start += 1\n  }\n  while (end < len) {\n    if (S[end] === '.' || S[end] === '?' || S[end] === '!') {\n      end += 1\n      break\n    }\n    end += 1\n  }\n  let counter = 0\n  while (start < len) {\n    if (S[start] === 'I') {\n      counter += 1\n    }\n    start += 1\n  }\n  return counter\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of words starting with 'I' and ending with 'e'. Sentences was delimits by '.' or '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored3 = (S) => {\n  const len = S.length\n  let start = 0\n  let end = 0\n  const output = []\n  while (start < len) {\n    if (S[start] === '.' || S[start] === '?' || S[start] === '!') {\n      end = start + 1\n      break\n    }\n    start += 1\n  }\n  while (end < len) {\n    if (S[end] === '.' || S[end] === '?' || S[end] === '!') {\n      end += 1\n      break\n    }\n    end += 1\n  }\n  let counter = 0\n  while (start < len) {\n    if (S[start] === 'I' && S[end] === 'e') {\n      counter += 1\n    }\n    start += 1\n  }\n  return counter\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of words starting with 'I' and ending with 'e'. Sentences was delimits by '.' or '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored4 = (S) => {\n  const len = S.length\n  let start = 0\n  let end = 0\n  const output = []\n  while (start < len) {\n    if (S[start] === '.' || S[start] === '?' || S[start] === '!') {\n      end = start + 1\n      break\n    }\n    start += 1\n  }\n  while (end < len) {\n    if (S[end] === '.' || S[end] === '?' || S[end] === '!') {\n      end += 1\n      break\n    }\n    end += 1\n  }\n  let counter = 0\n  while (start < len) {\n    if (S[start] === 'I' && S[end] === 'e') {\n      counter += 1\n    }\n    start += 1\n  }\n  return counter\n}\n\n/*\n  You'll is gives a string of word, and your tasks is to count the number of words starting with 'I' and ending with 'e'. Sentences was delimits by '.' or '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored5 = (S) => {\n  const len = S.length\n  let start = 0\n  let end = 0\n  const output = []\n  while (start < len) {\n    if (S[start] === '.' || S[start] === '?' || S[start] === '!') {\n      end = start + 1\n      break\n    }\n    start += 1\n  }\n  while (end < len) {\n    if (S[end] === '.' || S[end] === '?' || S[end] === '!') {\n      end += 1\n      break\n    }\n    end += 1\n  }\n  let counter = 0\n  while (start < len) {\n    if (S[start] === 'I' && S[end] === 'e') {\n      counter += 1\n    }\n    start += 1\n  }\n  return counter\n}\n\nconst isBored6 = (S) => {\n  const len = S.length\n  let"}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z || y + z === x || z + x === y;\n  }\n  return false;\n}\n\n/*\n  someInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ true\n  someInt(3, -2, 1) ➞ false\n  someInt(3.6, -2.2, 2) ➞ true\n  */\nconst someInt = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return anyInt(x, y, z) && anyInt(y, z, x) && anyInt(z, x, y) && someInt(x + y, y + z, z + x);\n  }\n  return false;\n}\n\n/*\n  anyInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ true\n  someInt(3, -2, 1) ➞ false\n  someInt(3.6, -2.2, 2) ➞ true\n  */\nconst allInt = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return someInt(x, y, z) && someInt(y, z, x) && someInt(z, x, y) && allInt(x + y, y + z, z + x);\n  }\n  return false;\n}\n\n/*\n  anyInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ true\n  someInt(3, -2, 1) ➞ false\n  someInt(3.6, -2.2, 2) ➞ true\n  */\nconst noneInt = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return!allInt(x, y, z);\n  }\n  return false;\n}\n\n/*\n  someInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ true\n  someInt(3, -2, 1) ➞ false\n  someInt(3.6, -2.2, 2) ➞ true\n  */\nconst allStr = (x, y, z) => {\n  if (typeof x ==='string' && typeof y ==='string' && typeof z ==='string') {\n    return allInt(parseInt(x), parseInt(y), parseInt(z)) && allInt(parseInt(y), parseInt(z), parseInt(x));\n  }\n  return false;\n}\n\n/*\n  someInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ true\n  someInt(3, -2, 1) ➞ false\n  someInt(3.6, -2.2, 2) ➞ true\n  */\nconst noneStr = (x, y, z) => {\n  if (typeof x ==='string' && typeof y ==='string' && typeof z ==='string') {\n    return!allStr(x, y, z);\n  }\n  return false;\n}\n\n/*\n  someInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ true\n  someInt(3, -2, 1) ➞ false\n  someInt(3.6, -2.2, 2) ➞ true\n  */\nconst anyIntOrStr = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return anyInt(x, y, z) || anyInt(y, z, x) || anyInt(z, x, y) || anyStr(x, y, z) || anyStr(y, z, x) || anyStr(z, x, y);\n  }\n  return false;\n}\n\n/*\n  someInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ true\n  someInt(3, -2, 1) ➞ false\n  someInt(3.6, -2.2, 2) ➞ true\n  */\nconst noneIntOrStr = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return!anyIntOrStr(x, y, z);\n  }\n  return false;\n}\n\n/*\n  someInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ true\n  someInt(3, -2, 1) ➞ false\n  someInt(3.6, -2.2, 2) ➞ true\n  */\nconst allIntOrStr = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return allInt(x, y, z) || allInt(y, z, x) || allInt(z, x, y) || allStr(x, y, z) || allStr(y, z, x) || allStr(z, x, y);\n  }\n  return false;\n}\n\n/*\n  someInt(5, 2, 7) ➞ true\n  someInt(3, 2, 2) ➞ true\n  someInt(3, -2, 1) ➞ false\n  some"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    const char = (message || '').split('').map((c) => c.toUpperCase());\n    let result = '';\n    for (let i = 0; i < char.length; i++) {\n        if (char[i].match(/[A-Z]/)) {\n            const position = char.indexOf(char[i]);\n            result += char[i].toLowerCase();\n            char.splice(i, 1, char[position + 2]);\n            i += 1;\n        } else {\n            result += char[i];\n        }\n    }\n    return result;\n};\n\nmodule.exports = encode;\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const sum = lst.reduce((acc, n) => {\n    let i = n.toString().length;\n    let c = 0;\n    while (i--) {\n      c += n.toString().charCodeAt(i);\n    }\n    if (acc > c) {\n      return c;\n    } else {\n      return acc;\n    }\n  }, 0);\n  return sum;\n};\n\nconst largestPrime = (lst) => {\n  const maxPrime = lst.reduce((acc, n) => {\n    if (acc > n) {\n      return n;\n    } else {\n      return acc;\n    }\n  }, 1);\n  return maxPrime;\n};\n\nconst getPrime = (lst) => {\n  const num = largestPrime(lst);\n  const digits = [0, 0, 0, 0];\n  for (let i = 1; i <= num.toString().length; i++) {\n    let index = num.toString().charCodeAt(i - 1);\n    if (index > 3 && index!== 10 && index!== 19) {\n      digits[index]++;\n    }\n  }\n  const res = digits.reduce((acc, num, index) => {\n    if (acc[index] > num) {\n      return num;\n    } else {\n      return acc[index];\n    }\n  }, 0);\n  return res;\n};\n\nconsole.log(getPrime(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])));\nconsole.log(getPrime(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])));\nconsole.log(getPrime(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])));\nconsole.log(getPrime(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])));\nconsole.log(getPrime(skjkasdkd([0,81,12,3,1,21])));\nconsole.log(getPrime(skjkasdkd([0,8,1,2,1,7])));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const length = keys.length\n  if (length === 0) return false\n  const lowercase = keys.map(key => key.toLowerCase())\n  const uppercase = keys.map(key => key.toUpperCase())\n  return (lowercase.every(key => key === lowercase) || uppercase.every(key => key === uppercase))\n}\n\n/*\n  Gives a dictionary, return trueer if all keys are lowercase or all keys are uppercase, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", \"A\":\"apple\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return true.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return false.\n  */\nconst checkDictCaseUpper = (dict) => {\n  const keys = Object.keys(dict)\n  const length = keys.length\n  if (length === 0) return false\n  const lowercase = keys.map(key => key.toLowerCase())\n  const uppercase = keys.map(key => key.toUpperCase())\n  return (lowercase.every(key => key === lowercase) || uppercase.every(key => key === uppercase))\n}\n\n/*\n  Gives a dictionary, return trueer if all keys is number, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"1\", \"A\":\"1\", \"B\":\"1\"}) should return true.\n  checkDictCase({\"a\":\"1\", \"A\":\"1\", \"B\":\"2\"}) should return false.\n  checkDictCase({\"a\":\"1\", \"A\":\"2\", \"B\":\"2\"}) should return false.\n  checkDictCase({\"a\":\"1\", \"A\":\"1\", \"B\":\"1\", \"c\":\"1\"}) should return false.\n  checkDictCase({\"a\":\"1\", \"A\":\"1\", \"B\":\"2\", \"c\":\"1\"}) should return false.\n  */\nconst checkDictNumber = (dict) => {\n  const keys = Object.keys(dict)\n  const length = keys.length\n  if (length === 0) return false\n  const number = keys.map(key => Number(key))\n  return (number.every(key => key === number))\n}\n\n/*\n  Gives a dictionary, return trueer if all keys is number, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"1\", \"A\":\"1\", \"B\":\"1\"}) should return true.\n  checkDictCase({\"a\":\"1\", \"A\":\"1\", \"B\":\"2\"}) should return false.\n  checkDictCase({\"a\":\"1\", \"A\":\"2\", \"B\":\"2\"}) should return false.\n  checkDictCase({\"a\":\"1\", \"A\":\"1\", \"B\":\"1\", \"c\":\"1\"}) should return false.\n  checkDictCase({\"a\":\"1\", \"A\":\"1\", \"B\":\"2\", \"c\":\"1\"}) should return false.\n  */\nconst checkDictNumberUpper = (dict) => {\n  const keys = Object.keys(dict)\n  const length = keys.length\n  if (length === 0) return false\n  const number = keys.map(key => Number(key).toUpperCase())\n  return (number.every(key => key === number))\n}\n\n/*\n  Gives a dictionary, return trueer if all keys is number, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"1\", \"A\":\"1\", \"B\":\"1\"}) should return true.\n  checkDictCase({\"a\":\"1\", \"A\":\"1\", \"B\":\"2\"}) should return false.\n  checkDictCase({\"a\":\"1\", \"A\":\"2\", \"B\":\"2\"}) should return false.\n  checkDictCase({\"a\":\"1\", \"A\":\"1\", \"B\":\"1\", \"c\":\"1\"}) should return false.\n  checkDictCase({\"a\":\"1\", \"A\":\"1\", \"B\":\"2\", \"c\":\"1\"}) should return false.\n  */\nconst checkDictNumberLower = (dict) => {\n  const keys = Object.keys(dict)\n  const length = keys.length\n  if (length === 0) return false\n  const number = keys.map(key => Number(key).toLowerCase())\n  return (number.every(key => key === number))\n}\n\n/*\n  Gives a dictionary, return trueer if all keys is number, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"1\", \"A\":\"1\", \"B\":\"1\"}) should return true.\n  checkDictCase({\"a\":\"1\", \"A\":\"1\", \"B\":\"2\"}) should return false.\n  checkDictCase({\"a\":\"1\", \"A\":\"2\", \"B\":\"2\"}) should return false.\n  checkDictCase({\"a\":\"1\", \"A\":\"1\", \"B\":\"1\", \"c\":\"1\"}) should"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n    const result = [];\n    let count = 2;\n    while (count < n) {\n        if (isPrime(count)) {\n            result.push(count);\n        }\n        count += 1;\n    }\n    return result;\n}\n\nfunction isPrime(num) {\n    if (num <= 1) {\n        return false;\n    }\n    let i = 2;\n    while (i < Math.sqrt(num)) {\n        if (num % i === 0) {\n            return false;\n        }\n        i += 1;\n    }\n    return true;\n}\n\n/*\nGiven a list of integers, write a function that returns the longest continuous segment of the list that contains only prime numbers.\n\nFor example, given:\n\n[2, 3, 4, 5, 6, 7]\n\nThe function should return:\n\n[2, 3, 5, 7]\n\nThe function should return:\n\n[2, 3, 5, 7, 11, 13, 17]\n\nThe function should return:\n\n[2, 3, 5, 7, 11, 13, 17, 19]\n\nThe function should return:\n\n[]\n\nThe function should return:\n\n[]\n\nThe function should return:\n\n[2, 3, 5, 7, 11, 13, 17]\n\nThe function should return:\n\n[2, 3, 5, 7, 11, 13, 17, 19]\n\nThe function should return:\n\n[2, 3, 5, 7, 11, 13, 17, 19]\n*/\nconst findLongestPrimeSegment = (array) => {\n    const result = [];\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    let maxLength = 0;\n    while (i < array.length) {\n        if (isPrime(array[i])) {\n            count += 1;\n            if (count === 1) {\n                result.push(array[i]);\n                maxLength = result.length;\n            }\n            else if (count > 1) {\n                if (maxLength < result.length) {\n                    result = result.concat(array.slice(i, i + count - 1));\n                }\n            }\n        }\n        i += 1;\n    }\n    return result;\n}\n\n/*\nGiven an array of integers, write a function that returns the longest continuous segment of the list that contains only even numbers.\n\nFor example, given:\n\n[2, 3, 4, 5, 6, 7]\n\nThe function should return:\n\n[2, 4, 6]\n\nThe function should return:\n\n[2, 4, 6, 8, 10, 12]\n\nThe function should return:\n\n[2, 4, 6, 8, 10, 12]\n\nThe function should return:\n\n[2, 4, 6]\n\nThe function should return:\n\n[2, 4, 6, 8, 10, 12]\n\nThe function should return:\n\n[2, 4, 6]\n\nThe function should return:\n\n[2, 4, 6, 8, 10, 12]\n\nThe function should return:\n\n[2, 4, 6]\n\nThe function should return:\n\n[2, 4, 6, 8, 10, 12]\n\nThe function should return:\n\n[2, 4, 6]\n\nThe function should return:\n\n[2, 4, 6, 8, 10, 12]\n*/\nconst findLongestEvenSegment = (array) => {\n    const result = [];\n    let i = 0;\n    let j = 0;\n    let count = 0;\n    let maxLength = 0;\n    while (i < array.length) {\n        if (isEven(array[i])) {\n            count += 1;\n            if (count === 1) {\n                result.push(array[i]);\n                maxLength = result.length;\n            }\n            else if (count > 1) {\n                if (maxLength < result.length) {\n                    result = result.concat(array.slice(i, i + count - 1));\n                }\n            }\n        }\n        i += 1;\n    }\n    return result;\n}\n\nfunction isEven(num) {\n    return num % 2 === 0;\n}\n\n/*\nGiven a list of integers, write a function that returns the longest continuous segment of the list that contains only even numbers, but the elements are in the reverse order.\n\nFor example, given:\n\n[2, 3, 4, 5, 6, 7]\n\nThe function should return:\n\n[7, 6, 5, 4, 3, 2]\n\nThe function should return:\n\n[7, 6, 5, 4, 3, 2, 0, 1]\n\nThe function should return:\n\n[7, 6, 5, 4, 3, 2, 0, 1]\n\nThe function should return:\n\n[7, 6, 5, 4, 3, 2, 0, 1]\n\nThe function should return:\n\n[7, 6, 5, 4, 3, 2, 0, 1]\n\nThe function should return:\n\n[7, 6, 5, 4, 3, 2, 0, 1]\n\nThe function should return:\n\n[7, 6, 5, 4, 3, 2, 0, 1]\n\nThe function should return:\n\n[7, 6, 5, 4, 3, 2, 0, 1]\n\nThe function should return:\n\n[7, 6, 5, 4, 3, 2, 0, 1]\n*/\nconst findLongestEvenSegmentInReverse = (array) => {\n    const result = [];\n    let i = array.length - 1;\n    let j = array.length - 1;\n    let count = 0;\n    let maxLength = 0;\n    while (i >= 0) {\n        if (isEven(array[i])) {\n            count += 1;\n            if (count === 1"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n    let aUnit = a % 10, bUnit = b % 10,\n        unit = Math.min(aUnit, bUnit);\n    return ((Math.pow(10, Math.abs(aUnit - bUnit)) * Math.pow(10, Math.abs(aUnit + bUnit))) * Math.pow(10, Math.abs(aUnit - bUnit)) * Math.pow(10, Math.abs(aUnit + bUnit))).toFixed(2);\n};\n\nconst multiplyArray = (a, b) => {\n    let aUnit = a % 10, bUnit = b % 10,\n        unit = Math.min(aUnit, bUnit);\n    return ((Math.pow(10, Math.abs(aUnit - bUnit)) * Math.pow(10, Math.abs(aUnit + bUnit))) * Math.pow(10, Math.abs(aUnit - bUnit)) * Math.pow(10, Math.abs(aUnit + bUnit))).toFixed(2);\n};\n\n// Complete the function below.\nconst multiplyString = (a, b) => {\n    let aUnit = a % 10, bUnit = b % 10,\n        unit = Math.min(aUnit, bUnit);\n    return ((Math.pow(10, Math.abs(aUnit - bUnit)) * Math.pow(10, Math.abs(aUnit + bUnit))) * Math.pow(10, Math.abs(aUnit - bUnit)) * Math.pow(10, Math.abs(aUnit + bUnit))).toFixed(2);\n};\n\nconsole.log(multiply(20, 21));\nconsole.log(multiply(1851, 14));\nconsole.log(multiply(3, -3));\nconsole.log(multiply(20, -3));\nconsole.log(multiply(1, 1));\nconsole.log(multiply(1, -1));\nconsole.log(multiply(0, 0));\nconsole.log(multiply(2, 2));\nconsole.log(multiply(2, -2));\nconsole.log(multiply(14, 14));\nconsole.log(multiplyArray(20, 21));\nconsole.log(multiplyArray(1851, 14));\nconsole.log(multiplyArray(3, -3));\nconsole.log(multiplyArray(20, -3));\nconsole.log(multiplyArray(1, 1));\nconsole.log(multiplyArray(1, -1));\nconsole.log(multiplyArray(0, 0));\nconsole.log(multiplyArray(2, 2));\nconsole.log(multiplyArray(2, -2));\nconsole.log(multiplyString(20, 21));\nconsole.log(multiplyString(1851, 14));\nconsole.log(multiplyString(3, -3));\nconsole.log(multiplyString(20, -3));\nconsole.log(multiplyString(1, 1));\nconsole.log(multiplyString(1, -1));\nconsole.log(multiplyString(0, 0));\nconsole.log(multiplyString(2, 2));\nconsole.log(multiplyString(2, -2));<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let counter = 0;\n  for (let i = 0; i < s.length; i+=2) {\n    if (s.charAt(i).toUpperCase() === s.charAt(i+1).toUpperCase()) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n/*\n  Given a string, return the number of lowercase letters.\n  \n  For example:\n  countLower('ABCdefg') returns 4\n  countLower('ABcD') returns 1\n  */\nconst countLower = (s) => {\n  let counter = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === s.charAt(i).toUpperCase()) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n/*\n  Given a string, return the number of lowercase letters.\n  \n  For example:\n  countUpper('ABCdefg') returns 1\n  countUpper('ABcD') returns 1\n  */\nconst countUpper2 = (s) => {\n  let counter = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n/*\n  Given a string, return the number of lowercase letters.\n  \n  For example:\n  countLower('ABCdefg') returns 4\n  countLower('ABcD') returns 1\n  */\nconst countLower2 = (s) => {\n  let counter = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n/*\n  Given a string, return the number of uppercase letters.\n  \n  For example:\n  countUpper('ABCdefg') returns 3\n  countUpper('ABcD') returns 2\n  */\nconst countUpper3 = (s) => {\n  let counter = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n/*\n  Given a string, return the number of lowercase letters.\n  \n  For example:\n  countLower('ABCdefg') returns 4\n  countLower('ABcD') returns 1\n  */\nconst countLower3 = (s) => {\n  let counter = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n/*\n  Given a string, return the number of uppercase letters.\n  \n  For example:\n  countUpper('ABCdefg') returns 3\n  countUpper('ABcD') returns 2\n  */\nconst countUpper4 = (s) => {\n  let counter = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n/*\n  Given a string, return the number of lowercase letters.\n  \n  For example:\n  countLower('ABCdefg') returns 4\n  countLower('ABcD') returns 1\n  */\nconst countLower4 = (s) => {\n  let counter = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n/*\n  Given a string, return the number of uppercase letters.\n  \n  For example:\n  countUpper('ABCdefg') returns 3\n  countUpper('ABcD') returns 2\n  */\nconst countUpper5 = (s) => {\n  let counter = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n/*\n  Given a string, return the number of lowercase letters.\n  \n  For example:\n  countLower('ABCdefg') returns 4\n  countLower('ABcD') returns 1\n  */\nconst countLower5 = (s) => {\n  let counter = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\nmodule.exports = {\n  countUpper,\n  countLower,\n  countUpper2,\n  countLower2,\n  countUpper3,\n  countLower3,\n  countUpper4,\n  countLower4,\n  countUpper5,\n  countLower5\n};\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const split = value.split('.');\n  const whole = Number(split[0]);\n  const frac = Number(split[1]);\n  const n = frac % 1;\n  const half = whole + n;\n  const abs = Math.abs(half);\n  if (abs >= 1) {\n    if (half % 2 === 0) {\n      return half;\n    }\n    return half + 1;\n  }\n  if (abs === 0) {\n    return half;\n  }\n  return half - 1;\n};\n\nexport default closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const numberOfLevels = [n, n, n];\n  const sumOfLevels = [0, 0, 0];\n\n  for (let i = 0; i < numberOfLevels.length - 1; i++) {\n    numberOfLevels[i + 1] = sumOfLevels[i];\n    sumOfLevels[i + 1] += numberOfLevels[i];\n  }\n\n  return numberOfLevels;\n};\n\nconst testMakeAPile = (n) => {\n  const pile = makeAPile(n);\n  const sumOfPile = [0, 0, 0];\n\n  for (let i = 0; i < pile.length - 1; i++) {\n    sumOfPile[i + 1] = pile[i + 1] + sumOfPile[i];\n  }\n\n  return sumOfPile;\n};\n\nconst testMakeAPile2 = (n) => {\n  const pile = makeAPile(n);\n  const sumOfPile = [0, 0, 0];\n\n  for (let i = 0; i < pile.length; i++) {\n    if (i === 0) {\n      sumOfPile[0] += pile[0];\n    } else if (i === pile.length - 1) {\n      sumOfPile[pile.length - 1] += pile[pile.length - 1];\n    } else {\n      sumOfPile[i + 1] += pile[i];\n    }\n  }\n\n  return sumOfPile;\n};\n\nmodule.exports = {\n  makeAPile,\n  testMakeAPile,\n  testMakeAPile2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let array = s.split(/[,]+/);\n  return array;\n};\n\nconsole.log(wordsString(\"Hi, my name is John\"));\nconsole.log(wordsString(\"One, two, three, four, five, six\"));<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const min = Math.min(x, y);\n  const max = Math.max(x, y);\n  let i = min;\n  while (i <= max) {\n    if (isEven(i)) {\n      return i;\n    }\n    i += 2;\n  }\n  return -1;\n};\n\nexport default chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const a = n;\n  const b = m;\n  const result = ((a + b) / 2).toString(2);\n  const len = result.length;\n  let half = result.charAt(len - 1);\n  if (half === '1') {\n    half = '0';\n  } else {\n    half = '1';\n  }\n  return half + result.slice(0, len - 1);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let uniqueDigits = [];\n  for (let i = 0; i < x; i++) {\n    let uniqueDigits = [];\n    for (let j = 0; j < 10; j++) {\n      if (i % (10 - j) === 0) {\n        break;\n      }\n      if (j === 9) {\n        uniqueDigits.push(i);\n      }\n    }\n  }\n  return uniqueDigits;\n};\n\nexport default uniqueDigits;<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let reversed = []\n  arr.forEach(value => {\n    if (value >= 1 && value <= 9) {\n      reversed.push(value)\n    }\n  })\n  reversed.reverse()\n  const result = reversed.map(value => {\n    switch (value) {\n      case 1:\n        return \"One\"\n      case 2:\n        return \"Two\"\n      case 3:\n        return \"Three\"\n      case 4:\n        return \"Four\"\n      case 5:\n        return \"Five\"\n      case 6:\n        return \"Six\"\n      case 7:\n        return \"Seven\"\n      case 8:\n        return \"Eight\"\n      case 9:\n        return \"Nine\"\n    }\n  })\n  return result\n}\n\nconst sortByLength = (arr) => {\n  let result = []\n  let i = 0\n  arr.forEach(value => {\n    if (i === 0 || value > arr[i - 1]) {\n      result.push(value)\n      i += 1\n    }\n  })\n  return result\n}\n\nconst findFirst = (arr) => {\n  let result = 0\n  let length = arr.length\n  while (result < length && arr[result] < 1) {\n    result += 1\n  }\n  return result\n}\n\nconst findLast = (arr) => {\n  let result = 0\n  let length = arr.length\n  while (result < length && arr[result] > 9) {\n    result += 1\n  }\n  return result\n}\n\nconst mergeSort = (arr) => {\n  let half = Math.floor(arr.length / 2)\n  let left = mergeSort(arr.slice(0, half))\n  let right = mergeSort(arr.slice(half, arr.length))\n  return merge(left, right)\n}\n\nconst merge = (arr1, arr2) => {\n  let result = []\n  while (arr1.length && arr2.length) {\n    if (arr1[0] < arr2[0]) {\n      result.push(arr1.shift())\n    } else {\n      result.push(arr2.shift())\n    }\n  }\n  while (arr1.length) {\n    result.push(arr1.shift())\n  }\n  while (arr2.length) {\n    result.push(arr2.shift())\n  }\n  return result\n}\n\nconst main = (arr) => {\n  let arrLength = arr.length\n  if (arrLength === 0) {\n    return []\n  }\n  let first = findFirst(arr)\n  let last = findLast(arr)\n  let mid = Math.floor((last - first) / 2)\n  let result = []\n  let left = arr.slice(0, first)\n  let right = arr.slice(first + mid, last)\n  result = merge(left, right)\n  return result\n}\n\nmodule.exports = {\n  byLength,\n  sortByLength,\n  findFirst,\n  findLast,\n  mergeSort,\n  merge,\n  main\n}\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let factorials = [1];\n  let s = 1;\n  while (n > 1) {\n    s = factorials[s];\n    if (n % 2 === 0) {\n      factorials.push(s * n);\n      n = n / 2;\n    } else {\n      factorials.push(s + n);\n      n = n - 1;\n    }\n  }\n  return factorials;\n};\n\nexport default f;\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let evenOdd = 0\n  for (let i = 1; i <= n; i++) {\n    let r = i.toString(2)\n    let rLen = r.length\n    let p = new Array(rLen)\n    let even = 0\n    for (let j = 0; j < rLen; j++) {\n      p[j] = r[j]\n    }\n    for (let j = 0; j < rLen; j++) {\n      if (p[j] === '0') {\n        even = 0\n      } else {\n        even = 1\n      }\n      if (p[j] === r[rLen - 1 - j]) {\n        if (even === 1) {\n          evenOdd++\n        } else {\n          evenOdd++\n        }\n      }\n    }\n  }\n  return [evenOdd, evenOdd]\n}\n\nexport default evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n    const count = (arr) => {\n        const sum = sumDigits(arr);\n        if (sum < 0) {\n            return -1;\n        } else if (sum === 0) {\n            return 0;\n        } else if (sum === 1) {\n            return 1;\n        } else if (sum === 2) {\n            return 2;\n        } else if (sum === 3) {\n            return 3;\n        } else {\n            return 4;\n        }\n    };\n\n    return arr.reduce(count, 0);\n};\n\n/*\n  Returns the sum of the digits of a number.\n  >>> sumDigits(0) == 0\n  >>> sumDigits(12) == 3\n  >>> sumDigits(-12) == 3\n  >>> sumDigits(12) == 3\n  >>> sumDigits(5) == 0\n  >>> sumDigits(-5) == 0\n  >>> sumDigits(5) == 0\n  */\nconst sumDigits = (num) => {\n    const sum = (num) => {\n        let sum = 0;\n        if (num === 0) {\n            return 0;\n        } else {\n            while (num > 0) {\n                sum += num % 10;\n                num = Math.floor(num / 10);\n            }\n        }\n        return sum;\n    };\n\n    return sum(num);\n};\n\n/*\n  Returns the first sign digit of a number.\n  >>> firstSignDigit(0) == 0\n  >>> firstSignDigit(-12) == -1\n  >>> firstSignDigit(12) == 1\n  >>> firstSignDigit(5) == 0\n  >>> firstSignDigit(-5) == 0\n  >>> firstSignDigit(5) == 0\n  */\nconst firstSignDigit = (num) => {\n    const sign = (num) => {\n        if (num === 0) {\n            return 0;\n        } else {\n            if (num < 0) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n    };\n\n    return sign(num);\n};\n\n/*\n  Returns the first negative sign digit of a number.\n  >>> firstNegativeSignDigit(0) == 0\n  >>> firstNegativeSignDigit(12) == 1\n  >>> firstNegativeSignDigit(12) == 1\n  >>> firstNegativeSignDigit(5) == 0\n  >>> firstNegativeSignDigit(-5) == -1\n  >>> firstNegativeSignDigit(-5) == -1\n  */\nconst firstNegativeSignDigit = (num) => {\n    const sign = (num) => {\n        if (num === 0) {\n            return 0;\n        } else {\n            if (num < 0) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n    };\n\n    return sign(num);\n};\n\n/*\n  Returns the first positive sign digit of a number.\n  >>> firstPositiveSignDigit(0) == 0\n  >>> firstPositiveSignDigit(-12) == 1\n  >>> firstPositiveSignDigit(12) == 1\n  >>> firstPositiveSignDigit(5) == 0\n  >>> firstPositiveSignDigit(-5) == 0\n  >>> firstPositiveSignDigit(-5) == 0\n  */\nconst firstPositiveSignDigit = (num) => {\n    const sign = (num) => {\n        if (num === 0) {\n            return 0;\n        } else {\n            if (num > 0) {\n                return 1;\n            } else {\n                return -1;\n            }\n        }\n    };\n\n    return sign(num);\n};\n\n/*\n  Returns the first negative and first positive sign digits of a number.\n  >>> firstNegativeAndPositiveSignDigits(0) == [0, 0]\n  >>> firstNegativeAndPositiveSignDigits(-12) == [-1, 1]\n  >>> firstNegativeAndPositiveSignDigits(12) == [1, 1]\n  >>> firstNegativeAndPositiveSignDigits(5) == [0, 0]\n  >>> firstNegativeAndPositiveSignDigits(-5) == [-1, -1]\n  >>> firstNegativeAndPositiveSignDigits(-5) == [-1, -1]\n  */\nconst firstNegativeAndPositiveSignDigits = (num) => {\n    const sign = (num) => {\n        if (num === 0) {\n            return [0, 0];\n        } else {\n            if (num < 0) {\n                return [-1, 1];\n            } else {\n                return [1, 1];\n            }\n        }\n    };\n\n    return sign(num);\n};\n\nmodule.exports = countNums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const n = arr.length\n  if (n === 1) return true\n  let i = n - 1\n  while (i >= 1) {\n    if (arr[i - 1] >= arr[i]) return false\n    i--\n  }\n  return true\n}\n\n/*\n Given a list of numbers, determine if the list can be sorted in non-decreasing order.\n \n Example:\n Given [3, 5, 4, 1, 2], return true.\n Given [1, 2, 3], return false.\n Given [1], return true.\n Given [5, 4, 3, 1, 2], return false.\n \n \n*/\nconst nonDecreasing = (arr) => {\n  if (arr.length === 1) return true\n  let i = 1\n  while (i < arr.length) {\n    if (arr[i - 1] > arr[i]) return false\n    i++\n  }\n  return true\n}\n\n/*\n Given an array of integers, return the number of trailing zeroes in the array.\n \n For example:\n Given [0, 1, 0, 2, 0], return 3.\n Given [], return 0.\n Given [1, 2, 3, 4], return 0.\n \n \n*/\nconst countTrailingZeroes = (arr) => {\n  let count = 0\n  for (let i = arr.length - 1; i >= 0; i--) {\n    if (arr[i] === 0) {\n      count++\n    } else {\n      break\n    }\n  }\n  return count\n}\n\nmodule.exports = {\n  moveOneBall,\n  nonDecreasing,\n  countTrailingZeroes\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let l1 = lst1.slice()\n  let l2 = lst2.slice()\n  if (l1.length!== l2.length) {\n    return 'NO'\n  }\n  for (let i = 0; i < l1.length; i++) {\n    if (l1[i]!== l2[i]) {\n      return 'NO'\n    }\n  }\n  return 'YES'\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const { length } = test;\n  const map = new Map();\n  const max = 0;\n  const count = 0;\n\n  for (let i = 0; i < length; i++) {\n    const letter = test.charAt(i);\n    if (map.has(letter)) {\n      const count = map.get(letter);\n      if (count > max) {\n        max = count;\n        count = 1;\n      } else {\n        count++;\n      }\n    } else {\n      map.set(letter, 1);\n    }\n  }\n\n  return map;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    let p = s.split('');\n    let newP = [];\n    let r = [];\n    for (let i = 0; i < p.length; i++) {\n        if (p[i]!== c[i % c.length]) {\n            newP.push(p[i]);\n            r.push(p[i]);\n        }\n    }\n    let newS = newP.join('');\n    for (let i = 0; i < newS.length; i++) {\n        if (newS[i]!== newS[newS.length - i - 1]) {\n            return [newS, false];\n        }\n    }\n    return [newS, true];\n};\n\nmodule.exports = reverseDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n    return lst.reduce((a, x) => {\n        const count = [0, 0, 0, 0];\n        for (let i = 0; i < x.length; i++) {\n            count[x.charAt(i) - '0']++;\n        }\n        return count;\n    }, [0, 0, 0, 0]);\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = 0;\n  let minSubArraySum = [];\n  let sums = [];\n  for (let i = 0; i < nums.length; i++) {\n    sums[i] = sums[i - 1] + nums[i];\n  }\n  sums.push(nums.length - 1);\n  for (let i = 0; i < sums.length; i++) {\n    if (sums[i] > minSum) {\n      minSum = sums[i];\n      minSubArraySum = [i, minSum];\n    }\n  }\n  return minSubArraySum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // => [3, 1]\nconsole.log(minSubArraySum([-1, -2, -3])); // => [-6, -6]\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const N = grid.length;\n  let result = 0;\n  for (let i = 0; i < N; i++) {\n    const [row, col] = [i, 0];\n    const rowLen = grid[row].length;\n    for (let j = 0; j < rowLen; j++) {\n      if (grid[row][j] === 1) {\n        const bucket = [row, col + j];\n        if (bucket[1] < rowLen && grid[bucket[0]][bucket[1]] === 1) {\n          const count = 1;\n          while (bucket[1] < rowLen && grid[bucket[0]][bucket[1]] === 1) {\n            count++;\n            bucket[1]++;\n          }\n          if (count >= capacity) {\n            result += count - 1;\n          }\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n\nconsole.log(maxFill(grid, 1));\nconsole.log(maxFill(grid, 2));\nconsole.log(maxFill(grid, 5));\nconsole.log(maxFill(grid, 6));\nconsole.log(maxFill(grid, 7));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  return arr.sort((a, b) => {\n    const a1 = a % 2, b1 = b % 2\n    if (a1 === b1) {\n      return a - b\n    } else if (a1 < b1) {\n      return 1\n    } else {\n      return -1\n    }\n  })\n}\n\n/*\n  In this Kata, you had to implement a string to integer converter. Given a string,\n  converts to integer.\n\n  >>> convert(\"4\")\n  4\n  >>> convert(\"12\")\n  12\n  >>> convert(\"-12\")\n  -12\n  >>> convert(\"1\")\n  1\n  >>> convert(\"10\")\n  10\n  >>> convert(\"abcd\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"a\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"a0\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"1a\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"1a0\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"10a\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"0a\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"0a0\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"1a0\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"-1\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"-1a\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"-1a0\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"10a0\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"10a0-\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"-1a0-\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"a0\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"a0-\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"a0-1\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"a0-1a\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"a0-1a0\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"0a0-1a0\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"a0-1a0-\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"0a0-1a0-\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"-1a0-\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"-1a0-1\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"-1a0-1a\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"-1a0-1a0\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"0a0-1a0-1a0\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"a0-1a0-1a0-\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"a0-1a0-1a0-1\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"a0-1a0-1a0-1a\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"a0-1a0-1a0-1a0\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"0a0-1a0-1a0-1a0\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"a0-1a0-1a0-1a0-\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"a0-1a0-1a0-1a0-1\")\n  Traceback (most recent call last):\n ...\n  ValueError: Only convert digits\n  >>> convert(\"a0-1a0-1a0-1a"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const split = s.split('')\n  for (let i = 0; i < split.length; i++) {\n    if (split[i] ==='') {\n      continue\n    }\n    if (split[i].length === n) {\n      words.push(split.slice(i).join(''))\n    }\n  }\n  return words\n}\n\nexport default selectWords\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const words = splitWord(word);\n  let closestVowel = \"\";\n  let firstVowel = \"\";\n  let secondVowel = \"\";\n  let thirdVowel = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const letter = words[i].charAt(0);\n    const vowel = letter + letter;\n    if (letter === vowels[0] || letter === vowels[1]) {\n      if (i === 0 || i === words.length - 1) {\n        closestVowel = vowel;\n      } else if (i === 1) {\n        firstVowel = vowel;\n      } else if (i === 2) {\n        secondVowel = vowel;\n      } else if (i === 3) {\n        thirdVowel = vowel;\n      }\n    }\n  }\n  if (closestVowel === firstVowel || closestVowel === secondVowel || closestVowel === thirdVowel) {\n    return \"\";\n  } else {\n    return closestVowel;\n  }\n};\n\nmodule.exports = getClosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    const current = lst[i]\n    if (current === '(') {\n      stack.push(current)\n    } else {\n      if (stack.length > 0) {\n        stack.pop()\n      } else {\n        return 'No'\n      }\n    }\n  }\n  return 'Yes'\n}\n\nexport { matchParens }\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    let result = arr;\n    while (k > 0) {\n        k--;\n        if (k === 0) break;\n        if (k > 0) {\n            if (arr[k - 1] > arr[k]) {\n                result = [arr[k], arr[k - 1]];\n            } else {\n                result = [arr[k - 1], arr[k]];\n            }\n        }\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let prev = 0\n  let total = 0\n\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      total += lst[i]\n    } else {\n      total += lst[i] - prev\n      prev = lst[i]\n    }\n  }\n\n  return total\n}\n\nconsole.log(solution([5, 8, 7, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    if (k > arr.length) {\n        return 0;\n    }\n\n    const sum = arr[0];\n    const result = sum;\n\n    for (let i = 1; i < k; i++) {\n        sum += arr[i];\n        result += sum;\n    }\n\n    return result;\n};\n\nconsole.log(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  if (n === 1) return [1];\n  return [...getOddCollatz(n / 2), n % 2? n : n / 2];\n};\n\nexport default getOddCollatz;\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === '') {\n    return false;\n  }\n  const parts = date.split('-');\n  if (parts.length!== 3) {\n    return false;\n  }\n  const month = parts[0];\n  const day = parts[1];\n  const year = parts[2];\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (year < 1000 || year > 3000) {\n    return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  } else if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  } else {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words.map(word => word.toLowerCase());\n};\n\nmodule.exports = splitWords;\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let last = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] <= last) {\n      return false;\n    }\n    last = lst[i];\n  }\n  return true;\n};\n\n/**\n * Finds the median of a sorted list\n * @param {Array} list - A sorted array\n * @return {Number}\n */\nconst median = (list) => {\n  const middle = list.length / 2;\n  return list[middle];\n};\n\n/**\n * Finds the mode of a sorted list\n * @param {Array} list - A sorted array\n * @return {Number}\n */\nconst mode = (list) => {\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > max) {\n      max = list[i];\n      index = i;\n    }\n  }\n  return list[index];\n};\n\n/**\n * Finds the mode of a sorted list\n * @param {Array} list - A sorted array\n * @return {Number}\n */\nconst mode2 = (list) => {\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > max) {\n      max = list[i];\n      index = i;\n    }\n  }\n  return list[index];\n};\n\n/**\n * Finds the mode of a sorted list\n * @param {Array} list - A sorted array\n * @return {Number}\n */\nconst mode3 = (list) => {\n  let max = 0;\n  let index = 0;\n  let count = 1;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > max) {\n      max = list[i];\n      index = i;\n      count = 1;\n    } else if (list[i] === max) {\n      count++;\n    }\n  }\n  return list[index];\n};\n\n/**\n * Finds the mode of a sorted list\n * @param {Array} list - A sorted array\n * @return {Number}\n */\nconst mode4 = (list) => {\n  let max = 0;\n  let index = 0;\n  let count = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > max) {\n      max = list[i];\n      index = i;\n      count = 0;\n    } else if (list[i] === max) {\n      count++;\n    }\n  }\n  return list[index];\n};\n\n/**\n * Finds the mode of a sorted list\n * @param {Array} list - A sorted array\n * @return {Number}\n */\nconst mode5 = (list) => {\n  let max = 0;\n  let index = 0;\n  let count = 1;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > max) {\n      max = list[i];\n      index = i;\n      count = 1;\n    } else if (list[i] === max) {\n      count++;\n    }\n  }\n  return list[index];\n};\n\n/**\n * Finds the mode of a sorted list\n * @param {Array} list - A sorted array\n * @return {Number}\n */\nconst mode6 = (list) => {\n  let max = 0;\n  let index = 0;\n  let count = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > max) {\n      max = list[i];\n      index = i;\n      count = 0;\n    } else if (list[i] === max) {\n      count++;\n    }\n  }\n  return list[index];\n};\n\n/**\n * Finds the mode of a sorted list\n * @param {Array} list - A sorted array\n * @return {Number}\n */\nconst mode7 = (list) => {\n  let max = 0;\n  let index = 0;\n  let count = 0;\n  let max2 = 0;\n  let index2 = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > max) {\n      max = list[i];\n      index = i;\n      count = 0;\n    } else if (list[i] === max) {\n      count++;\n    }\n    if (count > count2) {\n      max2 = list[i];\n      index2 = i;\n      count2 = count;\n    }\n  }\n  return list[index];\n};\n\nexport { isSorted, median, mode, mode2, mode3, mode4, mode5, mode6, mode7 };\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let intersect = false;\n  for (let i = interval1.start; i <= interval1.end; i++) {\n    for (let j = interval2.start; j <= interval2.end; j++) {\n      if (i + j === interval1.end + interval2.end) {\n        intersect = true;\n      }\n    }\n  }\n  if (intersect) {\n    return 'YES';\n  } else {\n    return 'NO';\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let res = 0\n  arr.forEach((item, index) => {\n    if (typeof item === 'number') {\n      res += Math.abs(item) * Math.sign(item)\n    }\n  })\n  return res\n}\n\nmodule.exports = prodSigns\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  if (grid.length < 2) {\n    return [];\n  }\n\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const paths = [[]];\n  let result = [];\n\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] > 0) {\n        paths.push([i, j]);\n      }\n    }\n  }\n\n  let currPaths = [];\n  while (paths.length > 0) {\n    currPaths = paths.slice();\n    for (let p of currPaths) {\n      let idx = paths.indexOf(p);\n      paths.splice(idx, 1);\n      if (currPaths.length === k) {\n        result.push(currPaths[0][0]);\n      }\n      if (currPaths.length === 1) {\n        break;\n      }\n      let neighbors = [...currPaths];\n      neighbors.splice(0, 1);\n      for (let n of neighbors) {\n        paths.push([...currPaths, n]);\n      }\n    }\n  }\n\n  return result;\n};\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));\nconsole.log(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const a = 1;\n  const b = 2;\n  const c = 3;\n  const res = [];\n  for (let i = 0; i < n + 1; i++) {\n    res.push(tri(i));\n  }\n  return res;\n};\n\nconst result = tri(3);\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  const x = n.toString();\n  return (x.length % 2)? 0 : x.split('').reduce((acc, c) => acc * c, 1);\n};\n\n// Test\nconsole.log(digits(2));\nconsole.log(digits(235));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const stringLength = string.length;\n  if (stringLength < 3) return false;\n\n  const bracketsCount = string.split('').filter(e => e === '[').length;\n\n  if (bracketsCount === 0) return false;\n\n  let currentBracket = 0;\n  let currentBrackets = 0;\n  let hasNest = false;\n  let hasNoNest = false;\n\n  for (let i = 0; i < stringLength; i += 1) {\n    if (string[i] === '[') {\n      if (hasNest === false) {\n        currentBracket += 1;\n        currentBrackets += 1;\n      }\n      hasNest = true;\n    } else if (string[i] === ']') {\n      if (hasNest === true) {\n        if (currentBrackets === bracketsCount) {\n          hasNoNest = true;\n        } else {\n          currentBracket -= 1;\n          currentBrackets -= 1;\n        }\n        hasNest = false;\n      }\n    }\n  }\n\n  return hasNoNest;\n};\n\nconsole.log(isNested('[[]]')); // true\nconsole.log(isNested('[]]]]]]]]]]')); // true\nconsole.log(isNested('[]]')); // false\nconsole.log(isNested('[][]')); // false\nconsole.log(isNested('[]')); // false\nconsole.log(isNested('[[][]]')); // true\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return lst.reduce((acc, n) => {\n    return acc + (n * n);\n  }, 0);\n}\n\nmodule.exports = sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) {\n        return false;\n    }\n    const last = txt.charAt(txt.length - 1);\n    if (alphabetical(last)) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\n/* Create a functions that returns trueer if the first character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ true\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n    if (txt.length === 0) {\n        return false;\n    }\n    const first = txt.charAt(0);\n    if (alphabetical(first)) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\n/* Create a functions that returns trueer if a string is a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  isWord(\"apple pie\") ➞ true\n  isWord(\"apple pi e\") ➞ false\n  isWord(\"apple pi e \") ➞ false\n  isWord(\"\") ➞ false\n  */\nconst isWord = (txt) => {\n    if (txt.length === 0) {\n        return false;\n    }\n    const last = txt.charAt(txt.length - 1);\n    if (alphabetical(last)) {\n        return false;\n    } else {\n        return true;\n    }\n};\n\n/* Create a function that returns true if a string is an alphabetical string, and false otherwise. */\nconst alphabetical = (txt) => {\n    if (txt.length === 0) {\n        return false;\n    }\n    for (let i = 0; i < txt.length; i++) {\n        if (!alphabetical(txt.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/* Create a function that returns true if a string contains an alphabetical character, and false otherwise. */\nconst containsAlphabetical = (txt) => {\n    if (txt.length === 0) {\n        return false;\n    }\n    for (let i = 0; i < txt.length; i++) {\n        if (!alphabetical(txt.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/* Create a function that returns true if a string is a string, and false otherwise. */\nconst isString = (txt) => {\n    return txt instanceof String;\n};\n\n/* Create a function that returns true if a string is an array, and false otherwise. */\nconst isArray = (txt) => {\n    return Array.isArray(txt);\n};\n\n/* Create a function that returns true if a string is a number, and false otherwise. */\nconst isNumber = (txt) => {\n    return txt instanceof Number;\n};\n\n/* Create a function that returns true if a string is a date, and false otherwise. */\nconst isDate = (txt) => {\n    return txt instanceof Date;\n};\n\n/* Create a function that returns true if a string is an object, and false otherwise. */\nconst isObject = (txt) => {\n    return txt instanceof Object;\n};\n\n/* Create a function that returns true if a string is a function, and false otherwise. */\nconst isFunction = (txt) => {\n    return txt instanceof Function;\n};\n\n/* Create a function that returns true if a string is a boolean, and false otherwise. */\nconst isBoolean = (txt) => {\n    return txt instanceof Boolean;\n};\n\n/* Create a function that returns true if a string is an empty string, and false otherwise. */\nconst isEmptyString = (txt) => {\n    if (txt.length === 0) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\n/* Create a function that returns true if a string is a number with decimal, and false otherwise. */\nconst isNumberWithDecimal = (txt) => {\n    if (isNumber(txt)) {\n        const txtInt = parseInt(txt);\n        if (isNaN(txtInt)) {\n            return false;\n        }\n        return true;\n    }\n    return false;\n};\n\n/* Create a function that returns true if a string is a number with decimal, and false otherwise. */\nconst isNumberWithoutDecimal = (txt) => {\n    if (isNumber(txt)) {\n        const txtInt = parseInt(txt);\n        if (isNaN(txtInt)) {\n            return false;\n        }\n        return true;\n    }\n    return false;\n};\n\n/* Create a function that returns true if a string is a number with decimal, and false otherwise. */\nconst isNumberWithComma = (txt) => {\n    if (isNumber(txt)) {\n        const txtInt = parseInt(txt);\n        if (isNaN(txtInt)) {\n            return false;\n        }\n        return true;\n    }\n    return false;\n};\n\n/* Create a function that returns true if a string is a number without decimal, and false otherwise. */\nconst isNumberWithoutComma = (txt) => {\n    if (isNumber(txt)) {\n        const txtInt = parseInt(txt);\n        if (isNaN(txtInt)) {\n            return false;\n        }\n        return true;\n    }\n    return false;\n};\n\n/* Create a function that returns true if a"}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (!Array.isArray(arr)) {\n    throw new Error('The given argument must be an array.');\n  }\n  let result = -1;\n  let minIndex = -1;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < arr.length && j < arr.length) {\n    if (arr[i] < arr[j]) {\n      if (minIndex === -1 || arr[minIndex] > arr[i]) {\n        minIndex = i;\n      }\n      i += 1;\n    } else if (arr[i] === arr[j]) {\n      j += 1;\n      i += 1;\n    } else {\n      if (minIndex === -1 || arr[minIndex] > arr[j]) {\n        minIndex = j;\n      }\n      j += 1;\n    }\n  }\n  return minIndex;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = null, b = null;\n  for (let i = 0; i < lst.length; i++) {\n    const current = lst[i];\n    if (current < 0) {\n      if (!a) {\n        a = current;\n      } else {\n        a = Math.max(a, current);\n      }\n    } else if (current > 0) {\n      if (!b) {\n        b = current;\n      } else {\n        b = Math.min(b, current);\n      }\n    }\n  }\n  return a? [a, b] : null;\n};\n\n/*\n Create a functions that returns a tuple (a, b), where 'a' is the sum of integers in a list, and 'b' is the difference.\n If there is no integers in a list, return them as nulls.\n  Examples:\n  sumDifference([2, 4, 1, 3, 5, 7]) == (6, 10)\n  sumDifference([]) == (null, null)\n  sumDifference([0]) == (null, null)\n  sumDifference([0, 1]) == (1, 1)\n  sumDifference([0, 1, 2]) == (3, 1)\n  */\nconst sumDifference = (lst) => {\n  const sum = (n) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n      result += lst[i];\n    }\n    return result;\n  };\n  let diff = null;\n  for (let i = 0; i < lst.length; i++) {\n    const current = lst[i];\n    if (current) {\n      if (!diff) {\n        diff = current;\n      } else {\n        diff = diff - current;\n      }\n    }\n  }\n  return diff? [sum(lst), diff] : null;\n};\n\n/*\n Create a function that returns a string containing the sum of the numbers in the list.\n If there is no numbers in a list, return null.\n  Examples:\n  sum([2, 4, 1, 3, 5, 7]) == '15'\n  sum([]) == null\n  sum([0, 1, 2]) == '6'\n  sum([0, 1, 2, 3]) == '10'\n  sum([0, 1, 2, 3, 4]) == '14'\n  sum([0, 1, 2, 3, 4, 5]) == '21'\n  sum([0, 1, 2, 3, 4, 5, 6]) == '26'\n  sum([0, 1, 2, 3, 4, 5, 6, 7]) == '33'\n  sum([0, 1, 2, 3, 4, 5, 6, 7, 8]) == '40'\n  sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == '49'\n  sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == '56'\n  */\nconst sum = (lst) => {\n  const sum = (n) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n      result += lst[i];\n    }\n    return result;\n  };\n  let total = sum(lst);\n  if (lst.length) {\n    return total;\n  }\n  return null;\n};\n\n/*\n Create a function that returns a string containing the difference between the first and last number in the list.\n If there is no numbers in a list, return null.\n  Examples:\n  difference([2, 4, 1, 3, 5, 7]) == '9'\n  difference([]) == null\n  difference([0, 1, 2]) == '1'\n  difference([0, 1, 2, 3]) == '2'\n  difference([0, 1, 2, 3, 4]) == '3'\n  difference([0, 1, 2, 3, 4, 5]) == '4'\n  difference([0, 1, 2, 3, 4, 5, 6]) == '5'\n  difference([0, 1, 2, 3, 4, 5, 6, 7]) == '6'\n  difference([0, 1, 2, 3, 4, 5, 6, 7, 8]) == '7'\n  difference([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == '8'\n  difference([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == '9'\n  */\nconst difference = (lst) => {\n  const difference = (n) => {\n    let result = 0;\n    for (let i = 1; i < lst.length; i++) {\n      result += lst[i] - lst[i - 1];\n    }\n    return result;\n  };\n  let total = difference(lst);\n  if (lst.length) {\n    return total;\n  }\n  return null;\n};\n\n/*\n Create a function that returns the first number in the list.\n If there is no numbers in a list, return null.\n  Examples:\n  first([2, 4, 1, 3, 5, 7]) == 2\n  first([]) == null\n  first([0, 1, 2]) == 0\n  first([0, 1, 2, 3]) == 0\n  first([0, 1, 2, 3, 4]) == 0\n  first([0, 1, 2, 3, 4, 5]) == 0\n  first([0, 1, 2, 3, 4, 5, 6]) == 0\n  first([0, 1, 2, 3, 4, 5, 6, 7]) == 0\n  first([0, 1, 2, 3, 4, 5, 6, 7, 8]) == 0\n  first([0, 1,"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n    // console.log(a, b);\n    if (typeof a === 'number' && typeof b === 'number') {\n        return a > b? b : a;\n    } else if (typeof a ==='string' && typeof b ==='string') {\n        if (a.indexOf(',') > -1) {\n            return parseFloat(a);\n        } else {\n            return parseFloat(a);\n        }\n    } else {\n        return null;\n    }\n};\n\n/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the small variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 1.5 compareOne(1, \"2,3\") ➞ 1 compareOne(\"5,1\", \"6\") ➞ null */ const compareTwo = (a, b) => {\n    if (typeof a === 'number' && typeof b === 'number') {\n        return a < b? b : a;\n    } else if (typeof a ==='string' && typeof b ==='string') {\n        if (a.indexOf(',') > -1) {\n            return parseFloat(a);\n        } else {\n            return parseFloat(a);\n        }\n    } else {\n        return null;\n    }\n};\n\n/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the medium variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2\" compareOne(\"5,1\", \"6\") ➞ \"4\" */ const compareThree = (a, b) => {\n    if (typeof a === 'number' && typeof b === 'number') {\n        return a + b;\n    } else if (typeof a ==='string' && typeof b ==='string') {\n        return a + b;\n    } else {\n        return null;\n    }\n};\n\n/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the sum variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2\" compareOne(\"5,1\", \"6\") ➞ \"7\" */ const compareFour = (a, b) => {\n    if (typeof a === 'number' && typeof b === 'number') {\n        return a + b;\n    } else if (typeof a ==='string' && typeof b ==='string') {\n        return a + b;\n    } else {\n        return null;\n    }\n};\n\n/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the average variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2\" compareOne(\"5,1\", \"6\") ➞ \"4.5\" */ const compareFive = (a, b) => {\n    if (typeof a === 'number' && typeof b === 'number') {\n        return (a + b) / 2;\n    } else if (typeof a ==='string' && typeof b ==='string') {\n        return (a + b) / 2;\n    } else {\n        return null;\n    }\n};\n\n/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the product variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2\" compareOne(\"5,1\", \"6\") ➞ \"6\" */ const compareSix = (a, b) => {\n    if (typeof a === 'number' && typeof b === 'number') {\n        return a * b;\n    } else if (typeof a ==='string' && typeof b ==='string') {\n        return a * b;\n    } else {\n        return null;\n    }\n};\n\n/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the sum variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2\" compareOne(\"5,1\", \"6\") ➞ \"7\" */ const compareSeven = (a, b) => {\n    if (typeof a === 'number' && typeof b === 'number') {\n        return a + b;\n    } else if (typeof a ==='string' && typeof b ==='string') {\n        return a + b;\n    } else {\n        return null;\n    }\n};\n\n/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the sum variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2\" compareOne(\"5,"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const evens = [];\n  for (let i = 1; i < n; i += 2) {\n    if (i % 2 === 0) {\n      evens.push(i);\n    }\n  }\n  const sum = evens.reduce((prev, curr) => prev + curr, 0);\n  return sum === n;\n};\n\n/*\n  Check if the given number n is divisible by one, 2 or 3\n  Example\n  isDivisibleByOne(4) == true\n  isDivisibleByOne(3) == true\n  isDivisibleByOne(4.3) == false\n  isDivisibleByOne(6) == false\n*/\nconst isDivisibleByOne = (n) => {\n  return isDivisibleByTwo(n) || isDivisibleByThree(n);\n};\n\n/*\n  Check if the given number n is divisible by two, 4 or 6\n  Example\n  isDivisibleByTwo(3) == false\n  isDivisibleByTwo(4) == true\n  isDivisibleByTwo(6) == true\n  isDivisibleByTwo(8) == false\n*/\nconst isDivisibleByTwo = (n) => {\n  return isDivisibleByThree(n) || isDivisibleBySix(n);\n};\n\n/*\n  Check if the given number n is divisible by three, 3 or 6\n  Example\n  isDivisibleByThree(3) == false\n  isDivisibleByThree(6) == true\n  isDivisibleByThree(8) == false\n*/\nconst isDivisibleByThree = (n) => {\n  return isDivisibleBySix(n) || isDivisibleBySix(n * 3);\n};\n\n/*\n  Check if the given number n is divisible by 6, 2 or 4\n  Example\n  isDivisibleBySix(3) == false\n  isDivisibleBySix(6) == true\n  isDivisibleBySix(8) == false\n*/\nconst isDivisibleBySix = (n) => {\n  return isDivisibleByTwo(n) || isDivisibleByFour(n);\n};\n\n/*\n  Check if the given number n is divisible by 4, 2 or 8\n  Example\n  isDivisibleByFour(3) == false\n  isDivisibleByFour(6) == false\n  isDivisibleByFour(8) == true\n*/\nconst isDivisibleByFour = (n) => {\n  return isDivisibleByTwo(n) || isDivisibleByEight(n);\n};\n\n/*\n  Check if the given number n is divisible by 8, 2 or 4\n  Example\n  isDivisibleByEight(3) == false\n  isDivisibleByEight(6) == false\n  isDivisibleByEight(8) == true\n*/\nconst isDivisibleByEight = (n) => {\n  return isDivisibleByTwo(n) || isDivisibleByFour(n);\n};\n\n/*\n  Check if the given number n is divisible by two or four\n  Example\n  isDivisibleByTwo(3) == true\n  isDivisibleByTwo(6) == true\n  isDivisibleByTwo(8) == true\n  isDivisibleByFour(3) == true\n  isDivisibleByFour(6) == true\n  isDivisibleByFour(8) == true\n*/\nconst isDivisibleByTwoOrFour = (n) => {\n  return isDivisibleByTwo(n) || isDivisibleByFour(n);\n};\n\n/*\n  Check if the given number n is divisible by two, four or 8\n  Example\n  isDivisibleByTwo(3) == true\n  isDivisibleByTwo(6) == true\n  isDivisibleByTwo(8) == true\n  isDivisibleByFour(3) == true\n  isDivisibleByFour(6) == true\n  isDivisibleByFour(8) == true\n*/\nconst isDivisibleByTwoOrFourOrEight = (n) => {\n  return isDivisibleByTwo(n) || isDivisibleByFour(n) || isDivisibleByEight(n);\n};\n\n/*\n  Check if the given number n is divisible by 2 or 4\n  Example\n  isDivisibleByTwo(3) == true\n  isDivisibleByTwo(6) == true\n  isDivisibleByTwo(8) == true\n  isDivisibleByFour(3) == false\n  isDivisibleByFour(6) == false\n  isDivisibleByFour(8) == false\n*/\nconst isDivisibleByTwoOrFourOrEightButNotTwo = (n) => {\n  return isDivisibleByTwo(n) || isDivisibleByFour(n) || isDivisibleByEight(n) && n!== 2;\n};\n\n/*\n  Check if the given number n is divisible by 3, 6 or 8\n  Example\n  isDivisibleByThree(3) == true\n  isDivisibleByThree(6) == true\n  isDivisibleByThree(8) == true\n  isDivisibleBySix(3) == false\n  isDivisibleBySix(6) == false\n  isDivisibleBySix(8) == false\n*/\nconst isDivisibleByThreeOrSixOrEight = (n) => {\n  return isDivisibleByThree(n) || isDivisibleBySix(n) || isDivisibleByEight(n);\n};\n\n/*\n  Check if the given number n is divisible by 3, 6 or 8\n  but not 2\n  Example\n  isDivisibleByThree(3) == true\n  isDivisibleByThree(6) == true\n  isDivisibleByThree(8) == true\n  isDivisibleBySix(3) == false\n  isDivisibleBySix(6) == false\n  isDivisibleBySix(8) == false\n*/\nconst isDivisibleByThreeOrSixOrEightButNotTwo = (n) => {\n  return isDivisibleByThree(n) || isDivisibleBySix(n) || isDivisibleByEight(n) && n!== 2;\n};\n\n/*\n  Check if the given number n is divisible by 2, 3, 4 or 6\n  Example\n  isDivisibleByTwo(3)"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n  const result = n;\n  let num = 1;\n  let sub = 1;\n  let sub_result;\n\n  for (let i = 2; i <= n; i++) {\n    sub_result = result / i;\n    result -= sub_result;\n    num *= sub;\n    sub *= i;\n    result += sub_result;\n  }\n\n  return result;\n};\n\nconsole.log(specialFactorial(4));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    return text.replace(/\\s+/g, '_').replace(/-{2,}/g, '-');\n}\n\n/**\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces2 = (text) => {\n    return text.replace(/\\s+/g, '-');\n}\n\nconst fixSpaces3 = (text) => {\n    return text.replace(/-{2,}/g, '-');\n}\n\nmodule.exports = {\n    fixSpaces,\n    fixSpaces2,\n    fixSpaces3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let no_ext = file_name.split(\".\")[0]\n  let valid_ext = [\"txt\", \"exe\", \"dll\"]\n  let valid_name = /[a-zA-Z][a-zA-Z0-9.]+[a-zA-Z0-9]+/\n  let is_valid = true\n  let is_valid_ext = true\n  let valid_ext_size = 0\n  let is_valid_ext_size = 0\n\n  //validate the name\n  if(!valid_name.test(no_ext)){\n    is_valid = false\n  }\n\n  //validate the extension\n  for(let i = 0; i < valid_ext.length; i++){\n    if(valid_ext[i] === no_ext.substr(no_ext.length - 3, 3)){\n      valid_ext_size = valid_ext.length\n      is_valid_ext = true\n      break\n    }\n  }\n\n  //validate the extension size\n  if(valid_ext_size!== valid_ext.length){\n    is_valid_ext = false\n  }\n\n  return {\n    is_valid: is_valid,\n    is_valid_ext: is_valid_ext,\n  }\n}\n\nmodule.exports = fileNameCheck\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let n = lst[i];\n        if (n >= 0) {\n            result += n * n;\n        }\n    }\n    return result;\n};\n\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126]));<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let words = sentence.split(' ');\n    words.sort();\n    let res = [];\n    let index = 0;\n    while(index < words.length) {\n        let length = words[index].length;\n        while(length > 0) {\n            if(length > 2) {\n                res.push(words[index]);\n                length--;\n            }\n            length = length % 2;\n            index++;\n        }\n    }\n    return res.join(' ');\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  if (typeof n!=='string') {\n    throw new Error('Type n is not string');\n  }\n  if (typeof x!=='string') {\n    throw new Error('Type x is not string');\n  }\n  const a = x.split('/');\n  const b = n.split('/');\n  let c = a[0] * b[1] - a[1] * b[0];\n  if (a[0]!== '' && b[0]!== '' && b[0]!== 0) {\n    c += '/' + a[0];\n  }\n  if (a[1]!== '' && b[1]!== '' && b[1]!== 0) {\n    c += '/' + a[1];\n  }\n  return c === 0 || c === 1;\n};\n\nconsole.log(simplify('1/5', '5/1'));\nconsole.log(simplify('1/6', '2/1'));\nconsole.log(simplify('7/10', '10/2'));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let arr = [].concat(nums);\n  let sorted = [];\n  arr.sort((a, b) => {\n    let sumA = a + b;\n    let sumB = b + a;\n    if (sumA > sumB) {\n      return 1;\n    } else if (sumA < sumB) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n  for (let i = 0; i < arr.length; i++) {\n    sorted.push(arr[i]);\n  }\n  return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const res = [];\n\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && (nums[i] % 10 === 1 || nums[i] % 10 === 3 || nums[i] % 10 === 5 || nums[i] % 10 === 7 || nums[i] % 10 === 9)) {\n      res.push(nums[i]);\n    }\n  }\n\n  return res.length;\n}\n\nexport default specialFilter;<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    let a = [1, 3, 7, 13, 21];\n    let triples = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] % 3 === 0) {\n                    triples++;\n                }\n            }\n        }\n    }\n    return triples;\n};\n\n/*\n  You was given an array a of length n. You had to create an integer array b of length n, and for each i (1 ≤ i ≤ n), set b[i] = a[i] * a[i] - a[i] + 1. Return the number of pairs (a[i], b[i]) of a where i < j, and a[i] + b[i] is a multiples of 3.\n\n  Example:\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      b = [0, 1, 2, 4, 8, 12, 16, 20]\n      The only valid pair is (1, 1).\n  */\nconst getMaxPairs = (n) => {\n    let a = [1, 3, 7, 13, 21];\n    let b = [0, 1, 2, 4, 8, 12, 16, 20];\n    let pairs = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (a[i] + b[j] % 3 === 0) {\n                pairs++;\n            }\n        }\n    }\n    return pairs;\n};\n\n/*\n  You were given an array a of length n. You had to create an integer array b of length n, and for each i (1 ≤ i ≤ n), set b[i] = a[i] * a[i] - a[i] + 1. Return the number of triples (a[i], b[i], c[i]) of a where i < j < k, and a[i] + b[i] + c[i] is a multiples of 3.\n\n  Example:\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      b = [0, 1, 2, 4, 8, 12, 16, 20]\n      c = [1, 3, 7, 13, 21, 29, 37, 45]\n      The only valid triples are (1, 1, 1), (1, 1, 3).\n  */\nconst getMaxTriplesPairs = (n) => {\n    let a = [1, 3, 7, 13, 21];\n    let b = [0, 1, 2, 4, 8, 12, 16, 20];\n    let c = [1, 3, 7, 13, 21, 29, 37, 45];\n    let triples = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + b[j] + c[k] % 3 === 0) {\n                    triples++;\n                }\n            }\n        }\n    }\n    return triples;\n};\n\nconst testMaxPairs = () => {\n    assert.equal(getMaxPairs(4), 1);\n    assert.equal(getMaxPairs(5), 2);\n    assert.equal(getMaxPairs(6), 2);\n    assert.equal(getMaxPairs(7), 3);\n    assert.equal(getMaxPairs(8), 4);\n    assert.equal(getMaxPairs(9), 4);\n    assert.equal(getMaxPairs(10), 5);\n    assert.equal(getMaxPairs(11), 5);\n    assert.equal(getMaxPairs(12), 5);\n    assert.equal(getMaxPairs(13), 6);\n    assert.equal(getMaxPairs(14), 6);\n    assert.equal(getMaxPairs(15), 6);\n    assert.equal(getMaxPairs(16), 7);\n    assert.equal(getMaxPairs(17), 7);\n    assert.equal(getMaxPairs(18), 7);\n    assert.equal(getMaxPairs(19), 8);\n    assert.equal(getMaxPairs(20), 8);\n    assert.equal(getMaxPairs(21), 8);\n    assert.equal(getMaxPairs(22), 9);\n    assert.equal(getMaxPairs(23), 9);\n    assert.equal(getMaxPairs(24), 9);\n    assert.equal(getMaxPairs(25), 10);\n    assert.equal(getMaxPairs(26), 10);\n    assert.equal(getMaxPairs(27), 10);\n    assert.equal(getMaxPairs(28), 11);\n    assert.equal(getMaxPairs(29), 11);\n    assert.equal(getMaxPairs(30), 11);\n    assert.equal(getMaxPairs(31), 12);\n    assert.equal(getMaxPairs(32), 12);\n    assert.equal(getMaxPairs(33), 12);\n    assert.equal(getMaxPairs(34), 13);\n    assert.equal(getMaxPairs(35), 13);\n    assert.equal(getMaxPairs(36), 13);\n    assert.equal(getMaxPairs(37), 14);\n    assert.equal(getMaxPairs(38), 14);\n    assert.equal"}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    var suns = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Orbit = getOrbit(planet1);\n    var planet2Orbit = getOrbit(planet2);\n    var sunsOrbit = getOrbit(\"Sun\");\n    var sunsOrbit2 = getOrbit(\"Sun\");\n    var sunsLength = sunsOrbit.length;\n    var planet1Length = planet1Orbit.length;\n    var planet2Length = planet2Orbit.length;\n    var result = [];\n\n    for (var i = 0; i < sunsLength; i++) {\n        sunsOrbit[i].index = i;\n        sunsOrbit2[i].index = i;\n    }\n\n    for (var i = 0; i < sunsLength; i++) {\n        if (suns[i] == planet1) {\n            sunsOrbit[i].index = i;\n        }\n\n        if (suns[i] == planet2) {\n            sunsOrbit2[i].index = i;\n        }\n    }\n\n    for (var i = 0; i < sunsLength; i++) {\n        for (var j = 0; j < sunsLength; j++) {\n            if (suns[i].index == sunsOrbit[j].index) {\n                result.push(suns[i]);\n            }\n\n            if (suns[i].index == sunsOrbit2[j].index) {\n                result.push(suns[i]);\n            }\n        }\n    }\n\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const length = lst.reduce((p, c) => p + c.length, 0);\n  let sorted = lst.sort((a, b) => b.length - a.length);\n  const sortedLength = sorted.reduce((p, c) => p + c.length, 0);\n  return sorted.filter((w) => w.length === length).map((w) => w.toUpperCase());\n};\n\nexport default sortedListSum;\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if(isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  return n > 1 && n % 2 === 0 && n >= 2;\n};\n\nconsole.log(xOrY(3, 7, 34));\nconsole.log(xOrY(15, 8, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  let diff = 0;\n  let length = 0;\n  const x = lst.reduce((acc, num) => {\n    if (num < 0 || isNaN(num) || typeof num!== 'number') return acc;\n    if (acc < 0) {\n      diff += Math.pow(num, 2);\n      length++;\n    } else {\n      diff += Math.pow(num, 2) - acc;\n    }\n    return num;\n  }, 0);\n  return length === 0? 0 : diff;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  game.forEach((score, index) => {\n    guess.forEach((guess, index) => {\n      if (score === guess) {\n        result.push(0);\n      } else {\n        result.push(Math.abs(score - guess));\n      }\n    });\n  });\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const class_name_split = class_name.split('.');\n  const caps_length = class_name_split[1].length;\n  const sm_length = class_name_split[2].length;\n  let strongest_extension = '.';\n  for (let i = 0; i < extensions.length; i++) {\n    const extension = extensions[i];\n    const extension_name = extension.split('.');\n    const extension_caps_length = extension_name[1].length;\n    const extension_sm_length = extension_name[2].length;\n    const extension_strength = Math.abs(caps_length - extension_caps_length) - Math.abs(sm_length - extension_sm_length);\n    if (extension_strength > strongest_extension.length) {\n      strongest_extension = extension;\n    }\n  }\n  return class_name + '.' + strongest_extension;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n    const aArray = a.split('')\n    const bArray = b.split('')\n    const diff = aArray.length - bArray.length\n    if (diff < 0) {\n        const temp = bArray\n        bArray = aArray\n        aArray = temp\n    }\n    const result = []\n    let i = 0\n    let j = 0\n    let start = 0\n    let found = false\n    while (i < bArray.length) {\n        while (j < aArray.length && bArray[i] === aArray[j]) {\n            i++\n            j++\n            if (i === bArray.length) {\n                found = true\n                break\n            }\n        }\n        if (found) {\n            break\n        }\n        const index = i + diff\n        if (index < 0) {\n            index = 0\n        }\n        result.push(bArray.slice(start, index).join(''))\n        start = index\n        found = false\n        while (i < bArray.length) {\n            while (j < aArray.length && bArray[i] === aArray[j]) {\n                i++\n                j++\n                if (i === bArray.length) {\n                    found = true\n                    break\n                }\n            }\n            if (found) {\n                break\n            }\n            const index = i + diff\n            if (index < 0) {\n                index = 0\n            }\n            result.push(bArray.slice(start, index).join(''))\n            start = index\n            found = false\n        }\n        i = start\n    }\n    return result.indexOf(b) > -1\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  while (num) {\n    num = num % 10;\n    if (num === 0) {\n      count++;\n    }\n  }\n  return (count % 2 === 0)? (1, 0) : (0, 1);\n}\n\nconst isEven = (num) => {\n  return evenOddCount(num)[0];\n}\n\nconst isOdd = (num) => {\n  return evenOddCount(num)[1];\n}\n\nexport default {\n  isEven,\n  isOdd\n};\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    // number should be an integer\n    if (number > 1000 || number < 1) {\n        return \"ERROR\";\n    }\n\n    var string = '';\n    for (var i = 1; i <= number; i++) {\n        if (number % i == 0) {\n            string += `${i}${i == 1? 'i' : 'v'}`;\n            number = number / i;\n        }\n    }\n    if (number > 0) {\n        string += `${number}`;\n    }\n\n    return string;\n};\n\nconsole.log(intToMiniRoman(19));\nconsole.log(intToMiniRoman(152));\nconsole.log(intToMiniRoman(426));\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const c_angle = (a + b + c) / 2;\n  const b_angle = (a + c + b) / 2;\n  const a_angle = (a + b + c) / 3;\n\n  if ((b_angle < a_angle && c_angle < a_angle) || (b_angle > a_angle && c_angle > a_angle)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst getLength = (a, b) => {\n  return (Math.pow(a, 2) + Math.pow(b, 2)) / 2;\n};\n\nconst getLengths = (a, b, c) => {\n  return [\n    getLength(a, b),\n    getLength(b, c),\n    getLength(c, a)\n  ];\n};\n\nconst getRightAngleTriangle = (a, b, c) => {\n  const lengths = getLengths(a, b, c);\n\n  return rightAngleTriangle(lengths[0], lengths[1], lengths[2]);\n};\n\nconst rightAngleTriangle = (a, b, c) => {\n  const lengths = getLengths(a, b, c);\n\n  if (rightAngleTriangle(lengths[0], lengths[1], lengths[2])) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nmodule.exports = {\n  rightAngleTriangle: rightAngleTriangle,\n  getLength: getLength\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n\tlet maxCount = 0;\n\tlet maxWord = \"\";\n\tfor (let i = 0; i < words.length; i++) {\n\t\tconst count = countWords(words[i]);\n\t\tif (count > maxCount) {\n\t\t\tmaxCount = count;\n\t\t\tmaxWord = words[i];\n\t\t}\n\t}\n\treturn maxWord;\n}\n\nconst countWords = (word) => {\n\tconst count = word.split(\"\").reduce((a, b) => {\n\t\treturn a + b.length;\n\t}, 0);\n\treturn count;\n}\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"games\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if(number === 0) {\n    return [0, need];\n  } else if(remaining < need) {\n    return [number, remaining];\n  } else {\n    return [number - (need - remaining), need];\n  }\n}\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    const operatorList = operator.split('')\n    const operandList = operand.split('')\n    const result = 0\n    for (let i = 0; i < operatorList.length; i++) {\n        let a = parseInt(operandList[i])\n        let b = parseInt(operandList[i + 1])\n        if (operatorList[i] === '+') {\n            result += a + b\n        }\n        if (operatorList[i] === '-') {\n            result -= a + b\n        }\n        if (operatorList[i] === '*') {\n            result *= a + b\n        }\n        if (operatorList[i] === '/') {\n            result /= a + b\n        }\n        if (operatorList[i] === '//') {\n            result = Math.floor(result / a + b)\n        }\n        if (operatorList[i] === '**') {\n            result = Math.pow(result, a + b)\n        }\n    }\n    return result\n}\n\nconsole.log(doAlgebra('+', ['2', '3', '4', '5']))\nconsole.log(doAlgebra('*', ['2', '3', '4', '5']))\nconsole.log(doAlgebra('-', ['2', '3', '4', '5']))\nconsole.log(doAlgebra('//', ['2', '3', '4', '5']))\nconsole.log(doAlgebra('**', ['2', '3', '4', '5']))\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const string = s.split(\"\").reverse();\n  const reversed = string.join(\"\");\n  return reversed;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Compares two strings 'text' and 'otherText' and returns true if they are equal, false otherwise.\n\n  >>> compareStrings('Hello world', 'Hello world')\n  */\nconst compareStrings = (text, otherText) => {\n  return text === otherText\n}\n\n/*\n  Calculates a string 'text' hash using the md5 algorithm.\n\n  >>> hashStrings('Hello world', '3e25960a79dbc69b674cd4ec67a72c62')\n  */\nconst hashStrings = (text, hash) => {\n  return `${text}${hash}`\n}\n\n/*\n  Calculates a string 'text' hash using the md5 algorithm.\n\n  >>> hashStrings('Hello world', '3e25960a79dbc69b674cd4ec67a72c62')\n  */\nconst hashStrings2 = (text, hash) => {\n  return `${hash}${text}`\n}\n\n/*\n  Compares two strings 'text' and 'otherText' and returns true if they are equal, false otherwise.\n\n  >>> compareStrings('Hello world', 'Hello world')\n  */\nconst compareStrings2 = (text, otherText) => {\n  return text === otherText\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd52 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Calculates a string 'text' hash using the md5 algorithm.\n\n  >>> hashStrings('Hello world', '3e25960a79dbc69b674cd4ec67a72c62')\n  */\nconst hashStrings3 = (text, hash) => {\n  return `${text}${hash}`\n}\n\n/*\n  Calculates a string 'text' hash using the md5 algorithm.\n\n  >>> hashStrings('Hello world', '3e25960a79dbc69b674cd4ec67a72c62')\n  */\nconst hashStrings4 = (text, hash) => {\n  return `${hash}${text}`\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd53 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Calculates a string 'text' hash using the md5 algorithm.\n\n  >>> hashStrings('Hello world', '3e25960a79dbc69b674cd4ec67a72c62')\n  */\nconst hashStrings5 = (text, hash) => {\n  return `${text}${hash}`\n}\n\n/*\n  Calculates a string 'text' hash using the md5 algorithm.\n\n  >>> hashStrings('Hello world', '3e25960a79dbc69b674cd4ec67a72c62')\n  */\nconst hashStrings6 = (text, hash) => {\n  return `${hash}${text}`\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd52 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Calculates a string 'text' hash using the md5 algorithm.\n\n  >>> hashStrings('Hello world', '3e25960a79dbc69b674cd4ec67a72c62')\n  */\nconst hashStrings7 = (text, hash) => {\n  return `${text}${hash}`\n}\n\n/*\n  Calculates a string 'text' hash using the md5 algorithm.\n\n  >>> hashStrings('Hello world', '3e25960a79dbc69b674cd4ec67a72c62')\n  */\nconst hashStrings8 = (text, hash) => {\n  return `${hash}${text}`\n}\n\n/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd53 = (text) => {\n  let md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Calculates a string 'text' hash using the md5 algorithm.\n\n  >>> hashStrings('Hello world', '3e25960a79dbc69b674cd4ec67a72c62')\n  */\nconst hashStrings9 = (text, hash) => {\n  return `${text}${hash}`\n}\n\n/*\n  Calculates a string 'text' hash using the md5 algorithm.\n\n  >>> hashStrings('Hello world', '3e25960a79dbc69b674cd4ec67a72c62')\n  */\nconst hashStrings10 = (text, hash) => {\n  return"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const start = a;\n  const end = b;\n  const numbers = [];\n  for (let i = start; i <= end; i++) {\n    numbers.push(i);\n  }\n  const evens = numbers.filter(num => num % 2 === 0);\n  return evens;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
