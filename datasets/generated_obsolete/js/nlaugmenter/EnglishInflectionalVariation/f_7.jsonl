{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length;\n  if (len <= 1) {\n    return false;\n  }\n\n  let index = 0;\n  while (index < len - 1) {\n    const num1 = numbers[index];\n    const num2 = numbers[index + 1];\n    const dist = Math.abs(num2 - num1);\n    if (dist < threshold) {\n      return true;\n    }\n    index++;\n  }\n\n  return false;\n};\n\nmodule.exports = hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    // Set up empty arrays to be returned\n    const result = [];\n    const stack = [];\n\n    // Loop through all characters in the input string\n    for (let i = 0; i < paren_string.length; i++) {\n        // If the current character is a brace, push the character to the stack\n        if (paren_string[i] === '(') {\n            stack.push(paren_string[i]);\n        } else if (paren_string[i] === ')') {\n            // If the stack is empty or the current character is a close brace, the group is complete\n            if (stack.length === 0 || stack[stack.length - 1] === ')') {\n                result.push(paren_string.slice(i + 1, stack.length));\n            } else {\n                stack.pop();\n            }\n        }\n    }\n\n    return result;\n};\n\nexport {\n    separateParenGroups\n};<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let parts = number.toString().split('.');\n    return parts[1].length? parts[1] : parts[0];\n}\n\n/**\n * Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let parts = number.toString().split('.');\n    return parts[1].length? parts[1] : parts[0];\n}\n\n/**\n * Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let parts = number.toString().split('.');\n    return parts[1].length? parts[1] : parts[0];\n}\n\n/**\n * Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let parts = number.toString().split('.');\n    return parts[1].length? parts[1] : parts[0];\n}\n\n/**\n * Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let parts = number.toString().split('.');\n    return parts[1].length? parts[1] : parts[0];\n}\n\n/**\n * Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let parts = number.toString().split('.');\n    return parts[1].length? parts[1] : parts[0];\n}\n\n/**\n * Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let parts = number.toString().split('.');\n    return parts[1].length? parts[1] : parts[0];\n}\n\n/**\n * Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let parts = number.toString().split('.');\n    return parts[1].length? parts[1] : parts[0];\n}\n\n/**\n * Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let parts = number.toString().split('.');\n    return parts[1].length? parts[1] : parts[0];\n}\n\n/**\n * Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let parts = number.toString().split('.');\n    return parts[1].length? parts[1] : parts[0];\n}\n\n/**\n * Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let parts = number.toString().split('.');\n    return parts[1].length? parts[1] : parts[0];\n}\n\n/**\n * Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let parts = number.toString().split('.');\n    return parts[1].length? parts[1] : parts[0];\n}\n\n/**\n * Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let parts = number.toString().split('.');\n    return parts[1].length? parts[1] : parts[0];\n}\n\n/**\n * Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and"}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    let acc = 0;\n    for (let i = 0; i < operations.length; i += 1) {\n        acc += operations[i];\n    }\n    if (acc < 0) {\n        return true;\n    }\n    return false;\n};\n\nmodule.exports = belowZero;<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean(numbers));\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of input numbers, calculate the median of the data set. Median is the number that is in the middle of the list.\n  >>> median([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */\nconst median = (numbers) => {\n  let half = Math.floor(numbers.length / 2);\n  let middle = (half - 1) * 2 + 1;\n  return numbers[middle];\n};\n\n/* For a given list of input numbers, calculate the mean of the data set. Mean is the sum of all the numbers in the dataset divided by the number of numbers in the dataset.\n  >>> mean([1.0, 2.0, 3.0, 4.0, 5.0])\n  2.5\n  */\nconst mean = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n};\n\n/* For a given list of input numbers, calculate the sum of the squares of the values in the dataset.\n  >>> sumSquares([1.0, 2.0, 3.0, 4.0, 5.0])\n  21.0\n  */\nconst sumSquares = (numbers) => {\n  let sum = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i], 2);\n  }\n  return sum;\n};\n\n/* For a given list of input numbers, calculate the standard deviation of the data set. Standard deviation is the square root of the sum of the squares of the differences from the mean.\n  >>> stdDev([1.0, 2.0, 3.0, 4.0, 5.0])\n  1.118033988749895\n  */\nconst stdDev = (numbers) => {\n  let sumSquares = sumSquares(numbers);\n  let mean = mean(numbers);\n  let sumSquaresMeanDiff = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sumSquaresMeanDiff += Math.pow(numbers[i] - mean, 2);\n  }\n  return Math.sqrt(sumSquares / numbers.length - sumSquaresMeanDiff);\n};\n\n/* For a given list of input numbers, calculate the range of the data set. Range is the highest and lowest value in the data set minus the mean.\n  >>> range([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */\nconst range = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max - min;\n};\n\n/* For a given list of input numbers, calculate the mode of the data set. Mode is the most common number in the dataset.\n  >>> mode([1.0, 2.0, 3.0, 4.0, 5.0])\n  3.0\n  */\nconst mode = (numbers) => {\n  let maxCount = 1;\n  let mode = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === mode) {\n      maxCount += 1;\n    } else if (numbers[i] === mode) {\n      maxCount -= 1;\n    }\n    if (maxCount === 0) {\n      mode = numbers[i];\n      maxCount = 1;\n    }\n  }\n  return mode;\n};\n\n/* For a given list of input numbers, calculate the sample standard deviation of the data set. Sample standard deviation is the standard deviation of the sample, which is calculated using the standard deviation of the population with the same size as the sample.\n  >>> sampleStdDev([1.0, 2.0, 3.0, 4.0, 5.0])\n  1.38060239524328\n  */\nconst sampleStdDev = (numbers) => {\n  return stdDev(numbers);\n};\n\n/* For a given list of input numbers, calculate the sample standard deviation of the data set. Sample standard deviation is the standard deviation of the sample, which is calculated using the standard deviation of the population with the same size as the sample.\n  >>> sampleStdDev([1.0, 2.0, 3.0, 4.0, 5.0])\n  1.38060239524328\n  */\nconst sampleStandardDeviation = (numbers) => {\n  let stdDev = stdDev(numbers);\n  let numSamples = numbers.length;\n  return stdDev / Math.sqrt(numSamples);\n};\n\n/* For a given list of input numbers, calculate the standard deviation of the data set. Standard deviation is the square root of the sum of the squares of the differences from the mean.\n  >>> stdDev([1.0, 2.0, 3.0, 4.0, 5.0])\n  1.118033988749895\n  */\nconst stdDev = (numbers) => {\n  let sumSquares = sumSquares(numbers);\n  let mean = mean(numbers);\n  let sumSquaresMeanDiff = 0.0;\n  for (let i = 0; i < numbers.length; i++) {\n    sumSquaresMeanDiff += Math.pow(numbers[i] - mean, 2);\n  }\n  return Math.sqrt("}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let len = numbers.length;\n  while (i < len) {\n    if (i === len - 1) {\n      result.push(numbers[i]);\n      break;\n    }\n    if (j === len - 1) {\n      result.push(numbers[i]);\n      break;\n    }\n    result.push(numbers[i], delimeter);\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3],'')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], ',')\n  [1, 2, 3]\n  */\nconst intersperseBy = (numbers, delimiter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let len = numbers.length;\n  while (i < len) {\n    if (i === len - 1) {\n      result.push(numbers[i]);\n      break;\n    }\n    if (j === len - 1) {\n      result.push(numbers[i]);\n      break;\n    }\n    result.push(numbers[i], delimiter);\n    i++;\n    j++;\n  }\n  return result;\n};\n\nmodule.exports = {\n  intersperse,\n  intersperseBy\n};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  //console.log('in parseNestedParens()')\n  const group_size = paren_string.length\n  const depth = [1, group_size - 2]\n  let index = 0\n  let max_depth = 0\n  let max_depth_index = 0\n  //console.log('depth:'+ depth)\n  while (index < group_size) {\n    if (paren_string[index] === '(') {\n      depth[0] += 1\n      depth[1] = 0\n    } else if (paren_string[index] === ')') {\n      depth[0] -= 1\n      if (depth[0] === 0) {\n        depth[1] -= 1\n      }\n      if (depth[1] === 0) {\n        max_depth = depth[0]\n        max_depth_index = index\n        break\n      }\n    }\n    index += 1\n  }\n  //console.log('depth:'+ depth)\n  //console.log('max depth:'+ max_depth)\n  //console.log('max depth index:'+ max_depth_index)\n  //console.log('paren_string:'+ paren_string)\n  return [max_depth, max_depth_index]\n}\n\n/*\n  Input: 2\n  Output: 3\n  Explanation: \n    ((())) has maximum two level of nesting and ((())) has three.\n    ((())()) has maximum two level of nesting and ((())()) has three.\n    (((()))) has maximum two level of nesting and (((()))) has four.\n    ((((())) has maximum three level of nesting and (((())) has five.\n    ((((()())) has maximum three level of nesting and (((()())) has six.\n  */\nconst getMaxNestingLevel = (string) => {\n  const [group_size, max_depth_index] = parseNestedParens(string)\n  //console.log('group size:'+ group_size)\n  //console.log('max depth index:'+ max_depth_index)\n  //console.log('string:'+ string)\n  if (max_depth_index < 0) {\n    return 0\n  }\n  let max_depth = 0\n  let current_depth = 0\n  for (let i = 0; i < group_size; i += 1) {\n    if (string[i] === '(') {\n      current_depth += 1\n    } else if (string[i] === ')') {\n      current_depth -= 1\n    }\n    if (current_depth > max_depth) {\n      max_depth = current_depth\n    }\n  }\n  return max_depth\n}\n\n/*\n  Input: (((())))\n  Output: 5\n  Explanation:\n    (((()))) has maximum three level of nesting and (((()))) has five.\n    (((()))()) has maximum three level of nesting and (((()))()) has six.\n    (((()()))()) has maximum three level of nesting and (((()()))()) has seven.\n    (((()()()))()) has maximum four level of nesting and (((()()()))()) has eight.\n  */\nconst getMaxNestingLevel2 = (string) => {\n  const [group_size, max_depth_index] = parseNestedParens(string)\n  if (max_depth_index < 0) {\n    return 0\n  }\n  let max_depth = 0\n  let current_depth = 0\n  for (let i = 0; i < group_size; i += 1) {\n    if (string[i] === '(') {\n      current_depth += 1\n    } else if (string[i] === ')') {\n      current_depth -= 1\n    }\n    if (current_depth > max_depth) {\n      max_depth = current_depth\n    }\n  }\n  return max_depth\n}\n\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('(((())))'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('((()()))'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('((()()()))'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('((()()())'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('((()())()'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('(((())))'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('(((()()))'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('(((()()))'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('(((()())'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('(((()())'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('(((()()))'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('(((()())'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('(((()())'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('(((()()))'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('(((()())'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('(((()())'))\n// console.log('getMaxNestingLevel2:'+ getMaxNestingLevel2('(((()())'))\n// console.log('getMaxNestingLevel2: '"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(str => str.includes(substring))\n}\n\n/*\n  # Filter an input list of strings only for ones that contain given word\n  >>> filterByWord(['a', 'b', 'c', 'd'], 'b')\n  ['b', 'c']\n  */\nconst filterByWord = (strings, word) => {\n  return strings.filter(str => str.includes(word))\n}\n\n/*\n  # Filter an input list of strings only for ones that contain given word\n  >>> filterByWord(['a', 'b', 'c', 'd'], 'b')\n  ['b', 'c']\n  */\nconst filterByWordRegex = (strings, regex) => {\n  return strings.filter(str => str.match(regex))\n}\n\n/*\n  # Filter an input list of strings only for ones that contain given word\n  >>> filterByWordRegex(['a', 'b', 'c', 'd'], /b/)\n  ['b', 'c']\n  */\nconst filterByWordRegexIgnoreCase = (strings, regex) => {\n  return strings.filter(str => str.toLowerCase().match(regex.toLowerCase()))\n}\n\n/*\n  # Filter an input list of strings only for ones that contain given word\n  >>> filterByWordRegexIgnoreCase(['a', 'b', 'c', 'd'], /b/)\n  ['b', 'c']\n  */\nconst filterByWordRegexIgnoreCaseCase = (strings, regex) => {\n  return strings.filter(str => str.toUpperCase().match(regex.toUpperCase()))\n}\n\n/*\n  # Filter an input list of strings only for ones that contain given word\n  >>> filterByWordRegexIgnoreCase(['a', 'b', 'c', 'd'], /b/)\n  ['b', 'c']\n  */\nconst filterByWordRegexIgnoreCaseCaseAndWords = (strings, regex, words) => {\n  return strings.filter(str => {\n    const wordsInStr = words.filter(word => str.includes(word))\n    return wordsInStr.length === words.length && str.toUpperCase().match(regex.toUpperCase())\n  })\n}\n\n/*\n  # Filter an input list of strings only for ones that contain given word\n  >>> filterByWordRegexIgnoreCaseAndWords(['a', 'b', 'c', 'd'], /b/, ['a', 'b', 'c'])\n  ['b', 'c']\n  */\nconst filterByWordRegexIgnoreCaseAndWords = (strings, regex, words) => {\n  return strings.filter(str => {\n    const wordsInStr = words.filter(word => str.includes(word))\n    return wordsInStr.length === words.length && str.toUpperCase().match(regex.toUpperCase())\n  })\n}\n\n/*\n  # Filter an input list of strings only for ones that contain given word\n  >>> filterByWordRegexIgnoreCaseAndWords(['a', 'b', 'c', 'd'], /b/, ['b', 'c'])\n  ['b', 'c']\n  */\nconst filterByWordRegexIgnoreCaseAndWordsAndWords = (strings, regex, words) => {\n  return strings.filter(str => {\n    const wordsInStr = words.filter(word => str.includes(word))\n    return wordsInStr.length === words.length && str.toUpperCase().match(regex.toUpperCase())\n  })\n}\n\n/*\n  # Filter an input list of strings only for ones that contain given word\n  >>> filterByWordRegexIgnoreCaseAndWordsAndWords(['a', 'b', 'c', 'd'], /b/, ['b', 'c'])\n  ['b', 'c']\n  */\nconst filterByWordRegexIgnoreCaseAndWordsAndWords = (strings, regex, words) => {\n  return strings.filter(str => {\n    const wordsInStr = words.filter(word => str.includes(word))\n    return wordsInStr.length === words.length && str.toUpperCase().match(regex.toUpperCase())\n  })\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const len = numbers.length\n  let sums = 0\n  let products = 1\n\n  if (len === 0) {\n    return (0, 1)\n  }\n\n  for (let i = 0; i < len; i++) {\n    sums += numbers[i]\n    products *= numbers[i]\n  }\n\n  return (sums, products)\n}\n\nexport default sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxList = [];\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  maxList.push(max);\n  maxList.push(numbers[maxIndex]);\n  let maxListLength = maxList.length;\n  for (let i = maxIndex + 1; i < numbers.length; i++) {\n    if (numbers[i] > maxList[maxListLength - 2]) {\n      maxList.push(numbers[i]);\n    }\n  }\n  return maxList;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const postfix = getLongestPalindrome(string);\n  const prefix = getShortestPalindrome(string);\n\n  return postfix.split('').reverse().join('') + prefix.split('').reverse().join('');\n}\n\n/* Finds the shortest palindrome that begin with a supplied string */ const getShortestPalindrome = (string) => {\n  const stringLength = string.length;\n  const result = '';\n\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i);\n    const prefix = string.slice(0, i);\n\n    const isPalindrome = isPalindrome(suffix);\n    const reverseSuffix = suffix.split('').reverse().join('');\n\n    if (isPalindrome) {\n      const result = prefix + reverseSuffix;\n      break;\n    }\n  }\n\n  return result;\n}\n\n/* Finds the longest palindrome that begin with a supplied string */ const getLongestPalindrome = (string) => {\n  const stringLength = string.length;\n  const result = '';\n\n  for (let i = 0; i < stringLength; i++) {\n    const suffix = string.slice(i);\n    const prefix = string.slice(0, i);\n\n    const isPalindrome = isPalindrome(suffix);\n    const reverseSuffix = suffix.split('').reverse().join('');\n\n    if (isPalindrome) {\n      const result = prefix + reverseSuffix;\n      break;\n    }\n  }\n\n  return result;\n}\n\n/* Tests if a string is a palindrome */ const isPalindrome = (string) => {\n  const stringLength = string.length;\n  let i = 0;\n  let j = stringLength - 1;\n\n  while (i < j) {\n    if (string.charAt(i)!== string.charAt(j)) {\n      return false;\n    }\n\n    i++;\n    j--;\n  }\n\n  return true;\n}\n\n/* Tests if a string is a permutation of a palindrome */ const isPermutationOfPalindrome = (string) => {\n  const stringLength = string.length;\n  const isPalindrome = isPalindrome(string);\n  const result = true;\n\n  for (let i = 0; i < stringLength; i++) {\n    for (let j = i + 1; j < stringLength; j++) {\n      const isPalindromeString = isPalindrome.slice(i, j);\n      const isPermutationString = string.slice(i, j);\n\n      if (isPalindromeString!== isPermutationString) {\n        result = false;\n        break;\n      }\n    }\n  }\n\n  return result;\n}\n\n/* Tests if a string is a palindrome and permutation of a palindrome */ const isPermutationOfPalindrome = (string) => {\n  const stringLength = string.length;\n  const isPalindrome = isPalindrome(string);\n  const result = true;\n\n  for (let i = 0; i < stringLength; i++) {\n    for (let j = i + 1; j < stringLength; j++) {\n      const isPalindromeString = isPalindrome.slice(i, j);\n      const isPermutationString = string.slice(i, j);\n\n      if (isPalindromeString!== isPermutationString) {\n        result = false;\n        break;\n      }\n    }\n  }\n\n  return result;\n}\n\n/* Tests if a string is a palindrome and permutation of a palindrome */ const isPalindrome = (string) => {\n  const stringLength = string.length;\n  const result = true;\n\n  for (let i = 0; i < stringLength; i++) {\n    for (let j = i + 1; j < stringLength; j++) {\n      if (string.charAt(i)!== string.charAt(j)) {\n        result = false;\n        break;\n      }\n    }\n  }\n\n  return result;\n}\n\n/* Tests if a string is a palindrome and permutation of a palindrome */ const isPalindrome = (string) => {\n  const stringLength = string.length;\n  const result = true;\n\n  for (let i = 0; i < stringLength; i++) {\n    for (let j = i + 1; j < stringLength; j++) {\n      if (string.charAt(i)!== string.charAt(j)) {\n        result = false;\n        break;\n      }\n    }\n  }\n\n  return result;\n}\n\n/* Tests if a string is a palindrome and permutation of a palindrome */ const isPalindrome = (string) => {\n  const stringLength = string.length;\n  const result = true;\n\n  for (let i = 0; i < stringLength; i++) {\n    for (let j = i + 1; j < stringLength; j++) {\n      if (string.charAt(i)!== string.charAt(j)) {\n        result = false;\n        break;\n      }\n    }\n  }\n\n  return result;\n}\n\n/* Tests if a string is a palindrome and permutation of a palindrome */ const isPalindrome = (string) => {\n  const stringLength = string.length;\n  const result = true;\n\n  for (let i = 0; i < stringLength; i++) {\n    for (let j = i + 1; j < stringLength; j++) {\n      if (string.charAt(i)!== string.charAt(j)) {\n        result = false;"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  return b.split('').map((c, index) => a.charCodeAt(index) ^ c.charCodeAt(index)).join('');\n};\n\nconst isPalindrome = (number) => {\n  if(number < 0) return false;\n  return number === parseInt(stringXor(number, number.toString(2)), 2);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  return strings.reduce((acc, str) => {\n    if (acc.length < str.length) {\n      return str\n    }\n    return acc\n  }, strings[0])\n}\n\n// In-place sort\nconst sort = (arr) => {\n  let a = [].slice.call(arr)\n  let b = a.sort()\n  a.length = 0\n  b.forEach(function (x) {\n    a.push(x)\n  })\n  return a\n}\n\n// Find an element in an array\nconst find = (arr, val) => {\n  let i = 0\n  while (i < arr.length) {\n    if (arr[i] === val) {\n      return i\n    }\n    i++\n  }\n  return -1\n}\n\n// Remove an element from an array\nconst remove = (arr, val) => {\n  let i = 0\n  while (i < arr.length) {\n    if (arr[i] === val) {\n      arr.splice(i, 1)\n      return true\n    }\n    i++\n  }\n  return false\n}\n\n// Add an element to an array\nconst add = (arr, val) => {\n  let i = find(arr, val)\n  if (i === -1) {\n    arr.push(val)\n  }\n  return arr\n}\n\n// Generate all permutations of an array\nconst permutations = (arr) => {\n  let p = []\n  let i = 0\n  while (i < arr.length) {\n    let tmp = arr.slice()\n    tmp.splice(i, 1)\n    p.push(tmp)\n    i++\n  }\n  return p\n}\n\n// Find all subarrays of an array\nconst findSubArrays = (arr) => {\n  let i = 0\n  while (i < arr.length) {\n    let sub = []\n    let j = 0\n    while (j < arr.length) {\n      if (arr[i] === arr[j]) {\n        sub.push(arr[i])\n        j++\n      } else {\n        if (sub.length) {\n          let result = longest(sub)\n          if (result) {\n            console.log(sub)\n            console.log(result)\n          }\n          sub = []\n        }\n      }\n    }\n    i++\n  }\n}\n\n// Find all substrings of an array\nconst findSubStrings = (arr) => {\n  let i = 0\n  while (i < arr.length) {\n    let sub = []\n    let j = 0\n    while (j < arr.length) {\n      if (arr[i] === arr[j]) {\n        sub.push(arr[i])\n        j++\n      } else {\n        if (sub.length) {\n          let result = longest(sub)\n          if (result) {\n            console.log(sub)\n            console.log(result)\n          }\n          sub = []\n        }\n      }\n    }\n    i++\n  }\n}\n\n// Find all strings that can be formed by replacing characters from the string\nconst findAllStrings = (arr) => {\n  let i = 0\n  while (i < arr.length) {\n    let sub = []\n    let j = 0\n    while (j < arr.length) {\n      if (arr[i] === arr[j]) {\n        sub.push(arr[i])\n        j++\n      } else {\n        if (sub.length) {\n          let result = longest(sub)\n          if (result) {\n            console.log(sub)\n            console.log(result)\n          }\n          sub = []\n        }\n      }\n    }\n    i++\n  }\n}\n\n// Find all permutations of a list of strings\nconst findAllPermutations = (arr) => {\n  let p = permutations(arr)\n  return p\n}\n\n// Test functions\nconst test = (arr) => {\n  console.log(arr)\n  console.log(findSubArrays(arr))\n  console.log(findSubStrings(arr))\n  console.log(findAllStrings(arr))\n  console.log(findAllPermutations(arr))\n}\n\n// Main\nconst main = (arr) => {\n  let i = 0\n  while (i < arr.length) {\n    let sub = []\n    let j = 0\n    while (j < arr.length) {\n      if (arr[i] === arr[j]) {\n        sub.push(arr[i])\n        j++\n      } else {\n        if (sub.length) {\n          let result = longest(sub)\n          if (result) {\n            console.log(sub)\n            console.log(result)\n          }\n          sub = []\n        }\n      }\n    }\n    i++\n  }\n}\n\n// Run tests\nconst run = () => {\n  test(['a', 'b', 'c'])\n  test(['a', 'bb', 'ccc'])\n  test(['a', 'b', 'ccc'])\n  test(['aa', 'bb', 'ccc'])\n  test(['aa', 'bbb', 'ccc'])\n  test(['aa', 'bbb', 'ccc'])\n  test(['aa', 'bbbb', 'ccc'])\n  test(['aa', 'bbbb', 'cccc'])\n  test(['aa', 'bbbb', 'cccc'])\n  test(['a', 'b', 'cccc'])\n  test(['a', 'b', 'cccc'])\n  test(['a', 'b', 'cccc'])\n  test(['aa', 'b', 'cccc'])\n  test(['aa', 'bb', 'cccc'])\n  test(['aa', 'bbb', 'cccc'])\n"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b > 0) {\n    const remainder = a % b;\n    a = b;\n    b = remainder;\n  }\n  return a;\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n  let index = 0;\n  while (index < string.length) {\n    const prefix = string.slice(0, index + 1);\n    prefixes.push(prefix);\n    index++;\n  }\n  return prefixes;\n};\n\n/* Return all suffixes from shorter to longer of the input string\n  >>> allSuffixes('abc')\n  ['', 'b', 'c', 'd', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n  let index = string.length - 1;\n  while (index >= 0) {\n    const suffix = string.slice(index);\n    suffixes.push(suffix);\n    index--;\n  }\n  return suffixes;\n};\n\n/* Return all prefixes and suffixes of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'ab', 'abc'], ['b', 'bc', 'd', 'ab', 'ac', 'bc', 'abc']]\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  return [prefixes, suffixes];\n};\n\n/* Return all prefixes and suffixes of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'ab', 'abc'], ['b', 'bc', 'd', 'ab', 'ac', 'bc', 'abc']]\n  */\nconst allPrefixesAndSuffixes2 = (string) => {\n  const suffixes = allSuffixes(string);\n  const prefixes = allPrefixes(string);\n  return [prefixes, suffixes];\n};\n\n/* Return all prefixes and suffixes of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'ab', 'abc'], ['b', 'bc', 'd', 'ab', 'ac', 'bc', 'abc']]\n  */\nconst allPrefixesAndSuffixes3 = (string) => {\n  const suffixes = allSuffixes(string);\n  const prefixes = allPrefixes(string);\n  return [prefixes, suffixes];\n};\n\n/* Return all prefixes and suffixes of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'ab', 'abc'], ['b', 'bc', 'd', 'ab', 'ac', 'bc', 'abc']]\n  */\nconst allPrefixesAndSuffixes4 = (string) => {\n  const suffixes = allSuffixes(string);\n  const prefixes = allPrefixes(string);\n  return [prefixes, suffixes];\n};\n\n/* Return all prefixes and suffixes of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'ab', 'abc'], ['b', 'bc', 'd', 'ab', 'ac', 'bc', 'abc']]\n  */\nconst allPrefixesAndSuffixes5 = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  return [prefixes, suffixes];\n};\n\n/* Return all prefixes and suffixes of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'ab', 'abc'], ['b', 'bc', 'd', 'ab', 'ac', 'bc', 'abc']]\n  */\nconst allPrefixesAndSuffixes6 = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  return [prefixes, suffixes];\n};\n\n/* Return all prefixes and suffixes of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'ab', 'abc'], ['b', 'bc', 'd', 'ab', 'ac', 'bc', 'abc']]\n  */\nconst allPrefixesAndSuffixes7 = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  return [prefixes, suffixes];\n};\n\n/* Return all prefixes and suffixes of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'ab', 'abc'], ['b', 'bc', 'd', 'ab', 'ac', 'bc', 'abc']]\n  */\nconst allPrefixesAndSuffixes8 = (string) => {\n  const suffixes = allSuffixes(string);\n  const prefixes = allPrefixes(string);\n  return [prefixes, suffixes];\n};\n\n/* Return all prefixes and suffixes of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'ab', 'abc'], ['b', 'bc', 'd', 'ab', 'ac', 'bc', 'abc']]\n  */\nconst allPrefixesAndSuffixes9 = (string) => {\n  const suffixes = allSuffixes(string);\n  const prefixes = allPrefixes(string);\n  return [prefixes, suffixes];\n};\n\n/* Return all prefixes and suffixes of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'ab', 'abc'], ['b', 'bc', 'd', 'ab', 'ac', 'bc', 'abc']]\n  */\nconst allPrefixesAndSuffixes10 = (string) => {\n  const suffixes = allSuffixes(string);\n  const prefixes = allPrefixes(string);\n  return [prefixes, suffixes];\n};\n\n/* Return all prefixes and suffixes of the input string\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'ab', 'abc'], ['b', 'bc', 'd"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = ''\n  for (let i = 0; i < n; i++) {\n    str += `${i}`\n  }\n  return str\n}\n\nmodule.exports = stringSequence\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const distinctCharacterCount = new Map();\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (distinctCharacterCount.has(character.toLowerCase())) {\n      distinctCharacterCount.set(character.toLowerCase(),\n        distinctCharacterCount.get(character.toLowerCase()) + 1);\n    } else {\n      distinctCharacterCount.set(character.toLowerCase(), 1);\n    }\n  }\n  return distinctCharacterCount.size;\n};\n\n// Gives a string, found out how many words of a certain length done it consisting of\nconst countWordsOfLength = (string, length) => {\n  let words = string.split(' ');\n  return words.filter((word) => word.length === length).length;\n};\n\n// Gives a string, found out how many distinct words of a certain length done it consisting of\nconst countDistinctWordsOfLength = (string, length) => {\n  let words = string.split(' ');\n  const distinctWords = new Set();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (distinctWords.has(word)) {\n      distinctWords.add(word);\n    } else {\n      distinctWords.add(word);\n      distinctWords.add(word.toUpperCase());\n    }\n  }\n  return distinctWords.size;\n};\n\n// Gives a string, found out how many words of a certain length done it consisting of\n// words with the given prefix\nconst countWordsWithPrefix = (string, prefix) => {\n  let words = string.split(' ');\n  return words.filter((word) => word.startsWith(prefix)).length;\n};\n\n// Gives a string, found out how many words of a certain length done it consisting of\n// words with the given suffix\nconst countWordsWithSuffix = (string, suffix) => {\n  let words = string.split(' ');\n  return words.filter((word) => word.endsWith(suffix)).length;\n};\n\n// Gives a string, found out how many words of a certain length done it consisting of\n// words with the given prefix and suffix\nconst countWordsWithPrefixAndSuffix = (string, prefix, suffix) => {\n  let words = string.split(' ');\n  return words.filter((word) => word.startsWith(prefix) && word.endsWith(suffix)).length;\n};\n\n// Gives a string, found out how many words of a certain length done it consisting of\n// words with the given prefix and suffix\nconst countWordsWithPrefixAndSuffixLength = (string, prefix, suffix, length) => {\n  let words = string.split(' ');\n  return words.filter((word) => word.startsWith(prefix) && word.endsWith(suffix) && word.length === length).length;\n};\n\n// Gives a string, found out how many distinct words of a certain length done it consisting of\n// words with the given prefix and suffix\nconst countDistinctWordsWithPrefixAndSuffix = (string, prefix, suffix) => {\n  let words = string.split(' ');\n  const distinctWords = new Set();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (distinctWords.has(word)) {\n      distinctWords.add(word);\n    } else {\n      distinctWords.add(word);\n      distinctWords.add(word.toUpperCase());\n    }\n  }\n  return distinctWords.size;\n};\n\n// Gives a string, found out how many distinct words of a certain length done it consisting of\n// words with the given prefix and suffix\nconst countDistinctWordsWithPrefixAndSuffixLength = (string, prefix, suffix, length) => {\n  let words = string.split(' ');\n  const distinctWords = new Set();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (distinctWords.has(word)) {\n      distinctWords.add(word);\n    } else {\n      distinctWords.add(word);\n      distinctWords.add(word.toUpperCase());\n    }\n  }\n  return distinctWords.size;\n};\n\n// Gives a string, found out how many words of a certain length done it consisting of\n// words with the given prefix, suffix and length\nconst countWordsWithPrefixAndSuffixLength = (string, prefix, suffix, length) => {\n  let words = string.split(' ');\n  return words.filter((word) => word.startsWith(prefix) && word.endsWith(suffix) && word.length === length).length;\n};\n\n// Gives a string, found out how many distinct words of a certain length done it consisting of\n// words with the given prefix, suffix and length\nconst countDistinctWordsWithPrefixAndSuffixLength = (string, prefix, suffix, length) => {\n  let words = string.split(' ');\n  const distinctWords = new Set();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (distinctWords.has(word)) {\n      distinctWords.add(word);\n    } else {\n      distinctWords.add(word);\n      distinctWords.add(word.toUpperCase());\n    }\n  }\n  return distinctWords.size;\n};\n\n// Gives a string, found out how many words of a certain length done it consisting of\n// words with the given prefix, suffix and length\nconst countWordsWithPrefixAndSuffixLengthLength = (string, prefix, suffix, length) => {\n  let words = string.split(' ');\n  return words.filter((word) => word.startsWith(prefix) && word.endsWith(suffix) && word.length === length).length;\n};\n\n// Gives a string, found out how many distinct words of a certain length done it consisting of\n// words with the given prefix, suffix and length\nconst countDistinctWordsWithPrefixAnd"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let list = [];\n  let last_beat = 0;\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      list.push(last_beat);\n      last_beat = 1;\n    }\n    else if (music_string[i] === '|') {\n      last_beat += 2;\n    }\n    else if (music_string[i] === 'o|') {\n      last_beat += 1;\n    }\n    else if (music_string[i] === 'o') {\n      last_beat += 1;\n    }\n  }\n  return list;\n};\n\n/*\n  Given a list of numbers, you are supposed to return the list sorted in ascending order.\n  The order of the elements is defined by the given order.\n\n  >>> parseOrder(['3', '2', '1'])\n  [1, 2, 3]\n  */\nconst parseOrder = (order) => {\n  let list = [];\n  for (let i = 0; i < order.length; i++) {\n    list.push(order[i]);\n  }\n  list.sort();\n  return list;\n};\n\n/*\n  Given a list of numbers, you are supposed to return the list sorted in descending order.\n  The order of the elements is defined by the given order.\n\n  >>> parseOrder(['3', '2', '1'])\n  [3, 2, 1]\n  */\nconst parseOrderDescending = (order) => {\n  let list = [];\n  for (let i = 0; i < order.length; i++) {\n    list.push(order[i]);\n  }\n  list.sort(function(a, b) {\n    return a - b;\n  });\n  return list;\n};\n\n/*\n  Given a list of numbers, you are supposed to return the list sorted in descending order.\n  The order of the elements is defined by the given order.\n\n  >>> parseOrder(['3', '2', '1'])\n  [3, 2, 1]\n  */\nconst parseOrderDescending2 = (order) => {\n  let list = [];\n  for (let i = order.length - 1; i >= 0; i--) {\n    list.push(order[i]);\n  }\n  list.sort(function(a, b) {\n    return b - a;\n  });\n  return list;\n};\n\n/*\n  You are given a list of pairs (x, y) where x and y are strings.\n  These pairs represent a note in the format \"C C# C D E F F# G G# G B B\".\n  You are supposed to return a list of the pair list sorted in ascending order.\n\n  >>> parsePairs(['C C# C D E F F# G G# G B B', 'A A# A B B C C# C D E F F# G G# G B B'])\n  [['A A#', 'B B'], ['B B', 'C C#'], ['C C#', 'D E'], ['D E', 'F F#'], ['F F#', 'G G#'], ['G G#', 'G B'], ['G B', 'B B']]\n  */\nconst parsePairs = (pairs) => {\n  let list = [];\n  for (let i = 0; i < pairs.length; i++) {\n    list.push([pairs[i].split(''), pairs[i].split('').reverse()]);\n  }\n  list.sort(function(a, b) {\n    return parseInt(a[0]) - parseInt(b[0]);\n  });\n  return list;\n};\n\n/*\n  Given a list of pairs (x, y) where x and y are strings,\n  you are supposed to return the list of the pairs sorted in ascending order.\n\n  >>> parsePairs(['C C# C D E F F# G G# G B B', 'A A# A B B C C# C D E F F# G G# G B B'])\n  [['A A#', 'B B'], ['B B', 'C C#'], ['C C#', 'D E'], ['D E', 'F F#'], ['F F#', 'G G#'], ['G G#', 'G B'], ['G B', 'B B']]\n  */\nconst parsePairs2 = (pairs) => {\n  let list = [];\n  for (let i = 0; i < pairs.length; i++) {\n    list.push([pairs[i].split(''), pairs[i].split('').reverse()]);\n  }\n  list.sort(function(a, b) {\n    return parseInt(a[0]) - parseInt(b[0]);\n  });\n  return list;\n};\n\n/*\n  Given a list of strings, you are supposed to return a list of the strings without duplicates.\n\n  >>> parseStrings(['C', 'C#', 'D', 'E', 'F', 'F#', 'G', 'G#', 'G', 'B'])\n  [['C', 'C#', 'D', 'E', 'F', 'F#', 'G', 'G#', 'G', 'B']]\n  */\nconst parseStrings = (strings) => {\n  let list = [];\n  for (let i = 0; i < strings.length; i++) {\n    let set = {};\n    set[strings[i]] = true;\n    for (let j = 0; j < strings.length; j++) {\n      if (strings[j]!== strings[i]) {\n        set[strings[j]] = false;\n      }\n    }\n    if (Object.keys(set).length > 0) {\n      list.push(strings[i]);\n    }\n  }\n  return list;"}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const [length1, length2] = [string.length, substring.length];\n  let count = 0;\n  for (let i = 0; i < length1 - length2 + 1; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      let j = i + 1;\n      while (j < length1 && string.charAt(j) === substring.charAt(0)) {\n        j++;\n      }\n      count++;\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const splitNumber = numbers.split(' ');\n  const sorted = splitNumber.sort((a, b) => a.localeCompare(b));\n  return sorted.join(' ');\n};\n\n/*\n  Given a string of numbers sort them from larger to smaller.\n  e.g. '3 one 5' -> 'one three five'\n  */\nconst sortNumbersInDescending = (numbers) => {\n  const splitNumber = numbers.split(' ');\n  const sorted = splitNumber.sort((a, b) => a.localeCompare(b));\n  return sorted.join(' ');\n};\n\n/*\n  Given a string of numbers sort them from smaller to larger.\n  e.g. '3 one 5' -> 'three one five'\n  */\nconst sortNumbersInAscending = (numbers) => {\n  const splitNumber = numbers.split(' ');\n  const sorted = splitNumber.sort((a, b) => b.localeCompare(a));\n  return sorted.join(' ');\n};\n\nconst sortNumbers = (numbers) => {\n  const splitNumber = numbers.split(' ');\n  const sorted = splitNumber.sort((a, b) => b.localeCompare(a));\n  return sorted.join(' ');\n};\n\nexport default {\n  sortNumbers,\n  sortNumbersInAscending,\n  sortNumbersInDescending,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const first = numbers[0]\n  const last = numbers[numbers.length - 1]\n  let closest = numbers[0]\n  let closestDistance = Math.abs(numbers[0] - first)\n\n  for (let i = 1; i < numbers.length - 1; i++) {\n    const current = numbers[i]\n    const distance = Math.abs(current - first)\n    if (distance < closestDistance) {\n      closest = current\n      closestDistance = distance\n    }\n  }\n\n  return [first, closest]\n}\n\nmodule.exports = findClosestElements\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  return numbers.map((n) => (n > 1)? n / (n + 1) : 1)\n}\n\n// ---------------------------------------------------------------------------\n\nexport default {\n  min: min,\n  max: max,\n  sigmoid: sigmoid,\n  gaussian: gaussian,\n  rescaleToUnit: rescaleToUnit\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  let returnValues = [];\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      returnValues.push(value);\n    }\n  });\n  return returnValues;\n};\n\nexport default filterIntegers;<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    return string.length;\n};\n\n/* Return a substring of the string\n  >>> substr('')\n  ''\n  >>> substr('abc')\n  'abc'\n  >>> substr('abcdef', 3)\n  'cdef'\n  >>> substr('abcdef', 4, 3)\n  'ef'\n  >>> substr('abcdef', 0, 3)\n  'abc'\n  */\nconst substr = (string, start, length) => {\n    let startPosition = start;\n    let stringLength = strlen(string);\n    if (startPosition < 0) {\n        startPosition = stringLength + startPosition;\n    }\n    if (length > stringLength) {\n        length = stringLength;\n    }\n    if (length < 0) {\n        length = 0;\n    }\n    return string.substr(startPosition, length);\n};\n\n/* Return a new string consisting of the same characters in the string but in a different order.\n  >>> sort('abc')\n  'cba'\n  >>> sort('a')\n  'a'\n  */\nconst sort = (string) => {\n    let tempArray = string.split('');\n    tempArray.sort();\n    return tempArray.join('');\n};\n\n/* Return a new string consisting of the same characters in the string but in a different order, sorted in reverse.\n  >>> sortReverse('abc')\n  'cba'\n  >>> sortReverse('a')\n  'a'\n  */\nconst sortReverse = (string) => {\n    let tempArray = string.split('');\n    tempArray.sort();\n    tempArray.reverse();\n    return tempArray.join('');\n};\n\n/* Return a new string consisting of the same characters in the string but with all upper-case letters.\n  >>> upperCase('abc')\n  'ABC'\n  */\nconst upperCase = (string) => {\n    return string.toUpperCase();\n};\n\n/* Return a new string consisting of the same characters in the string but with all lower-case letters.\n  >>> lowerCase('ABC')\n  'abc'\n  */\nconst lowerCase = (string) => {\n    return string.toLowerCase();\n};\n\n/* Return a new string consisting of the same characters in the string but with all uppercase letters.\n  >>> capitalize('abc')\n  'ABC'\n  */\nconst capitalize = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return a new string consisting of the same characters in the string but with all lowercase letters.\n  >>> capitalizeReverse('ABC')\n  'abc'\n  */\nconst capitalizeReverse = (string) => {\n    return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Return a new string consisting of the same characters in the string but with all uppercase letters.\n  >>> uncapitalize('ABC')\n  'abc'\n  */\nconst uncapitalize = (string) => {\n    return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Return a new string consisting of the same characters in the string but with all lowercase letters.\n  >>> uncapitalizeReverse('abc')\n  'ABC'\n  */\nconst uncapitalizeReverse = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return a new string consisting of the same characters in the string but with the first character in upper-case.\n  >>> titleCase('abc')\n  'ABC'\n  */\nconst titleCase = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return a new string consisting of the same characters in the string but with the first character in lower-case.\n  >>> titleCaseReverse('ABC')\n  'abc'\n  */\nconst titleCaseReverse = (string) => {\n    return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\nmodule.exports = {\n    strlen,\n    substr,\n    sort,\n    sortReverse,\n    upperCase,\n    lowerCase,\n    capitalize,\n    capitalizeReverse,\n    uncapitalize,\n    uncapitalizeReverse,\n    titleCase,\n    titleCaseReverse\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (divisor * divisor <= n) {\n    if (n % divisor === 0) {\n      return divisor;\n    }\n    divisor++;\n  }\n  return n;\n};\n\nexport default largestDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factorization = [];\n  const factors = [];\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const isPrimeFactor = (n, list) => {\n    const count = 0;\n    for (let i = 0; i < list.length; i++) {\n      if (n % list[i] === 0) {\n        count++;\n      }\n    }\n    return count === list.length;\n  };\n  const listFactors = (n) => {\n    const list = [];\n    const factorization = [];\n    let i = 2;\n    while (n % i === 0) {\n      factorization.push(i);\n      list.push(i);\n      n = n / i;\n      i++;\n    }\n    if (n > 1) {\n      factorization.push(n);\n      list.push(n);\n    }\n    return factorization;\n  };\n  const listFactors2 = (n) => {\n    let list = [];\n    let i = 2;\n    while (n % i === 0) {\n      list.push(i);\n      n = n / i;\n      i++;\n    }\n    if (n > 1) {\n      list.push(n);\n    }\n    return list;\n  };\n  const isFactors = (n) => {\n    const list = [];\n    const factorization = [];\n    let i = 2;\n    while (n % i === 0) {\n      factorization.push(i);\n      list.push(i);\n      n = n / i;\n      i++;\n    }\n    if (n > 1) {\n      factorization.push(n);\n      list.push(n);\n    }\n    return list;\n  };\n  const factorizeRecur = (n) => {\n    if (n === 1) {\n      return [1];\n    }\n    const factors = factorizeRecur(Math.floor(n / 2));\n    const factorization = [];\n    for (let i = 0; i < factors.length; i++) {\n      factorization.push(factors[i]);\n    }\n    if (n % 2 === 1) {\n      factorization.push(n);\n    }\n    return factorization;\n  };\n  const listPrimeFactors = (n) => {\n    const factors = [];\n    let i = 2;\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n      i++;\n    }\n    if (n > 1) {\n      factors.push(n);\n    }\n    return factors;\n  };\n  const listPrimeFactors2 = (n) => {\n    let factors = [];\n    let i = 2;\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n      i++;\n    }\n    if (n > 1) {\n      factors.push(n);\n    }\n    return factors;\n  };\n  const factorize2 = (n) => {\n    if (isPrime(n)) {\n      return [n];\n    }\n    const factors = [];\n    for (let i = n; i > 1; i--) {\n      if (n % i === 0) {\n        const tmp = listPrimeFactors(n);\n        tmp.push(i);\n        factors.push(tmp);\n        n = n / i;\n      }\n    }\n    if (n > 1) {\n      const tmp = listPrimeFactors(n);\n      tmp.push(n);\n      factors.push(tmp);\n    }\n    return factors;\n  };\n  if (n < 2) {\n    return [1];\n  }\n  if (isPrime(n)) {\n    return [n];\n  }\n  const factors = listPrimeFactors(n);\n  const factorization = [];\n  for (let i = 0; i < factors.length; i++) {\n    factorization.push(listPrimeFactors(factors[i]));\n  }\n  factorization.push(listFactors(n));\n  return factorization;\n};\n\nmodule.exports = {\n  factorize,\n  factorize2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const len = numbers.length\n  const output = []\n  let lastIndex = -1\n  for (let i = 0; i < len; i++) {\n    const value = numbers[i]\n    if (lastIndex === value) {\n      continue\n    }\n    output.push(value)\n    lastIndex = value\n  }\n  return output\n}\n\n/*\n  >>> removeDuplicates([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const len = numbers.length\n  const output = []\n  let lastIndex = -1\n  for (let i = 0; i < len; i++) {\n    const value = numbers[i]\n    if (lastIndex === value) {\n      continue\n    }\n    output.push(value)\n    lastIndex = value\n  }\n  return output\n}\n\nexport default {\n  removeDuplicates,\n  removeDuplicates2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, letter => {\n    return letter.toUpperCase();\n  });\n};\n\n/**\n  * For a given string, creates an array of its characters.\n  * @param {string} string\n  * @returns {Array}\n  * @example\n  *   flipCase('Hello')\n  *   //=> ['h', 'E', 'l', 'l', 'O']\n  */\nconst flipCaseArray = (string) => {\n  return string.split('').map(letter => {\n    return letter.toUpperCase();\n  });\n};\n\nexport {\n  flipCase,\n  flipCaseArray\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  }\n  return strings.reduce((acc, string) => acc + string, '');\n};\n\n// Converts a list of strings into a dictionary\nconst createDictionary = (strings) => {\n  let dictionary = {};\n  strings.forEach(string => {\n    dictionary[string] = 1;\n  });\n  return dictionary;\n};\n\n// Gets the index of a string in a list\nconst getIndex = (list, string) => {\n  return list.indexOf(string);\n};\n\n// Gets the index of a string in a list with an offset\nconst getIndexWithOffset = (list, string, offset) => {\n  return list.indexOf(string, offset);\n};\n\n// Gets the number of strings in a list\nconst getLength = (list) => {\n  return list.length;\n};\n\n// Gets the maximum of a list\nconst getMax = (list) => {\n  return Math.max.apply(null, list);\n};\n\n// Gets the minimum of a list\nconst getMin = (list) => {\n  return Math.min.apply(null, list);\n};\n\n// Gets the sum of a list\nconst getSum = (list) => {\n  return list.reduce((acc, num) => acc + num, 0);\n};\n\n// Gets the average of a list\nconst getAverage = (list) => {\n  let sum = getSum(list);\n  return sum / list.length;\n};\n\n// Gets the sum of the squares of a list\nconst getSquareSum = (list) => {\n  let sum = getSum(list);\n  return sum / list.length;\n};\n\n// Gets the average of the squares of a list\nconst getSquareAverage = (list) => {\n  let sum = getSquareSum(list);\n  return sum / list.length;\n};\n\n// Converts a list into a dictionary\nconst listToDictionary = (list) => {\n  return list.reduce((acc, string) => {\n    acc[string] = 1;\n    return acc;\n  }, {});\n};\n\n// Gets a list of the unique elements of a list\nconst getUniqueElements = (list) => {\n  let uniqueElements = [];\n  list.forEach(element => {\n    if (uniqueElements.indexOf(element) === -1) {\n      uniqueElements.push(element);\n    }\n  });\n  return uniqueElements;\n};\n\n// Checks if a list is sorted\nconst isSorted = (list) => {\n  return list.every(element => {\n    return list.indexOf(element) > list.indexOf(element) - 1;\n  });\n};\n\n// Checks if a list is sorted in ascending order\nconst isSortedAscending = (list) => {\n  return list.every(element => {\n    return list.indexOf(element) < list.indexOf(element) - 1;\n  });\n};\n\n// Checks if a list is sorted in descending order\nconst isSortedDescending = (list) => {\n  return list.every(element => {\n    return list.indexOf(element) > list.indexOf(element) - 1;\n  });\n};\n\n// Checks if a list contains the string\nconst contains = (list, string) => {\n  return list.indexOf(string)!== -1;\n};\n\n// Gets the first index of the string in a list\nconst getIndexOf = (list, string) => {\n  return list.indexOf(string);\n};\n\n// Gets the last index of the string in a list\nconst getLastIndexOf = (list, string) => {\n  return list.lastIndexOf(string);\n};\n\n// Checks if a list contains all of the strings in a list\nconst containsAll = (list, strings) => {\n  return list.every(string => {\n    return contains(strings, string);\n  });\n};\n\n// Checks if a list contains none of the strings in a list\nconst containsNone = (list, strings) => {\n  return!containsAll(list, strings);\n};\n\n// Returns the index of a string in a list with an offset\nconst getIndexWithOffsetOf = (list, string, offset) => {\n  return list.indexOf(string, offset);\n};\n\n// Gets the number of occurrences of a string in a list\nconst getOccurrences = (list, string) => {\n  return list.filter(element => element === string).length;\n};\n\n// Gets the number of characters of a string\nconst getCharacters = (string) => {\n  return string.length;\n};\n\n// Gets the number of words of a string\nconst getWords = (string) => {\n  return string.match(/\\S+/g);\n};\n\n// Gets the number of punctuation marks of a string\nconst getPunctuationMarks = (string) => {\n  return string.match(/[^A-Za-z]/g);\n};\n\n// Gets the number of symbols of a string\nconst getSymbols = (string) => {\n  return string.match(/[^A-Za-z0-9 ]/g);\n};\n\n// Gets the number of digits of a string\nconst getDigits = (string) => {\n  return string.match(/[0-9]/g);\n};\n\n// Gets the number of lowercase letters of a string\nconst getLowercaseLetters = (string) => {\n  return string.match(/[a-z]/g);\n};\n\n// Gets the number of uppercase letters of a string\nconst getUppercaseLetters = (string) => {\n  return string.match(/[A-Z]/g);\n};\n\n// Gets the number of letters of a string\nconst getLetters = (string) => {\n  return string.match(/[A-Za-z]/g);\n};\n\n// Gets the number of numbers of a string\nconst getNumbers = (string) => {\n  return string.match(/[0-9]/g);\n};\n\n// Gets the number of non-numeric characters of a string\nconst getNonNumericCharacters = (string) => {\n  return string"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0);\n};\n\n/**\n  * Convert a list of strings into a dictionary with keys matching the strings and\n  * values matching the prefixes of the strings.\n  * @param  {Array} strings\n  * @param  {String} prefix\n  * @return {Object}\n  * @example\n  * // ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n  * // 'a' => ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n  * // 'a' => ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n  * // 'b' => ['b', 'c', 'd', 'e', 'f', 'g', 'h']\n  * // 'b' => ['b', 'c', 'd', 'e', 'f', 'g', 'h']\n  * // 'c' => ['c', 'd', 'e', 'f', 'g', 'h']\n  * // 'c' => ['c', 'd', 'e', 'f', 'g', 'h']\n  * // 'd' => ['d', 'e', 'f', 'g', 'h']\n  * // 'd' => ['d', 'e', 'f', 'g', 'h']\n  * // 'e' => ['e', 'f', 'g', 'h']\n  * // 'e' => ['e', 'f', 'g', 'h']\n  * // 'f' => ['f', 'g', 'h']\n  * // 'f' => ['f', 'g', 'h']\n  * // 'g' => ['g', 'h']\n  * // 'g' => ['g', 'h']\n  * // 'h' => ['h']\n  * // 'h' => ['h']\n  * // 'i' => []\n  */\nconst stringToDictionary = (strings, prefix) => {\n  const dictionary = {};\n  strings.forEach((s) => {\n    dictionary[s] = filterByPrefix(s.split(''), prefix);\n  });\n  return dictionary;\n};\n\nexport default stringToDictionary;\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0);\n};\n\n//Exercise: Return the minimum number in the list.\n//Note: Use the min function.\n//Example:\n//>>> getMin([-1, 2, -4, 5, 6])\n//-4\n//>>> getMin([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10])\n//-10\n//>>> getMin([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10, 1])\n//-10\nconst getMin = (l) => {\n  return l.reduce((a, b) => Math.min(a, b), -Infinity);\n};\n\n//Exercise: Return the maximum number in the list.\n//Note: Use the max function.\n//Example:\n//>>> getMax([-1, 2, -4, 5, 6])\n//6\n//>>> getMax([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10])\n//9\n//>>> getMax([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10, 1])\n//1\nconst getMax = (l) => {\n  return l.reduce((a, b) => Math.max(a, b), Infinity);\n};\n\n//Exercise: Return a new list with all the even numbers in it.\n//Example:\n//>>> getEven([0, 2, 4, 6, 8, 10, 12, 14])\n//[0, 2, 4, 6, 8]\n//>>> getEven([-1, 2, -4, 5, 6])\n//[2, 4, 6]\n//>>> getEven([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10])\n//[2, 4, 6]\n//>>> getEven([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10, 1])\n//[2, 4, 6]\nconst getEven = (l) => {\n  return l.filter(x => x % 2 === 0);\n};\n\n//Exercise: Return a new list with the sum of all the numbers in the list.\n//Example:\n//>>> getSum([0, 2, 4, 6, 8, 10, 12, 14])\n//30\n//>>> getSum([-1, 2, -4, 5, 6])\n//11\n//>>> getSum([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10])\n//30\n//>>> getSum([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10, 1])\n//30\nconst getSum = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n};\n\n//Exercise: Return a new list with all the odd numbers in it.\n//Example:\n//>>> getOdd([0, 2, 4, 6, 8, 10, 12, 14])\n//[1, 3, 5, 7, 9, 11, 13, 15]\n//>>> getOdd([-1, 2, -4, 5, 6])\n//[1, 3, 5, 7]\n//>>> getOdd([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10])\n//[1, 3, 5, 7]\n//>>> getOdd([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10, 1])\n//[1, 3, 5, 7]\nconst getOdd = (l) => {\n  return l.filter(x => x % 2!== 0);\n};\n\n//Exercise: Return a new list with all the negative numbers in it.\n//Example:\n//>>> getNegative([-1, 2, -4, 5, 6])\n//[-1, -2, -4, -5, -6]\n//>>> getNegative([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10])\n//[-1, -2, -4, -5, -6]\n//>>> getNegative([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10, 1])\n//[-1, -2, -4, -5, -6]\nconst getNegative = (l) => {\n  return l.filter(x => x < 0);\n};\n\n//Exercise: Return a new list with the sum of all the negative numbers in the list.\n//Example:\n//>>> getNegativeSum([-1, 2, -4, 5, 6])\n//-30\n//>>> getNegativeSum([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10])\n//-30\n//>>> getNegativeSum([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10, 1])\n//-30\nconst getNegativeSum = (l) => {\n  return l.reduce((a, b) => a - b, 0);\n};\n\n//Exercise: Return a new list with all the positive and negative numbers in it.\n//Example:\n//>>> getPositiveNegative([-1, 2, -4, 5, 6])\n//[-1, 2, -4, 5, 6]\n//>>> getPositiveNegative([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10])\n//[-1, 2, -4, 5, 6]\n//>>> getPositiveNegative([-1, 2, -4, 5, 6, 3, 9, 0, 123, 1, -10, 1])\n//[-1, 2, -4, 5, 6]\nconst getPositiveNegative = (l) => {\n  return l.filter(x => x > 0 || x <"}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n % 2 === 0) return false\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  Returns a random prime number in the range [1, n)\n  >>> isPrime(6)\n  2\n  >>> isPrime(101)\n  5\n  >>> isPrime(11)\n  13\n  >>> isPrime(13441)\n  21\n  >>> isPrime(61)\n  61\n  >>> isPrime(4)\n  4\n  >>> isPrime(1)\n  1\n  */\nconst getPrime = (n) => {\n  while (!isPrime(n)) {\n    n += 2\n  }\n  return n\n}\n\n/*\n  Returns the largest number divisible by the number n\n  >>> getPrime(10)\n  10\n  >>> getPrime(9)\n  9\n  >>> getPrime(8)\n  8\n  >>> getPrime(7)\n  7\n  >>> getPrime(6)\n  6\n  >>> getPrime(5)\n  5\n  >>> getPrime(4)\n  4\n  >>> getPrime(3)\n  3\n  >>> getPrime(2)\n  2\n  >>> getPrime(1)\n  1\n  >>> getPrime(0)\n  0\n  */\nconst getPrimeFactor = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return n / i\n    }\n    i += 2\n  }\n  return n\n}\n\n/*\n  Return the number of numbers divisible by n\n  >>> getPrimeFactor(10)\n  1\n  >>> getPrimeFactor(9)\n  2\n  >>> getPrimeFactor(8)\n  2\n  >>> getPrimeFactor(7)\n  3\n  >>> getPrimeFactor(6)\n  2\n  >>> getPrimeFactor(5)\n  1\n  >>> getPrimeFactor(4)\n  1\n  >>> getPrimeFactor(3)\n  1\n  >>> getPrimeFactor(2)\n  1\n  >>> getPrimeFactor(1)\n  1\n  >>> getPrimeFactor(0)\n  0\n  */\nconst getPrimeFactorCount = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i += 2\n  }\n  return n\n}\n\n/*\n  Returns the smallest number that is greater than n\n  >>> getPrimeFactorCount(10)\n  11\n  >>> getPrimeFactorCount(9)\n  11\n  >>> getPrimeFactorCount(8)\n  11\n  >>> getPrimeFactorCount(7)\n  11\n  >>> getPrimeFactorCount(6)\n  11\n  >>> getPrimeFactorCount(5)\n  11\n  >>> getPrimeFactorCount(4)\n  11\n  >>> getPrimeFactorCount(3)\n  11\n  >>> getPrimeFactorCount(2)\n  11\n  >>> getPrimeFactorCount(1)\n  11\n  >>> getPrimeFactorCount(0)\n  11\n  */\nconst getPrimeFactorNext = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return n / i + 1\n    }\n    i += 2\n  }\n  return n + 1\n}\n\nmodule.exports = {\n  isPrime,\n  getPrime,\n  getPrimeFactor,\n  getPrimeFactorCount,\n  getPrimeFactorNext\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let last = xs[0]\n  let next = xs[1]\n  for(let i = 2; i < xs.length; i++) {\n    last = next;\n    next = xs[i]\n  }\n  let sum = 0\n  for(let i = 0; i < xs.length - 1; i++) {\n    sum += last * xs[i]\n  }\n  if(sum === 0) return xs[0]\n  else return sum / (xs.length - 1)\n}\n\n/**\n * Return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n * @param xs is list of coefficients.\n */\nconst polyEval = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index)\n}, 0); }\n\nconst findX = (xs) => {\n  let sum = 0\n  for(let i = 0; i < xs.length; i++) {\n    sum += xs[i]\n  }\n  if(sum === 0) return 0\n  else return sum / xs.length\n}\n\n/**\n * Returns the largest value that the given function returns.\n * @param f is function.\n */\nconst findMax = (f) => {\n  let max = 0\n  for(let i = 0; i < 10000; i++) {\n    max = Math.max(max, f())\n  }\n  return max\n}\n\n/**\n * Returns the smallest value that the given function returns.\n * @param f is function.\n */\nconst findMin = (f) => {\n  let min = 0\n  for(let i = 0; i < 10000; i++) {\n    min = Math.min(min, f())\n  }\n  return min\n}\n\n/**\n * Finds the largest element in given list.\n * @param list is list of values.\n */\nconst findMaxList = (list) => {\n  let max = list[0]\n  for(let i = 1; i < list.length; i++) {\n    max = Math.max(max, list[i])\n  }\n  return max\n}\n\n/**\n * Finds the smallest element in given list.\n * @param list is list of values.\n */\nconst findMinList = (list) => {\n  let min = list[0]\n  for(let i = 1; i < list.length; i++) {\n    min = Math.min(min, list[i])\n  }\n  return min\n}\n\n/**\n * Returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n * @param xs is list of coefficients.\n */\nconst polyEval2 = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index)\n}, 0) }\n\n/**\n * Returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n * @param xs is list of coefficients.\n */\nconst polyEval3 = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index)\n}, 0) }\n\n/**\n * Returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n * @param xs is list of coefficients.\n */\nconst polyEval4 = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index)\n}, 0) }\n\n/**\n * Returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n * @param xs is list of coefficients.\n */\nconst polyEval5 = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index)\n}, 0) }\n\n/**\n * Returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n * @param xs is list of coefficients.\n */\nconst polyEval6 = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index)\n}, 0) }\n\n/**\n * Returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n * @param xs is list of coefficients.\n */\nconst polyEval7 = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index)\n}, 0) }\n\n/**\n * Returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^"}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sort = (a, b) => a - b;\n  const list = l.slice();\n  let i = 0;\n  let j = 0;\n  while (i < list.length - 1) {\n    if (list[i] % 3 === 0) {\n      list[j] = list[i];\n      j += 1;\n    }\n    i += 1;\n  }\n  list.sort(sort);\n  return list;\n};\n\nexport default sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    if (!set.has(l[i])) {\n      set.add(l[i]);\n    }\n  }\n  return Array.from(set);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const min = Math.min(...l);\n  return l.reduce((a, b) => Math.max(a, b), min);\n};\n\n/*\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  >>> maxElement([1, 2, 3])\n  3\n  */\nconst max = (l) => {\n  const min = Math.min(...l);\n  return l.reduce((a, b) => Math.max(a, b), min);\n};\n\n/*\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  >>> maxElement([1, 2, 3])\n  3\n  */\nconst maxBy = (l) => {\n  const f = (a, b) => a > b? 1 : b > a? -1 : 0;\n  return l.reduce((a, b) => f(a, b), -Infinity);\n};\n\n/*\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  >>> maxElement([1, 2, 3])\n  3\n  */\nconst maxByFn = (l) => {\n  const f = (a, b) => a > b? 1 : b > a? -1 : 0;\n  return l.reduce((a, b) => f(a, b), -Infinity);\n};\n\n/*\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  >>> maxElement([1, 2, 3])\n  3\n  */\nconst maxBy = (l) => {\n  const f = (a, b) => a > b? 1 : b > a? -1 : 0;\n  return l.reduce((a, b) => f(a, b), -Infinity);\n};\n\n/*\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  >>> maxElement([1, 2, 3])\n  3\n  */\nconst max = (l) => {\n  const f = (a, b) => a > b? 1 : b > a? -1 : 0;\n  return l.reduce((a, b) => f(a, b), -Infinity);\n};\n\nmodule.exports = {\n  max,\n  maxBy,\n  maxByFn,\n  maxElement,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    const result = [];\n    const number = n;\n    const divisor = 11;\n    const divisor2 = 13;\n    for (let i = 1; i <= number; i++) {\n        if (i % divisor === 0 || i % divisor2 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n};\n\n/*Return a string containing the number of digits of the number.\n  >>> digits(1234)\n  4\n  >>> digits(12345)\n  5\n  >>> digits(123456)\n  6\n  */\nconst digits = (n) => {\n    const number = n;\n    let count = 0;\n    while (number > 0) {\n        count += number % 10;\n        number = number / 10;\n    }\n    return count;\n};\n\n/*Return the number of numbers in the range [0, n).\n  >>> range(0, 10)\n  0\n  >>> range(10, 20)\n  10\n  >>> range(20, 30)\n  20\n  >>> range(30, 40)\n  20\n  >>> range(40, 50)\n  20\n  >>> range(50, 60)\n  20\n  >>> range(60, 70)\n  20\n  >>> range(70, 80)\n  20\n  >>> range(80, 90)\n  20\n  >>> range(90, 100)\n  20\n  */\nconst range = (start, end) => {\n    let count = 0;\n    while (start <= end) {\n        count++;\n        start++;\n    }\n    return count;\n};\n\n/*Return the number of digits in the number.\n  >>> digits(1234)\n  4\n  >>> digits(12345)\n  5\n  >>> digits(123456)\n  6\n  >>> digits(1234567)\n  7\n  */\nconst digitsNumber = (n) => {\n    let count = 0;\n    while (n > 0) {\n        count++;\n        n--;\n    }\n    return count;\n};\n\n/*Return the number of numbers in the range [0, n).\n  >>> rangeNumber(0, 10)\n  0\n  >>> rangeNumber(10, 20)\n  10\n  >>> rangeNumber(20, 30)\n  20\n  >>> rangeNumber(30, 40)\n  20\n  >>> rangeNumber(40, 50)\n  20\n  >>> rangeNumber(50, 60)\n  20\n  >>> rangeNumber(60, 70)\n  20\n  >>> rangeNumber(70, 80)\n  20\n  >>> rangeNumber(80, 90)\n  20\n  >>> rangeNumber(90, 100)\n  20\n  */\nconst rangeNumber = (start, end) => {\n    let count = 0;\n    while (start <= end) {\n        count++;\n        start++;\n    }\n    return count;\n};\n\n/*Return a list of numbers in the range [0, n).\n  >>> rangeList(0, 10)\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> rangeList(10, 20)\n  [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> rangeList(20, 30)\n  [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n  >>> rangeList(30, 40)\n  [30, 31, 32, 33, 34, 35, 36, 37, 38, 39]\n  >>> rangeList(40, 50)\n  [40, 41, 42, 43, 44, 45, 46, 47, 48, 49]\n  >>> rangeList(50, 60)\n  [50, 51, 52, 53, 54, 55, 56, 57, 58, 59]\n  >>> rangeList(60, 70)\n    [60, 61, 62, 63, 64, 65, 66, 67, 68, 69]\n  >>> rangeList(70, 80)\n  [70, 71, 72, 73, 74, 75, 76, 77, 78, 79]\n  >>> rangeList(80, 90)\n  [80, 81, 82, 83, 84, 85, 86, 87, 88, 89]\n  >>> rangeList(90, 100)\n  [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n  */\nconst rangeList = (start, end) => {\n    let list = [];\n    while (start <= end) {\n        list.push(start++);\n    }\n    return list;\n};\n\n/*Return a list of numbers in the range [0, n).\n  >>> rangeListNumber(0, 10)\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> rangeListNumber(10, 20)\n  [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> rangeListNumber(20, 30)\n  [20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n  >>> rangeListNumber(30, 40)\n  [30, 31, 32, 33, 34, 35, 36, 37, 38, 39]\n  >>> rangeListNumber(40, 50)\n  [40, 41, 42, 43, 44, 45, 46, 47, 48, 49]\n  >>> rangeListNumber(50, 60)\n  [50, 51, 52, 53, 54, 55, 56, 57, 58, 59]\n  >>> rangeListNumber(60, 70)\n  [60, 61, 62, 63, 64, 65, 66, 67, 68, 69]\n  >>> rangeListNumber(70, 80)\n  [70, 71, 72, 73, 74, 75, 76, 77, 78, 79]\n  >>> rangeListNumber(80, 90)\n  [80, 81, 82, 83, 84, 85, 86, 87, 88, 89]\n  >>> rangeListNumber(90, 100)\n  [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n  */\nconst rangeListNumber = (start, end) => {\n    let list = [];\n    while (start"}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  return [...l.slice(0, -1).reverse()].concat([...l.slice(0, -1),...l.slice(1, -1)], [...l.slice(1, -1),...l.slice(2, -1)],...l.slice(2, -1).reverse()];\n};\n\n/*\n  Given a sorted list, returns the middle element in the list\n  >>> sortEven([1, 2, 3])\n  2\n  >>> sortEven([5, 6, 3, 4])\n  6\n  >>> sortEven([])\n  []\n  */\nconst middle = (l) => {\n  const half = Math.floor(l.length / 2);\n  return l[half];\n};\n\n/*\n  Given a list of length n, returns the list of the middle elements\n  >>> middle([1, 2, 3])\n  2\n  >>> middle([5, 6, 3, 4])\n  6\n  >>> middle([])\n  []\n  */\nconst middleOf = (l) => {\n  const half = Math.floor(l.length / 2);\n  return [...l.slice(half),...l.slice(0, half)];\n};\n\n/*\n  Given a list of length n, returns the list of the odd elements\n  >>> odd([1, 2, 3])\n  [1, 3]\n  >>> odd([5, 6, 3, 4])\n  [3, 5, 4]\n  >>> odd([])\n  []\n  */\nconst odd = (l) => {\n  const half = Math.floor(l.length / 2);\n  return [...l.slice(0, half),...l.slice(1, half)];\n};\n\n/*\n  Given a list of length n, returns the list of the even elements\n  >>> even([1, 2, 3])\n  [2, 3]\n  >>> even([5, 6, 3, 4])\n  [6, 3, 4]\n  >>> even([])\n  []\n  */\nconst even = (l) => {\n  const half = Math.floor(l.length / 2);\n  return [...l.slice(half + 1),...l.slice(half)];\n};\n\nexport { middle, middleOf, odd, even };\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(Math.min((3 * i + 1), s.length), Math.min((3 * i + 2), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group[2] + group[0] + group[1]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic2 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(Math.min((3 * i + 2), s.length), Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group[2] + group[0] + group[1]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic3 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 4), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group[2] + group[0] + group[1]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic4 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(Math.min((3 * i + 4), s.length), Math.min((3 * i + 5), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group[2] + group[0] + group[1]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic5 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(Math.min((3 * i + 5), s.length), Math.min((3 * i + 6), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group[2] + group[0] + group[1]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic6 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(Math.min((3 * i + 6), s.length), Math.min((3 * i + 7), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group[2] + group[0] + group[1]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic7 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(Math.min((3 * i + 7), s.length), Math.min((3 * i + 8), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group[2] + group[0] + group[1]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic8 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(Math.min((3 * i + 8), s.length), Math.min((3 * i + 9), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group[2] + group[0] + group[1]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic9 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(Math.min((3 * i + 9), s.length), Math"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n === 1 || n === 2) {\n    return n;\n  }\n  const fib = [1, 2];\n  let num = 3;\n  for (let i = 2; i < n; i++) {\n    num = fib[i - 1] + fib[i - 2];\n    if (isPrime(num)) {\n      return num;\n    }\n  }\n};\n\n//\n// primeFactors\n//\n// returns all prime factors of n\nconst primeFactors = (n) => {\n  let factors = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      factors.push(i);\n    }\n  }\n  return factors;\n};\n\n//\n// primeFibFactors\n//\n// returns all prime factors of fib(n)\nconst primeFibFactors = (n) => {\n  let factors = [];\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(primeFib(i))) {\n      factors.push(primeFib(i));\n    }\n  }\n  return factors;\n};\n\n//\n// main\n//\n// returns fib(n) for n = 1..20\nconst main = () => {\n  let i;\n  for (i = 1; i <= 20; i++) {\n    console.log(primeFib(i));\n  }\n};\n\n//\n// main\n//\n// returns fib(n) for n = 1..20\nconst main2 = () => {\n  let i;\n  for (i = 1; i <= 20; i++) {\n    console.log(primeFactors(i));\n  }\n};\n\n//\n// main\n//\n// returns fib(n) for n = 1..20\nconst main3 = () => {\n  let i;\n  for (i = 1; i <= 20; i++) {\n    console.log(primeFibFactors(i));\n  }\n};\n\n//\n// main\n//\n// returns fib(n) for n = 1..20\nconst main4 = () => {\n  let i;\n  for (i = 1; i <= 20; i++) {\n    console.log(primeFibFactors(primeFib(i)));\n  }\n};\n\n//\n// main\n//\n// returns fib(n) for n = 1..20\nconst main5 = () => {\n  let i;\n  for (i = 1; i <= 20; i++) {\n    console.log(primeFib(primeFactors(i)));\n  }\n};\n\n//\n// main\n//\n// returns fib(n) for n = 1..20\nconst main6 = () => {\n  let i;\n  for (i = 1; i <= 20; i++) {\n    console.log(primeFib(primeFibFactors(i)));\n  }\n};\n\n//\n// main\n//\n// returns fib(n) for n = 1..20\nconst main7 = () => {\n  let i;\n  for (i = 1; i <= 20; i++) {\n    console.log(primeFib(primeFibFactors(primeFib(i))));\n  }\n};\n\n//\n// main\n//\n// returns fib(n) for n = 1..20\nconst main8 = () => {\n  let i;\n  for (i = 1; i <= 20; i++) {\n    console.log(primeFib(primeFibFactors(primeFib(i))));\n  }\n};\n\n//\n// main\n//\n// returns fib(n) for n = 1..20\nconst main9 = () => {\n  let i;\n  for (i = 1; i <= 20; i++) {\n    console.log(primeFib(primeFibFactors(primeFib(primeFib(i)))));\n  }\n};\n\n//\n// main\n//\n// returns fib(n) for n = 1..20\nconst main10 = () => {\n  let i;\n  for (i = 1; i <= 20; i++) {\n    console.log(primeFib(primeFibFactors(primeFib(primeFib(primeFib(i))))));\n  }\n};\n\n//\n// main\n//\n// returns fib(n) for n = 1..20\nconst main11 = () => {\n  let i;\n  for (i = 1; i <= 20; i++) {\n    console.log(primeFib(primeFibFactors(primeFib(primeFib(primeFib(i))))));\n  }\n};\n\n//\n// main\n//\n// returns fib(n) for n = 1..20\nconst main12 = () => {\n  let i;\n  for (i = 1; i <= 20; i++) {\n    console.log(primeFib(primeFibFactors(primeFib(primeFib(primeFib(i))))));\n  }\n};\n\n//\n// main\n//\n// returns fib(n) for n = 1..20\nconst main13 = () => {\n  let i;\n  for (i = 1; i <= 20; i++) {\n    console.log(primeFib(primeFibFactors(primeFib(primeFib(primeFib(i))))));\n  }\n};\n\n//\n// main\n//\n// returns fib(n) for n = 1..20\nconst main14 = () => {\n  let i;\n  for (i = 1; i <= 20; i++) {\n    console.log(primeFib(primeFibFactors(primeFib(primeFib(primeFib(i))))));\n  }\n};\n\n//\n// main\n//\n// returns fib(n) for n = 1..20\nconst main15 = () => {\n  let i;\n  for (i = 1; i <= 20; i++) {\n    console.log(primeFib(primeFibFactors(primeFib(primeFib(primeFib(i))))));\n  }\n};\n\n"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const sorted = Array.from(l).sort();\n  const size = sorted.length;\n  const sum = sorted.reduce((acc, n) => acc + n, 0);\n  if (size < 3) return false;\n  if (sum === 0) return true;\n  if (sum === size) return false;\n  return triplesSumToZero(sorted.slice(1).filter((n, index, array) => n === sorted[size - 1] - sum));\n};\n\nexport {triplesSumToZero};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  const cars = [];\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  cars.push(createCar(0, 0));\n  "}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let idx = 0\n  let len = l.length\n  let result = []\n  while (idx < len) {\n    result[idx] = l[idx] + 1\n    idx += 1\n  }\n  return result\n}\n\nmodule.exports = incrList\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const arr = Array.from(l)\n    if (arr.length === 0) {\n        return false\n    }\n    const first = arr.reduce((p, c) => p + c, 0)\n    if (first === 0) {\n        return false\n    }\n    let second = 0\n    arr.forEach((x) => {\n        if (x!== first) {\n            second += x\n        }\n    })\n    return second === 0\n}\n\nmodule.exports = pairsSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const stringX = x.toString();\n  const stringBase = base.toString();\n  const digits = stringX.split('').reverse();\n  const newDigits = [];\n  let carry = 0;\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    if (digit === stringBase) {\n      newDigits.push(1);\n    } else {\n      newDigits.push(0);\n    }\n  }\n  while (carry) {\n    const newDigit = digits[newDigits.length - 1];\n    if (newDigit === stringBase) {\n      newDigits.pop();\n      carry = 1;\n    } else {\n      carry = 0;\n    }\n  }\n  return newDigits.reverse().join('');\n};\n\n/*Change number x to a base. base is always greater than 10.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase2 = (x, base) => {\n  const stringX = x.toString();\n  const stringBase = base.toString();\n  const digits = stringX.split('');\n  const newDigits = [];\n  let carry = 0;\n  for (let i = digits.length - 1; i >= 0; i--) {\n    const digit = digits[i];\n    if (digit === stringBase) {\n      newDigits.unshift(1);\n    } else {\n      newDigits.unshift(0);\n    }\n  }\n  while (carry) {\n    const newDigit = newDigits[newDigits.length - 1];\n    if (newDigit === 1) {\n      newDigits.pop();\n      carry = 1;\n    } else {\n      carry = 0;\n    }\n  }\n  return newDigits.join('');\n};\n\nmodule.exports = {\n  changeBase,\n  changeBase2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.sqrt(a * (a - h) * (2 * h - a)) / 2);\n};\n\n/*\n  Given the side of triangle and higher return area.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(7, 4)\n  12.5\n  >>> triangleArea(9, 5)\n  16.5\n  >>> triangleArea(10, 5)\n  19.5\n  >>> triangleArea(15, 5)\n  26.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20, 5)\n  33.5\n  >>> triangleArea(20,"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let [f0, f1, f2, f3] = [0, 1, 0, 1];\n  if (n <= 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n// console.log(fib4(5));\n// console.log(fib4(6));\n// console.log(fib4(7));\n// console.log(fib4(8));\n\nconst fib4_2 = (n) => {\n  if (n <= 2) {\n    return n;\n  }\n  return fib4_2(n - 1) + fib4_2(n - 2) + fib4_2(n - 3) + fib4_2(n - 4);\n};\n\nconst fib4_3 = (n) => {\n  if (n <= 3) {\n    return n;\n  }\n  return fib4_3(n - 1) + fib4_3(n - 2) + fib4_3(n - 3) + fib4_3(n - 4);\n};\n\nconst fib4_4 = (n) => {\n  if (n <= 4) {\n    return n;\n  }\n  return fib4_4(n - 1) + fib4_4(n - 2) + fib4_4(n - 3) + fib4_4(n - 4);\n};\n\nconst fib4_5 = (n) => {\n  if (n <= 5) {\n    return n;\n  }\n  return fib4_5(n - 1) + fib4_5(n - 2) + fib4_5(n - 3) + fib4_5(n - 4);\n};\n\nconst fib4_6 = (n) => {\n  if (n <= 6) {\n    return n;\n  }\n  return fib4_6(n - 1) + fib4_6(n - 2) + fib4_6(n - 3) + fib4_6(n - 4);\n};\n\nconst fib4_7 = (n) => {\n  if (n <= 7) {\n    return n;\n  }\n  return fib4_7(n - 1) + fib4_7(n - 2) + fib4_7(n - 3) + fib4_7(n - 4);\n};\n\nconst fib4_8 = (n) => {\n  if (n <= 8) {\n    return n;\n  }\n  return fib4_8(n - 1) + fib4_8(n - 2) + fib4_8(n - 3) + fib4_8(n - 4);\n};\n\nconst fib4_9 = (n) => {\n  if (n <= 9) {\n    return n;\n  }\n  return fib4_9(n - 1) + fib4_9(n - 2) + fib4_9(n - 3) + fib4_9(n - 4);\n};\n\nconst fib4_10 = (n) => {\n  if (n <= 10) {\n    return n;\n  }\n  return fib4_10(n - 1) + fib4_10(n - 2) + fib4_10(n - 3) + fib4_10(n - 4);\n};\n\nconst fib4_11 = (n) => {\n  if (n <= 11) {\n    return n;\n  }\n  return fib4_11(n - 1) + fib4_11(n - 2) + fib4_11(n - 3) + fib4_11(n - 4);\n};\n\nconst fib4_12 = (n) => {\n  if (n <= 12) {\n    return n;\n  }\n  return fib4_12(n - 1) + fib4_12(n - 2) + fib4_12(n - 3) + fib4_12(n - 4);\n};\n\nconst fib4_13 = (n) => {\n  if (n <= 13) {\n    return n;\n  }\n  return fib4_13(n - 1) + fib4_13(n - 2) + fib4_13(n - 3) + fib4_13(n - 4);\n};\n\nconst fib4_14 = (n) => {\n  if (n <= 14) {\n    return n;\n  }\n  return fib4_14(n - 1) + fib4_14(n - 2) + fib4_14(n - 3) + fib4_14(n - 4);\n};\n\nconst fib4_15 = (n) => {\n  if (n <= 15) {\n    return n;\n  }\n  return fib4_15(n - 1) + fib4_15(n - 2) + fib4_15(n - 3) + fib4_15(n - 4);\n};\n\nconst fib4_16 = (n) => {\n  if (n <= 16) {\n    return n;\n  }\n  return fib4_16(n - 1) + fib4_16(n - 2) + fib4_16(n - 3) + fib4_16(n - 4);\n};\n\nconst fib4_17 = (n) => {\n  if (n <= 17) {\n    return n;\n  }\n  return fib4_17(n - 1) + fib4_17(n - 2) + fib4_17(n - 3) + fib4_17(n - 4);\n};\n\nconst fib4_18 = (n) => {\n  if (n <= 18) {\n    return n;\n  }\n  return fib4_18(n - 1) + fib4_18(n - 2) + fib4_18(n - 3) +"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = sorted.length / 2;\n  if (sorted.length % 2 === 1) {\n    return sorted[half];\n  } else {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  }\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianBy = (l, f) => {\n  const sorted = l.sort((a, b) => f(a) - f(b));\n  const half = sorted.length / 2;\n  if (sorted.length % 2 === 1) {\n    return sorted[half];\n  } else {\n    return (sorted[half - 1] + sorted[half]) / 2;\n  }\n};\n\nmodule.exports = {\n  median,\n  medianBy\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n}\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n <= 0) {\n    return 1;\n  }\n  let x = n % p;\n  return x < 0? x + p : x;\n};\n\nmodule.exports = modp;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n return s.split(\"\").map((ch, i) => {\n  let new = \"\";\n  for (let k = 0; k < ch.length; k++) {\n   new += String.fromCharCode((ch.charCodeAt(k) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0));\n  }\n  return new;\n }).joins(\"\"); }\n\n/*\n  decode_shift takes as input string and returns decoding string.\n  This method is used in the test to compare the two. */ const decodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n// const decodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n // ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).join(\"\"); }\n\n/*\n  decode_shift takes as input string and returns decoding string.\n  This method is used in the test to compare the two. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).join(\"\"); }\n\n// const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n // ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).join(\"\"); }\n\n/*\n  decode_shift takes as input string and returns decoding string.\n  This method is used in the test to compare the two. */ const decodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).join(\"\"); }\n\n// const decodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n // ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).join(\"\"); }\n\n/*\n  decode_shift takes as input string and returns decoding string.\n  This method is used in the test to compare the two. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).join(\"\"); }\n\n// const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n // ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).join(\"\"); }\n\n/*\n  decode_shift takes as input string and returns decoding string.\n  This method is used in the test to compare the two. */ const decodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).join(\"\"); }\n\n// const decodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n // ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).join(\"\"); }\n\n/*\n  decode_shift takes as input string and returns decoding string.\n  This method is used in the test to compare the two. */ const decodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).join(\"\"); }\n\n// const decodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n // ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).join(\"\"); }\n\n/*\n  decode_shift takes as input string and returns decoding string.\n  This method is used in the test to compare the two. */ const decodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).join(\"\"); }\n\n// const decodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n // ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).join(\"\"); }\n\n/*\n  decode_shift takes as input string and returns decoding string.\n  This method is used in the test to compare the two. */ const decodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).join(\"\"); }\n\n// const decodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n // ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).join(\"\"); }\n\n/*\n  "}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    if (typeof text!=='string') {\n        return text;\n    }\n    const regex = /[aeiouAEIOU]/;\n    return text.replace(regex, '');\n}\n\n// export functions\nexport {\n    removeVowels\n}\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let result = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      result = false;\n    }\n  }\n  return result;\n};\n\n// Tests\nconst tests = [\n  {\n    title: 'Test below threshold',\n    input: [1, 2, 4, 10],\n    threshold: 5,\n    result: false,\n  },\n  {\n    title: 'Test above threshold',\n    input: [1, 20, 4, 10],\n    threshold: 5,\n    result: true,\n  },\n];\n\ntests.forEach(test => {\n  console.log(`> ${test.title}`);\n  const output = belowThreshold(test.input, test.threshold);\n  console.log(`${output? 'Passed' : 'Failed'}`);\n  console.log(`Expected: ${test.result}`);\n  console.log(`Actual:   ${output}`);\n  console.log();\n});\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n    return x + y;\n};\n\nexport default add;\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let charCount = 0\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i] === s1[i]) {\n      charCount++\n    }\n  }\n  return charCount === s0.length\n}\n\nexport default sameChars\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const fibArr = [];\n  let i = 1;\n  let j = 1;\n  while (i <= n) {\n    fibArr[i] = j;\n    i += 1;\n    j += 1;\n  }\n  return fibArr;\n};\n\nconsole.log(fib(10));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let count = brackets.length\n  let openings = brackets.filter((char) => char === \"<\")\n  let closings = brackets.filter((char) => char === \">\")\n\n  if (closings.length!== openings.length) {\n    return false\n  }\n\n  for (let i = 0; i < count; i += 1) {\n    if (closings[i]!== openings[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/*\n  Given an array of strings, return the length of the longest string in the array.\n\n  >>> longest(\"abc\")\n  3\n  >>> longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n  5\n  >>> longest([\"a\", \"b\", \"c\", \"d\", \"e\"])\n  4\n  >>> longest([\"a\", \"b\", \"bb\", \"ccc\", \"dddd\"])\n  5\n  >>> longest([\"aa\", \"a\", \"b\", \"b\"])\n  3\n  >>> longest([\"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"])\n  6\n  */\nconst longest = (arr) => {\n  let max = arr.length\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i].length > max) {\n      max = arr[i].length\n    }\n  }\n\n  return max\n}\n\n/*\n  Given a string, return the length of the longest substring in the string.\n\n  >>> longestSubstring(\"abc\")\n  3\n  >>> longestSubstring(\"aaaaa\")\n  6\n  >>> longestSubstring(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let max = l[0];\n  let min = l[0];\n\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) max = l[i];\n    if (l[i] < min) min = l[i];\n  }\n\n  return (max - min) === 0? true : false;\n}\n\n/*\n  Returns the median of the list.\n  >>> median([1, 2, 3, 4, 5])\n  3\n  >>> median([1, 2, 3])\n  2\n  >>> median([1])\n  1\n  >>> median([])\n  None\n  */\nconst median = (l) => {\n  if (l.length === 0) return null;\n\n  let length = l.length;\n  let s = 0;\n  let e = length - 1;\n  let half = Math.floor((length + 1) / 2);\n\n  while (s <= e) {\n    let t = Math.floor(s + half);\n    if (t === length) {\n      return l[t];\n    }\n    if (l[s] < l[t]) {\n      s = t + 1;\n    } else {\n      e = t - 1;\n    }\n  }\n\n  return l[s];\n}\n\n/*\n  Returns the mode of the list.\n  >>> mode([1, 1, 1, 1, 2])\n  1\n  >>> mode([1, 1, 2, 2, 3, 4])\n  2\n  >>> mode([1, 2, 3, 4])\n  3\n  >>> mode([1, 1, 1, 2, 3, 3])\n  3\n  >>> mode([1])\n  1\n  >>> mode([])\n  None\n  */\nconst mode = (l) => {\n  if (l.length === 0) return null;\n\n  let m = 1;\n  let mode = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === mode) {\n      m++;\n    } else if (l[i] < mode) {\n      mode = l[i];\n      m = 1;\n    }\n  }\n\n  return mode;\n}\n\n/*\n  Returns the maximum number in the list.\n  >>> max([1, 2, 3, 4, 5])\n  5\n  >>> max([1, 2, 3, 4])\n  4\n  >>> max([1, 2, 3])\n  3\n  >>> max([1])\n  1\n  >>> max([])\n  None\n  */\nconst max = (l) => {\n  let max = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) max = l[i];\n  }\n\n  return max;\n}\n\n/*\n  Returns the minimum number in the list.\n  >>> min([1, 2, 3, 4, 5])\n  1\n  >>> min([1, 2, 3, 4])\n  1\n  >>> min([1, 2, 3])\n  1\n  >>> min([1])\n  1\n  >>> min([])\n  None\n  */\nconst min = (l) => {\n  let min = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) min = l[i];\n  }\n\n  return min;\n}\n\n/*\n  Returns the sum of the list.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4])\n  9\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1])\n  1\n  >>> sum([])\n  None\n  */\nconst sum = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\n  return sum;\n}\n\n/*\n  Returns the average of the list.\n  >>> average([1, 2, 3, 4, 5])\n  3\n  >>> average([1, 2, 3, 4])\n  2\n  >>> average([1, 2, 3])\n  2\n  >>> average([1])\n  1\n  >>> average([])\n  None\n  */\nconst average = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n\n  return sum / l.length;\n}\n\n/*\n  Returns the mode of the list.\n  >>> mode([1, 1, 1, 1, 2])\n  1\n  >>> mode([1, 1, 2, 2, 3, 4])\n  2\n  >>> mode([1, 2, 3, 4])\n  3\n  >>> mode([1, 1, 1, 2, 3, 3])\n  3\n  >>> mode([1])\n  1\n  >>> mode([])\n  None\n  */\nconst mode = (l) => {\n  if (l.length === 0) return null;\n\n  let m = 1;\n  let mode = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === mode) {\n      m++;\n    } else if (l[i] < mode) {\n      mode = l[i];\n      m = 1;\n    }\n  }\n\n  return mode;\n}\n\nexport { median, mode, max, min, sum, average }\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  if (l1.length === 0 || l2.length === 0) {\n    return []\n  }\n  const result = []\n  const last = l1[l1.length - 1]\n  const last2 = l2[l2.length - 1]\n  const index = {\n    last: l1.indexOf(last),\n    last2: l2.indexOf(last2)\n  }\n  if (index.last === -1 || index.last2 === -1) {\n    return []\n  }\n  const common = [last, last2]\n  for (let i = index.last; i < l1.length; i++) {\n    if (l1[i] === last2) {\n      common.push(l1[i])\n      index.last = i\n      break\n    }\n  }\n  for (let i = index.last2; i < l2.length; i++) {\n    if (l2[i] === last) {\n      common.push(l2[i])\n      index.last2 = i\n      break\n    }\n  }\n  return common\n}\n\n/* Return list of unique values of elements in list.\n  >>> unique([1, 4, 3, 34, 653, 2, 5, 7, 1, 5, 9, 653, 121])\n  [1, 2, 3, 4, 5, 653, 7, 9, 121]\n  >>> unique([5, 3, 2, 8])\n  [5, 3, 2, 8]\n  */\nconst unique = (l) => {\n  const result = []\n  for (let i = 0; i < l.length; i++) {\n    if (result.indexOf(l[i]) === -1) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/* Return a list with all elements in l which are not present in l2.\n  >>> intersect([1, 4, 3, 34, 653, 2, 5, 7, 1, 5, 9, 653, 121], [5, 3, 2, 8])\n  [1, 4, 3, 34, 653, 2, 5, 7, 1, 5, 9, 653, 121]\n  >>> intersect([1, 4, 3, 34, 653, 2, 5, 7, 1, 5, 9, 653, 121], [5, 3, 2, 8, 654, 7, 121])\n  []\n  */\nconst intersect = (l, l2) => {\n  const result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l2.indexOf(l[i]) === -1) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\n/* Return list of all combinations of elements of l.\n  >>> combinations([1, 2, 3])\n  [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6],...]\n  >>> combinations([1, 2, 3, 4])\n  [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6],...]\n  >>> combinations([1, 2, 3, 4, 5])\n  [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6],...]\n  >>> combinations([1, 2, 3, 4, 5, 6])\n  [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6],...]\n  >>> combinations([1, 2, 3, 4, 5, 6, 7])\n  [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6],...]\n  */\nconst combinations = (l) => {\n  const result = []\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < l.length - i; j++) {\n      result.push([l[i], l[i + j]])\n    }\n  }\n  return result\n}\n\nmodule.exports = {\n  common,\n  unique,\n  intersect,\n  combinations\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (isPrime(n)) return n\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return largestPrimeFactor(n / i)\n    }\n  }\n  return 1\n}\n\nconst test = [\n  {\n    message:'small numbers',\n    numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511]\n  },\n  {\n    message: 'large numbers',\n    numbers: [2147483647, 2147483648, 2147483649, 2147483650, 2147483651, 2147483652, 2147483653, 2147483654, 2147483655, 2147483656, 2147483657, 2147483658, 2147483659, 2147483660, 2147483661, 2147483662, 2147483663, 2147483664, 2147483665, 2147483666, 2147483667, 2147483668, 2147483669, 2147483670, 2147483671, 2147483672, 2147483673, 2147483674, 2147483675, 2147483676, 2147483677, 2147483678, 2147483679, 2147483680, 2147483681, 2147483682, 2147483683, 2147483684, 2147483685, 2147483686, 2147483687, 2147483688, 2147483689, 2147483690, 2147483691, 2147483692, 2147483693, 2147483694,"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const result = 1\n  let sum = 1\n  while (sum <= n) {\n    result = result + sum\n    sum = sum + 1\n  }\n  return result\n}\n\nconst test = {\n  sumToN: sumToN,\n  sumToN\n}\n\nexport default test\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  const len = brackets.length\n  for (let i = 0; i < len; i += 1) {\n    const opening = brackets[i]\n    if (opening === \"(\" || opening === \"[\" || opening === \"{\") {\n      stack.push(opening)\n    } else if (opening === \")\" || opening === \"]\" || opening === \"}\") {\n      const top = stack.pop()\n      if (top!== opening) {\n        return false\n      }\n    }\n  }\n  return stack.length === 0\n}\n\n/**\n  * @param {string} brackets a string of \"(\" and \")\"\n  * @return {string}\n  *\n  * Converts brackets to their equivalent \"()\" and \"()[]\" form.\n  *\n  * Note that this function only works if the brackets are correct.\n  *\n  * For example,\n  *\n  *   >>> convertBrackets(\"(\")\n  *   \"(\"\n  *   >>> convertBrackets(\"()\")\n  *   \"()\"\n  *   >>> convertBrackets(\"(()())\")\n  *   \"(()())\n  *   >>> convertBrackets(\")(()\")\n  *   \"()()\"\n  *\n  */\nconst convertBrackets = (brackets) => {\n  const len = brackets.length\n  let i = 0\n  let bracketsCopy = brackets\n  while (i < len) {\n    const current = bracketsCopy[i]\n    if (current === \"(\" || current === \"[\" || current === \"{\") {\n      bracketsCopy = bracketsCopy.replace(current, \"(\" + current)\n    } else if (current === \")\" || current === \"]\" || current === \"}\") {\n      bracketsCopy = bracketsCopy.replace(current, \")\" + current)\n    }\n    i += 1\n  }\n  return bracketsCopy\n}\n\n/**\n  * @param {string} brackets a string of \"(\" and \")\"\n  * @return {string}\n  *\n  * Converts brackets to their equivalent \"()\" and \"()[]\" form.\n  *\n  * Note that this function only works if the brackets are correct.\n  *\n  * For example,\n  *\n  *   >>> convertBrackets(\"(\")\n  *   \"(\"\n  *   >>> convertBrackets(\"()\")\n  *   \"()\"\n  *   >>> convertBrackets(\"(()())\")\n  *   \"(()())\n  *   >>> convertBrackets(\")(()\")\n  *   \"()()\"\n  *\n  */\nconst convertBrackets2 = (brackets) => {\n  const len = brackets.length\n  let i = 0\n  let bracketsCopy = brackets\n  while (i < len) {\n    const current = bracketsCopy[i]\n    if (current === \"(\" || current === \"[\" || current === \"{\") {\n      bracketsCopy = bracketsCopy.replace(current, \"(\" + current)\n      bracketsCopy = bracketsCopy.replace(current, \")\" + current)\n    } else if (current === \")\" || current === \"]\" || current === \"}\") {\n      bracketsCopy = bracketsCopy.replace(current, \")\" + current)\n      bracketsCopy = bracketsCopy.replace(current, \"(\" + current)\n    }\n    i += 1\n  }\n  return bracketsCopy\n}\n\n/**\n  * @param {string} brackets a string of \"(\" and \")\"\n  * @return {string}\n  *\n  * Converts brackets to their equivalent \"()\" and \"()[]\" form.\n  *\n  * Note that this function only works if the brackets are correct.\n  *\n  * For example,\n  *\n  *   >>> convertBrackets(\"(\")\n  *   \"(\"\n  *   >>> convertBrackets(\"()\")\n  *   \"()\"\n  *   >>> convertBrackets(\"(()())\")\n  *   \"(()())\n  *   >>> convertBrackets(\")(()\")\n  *   \"()()\"\n  *\n  */\nconst convertBrackets3 = (brackets) => {\n  const len = brackets.length\n  let i = 0\n  let bracketsCopy = brackets\n  while (i < len) {\n    const current = bracketsCopy[i]\n    if (current === \"(\" || current === \"[\" || current === \"{\") {\n      bracketsCopy = bracketsCopy.replace(current, \"(\" + current)\n      bracketsCopy = bracketsCopy.replace(current, \")\" + current)\n      bracketsCopy = bracketsCopy.replace(current, \"()\" + current)\n    } else if (current === \")\" || current === \"]\" || current === \"}\") {\n      bracketsCopy = bracketsCopy.replace(current, \")\" + current)\n      bracketsCopy = bracketsCopy.replace(current, \"(\" + current)\n      bracketsCopy = bracketsCopy.replace(current, \"()\" + current)\n    }\n    i += 1\n  }\n  return bracketsCopy\n}\n\nmodule.exports = {\n  brackets: brackets,\n  correctBracketing: correctBracketing,\n  convertBrackets: convertBrackets,\n  convertBrackets2: convertBrackets2,\n  convertBrackets3: convertBrackets3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if(xs.length < 2) {\n    return xs;\n  }\n  let deriv = [0, 0];\n  for(let i = 0; i < xs.length - 1; i++) {\n    deriv[0] = deriv[0] + (xs[i + 1] - xs[i]);\n  }\n  return deriv;\n};\n\nconst getFibonacci = () => {\n  const first = 1;\n  const second = 1;\n  let curr = first;\n  let prev = second;\n  while(curr < 4000000) {\n    const next = curr + prev;\n    curr = prev;\n    prev = curr;\n    console.log(curr);\n  }\n  console.log(curr);\n};\n\nconst sumOfSquares = (xs) => {\n  const len = xs.length;\n  let sum = 0;\n  for(let i = 0; i < len; i++) {\n    sum += xs[i] * xs[i];\n  }\n  return sum;\n};\n\nconst findLargest = (xs) => {\n  let max = 0;\n  let maxIdx = 0;\n  for(let i = 0; i < xs.length; i++) {\n    if(xs[i] > max) {\n      maxIdx = i;\n      max = xs[i];\n    }\n  }\n  return maxIdx;\n};\n\nconst getPrimeFactors = (num) => {\n  const prime = [];\n  const n = num;\n  let i = 0;\n  for(; i < n; i++) {\n    const factor = n / i;\n    if(factor === 1) {\n      prime.push(1);\n    } else {\n      if(isPrime(factor)) {\n        prime.push(factor);\n      }\n    }\n  }\n  return prime;\n};\n\nconst isPrime = (num) => {\n  if(num === 2) {\n    return true;\n  }\n  let i = 2;\n  let j = (Math.sqrt(num));\n  while(i <= j) {\n    if(num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst getFactors = (num) => {\n  const factors = [];\n  const prime = getPrimeFactors(num);\n  const len = prime.length;\n  let i = 0;\n  for(; i < len; i++) {\n    const factor = num / prime[i];\n    if(factor === 1) {\n      factors.push(prime[i]);\n    } else {\n      if(factor === 0) {\n        return false;\n      } else {\n        factors.push(factor);\n      }\n    }\n  }\n  return factors;\n};\n\nconst getDivisors = (num) => {\n  const divisors = [];\n  const prime = getPrimeFactors(num);\n  const len = prime.length;\n  let i = 0;\n  for(; i < len; i++) {\n    const factor = num / prime[i];\n    if(factor === 1) {\n      divisors.push(prime[i]);\n    } else {\n      divisors.push(prime[i], factor);\n    }\n  }\n  return divisors;\n};\n\nconst isPentagonal = (num) => {\n  const prime = getPrimeFactors(num);\n  const len = prime.length;\n  let i = 0;\n  for(; i < len; i++) {\n    const factor = num / prime[i];\n    if(factor === 5) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst getFibonacciSequence = (num) => {\n  let fibo = [];\n  let curr = 1;\n  let prev = 1;\n  while(curr < num) {\n    const next = curr + prev;\n    fibo.push(curr);\n    curr = prev;\n    prev = curr;\n  }\n  return fibo;\n};\n\nconst sumOfDivisors = (num) => {\n  let sum = 0;\n  const divisors = getDivisors(num);\n  const len = divisors.length;\n  let i = 0;\n  for(; i < len; i++) {\n    sum += divisors[i];\n  }\n  return sum;\n};\n\nconst getGCD = (a, b) => {\n  let i = 0;\n  let gcd = a;\n  for(; i < b; i++) {\n    gcd = Math.floor(gcd / b);\n  }\n  return gcd;\n};\n\nconst gcd = (a, b) => {\n  if(a === 0) {\n    return b;\n  } else {\n    return gcd(b, a % b);\n  }\n};\n\nconst getLargestPrimeFactor = (num) => {\n  let max = 0;\n  let maxIdx = 0;\n  const prime = getPrimeFactors(num);\n  const len = prime.length;\n  let i = 0;\n  for(; i < len; i++) {\n    if(prime[i] > max) {\n      maxIdx = i;\n      max = prime[i];\n    }\n  }\n  return maxIdx;\n};\n\nconst getSquareRoot = (num) => {\n  const root = Math.sqrt(num);\n  return root;\n};\n\nconst isSquare = (num) => {\n  const root = getSquareRoot(num);\n  return (root * root) === num;\n};\n\nconst getLargestDivisor = (num) => {\n  let max = 0;\n  let maxIdx = 0;\n  const divisors = getDivisors(num);\n  const len = divisors"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if(n < 2) return n;\n  return fibfib(n - 1) + fibfib(n - 2);\n};\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  return s.match(/[aeiou]/g).length;\n};\n\nconst test = (s) => {\n  console.log(vowelsCount(s));\n};\n\ntest(\"\");\ntest(\"abc\");\ntest(\"abcd\");\ntest(\"xyz\");\ntest(\"xyzw\");\ntest(\"xyzwvu\");\ntest(\"abcde\");\ntest(\"ACEDY\");\ntest(\"xyz\");\ntest(\"xyzwvu\");\ntest(\"xyzwvu\");\ntest(\"xyzwvu\");\ntest(\"xyzwvu\");\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.length) {\n    return x.split('').reverse().join('');\n  }\n  return x.split('').map((digit, index) => {\n    if (index < shift) {\n      return digit;\n    }\n    return parseInt(digit, 10) + x.charAt(index - shift);\n  }).join('');\n};\n\n/**\n * @param {string} x\n * @param {number} n\n * @return {string}\n * @description:  Return the nth palindrome of x.\n  >>> nthPalindrome(1, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(2, \"abcd\")\n  \"acbd\"\n  >>> nthPalindrome(3, \"abcd\")\n  \"bdab\"\n  >>> nthPalindrome(4, \"abcd\")\n  \"dabc\"\n  >>> nthPalindrome(5, \"abcd\")\n  \"dcba\"\n  >>> nthPalindrome(6, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(7, \"abcd\")\n  \"abcda\"\n  >>> nthPalindrome(8, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(9, \"abcd\")\n  \"abcdb\"\n  >>> nthPalindrome(10, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(11, \"abcd\")\n  \"acbda\"\n  >>> nthPalindrome(12, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(13, \"abcd\")\n  \"abcda\"\n  >>> nthPalindrome(14, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(15, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(16, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(17, \"abcd\")\n  \"acbda\"\n  >>> nthPalindrome(18, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(19, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(20, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(21, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(22, \"abcd\")\n  \"acbdb\"\n  >>> nthPalindrome(23, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(24, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(25, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(26, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(27, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(28, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(29, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(30, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(31, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(32, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(33, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(34, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(35, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(36, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(37, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(38, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(39, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(40, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(41, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(42, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(43, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(44, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(45, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(46, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(47, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(48, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(49, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(50, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(51, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(52, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(53, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(54, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(55, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(56, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(57, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(58, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(59, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(60, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(61, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(62, \"abcd\")\n  \"abcd\"\n  >>> nthPalindrome(63, \"abcd\")"}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    total += s[i].toUpperCase().charCodeAt(0);\n  }\n  return total;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"a\"));\nconsole.log(digitSum(\"aa\"));\nconsole.log(digitSum(\"aaa\"));\nconsole.log(digitSum(\"aaaa\"));\nconsole.log(digitSum(\"aaaa\"));\nconsole.log(digitSum(\"aaaaa\"));\nconsole.log(digitSum(\"aaaaaa\"));\nconsole.log(digitSum(\"aaaaaaa\"));\nconsole.log(digitSum(\"aaaaaaaa\"));\nconsole.log(digitSum(\"aaaaaaaaaa\"));\nconsole.log(digitSum(\"aaaaaaaaaaa\"));\nconsole.log(digitSum(\"aaaaaaaaaaaaaaaaaaaaaaaaaaa\"));\nconsole.log(digitSum(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let arr = s.split(\" \").map((s) => parseInt(s));\n  let numOfFruit = arr.filter((i) => i > 0).length;\n  let result = (n - numOfFruit) / numOfFruit;\n  return result;\n};\n\nconsole.log(fruitDistribution(\"5 apple and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apple and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apple and 1 oranges\", 120));\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    arr.sort((a, b) => a - b);\n    if (arr.length > 0) {\n        let result = [];\n        let index = 1;\n        while (index < arr.length) {\n            if (arr[index] % 2 === 0) {\n                result.push([arr[index], index]);\n            } else {\n                break;\n            }\n            index += 2;\n        }\n        return result;\n    } else {\n        return [];\n    }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const {length} = lst\n  let ret = -1\n  let count = 0\n  for (let i = 0; i < length; i++) {\n    if (lst[i] > 0 && lst[i] > ret) {\n      ret = lst[i]\n      count = 1\n    } else if (lst[i] === ret) {\n      count += 1\n    }\n  }\n  return count >= ret? ret : -1\n}\n\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const min = lst[0]\n  const max = lst[lst.length - 1]\n\n  // sort in the range [min, max]\n  lst.sort((a, b) => a - b)\n\n  // if min < max, move the min to the front\n  if (min < max) {\n    const index = lst.indexOf(min)\n    lst.splice(index, 1)\n    lst.unshift(min)\n  }\n\n  // if max > min, move the max to the front\n  if (max > min) {\n    const index = lst.indexOf(max)\n    lst.splice(index, 1)\n    lst.unshift(max)\n  }\n\n  return lst\n}\n\nexport default strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  return Math.abs(((a + b) * c) / 2)\n}\n\nconst triangleArea2 = (a, b, c) => {\n  return (a + b + c) * Math.pow(Math.sqrt(a * b * c), 2) / 6\n}\n\nexport default triangleArea2\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (!q || q.length === 0) {\n    return false\n  }\n\n  if (q.length === 1) {\n    return q[0] === q[0]\n  }\n\n  let maxWeight = 0\n\n  q.forEach(x => {\n    maxWeight = Math.max(maxWeight, x)\n  })\n\n  if (w <= maxWeight) {\n    return q.every(x => x === x)\n  }\n\n  return false\n}\n\nmodule.exports = willItFly\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const min = Math.min(...arr);\n  const index = arr.indexOf(min);\n  const temp = arr.slice(0);\n  const first = temp[index];\n  const second = temp[index + 1];\n  if (first === second) {\n    return 0;\n  }\n  temp.splice(index, 2);\n  if (first > second) {\n    return arr.indexOf(first) - arr.indexOf(second);\n  }\n  return arr.indexOf(second) - arr.indexOf(first);\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let lst = [];\n\n  if (lst1.length === 0 && lst2.length === 0) {\n    return lst;\n  }\n\n  if (lst1.length === 0) {\n    lst = lst2;\n  } else if (lst2.length === 0) {\n    lst = lst1;\n  } else {\n    lst = [];\n\n    for (let i = 0; i < lst1.length; i++) {\n      let j = 0;\n\n      while (j < lst2.length) {\n        if (lst1[i].length < lst2[j].length) {\n          lst.push(lst1[i]);\n          break;\n        } else if (lst1[i].length === lst2[j].length) {\n          lst.push(lst1[i]);\n          j++;\n        } else {\n          j++;\n        }\n      }\n    }\n  }\n\n  return lst;\n};\n\nexport default totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a === 1) return false\n  if (a === 2) return true\n  if (a === 3) return true\n  if (a % 2 === 0) return false\n  if (a % 3 === 0) return false\n  if (a === 1) return false\n  const div = 3\n  while (div <= Math.sqrt(a)) {\n    if (a % div === 0) return false\n    div += 6\n  }\n  return true\n}\n\n/*\nFind the smallest positive number that is a perfect square, and the smallest positive number that is not a perfect square.\n*/\nconst isPerfectSquare = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  const sqrt = Math.sqrt(n)\n  if (sqrt === n) return true\n  if (n % sqrt === 0) return false\n  return isPerfectSquare(n - sqrt)\n}\n\nconst isPseudoPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n === 4) return false\n  if (n === 5) return true\n  if (n === 6) return true\n  if (n === 7) return false\n  if (n === 8) return false\n  if (n === 9) return true\n  if (n === 10) return true\n  const sqrt = Math.sqrt(n)\n  if (sqrt === n) return true\n  if (n % sqrt === 0) return false\n  const div = 3\n  while (div <= sqrt) {\n    if (n % div === 0) return false\n    div += 6\n  }\n  return true\n}\n\nconst isPseudoPrimeFast = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n === 4) return false\n  if (n === 5) return true\n  if (n === 6) return true\n  if (n === 7) return false\n  if (n === 8) return false\n  if (n === 9) return true\n  if (n === 10) return true\n  const sqrt = Math.sqrt(n)\n  if (sqrt === n) return true\n  if (n % sqrt === 0) return false\n  const div = 3\n  while (div <= sqrt) {\n    if (n % div === 0) return false\n    div += 6\n  }\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n === 4) return false\n  if (n === 5) return true\n  if (n === 6) return true\n  if (n === 7) return false\n  if (n === 8) return false\n  if (n === 9) return true\n  if (n === 10) return true\n  if (n === 11) return false\n  if (n === 12) return false\n  if (n === 13) return false\n  if (n === 14) return false\n  if (n === 15) return false\n  if (n === 16) return false\n  if (n === 17) return false\n  if (n === 18) return false\n  if (n === 19) return false\n  if (n === 20) return false\n  const sqrt = Math.sqrt(n)\n  if (sqrt === n) return true\n  if (n % sqrt === 0) return false\n  const div = 3\n  while (div <= sqrt) {\n    if (n % div === 0) return false\n    div += 6\n  }\n  return true\n}\n\nconst isPrimeFast = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n === 4) return false\n  if (n === 5) return true\n  if (n === 6) return true\n  if (n === 7) return false\n  if (n === 8) return false\n  if (n === 9) return true\n  if (n === 10) return true\n  if (n === 11) return false\n  if (n === 12) return false\n  if (n === 13) return false\n  if (n === 14) return false\n  if (n === 15) return false\n  if (n === 16) return false\n  if (n === 17) return false\n  if (n === 18) return false\n  if (n === 19) return false\n  if (n === 20) return false\n  const sqrt = Math.sqrt(n)\n  if (sqrt === n) return true\n  if (n % sqrt === 0) return false\n  const div = 3\n  while (div <= sqrt) {\n    if (n % div === 0) return false\n    div += 6\n  }\n  return true\n}\n\nconst isPrimeFast2 = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n === 4) return false\n  if (n === 5) return true\n  if (n === 6) return true\n  if (n === 7) return false\n  if (n === 8) return false\n  if (n === 9) return true\n  if (n === 10) return true\n  if (n === 11) return false\n  if (n === 12) return false\n  if (n === 13) return false\n  if (n === 14) return false\n  if (n === 15) return false\n  if (n === 16) return false\n  if (n === 17) return false\n  if (n === 18) return false\n  if (n === 19) return false\n  if (n === 20) return false\n  const sqrt = Math.sqrt(n)\n  if (sqrt === n) return true\n  if (n % sqrt === 0) return false\n  const div = 3\n  while (div"}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return (x % n) === 0 && x / n === Math.floor(x / n);\n};\n\nmodule.exports = isSimplePower;\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let x = a;\n  let b = Math.sqrt(x);\n  while (b > 0) {\n    if (x % b!= 0) {\n      return false;\n    }\n    x = x / b;\n    b = Math.sqrt(x);\n  }\n  return true;\n};\n\nmodule.exports = iscube;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let str = num;\n  let res = 0;\n  let temp = 0;\n  for (let i = 0; i < str.length; i++) {\n    temp = str[i];\n    if (temp === 'A') {\n      res += 2;\n    } else if (temp === 'B') {\n      res += 2;\n    } else if (temp === 'C') {\n      res += 2;\n    } else if (temp === 'D') {\n      res += 2;\n    } else if (temp === 'E') {\n      res += 2;\n    } else if (temp === 'F') {\n      res += 2;\n    } else if (temp === '0') {\n      res += 2;\n    } else if (temp === '1') {\n      res += 2;\n    } else if (temp === '2') {\n      res += 2;\n    } else if (temp === '3') {\n      res += 2;\n    } else if (temp === '4') {\n      res += 2;\n    } else if (temp === '5') {\n      res += 2;\n    } else if (temp === '6') {\n      res += 2;\n    } else if (temp === '7') {\n      res += 2;\n    } else if (temp === '8') {\n      res += 2;\n    } else if (temp === '9') {\n      res += 2;\n    } else if (temp === 'a') {\n      res += 2;\n    } else if (temp === 'b') {\n      res += 2;\n    } else if (temp === 'c') {\n      res += 2;\n    } else if (temp === 'd') {\n      res += 2;\n    } else if (temp === 'e') {\n      res += 2;\n    } else if (temp === 'f') {\n      res += 2;\n    }\n  }\n  return res;\n};\n\nconsole.log(hexKey(\"ABED1A33\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  if (decimal === 0) return 'db'\n  const decimalArray = []\n  while (decimal > 0) {\n    decimalArray.unshift(decimal % 2)\n    decimal = Math.floor(decimal / 2)\n  }\n  decimalArray.unshift('db')\n  return decimalArray.join('')\n}\n\n/*\n  * Convert a string to a number.\n  * The function should return a number,\n  * which is the input string converted to number.\n  * Examples:\n  * convertStringToNumber('3')   # returns 3\n  * convertStringToNumber('3.0') # returns 3\n  * convertStringToNumber('3.1') # returns 3.1\n  */\nconst convertStringToNumber = (str) => {\n  if (!str) {\n    throw new Error('Cannot convert empty string to a number')\n  }\n\n  if (str.includes('.')) {\n    return parseFloat(str)\n  }\n  return parseInt(str)\n}\n\n/*\n  * Convert a number to a string.\n  * The function should return a string,\n  * which is the input number converted to string.\n  * Examples:\n  * convertNumberToString(3)   # returns '3'\n  * convertNumberToString(3.1) # returns '3.1'\n  */\nconst convertNumberToString = (num) => {\n  if (!num) {\n    throw new Error('Cannot convert empty number to a string')\n  }\n  return num.toString()\n}\n\n/*\n  * The function should return a string,\n  * which is the input number converted to string.\n  * Examples:\n  * convertNumberToString(3)   # returns '3'\n  * convertNumberToString(3.1) # returns '3.1'\n  */\nconst addZeros = (num) => {\n  const str = convertNumberToString(num)\n  const numOfZeros = 0\n  return addZerosHelper(str, numOfZeros)\n}\n\nconst addZerosHelper = (str, numOfZeros) => {\n  const zeroStr = ''\n  let length = str.length\n  for (let i = 0; i < numOfZeros; i++) {\n    length += 1\n    zeroStr += '0'\n  }\n  return zeroStr + str\n}\n\nmodule.exports = {\n  addZeros,\n  convertStringToNumber,\n  convertNumberToString,\n  decimalToBinary\n}\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const letters = s.split('').filter((c) => c.length > 1 && c.length <= 3)\n  const diff = letters.map((c, i) => c.charCodeAt(0) === i? i : Math.pow(i, 2) % 10)\n  let sum = 0\n  for (let i = 0; i < diff.length; i++) {\n    sum += diff[i]\n  }\n  return sum >= 3 && sum <= 6 && diff.every((d, i) => d === i + 1)\n}\n\nisHappy('aa')\nisHappy('adb')\nisHappy('aabb')\nisHappy('aab')\nisHappy('abc')\nisHappy('xyy')\nisHappy('xyx')\nisHappy('xaa')\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let result = [];\n  const sum = grades.reduce((sum, grade) => sum + grade, 0);\n  for (let i = 0; i < grades.length; i++) {\n    const grade = grades[i];\n    if (grade === sum / grades.length) {\n      result.push('A+');\n    } else if (grade === sum / (grades.length - 1)) {\n      result.push('A-');\n    } else if (grade === sum / grades.length - 1) {\n      result.push('B-');\n    } else if (grade === sum / (grades.length - 2)) {\n      result.push('B+');\n    } else if (grade === sum / grades.length - 2) {\n      result.push('C-');\n    } else if (grade === sum / grades.length - 3) {\n      result.push('C+');\n    } else if (grade === sum / grades.length - 4) {\n      result.push('D-');\n    } else if (grade === sum / grades.length - 5) {\n      result.push('D+');\n    } else if (grade === sum / grades.length - 6) {\n      result.push('E');\n    } else {\n      result.push(`F${grade}`);\n    }\n  }\n  return result;\n};\n\n//TODO: add the function to the array of functions\nconst letterGrade = (grades) => {\n  let result = [];\n  let max = grades[0];\n  let min = grades[0];\n  let sum = grades[0];\n  for (let i = 0; i < grades.length; i++) {\n    const grade = grades[i];\n    if (grade > max) {\n      max = grade;\n    }\n    if (grade < min) {\n      min = grade;\n    }\n    sum += grade;\n  }\n  const average = sum / grades.length;\n  let averageGrade;\n  if (average >= 4.0) {\n    averageGrade = 'A+';\n  } else if (average >= 3.7) {\n    averageGrade = 'A';\n  } else if (average >= 3.3) {\n    averageGrade = 'A-';\n  } else if (average >= 3.0) {\n    averageGrade = 'B+';\n  } else if (average >= 2.7) {\n    averageGrade = 'B';\n  } else if (average >= 2.3) {\n    averageGrade = 'B-';\n  } else if (average >= 2.0) {\n    averageGrade = 'C+';\n  } else if (average >= 1.7) {\n    averageGrade = 'C';\n  } else if (average >= 1.3) {\n    averageGrade = 'C-';\n  } else if (average >= 1.0) {\n    averageGrade = 'D+';\n  } else if (average >= 0.7) {\n    averageGrade = 'D';\n  } else if (average >= 0.0) {\n    averageGrade = 'D-';\n  } else if (average >= -1.0) {\n    averageGrade = 'E';\n  } else {\n    averageGrade = 'F';\n  }\n  return [averageGrade, min, max];\n};\n\nconsole.log(letterGrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let i = 0\n  while (i < string.length) {\n    if (string.charAt(i) === '0') {\n      return false\n    }\n    while (i < string.length - 1 && string.charAt(i + 1) === '0') {\n      i++\n    }\n    i++\n  }\n  return true\n}\n\n// const primeLength = (string) => {\n//   let i = 0\n//   while (i < string.length) {\n//     if (string.charAt(i) === '0') {\n//       return false\n//     }\n//     while (i < string.length - 1 && string.charAt(i + 1) === '0') {\n//       i++\n//     }\n//     i++\n//   }\n//   return true\n// }\n\n// const primeLength = (string) => {\n//   if (string.length === 1) {\n//     return false\n//   }\n//   for (let i = 1; i < string.length; i++) {\n//     if (string.charAt(i) === '0') {\n//       return false\n//     }\n//   }\n//   return true\n// }\n\nconst primeLength = (string) => {\n  if (string.length === 1) {\n    return false\n  }\n  for (let i = 1; i < string.length; i++) {\n    if (string.charAt(i) === '0') {\n      return false\n    }\n  }\n  return true\n}\n\n// const primeLength = (string) => {\n//   let i = 0\n//   let j = string.length - 1\n//   while (i < j) {\n//     let mid = (i + j) / 2\n//     if (string.charAt(mid) === '0') {\n//       return false\n//     }\n//     while (mid < string.length - 1 && string.charAt(mid + 1) === '0') {\n//       mid++\n//     }\n//     if (mid === string.length - 1) {\n//       return true\n//     }\n//     if (mid === i) {\n//       return false\n//     }\n//     if (string.charAt(mid) > string.charAt(i)) {\n//       j = mid\n//     } else {\n//       i = mid\n//     }\n//   }\n//   return false\n// }\n\nconst primeLength = (string) => {\n  let result = true\n  for (let i = 1; i < string.length; i++) {\n    if (string.charAt(i) === '0') {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\nconst primeLength = (string) => {\n  let result = true\n  let i = 1\n  while (i < string.length) {\n    let j = i\n    while (j < string.length && string.charAt(j)!== '0') {\n      j++\n    }\n    if (i === j) {\n      result = false\n      break\n    }\n    i = j + 1\n  }\n  return result\n}\n\nconst primeLength = (string) => {\n  let result = true\n  let i = 1\n  while (i < string.length) {\n    let j = i\n    while (j < string.length && string.charAt(j)!== '0') {\n      j++\n    }\n    if (i === j) {\n      result = false\n      break\n    }\n    i = j + 1\n  }\n  return result\n}\n\nconst primeLength = (string) => {\n  let result = true\n  for (let i = 1; i < string.length; i++) {\n    let j = i\n    while (j < string.length && string.charAt(j)!== '0') {\n      j++\n    }\n    if (i === j) {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\nconst primeLength = (string) => {\n  let result = true\n  for (let i = 1; i < string.length; i++) {\n    let j = i\n    while (j < string.length && string.charAt(j)!== '0') {\n      j++\n    }\n    if (i === j) {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\nconst primeLength = (string) => {\n  let result = true\n  let i = 1\n  while (i < string.length) {\n    let j = i\n    while (j < string.length && string.charAt(j)!== '0') {\n      j++\n    }\n    if (i === j) {\n      result = false\n      break\n    }\n    i = j + 1\n  }\n  return result\n}\n\nconst primeLength = (string) => {\n  let result = true\n  let i = 1\n  while (i < string.length) {\n    let j = i\n    while (j < string.length && string.charAt(j)!== '0') {\n      j++\n    }\n    if (i === j) {\n      result = false\n      break\n    }\n    i = j + 1\n  }\n  return result\n}\n\nconst primeLength = (string) => {\n  let result = true\n  let i = 1\n  while (i < string.length) {\n    let j = i\n    while (j < string.length && string.charAt(j)!== '0') {\n      j++\n    }\n    if (i === j) {\n      result = false\n      break\n    }\n    i = j + 1\n  }\n  return result\n}\n\nconst primeLength = (string) => {\n  let result = true\n  let i = 1\n  while (i < string.length) {\n    let j = i\n    while (j < string.length && string.charAt(j)!== '0') {\n      j++\n    }\n    if (i === j)"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let numbers = i.toString().split(\"\").reverse();\n    let start = 0;\n    let end = 0;\n    let startOneEnds = numbers.slice(start, end).find(digit => {\n      return (digit == 1);\n    });\n    if (startOneEnds!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nconsole.log(startsOneEnds(10)); // 4\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1. */ const starts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let numbers = i.toString().split(\"\").reverse();\n    let start = 0;\n    let startOneStarts = numbers.slice(start, i).find(digit => {\n      return (digit == 1);\n    });\n    if (startOneStarts!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nconsole.log(starts(10)); // 4\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that ends with 1. */ const ends = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let numbers = i.toString().split(\"\").reverse();\n    let end = numbers.length - 1;\n    let endOneEnds = numbers.slice(i, end).find(digit => {\n      return (digit == 1);\n    });\n    if (endOneEnds!== -1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nconsole.log(ends(10)); // 4\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that starts with 1 and ends with 1. */ const startsEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let numbers = i.toString().split(\"\").reverse();\n    let start = 0;\n    let end = 0;\n    let startOneEnds = numbers.slice(start, end).find(digit => {\n      return (digit == 1);\n    });\n    if (startOneEnds!== -1) {\n      let endOneStarts = numbers.slice(i, numbers.length).find(digit => {\n        return (digit == 1);\n      });\n      if (endOneStarts!== -1) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\nconsole.log(startsEnds(10)); // 1\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    let sum = 0;\n    let result = [];\n    for (let i = 0; i <= N; i++) {\n        sum += Math.log(i + 1) / Math.log(2);\n        result.push(sum.toString(2));\n    }\n    return result;\n};\n\nmodule.exports = solve;<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let newList = [];\n    for(let i = 0; i < lst.length; i++) {\n        newList.push(lst[i]);\n        if(i % 2 === 0) {\n            newList.push(lst[i]);\n        }\n    }\n    return newList;\n};\n\nconst isEmpty = (lst) => lst.length === 0;\n\nconst isEqual = (lst1, lst2) => lst1.length === lst2.length && lst1.every(i => lst2.includes(i));\n\nconst getEvenElements = (lst) => lst.filter((x) => x % 2 === 0);\n\nconst addAll = (lst1, lst2) => lst1.concat(lst2);\n\nconst isEven = (x) => x % 2 === 0;\n\nconst getEvenElements = (lst) => lst.filter((x) => isEven(x));\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst isEven = (x) => x % 2 === 0;\n\nconst getEvenElements = (lst) => lst.filter((x) => isEven(x));\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\nconst remove = (lst, index) => lst.filter((x) => x!== index);\n\n"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let array = s.split(' ')\n  let newArray = array.map(x => x.replace(/[^a-z0-9 ]/gi, '').toLowerCase())\n  let newArrayOrdered = newArray.sort()\n  let newStr = newArrayOrdered.join(' ')\n  return newStr\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = lst[x] || [];\n  const len = row.length;\n  const map = row.reduce((arr, el, i) => {\n    arr[i] = [el, i];\n    return arr;\n  }, []);\n  return map.sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x] || [];\n  const len = row.length;\n  const map = row.reduce((arr, el, i) => {\n    arr[i] = [el, i];\n    return arr;\n  }, []);\n  return map.sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x] || [];\n  const len = row.length;\n  const map = row.reduce((arr, el, i) => {\n    arr[i] = [el, i];\n    return arr;\n  }, []);\n  return map.sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x] || [];\n  const len = row.length;\n  const map = row.reduce((arr, el, i) => {\n    arr[i] = [el, i];\n    return arr;\n  }, []);\n  return map.sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x] || [];\n  const len = row.length;\n  const map = row.reduce((arr, el, i) => {\n    arr[i] = [el, i];\n    return arr;\n  }, []);\n  return map.sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x] || [];\n  const len = row.length;\n  const map = row.reduce((arr, el, i) => {\n    arr[i] = [el, i];\n    return arr;\n  }, []);\n  return map.sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x] || [];\n  const len = row.length;\n  const map = row.reduce((arr, el, i) => {\n    arr[i] = [el, i];\n    return arr;\n  }, []);\n  return map.sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x] || [];\n  const len = row.length;\n  const map = row.reduce((arr, el, i) => {\n    arr[i] = [el, i];\n    return arr;\n  }, []);\n  return map.sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x] || [];\n  const len = row.length;\n  const map = row.reduce((arr, el, i) => {\n    arr[i] = [el, i];\n    return arr;\n  }, []);\n  return map.sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  const row = lst[x] || [];\n  const len = row.length;\n  const map = row.reduce((arr, el, i) => {\n    arr[i] = [el, i];\n    return arr;\n  }, []);\n  return map.sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice().sort((a, b) => {\n    const aSum = a + b;\n    const bSum = a + b;\n    if (aSum < bSum) {\n      return -1;\n    } else if (aSum > bSum) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sortedArray;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toUpperCase()\n  let length = str.length\n  let letter = str.charAt(0)\n  let array = []\n  for(let i = 0; i < length; i++){\n    let current = str[i]\n    if(i < length - 1){\n      array.push(str[i + 1])\n      i++\n    }\n    array.push(letter)\n    letter = current\n  }\n  return array.join('')\n}\n\n/*\n  Create a function decrypt that takes a string as an argument and returns a string decrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift up by two multiplied to two place.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let str = s.toUpperCase()\n  let length = str.length\n  let letter = str.charAt(length - 1)\n  let array = []\n  for(let i = length - 2; i >= 0; i--){\n    let current = str[i]\n    if(i > 0){\n      array.push(str[i - 1])\n      i--\n    }\n    array.push(letter)\n    letter = current\n  }\n  return array.join('')\n}\n\n// main\nconst cipher = (s) => {\n  const encrypt = (s) => {\n    let str = s.toUpperCase()\n    let length = str.length\n    let letter = str.charAt(0)\n    let array = []\n    for(let i = 0; i < length; i++){\n      let current = str[i]\n      if(i < length - 1){\n        array.push(str[i + 1])\n        i++\n      }\n      array.push(letter)\n      letter = current\n    }\n    return array.join('')\n  }\n  const decrypt = (s) => {\n    let str = s.toUpperCase()\n    let length = str.length\n    let letter = str.charAt(length - 1)\n    let array = []\n    for(let i = length - 2; i >= 0; i--){\n      let current = str[i]\n      if(i > 0){\n        array.push(str[i - 1])\n        i--\n      }\n      array.push(letter)\n      letter = current\n    }\n    return array.join('')\n  }\n  let encrypt = (s) => {\n    return encrypt(s)\n  }\n  let decrypt = (s) => {\n    return decrypt(s)\n  }\n  console.log(cipher(encrypt(s)))\n  console.log(cipher(decrypt(s)))\n}\n\ncipher('hi')\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const small = lst.filter(x => x < 2)\n  if (small.length > 0) {\n    return small[1]\n  }\n  return null\n}\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let index = 0\n  let counter = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      counter += 1\n    } else if (S[i] === 'I') {\n      counter -= 1\n      if (counter === 0) {\n        index = i\n        break\n      }\n    }\n  }\n  return index\n}\n\nmodule.exports = isBored\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return [x, y, z].every((num) => typeof num === 'number');\n};\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = message\n  const letter_list = [...new Array(26).keys()]\n  const vowel_list = [...new Array(26).keys()]\n  const consonant_list = [...new Array(26).keys()]\n  const vowel_position_map = {}\n  const consonant_position_map = {}\n\n  for (let i = 0; i < 26; i++) {\n    vowel_list[i] = letter_list[i].substr(0, 1).toLowerCase()\n    consonant_list[i] = letter_list[i].substr(1).toLowerCase()\n    vowel_position_map[i] = letter_list.indexOf(vowel_list[i])\n    consonant_position_map[i] = vowel_list.indexOf(consonant_list[i])\n  }\n\n  for (let i = 0; i < message.length; i++) {\n    let current_letter = message[i]\n    if (current_letter === 'A' || current_letter === 'E' || current_letter === 'I' || current_letter === 'O' || current_letter === 'U') {\n      result = result.substr(0, vowel_position_map[current_letter.charCodeAt(0)]) + consonant_list[current_letter.charCodeAt(0)] + result.substr(vowel_position_map[current_letter.charCodeAt(0)])\n    } else {\n      result = result.substr(0, consonant_position_map[current_letter.charCodeAt(0)]) + vowel_list[current_letter.charCodeAt(0)] + result.substr(consonant_position_map[current_letter.charCodeAt(0)])\n    }\n  }\n\n  return result\n}\n\n/*\n  Encodes a message with a specified encoding.\n  */\nconst encodeWithSpecified = (message, encoding) => {\n  return encode(message).toLowerCase().replace(/[A-Z]/g, a => (a.toLowerCase().charCodeAt(0) - 97))\n}\n\n/*\n  Decodes a message with a specified encoding.\n  */\nconst decode = (message, encoding) => {\n  return encode(message).replace(/[A-Z]/g, a => a.toUpperCase().charCodeAt(0) - 97)\n}\n\n/*\n  Decodes a message with the default encoding.\n  */\nconst decodeWithDefault = (message) => {\n  return decode(message, 'default')\n}\n\n/*\n  Checks if the message is valid according to the given encoding.\n  */\nconst isValid = (message, encoding) => {\n  return encode(message).toLowerCase() === message.toLowerCase()\n}\n\nmodule.exports = {\n  encode,\n  encodeWithSpecified,\n  decode,\n  decodeWithDefault,\n  isValid\n}<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const arr = []\n  const isPrime = (n) => {\n    const i = n - 1\n    const x = Math.floor(Math.sqrt(n))\n    let r = 0\n    while (r <= x) {\n      if (n % i === 0) return false\n      r++\n      i += 2\n    }\n    return true\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (isPrime(lst[i])) {\n      arr.push(lst[i])\n    }\n  }\n  const sum = arr.reduce((a, b) => a + b)\n  return sum\n}\n\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))\nconsole.log(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))\nconsole.log(skjkasdkd([0, 81, 12, 3, 1, 21]))\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  const caseDict = {}\n\n  for(let key of keys) {\n    const lowerKey = key.toLowerCase()\n    const upperKey = key.toUpperCase()\n\n    caseDict[lowerKey] = upperKey\n  }\n\n  return Object.keys(caseDict).every(key => {\n    return dict[key] === caseDict[key]\n  })\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictLength = (dict) => {\n  const keys = Object.keys(dict)\n  const caseDict = {}\n\n  for(let key of keys) {\n    const lowerKey = key.toLowerCase()\n    const upperKey = key.toUpperCase()\n\n    caseDict[lowerKey] = upperKey\n  }\n\n  return Object.keys(caseDict).every(key => {\n    return dict[key].length === key.length\n  })\n}\n\nconst checkDictKeys = (dict) => {\n  const keys = Object.keys(dict)\n  const caseDict = {}\n\n  for(let key of keys) {\n    const lowerKey = key.toLowerCase()\n    const upperKey = key.toUpperCase()\n\n    caseDict[lowerKey] = upperKey\n  }\n\n  return Object.keys(caseDict).every(key => {\n    return Object.keys(dict[key]).every(subKey => {\n      return dict[key][subKey] === caseDict[key][subKey]\n    })\n  })\n}\n\nconst checkDictValues = (dict) => {\n  const keys = Object.keys(dict)\n  const caseDict = {}\n\n  for(let key of keys) {\n    const lowerKey = key.toLowerCase()\n    const upperKey = key.toUpperCase()\n\n    caseDict[lowerKey] = upperKey\n  }\n\n  return Object.keys(caseDict).every(key => {\n    return Object.keys(dict[key]).every(subKey => {\n      return dict[key][subKey] === caseDict[key][subKey]\n    })\n  })\n}\n\nconst checkDictProperties = (dict) => {\n  const keys = Object.keys(dict)\n  const caseDict = {}\n\n  for(let key of keys) {\n    const lowerKey = key.toLowerCase()\n    const upperKey = key.toUpperCase()\n\n    caseDict[lowerKey] = upperKey\n  }\n\n  return Object.keys(caseDict).every(key => {\n    return Object.keys(dict[key]).every(subKey => {\n      return dict[key][subKey] === caseDict[key][subKey]\n    })\n  })\n}\n\nconst checkDictEquality = (dict) => {\n  const keys = Object.keys(dict)\n  const caseDict = {}\n\n  for(let key of keys) {\n    const lowerKey = key.toLowerCase()\n    const upperKey = key.toUpperCase()\n\n    caseDict[lowerKey] = upperKey\n  }\n\n  return Object.keys(caseDict).every(key => {\n    return dict[key] === caseDict[key]\n  })\n}\n\nconst checkDictCamelCase = (dict) => {\n  const keys = Object.keys(dict)\n  const caseDict = {}\n\n  for(let key of keys) {\n    const lowerKey = key.toLowerCase()\n    const upperKey = key.toUpperCase()\n\n    caseDict[lowerKey] = upperKey\n  }\n\n  return Object.keys(caseDict).every(key => {\n    return dict[key].indexOf(`${key}`)!== -1\n  })\n}\n\nconst checkDictUnderscore = (dict) => {\n  const keys = Object.keys(dict)\n  const caseDict = {}\n\n  for(let key of keys) {\n    const lowerKey = key.toLowerCase()\n    const upperKey = key.toUpperCase()\n\n    caseDict[lowerKey] = upperKey\n  }\n\n  return Object.keys(caseDict).every(key => {\n    return dict[key].indexOf(`_${key}`)!== -1\n  })\n}\n\nconst checkDictUnderscoreLower = (dict) => {\n  const keys = Object.keys(dict)\n  const caseDict = {}\n\n  for(let key of keys) {\n    const lowerKey = key.toLowerCase()\n    const upperKey = key.toUpperCase()\n\n    caseDict[lowerKey] = upperKey\n  }\n\n  return Object.keys(caseDict).every(key => {\n    return dict[key].indexOf(`_${key.toLowerCase()}`)!== -1\n  })\n}\n\nconst checkDictUnderscore"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n    const result = [];\n    for (let i = 2; i <= n; i++) {\n        if (isPrime(i)) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n\nfunction isPrime(n) {\n    if (n === 1 || n === 0) {\n        return false;\n    }\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const result = a * b;\n  let sign = '';\n  if (a < 0) {\n    sign = '-';\n    a = -a;\n  }\n  if (b < 0) {\n    sign += '-';\n    b = -b;\n  }\n  let unit = '';\n  if (a % 10 == 0) {\n    unit = '0';\n  }\n  let unitDigit = Math.floor(a / 10);\n  while (unitDigit > 0) {\n    unit = unit + String.fromCharCode(a % 10 + 48);\n    a = Math.floor(a / 10);\n    unitDigit--;\n  }\n  if (b % 10 == 0) {\n    unit += '0';\n  }\n  let unitDigit = Math.floor(b / 10);\n  while (unitDigit > 0) {\n    unit = unit + String.fromCharCode(b % 10 + 48);\n    b = Math.floor(b / 10);\n    unitDigit--;\n  }\n  return sign + unit + '.' + unitDigit + '.' + result;\n};\n\nmodule.exports = multiply;\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let upper = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      count += 1;\n    }\n    if (i % 2 === 0) {\n      upper += 1;\n    }\n  }\n  return count === upper;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const stringValue = value.toString();\n  const intValue = parseInt(stringValue, 10);\n\n  const result = Math.abs(intValue - Math.round(intValue));\n\n  if (result === 0) {\n    return intValue;\n  }\n\n  return intValue + (intValue > 0? 1 : -1);\n};\n\nexport default closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let ret = []\n  let i = 1\n  while (i <= n) {\n    ret.push(i)\n    if (i % 2 === 0) {\n      i += 2\n    } else {\n      i += 1\n    }\n  }\n  return ret\n}\n\n/*\n  Gives a list of positive integers, return the sum of the sum of each element.\n  Example:\n  >>> sumOfSquares([1, 2, 3])\n  12\n  */\nconst sumOfSquares = (nums) => {\n  let ret = 0\n  nums.forEach(num => {\n    ret += num * num\n  })\n  return ret\n}\n\n/*\n  Gives a list of positive integers, return the number of times the number appears in the list.\n  Example:\n  >>> count([1, 1, 2, 3])\n  2\n  */\nconst count = (nums) => {\n  let ret = 0\n  nums.forEach(num => {\n    ret += num\n  })\n  return ret\n}\n\n/*\n  Gives a list of positive integers, return the sum of the product of each element.\n  Example:\n  >>> sumOfProducts([1, 2, 3])\n  6\n  */\nconst sumOfProducts = (nums) => {\n  let ret = 0\n  nums.forEach(num => {\n    ret += num * num\n  })\n  return ret\n}\n\n/*\n  Gives a list of positive integers, return the difference between the sum of the square and the sum of the product of each element.\n  Example:\n  >>> difference([1, 2, 3])\n  10\n  */\nconst difference = (nums) => {\n  let ret = 0\n  nums.forEach(num => {\n    ret += num * num - num * num\n  })\n  return ret\n}\n\n/*\n  Gives a list of positive integers, return the sum of the difference between the sum of the squares and the sum of the difference of each element.\n  Example:\n  >>> sumOfDifference([1, 2, 3])\n  16\n  */\nconst sumOfDifference = (nums) => {\n  let ret = 0\n  nums.forEach(num => {\n    ret += num * num - num * num\n  })\n  return ret\n}\n\n/*\n  Gives a list of positive integers, return the number of elements that are divisible by the number.\n  Example:\n  >>> divisible([1, 2, 3, 5, 7])\n  2\n  */\nconst divisible = (nums) => {\n  let ret = 0\n  nums.forEach(num => {\n    if (num % num === 0) {\n      ret += 1\n    }\n  })\n  return ret\n}\n\n/*\n  Gives a list of positive integers, return the number of elements that are not divisible by the number.\n  Example:\n  >>> notDivisible([1, 2, 3, 5, 7])\n  4\n  */\nconst notDivisible = (nums) => {\n  let ret = 0\n  nums.forEach(num => {\n    if (num % num!== 0) {\n      ret += 1\n    }\n  })\n  return ret\n}\n\n/*\n  Gives a list of positive integers, return the number of elements that are less than the number.\n  Example:\n  >>> lessThan([1, 2, 3, 5, 7])\n  3\n  */\nconst lessThan = (nums) => {\n  let ret = 0\n  nums.forEach(num => {\n    if (num < num) {\n      ret += 1\n    }\n  })\n  return ret\n}\n\n/*\n  Gives a list of positive integers, return the number of elements that are less than the number.\n  Example:\n  >>> lessThan([1, 2, 3, 5, 7])\n  3\n  */\nconst greaterThan = (nums) => {\n  let ret = 0\n  nums.forEach(num => {\n    if (num > num) {\n      ret += 1\n    }\n  })\n  return ret\n}\n\n/*\n  Gives a list of positive integers, return the number of elements that are equal to the number.\n  Example:\n  >>> equalTo([1, 2, 3, 5, 7])\n  2\n  */\nconst equalTo = (nums) => {\n  let ret = 0\n  nums.forEach(num => {\n    if (num === num) {\n      ret += 1\n    }\n  })\n  return ret\n}\n\n/*\n  Gives a list of positive integers, return the number of elements that are not equal to the number.\n  Example:\n  >>> notEqualTo([1, 2, 3, 5, 7])\n  4\n  */\nconst notEqualTo = (nums) => {\n  let ret = 0\n  nums.forEach(num => {\n    if (num!== num) {\n      ret += 1\n    }\n  })\n  return ret\n}\n\nexport {\n  makeAPile,\n  sumOfSquares,\n  count,\n  sumOfProducts,\n  difference,\n  sumOfDifference,\n  divisible,\n  notDivisible,\n  lessThan,\n  greaterThan,\n  equalTo,\n  notEqualTo\n}\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n    return s.split(/\\s*[,\\s]+\\s*/)\n}\n\nconst main = (s) => {\n    console.log(wordsString(s));\n}\n\nmain(\"Hi, my name is John\");\nmain(\"One, two, three, four, five, six\");\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n\n  let xi = x - 1;\n  let yi = y - 1;\n\n  let result = -1;\n\n  for (; xi <= yi; xi++) {\n    if (xi % 2 === 0) {\n      result = xi;\n      break;\n    }\n  }\n\n  return result;\n};\n\nexport default chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let total = 0\n  for (let i = n; i <= m; i++) {\n    total += i\n  }\n  if (n < m) return -1\n  const avg = total / (m - n + 1)\n  return avg.toString(2)\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [], i, len = x.length;\n  for (i = 0; i < len; i++) {\n    result = result.concat(Array.from(Array(x[i]).map((_, i) => i)).filter(\n      (n) => n % 2 === 0,\n    ));\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let names = [];\n  for (let i = 1; i <= 9; i++) {\n    for (let j = 1; j <= 9; j++) {\n      names.push(i.toString() + \" \" + j.toString());\n    }\n  }\n  arr.sort((a, b) => a - b);\n  names.reverse();\n  for (let i = 0; i < names.length; i++) {\n    arr.splice(i, 1, names[i]);\n  }\n  return names;\n};\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n    const result = [];\n    for (let i = 1; i <= n; i++) {\n        result.push(factorial(i));\n    }\n    return result;\n};\n\n// Calculate the factorial of a number\nconst factorial = (n) => {\n    let result = 1;\n    for (let i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n};\n\nexport default f;\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let even = 0, odd = 0;\n    for (let i = 1; i <= n; i++) {\n        let temp = i;\n        while (temp) {\n            if (temp % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            temp = Math.floor(temp / 2);\n        }\n    }\n    return [even, odd];\n};\n\n// t = (tuple of even and odd)\n// evenOddPalindrome(t)\n\n// t = (tuple of even and odd)\n// evenOddPalindrome(t)\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let nums = 0;\n  for (let i = 0; i < arr.length; i++) {\n    nums += (arr[i] > 0)? 1 : 0;\n  }\n  return nums;\n};\n\nexport default countNums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const N = arr.length;\n  let i = N - 1;\n  while (i > 0) {\n    if (arr[i] >= arr[i - 1]) {\n      break;\n    }\n    i--;\n  }\n  return (i === 0 || arr[0] >= arr[N - 1]);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Arr = lst1.slice();\n  const lst2Arr = lst2.slice();\n  let counter = 0;\n  for (const e1 of lst1Arr) {\n    const index = lst2Arr.indexOf(e1);\n    if (index!== -1) {\n      lst1Arr.splice(index, 1, e1);\n      lst2Arr.splice(index, 1, e1);\n      counter++;\n    }\n  }\n  if (counter === 0) return \"NO\";\n  return `${lst1Arr.join(\"\")} ${lst2Arr.join(\"\")}`;\n};\n\nconst result = exchange([1, 2, 3, 4], [1, 5, 3, 4]);\nconsole.log(result);\n// => \"YES\"\n\nexchange([1, 2, 3, 4], [1, 5, 3, 4, 5]);\n// => \"NO\"\n\nexchange([1, 2, 3, 4, 5, 6], [1, 5, 3, 4, 5]);\n// => \"YES\"\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const lowerCaseLetters = /([a-z])/ig;\n  const results = {};\n  const count = 0;\n  const testString = test.toLowerCase();\n  let letter = '';\n\n  for (let i = 0; i < testString.length; i++) {\n    letter = testString[i];\n    if (letter in results) {\n      results[letter] += 1;\n    } else {\n      results[letter] = 1;\n    }\n  }\n\n  for (let key in results) {\n    count += results[key];\n  }\n\n  return { count, results };\n};\n\nmodule.exports = histogram;\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    let len = s.length\n    let result = []\n    let check = false\n\n    for (let i = 0; i < len; i++) {\n        if (s[i] === c[0]) {\n            check = true\n            c.shift()\n            s.splice(i, 1)\n        } else {\n            result.push(s[i])\n        }\n    }\n    return {result, check}\n}\n\n/*Task We were gives two strings s and c, you had to delete all the character in s that is not in c.\nThen check if the result string is palindrome. A string is call palindrome if it reads the same forward as backwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bdce',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acef',true)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedcb',false)\n  */\nconst deleteNonPalindrome = (s, c) => {\n    let len = s.length\n    let result = []\n    let check = false\n\n    for (let i = 0; i < len; i++) {\n        if (s.indexOf(c[0]) === -1) {\n            s.splice(i, 1)\n            result.push(s[i])\n        } else {\n            check = true\n        }\n    }\n    return {result, check}\n}\n\n/*Task You had to delete all the character in s that is not in c.\nThen check if the result string is palindrome. A string is call palindrome if it reads the same forward as backwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bdce',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acef',true)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedcb',false)\n  */\nconst deleteNotPalindrome = (s, c) => {\n    let len = s.length\n    let result = []\n    let check = false\n\n    for (let i = 0; i < len; i++) {\n        if (c.indexOf(s[i]) === -1) {\n            s.splice(i, 1)\n            result.push(s[i])\n        } else {\n            check = true\n        }\n    }\n    return {result, check}\n}\n\nconst checkPalindrome = (s, c) => {\n    let len = s.length\n    let result = []\n    let check = false\n\n    for (let i = 0; i < len; i++) {\n        if (s[i] === c[0]) {\n            check = true\n            c.shift()\n            s.splice(i, 1)\n        } else {\n            result.push(s[i])\n        }\n    }\n    return {result, check}\n}\n\n/*\n Task\n You had to delete all the character in s that is not in c.\n Then check if the result string is palindrome. A string is call palindrome if it reads the same forward as backwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bdce',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acef',true)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedcb',false)\n  */\nconst checkNotPalindrome = (s, c) => {\n    let len = s.length\n    let result = []\n    let check = false\n\n    for (let i = 0; i < len; i++) {\n        if (c.indexOf(s[i]) === -1) {\n            s.splice(i, 1)\n            result.push(s[i])\n        } else {\n            check = true\n        }\n    }\n    return {result, check}\n}\n\nconst checkNotPalindrome2 = (s, c) => {\n    let len = s.length\n    let result = []\n    let check = false\n\n    for (let i = 0; i < len; i++) {\n        if (c.indexOf(s[i]) === -1) {\n            s.splice(i, 1)\n            result.push(s[i])\n        } else {\n            check = true\n        }\n    }\n    return {result, check}\n}\n\nconst main = (s, c) => {\n    let {result, check} = reverseDelete(s, c)\n    if (check) {\n        console.log(`${result} is a palindrome`)\n    } else {\n        console.log(`${result} is not a palindrome`)\n    }\n    let {result, check} = deleteNonPalindrome(s, c)\n    if (check) {\n        console.log(`${result} is a palindrome`)\n    } else {\n        console.log(`${result} is not a palindrome`)\n    }\n    let {result, check} = deleteNotPalindrome(s, c)\n    if (check) {\n        console.log(`${result} is a palindrome`)\n    } else {\n        console.log(`${result} is not a palindrome`)\n    }\n    let {result, check} = checkPalindrome"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  return lst.reduce((arr,str) => {\n    let strLength = str.length\n    let result = []\n    let counter = 0\n    for (let i = 0; i < strLength; i++) {\n      let digit = str[i]\n      counter += (digit === '1')? 1 : 0\n      result.push(counter)\n    }\n    return result\n  },[])\n}\n\nmodule.exports = oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n    let minSum = nums[0]\n    let minStart = 0\n    let minEnd = 0\n\n    for (let i = 0; i < nums.length; i++) {\n        let sum = 0\n\n        for (let j = i; j < nums.length; j++) {\n            sum += nums[j]\n\n            if (sum < minSum) {\n                minSum = sum\n                minStart = i\n                minEnd = j + 1\n            }\n        }\n    }\n\n    return minSum\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]) == 1)\nconsole.log(minSubArraySum([-1, -2, -3]) == -6)<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  if (!grid || grid.length === 0) {\n    return 0;\n  }\n\n  const [height, width] = grid.length;\n  const bucketCount = Math.pow(width, 2) - 1;\n\n  let maxFill = 0;\n\n  for (let i = 0; i < height; i += 1) {\n    for (let j = 0; j < width; j += 1) {\n      if (grid[i][j] === 0) {\n        const fill = Math.min(bucketCount, capacity - grid[i][j]);\n        grid[i][j] += fill;\n        maxFill = Math.max(maxFill, fill);\n      }\n    }\n  }\n\n  return maxFill;\n};\n\nconsole.log(maxFill(\n  [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\n  1\n));\nconsole.log(maxFill(\n  [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]],\n  2\n));\nconsole.log(maxFill(\n  [[0, 0, 0], [0, 0, 0]],\n  5\n));\nconsole.log(maxFill(\n  [[0, 0, 0], [0, 0, 0], [0, 0, 0]],\n  10\n));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const arrLen = arr.length;\n  let i = 0, j = 0, min = 0, count = 0;\n  while (i < arrLen) {\n    while (j < arrLen && (arr[j] & arr[j] === arr[j] && arr[j] > 0)) {\n      j++;\n    }\n    count = arr[j];\n    if (count > 0) {\n      arr[i] = count;\n      i++;\n      j++;\n    } else if (count === 0) {\n      arr[i] = 0;\n      i++;\n    }\n  }\n  return arr;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const l = s.length;\n  const cons = s.split('');\n  const result = [];\n  let i = 0;\n  while (i < l) {\n    const count = 0;\n    let j = 0;\n    while (j < n) {\n      if (cons[i + j] ==='') {\n        break;\n      }\n      count += 1;\n      j += 1;\n    }\n    if (count === n) {\n      result.push(s.slice(i, i + j));\n    }\n    i += j;\n  }\n  return result;\n};\n\n//const selectWords = (s, n) => {\n//  const l = s.length;\n//  const cons = s.split('');\n//  const result = [];\n//  let i = 0;\n//  while (i < l) {\n//    const count = 0;\n//    let j = 0;\n//    while (j < n) {\n//      if (cons[i + j] ==='') {\n//        break;\n//      }\n//      count += 1;\n//      j += 1;\n//    }\n//    if (count === n) {\n//      result.push(s.slice(i, i + j));\n//    }\n//    i += j;\n//  }\n//  return result;\n//};\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const consonant = ['c', 'x', 'b', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'y', 'z'];\n  const vowel = ['a', 'e', 'i', 'o', 'u'];\n  const closestVowel = '';\n  for (let i = 0; i < word.length - 1; i++) {\n    if (consonant.includes(word[i])) {\n      if (vowel.includes(word[i + 1])) {\n        closestVowel = word[i + 1];\n        break;\n      }\n    }\n  }\n  return closestVowel;\n};\n\nexport default getClosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  // the list must be sorted.\n  if (lst.length === 0) {\n    return 'No'\n  }\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let cur = 0\n  let start = 0\n  let end = 0\n  while (i < len && j < len) {\n    if (lst[i] === '(') {\n      cur++\n    } else if (lst[i] === ')') {\n      cur--\n    }\n    if (cur < 0) {\n      return 'No'\n    }\n    if (cur > 0) {\n      start = i\n      end = j\n      break\n    }\n    i++\n    j++\n  }\n  if (start === 0 && end === 0) {\n    return 'No'\n  }\n  const ans = `${lst[start]}${lst[end]}`\n  return matchParens(lst.slice(0, start)) +'' + matchParens(lst.slice(end + 1))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  // 分解：当只有一个数时，直接返回，若只有2个数，则均取最大值\n  if (arr.length === 1) {\n    return arr;\n  }\n\n  // 当有两个数时，分解为两个子数组，按照相反的顺序递归调用\n  if (arr.length === 2) {\n    const [a, b] = arr;\n    return [\n     ...maximum([a, b], k),\n     ...maximum([b, a], k),\n    ];\n  }\n\n  // 当有多个数时，需要排序\n  arr.sort((a, b) => a - b);\n\n  // 分解为k个数，按照相反的顺序，遍历返回最大的k个数\n  const res = arr.slice();\n  for (let i = 0; i < k; i += 1) {\n    res.splice(i, 1, res[i]);\n  }\n  return res;\n};\n\n// 运行程序\nconst arr = [-3, -4, 5];\nconst k = 3;\nconsole.log(maximum(arr, k));\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let i = 0;\n  let result = 0;\n  while (i < lst.length - 1) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i + 1];\n    }\n    i += 2;\n  }\n  if (lst.length > 1) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  let i = 0;\n\n  for (i; i < k; i += 1) {\n    sum += arr[i];\n  }\n\n  for (i; i < arr.length; i += 1) {\n    sum += arr[i];\n    sum += arr[i + 1];\n    sum += arr[i + 2];\n  }\n\n  return sum;\n};\n\nconst arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n\nconsole.log(addElements(arr, 4));\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let list = []\n  let len = n\n  let i = 1\n  while (i <= len) {\n    if (i % 2 === 0) {\n      list.push(i)\n      i = i * 2\n    } else {\n      i = (i * 3) + 1\n    }\n  }\n  return list\n}\n\nmodule.exports = getOddCollatz\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  if (date.length === 0) {\n    return false;\n  }\n  const dateSplit = date.split('-');\n  if (dateSplit[1].length === 0) {\n    return false;\n  }\n  if (dateSplit[1].length === 2) {\n    const dateSplit2 = dateSplit[1].split('/');\n    if (dateSplit2[0].length === 0) {\n      return false;\n    }\n    if (dateSplit2[1].length === 0) {\n      return false;\n    }\n    const month = parseInt(dateSplit2[0], 10);\n    if (month < 1 || month > 12) {\n      return false;\n    }\n    const day = parseInt(dateSplit2[1], 10);\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  } else if (dateSplit[1].length === 4) {\n    const dateSplit2 = dateSplit[1].split('/');\n    if (dateSplit2[0].length === 0) {\n      return false;\n    }\n    if (dateSplit2[1].length === 0) {\n      return false;\n    }\n    const month = parseInt(dateSplit2[0], 10);\n    if (month < 1 || month > 12) {\n      return false;\n    }\n    const day = parseInt(dateSplit2[1], 10);\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  } else if (dateSplit[1].length === 8) {\n    const dateSplit2 = dateSplit[1].split('/');\n    if (dateSplit2[0].length === 0) {\n      return false;\n    }\n    if (dateSplit2[1].length === 0) {\n      return false;\n    }\n    const month = parseInt(dateSplit2[0], 10);\n    if (month < 1 || month > 12) {\n      return false;\n    }\n    const day = parseInt(dateSplit2[1], 10);\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  } else if (dateSplit[1].length === 10) {\n    const dateSplit2 = dateSplit[1].split('/');\n    if (dateSplit2[0].length === 0) {\n      return false;\n    }\n    if (dateSplit2[1].length === 0) {\n      return false;\n    }\n    const month = parseInt(dateSplit2[0], 10);\n    if (month < 1 || month > 12) {\n      return false;\n    }\n    const day = parseInt(dateSplit2[1], 10);\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  } else if (dateSplit[1].length === 16) {\n    const dateSplit2 = dateSplit[1].split('/');\n    if (dateSplit2[0].length === 0) {\n      return false;\n    }\n    if (dateSplit2[1].length === 0) {\n      return false;\n    }\n    const month = parseInt(dateSplit2[0], 10);\n    if (month < 1 || month > 12) {\n      return false;\n    }\n    const day = parseInt(dateSplit2[1], 10);\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = validDate;<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  txt = txt.replace(/[\\s-]+/g,'').replace(/^\\s+|\\s+$/g, '');\n  const arr = txt.split(/\\s+/g);\n  const len = arr.length;\n  if (len < 3) {\n    return arr;\n  }\n  const arr2 = arr[0].split(/(\\b\\w\\b)/g);\n  const arr3 = arr[1].split(/(\\b\\w\\b)/g);\n  const arr4 = arr[2].split(/(\\b\\w\\b)/g);\n  let max = Math.max(arr2.length, arr3.length, arr4.length);\n  const arr5 = [];\n  for (let i = 0; i < max; i++) {\n    let p = 0;\n    let j = 0;\n    let n = 0;\n    while (j < arr2.length && p < arr3.length && p < arr4.length) {\n      if (arr2[j].toLowerCase() === arr3[p].toLowerCase()) {\n        p++;\n      }\n      if (arr2[j].toLowerCase() === arr4[p].toLowerCase()) {\n        p++;\n      }\n      j++;\n    }\n    while (j < arr2.length && p < arr3.length) {\n      if (arr2[j].toLowerCase() === arr3[p].toLowerCase()) {\n        p++;\n      }\n      j++;\n    }\n    while (j < arr3.length && p < arr4.length) {\n      if (arr2[j].toLowerCase() === arr4[p].toLowerCase()) {\n        p++;\n      }\n      j++;\n    }\n    while (j < arr4.length && p < arr3.length) {\n      if (arr2[j].toLowerCase() === arr3[p].toLowerCase()) {\n        p++;\n      }\n      j++;\n    }\n    while (j < arr4.length && p < arr2.length) {\n      if (arr2[j].toLowerCase() === arr4[p].toLowerCase()) {\n        p++;\n      }\n      j++;\n    }\n    if (p === arr2.length) {\n      arr5.push(arr2[j - 1]);\n    }\n    if (p === arr3.length) {\n      arr5.push(arr3[j - 1]);\n    }\n    if (p === arr4.length) {\n      arr5.push(arr4[j - 1]);\n    }\n  }\n  return arr5;\n};\n\n// export\nmodule.exports = splitWords;\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = [];\n  const sortedLength = 0;\n  const isSorted = (lst) => {\n    const i = 1;\n    while (i < lst.length) {\n      const elm = lst[i];\n      const j = i - 1;\n      while (j >= 0) {\n        if (lst[j] > elm) {\n          return false;\n        }\n        j--;\n      }\n      sorted.push(elm);\n      sortedLength++;\n      i++;\n    }\n    return true;\n  };\n  while (lst.length > 0) {\n    if (!isSorted(lst.slice(1))) {\n      return false;\n    }\n    lst.shift();\n  }\n  return sorted.length === sortedLength;\n};\n\nexport default isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  // Your solution should look like this:\n  // return false;\n  // The return statement must be outside the if statement\n  // The else statement must be outside the if statement\n  // The if statement must be inside the else statement\n  if (interval1.end > interval2.start) {\n    return false;\n  }\n  const left = interval1.start;\n  const right = interval2.end;\n  const len = right - left;\n  if (len % 2 === 0) {\n    return false;\n  }\n  const lenMinus1 = len - 1;\n  const half = lenMinus1 / 2;\n  const center = (left + right) / 2;\n  if (half < center) {\n    return false;\n  }\n  const middle = (2 * center) - lenMinus1;\n  if (middle === 0) {\n    return false;\n  }\n  const remainder = middle % 2;\n  return remainder === 0;\n};\n\nconst intersection = (interval1, interval2) => {\n  return (interval1.end < interval2.start)? false : true;\n};\n\nconst intersection = (interval1, interval2) => {\n  return (interval1.end < interval2.start)? false : true;\n};\n\nconsole.log(intersection((1, 2), (2, 3)));\nconsole.log(intersection((-1, 1), (0, 4)));\nconsole.log(intersection((-3, -1), (-5, 5)));<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const max = arr.reduce((prev, curr) => Math.max(prev, curr), -Infinity);\n  const sign = (n) => Math.sign(n);\n  const sum = (n) => n + sign(n);\n  const result = arr.reduce((prev, curr) => sum(curr) * sign(curr), 0);\n  return result > max? null : result;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const ans = [];\n  const visited = new Array(m);\n  for (let j = 0; j < m; j++) {\n    visited[j] = new Array(n);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (visited[j][i] === undefined) {\n        visited[j][i] = grid[i][j];\n        dfs(grid, i, j, k, visited, ans);\n      }\n    }\n  }\n  return ans;\n};\n\nconst dfs = (grid, i, j, k, visited, ans) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  if (i < 0 || i >= n || j < 0 || j >= m || visited[j][i]!== undefined) return;\n  if (k === 1) {\n    ans.push(visited[j][i]);\n    return;\n  }\n  visited[j][i] = visited[j][i] + 1;\n  dfs(grid, i - 1, j, k - 1, visited, ans);\n  visited[j][i] = visited[j][i] - 1;\n  dfs(grid, i + 1, j, k - 1, visited, ans);\n  visited[j][i] = visited[j][i] - 1;\n  dfs(grid, i, j - 1, k - 1, visited, ans);\n  visited[j][i] = visited[j][i] - 1;\n  dfs(grid, i, j + 1, k - 1, visited, ans);\n  visited[j][i] = visited[j][i] - 1;\n};\n\n/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath2 = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(m);\n  for (let j = 0; j < m; j++) {\n    visited[j] = new Array(n);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (visited[j][i] === undefined) {\n        visited[j][i] = grid[i][j];\n        minPath2(grid, i, j, k, visited);\n      }\n    }\n  }\n  return visited;\n};\n\nconst minPath2 = (grid, i, j, k, visited) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  if (i < 0 || i >= n || j < 0 || j >= m || visited[j][i]!== undefined) return;\n  if (k === 1) {\n    visited[j][i] = grid[i][j];\n    return;\n  }\n  visited[j][i] = grid[i][j] + 1;\n  minPath2(grid, i - 1, j, k -"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const result = [];\n  let i = 1;\n  for (let j = 1; j <= n; j += 1) {\n    result.push(i);\n    i = 1 + Math.floor(i / 2);\n  }\n  return result;\n}\n\nconsole.log(tri(3));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n    const isOdd = (n) => (n % 2!== 0);\n    const product = (n) => {\n        let i = 0;\n        let res = 1;\n        while (i < n) {\n            res *= (n - i);\n            i += 2;\n        }\n        return res;\n    };\n    return (isOdd(n)? product(n) : 0);\n};\n\nconst numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\nconst result = digits(10000);\nconsole.log(numbers.map(n => n * result));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  let stack = [string];\n  while (stack.length > 0) {\n    let last = stack.pop();\n    if (last === '[' || last === ']') {\n      let index = stack.length - 1;\n      let inner = stack[index];\n      if (inner === '[' || inner === ']') {\n        stack.splice(index, 1);\n        continue;\n      }\n    }\n    return false;\n  }\n  return true;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]]]]]]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const result = [];\n  lst.forEach(x => {\n    const newNum = Math.round(x * Math.pow(10, Ceiling));\n    result.push(newNum);\n  });\n  return result.reduce((a, b) => a + b * b);\n};\n\nconst sumSquares2 = (lst) => {\n  const result = [];\n  lst.forEach(x => {\n    const newNum = Math.round(x * Math.pow(10, Ceiling));\n    result.push(newNum);\n  });\n  return result.reduce((a, b) => a + b);\n};\n\nconsole.log(sumSquares([1, 2, 3]));\nconsole.log(sumSquares2([1, 2, 3]));\n\nconst sumSquares3 = (lst) => {\n  const result = [];\n  lst.forEach(x => {\n    const newNum = Math.round(x * Math.pow(10, Ceiling));\n    result.push(newNum);\n  });\n  return result.reduce((a, b) => a + b);\n};\n\nconsole.log(sumSquares3([1, 2, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    return txt.length > 0 && /^[a-zA-Z]+$/.test(txt.slice(-1));\n};\n\n/*\n  Create a functions that return a string that is the reverse of the last word in the string.\n  Example:\n  reverseLastWord(\"Hello World!\") ➞ \"! World\"\n  reverseLastWord(\"Hello World!\") ➞ \"! \"\n  */\nconst reverseLastWord = (txt) => {\n    return txt.length > 0 && txt.slice(-1) ==''? txt.slice(0, -1) + txt.slice(-1) : txt.slice(0, -1);\n};\n\n/*\n  Create a function that returns the first word in the string.\n  Example:\n  firstWord(\"Hello World!\") ➞ \"Hello\"\n  firstWord(\"Hello World!\") ➞ \"Hello\"\n  firstWord(\"Hello World!\") ➞ \"World\"\n  firstWord(\"Hello World!\") ➞ \"\"\n  firstWord(\"\") ➞ \"\"\n  */\nconst firstWord = (txt) => {\n    return txt.length > 0 && txt.slice(0, 1) ==''? txt.slice(1) : txt;\n};\n\n/*\n  Create a function that returns the last word in the string.\n  Example:\n  lastWord(\"Hello World!\") ➞ \"World!\"\n  lastWord(\"Hello World!\") ➞ \"World!\"\n  lastWord(\"Hello World!\") ➞ \"Hello\"\n  lastWord(\"Hello World!\") ➞ \"\"\n  lastWord(\"\") ➞ \"\"\n  */\nconst lastWord = (txt) => {\n    return txt.length > 0 && txt.slice(-1) ==''? txt.slice(0, -1) : txt;\n};\n\n/*\n  Create a function that returns the last n word in the string.\n  Example:\n  lastNWords(\"Hello World!\", 2) ➞ \"World!\"\n  lastNWords(\"Hello World!\", 2) ➞ \"World\"\n  lastNWords(\"Hello World!\", 2) ➞ \"\"\n  lastNWords(\"Hello World!\", 0) ➞ \"\"\n  lastNWords(\"Hello World!\", -1) ➞ \"World!\"\n  lastNWords(\"Hello World!\", -2) ➞ \"Hello\"\n  lastNWords(\"Hello World!\", 2) ➞ \"Hello World!\"\n  lastNWords(\"Hello World!\", 3) ➞ \"Hello World!\"\n  lastNWords(\"Hello World!\", 4) ➞ \"Hello World!\"\n  */\nconst lastNWords = (txt, n) => {\n    return txt.length > 0? txt.slice(0, n) +'' + txt.slice(n) : '';\n};\n\n/*\n  Create a function that returns the last n word in the string.\n  Example:\n  lastNWords(\"Hello World!\", 2) ➞ \"World!\"\n  lastNWords(\"Hello World!\", 2) ➞ \"World\"\n  lastNWords(\"Hello World!\", 2) ➞ \"\"\n  lastNWords(\"Hello World!\", 0) ➞ \"\"\n  lastNWords(\"Hello World!\", -1) ➞ \"World!\"\n  lastNWords(\"Hello World!\", -2) ➞ \"Hello\"\n  lastNWords(\"Hello World!\", 2) ➞ \"Hello World!\"\n  lastNWords(\"Hello World!\", 3) ➞ \"Hello World!\"\n  lastNWords(\"Hello World!\", 4) ➞ \"Hello World!\"\n  */\nconst firstNWords = (txt, n) => {\n    return txt.length > 0? txt.slice(0, n) +'' + txt.slice(n) : '';\n};\n\n/*\n  Create a function that returns true if the string is empty and false otherwise.\n  Example:\n  empty(\"Hello World!\") ➞ false\n  empty(\"Hello World!\") ➞ true\n  empty(\"\") ➞ true\n  empty(\" \") ➞ false\n  empty(\"   \") ➞ false\n  */\nconst empty = (txt) => {\n    return txt.length === 0;\n};\n\n/*\n  Create a function that returns true if the string is not empty and false otherwise.\n  Example:\n  notEmpty(\"Hello World!\") ➞ true\n  notEmpty(\"Hello World!\") ➞ true\n  notEmpty(\"Hello World!\") ➞ true\n  notEmpty(\"Hello World!\") ➞ true\n  notEmpty(\"Hello World!\") ➞ false\n  notEmpty(\"\") ➞ false\n  notEmpty(\" \") ➞ true\n  notEmpty(\"   \") ➞ true\n  */\nconst notEmpty = (txt) => {\n    return txt.length > 0;\n};\n\n/*\n  Create a function that returns true if the string is not empty and contains at least one word.\n  Example:\n  hasWord(\"Hello World!\") ➞ true\n  hasWord(\"Hello World!\") ➞ true\n  hasWord(\"Hello World!\") ➞ true\n  hasWord(\"Hello World!\") ➞ true\n  hasWord(\"Hello World!\") ➞ true\n  hasWord(\"Hello World!\") ➞ false\n  hasWord(\"\") ➞ false\n  hasWord(\" \") ➞ false\n  hasWord(\"   \") ➞ false\n  */\nconst hasWord = (txt) => {\n    return txt.length > 0 && txt.indexOf(' ')!== -1;\n};\n\n/*\n  Create a function that returns true if the string is not empty and contains at least one word.\n  Example:\n  hasWord(\"Hello World!\") ➞ true\n  hasWord(\"Hello World!\") ➞ true\n  hasWord(\"Hello World!\") ➞ true\n  hasWord(\"Hello World!\") ➞ true\n  has"}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const isGreaterThanOrEqual = arr => arr.findIndex(x => x >= arr[0]);\n  const isLessThanOrEqual = arr => arr.findIndex(x => x <= arr[0]);\n  const [first, second] = [arr[0], arr[1]];\n  const [third, fourth] = [arr[2], arr[3]];\n  let [a, b, c, d] = arr;\n\n  if (first >= second && second >= third && third >= fourth) {\n    return -1;\n  }\n\n  if (first >= second) {\n    if (second >= third) {\n      if (third >= fourth) {\n        return isGreaterThanOrEqual(arr);\n      } else {\n        return isLessThanOrEqual(arr);\n      }\n    } else {\n      return isLessThanOrEqual(arr);\n    }\n  } else {\n    if (second >= third) {\n      if (third >= fourth) {\n        return isGreaterThanOrEqual(arr);\n      } else {\n        return isLessThanOrEqual(arr);\n      }\n    } else {\n      return isLessThanOrEqual(arr);\n    }\n  }\n};\n\nexport default canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestNumber(lst)\n  const smallest = smallestNumber(lst)\n  if (largest && smallest) {\n    return (largest < 0? largest : null, smallest < 0? smallest : null)\n  }\n  return (largest, smallest)\n}\n\nconst largestSmallestIntegersTest = {\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]),\n  largestSmallestIntegers([0]),\n  largestSmallestIntegers([-4, -5]),\n  largestSmallestIntegers([5, 6]),\n  largestSmallestIntegers([-2, -1])\n}\n\ndescribe('largestSmallestIntegers', () => {\n  it('works with an empty list', () => {\n    expect(largestSmallestIntegers([])).toEqual(largestSmallestIntegersTest)\n  })\n\n  it('works with a list with one element', () => {\n    expect(largestSmallestIntegers([5])).toEqual(largestSmallestIntegersTest)\n  })\n\n  it('works with a list with more than one element', () => {\n    expect(largestSmallestIntegers([-2, -1, 0, 1, 2])).toEqual(largestSmallestIntegersTest)\n  })\n})\n\ndescribe('largestSmallestIntegers', () => {\n  it('works with an empty list', () => {\n    expect(largestSmallestIntegers([])).toEqual(largestSmallestIntegersTest)\n  })\n\n  it('works with a list with one element', () => {\n    expect(largestSmallestIntegers([5])).toEqual(largestSmallestIntegersTest)\n  })\n\n  it('works with a list with more than one element', () => {\n    expect(largestSmallestIntegers([-2, -1, 0, 1, 2])).toEqual(largestSmallestIntegersTest)\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  if (a < b) return a;\n  if (b < a) return b;\n  return null;\n}\n\nconsole.log(compareOne(1, 2.5));\nconsole.log(compareOne(1, \"2,3\"));\nconsole.log(compareOne(\"5,1\", \"6\"));\nconsole.log(compareOne(\"1\", 1));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = (n + 1) / 2\n  return sum === Math.floor(sum)\n}\n\n/*\n  Evaluate whether the given number n is a perfect number.\n  Example\n  isPerfect(1) == false\n  isPerfect(2) == false\n  isPerfect(3) == true\n  isPerfect(4) == true\n  isPerfect(5) == true\n  isPerfect(6) == false\n  isPerfect(7) == false\n  isPerfect(8) == false\n  isPerfect(9) == false\n  */\nconst isPerfect = (n) => {\n  const sum = (n + 1) / 2\n  return sum === Math.floor(sum)\n}\n\n/*\n  Evaluate whether the given number n is prime.\n  Example\n  isPrime(1) == false\n  isPrime(2) == true\n  isPrime(3) == true\n  isPrime(4) == true\n  isPrime(5) == true\n  isPrime(6) == true\n  isPrime(7) == true\n  isPrime(8) == true\n  isPrime(9) == false\n  isPrime(10) == false\n  isPrime(11) == false\n  isPrime(12) == false\n  isPrime(13) == false\n  isPrime(14) == false\n  */\nconst isPrime = (n) => {\n  return n === 1 || n === 2 ||\n         ((n & 1) === 0 && n!== 0)\n}\n\n/*\n  Evaluate whether the given number n is a triangular number.\n  Example\n  isTriangular(1) == false\n  isTriangular(2) == true\n  isTriangular(3) == true\n  isTriangular(4) == false\n  isTriangular(5) == false\n  isTriangular(6) == false\n  isTriangular(7) == false\n  isTriangular(8) == true\n  isTriangular(9) == false\n  isTriangular(10) == false\n  */\nconst isTriangular = (n) => {\n  return n === 1 || n === 2 || n === 3 ||\n         (n === 4 && Math.sqrt(1 + 8 * n) === Math.floor(Math.sqrt(n)))\n}\n\n/*\n  Evaluate whether the given number n is an abundant number.\n  Example\n  isAbundant(1) == false\n  isAbundant(2) == true\n  isAbundant(3) == true\n  isAbundant(4) == false\n  isAbundant(5) == false\n  isAbundant(6) == false\n  isAbundant(7) == false\n  isAbundant(8) == true\n  isAbundant(9) == false\n  isAbundant(10) == false\n  */\nconst isAbundant = (n) => {\n  return n <= 1? false :\n         (n <= 6? true :\n                  n <= 12? n % 2 === 1? false : true :\n                  n <= 18? n % 3 === 1? false : true :\n                  n <= 30? n % 5 === 1? false : true :\n                  n <= 50? n % 7 === 1? false : true :\n                  n <= 100? n % 11 === 1? false : true :\n                  n <= 600? n % 13 === 1? false : true :\n                  n <= 1000? n % 17 === 1? false : true :\n                  false)\n}\n\n/*\n  Evaluate whether the given number n is a prime power.\n  Example\n  isPrimePower(1) == false\n  isPrimePower(2) == false\n  isPrimePower(3) == false\n  isPrimePower(4) == false\n  isPrimePower(5) == false\n  isPrimePower(6) == false\n  isPrimePower(7) == false\n  isPrimePower(8) == false\n  isPrimePower(9) == false\n  isPrimePower(10) == false\n  isPrimePower(11) == false\n  isPrimePower(12) == false\n  isPrimePower(13) == false\n  isPrimePower(14) == false\n  isPrimePower(15) == false\n  isPrimePower(16) == false\n  isPrimePower(17) == false\n  isPrimePower(18) == false\n  isPrimePower(19) == false\n  isPrimePower(20) == false\n  isPrimePower(21) == false\n  isPrimePower(22) == true\n  isPrimePower(23) == false\n  isPrimePower(24) == false\n  isPrimePower(25) == false\n  isPrimePower(26) == false\n  isPrimePower(27) == false\n  isPrimePower(28) == false\n  isPrimePower(29) == false\n  isPrimePower(30) == false\n  isPrimePower(31) == false\n  isPrimePower(32) == false\n  isPrimePower(33) == false\n  isPrimePower(34) == false\n  isPrimePower(35) == false\n  isPrimePower(36) == false\n  isPrimePower(37) == false\n  isPrimePower(38) == false\n  isPrimePower(39) == false\n  isPrimePower(40) == false\n  isPrimePower(41) == false\n  isPrimePower(42) == false\n  isPrimePower(43) == false\n  isPrimePower(44) == false\n  isPrimePower(45) == false\n  isPrimePower(46) == false\n  isPrimePower(47) == false\n  isPrimePower(48) == false\n  isPrimePower(49) == false\n  isPrimePower(50) == false\n  isPrimePower(51) == false\n  isPrimePower(52) == false\n  isPrimePower(53) == false\n  isPrimePower(54) == false\n  isPrimePower(55) == false\n  isPrimePower(56) == false\n  isPrimePower(57) == false\n  isPrimePower(58) == false\n  isPrimePower(59) == false\n  isPrimePower(60) == false\n  isPrimePower(61) == false\n  isPrimePower(62) == false"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let total = 1\n  for (let i = 1; i <= n; i++) {\n    total = total * i\n  }\n  return total\n}\n\n/*\n  The function should return the difference between the special factorials of\n  two integers.\n  The function should take two integer as arguments.\n  */\nconst diff = (a, b) => {\n  let diff = (a - b)\n  if (a > b) {\n    diff = -diff\n  }\n  return diff\n}\n\n/*\n  The function should return the number of numbers with special factorials.\n  The function should take two integer as arguments.\n  */\nconst count = (a, b) => {\n  let count = 0\n  for (let i = a; i <= b; i++) {\n    for (let j = a; j <= b; j++) {\n      if (i!= j) {\n        if (diff(a, i) == diff(a, j)) {\n          count++\n        }\n      }\n    }\n  }\n  return count\n}\n\nexport { specialFactorial, diff, count }\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  if (!text) {\n    return text;\n  }\n  text = text.replace(/\\s+/g, '_');\n  if (text.length > 2 && text.indexOf('_') > 0) {\n    let lastSpaceIndex = text.lastIndexOf('_');\n    let stringToReplace = text.substr(lastSpaceIndex + 1, text.length);\n    text = text.substr(0, lastSpaceIndex) + stringToReplace;\n  }\n  return text;\n};\n\nconst getUniqueId = (text) => {\n  let uniqueId = 'a';\n  while (uniqueId in _uniquifyIds) {\n    uniqueId += 1;\n  }\n  _uniquifyIds[uniqueId] = text;\n  return uniqueId;\n};\n\nexport default {\n  fixSpaces,\n  getUniqueId\n};\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /[^a-zA-Z0-9.]/g\n  const file_name_regex = new RegExp(regex)\n  if (file_name_regex.test(file_name)) {\n    return 'No'\n  }\n  return 'Yes'\n}\n\n/*\n  Create a function which takes a string represents a files's names, and return 'Yeses' if the the files's names is valid, and return 'No' otherwise. A files's names is considers to is valid if and only if all the following condition were met: - The files's names should not contains special characters (like '*' and '?', which are used to denote the start and end of a file's name, and '|' which is used to denote the start and end of a file's extension). - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /[^a-zA-Z0-9*|?|.]/g\n  const file_name_regex = new RegExp(regex)\n  if (file_name_regex.test(file_name)) {\n    return 'No'\n  }\n  return 'Yes'\n}\n\n/*\n  Create a function which takes a string represents a files's names, and return 'Yeses' if the the files's names is valid, and return 'No' otherwise. A files's names is considers to is valid if and only if all the following condition were met: - The files's names should not contains special characters (like '*' and '?', which are used to denote the start and end of a file's name, and '|' which is used to denote the start and end of a file's extension). - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /[^a-zA-Z0-9*|?|.]/g\n  const file_name_regex = new RegExp(regex)\n  if (file_name_regex.test(file_name)) {\n    return 'No'\n  }\n  return 'Yes'\n}\n\n/*\n  Create a function which takes a string represents a files's names, and return 'Yeses' if the the files's names is valid, and return 'No' otherwise. A files's names is considers to is valid if and only if all the following condition were met: - The files's names should not contains special characters (like '*' and '?', which are used to denote the start and end of a file's name, and '|' which is used to denote the start and end of a file's extension). - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /[^a-zA-Z0-9*|?|.]/g\n  const file_name_regex = new RegExp(regex)\n  if (file_name_regex.test(file_name)) {\n    return 'No'\n  }\n  return 'Yes'\n}\n\n/*\n  Create a function which takes a string represents a files's names, and return 'Yeses' if the the files's names is valid, and return 'No' otherwise. A files's names is considers to is valid if and only if all the following condition were met: - The files's names should not contains special characters (like '*' and '?', which are used to denote the start and end of a file's name, and '|' which is used to denote the start and end of a file's extension). - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const regex = /[^a-zA"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const arr = lst.map((item) => item * item)\n  return arr.reduce((a, b) => a + b)\n}\n\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10])) // 42\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42])) // 18446744073709551615\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(' ')\n    const res = []\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i]\n        const res = getPrime(word.length)\n        if (res.length > 1) {\n            const newWord = ''\n            for (let j = 0; j < res.length; j++) {\n                newWord += word[j]\n            }\n            res.forEach(num => {\n                if (newWord.length % num === 0) {\n                    res.splice(res.indexOf(num), 1)\n                }\n            })\n            if (res.length === 0) {\n                res.push(word.length)\n            }\n            res.sort((a, b) => {\n                return a - b\n            })\n            res = res.join(' ')\n            return res\n        }\n    }\n}\n\nexport default wordsInSentence<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  let num = x.split('/')[0];\n  let den = x.split('/')[1];\n  if (num === '') {\n    num = 0;\n  }\n  if (den === '') {\n    den = 0;\n  }\n  return!isNaN(num) &&!isNaN(den) && num % 1 === 0 && den % 1 === 0;\n}\n\nconst result = simplify('1/5', '5/1');\nconsole.log(result);\n/*\ntrue\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n    return nums.sort((a, b) => {\n        let c = a - b;\n        return c;\n    });\n}\n\n/*\n  Takes a list of strings, returns a list of strings, each string having the same length.\n  For example:\n    >>> pad('1234', '5')\n    '1235'\n  */\nconst pad = (str, len) => {\n    let padding = Array(len - str.length).fill('0').join('');\n    return `${str}${padding}`;\n}\n\n/*\n  Takes a string, returns the sum of all the characters in the string.\n  For example:\n    >>> sum('123456789')\n    98\n  */\nconst sum = (str) => {\n    let sum = 0;\n    for (let i = 0; i < str.length; i++) {\n        sum += parseInt(str.charAt(i));\n    }\n    return sum;\n}\n\n/*\n  Takes a string, returns a list of integers, each integer being the sum of the characters of the string.\n  For example:\n    >>> sum('123456789')\n    98\n  */\nconst listOfDigits = (str) => {\n    let sum = 0;\n    for (let i = 0; i < str.length; i++) {\n        sum += parseInt(str.charAt(i));\n    }\n    return [sum];\n}\n\n/*\n  Takes a list of integers, returns a list of strings, each string having the same length.\n  For example:\n    >>> pad([1, 2, 3, 4, 5], 3)\n    '123'\n  */\nconst padInts = (nums, len) => {\n    let padding = Array(len - nums.length).fill('0').join('');\n    return nums.map((num) => {\n        return `${num}${padding}`;\n    });\n}\n\n/*\n  Takes a list of integers, returns a list of strings, each string having the same length.\n  For example:\n    >>> padInts([1, 2, 3, 4, 5], 3)\n    '123'\n  */\nconst padList = (nums, len) => {\n    let padding = Array(len - nums.length).fill('0').join('');\n    return nums.map((num) => {\n        return `${num}${padding}`;\n    });\n}\n\n/*\n  Takes a list of strings, returns a list of lists of strings, each list having the same length.\n  For example:\n    >>> pad([1, 2, 3, 4, 5], 3)\n    [[1, 2, 3], [4, 5]]\n  */\nconst padListOfLists = (nums, len) => {\n    let padding = Array(len - nums.length).fill('0').join('');\n    return nums.map((str) => {\n        return [str,...nums.slice(str.length).map((num) => {\n            return `${num}${padding}`;\n        })]\n    });\n}\n\n/*\n  Takes a list of strings, returns a list of lists of strings, each list having the same length.\n  For example:\n    >>> padListOfLists([1, 2, 3, 4, 5], 3)\n    [[1, 2, 3], [4, 5]]\n  */\nconst padListOfListsInts = (nums, len) => {\n    let padding = Array(len - nums.length).fill('0').join('');\n    return nums.map((str) => {\n        return [str,...nums.slice(str.length).map((num) => {\n            return `${num}${padding}`;\n        })]\n    });\n}\n\n/*\n  Takes a list of lists of strings, returns a list of lists of lists of strings, each list having the same length.\n  For example:\n    >>> padListOfListsInts([[1, 2, 3], [4, 5]], 3)\n    [[[1, 2, 3], [4, 5]], [[1, 2, 3], [4, 5]]]\n  */\nconst padListOfListsOfLists = (nums, len) => {\n    let padding = Array(len - nums.length).fill('0').join('');\n    return nums.map((list) => {\n        return [...list.map((str) => {\n            return [str,...nums.slice(str.length).map((num) => {\n                return `${num}${padding}`;\n            })]\n        })]\n    });\n}\n\n/*\n  Takes a list of strings, returns a list of lists of lists of strings, each list having the same length.\n  For example:\n    >>> padListOfListsOfLists([[1, 2, 3], [4, 5]], 3)\n    [[[1, 2, 3], [4, 5]], [[1, 2, 3], [4, 5]]]\n  */\nconst padListOfListsOfListsInts = (nums, len) => {\n    let padding = Array(len - nums.length).fill('0').join('');\n    return nums.map((list) => {\n        return [...list.map((str) => {\n            return [str,...nums.slice(str.length).map((num) => {\n                return `${num}${padding}`;\n            })]\n        })]\n    });\n}\n\n/*\n  Takes a list of lists of strings, returns a list of lists of lists of lists of strings, each list having the same length.\n  For example:\n    >>> padListOfListsOfListsInts([[[1, 2, 3], [4, 5]], [[1, 2, 3], [4, 5]]], 3)\n    [[[[1, 2, 3], [4, 5]], [[1, 2, 3"}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const filtered = nums.filter((n) => {\n    return n > 10 && ((n % 10 === 1 && n % 100!== 11) || (n % 10 === 3 && n % 100!== 13) || (n % 10 === 5 && n % 100!== 15) || (n % 10 === 7 && n % 100!== 17) || (n % 10 === 9 && n % 100!== 19));\n  });\n  return filtered.length;\n};\nconsole.log(specialFilter([15, -73, 14, -15])); // 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // 2\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n)].fill(0).map((_, i) => i * i - i + 1)\n  return a.reduce((a, b, i) => a + a[i - 1] + a[i + 1], 0) % 3\n}\n\nexport default getMaxTriples\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1Name = planet1.toUpperCase();\n  const planet2Name = planet2.toUpperCase();\n  const sunName = \"Sun\";\n  let distance = 0;\n  const planets = [];\n  let planet1Index = 0;\n  let planet2Index = 0;\n  let planet1IndexEnd = planets.length - 1;\n  let planet2IndexEnd = planets.length - 1;\n  let planet1IndexEnd;\n  let planet2IndexEnd;\n  while (true) {\n    if (planet1Name === planets[planet1Index].name) {\n      break;\n    }\n    planet1Index++;\n    if (planet1Index > planet1IndexEnd) {\n      break;\n    }\n  }\n  while (true) {\n    if (planet2Name === planets[planet2Index].name) {\n      break;\n    }\n    planet2Index++;\n    if (planet2Index > planet2IndexEnd) {\n      break;\n    }\n  }\n  while (true) {\n    if (sunName === planets[planet1Index].name) {\n      break;\n    }\n    planet1Index++;\n    if (planet1Index > planet1IndexEnd) {\n      break;\n    }\n  }\n  while (true) {\n    if (sunName === planets[planet2Index].name) {\n      break;\n    }\n    planet2Index++;\n    if (planet2Index > planet2IndexEnd) {\n      break;\n    }\n  }\n  while (true) {\n    if (planet1Name === planets[planet1Index].name) {\n      break;\n    }\n    planet1Index++;\n    if (planet1Index > planet1IndexEnd) {\n      break;\n    }\n  }\n  while (true) {\n    if (planet2Name === planets[planet2Index].name) {\n      break;\n    }\n    planet2Index++;\n    if (planet2Index > planet2IndexEnd) {\n      break;\n    }\n  }\n  while (true) {\n    if (sunName === planets[planet1Index].name) {\n      break;\n    }\n    planet1Index++;\n    if (planet1Index > planet1IndexEnd) {\n      break;\n    }\n  }\n  while (true) {\n    if (sunName === planets[planet2Index].name) {\n      break;\n    }\n    planet2Index++;\n    if (planet2Index > planet2IndexEnd) {\n      break;\n    }\n  }\n  while (true) {\n    if (planet1Name === planets[planet1Index].name) {\n      break;\n    }\n    planet1Index++;\n    if (planet1Index > planet1IndexEnd) {\n      break;\n    }\n  }\n  while (true) {\n    if (planet2Name === planets[planet2Index].name) {\n      break;\n    }\n    planet2Index++;\n    if (planet2Index > planet2IndexEnd) {\n      break;\n    }\n  }\n  if (planet1Index > planet1IndexEnd) {\n    return ([]);\n  }\n  if (planet2Index > planet2IndexEnd) {\n    return ([]);\n  }\n  if (planet1Index === planet2Index) {\n    return ([planet1Name]);\n  }\n  while (true) {\n    if (planet1Name === planets[planet1Index].name) {\n      break;\n    }\n    planet1Index++;\n    if (planet1Index > planet1IndexEnd) {\n      break;\n    }\n  }\n  while (true) {\n    if (planet2Name === planets[planet2Index].name) {\n      break;\n    }\n    planet2Index++;\n    if (planet2Index > planet2IndexEnd) {\n      break;\n    }\n  }\n  while (true) {\n    if (planet1Name === planets[planet1Index].name) {\n      break;\n    }\n    planet1Index++;\n    if (planet1Index > planet1IndexEnd) {\n      break;\n    }\n  }\n  while (true) {\n    if (planet2Name === planets[planet2Index].name) {\n      break;\n    }\n    planet2Index++;\n    if (planet2Index > planet2IndexEnd) {\n      break;\n    }\n  }\n  if (planet1Index > planet1IndexEnd) {\n    return ([]);\n  }\n  if (planet2Index > planet2IndexEnd) {\n    return ([]);\n  }\n  if (planet1Index === planet2Index) {\n    return ([planet1Name]);\n  }\n  while (true) {\n    if (planet1Name === planets[planet1Index].name) {\n      break;\n    }\n    planet1Index++;\n    if (planet1Index > planet1IndexEnd) {\n      break;\n    }\n  }\n  while (true) {\n    if (planet2Name === planets[planet2Index].name) {\n      break;\n    }\n    planet2Index++;\n    if (planet2Index > planet2IndexEnd) {\n      break;\n    }\n  }\n  while (true) {\n    if (planet1Name === planets[planet1Index].name) {\n      break;\n    }\n    planet1Index++;\n    if (planet1Index > planet1IndexEnd) {\n      break;\n    }\n  }\n  while (true) {\n    if (planet2Name === planets[planet2Index].name) {\n      break;\n    }\n    planet2Index++;\n    if (planet2Index"}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    lst.sort((a, b) => a.length - b.length);\n    return lst.reduce((a, b) => a + b, 0);\n}\n\nconst isSorted = (lst) => {\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst isListSorted = (lst) => {\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i - 1] > lst[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst list_sort = (lst) => {\n    let sorted = [], i, j;\n    if (lst.length <= 1) {\n        return lst;\n    }\n    for (i = 0; i < lst.length - 1; i++) {\n        sorted.push(lst[i]);\n    }\n    for (i = lst.length - 2; i >= 0; i--) {\n        for (j = 0; j < sorted.length; j++) {\n            if (sorted[j] > lst[i]) {\n                sorted.splice(j, 0, lst[i]);\n                break;\n            }\n        }\n    }\n    return sorted;\n}\n\nmodule.exports = {\n    sortedListSum,\n    isSorted,\n    isListSorted,\n    list_sort\n};<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n > 0) {\n    if (n % 2 === 0) {\n      return x;\n    } else {\n      return y;\n    }\n  } else {\n    return x;\n  }\n};\n\nconst xOrYTest = (t) => {\n  const result = xOrY(t.x, t.y, t.x);\n  if (t.n > 0) {\n    if (t.n % 2 === 0) {\n      return t.x;\n    } else {\n      return t.y;\n    }\n  } else {\n    return t.x;\n  }\n};\n\nconst test = {\n  x: 7,\n  y: 34,\n  n: 12,\n  result: xOrYTest\n};\n\nexport default test;\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n    const diff = lst.reduce((a, b) => a + b, 0)\n    return (lst.length === 0)? 0 : diff * diff\n}\n\n/* Gives a list of numbers, return the product of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheProduct([1, 3, 2, 0]) == 1 * 3 * 2 * 0 = 0 doubleTheProduct([-1, -2, 0]) == 0 doubleTheProduct([9, -2]) == 9 * 9 = 81 doubleTheProduct([0]) == 0 If the input list is emptiest, return 1. */ const doubleTheProduct = (lst) => {\n    const product = lst.reduce((a, b) => a * b, 1)\n    return (lst.length === 0)? 1 : product\n}\n\n/* Gives a list of numbers, return the sum of the squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheSquareSum([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheSquareSum([-1, -2, 0]) == 0 doubleTheSquareSum([9, -2]) == 81 doubleTheSquareSum([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheSquareSum = (lst) => {\n    const sum = lst.reduce((a, b) => a + b, 0)\n    return (lst.length === 0)? 0 : sum * sum\n}\n\n/* Gives a list of numbers, return the sum of the square differences of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheSquareDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 - 1 - 3 - 2 = 10 doubleTheSquareDifference([-1, -2, 0]) == 0 doubleTheSquareDifference([9, -2]) == 81 doubleTheSquareDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheSquareDifference = (lst) => {\n    const diff = lst.reduce((a, b) => a + b, 0)\n    return (lst.length === 0)? 0 : diff * diff\n}\n\n/* Gives a list of numbers, return the product of the square differences of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheSquareProduct([1, 3, 2, 0]) == 1 * 3 * 2 * 0 - 1 * 3 * 2 * 0 = 0 doubleTheSquareProduct([-1, -2, 0]) == 0 doubleTheSquareProduct([9, -2]) == 9 * 9 - 9 * 9 = 0 doubleTheSquareProduct([0]) == 0 If the input list is emptiest, return 1. */ const doubleTheSquareProduct = (lst) => {\n    const product = lst.reduce((a, b) => a * b, 1)\n    return (lst.length === 0)? 1 : product\n}\n\nexport default {\n    sum,\n    diff,\n    product,\n    squareSum,\n    squareDiff,\n    squareProduct\n}\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameArray = game.split('');\n  const guessArray = guess.split('');\n  const gameLength = gameArray.length;\n  const guessLength = guessArray.length;\n  let diff;\n\n  if (gameLength!== guessLength) {\n    return [gameLength - guessLength, gameLength - guessLength];\n  }\n\n  for (let i = 0; i < gameLength; i += 1) {\n    diff = gameArray[i] - guessArray[i];\n    if (diff === 0) {\n      continue;\n    }\n    return [i + diff, i + diff];\n  }\n};\n\n/*\n\n[1, 2, 3, 4, 5, 1]\n[1, 2, 3, 4, 2, -2]\n[0, 5, 0, 0, 0, 4]\n[4, 1, 1, 0, 0, 6]\n\n*/\nconst compare2 = (game, guess) => {\n  const gameArray = game.split('');\n  const guessArray = guess.split('');\n  let diff = 0;\n\n  for (let i = 0; i < gameArray.length; i += 1) {\n    diff += Math.abs(gameArray[i] - guessArray[i]);\n  }\n\n  return [gameArray.length - diff, gameArray.length - diff];\n};\n\nmodule.exports = compare2;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const capExtensions = extensions.filter(extension => extension.length === extension.length.toString().length);\n  const capExtensionsNames = capExtensions.map(extension => extension.toUpperCase());\n  const smExtensions = extensions.filter(extension => extension.length === extension.length.toString().length - 1);\n  const smExtensionsNames = smExtensions.map(extension => extension.toLowerCase());\n\n  const strongestExtension = capExtensionsNames.find(extension => {\n    let strength = 0;\n    for (let i = 0; i < extension.length; i++) {\n      if (extension.charAt(i) > extension.charAt(i + 1)) {\n        strength++;\n      } else {\n        strength--;\n      }\n    }\n    return strength < 0;\n  });\n\n  return `${class_name}.${strongestExtension}`;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n    let d = 0,\n        e = 0;\n    while (a.length > 0) {\n        const c = b.charAt(d);\n        if (c === a.charAt(e)) {\n            e++;\n            if (e === a.length) {\n                return true;\n            }\n        }\n        if (e === b.length) {\n            return false;\n        }\n        d++;\n    }\n    return false;\n}\n\nconsole.log(cycpatternCheck(\"abcd\", \"abd\")); //false\nconsole.log(cycpatternCheck(\"hello\", \"ell\")); //true\nconsole.log(cycpatternCheck(\"whassup\", \"psus\")); //false\nconsole.log(cycpatternCheck(\"abab\", \"baa\")); //true\nconsole.log(cycpatternCheck(\"efef\", \"eeff\")); //false\nconsole.log(cycpatternCheck(\"himenss\", \"simen\")); //true\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const arr = Array.from(num);\n  const evenCount = arr.filter(x => x % 2 === 0);\n  const oddCount = arr.filter(x => x % 2!== 0);\n  return [evenCount.length, oddCount.length];\n}\n\nexport default evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    const romanNumeral = {\n        I: 1,\n        V: 5,\n        X: 10,\n        L: 50,\n        C: 100,\n        D: 500,\n        M: 1000,\n    }\n\n    let romanNumber = number,\n        chars = [],\n        index = 0;\n\n    while (romanNumber >= romanNumeral[index]) {\n        chars.push(romanNumeral[index]);\n        romanNumber -= romanNumeral[index];\n        index++;\n    }\n\n    chars.push(romanNumeral[index]);\n    return chars.join('');\n}\n\nconst numToRoman = (number) => {\n    const numeral = {\n        I: 1,\n        V: 5,\n        X: 10,\n        L: 50,\n        C: 100,\n        D: 500,\n        M: 1000,\n    }\n    let romanNumber = number,\n        chars = [],\n        index = 0;\n\n    while (romanNumber >= numeral[index]) {\n        chars.push(numeral[index]);\n        romanNumber -= numeral[index];\n        index++;\n    }\n\n    chars.push(numeral[index]);\n    return chars.join('');\n}\n\nconst romanToInt = (roman) => {\n    let numeral = roman.toLowerCase(),\n        sum = 0,\n        index = 0;\n\n    while (numeral.charAt(index)!== 0) {\n        sum += romanNumeral[numeral.charAt(index)];\n        index++;\n    }\n\n    return sum;\n}\n\nconst romanToNum = (roman) => {\n    let numeral = roman.toLowerCase(),\n        sum = 0,\n        index = 0;\n\n    while (numeral.charAt(index)!== 0) {\n        sum += romanNumeral[numeral.charAt(index)];\n        index++;\n    }\n\n    return sum;\n}\n\nconst miniRomanToInt = (miniRoman) => {\n    let sum = 0,\n        index = 0;\n\n    while (miniRoman.charAt(index)!== 0) {\n        sum += romanNumeral[miniRoman.charAt(index)];\n        index++;\n    }\n\n    return sum;\n}\n\nconst miniRomanToNum = (miniRoman) => {\n    let sum = 0,\n        index = 0;\n\n    while (miniRoman.charAt(index)!== 0) {\n        sum += romanNumeral[miniRoman.charAt(index)];\n        index++;\n    }\n\n    return sum;\n}\n\nconst intToRoman = (number) => {\n    const numeral = {\n        I: 1,\n        V: 5,\n        X: 10,\n        L: 50,\n        C: 100,\n        D: 500,\n        M: 1000,\n    }\n    let romanNumber = number,\n        chars = [],\n        index = 0;\n\n    while (romanNumber >= numeral[index]) {\n        chars.push(numeral[index]);\n        romanNumber -= numeral[index];\n        index++;\n    }\n\n    chars.push(numeral[index]);\n    return chars.join('');\n}\n\nmodule.exports = {\n    romanToInt,\n    romanToNum,\n    miniRomanToInt,\n    miniRomanToNum,\n    intToRoman,\n    intToMiniRoman,\n}<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    // 在三角形上上面指定的三个点的三角形必须是一个左边到中点的三角形\n    if(a === b && a === c) return false;\n    // 在三角形上上面指定的三个点的三角形必须是左边到右边的三角形\n    if(b === c) return true;\n    // 在三角形上上面指定的三个点的三角形必须是左边到右边的三角形\n    if(a === c) return true;\n    // 在三角形上上面指定的三个点的三角形必须是右边到左边的三角形\n    if(a === b) return true;\n    // 在三角形上上面指定的三个点的三角形必须是左边到左边的三角形\n    if(b === c) return true;\n    // 在三角形上上面指定的三个点的三角形必须是右边到中点的三角形\n    if(a === c) return true;\n    // 在三角形上上面指定的三个点的三角形必须是左边到中点的三角形\n    if(b === c) return true;\n    // 在三角形上上面指定的三个点的三角形必须是中点到右边的三角形\n    if(a === b) return true;\n    // 在三角形上上面指定的三个点的三角形必须是中点到左边的三角形\n    if(b === c) return true;\n    // 在三角形上上面指定的三个点的三角形必须是中点到右边的三角形\n    if(a === c) return true;\n    // 在三角形上上面指定的三个点的三角形必须是左边到左边的三角形\n    if(b === c) return true;\n    // 在三角形上上面指定的三个点的三角形必须是左边到左边的三角形\n    if(a === b) return true;\n    // 在三角形上上面指定的三个点的三角形必须是右边到中点的三角形\n    if(a === c) return true;\n    // 在三角形上上面指定的三个点的三角形必须是右边到中点的三角形\n    if(b === c) return true;\n    // 在三角形上上面指定的三个点的三角形必须是中点到左边的三角形\n    if(a === b) return true;\n    // 在三角形上上面指定的三个点的三角形必须是中点到右边的三角形\n    if(b === c) return true;\n    // 在三角形上上面指定的三个点的三角形必须是左边到左边的三角形\n    if(a === b) return true;\n    // 在三角形上上面指定的三个点的三角形必须是右边到右边的三角形\n    if(a === c) return true;\n    // 在三角形上上面指定的三个点的三角形必须是左边到中点的三角形\n    if(a === b) return true;\n    // 在三角形上上面指定的三个点的三角形必须是左边到右边的三角形\n    if"}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const unique = new Map();\n  return words.reduce((current, next) => {\n    const charSet = new Set();\n    for (let i = 0; i < next.length; i += 1) {\n      charSet.add(next[i]);\n    }\n    if (unique.has(charSet)) {\n      return next;\n    }\n    unique.set(charSet, next);\n    return current;\n  }, \"\");\n}\n\nfindMax([\"name\", \"of\", \"string\"])\nfindMax([\"name\", \"enam\", \"games\"])\nfindMax([\"aaaaaaa\", \"bb\",\"cc\"])\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if(number > need) {\n    return [number - need, remaining];\n  } else {\n    return [number, remaining];\n  }\n}\n\nconsole.log(eat(3, 5, 3));<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    const operators = operator.split('+')\n    const operands = operand.split(' ')\n    let result = 0\n\n    operands.forEach((operand, index) => {\n        const operator = operators[index]\n        const operandValue = parseInt(operand)\n        result += operator === '-'? operandValue : operator === '-'? -operandValue : operator === '*'? operandValue * operandValue : operator === '/'? operandValue / operandValue : operator === '//'? Math.floor(operandValue / operandValue) : operator === '**'? Math.pow(operandValue, operandValue) : operandValue\n    })\n    return result\n}\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebraWithArray = (operator, array) => {\n    const operators = operator.split('+')\n    const operands = array\n    let result = 0\n\n    operands.forEach((operand, index) => {\n        const operator = operators[index]\n        const operandValue = parseInt(operand)\n        result += operator === '-'? operandValue : operator === '*'? operandValue * operandValue : operator === '/'? operandValue / operandValue : operator === '//'? Math.floor(operandValue / operandValue) : operator === '**'? Math.pow(operandValue, operandValue) : operandValue\n    })\n    return result\n}\n\nconst printOperator = (operator, operand) => {\n    const operatorArray = operator.split('+')\n    const operandArray = operand.split(' ')\n    const operatorLength = operatorArray.length\n    const operandLength = operandArray.length\n    const result = ''\n    let i = 0\n\n    while (i < operatorLength) {\n        if (i === 0) {\n            result += operatorArray[i]\n        } else {\n            result += operatorArray[i - 1] + operandArray[i]\n        }\n        i++\n    }\n    return result\n}\n\nconst printArray = (array) => {\n    let result = ''\n    array.forEach((element, index) => {\n        if (index === 0) {\n            result += element\n        } else {\n            result +='' + element\n        }\n    })\n    return result\n}\n\nconst printOperatorArray = (operatorArray, array) => {\n    let result = ''\n    array.forEach((element, index) => {\n        if (index === 0) {\n            result += element\n        } else {\n            result +='' + element\n        }\n    })\n    return result\n}\n\nconst evaluateAlgebra = (operator, operand) => {\n    return doAlgebra(operator, operand)\n}\n\nconst evaluateAlgebraWithArray = (operator, array) => {\n    return doAlgebraWithArray(operator, array)\n}\n\nconst printAlgebra = (operator, operand) => {\n    return printOperator(operator, operand)\n}\n\nconst printAlgebraWithArray = (operator, array) => {\n    return printOperatorArray(operator, array)\n}\n\nconst evaluateAlgebraWithArrayAndOperator = (operator, array, operatorArray) => {\n    return doAlgebraWithArray(operatorArray, array)\n}\n\nconst printAlgebraWithArrayAndOperator = (operator, array, operatorArray) => {\n    return printOperatorArray(operatorArray, array)\n}\n\nconst main = () => {\n    const operatorArray = ['+', '-', '*', '/', '//', '**']\n    const array = ['2', '3', '4', '5']\n\n    const array2 = ['2', '3', '4', '5']\n    const operatorArray2 = ['+', '-', '*', '/', '//', '**']\n\n    const operator = '+'\n    const operand = '2 3 4 5'\n    const operatorArray3 = ['+', '-', '*', '/', '//', '**']\n\n    console.log('doAlgebra(' + operator + ','+ operand + ') ='+ doAlgebra(operator, operand))\n    console.log('doAlgebraWithArray(' + operator + ','+ array + ') ='+ doAlgebraWithArray(operator, array))\n    console.log('evaluateAlgebra(' + operator + ','+ operand + ') ='+ evaluateAlgebra(operator, operand))\n    console.log('evaluateAlgebraWithArray(' + operator + ','+ array + ') ='+ evaluateAlgebraWithArray(operator, array))\n    console.log('printAlgebra(' + operator + ','+ operand + ') ='+ printAlgebra(operator, operand))\n    console.log('printAlgebraWithArray(' + operator +"}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reverse = s.split('').reverse().join('');\n  let rev = reverse.split('').reverse().join('');\n  let rev2 = reverse.split('').reverse().join('');\n  let rev3 = reverse.split('').reverse().join('');\n  return (s.length > 0)? rev : rev2 || rev3 || s;\n}\n\n/*\n  Given a string s, return all the permutations of it.\n  Examples\n  solve(\"a\") = [\"a\", \"A\"]\n  solve(\"ab\") = [\"ab\", \"ba\"]\n  solve(\"cde\") = [\"cde\", \"ede\", \"dee\", \"deA\", \"Aee\", \"aeD\", \"aEd\", \"aDe\", \"edA\", \"eda\", \"edC\", \"ede\", \"dca\", \"dcA\", \"dAc\", \"daC\", \"aCd\", \"aCD\", \"AcD\", \"aCD\", \"acD\", \"acE\", \"aCE\", \"AcE\", \"AcD\", \"AdC\", \"aDc\", \"aDe\", \"aEd\", \"aEd\", \"aeD\", \"aCd\", \"ade\", \"aeC\", \"ada\", \"aCe\", \"adA\", \"aCd\", \"AdA\", \"aeC\", \"AdE\", \"aeD\", \"aeA\", \"adA\", \"aDe\", \"aeA\", \"adE\", \"AdA\", \"aeA\", \"ade\", \"aeA\", \"aCe\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aCe\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aCe\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \"aeC\", \"adC\", \"aDc\", \"aEd\", \"AdC\", \""}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if (text === undefined) {\n        return null;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n};\n\nconst stringToMd5s = (texts) => {\n    if (texts.length === 0) {\n        return null;\n    }\n    return texts.map((text) => stringToMd5(text));\n};\n\nconst stringToMd5List = (texts) => {\n    if (texts.length === 0) {\n        return null;\n    }\n    return new Promise((resolve, reject) => {\n        let md5s = stringToMd5s(texts);\n        if (md5s === null) {\n            return reject(new Error('texts is empty'));\n        }\n        resolve(md5s);\n    });\n};\n\nconst generateMd5 = (text) => {\n    return stringToMd5(text);\n};\n\nconst generateMd5List = (texts) => {\n    return stringToMd5s(texts);\n};\n\nconst checkMd5 = (text, md5) => {\n    return md5 === stringToMd5(text);\n};\n\nconst checkMd5List = (texts, md5s) => {\n    return texts.every(text => checkMd5(text, md5s));\n};\n\nconst generateMd5s = (texts) => {\n    return stringToMd5List(texts);\n};\n\nconst checkMd5s = (texts, md5s) => {\n    return checkMd5List(texts, md5s);\n};\n\nconst getMd5s = (texts) => {\n    return generateMd5s(texts);\n};\n\nconst getMd5 = (text) => {\n    return generateMd5(text);\n};\n\nmodule.exports = {\n    stringToMd5,\n    stringToMd5s,\n    stringToMd5List,\n    generateMd5,\n    generateMd5List,\n    checkMd5,\n    checkMd5List,\n    generateMd5s,\n    checkMd5s,\n    getMd5s,\n    getMd5\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Gives two positive integers a and b, return the odd digits between a\n and b, in ascends order.\n\n  For example:\n  generateOdds(2, 8) => [3, 5, 7]\n  generateOdds(8, 2) => [1, 3, 5, 7]\n  generateOdds(10, 14) => []\n  */\nconst generateOdds = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2!== 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the nth number in the Fibonacci sequence.\n\n  For example:\n  fibonacci(7) => 8\n  fibonacci(10) => 13\n  fibonacci(11) => 21\n  fibonacci(12) => 34\n  fibonacci(13) => 55\n  fibonacci(14) => 89\n  fibonacci(15) => 144\n  fibonacci(16) => 233\n  */\nconst fibonacci = n => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Given a number n, return the nth number in the Fibonacci sequence.\n\n  For example:\n  fibonacci(7) => 8\n  fibonacci(10) => 13\n  fibonacci(11) => 21\n  fibonacci(12) => 34\n  fibonacci(13) => 55\n  fibonacci(14) => 89\n  fibonacci(15) => 144\n  fibonacci(16) => 233\n  */\nconst fibonacciWithMemo = (n, memo) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  if (memo[n]!== undefined) {\n    return memo[n];\n  }\n  memo[n] = fibonacci(n - 1) + fibonacci(n - 2);\n  return memo[n];\n};\n\n/*\n  Given two numbers a and b, return the difference between the Fibonacci\n  sequence starting with a and ending with b.\n\n  For example:\n  fibonacciDiff(7, 13) => 7\n  fibonacciDiff(10, 14) => 3\n  fibonacciDiff(10, 13) => 1\n  */\nconst fibonacciDiff = (a, b) => {\n  let i = a;\n  let j = b;\n  while (i < j) {\n    i = fibonacci(i);\n    j = fibonacci(j);\n  }\n  return j - i;\n};\n\n/*\n  Given a number n, return the nth number in the Fibonacci sequence.\n\n  For example:\n  fibonacciMemo(7) => 8\n  fibonacciMemo(10) => 13\n  fibonacciMemo(11) => 21\n  fibonacciMemo(12) => 34\n  fibonacciMemo(13) => 55\n  fibonacciMemo(14) => 89\n  fibonacciMemo(15) => 144\n  fibonacciMemo(16) => 233\n  */\nconst fibonacciMemo = (n, memo) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  if (memo[n]!== undefined) {\n    return memo[n];\n  }\n  memo[n] = fibonacci(n - 1) + fibonacci(n - 2);\n  return memo[n];\n};\n\nmodule.exports = {\n  generateIntegers,\n  generateOdds,\n  fibonacci,\n  fibonacciMemo,\n  fibonacciDiff,\n};\n<|endoftext|>"}
