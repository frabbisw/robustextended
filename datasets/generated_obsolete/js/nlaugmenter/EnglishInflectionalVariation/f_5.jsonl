{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const elements = Array.from(numbers);\n  const closestElements = [];\n\n  const compare = (number1, number2) => {\n    return Math.abs(number1 - number2) < threshold;\n  };\n\n  elements.forEach((element) => {\n    const elementsToCompare = closestElements.filter((closestElement) => {\n      return compare(element, closestElement);\n    });\n\n    if (elementsToCompare.length > 1) {\n      return false;\n    } else {\n      closestElements.push(element);\n    }\n  });\n\n  return closestElements.length > 0;\n};\n\nexport { hasCloseElements };\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const regex_open = /\\(/g\n  const regex_close = /\\)/g\n  const regex_open_nested = /\\(/g\n  const regex_close_nested = /\\)/g\n\n  // remove spaces\n  paren_string = paren_string.replace(/\\s/g, '')\n\n  // remove any extra parentheses\n  paren_string = paren_string.replace(/\\)/g, '')\n\n  // remove all nested parentheses\n  paren_string = paren_string.replace(regex_open_nested, '')\n  paren_string = paren_string.replace(regex_close_nested, '')\n\n  // find all the open and close parentheses\n  let open_parens = paren_string.match(regex_open)\n  let close_parens = paren_string.match(regex_close)\n\n  // create a list of all open and close parens\n  const parens = []\n  while (open_parens!== null) {\n    parens.push(open_parens[0])\n    open_parens = paren_string.match(regex_open)\n  }\n  while (close_parens!== null) {\n    parens.push(close_parens[0])\n    close_parens = paren_string.match(regex_close)\n  }\n\n  // separate into list of groups\n  const groups = parens.map((item) => {\n    const open = item.indexOf('(')\n    const close = item.indexOf(')')\n\n    return [\n      item.slice(0, open),\n      item.slice(open + 1, close),\n      item.slice(close + 1)\n    ]\n  })\n\n  // separate into list of strings\n  const group_strings = groups.map((item) => {\n    const open = item[0].replace(/\\(/g, '')\n    const close = item[1].replace(/\\)/g, '')\n    return [open, close]\n  })\n\n  // separate into list of lists\n  const list_strings = group_strings.map((item) => {\n    return item.join('()')\n  })\n\n  return list_strings\n}\n\n/*\n  Function to remove any duplicate group of parentheses\n  from input string. If there are two groups of parentheses in one string\n  with the same content, then group will be removed.\n  Input:\n    input_string = '()(()())(()(())(())())(()())'\n    output_string}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const floatParts = number.toString().split(\".\")\n  const intParts = floatParts[0].split(\"e\")\n  const decimalParts = floatParts[1].split(\"e\")\n  const intPart = intParts[1].replace(/0+$/, \"\")\n  const decimalPart = decimalParts[1].replace(/0+$/, \"\")\n  return intPart + decimalPart\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const floatParts = number.toString().split(\".\")\n  const intParts = floatParts[0].split(\"e\")\n  const decimalParts = floatParts[1].split(\"e\")\n  const intPart = intParts[1].replace(/0+$/, \"\")\n  const decimalPart = decimalParts[1].replace(/0+$/, \"\")\n  return intPart + decimalPart\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const floatParts = number.toString().split(\".\")\n  const intParts = floatParts[0].split(\"e\")\n  const decimalParts = floatParts[1].split(\"e\")\n  const intPart = intParts[1].replace(/0+$/, \"\")\n  const decimalPart = decimalParts[1].replace(/0+$/, \"\")\n  return intPart + decimalPart\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const floatParts = number.toString().split(\".\")\n  const intParts = floatParts[0].split(\"e\")\n  const decimalParts = floatParts[1].split(\"e\")\n  const intPart = intParts[1].replace(/0+$/, \"\")\n  const decimalPart = decimalParts[1].replace(/0+$/, \"\")\n  return intPart + decimalPart\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const floatParts = number.toString().split(\".\")\n  const intParts = floatParts[0].split(\"e\")\n  const decimalParts = floatParts[1].split(\"e\")\n  const intPart = intParts[1].replace(/0+$/, \"\")\n  const decimalPart = decimalParts[1].replace(/0+$/, \"\")\n  return intPart + decimalPart\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const floatParts = number.toString().split(\".\")\n  const intParts = floatParts[0].split(\"e\")\n  const decimalParts = floatParts[1].split(\"e\")\n  const intPart = intParts[1].replace(/0+$/, \"\")\n  const decimalPart = decimalParts[1].replace(/0+$/, \"\")\n  return intPart + decimalPart\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const floatParts = number.toString().split(\".\")\n  const intParts = floatParts[0].split(\"e\")\n  const decimalParts = floatParts[1].split(\"e\")\n  const intPart = intParts[1].replace(/0+$/, \"\")\n  const decimalPart = decimalParts[1].replace(/0+$/, \"\")\n  return intPart + decimalPart\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const floatParts = number.toString().split(\".\")\n  const intParts = floatParts[0].split(\"e\")\n  const decimalParts = floatParts[1].split(\"e\")\n  const intPart = intParts[1].replace(/0+$/, \"\")\n  const decimalPart = decimalParts[1].replace(/0+$/, \"\")\n  return intPart + decimalPart\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const floatParts = number.toString().split(\".\")\n  const intParts = floatParts[0].split(\"e\")\n  const decimalParts = floatParts[1].split(\"e\")\n  const intPart = intParts[1].replace(/0+$/, \"\")\n  "}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let result = false;\n  const balance = operations.reduce((prev, next) => {\n    if (next < 0) {\n      return prev;\n    }\n    return prev + next;\n  });\n\n  if (balance === 0) {\n    result = true;\n  }\n\n  return result;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    return acc + Math.abs(num - Math.round(num));\n  }, 0) / numbers.length;\n};\n\nconst median = (numbers) => {\n  let numbersCopy = numbers.slice(0);\n  let numberOfElements = numbers.length;\n  let sortedNumbers = [...numbersCopy].sort((a, b) => a - b);\n  return sortedNumbers[(numberOfElements / 2)];\n};\n\nconst standardDeviation = (numbers) => {\n  const means = mean(numbers);\n  const squaredDeviations = (numbers) => {\n    return numbers.map((num) => Math.pow(num - means, 2));\n  };\n  return Math.sqrt(mean(squaredDeviations(numbers)));\n};\n\nconst variance = (numbers) => {\n  return standardDeviation(numbers) / (numbers.length - 1);\n};\n\nconst populationVariance = (numbers) => {\n  return variance(numbers) / numbers.length;\n};\n\nconst standardDeviationAbsolute = (numbers) => {\n  const standardDeviation = standardDeviation(numbers);\n  return Math.abs(standardDeviation);\n};\n\nconst populationStandardDeviationAbsolute = (numbers) => {\n  const populationVariance = populationVariance(numbers);\n  return Math.abs(populationVariance);\n};\n\nconst sampleVariance = (numbers) => {\n  const sampleVariance = standardDeviationAbsolute(numbers.slice(0, 1));\n  return sampleVariance;\n};\n\nconst sampleStandardDeviationAbsolute = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 1));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute2 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 2));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute3 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 3));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute4 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 4));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute5 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 5));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute6 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 6));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute7 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 7));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute8 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 8));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute9 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 9));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute10 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 10));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute11 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 11));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute12 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 12));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute13 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 13));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute14 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 14));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute15 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 15));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute16 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 16));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute17 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 17));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute18 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 18));\n  return sampleStandardDeviationAbsolute;\n};\n\nconst sampleStandardDeviationAbsolute19 = (numbers) => {\n  const sampleStandardDeviationAbsolute = populationStandardDeviationAbsolute(numbers.slice(0, 19));\n  return sampleStandardDeviationAbsolute;"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!numbers) {\n    return []\n  }\n  const n = numbers.length\n  if (n === 0) {\n    return []\n  }\n  const newN = n + n - 1\n  const res = []\n  let i = 0\n  let j = 0\n  while (i < newN) {\n    if (i % 2 === 0) {\n      res.push(numbers[j])\n      j++\n    }\n    res.push(delimeter)\n    i++\n  }\n  return res\n}\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], '')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], [4])\n  [1, 4, 2, 4, 3]\n  */\nconst intersperseWith = (numbers, delimeter) => {\n  if (!numbers) {\n    return []\n  }\n  const n = numbers.length\n  if (n === 0) {\n    return []\n  }\n  const newN = n + n - 1\n  const res = []\n  let i = 0\n  let j = 0\n  while (i < newN) {\n    if (i % 2 === 0) {\n      res.push(numbers[j])\n      j++\n    }\n    res.push(delimeter)\n    i++\n  }\n  return res\n}\n\nmodule.exports = intersperse\nmodule.exports.intersperseWith = intersperseWith\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const string_arr = paren_string.split(' ')\n  const result = []\n  const level = 0\n\n  for (let i = 0; i < string_arr.length; i++) {\n    if (string_arr[i] === ')') {\n      level--\n    } else if (string_arr[i] === '(') {\n      level++\n    } else if (string_arr[i] === ')') {\n      if (level === 0) {\n        result.push(0)\n      } else {\n        result.push(level)\n      }\n    }\n  }\n\n  return result\n}\n\n/*\n  Given a string, determine whether it is a palindrome or not.\n  Assume the string only contains lowercase letters.\n  \n  >>> isPalindrome('race a car')\n  True\n  >>> isPalindrome('A man, a plan, a canal, Panama')\n  True\n  >>> isPalindrome('race a car')\n  False\n  >>> isPalindrome('race a car')\n  False\n  \n  \n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example\n  >>> isPalindrome('race a car')\n  True\n  \n  \n  # Complex Example"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) >= 0);\n};\n\nexport { filterBySubstring };\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sums = [0]\n  const products = [1]\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i]\n    const newSums = sums.map((s, j) => s + num)\n    const newProducts = products.map((p, j) => p * num)\n    sums = newSums\n    products = newProducts\n  }\n  return [...sums,...products]\n}\n\nexport { sumProduct }\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = {\n    value: -Infinity,\n    index: -1\n  };\n  const rollingMaxList = [];\n  let currentMax = -Infinity;\n  numbers.forEach((number, index) => {\n    const current = number > currentMax;\n    if (current) {\n      rollingMaxList.push(currentMax);\n      currentMax = number;\n      max.index = index;\n    }\n    rollingMaxList.push(number);\n  });\n  rollingMaxList.push(currentMax);\n  return rollingMaxList;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longerPalindrome = '';\n  let shorterPalindrome = '';\n\n  while (string.length > 0) {\n    longerPalindrome = string.substring(0, string.length - 1) + string.substring(string.length - 1, string.length);\n    if (isPalindrome(longerPalindrome)) {\n      shorterPalindrome = longerPalindrome;\n      break;\n    }\n\n    string = string.substring(1, string.length) + string.substring(0, 1);\n  }\n\n  return shorterPalindrome;\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('ab')\n  'ba'\n  >>> makePalindrome('abc')\n  'abc'\n  >>> makePalindrome('cba')\n  'cba'\n  >>> makePalindrome('abcd')\n  'abcd'\n  >>> makePalindrome('abcde')\n  'abcde'\n  >>> makePalindrome('abcdabc')\n  'abcdabc'\n  >>> makePalindrome('abcdab')\n  'abcdab'\n  >>> makePalindrome('abcda')\n  'abcda'\n  */\nconst makeLongestPalindrome = (string) => {\n  let longestPalindrome = '';\n  let prefix = '';\n\n  while (string.length > 0) {\n    longestPalindrome = string.substring(0, string.length - 1) + string.substring(string.length - 1, string.length);\n    if (isPalindrome(longestPalindrome)) {\n      prefix = longestPalindrome;\n      break;\n    }\n\n    string = string.substring(1, string.length) + string.substring(0, 1);\n  }\n\n  return prefix + longestPalindrome;\n}\n\n/*\n  The algorithm is the following:\n  1. Find the longest palindrome in the supplied string.\n  2. Reverse the string with the reversed prefix.\n  3. Return the reversed string with the reversed suffix.\n  */\nconst findLongestPalindrome = (string) => {\n  let longestPalindrome = makeLongestPalindrome(string);\n  return longestPalindrome.split('').reverse().join('');\n}\n\n/* Finds the longest palindrome that begin with a supplied string.\n  Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('ab')\n  'ba'\n  >>> findLongestPalindrome('abc')\n  'abc'\n  >>> findLongestPalindrome('cba')\n  'cba'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('abcde')\n  'abcde'\n  >>> findLongestPalindrome('abcdabc')\n  'abcdabc'\n  >>> findLongestPalindrome('abcdab')\n  'abcdab'\n  >>> findLongestPalindrome('abcda')\n  'abcda'\n  */\nconst findLongestPalindrome = (string) => {\n  let longestPalindrome = '';\n  let prefix = '';\n\n  while (string.length > 0) {\n    longestPalindrome = string.substring(0, string.length - 1) + string.substring(string.length - 1, string.length);\n    if (isPalindrome(longestPalindrome)) {\n      prefix = longestPalindrome;\n      break;\n    }\n\n    string = string.substring(1, string.length) + string.substring(0, 1);\n  }\n\n  return prefix + longestPalindrome.split('').reverse().join('');\n}\n\n/*\n  The algorithm is the following:\n  1. Find the longest palindrome in the supplied string.\n  2. Reverse the string with the reversed prefix.\n  3. Return the reversed string with the reversed suffix.\n  */\nconst findLongestPalindrome = (string) => {\n  let longestPalindrome = '';\n  let prefix = '';\n\n  while (string.length > 0) {\n    longestPalindrome = string.substring(0, string.length - 1) + string.substring(string.length - 1, string.length);\n    if (isPalindrome(longestPalindrome)) {\n      prefix = longestPalindrome;\n      break;\n    }\n\n    string = string.substring(1, string.length) + string.substring(0, 1);\n  }\n\n  return prefix + longestPalindrome.split('').reverse().join('');\n}\n\n/* Tests if the string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').join(''); }\n\n/* Finds the longest palindrome that begin with a supplied string.\n  Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> findLongestPalindrome('ab')\n  'ba'\n  >>> findLongestPalindrome('abc')\n  'abc'\n  >>> findLongestPalindrome('cba')\n  'cba'\n  >>> findLongestPalindrome"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  a = a.split('').map((x) => parseInt(x, 2)).join('');\n  b = b.split('').map((x) => parseInt(x, 2)).join('');\n  let x = '';\n  for (let i = 0; i < a.length; i++) {\n    x += a[i] ^ b[i];\n  }\n  return x;\n};\n\n/*\n  Given a string s, return the number of 'x' in s.\n  */\nconst xCount = (s) => {\n  const xCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'x') {\n      xCount++;\n    }\n  }\n  return xCount;\n};\n\n/*\n  Given a string s, return the number of '0' in s.\n  */\nconst zeroCount = (s) => {\n  const zeroCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === '0') {\n      zeroCount++;\n    }\n  }\n  return zeroCount;\n};\n\n/*\n  Given two strings, a and b, return the number of '1' in their XOR.\n  */\nconst xorCount = (a, b) => {\n  a = a.split('').map((x) => parseInt(x, 2)).join('');\n  b = b.split('').map((x) => parseInt(x, 2)).join('');\n  let xCount = 0;\n  for (let i = 0; i < a.length; i++) {\n    xCount += a[i] ^ b[i];\n  }\n  return xCount;\n};\n\n/*\n  Given two strings, a and b, return the number of '1' in their XOR.\n  */\nconst charXor = (a, b) => {\n  a = a.split('').map((x) => parseInt(x, 2)).join('');\n  b = b.split('').map((x) => parseInt(x, 2)).join('');\n  let xCount = 0;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      xCount++;\n    }\n  }\n  return xCount;\n};\n\nmodule.exports = {\n  xCount,\n  zeroCount,\n  stringXor,\n  xorCount,\n  charXor\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let max = '';\n  strings.forEach(string => {\n    if (string.length > max.length) {\n      max = string;\n    }\n  });\n  if (strings.length === 0) {\n    return null;\n  }\n  return max;\n};\n\n/*\n  Given a list of strings, return a list of strings that have the longest common prefix.\n  >>> longestCommonPrefix(['cat', 'cats', 'cat'])\n  ['cat', 'cats']\n  >>> longestCommonPrefix(['cat', 'dog', 'cats'])\n  ['cat', 'dog']\n  */\nconst longestCommonPrefix = (strings) => {\n  let min = 0;\n  strings.forEach(string => {\n    let length = string.length;\n    if (strings[0].length < length) {\n      length = strings[0].length;\n    }\n    for (let i = 0; i < length; i++) {\n      if (strings[0][i]!== string[i]) {\n        min = i;\n        break;\n      }\n    }\n  });\n  if (min === 0) {\n    return [];\n  }\n  let max = strings[0].length;\n  strings.forEach(string => {\n    if (string.length > max) {\n      max = string.length;\n    }\n  });\n  let prefix = strings[0].slice(0, min);\n  return prefix.concat(strings.slice(1, strings.length).map(string => string.slice(0, max)));\n};\n\nmodule.exports = {\n  longestCommonPrefix,\n  longest\n};\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b!== 0) {\n    a = a % b;\n    b = b % a;\n  }\n  return a;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const words = string.split(' ');\n  const results = [];\n  let current = words.shift();\n  let prefix = current;\n  while (current!== '') {\n    results.push(prefix);\n    prefix = `${current} ${prefix}`;\n    current = words.shift();\n  }\n  return results;\n};\n\nexport default allPrefixes;\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let digits = '';\n  while (n > 0) {\n    digits = `${digits} ${n % 10}`;\n    n = Math.floor(n / 10);\n  }\n  return digits;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1, 5)\n  '1 2 3 4 5'\n  >>> stringSequence(6, 9)\n  '6 7 8 9'\n  >>> stringSequence(3, 0)\n  '0 3'\n  >>> stringSequence(10, 20)\n  '10 11 12 13 14 15 16 17 18 19'\n  */\nconst stringSequence = (start, end) => {\n  let digits = '';\n  for (let i = start; i < end; i++) {\n    digits = `${digits} ${i}`;\n  }\n  return digits;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1, 9, 'abc')\n  '1 2 3 4 5 6 7 8 9 abc'\n  >>> stringSequence(3, 8, 'xyz')\n  '3 4 5 6 7 8 xyz'\n  >>> stringSequence(3, 0, 'abc')\n  'abc 3'\n  >>> stringSequence(2, 0, 'abc')\n  'abc 2'\n  >>> stringSequence(0, 10, 'abc')\n  'abc 0 10'\n  */\nconst stringSequence = (start, end, str) => {\n  let digits = '';\n  for (let i = start; i < end; i++) {\n    digits = `${digits} ${str[i]}`;\n  }\n  return digits;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1, 9, 'xyz')\n  '1 2 3 4 5 6 7 8 9 xyz'\n  >>> stringSequence(3, 8, 'xyz')\n  '3 4 5 6 7 8 xyz'\n  >>> stringSequence(3, 0, 'xyz')\n  'xyz 3'\n  >>> stringSequence(2, 0, 'xyz')\n  'xyz 2'\n  >>> stringSequence(0, 10, 'xyz')\n  'xyz 0 10'\n  */\nconst stringSequence = (start, end, str) => {\n  let digits = '';\n  for (let i = start; i < end; i++) {\n    digits = `${digits} ${str[i]}`;\n  }\n  return digits;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1, 9, 'xyz')\n  '1 2 3 4 5 6 7 8 9 xyz'\n  >>> stringSequence(3, 8, 'xyz')\n  '3 4 5 6 7 8 xyz'\n  >>> stringSequence(3, 0, 'xyz')\n  'xyz 3'\n  >>> stringSequence(2, 0, 'xyz')\n  'xyz 2'\n  >>> stringSequence(0, 10, 'xyz')\n  'xyz 0 10'\n  */\nconst stringSequence = (start, end, str) => {\n  let digits = '';\n  for (let i = start; i < end; i++) {\n    digits = `${digits} ${str[i]}`;\n  }\n  return digits;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1, 9, 'xyz')\n  '1 2 3 4 5 6 7 8 9 xyz'\n  >>> stringSequence(3, 8, 'xyz')\n  '3 4 5 6 7 8 xyz'\n  >>> stringSequence(3, 0, 'xyz')\n  'xyz 3'\n  >>> stringSequence(2, 0, 'xyz')\n  'xyz 2'\n  >>> stringSequence(0, 10, 'xyz')\n  'xyz 0 10'\n  */\nconst stringSequence = (start, end, str) => {\n  let digits = '';\n  for (let i = start; i < end; i++) {\n    digits = `${digits} ${str[i]}`;\n  }\n  return digits;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1, 9, 'xyz')\n  '1 2 3 4 5 6 7 8 9 xyz'\n  >>> stringSequence(3, 8, 'xyz')\n  '3 4 5 6 7 8 xyz'\n  >>> stringSequence(3, 0, 'xyz')\n  'xyz 3'\n  >>> stringSequence(2, 0, 'xyz')\n  'xyz 2'\n  >>> stringSequence(0, 10, 'xyz')\n  'xyz 0 10'\n  */\nconst stringSequence = (start, end, str) => {\n  let digits = '';\n  for (let i = start; i < end; i++) {\n    digits = `${digits} ${str[i]}`;\n  }\n  return digits;\n};\n\n/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1, 9, 'xyz')\n  '1 2 3 4 5 6 7 8 9 xyz'\n  >>> stringSequence(3, 8, 'xyz')\n  '3 4 5 6 7 8 xyz'\n  >>> stringSequence(3, 0, 'xyz')\n  'xyz 3'\n  >>> stringSequence(2, 0, 'xyz')\n  'xyz 2'\n  >>> stringSequence(0, 10, 'xyz')\n  'xyz 0 10'\n  */\nconst stringSequence = (start, end, str) => {\n  let digits = '';\n  for (let i = start; i < end; i++) {\n    digits ="}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charMap = new Map();\n  let result = 0;\n  string.split('').forEach((c) => {\n    const uc = c.toUpperCase();\n    if (charMap.has(uc)) {\n      charMap.set(uc, charMap.get(uc) + 1);\n    } else {\n      charMap.set(uc, 1);\n      result++;\n    }\n  });\n  return result;\n};\n\n/*\n  Given a string, finds out how many times a particular character occurs\n  >>> countOccurrenceOfCharacter('abcABC', 'A')\n  3\n  >>> countOccurrenceOfCharacter('abcABC', 'a')\n  1\n  >>> countOccurrenceOfCharacter('abcABC', 'x')\n  0\n  >>> countOccurrenceOfCharacter('abcABC', 'z')\n  0\n  */\nconst countOccurrenceOfCharacter = (string, character) => {\n  const result = string.split(character).length;\n  return result;\n};\n\n/*\n  Given a string, finds out how many times a particular character occurs, ignoring case\n  >>> countOccurrenceOfCharacterCaseInsensitive('abcABC', 'A')\n  3\n  >>> countOccurrenceOfCharacterCaseInsensitive('abcABC', 'a')\n  1\n  >>> countOccurrenceOfCharacterCaseInsensitive('abcABC', 'x')\n  0\n  >>> countOccurrenceOfCharacterCaseInsensitive('abcABC', 'z')\n  0\n  */\nconst countOccurrenceOfCharacterCaseInsensitive = (string, character) => {\n  const result = string.split(character).map((s) => s.toUpperCase()).join('').split(character).length;\n  return result;\n};\n\n/*\n  Given a string, finds out how many times a particular character occurs, ignoring case, in a substring\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'A', 2)\n  2\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'a', 2)\n  1\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'x', 2)\n  0\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'z', 2)\n  0\n  */\nconst countOccurrenceOfCharacterCaseInsensitiveInSubstring = (string, character, index) => {\n  const result = string.split(character).map((s) => s.toUpperCase()).join('').split(character).filter((s, i) => i < index).length;\n  return result;\n};\n\n/*\n  Given a string, finds out how many times a particular character occurs, ignoring case, in a substring\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'A', 2)\n  2\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'a', 2)\n  1\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'x', 2)\n  0\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'z', 2)\n  0\n  */\nconst countOccurrenceOfCharacterCaseInsensitiveInSubstring = (string, character, index) => {\n  const result = string.split(character).map((s) => s.toUpperCase()).join('').split(character).filter((s, i) => i <= index).length;\n  return result;\n};\n\n/*\n  Given a string, finds out how many times a particular character occurs, ignoring case, in a substring\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'A', 2)\n  2\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'a', 2)\n  1\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'x', 2)\n  0\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'z', 2)\n  0\n  */\nconst countOccurrenceOfCharacterCaseInsensitiveInSubstring = (string, character, index) => {\n  const result = string.split(character).map((s) => s.toUpperCase()).join('').split(character).filter((s, i) => i < index).filter((s, i) => i <= index).length;\n  return result;\n};\n\n/*\n  Given a string, finds out how many times a particular character occurs, ignoring case, in a substring\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'A', 2)\n  2\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'a', 2)\n  1\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'x', 2)\n  0\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'z', 2)\n  0\n  */\nconst countOccurrenceOfCharacterCaseInsensitiveInSubstring = (string, character, index) => {\n  const result = string.split(character).map((s) => s.toUpperCase()).join('').split(character).filter((s, i) => i <= index).filter((s, i) => i < index).length;\n  return result;\n};\n\n/*\n  Given a string, finds out how many times a particular character occurs, ignoring case, in a substring\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'A', 2)\n  2\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'a', 2)\n  1\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'x', 2)\n  0\n  >>> countOccurrenceOfCharacterCaseInsensitiveInSubstring('abcABC', 'z', 2)\n  0\n  */\nconst countOccurrenceOfCharacterCaseInsensitiveInSubstring = (string, character, index) => {\n  const result = string.split(character).map((s) => s.toUpperCase()).join('').split(character).filter((s, i) => i < index).filter((s, i) => i <= index).length;"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let beats = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      beats[i] = 1;\n    } else if (music_string[i] === '|') {\n      beats[i] = 2;\n    } else if (music_string[i] === '.') {\n      beats[i] = 4;\n    }\n  }\n  return beats;\n};\n\n/*\n  Input: List of integers representing how many beats each not last.\n  Output: List of integers representing how many beats done each not last.\n\n  >>> parseBeats([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseBeats = (beats) => beats;\n\n/*\n  Input: String representing musical note in a special ASCII format.\n  Output: Musical note represented in integer format.\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  97\n  */\nconst parseNote = (music_string) => {\n  const notes = {\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9,\n    '0': 0,\n  };\n  return notes[music_string.slice(-1, -2)];\n};\n\n/*\n  Input: List of integers representing how many beats each not last.\n  Output: List of integers representing how many beats done each not last.\n\n  >>> parseBeats([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4])\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseBeats = (beats) => beats;\n\nmodule.exports = {\n  parseMusic,\n  parseBeats,\n  parseNote,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < substring.length; j++) {\n      if (string[i] === substring[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n// ######################################################################################################\n\nexport default howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  return numbers.split(' ').sort((a, b) => {\n    const aNumber = a.replace(/[^0-9]/g, '');\n    const bNumber = b.replace(/[^0-9]/g, '');\n    const aInt = parseInt(aNumber, 10);\n    const bInt = parseInt(bNumber, 10);\n    return aInt - bInt;\n  }).join(' ');\n};\n\n//# sourceMappingURL=sortNumbers.js.map<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return [min, max];\n};\n\n/**\n  * @param {number[]} nums\n  * @return {number[]}\n  * From a supplying list of numbers (of length at least two) select and return two that is the closest to each other (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const delta = max - min;\n  for (let i = 0; i < numbers.length; i++) {\n    const current = numbers[i];\n    const diff = Math.abs(current - max);\n    if (diff < delta) {\n      return [current, max];\n    }\n  }\n  return [min, max];\n};\n\n/**\n  * @param {number[]} nums\n  * @return {number[]}\n  * From a supplying list of numbers (of length at least two) select and return two that is the closest to each other (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  const min = numbers[0];\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const delta = max - min;\n  for (let i = 0; i < numbers.length; i++) {\n    const current = numbers[i];\n    const diff = Math.abs(current - max);\n    if (diff < delta) {\n      return [current, max];\n    }\n  }\n  return [min, max];\n};\n\nexport { findClosestElements, findClosestElements2, findClosestElements3 };\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] / (numbers[i + 1] - numbers[i]))\n  }\n  return newNumbers\n}\n\n/* Gives list of numbers (of at least two elements), apply a log transform to that list,\n  such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitLog = (numbers) => {\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.log(numbers[i + 1] - numbers[i]))\n  }\n  return newNumbers\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the sum of the numbers becomes 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitSum = (numbers) => {\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] / (numbers.length - 1))\n  }\n  return newNumbers\n}\n\n/* Gives list of numbers (of at least two elements), apply a log transform to that list,\n  such that the sum of the numbers becomes 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitSumLog = (numbers) => {\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.log(numbers[i + 1] - numbers[i]))\n  }\n  return newNumbers\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number becomes 0 and the largest becomes 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitMinMax = (numbers) => {\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] / (numbers[i + 1] - numbers[i]))\n  }\n  return newNumbers\n}\n\n/* Gives list of numbers (of at least two elements), apply a log transform to that list,\n  such that the smallest number becomes 0 and the largest becomes 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitMinMaxLog = (numbers) => {\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.log(numbers[i + 1] - numbers[i]))\n  }\n  return newNumbers\n}\n\n/* Gives list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number becomes 0 and the largest becomes 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitMaxMin = (numbers) => {\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] / (numbers[i + 1] - numbers[i]))\n  }\n  return newNumbers\n}\n\n/* Gives list of numbers (of at least two elements), apply a log transform to that list,\n  such that the smallest number becomes 0 and the largest becomes 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitMaxMinLog = (numbers) => {\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.log(numbers[i + 1] - numbers[i]))\n  }\n  return newNumbers\n}\n\nexport default {\n  rescaleToUnit,\n  rescaleToUnitLog,\n  rescaleToUnitSum,\n  rescaleToUnitSumLog,\n  rescaleToUnitMinMax,\n  rescaleToUnitMinMaxLog,\n  rescaleToUnitMaxMin,\n  rescaleToUnitMaxMinLog\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((v) => isInteger(v));\n}\n\nconst isInteger = (v) => {\n  if (typeof v ==='string') {\n    return v.match(/^\\d+$/);\n  }\n  return typeof v === 'number' && isFinite(v);\n}\n\n//\n// ### function toStrings (list)\n// Returns the list of strings that are in the list\n//\nconst toStrings = (list) => {\n  return list.map((v) => {\n    if (typeof v ==='string') {\n      return v;\n    }\n    if (typeof v === 'object' && v.toString) {\n      return v.toString();\n    }\n    return v;\n  });\n}\n\n//\n// ### function toLists (list)\n// Returns the list of lists that are in the list\n//\nconst toLists = (list) => {\n  return list.map((v) => {\n    if (Array.isArray(v)) {\n      return v;\n    }\n    if (typeof v === 'object') {\n      return [v];\n    }\n    return [v];\n  });\n}\n\n//\n// ### function isNumeric (value)\n// Check if value is a numeric type\n//\nconst isNumeric = (value) => {\n  return (typeof value === 'number' || typeof value ==='string' || value instanceof String) &&!isNaN(value);\n}\n\n//\n// ### function isBool (value)\n// Check if value is a boolean type\n//\nconst isBool = (value) => {\n  return typeof value === 'boolean';\n}\n\n//\n// ### function isList (value)\n// Check if value is an array\n//\nconst isList = (value) => {\n  return Array.isArray(value);\n}\n\n//\n// ### function isObject (value)\n// Check if value is an object\n//\nconst isObject = (value) => {\n  return typeof value === 'object';\n}\n\n//\n// ### function isArray (value)\n// Check if value is an array\n//\nconst isArray = (value) => {\n  return Array.isArray(value);\n}\n\n//\n// ### function isArrayOfStrings (value)\n// Check if value is an array of strings\n//\nconst isArrayOfStrings = (value) => {\n  return Array.isArray(value) && value.every((v) => typeof v ==='string');\n}\n\n//\n// ### function isObjectOfStrings (value)\n// Check if value is an object of strings\n//\nconst isObjectOfStrings = (value) => {\n  return Object.keys(value).every((key) => typeof key ==='string');\n}\n\n//\n// ### function isString (value)\n// Check if value is a string\n//\nconst isString = (value) => {\n  return typeof value ==='string';\n}\n\n//\n// ### function isStringOrNumber (value)\n// Check if value is a string or number\n//\nconst isStringOrNumber = (value) => {\n  return typeof value ==='string' || typeof value === 'number';\n}\n\n//\n// ### function isStringOrObject (value)\n// Check if value is a string or an object\n//\nconst isStringOrObject = (value) => {\n  return typeof value ==='string' || isObject(value);\n}\n\n//\n// ### function isNumber (value)\n// Check if value is a number\n//\nconst isNumber = (value) => {\n  return typeof value === 'number';\n}\n\n//\n// ### function isFinite (value)\n// Check if value is a number or a string\n//\nconst isFinite = (value) => {\n  return isNumber(value) || isString(value);\n}\n\n//\n// ### function isFunction (value)\n// Check if value is a function\n//\nconst isFunction = (value) => {\n  return typeof value === 'function';\n}\n\n//\n// ### function isInteger (value)\n// Check if value is an integer\n//\nconst isInteger = (value) => {\n  return isNumber(value) && isFinite(value) && Math.floor(value) === value;\n}\n\n//\n// ### function isStringOrInteger (value)\n// Check if value is a string or an integer\n//\nconst isStringOrInteger = (value) => {\n  return isString(value) || isInteger(value);\n}\n\n//\n// ### function isIntegerOrString (value)\n// Check if value is an integer or a string\n//\nconst isIntegerOrString = (value) => {\n  return isInteger(value) || isString(value);\n}\n\n//\n// ### function isArrayOfInteger (value)\n// Check if value is an array of integers\n//\nconst isArrayOfInteger = (value) => {\n  return Array.isArray(value) && value.every((v) => isInteger(v));\n}\n\n//\n// ### function isArrayOfIntegerOrString (value)\n// Check if value is an array of integers or strings\n//\nconst isArrayOfIntegerOrString = (value) => {\n  return Array.isArray(value) && value.every((v) => isIntegerOrString(v));\n}\n\n//\n// ### function isArrayOfIntegers (value)\n// Check if value is an array of integers\n//\nconst isArrayOfIntegers = (value) => {\n  return Array.isArray(value) && value.every((v) => isInteger(v));\n}\n\n//\n// ### function isArrayOfStrings (value)\n// Check if value is an array of strings\n//\nconst isArrayOfStrings = (value) => {\n  return Array.isArray(value) && value.every((v) => isString(v));\n}\n\n//\n// ### function isArrayOfObjects (value)\n// Check if value is an array of objects\n//\nconst isArrayOfObjects = (value) => {\n  return Array.isArray(value) && value.every((v) => isObject("}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0\n\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) > 255) {\n      length += 2\n    } else {\n      length++\n    }\n  }\n\n  return length\n}\n\nexport default strlen\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n    const arr = Array(n);\n    let i, j;\n    for (i = 1; i < n; i++) {\n        arr[i] = 1;\n    }\n    for (i = 2; i <= n; i++) {\n        for (j = i + 1; j < n; j += i) {\n            arr[j] = 0;\n        }\n    }\n    let largestDivisor = n;\n    for (i = 1; i < n; i++) {\n        if (arr[i] === 1) {\n            largestDivisor = Math.min(largestDivisor, i);\n        }\n    }\n    return largestDivisor;\n};\n\nconsole.log(largestDivisor(15));\nconsole.log(largestDivisor(100));\nconsole.log(largestDivisor(1000));\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  if (n === 0) {\n    return []\n  }\n\n  const factors = []\n  const i = 2\n  while (n > 1) {\n    while (n % i === 0) {\n      factors.push([i, n / i])\n      n = n / i\n    }\n    i++\n  }\n  return factors\n}\n\n/**\n * Given an array of integers, return all permutations of that array.\n * Example: Given [1,2,3] return [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]\n * @param {Array} n\n * @returns {Array}\n */\nconst permutations = (n) => {\n  if (n.length === 0) {\n    return []\n  }\n  const result = []\n  const i = 0\n  const m = n.length - 1\n  let r = 1\n  let k = 1\n  while (r <= m) {\n    const s = n[i]\n    const j = i + 1\n    const tmp = []\n    while (j <= m) {\n      n[i] = n[j]\n      n[j] = s\n      tmp.push(n.slice())\n      j++\n    }\n    tmp.push(n.slice())\n    n = tmp\n    r++\n  }\n  result.push(n)\n  return result\n}\n\n/**\n * Given an array of integers, return all permutations of that array, ignoring the order of the elements.\n * @param {Array} n\n * @returns {Array}\n */\nconst permutationInPlace = (n) => {\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < n.length) {\n    const tmp = n.slice()\n    tmp[i] = n[j]\n    n[j] = n[i]\n    j++\n    result.push(n)\n    n = tmp\n    i++\n  }\n  return result\n}\n\nconst merge = (arr1, arr2) => {\n  const arr = arr1.concat(arr2)\n  const sortedArr = arr.sort((a, b) => a - b)\n  const unique = []\n  let j = 0\n  let k = 0\n  while (j < sortedArr.length) {\n    if (sortedArr[j]!== sortedArr[k]) {\n      unique.push(sortedArr[j])\n      j++\n    }\n    k++\n  }\n  return unique\n}\n\nconst sum = (a, b) => a + b\n\nconst max = (a, b) => Math.max(a, b)\n\nconst min = (a, b) => Math.min(a, b)\n\nconst add = (a, b) => a + b\n\nconst subtract = (a, b) => a - b\n\nconst multiply = (a, b) => a * b\n\nconst divide = (a, b) => a / b\n\nconst divideBy = (a, b) => a / b\n\nconst modulo = (a, b) => a % b\n\nconst divideByZero = () => 0 / 0\n\nconst moduloByZero = () => 0 % 0\n\nconst moduloZero = () => 0 % 0\n\nconst moduloByZero = () => 0 % 0\n\nconst isEven = (n) => n % 2 === 0\n\nconst isOdd = (n) => n % 2!== 0\n\nconst isZero = (n) => n === 0\n\nconst isPositive = (n) => n > 0\n\nconst isNegative = (n) => n < 0\n\nconst isPositiveOrNegative = (n) => n > -1 && n < 1\n\nconst isPositiveOrZero = (n) => n > 0 || n === 0\n\nconst isPositiveOrNegativeOrZero = (n) => n > -1 && n < 1 || n === 0\n\nconst isPositiveOrZero = (n) => n > 0 || n === 0\n\nconst isPositiveOrNegativeOrZero = (n) => n > -1 && n < 1 || n === 0\n\nconst isBetween = (n, a, b) => n >= a && n <= b\n\nconst isInteger = (n) => isPositiveOrZero(n) && isEven(n)\n\nconst isEvenInteger = (n) => isEven(n) && isInteger(n)\n\nconst isOddInteger = (n) => isOdd(n) && isInteger(n)\n\nconst isIntegerBetween = (n, a, b) => isBetween(n, a, b) && isInteger(n)\n\nconst isEvenIntegerBetween = (n, a, b) => isBetween(n, a, b) && isEvenInteger(n)\n\nconst isOddIntegerBetween = (n, a, b) => isBetween(n, a, b) && isOddInteger(n)\n\nconst isIntegerBetweenOrZero = (n, a, b) => isBetween(n, a, b) || n === 0 && isInteger(n)\n\nconst isEvenIntegerBetweenOrZero = (n, a, b) => isBetween(n, a, b) || n === 0 && isEvenInteger(n)\n\nconst isOddIntegerBetweenOrZero = (n, a, b) => isBetween(n, a, b) || n === 0 && isOddInteger(n)\n\nconst isIntegerOrZero = (n) => n === 0 || isInteger(n)\n\nconst isEvenIntegerOrZero = (n) => isEvenInteger(n) || n === 0\n\nconst isOddIntegerOrZero = (n) => isOddInteger(n) || n === 0\n\nconst isIntegerOrZero = (n) => n === 0 || isInteger(n)\n\nconst isPositiveInteger = (n) => isPositiveOrZero(n) && isInteger(n"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  return [...new Set(numbers)];\n}\n\n/* From a list of integers, return the sum of all elements.\n  >>> sum(1, 2, 3, 4, 5)\n  15\n  */\nconst sum = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    return acc + num;\n  }, 0);\n}\n\n/* From a list of integers, return the minimum of all elements.\n  >>> min(1, 2, 3, 4, 5)\n  1\n  */\nconst min = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    if (acc < num) {\n      return num;\n    }\n    return acc;\n  }, numbers[0]);\n}\n\n/* From a list of integers, return the maximum of all elements.\n  >>> max(1, 2, 3, 4, 5)\n  5\n  */\nconst max = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    if (acc > num) {\n      return num;\n    }\n    return acc;\n  }, numbers[0]);\n}\n\n/* From a list of strings, return the longest common substring of all strings.\n  >>> longestCommonSubstring('abc', 'bcd')\n  'b'\n  >>> longestCommonSubstring('abc', 'abc')\n  'abc'\n  >>> longestCommonSubstring('abc', 'bca')\n  ''\n  >>> longestCommonSubstring('ab', 'bcd')\n  ''\n  >>> longestCommonSubstring('ab', 'ab')\n  'ab'\n  */\nconst longestCommonSubstring = (string1, string2) => {\n  if (string1 === string2) {\n    return string1;\n  }\n\n  const substrings = [];\n\n  const getSubstring = (str, index, length) => {\n    if (index === length) {\n      return str;\n    }\n\n    return str.substring(index, index + length);\n  }\n\n  const split = (str, index, length) => {\n    const sub = getSubstring(str, index, length);\n    return sub.split('');\n  }\n\n  const str1 = split(string1, 0, string1.length);\n  const str2 = split(string2, 0, string2.length);\n\n  let i = 0;\n  let j = 0;\n\n  while (i < str1.length && j < str2.length) {\n    if (str1[i] === str2[j]) {\n      substrings.push(getSubstring(str1, i, 1));\n      i++;\n      j++;\n    } else if (str1[i] < str2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n\n  return substrings.reduce((acc, substr) => {\n    return acc + substr;\n  }, 0);\n}\n\n/*\n  From a list of strings, return a list of the longest substring that appears in all the strings.\n  >>> longestSubstring('abc', 'bcd')\n  ['ab', 'bc']\n  >>> longestSubstring('abc', 'abc')\n  ['abc']\n  >>> longestSubstring('abc', 'bca')\n  []\n  >>> longestSubstring('ab', 'bcd')\n  []\n  >>> longestSubstring('ab', 'ab')\n  ['ab']\n  */\nconst longestSubstring = (string1, string2) => {\n  if (string1 === string2) {\n    return [string1];\n  }\n\n  const allSubstrings = [];\n\n  const split = (str, index, length) => {\n    const sub = str.substring(index, index + length);\n    return sub.split('');\n  }\n\n  const str1 = split(string1, 0, string1.length);\n  const str2 = split(string2, 0, string2.length);\n\n  let i = 0;\n  let j = 0;\n\n  while (i < str1.length && j < str2.length) {\n    if (str1[i] === str2[j]) {\n      allSubstrings.push(str1[i]);\n      i++;\n      j++;\n    } else if (str1[i] < str2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n\n  return allSubstrings.reduce((acc, substr) => {\n    return acc + substr;\n  }, 0);\n}\n\nexport {\n  removeDuplicates,\n  sum,\n  min,\n  max,\n  longestCommonSubstring,\n  longestSubstring,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('').map((char) => {\n    const newChar = char.toUpperCase();\n    return newChar.toLowerCase();\n  }).join('');\n};\n\n/**\n  * Checks if a given string is a palindrome.\n  * @param {string} string\n  * @return {boolean}\n  * @example\n  * const isPalindrome = checkPalindrome('Hello world');\n  * isPalindrome; // True\n  * const isPalindrome = checkPalindrome('A man a plan a canal pan');\n  * isPalindrome; // True\n  * const isPalindrome = checkPalindrome('a man a plan a canal pan');\n  * isPalindrome; // False\n  */\nconst checkPalindrome = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return string === reversed;\n};\n\nexport default {\n  flipCase,\n  checkPalindrome,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((a, b) => a + b);\n};\n\n/*\n  Split a string into an array of strings\n  >>> split('a')\n  ['a']\n  >>> split('a b c')\n  ['a', 'b', 'c']\n  */\nconst split = (s) => s.split('');\n\n/*\n  Find the length of a string\n  >>> length('a')\n  1\n  >>> length('a b c')\n  3\n  */\nconst length = (s) => s.length;\n\n/*\n  Check if a string starts with a prefix\n  >>> startsWith('a', 'a')\n  true\n  >>> startsWith('a', 'b')\n  false\n  >>> startsWith('a', 'aa')\n  false\n  */\nconst startsWith = (s, prefix) => s.slice(0, prefix.length) === prefix;\n\n/*\n  Check if a string ends with a suffix\n  >>> endsWith('a', 'a')\n  true\n  >>> endsWith('a', 'b')\n  false\n  >>> endsWith('a', 'aa')\n  true\n  */\nconst endsWith = (s, suffix) => s.slice(-suffix.length) === suffix;\n\n/*\n  Check if a string contains a substring\n  >>> contains('a', 'a')\n  true\n  >>> contains('a', 'b')\n  false\n  >>> contains('a', 'aa')\n  true\n  */\nconst contains = (s, substring) => {\n  return s.indexOf(substring)!== -1;\n};\n\n/*\n  Find the index of a substring\n  >>> indexOf('a', 'a')\n  0\n  >>> indexOf('a', 'b')\n  -1\n  >>> indexOf('a', 'aa')\n  2\n  */\nconst indexOf = (s, substring) => {\n  return s.indexOf(substring);\n};\n\n/*\n  Return a substring from a string, optionally starting at a given index and ending at a given index\n  >>> substring('a', 0, 1)\n  'a'\n  >>> substring('a', 0, 3)\n  'aaa'\n  >>> substring('a', 1, 3)\n  'aa'\n  */\nconst substring = (s, start, end) => s.slice(start, end);\n\n/*\n  Return a substring, optionally starting at a given index and ending at the end of the string\n  >>> substring('a', 1, 3)\n  'aa'\n  >>> substring('a', 1, 'a')\n  ''\n  */\nconst substringEnd = (s, start) => s.slice(start);\n\n/*\n  Convert a string to camel case\n  >>> toCamelCase('fooBar')\n  'fooBar'\n  >>> toCamelCase('foo_bar')\n  'fooBar'\n  >>> toCamelCase('__foo_bar__')\n  '__FooBar__'\n  >>> toCamelCase('__foo_bar__')\n  '__FooBar__'\n  */\nconst toCamelCase = (s) => {\n  return s.replace(/(^|_)([a-z])/g, (match, $1, $2) => $1 + $2.toUpperCase());\n};\n\n/*\n  Convert a string to snake case\n  >>> toSnakeCase('fooBar')\n  'foo_bar'\n  >>> toSnakeCase('__foo_bar__')\n  '__foo__bar__'\n  >>> toSnakeCase('__foo_bar__')\n  '__foo__bar__'\n  */\nconst toSnakeCase = (s) => {\n  return s.replace(/(^|_)([A-Z])/g, (match, $1, $2) => $1 + '_' + $2.toLowerCase());\n};\n\n/*\n  Convert a string to title case\n  >>> toTitleCase('fooBar')\n  'Foo Bar'\n  >>> toTitleCase('__foo_bar__')\n  '__Foo Bar__'\n  >>> toTitleCase('__foo_bar__')\n  '__Foo Bar__'\n  */\nconst toTitleCase = (s) => {\n  return s.replace(/(^|_)([a-z])/g, (match, $1, $2) => $1 + $2.toUpperCase());\n};\n\n/*\n  Convert a string to camel case, with all underscores as delimiters\n  >>> toCamelCase('__foo_bar__')\n  '__FooBar__'\n  */\nconst toCamelCaseDelimited = (s) => s.replace(/(_|__)+/g, '_');\n\n/*\n  Convert a string to snake case, with all underscores as delimiters\n  >>> toSnakeCase('__foo_bar__')\n  '__foo__bar__'\n  */\nconst toSnakeCaseDelimited = (s) => s.replace(/(_|__)+/g, '_');\n\n/*\n  Convert a string to title case, with all underscores as delimiters\n  >>> toTitleCase('__foo_bar__')\n  '__Foo Bar__'\n  */\nconst toTitleCaseDelimited = (s) => s.replace(/(_|__)+/g,'');\n\n/*\n  Convert a string to title case, with all underscores as delimiters\n  >>> toTitleCase('__foo_bar__')\n  '__Foo Bar__'\n  */\nconst toTitleCaseDelimitedReverse = (s) => s.replace(/(_|__)+/g,'');\n\n/*\n  Convert a string to camel case, with all underscores as delimiters\n  >>> toCamelCase('__foo_bar__')\n  '__FooBar__'\n  */\nconst toCamelCaseDelimitedReverse = (s) => s.replace(/(_|__)+/g, '');\n\n/*\n  Convert a string to snake case, with all underscores as delimiters\n  >>> toSnakeCase('__foo_bar__')\n  '__foo__bar__'\n  */\nconst toSnakeCase"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/*\n  Returns an array of strings from an input list that\n  are greater than a given number.\n  >>> greaterThan(1, [1, 2, 3, 4])\n  [3, 4]\n  >>> greaterThan(1, [1, 2, 3, 4, 5])\n  [4, 5]\n  >>> greaterThan(2, [1, 2, 3, 4])\n  []\n  >>> greaterThan(1, [1])\n  []\n  */\nconst greaterThan = (number, list) => {\n  return list.filter(x => x > number);\n};\n\n/*\n  Returns an array of strings from an input list that\n  are less than a given number.\n  >>> lessThan(1, [1, 2, 3, 4])\n  []\n  >>> lessThan(1, [1, 2, 3, 4, 5])\n  [1, 2, 3]\n  >>> lessThan(2, [1, 2, 3, 4])\n  [1, 2]\n  >>> lessThan(1, [1])\n  [1]\n  */\nconst lessThan = (number, list) => {\n  return list.filter(x => x < number);\n};\n\n/*\n  Returns an array of strings from an input list that\n  are not equal to a given number.\n  >>> notEqual(1, [1, 2, 3, 4])\n  [2, 3]\n  >>> notEqual(1, [1, 2, 3, 4, 5])\n  [2, 3, 4, 5]\n  >>> notEqual(2, [1, 2, 3, 4])\n  [1, 2, 3]\n  >>> notEqual(1, [1])\n  [1]\n  */\nconst notEqual = (number, list) => {\n  return list.filter(x => x!== number);\n};\n\n/*\n  Returns an array of strings from an input list that\n  are equal to a given number.\n  >>> equal(1, [1, 2, 3, 4])\n  [1]\n  >>> equal(1, [1, 2, 3, 4, 5])\n  [1]\n  >>> equal(2, [1, 2, 3, 4])\n  [2]\n  >>> equal(1, [1])\n  [1]\n  */\nconst equal = (number, list) => {\n  return list.filter(x => x === number);\n};\n\n/*\n  Returns an array of strings from an input list that\n  contain a given number.\n  >>> contain(1, [1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> contain(1, [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> contain(2, [1, 2, 3, 4])\n  [2]\n  >>> contain(1, [1])\n  [1]\n  */\nconst contain = (number, list) => {\n  return list.filter(x => x.indexOf(number) >= 0);\n};\n\n/*\n  Returns an array of strings from an input list that\n  do not contain a given number.\n  >>> notContain(1, [1, 2, 3, 4])\n  [2, 3]\n  >>> notContain(1, [1, 2, 3, 4, 5])\n  [2, 3, 4, 5]\n  >>> notContain(2, [1, 2, 3, 4])\n  [1, 2, 3]\n  >>> notContain(1, [1])\n  [1]\n  */\nconst notContain = (number, list) => {\n  return list.filter(x => x.indexOf(number) < 0);\n};\n\nmodule.exports = {\n  filterByPrefix,\n  greaterThan,\n  lessThan,\n  notEqual,\n  equal,\n  contain,\n  notContain\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const positive = []\n  l.forEach(num => {\n    if (num > 0) {\n      positive.push(num)\n    }\n  })\n  return positive\n}\n\n/*\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, 9, 0, 123, 1]\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 0])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1]\n  */\nconst getNegative = (l) => {\n  const negative = []\n  l.forEach(num => {\n    if (num < 0) {\n      negative.push(num)\n    }\n  })\n  return negative\n}\n\nmodule.exports = {\n  getPositive,\n  getNegative\n}\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  const limit = Math.sqrt(n)\n  for (let i = 3; i <= limit; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> isPalindrome(123)\n  true\n  >>> isPalindrome(11221)\n  false\n  >>> isPalindrome(111221)\n  true\n  >>> isPalindrome(211221)\n  true\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome(12211221)\n  true\n  >>> isPalindrome(12211221)\n  false\n  >>> isPalindrome"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  // if (xs.length % 2!== 0) {\n  //   throw new Error(\"xs has uneven number of coefficients.\");\n  // }\n  // if (xs.length === 0) {\n  //   throw new Error(\"xs has zero number of coefficients.\");\n  // }\n  let poly = poly(xs, 1);\n  let zero = xs.length - 1;\n  while (Math.abs(poly) > 1e-10) {\n    let next = poly / xs[zero];\n    let x = -poly / next;\n    if (x!== x) {\n      // if (x!== x) {\n      //   throw new Error(\"x is not a real number.\");\n      // }\n      return x;\n    }\n    poly = poly - next * xs[zero];\n    zero--;\n  }\n  // if (zero!== xs.length - 1) {\n  //   throw new Error(\"findZero found more than one solution.\");\n  // }\n  return xs[zero];\n}\n\nconsole.log(findZero([1, 2, 3]));\n// <anonymous> found 1.0\nconsole.log(findZero([-6, 11, -6, 1]));\n// <anonymous> found -0.5\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const divisors = new Set([]);\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] % 3 === l[j] % 3) {\n        divisors.add(l[j]);\n      }\n    }\n  }\n  return [...l.filter(x =>!divisors.has(x))];\n};\n\n/*\n  Given a list l of positive integers, returns a list of the sum of the even-valued elements of l.\n  >>> evenSum([1, 2, 3, 4])\n  [6, 8, 9]\n  >>> evenSum([3, 5, 2, 9, 7])\n  [12, 15, 8]\n  >>> evenSum([1, 3, 3, 4, 7])\n  [8, 9, 10]\n  */\nconst evenSum = (l) => {\n  return [...l.filter((x) => x % 2 === 0)];\n};\n\n/*\n  Given a list l of positive integers, returns a list of the sum of the odd-valued elements of l.\n  >>> oddSum([1, 2, 3, 4])\n  [7, 9, 10]\n  >>> oddSum([3, 5, 2, 9, 7])\n  [15, 16, 14]\n  >>> oddSum([1, 3, 3, 4, 7])\n  [7, 9, 10]\n  */\nconst oddSum = (l) => {\n  return [...l.filter((x) => x % 2 === 1)];\n};\n\n/*\n  Given a list l of positive integers, returns a list of the sum of the even and odd-valued elements of l.\n  >>> sumOddEven([1, 2, 3, 4])\n  [7, 9, 10]\n  >>> sumOddEven([3, 5, 2, 9, 7])\n  [15, 16, 14]\n  >>> sumOddEven([1, 3, 3, 4, 7])\n  [7, 9, 10]\n  */\nconst sumOddEven = (l) => {\n  return [...l.filter((x) => x % 2 === 0 || x % 2 === 1)];\n};\n\n/*\n  Given a list l of positive integers, returns a list of the sum of the odd-valued elements of l that are divisible by 3.\n  >>> sumOddByThree([1, 2, 3, 4])\n  [7, 9, 10]\n  >>> sumOddByThree([3, 5, 2, 9, 7])\n  [15, 16, 14]\n  >>> sumOddByThree([1, 3, 3, 4, 7])\n  [7, 9, 10]\n  */\nconst sumOddByThree = (l) => {\n  return [...l.filter((x) => x % 3 === 1 || x % 3 === 2)];\n};\n\n/*\n  Given a list l of positive integers, returns a list of the sum of the odd-valued elements of l that are not divisible by 3.\n  >>> sumOddByNotThree([1, 2, 3, 4])\n  [6, 8, 9]\n  >>> sumOddByNotThree([3, 5, 2, 9, 7])\n  [12, 15, 8]\n  >>> sumOddByNotThree([1, 3, 3, 4, 7])\n  [6, 8, 9]\n  */\nconst sumOddByNotThree = (l) => {\n  return [...l.filter((x) => x % 3 === 0)];\n};\n\n/*\n  Given a list l of positive integers, returns a list of the sum of the even-valued elements of l that are not divisible by 3.\n  >>> sumEvenByNotThree([1, 2, 3, 4])\n  [6, 8, 9]\n  >>> sumEvenByNotThree([3, 5, 2, 9, 7])\n  [12, 15, 8]\n  >>> sumEvenByNotThree([1, 3, 3, 4, 7])\n  [6, 8, 9]\n  */\nconst sumEvenByNotThree = (l) => {\n  return [...l.filter((x) => x % 3 === 0)];\n};\n\n/*\n  Given a list l of positive integers, returns a list of the sum of the even-valued elements of l that are divisible by 3.\n  >>> sumEvenByThree([1, 2, 3, 4])\n  [6, 8, 9]\n  >>> sumEvenByThree([3, 5, 2, 9, 7])\n  [12, 15, 8]\n  >>> sumEvenByThree([1, 3, 3, 4, 7])\n  [6, 8, 9]\n  */\nconst sumEvenByThree = (l) => {\n  return [...l.filter((x) => x % 3 === 0)];\n};\n\nmodule.exports = {\n  sortThird,\n  evenSum,\n  oddSum,\n  sumOddByThree,\n  sumEvenByThree,\n  sumOddByNotThree,\n  sumEvenByNotThree\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const a = [];\n  for (let i = 0, len = l.length; i < len; i++) {\n    if (a.indexOf(l[i]) === -1) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\nexport default unique;<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const num = n;\n  const arr = [1, 2, 3, 5, 7, 11, 13];\n\n  for (let i = 0; i < arr.length; i++) {\n    if (num % arr[i] === 0) {\n      return 1;\n    }\n  }\n\n  return 0;\n};\n\n//console.log(fizzBuzz(12));\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  return l.slice().sort((a, b) => {\n    return a % 2 === b % 2? 0 : a - b;\n  });\n};\n\n/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the odd indicies was equal to the value of the odd indicies of l, but sort.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  return l.slice().sort((a, b) => {\n    return a % 2!== b % 2? 0 : a - b;\n  });\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEvenOdd = (l) => {\n  return l.slice().sort((a, b) => {\n    return a - b;\n  });\n};\n\n/*This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEvenOdd2 = (l) => {\n  return l.slice().sort((a, b) => {\n    return a - b;\n  });\n};\n\nconst sort = (l, sortBy) => {\n  return sortBy === 'odd'? sortEvenOdd2(l) : sortEven(l);\n};\n\nconst sortOdd = (l, sortBy) => {\n  return sortBy === 'odd'? sortOdd(l) : sortEven(l);\n};\n\nconst sortEven = (l, sortBy) => {\n  return sortBy === 'even'? sortEven(l) : sortOdd(l);\n};\n\nconst sortEvenOdd = (l, sortBy) => {\n  return sortBy === 'even'? sortEvenOdd(l) : sortEvenOdd2(l);\n};\n\nmodule.exports = {\n  sort,\n  sortOdd,\n  sortEven,\n  sortEvenOdd,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(Math.min((3 * i + 2), s.length), Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n Takes as input string encoding with encode_cyclic functions. Returns the string with encoding replaced by decoding. */ const replaceCyclic = (s) => {\n var encoding = encodeCyclic(s);\n var decoding = decodeCyclic(encoding);\n return decoding;\n}\n\n/*\n Returns a string which has been encoded by the cyclic encoding. */ const cyclicEncode = (s) => {\n var encoding = encodeCyclic(s);\n var groups = [];\n for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n  groups.push(s.slice(Math.min((3 * i + 1), s.length), Math.min((3 * i + 3), s.length)));\n }\n return groups.join('') + encoding;\n}\n\n/*\n Takes as input string and returns the string with cyclic encoding removed. */ const cyclicDecode = (s) => {\n var encoding = s.slice(0, s.length - decodeCyclic(s).length);\n return decodeCyclic(encoding);\n}\n\n/*\n Takes as input string and returns the string with cyclic encoding replaced. */ const cyclicReplace = (s) => {\n var encoding = cyclicEncode(s);\n var decoding = cyclicDecode(encoding);\n return decoding;\n}\n\n/*\n Takes as input string encoding with encode_cyclic functions. Returns the cyclic encoding of the string. */ const cyclicEncodeCyclic = (s) => {\n var encoding = encodeCyclic(s);\n var cyclicEncoding = cyclicEncode(encoding);\n return cyclicEncoding;\n}\n\n/*\n Takes as input string and returns the string with cyclic encoding removed. */ const cyclicDecodeCyclic = (s) => {\n var encoding = cyclicEncode(s);\n var decoding = cyclicDecode(encoding);\n return decoding;\n}\n\n/*\n Takes as input string and returns the string with cyclic encoding replaced. */ const cyclicReplaceCyclic = (s) => {\n var encoding = cyclicEncode(s);\n var decoding = cyclicDecode(encoding);\n return cyclicReplace(decoding);\n}\n\n/*\n Takes as input string and returns the string with cyclic encoding. */ const cyclicEncodeCyclicReplace = (s) => {\n var encoding = cyclicEncode(s);\n var cyclicEncoding = cyclicEncode(encoding);\n return cyclicEncoding;\n}\n\n/*\n Takes as input string and returns the string with cyclic encoding. */ const cyclicDecodeCyclicReplace = (s) => {\n var encoding = cyclicEncode(s);\n var decoding = cyclicDecode(encoding);\n return cyclicReplace(decoding);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let p = 2;\n  let q = 1;\n  while (p + q < n) {\n    p = p + q;\n    q = 2 * p - q;\n  }\n  return p;\n};\n\nconsole.log(primeFib(4));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let isZero = true;\n  let hasSame = false;\n  for (let i = 0; i < l.length - 2; i++) {\n    for (let j = i + 1; j < l.length - 1; j++) {\n      if (l[i] + l[j] === 0) {\n        if (hasSame) {\n          isZero = false;\n          break;\n        }\n        hasSame = true;\n      }\n    }\n  }\n  return isZero;\n};\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  const cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push(i);\n  }\n  return cars.reduce((prev, next) => {\n    const l = prev[0];\n    const r = next[0];\n    const d = prev[1] - next[1];\n    const m = Math.abs(d) - 1;\n    return (l > r? l - r : r - l) >= m? [r + 1, l - 1] : [l, r];\n  });\n}\n\nconst cars = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst cars2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\nconsole.log(cars2.reduce((prev, next) => {\n  return cars.reduce((prev, next) => {\n    return prev + next;\n  }, 0) === 0? prev : next;\n}, 0));\n\nconsole.log(cars2.reduce((prev, next) => {\n  return prev + next;\n}, 0));\n\nconst [a, b] = cars2;\nconsole.log(a, b);\n\nconst [a, b] = cars2.reduce((prev, next) => {\n  return prev + next;\n});\nconsole.log(a, b);\n\nconst [a, b] = cars2.reduce((prev, next) => {\n  return prev + next;\n}, 0);\nconsole.log(a, b);\n\nconst cars3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst cars4 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\nconsole.log(cars3.reduce((prev, next) => {\n  return prev + next;\n}, 0));\n\nconsole.log(cars4.reduce((prev, next) => {\n  return prev + next;\n}, 0));\n\nconst [a, b] = cars3.reduce((prev, next) => {\n  return prev + next;\n}, 0);\nconsole.log(a, b);\n\nconst [a, b] = cars4.reduce((prev, next) => {\n  return prev + next;\n}, 0);\nconsole.log(a, b);\n\ncars3.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars4.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\nconst cars5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst cars6 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\nconsole.log(cars5.reduce((prev, next) => {\n  return prev + next;\n}, 0));\n\nconsole.log(cars6.reduce((prev, next) => {\n  return prev + next;\n}, 0));\n\ncars5.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars6.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\nconst cars7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst cars8 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\ncars7.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars8.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars7.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars8.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars7.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars8.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars7.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars8.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars7.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars8.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars7.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars8.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars7.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars8.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars7.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars8.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars7.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars8.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars7.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars8.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars7.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars8.reduce((prev, next) => {\n  return prev + next;\n}, 0);\n\ncars7.reduce((prev, next) => {\n  return prev + next;\n},"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const n = l.length;\n  const r = new Array(n + 1);\n  for (let i = 0; i < n; i++) {\n    r[i + 1] = l[i] + 1;\n  }\n  return r;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const n = l.length;\n  const r = new Array(n + 1);\n  for (let i = 0; i < n; i++) {\n    r[i + 1] = l[i] + 1;\n  }\n  return r;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const lLength = l.length;\n  const lSum = l.reduce((previousSum, currentValue) => previousSum + currentValue, 0);\n  return lSum === 0? lLength - 1 === 0 : lSum === 0? lLength - 1!== 0 : false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n    if (x === 0) {\n        return '0';\n    }\n    if (x === 1) {\n        return '1';\n    }\n    if (x === -1) {\n        return '-1';\n    }\n    if (base === 2) {\n        return (x & 1? '1' : '0') + (x >> 1);\n    } else if (base === 8) {\n        return x.toString(2).substring(1);\n    } else if (base === 10) {\n        return x.toString(10);\n    } else {\n        return x.toString(base);\n    }\n}\n\n/*\nConvert a base 10 number to a base n number.\nn > 10.\nn < 2.\nbase is an integer.\n  >>> convertBase(10, 2, 3)\n  2\n  >>> convertBase(10, 2, 4)\n  3\n  >>> convertBase(10, 3, 2)\n  -2\n  >>> convertBase(10, -1, 2)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -1, 3)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, 0, 3)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, 1, 3)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, 2, -1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -2, -1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, 2, 1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, 2, 0)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, 2, -2)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, 1, -1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -1, -1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -1, 1)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -2, 2)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -2, -2)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -2, -3)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -2, 3)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -2, -4)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -2, 4)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -3, 2)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -3, -2)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -3, -3)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -3, -4)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -3, 4)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -4, 2)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -4, -2)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -4, -3)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -4, -4)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, -4, 4)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, 4, 2)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, 4, -2)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, 4, -3)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be > 0.\n  >>> convertBase(10, 4, -4)\n  Traceback (most recent call last):\n ...\n  ValueError: n must be"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return ((a * h) / 2);\n};\n\n/*\n  Given the length of sides of a triangle.\n  >>> triangleArea(4, 6)\n  30\n  */\nconst triangleArea2 = (a, h) => {\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(h, 2));\n};\n\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n};\n\nconst triangleArea4 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.PI / 2 - Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea5 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea6 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea7 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea8 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea9 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea10 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea11 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea12 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea13 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea14 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea15 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea16 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea17 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea18 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea19 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea20 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea21 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea22 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea23 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea24 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea25 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea26 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea27 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea28 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea29 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea30 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea31 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos((a / h) / Math.sqrt(2))));\n};\n\nconst triangleArea32 = (a, h) => {\n  return a * h / (2 * Math.sin(Math.acos"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    const a = 0, b = 1;\n    if (n < 2) return n;\n    return fib4(n - 2) + fib4(n - 1);\n}\n\n/*\n  The Fib5 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib5(0) -> 0 fib5(1) -> 0 fib5(2) -> 3 fib5(3) -> 1 fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n Please writes a functions to efficiently computing the n-th elements of the fib5 number sequences. Do not using recursions.\n  >>> fib5(5)\n  3\n  >>> fib5(6)\n  7\n  >>> fib5(7)\n  14\n  */\nconst fib5 = (n) => {\n    const a = 0, b = 1;\n    if (n < 3) return n;\n    return fib5(n - 3) + fib5(n - 2) + fib5(n - 1);\n}\n\n/*\n  The Fib6 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib6(0) -> 0 fib6(1) -> 0 fib6(2) -> 5 fib6(3) -> 1 fib6(4) -> 8 fib6(5) -> 13 fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5).\n Please writes a functions to efficiently computing the n-th elements of the fib6 number sequences. Do not using recursions.\n  >>> fib6(5)\n  5\n  >>> fib6(6)\n  13\n  >>> fib6(7)\n  24\n  >>> fib6(8)\n  33\n  >>> fib6(9)\n  51\n  */\nconst fib6 = (n) => {\n    const a = 0, b = 1;\n    if (n < 5) return n;\n    return fib6(n - 5) + fib6(n - 4) + fib6(n - 3) + fib6(n - 2) + fib6(n - 1);\n}\n\n/*\n  The Fib7 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib7(0) -> 0 fib7(1) -> 0 fib7(2) -> 13 fib7(3) -> 21 fib7(4) -> 34 fib7(5) -> 55 fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5).\n Please writes a functions to efficiently computing the n-th elements of the fib7 number sequences. Do not using recursions.\n  >>> fib7(5)\n  13\n  >>> fib7(6)\n  21\n  >>> fib7(7)\n  34\n  >>> fib7(8)\n  55\n  */\nconst fib7 = (n) => {\n    const a = 0, b = 1;\n    if (n < 7) return n;\n    return fib7(n - 7) + fib7(n - 6) + fib7(n - 5) + fib7(n - 4) + fib7(n - 3) + fib7(n - 2);\n}\n\n/*\n  The Fib8 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib8(0) -> 0 fib8(1) -> 0 fib8(2) -> 21 fib8(3) -> 34 fib8(4) -> 55 fib8(5) -> 83 fib8(6) -> 144 fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5).\n Please writes a functions to efficiently computing the n-th elements of the fib8 number sequences. Do not using recursions.\n  >>> fib8(5)\n  21\n  >>> fib8(6)\n  34\n  >>> fib8(7)\n  55\n  >>> fib8(8)\n  83\n  >>> fib8(9)\n  144\n  */\nconst fib8 = (n) => {\n    const a = 0, b = 1;\n    if (n < 8) return n;\n    return fib8(n - 8) + fib8(n - 7) + fib8(n - 6) + fib8(n - 5) + fib8(n - 4) + fib8(n - 3) + fib8(n - 2);\n}\n\n/*\n  The Fib9 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib9(0) -> 0 fib9(1) -> 0 fib9(2) -> 34 fib9(3) -> 70 fib9(4) -> 106 fib9(5) -> 158 fib9(6) -> 257 fib9(7) -> 449 fib9(n) -> fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib9 number sequences. Do not using recursions.\n  >>> fib9(5)\n  34\n  >>> fib9(6)\n  70\n  >>> fib9(7)\n  106\n  >>> fib9(8)\n  158\n  >>> fib9(9)\n  257\n  */\nconst fib9 = (n) => {\n    const a = 0, b = 1;\n    if (n < 9) return n;\n    return fib9(n - 9) + fib9(n - 8) + fib9(n - 7) +"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('Empty list')\n  }\n  if (l.length === 1) {\n    return l[0]\n  }\n  let half = l.length / 2\n  return (l[half - 1] + l[half]) / 2\n}\n\nexport default median\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let length = text.length\n    let mid = Math.floor((length - 1) / 2)\n    let a = text[mid]\n    let b = text[length - 1 - mid]\n    if (a === b) return true\n    return false\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('bbd')\n  false\n  >>> isPalindrome('a')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let length = text.length\n    if (length <= 1) return true\n    let mid = Math.floor((length - 1) / 2)\n    return text[mid] === text[length - mid]\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('bbd')\n  false\n  >>> isPalindrome('a')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let length = text.length\n    if (length <= 1) return true\n    let mid = Math.floor((length - 1) / 2)\n    let left = text[0]\n    let right = text[length - 1]\n    if (left === right) return true\n    return false\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('bbd')\n  false\n  >>> isPalindrome('a')\n  false\n  */\nconst isPalindrome4 = (text) => {\n    let length = text.length\n    if (length <= 1) return true\n    let mid = Math.floor((length - 1) / 2)\n    let left = text[0]\n    let right = text[length - 1]\n    if (left === right) return true\n    return false\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('bbd')\n  false\n  >>> isPalindrome('a')\n  false\n  */\nconst isPalindrome5 = (text) => {\n    let length = text.length\n    if (length <= 1) return true\n    let mid = Math.floor((length - 1) / 2)\n    let left = text[0]\n    let right = text[length - 1]\n    if (left === right) return true\n    return false\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('bbd')\n  false\n  >>> isPalindrome('a')\n  false\n  */\nconst isPalindrome6 = (text) => {\n    let length = text.length\n    if (length <= 1) return true\n    let mid = Math.floor((length - 1) / 2)\n    let left = text[0]\n    let right = text[length - 1]\n    if (left === right) return true\n    return false\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('bbd')\n  false\n  >>> isPalindrome('a')\n  false\n  */\nconst isPalindrome7 = (text) => {\n    let length = text.length\n    if (length <= 1) return true\n    let mid = Math.floor((length - 1) / 2)\n    let left = text[0]\n    let right = text[length - 1]\n    if (left === right) return true\n    return false\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('bbd')\n  false\n  >>> isPalindrome('a')\n  false\n  */\nconst isPalindrome8 = (text) => {\n    let length = text.length\n    if (length <= 1) return true\n    let mid = Math.floor((length - 1) / 2)\n    let left = text[0]\n    let right = text[length - 1]\n    if (left === right) return true\n    return false\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('bbd')\n  false\n  >>> isPalindrome('a')\n  false\n  */\nconst isPalindrome9 = (text) => {\n    let length = text.length\n    if (length <= 1) return true\n    let mid = Math.floor((length - 1) / 2)\n    let left = text[0]\n    let right = text[length - 1]\n    if (left === right) return true\n    return false\n}\n\n/*\n  Check if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('bbd')\n  false\n  >>> isPalindrome('a')\n  false\n  */\nconst isPalindrome10 = (text) => {\n    let length = text.length\n    if (length <= 1) return true\n    let mid = Math.floor((length - 1) / 2)\n    let left = text[0]\n    let right = text[length - 1]\n    if (left === right) return true\n    return false\n}\n\nmodule.exports = {\n    isPalindrome: isPalindrome,\n    isPalindrome2: isPalindrome2,\n    isPalindrome3: isPalindrome3,\n    isPalindrome4: isPalindrome4,\n    isPalindrome5: isPalindrome5,\n    isPalindrome6: isPalindrome6,\n    isPalindrome7: isPalindrome7,\n    isPalindrome8: isPalindrome8,\n    isPalindrome9: isPalindrome9,\n    isPalindrome10: isPalindrome10\n}\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const m = n % p;\n  if (m < 0) {\n    return p + m;\n  }\n  return m;\n};\n\n// Test case 1\nconst testCase1 = [2, 4, 3, 3, 1, 0, 7, 6, 5, 4, 4, 2, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); }\n\n//\n//\n//\n\n/*\n\n1.  The shift encoding works on a string as follows:\n   * it encodes every character with its position in the alphabet.\n   * It then returns the result by joining the results with a space.\n\n2.  The decoding works as follows:\n   * it decodes every character with its position in the alphabet.\n   * It then returns the result by joining the results with a space.\n\n*/\n\n//\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  if (!text) {\n    return text;\n  }\n  const len = text.length;\n  let i = 0;\n  let vowel = true;\n  for (; i < len; i++) {\n    if (vowel) {\n      if (text[i] === 'a' || text[i] === 'e' || text[i] === 'i' || text[i] === 'o' || text[i] === 'u') {\n        vowel = false;\n        continue;\n      }\n    } else {\n      if (text[i] === 'A' || text[i] === 'E' || text[i] === 'I' || text[i] === 'O' || text[i] === 'U') {\n        vowel = true;\n        continue;\n      }\n    }\n    break;\n  }\n  return text.slice(0, i) + text.slice(i + 1);\n};\n\nexport default removeVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const result = true;\n  const lLength = l.length;\n  const tLength = t.length;\n  if (lLength < tLength) {\n    return false;\n  }\n  for (let i = 0; i < lLength; i++) {\n    if (l[i] > t[i]) {\n      result = false;\n    }\n  }\n  return result;\n};\n\nconst main = () => {\n  const list = [1, 2, 4, 10];\n  const threshold = 5;\n\n  // console.log(belowThreshold(list, threshold)); // false\n  console.log(belowThreshold(list, threshold)); // true\n  // console.log(belowThreshold(list, threshold + 1)); // false\n  console.log(belowThreshold(list, threshold + 1)); // true\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  0\n  >>> divide(5, 7)\n  2\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*Take the square root of a number x\n  >>> squareRoot(9)\n  3\n  */\nconst squareRoot = x => {\n  return Math.sqrt(x);\n};\n\n/*Take the cube of a number x\n  >>> cube(9)\n  27\n  */\nconst cube = x => {\n  return x * x * x;\n};\n\n/*Take the power of a number x\n  >>> power(2, 3)\n  8\n  */\nconst power = x => {\n  return Math.pow(x, 3);\n};\n\n/*The greatest common divisor of two numbers x and y\n  >>> gcd(7, 10)\n  3\n  >>> gcd(7, 11)\n  7\n  */\nconst gcd = (x, y) => {\n  while (y) {\n    const t = x % y;\n    x = y;\n    y = t;\n  }\n  return x;\n};\n\n/*The least common multiple of two numbers x and y\n  >>> lcm(7, 10)\n  10\n  >>> lcm(7, 11)\n  21\n  */\nconst lcm = (x, y) => {\n  return x * y / gcd(x, y);\n};\n\n/*The sum of the digits of a number\n  >>> sumDigits(7)\n  3\n  >>> sumDigits(11)\n  4\n  >>> sumDigits(10)\n  10\n  */\nconst sumDigits = x => {\n  return x.toString().split('').reduce((sum, char) => {\n    return sum + parseInt(char);\n  }, 0);\n};\n\n/*The number of the factorial of a number\n  >>> factorial(7)\n  105\n  >>> factorial(9)\n  9\n  */\nconst factorial = x => {\n  return (x === 1? 1 : x * factorial(x - 1));\n};\n\n/*The number of permutations of a number\n  >>> permutations(3)\n  3\n  >>> permutations(2)\n  2\n  >>> permutations(5)\n  15\n  >>> permutations(10)\n  10!\n  */\nconst permutations = x => {\n  return factorial(x) / factorial(x - 1);\n};\n\n/*The number of combinations of a number\n  >>> combinations(3, 2)\n  2\n  >>> combinations(3, 3)\n  3\n  >>> combinations(2, 3)\n  1\n  >>> combinations(5, 3)\n  10\n  >>> combinations(10, 5)\n  10!\n  */\nconst combinations = (x, y) => {\n  return factorial(x) / factorial(y) / factorial(x - y);\n};\n\n/*The number of combinations of a number\n  >>> combinations(3, 2)\n  2\n  >>> combinations(3, 3)\n  3\n  >>> combinations(2, 3)\n  1\n  >>> combinations(5, 3)\n  10\n  >>> combinations(10, 5)\n  10!\n  */\nconst combinations = (x, y) => {\n  return factorial(x) / factorial(y) / factorial(x - y);\n};\n\n/*The number of combinations of a number\n  >>> combinations(3, 2)\n  2\n  >>> combinations(3, 3)\n  3\n  >>> combinations(2, 3)\n  1\n  >>> combinations(5, 3)\n  10\n  >>> combinations(10, 5)\n  10!\n  */\nconst combinations = (x, y) => {\n  return factorial(x) / factorial(y) / factorial(x - y);\n};\n\n/*The number of combinations of a number\n  >>> combinations(3, 2)\n  2\n  >>> combinations(3, 3)\n  3\n  >>> combinations(2, 3)\n  1\n  >>> combinations(5, 3)\n  10\n  >>> combinations(10, 5)\n  10!\n  */\nconst combinations = (x, y) => {\n  return factorial(x) / factorial(y) / factorial(x - y);\n};\n\n/*The number of combinations of a number\n  >>> combinations(3, 2)\n  2\n  >>> combinations(3, 3)\n  3\n  >>> combinations(2, 3)\n  1\n  >>> combinations(5, 3)\n  10\n  >>> combinations(10, 5)\n  10!\n  */\nconst combinations = (x, y) => {\n  return factorial(x) / factorial(y) / factorial(x - y);\n};\n\n/*The number of combinations of a number\n  >>> combinations(3, 2)\n  2\n  >>> combinations(3, 3)\n  3\n  >>> combinations(2, 3)\n  1\n  >>> combinations(5, 3)\n  10\n  >>> combinations(10, 5)\n  10!\n  */\nconst combinations = (x, y) => {\n  return factorial(x) / factorial(y) / factorial(x - y);\n};\n\n/*The number of combinations of a number\n  >>> combinations(3, 2)\n  2\n  >>> combinations(3, 3)\n  3\n  >>> combinations(2, 3)\n  1\n  >>> combinations(5, 3)\n  10\n  >>> combinations(10, 5)\n  10!\n  */\nconst combinations = (x, y) => {\n  return factorial(x) / factorial(y) / factorial(x - y);\n};\n\n/*The number of combinations of a number\n  >>> combinations(3, 2)\n  2\n  >>> combinations(3, 3)\n  3\n  >>> combinations(2, 3)\n  1\n  >>> combinations(5, 3)\n  10\n  "}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const s0_len = s0.length\n    const s1_len = s1.length\n    const min_len = Math.min(s0_len, s1_len)\n    let min_i = 0\n    let min_j = 0\n    let i = 0\n    let j = 0\n    while (i < min_len && j < min_len) {\n        if (s0.charAt(i) == s1.charAt(j)) {\n            i++\n            j++\n        } else {\n            if (i == s0_len) {\n                j += s1_len - s0_len\n            } else if (j == s1_len) {\n                i += s0_len - s1_len\n            } else {\n                if (s0.charAt(i) > s1.charAt(j)) {\n                    j += s1_len - s0_len\n                } else {\n                    i += s0_len - s1_len\n                }\n            }\n        }\n    }\n    return i == min_len\n}\n\nexport default sameChars\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1\n  } else {\n    return fib(n - 1) + fib(n - 2)\n  }\n}\n\nconsole.log(fib(10))\n\n/*\n  Exercise 2:\n  1. Find the n-th Fibonacci number.\n  2. Find the n-th Fibonacci number that is a power of 10.\n  3. Find the n-th Fibonacci number that is a power of 3.\n*/\nconst fibonacci = (n) => {\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 2\n  } else {\n    return fibonacci(n - 1) + fibonacci(n - 2)\n  }\n}\n\nconsole.log(fibonacci(10))\nconsole.log(fibonacci(10, true))\nconsole.log(fibonacci(3))\n\n/*\n  Exercise 3:\n  1. Write a function that takes a string and a number n,\n  and returns the string with n copies of the string.\n  2. Write a function that takes a string and an integer n,\n  and returns the string with n copies of the string.\n  3. Write a function that takes a string and a number n,\n  and returns the string with n copies of the string.\n*/\nconst replicate = (str, n) => {\n  const res = ''\n  for (let i = 0; i < n; i++) {\n    res += str\n  }\n  return res\n}\n\nconsole.log(replicate('ab', 2))\nconsole.log(replicate('ab', 3))\nconsole.log(replicate('ab', 4))\n\n/*\n  Exercise 4:\n  1. Find the string that contains the fewest digits.\n  2. Find the string that contains the most digits.\n*/\nconst getDigits = (str) => {\n  const arr = []\n  for (let i = 0; i < str.length; i++) {\n    arr.push(str[i])\n  }\n  arr.sort()\n  return arr\n}\n\nconsole.log(getDigits('abcdefghijklm'))\nconsole.log(getDigits('abcdefghijklmn'))\n\n/*\n  Exercise 5:\n  1. Find the n-th number in the Fibonacci sequence.\n  2. Find the n-th number in the Fibonacci sequence that is a power of 10.\n  3. Find the n-th number in the Fibonacci sequence that is a power of 3.\n*/\nconst fibonacci_ = (n) => {\n  const arr = []\n  if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 2\n  } else {\n    const fib1 = fibonacci_(n - 1)\n    const fib2 = fibonacci_(n - 2)\n    arr.push(fib1)\n    arr.push(fib2)\n    arr.sort()\n    return arr[n - 1]\n  }\n}\n\nconsole.log(fibonacci_(10))\nconsole.log(fibonacci_(10, true))\nconsole.log(fibonacci_(3))\n\n/*\n  Exercise 6:\n  1. Write a function that takes a string and a number n,\n  and returns the string with n copies of the string.\n  2. Write a function that takes a string and an integer n,\n  and returns the string with n copies of the string.\n  3. Write a function that takes a string and a number n,\n  and returns the string with n copies of the string.\n*/\nconst getRepetition = (str, n) => {\n  const res = ''\n  for (let i = 0; i < n; i++) {\n    res += str\n  }\n  return res\n}\n\nconsole.log(getRepetition('ab', 2))\nconsole.log(getRepetition('ab', 3))\nconsole.log(getRepetition('ab', 4))\n\n/*\n  Exercise 7:\n  1. Write a function that takes a number n and a string str,\n  and returns the string with the nth character of the string.\n  2. Write a function that takes a number n and a string str,\n  and returns the string with the nth character of the string.\n  3. Write a function that takes a number n and a string str,\n  and returns the string with the nth character of the string.\n*/\nconst getCharacter = (n, str) => {\n  const res = ''\n  if (n === 0) {\n    return str\n  } else if (n === 1) {\n    return str[0]\n  } else {\n    return getCharacter(n - 1, str[0]) + str[1]\n  }\n}\n\nconsole.log(getCharacter(3, 'abcdefg'))\nconsole.log(getCharacter(10, 'abcdefg'))\n\n/*\n  Exercise 8:\n  1. Write a function that takes a string and a number n,\n  and returns the string with the nth character of the string.\n  2. Write a function that takes a string and an integer n,\n  and returns the string with the nth character of the string.\n  3. Write a function that takes a string and a number n,\n  and returns the string with the nth character of the string.\n*/\nconst getStringCharacter = (str, n) => {\n  const res = ''\n  if (n === 0) {\n    return str\n  } else if (n === 1) {\n    return str[0]\n  } else {\n    return getStringCharacter(str.slice(1), n - 1) + str[0]\n  }\n}\n\nconsole.log(getStringCharacter('abcdefg', 3))\nconsole.log(getStringCharacter('abcdefg', 10))\n\n/*\n  Exercise 9:\n  1. Write a function that takes a string and a number n,\n  and returns the string with the nth character of the string.\n  2. Write a function that takes a string and an integer n,\n  and returns the string with the nth character of the string.\n  3. Write a function that takes a string and a number n,\n  and returns the"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = brackets.split(\"\").reverse().filter(e => e === \"<\").reverse();\n  let open = 0;\n  let i = stack.length;\n  let j = 0;\n\n  while (i > 0 && j < stack.length) {\n    if (stack[i] === \">\" && stack[j] === \"<\") {\n      open++;\n      i--;\n      j++;\n    } else if (stack[i] === \"<\" && stack[j] === \">\") {\n      if (open === 0) {\n        return false;\n      }\n      open--;\n      i--;\n      j++;\n    }\n  }\n  return (open === 0);\n};\n\n/*\n  Given a string, find the first appearance of a letter which is not followed by another letter.\n\n  Example:\n    input: '<>B<D>'\n    output: 'B'\n */\nconst firstOccuranceOfLetterWhichIsNotFollowedByNext = (str) => {\n  const occurenceOfFirstLetter = str.indexOf(\"<\");\n  const occurenceOfLastLetter = str.lastIndexOf(\">\");\n\n  if (occurenceOfFirstLetter === -1) {\n    return null;\n  }\n\n  if (occurenceOfFirstLetter!== occurenceOfLastLetter) {\n    return str.charAt(occurenceOfFirstLetter);\n  }\n  return null;\n};\n\n/*\n  Given a string, find the first appearance of a letter which is followed by another letter.\n\n  Example:\n    input: '<>B<D>'\n    output: 'D'\n */\nconst firstOccuranceOfLetterWhichIsFollowedByNext = (str) => {\n  const occurenceOfFirstLetter = str.indexOf(\"<\");\n  const occurenceOfNextLetter = str.indexOf(\">\");\n\n  if (occurenceOfNextLetter === -1) {\n    return null;\n  }\n\n  if (occurenceOfFirstLetter!== occurenceOfNextLetter) {\n    return str.charAt(occurenceOfNextLetter);\n  }\n  return null;\n};\n\n/*\n  Given a string, find the last appearance of a letter which is not followed by another letter.\n\n  Example:\n    input: '<>B<D>'\n    output: 'B'\n */\nconst lastOccuranceOfLetterWhichIsNotFollowedByNext = (str) => {\n  const occurenceOfFirstLetter = str.lastIndexOf(\">\");\n  const occurenceOfLastLetter = str.lastIndexOf(\"<\");\n\n  if (occurenceOfFirstLetter === -1) {\n    return null;\n  }\n\n  if (occurenceOfFirstLetter!== occurenceOfLastLetter) {\n    return str.charAt(occurenceOfFirstLetter);\n  }\n  return null;\n};\n\n/*\n  Given a string, find the last appearance of a letter which is followed by another letter.\n\n  Example:\n    input: '<>B<D>'\n    output: 'B'\n */\nconst lastOccuranceOfLetterWhichIsFollowedByNext = (str) => {\n  const occurenceOfFirstLetter = str.lastIndexOf(\"<\");\n  const occurenceOfNextLetter = str.lastIndexOf(\">\");\n\n  if (occurenceOfNextLetter === -1) {\n    return null;\n  }\n\n  if (occurenceOfFirstLetter!== occurenceOfNextLetter) {\n    return str.charAt(occurenceOfNextLetter);\n  }\n  return null;\n};\n\n/*\n  Given a string, find the first appearance of a letter which is followed by another letter.\n\n  Example:\n    input: '<>B<D>'\n    output: 'B'\n */\nconst firstOccuranceOfLetterWhichIsFollowedByNext = (str) => {\n  const occurenceOfFirstLetter = str.indexOf(\">\");\n  const occurenceOfNextLetter = str.indexOf(\"<\");\n\n  if (occurenceOfNextLetter === -1) {\n    return null;\n  }\n\n  if (occurenceOfFirstLetter!== occurenceOfNextLetter) {\n    return str.charAt(occurenceOfNextLetter);\n  }\n  return null;\n};\n\n/*\n  Given a string, find the last appearance of a letter which is not followed by another letter.\n\n  Example:\n    input: '<>B<D>'\n    output: 'D'\n */\nconst lastOccuranceOfLetterWhichIsNotFollowedByNext = (str) => {\n  const occurenceOfFirstLetter = str.lastIndexOf(\"<\");\n  const occurenceOfLastLetter = str.lastIndexOf(\">\");\n\n  if (occurenceOfFirstLetter === -1) {\n    return null;\n  }\n\n  if (occurenceOfFirstLetter!== occurenceOfLastLetter) {\n    return str.charAt(occurenceOfFirstLetter);\n  }\n  return null;\n};\n\n/*\n  Given a string, find the first appearance of a letter which is not followed by another letter.\n\n  Example:\n    input: '<>B<D>'\n    output: 'D'\n */\nconst firstOccuranceOfLetterWhichIsNotFollowedByNext = (str) => {\n  const occurenceOfFirstLetter = str.indexOf(\">\");\n  const occurenceOfNextLetter = str.indexOf(\"<\");\n\n  if (occurenceOfNextLetter === -1) {\n    return null;\n  }\n\n  if (occurenceOfFirstLetter!== occurenceOfNextLetter) {\n    return str.charAt(occurenceOfNextLetter);\n  }\n  return null;\n};\n\n/*\n  Given a string, find the first appearance of a letter which is followed by another letter.\n\n  Example:\n    input: '<>B<D>'\n    output: 'B'\n */\nconst firstOccuranceOfLetterWhichIsFollowedByNext = (str) => {\n  const occurenceOfFirstLetter ="}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let last = null\n  return l.every((n) => {\n    if (!last) {\n      last = n\n    } else {\n      if (last - n > 0) {\n        return false\n      } else if (last - n < 0) {\n        return true\n      }\n    }\n    last = n\n    return true\n  })\n}\n\n/*\n  Convert a given number into a string with a given number of digits\n  >>> numberToString(4.6, 2)\n  '4.60'\n  >>> numberToString(4.6, 3)\n  '4.600'\n  >>> numberToString(4.6, 5)\n  '4.60000'\n  >>> numberToString(4.6, 6)\n  '4.6000000'\n  >>> numberToString(4.6, 7)\n  '4.60000000'\n  >>> numberToString(4.6, 8)\n  '4.600000000'\n  >>> numberToString(4.6, 9)\n  '4.6000000000'\n  >>> numberToString(4.6, 10)\n  '4.60000000000'\n  >>> numberToString(4.6, 11)\n  '4.600000000000'\n  >>> numberToString(4.6, 12)\n  '4.6000000000000'\n  >>> numberToString(4.6, 13)\n  '4.60000000000000'\n  >>> numberToString(4.6, 14)\n  '4.600000000000000'\n  >>> numberToString(4.6, 15)\n  '4.6000000000000000'\n  >>> numberToString(4.6, 16)\n  '4.60000000000000000'\n  >>> numberToString(4.6, 17)\n  '4.600000000000000000'\n  >>> numberToString(4.6, 18)\n  '4.6000000000000000000'\n  >>> numberToString(4.6, 19)\n  '4.60000000000000000000'\n  >>> numberToString(4.6, 20)\n  '4.600000000000000000000'\n  >>> numberToString(4.6, 21)\n  '4.60000000000000000000'\n  >>> numberToString(4.6, 22)\n  '4.600000000000000000000'\n  >>> numberToString(4.6, 23)\n  '4.6000000000000000000000'\n  >>> numberToString(4.6, 24)\n  '4.60000000000000000000000'\n  >>> numberToString(4.6, 25)\n  '4.600000000000000000000000'\n  >>> numberToString(4.6, 26)\n  '4.6000000000000000000000000'\n  >>> numberToString(4.6, 27)\n  '4.60000000000000000000000000'\n  >>> numberToString(4.6, 28)\n  '4.600000000000000000000000000'\n  >>> numberToString(4.6, 29)\n  '4.6000000000000000000000000000'\n  >>> numberToString(4.6, 30)\n  '4.60000000000000000000000000000'\n  >>> numberToString(4.6, 31)\n  '4.600000000000000000000000000000'\n  >>> numberToString(4.6, 32)\n  '4.6000000000000000000000000000000'\n  >>> numberToString(4.6, 33)\n  '4.60000000000000000000000000000000'\n  >>> numberToString(4.6, 34)\n  '4.600000000000000000000000000000000'\n  >>> numberToString(4.6, 35)\n  '4.60000000000000000000000000000000000'\n  >>> numberToString(4.6, 36)\n  '4.600000000000000000000000000000000000'\n  >>> numberToString(4.6, 37)\n  '4.6000000000000000000000000000000000000'\n  >>> numberToString(4.6, 38)\n  '4.60000000000000000000000000000000000000'\n  >>> numberToString(4.6, 39)\n  '4.600000000000000000000000000000000000000'\n  >>> numberToString(4.6, 40)\n  '4.6000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 41)\n  '4.60000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 42)\n  '4.600000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 43)\n  '4.6000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 44)\n  '4.60000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 45)\n  '4.600000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 46)\n  '4.6000000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 47)\n  '4.60000000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 48)\n  '4.600000000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 49)\n  '4.6000000000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 50)\n  '4.600000000000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 51)\n  '4.6000000000000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 52)\n  '4.60000000000000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 53)\n  '4.600000000000000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 54)\n  '4.6000000000000000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 55)\n  '4.60000000000000000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 56)\n  '4.600000000000000000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 57)\n  '4.6000000000000000000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 58)\n  '4.60000000000000000000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 59)\n  '4.600000000000000000000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 60)\n  '4.6000000000000000000000000000000000000000000000000000000000000'\n  >>> numberToString(4.6, 61)\n  '4.600000000000000000000000000000000"}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const result = [];\n  const l1Length = l1.length;\n  const l2Length = l2.length;\n  const i = 0;\n  const j = 0;\n  while (i < l1Length && j < l2Length) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n    let divisors = [];\n    let i = 2;\n\n    // Iterate through all divisors\n    while (n % i === 0) {\n        divisors.push(i);\n        i += 1;\n    }\n\n    // Return the largest divisor\n    return Math.max(...divisors);\n};\n\n// __________________________________________\n// Test Code: Use below lines to test your solution\n\n/* console.log(largestPrimeFactor(2048));\nconsole.log(largestPrimeFactor(13195));\nconsole.log(largestPrimeFactor(8192));\nconsole.log(largestPrimeFactor(9));\nconsole.log(largestPrimeFactor(16)); */\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN2 = (n) => {\n  let sum = 1\n  for (let i = 1; i <= n; i++) {\n    sum *= i\n  }\n  return sum\n}\n\n/*\n  let sumToN = (n) => {\n    return sumToN(n)\n  }\n  */\n\n// console.log(sumToN(30))\n// console.log(sumToN2(30))\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [],\n    length = brackets.length\n  for (let i = 0; i < length; i++) {\n    stack.push(brackets[i])\n  }\n  let stackSize = stack.length\n  let open = 0,\n    close = 0\n  for (let i = 0; i < stackSize; i++) {\n    if (stack[i] === '(') {\n      open++\n    } else if (stack[i] === ')') {\n      close++\n    }\n  }\n  return open === close\n}\n\nconst brackets = \"()[]{}<>\".split(\"\")\n\nconsole.log(correctBracketing(\"()[]{}<>\"))\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (!Array.isArray(xs) || xs.length < 2) {\n    return undefined\n  }\n  return xs.reduce((acc, x, i) => {\n    if (i < xs.length - 1) {\n      return [acc[0] + x * acc[1], acc[2] + x * acc[3]]\n    } else {\n      return [acc[0] + x * acc[1], acc[2]]\n    }\n  }, [0, 1])\n}\n\nmodule.exports = {\n  polynomial,\n  derivative,\n  polynomialDerivative\n}\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  const fib = fibfib(n - 2) + fibfib(n - 1) + fibfib(n - 3);\n  return fib;\n};\n\n/*\n   >>> fibfib(2)\n   0\n   >>> fibfib(10)\n   55\n   >>> fibfib(12)\n   144\n   */\nconsole.log(fibfib(10));\nconsole.log(fibfib(12));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const len = s.length\n  let count = 0\n  for (let i = 0; i < len; i += 1) {\n    const letter = s[i]\n    if (vowels.indexOf(letter) > -1) {\n      count += 1\n    }\n  }\n  if (s.slice(0, 1) === 'y') {\n    count += 1\n  }\n  if (s.slice(len - 1, len) === 'y') {\n    count += 1\n  }\n  return count\n}\n\nmodule.exports = vowelsCount\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const length = x.length;\n  if (shift >= length) return x.reverse();\n  return x.slice(0, shift) + x.slice(shift + 1);\n};\n\nexport {circularShift};\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let n = s.length\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += s.charCodeAt(i) - 48\n  }\n  return sum\n}\n\nconsole.log(digitSum(\"Hello\"))\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  let res = s.split('');\n  let n_res = parseInt(n);\n  let total_n = 0;\n  let count = 0;\n  while (total_n < n_res) {\n    if (res[count] === 'a') {\n      total_n++;\n    }\n    count++;\n  }\n  return total_n;\n};\n\n// TEST\n\nconst fruits = [\"apple\", \"orange\", \"mango\"];\n\n// TEST\n\nconsole.log(fruitDistribution(\"5 apple and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apple and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apple and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apple and 1 oranges\", 120));\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  arr.sort((a, b) => a - b)\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      res.push([arr[i], i])\n    }\n  }\n  return res.length? res : []\n}\n\n// TESTS\n[\n  [[2, 3, 4], [2, 1]],\n  [[1, 2, 3], [2, 1]],\n  [[0, 1, 2, 3, 4], [0, 1]],\n  [[5, 0, 3, 0, 4, 2], [0, 1]],\n  [[], []],\n  [[1, 2, 3, 4], [2, 1]],\n  [[5, 0, 3, 0, 4, 2], [0, 1]],\n  [[1, 2, 3, 4, 5, 6], [1, 2]],\n].forEach(([nodes, expected]) => {\n  console.log(`Test: ${nodes} => ${expected}`)\n  const actual = pluck(nodes)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual:   ${actual}`)\n  assert.deepEqual(actual, expected)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let [a, b, c] = lst.sort((a, b) => b - a);\n  for (let i = a; i <= b; i++) {\n    if (lst[i] === i) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n    return lst.sort((a, b) => a - b);\n}\n\nconsole.log(strangeSortList([1, 2, 3, 4]));\nconsole.log(strangeSortList([5, 5, 5, 5]));\nconsole.log(strangeSortList([]));\n\n/*\n  Gives a list of numbers, return list in reversed order.\n  Examples:\n  reversed([1, 2, 3, 4]) == [4, 3, 2, 1]\n  reversed([]) == []\n  */\nconst reversed = (lst) => {\n    return lst.reverse();\n}\n\nconsole.log(reversed([1, 2, 3, 4]));\nconsole.log(reversed([]));\n\n/*\n  Gives a list of numbers, return list in random order.\n  Examples:\n  random([1, 2, 3, 4]) == [4, 3, 2, 1]\n  random([]) == []\n  */\nconst random = (lst) => {\n    return lst.sort(() => {\n        return Math.random() - 0.5;\n    });\n}\n\nconsole.log(random([1, 2, 3, 4]));\nconsole.log(random([]));\n\n/*\n  Gives a list of numbers, return list in shuffled order.\n  Examples:\n  shuffle([1, 2, 3, 4]) == [1, 2, 3, 4]\n  shuffle([]) == []\n  */\nconst shuffle = (lst) => {\n    return lst.sort().reverse();\n}\n\nconsole.log(shuffle([1, 2, 3, 4]));\nconsole.log(shuffle([]));\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    let ab = (a + b) / 2,\n        bc = (b + c) / 2,\n        ac = (a + c) / 2;\n    if (ab > c && ab > b && ab > ac) return ab * (b + c) / 2;\n    if (bc > a && bc > b && bc > ac) return bc * (a + c) / 2;\n    if (ac > a && ac > b && ac > bc) return ac * (b + c) / 2;\n    return -1;\n}\n\nconst isValidTriangle = (a, b, c) => {\n    let ab = (a + b) / 2,\n        bc = (b + c) / 2,\n        ac = (a + c) / 2;\n    return (ab > c && ab > b && ab > ac) || (bc > a && bc > b && bc > ac) || (ac > a && ac > b && ac > bc);\n}\n\nmodule.exports = {\n    triangleArea,\n    isValidTriangle\n}<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const isBalanced = sum => sum <= w;\n  const isPalindromic = (q, i, j) => q[i] === q[j];\n  return q.reduce(\n    (isBalanced, x) => isBalanced(x) && isPalindromic(q, 0, q.length - 1),\n    true\n  );\n};\n\n/*\n  Reads the first line of the file 'fileName' and returns it's content.\n\n  Example:\n  fileName = 'exampleFile.txt'\n  readFile(fileName) ➜ 'hello world'\n  # 'hello world' is the content of the file.\n  */\nconst readFile = (fileName) => new Promise((resolve, reject) => {\n  fs.readFile(fileName, 'utf-8', (err, data) => {\n    if (err) return reject(err);\n    resolve(data);\n  });\n});\n\n/*\n  Write a function that prints all the characters that will flied a palindromic list.\n\n  Example:\n  printAll(readFile('exampleFile.txt')) ➜ 'lo'\n  # 'lo' is the character that will flied a palindromic list.\n  */\nconst printAll = (q) => {\n  const isPalindromic = (q, i, j) => q[i] === q[j];\n  const palindromic = (q, i, j) => q[i] === q[j];\n  const sum = (q, i, j) => q[i] + q[j];\n  let first = q[0];\n  let last = q[q.length - 1];\n  let min = Number.MAX_VALUE;\n  for (let i = 1; i < q.length; i++) {\n    if (isPalindromic(q, i, i - 1) && sum(q, i, i) <= min) {\n      first = q[i];\n      min = sum(q, i, i);\n    }\n  }\n  for (let j = q.length - 2; j >= 0; j--) {\n    if (isPalindromic(q, j + 1, j) && sum(q, j, j) <= min) {\n      last = q[j];\n      min = sum(q, j, j);\n    }\n  }\n  console.log(first +'' + last);\n};\n\n/*\n  Write a function that finds all the characters that will flied a palindromic list.\n\n  Example:\n  findAll(readFile('exampleFile.txt')) ➜ 'lo'\n  # 'lo' is the character that will flied a palindromic list.\n  */\nconst findAll = (q) => {\n  const isPalindromic = (q, i, j) => q[i] === q[j];\n  const palindromic = (q, i, j) => q[i] === q[j];\n  const sum = (q, i, j) => q[i] + q[j];\n  const min = Number.MAX_VALUE;\n  const first = q[0];\n  const last = q[q.length - 1];\n  for (let i = 1; i < q.length; i++) {\n    if (isPalindromic(q, i, i - 1) && sum(q, i, i) <= min) {\n      first = q[i];\n      min = sum(q, i, i);\n    }\n  }\n  for (let j = q.length - 2; j >= 0; j--) {\n    if (isPalindromic(q, j + 1, j) && sum(q, j, j) <= min) {\n      last = q[j];\n      min = sum(q, j, j);\n    }\n  }\n  return first +'' + last;\n};\n\n/*\n  Read a file 'fileName' and return the character that will flied a palindromic list.\n\n  Example:\n  findFirst(readFile('exampleFile.txt')) ➜ 'l'\n  # 'l' is the character that will flied a palindromic list.\n  */\nconst findFirst = (q) => {\n  const isPalindromic = (q, i, j) => q[i] === q[j];\n  const palindromic = (q, i, j) => q[i] === q[j];\n  const sum = (q, i, j) => q[i] + q[j];\n  const min = Number.MAX_VALUE;\n  let first = q[0];\n  for (let i = 1; i < q.length; i++) {\n    if (isPalindromic(q, i, i - 1) && sum(q, i, i) <= min) {\n      first = q[i];\n      min = sum(q, i, i);\n    }\n  }\n  return first;\n};\n\n/*\n  Read a file 'fileName' and return the character that will flied a palindromic list.\n\n  Example:\n  findLast(readFile('exampleFile.txt')) ➜ 'r'\n  # 'r' is the character that will flied a palindromic list.\n  */\nconst findLast = (q) => {\n  const isPalindromic = (q, i, j) => q[i] === q[j];\n  const palindromic = (q"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let newArray = arr.slice();\n    let target = newArray.splice(i, 1, newArray.splice(arr.length - 1 - i, 1)[0]);\n    for (let j = 0; j < target.length; j++) {\n      newArray[j] = target[j];\n    }\n    let isPalindrome = newArray.join('') === newArray.reverse().join('');\n    if (isPalindrome) {\n      count++;\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0) {\n    return lst2;\n  }\n  if (lst2.length === 0) {\n    return lst1;\n  }\n  if (lst1.length!== lst2.length) {\n    return [...lst1,...lst2];\n  }\n  return [...lst1];\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const aPrime = primeNumbers(a);\n  for (let i = 0; i < aPrime.length - 1; i++) {\n    if (aPrime[i] + aPrime[i + 1] > a) return false;\n  }\n  return true;\n};\n\nconst isPrime = (a) => {\n  if (a % 2 === 0) return false;\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) return false;\n  }\n  return true;\n};\n\nexport {\n  primeNumbers,\n  isPrime,\n  isMultiplyPrime,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      if (x === n ** i) return true;\n    }\n    i++;\n  }\n  return false;\n}\n\nconst isSimplePower = (x, n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      if (x === n ** i) return true;\n    }\n    i++;\n  }\n  return false;\n}\n\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) {\n    return true\n  }\n  if (a === 1) {\n    return false\n  }\n  if (a === 2) {\n    return true\n  }\n  if (a % 6 === 0) {\n    return false\n  }\n  return iscube(Math.pow(a, 1 / 3))\n}\n\nconsole.log(iscube(12))\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  //console.log(num);\n  let result = 0;\n  let str = num.toLowerCase();\n  for (let i = 0; i < str.length; i++) {\n    if (isPrime(str[i])) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  //console.log(num);\n  let n = num;\n  let s = 0;\n  while (n > 1) {\n    if (n % 2 === 0) {\n      n = n / 2;\n    } else {\n      s++;\n      if (s === 2) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconst main = () => {\n  let num = \"ABED1A33\";\n  console.log(hexKey(num));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n\n  for (let i = 0; i < decimal.length; i++) {\n    if (decimal[i] === '1') {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n  }\n\n  binary = 'db' + binary;\n\n  return binary;\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = '';\n  let binaryArray = binary.split('');\n\n  for (let i = binaryArray.length - 1; i >= 0; i--) {\n    if (binaryArray[i] === '1') {\n      decimal += '1';\n    } else {\n      decimal += '0';\n    }\n  }\n\n  return decimal;\n};\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomString = (stringLength) => {\n  let chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n  let result = '';\n\n  for (let i = 0; i < stringLength; i++) {\n    result += chars[getRandomInt(0, chars.length - 1)];\n  }\n\n  return result;\n};\n\nconst isPalindrome = (number) => {\n  let numberArray = number.toString().split('');\n  let reversedNumberArray = numberArray.reverse().join('');\n\n  return numberArray.toString() === reversedNumberArray;\n};\n\nconst getRandomInts = (numberOfInts) => {\n  let ints = [];\n  let max = 10;\n\n  while (ints.length < numberOfInts) {\n    ints.push(getRandomInt(0, max));\n    max--;\n  }\n\n  return ints;\n};\n\nmodule.exports = {\n  decimalToBinary,\n  binaryToDecimal,\n  getRandomInt,\n  getRandomString,\n  isPalindrome,\n  getRandomInts\n};\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let index = 0\n  let prev = ''\n  let res = true\n  let count = 0\n  while (index < s.length) {\n    if (s.charAt(index) == prev) {\n      count += 1\n    } else {\n      if (count >= 3) {\n        res = false\n        break\n      }\n      count = 1\n    }\n    prev = s.charAt(index)\n    index += 1\n  }\n  return res\n}\n\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('xyy'))\nconsole.log(isHappy('adb'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradeArray = []\n  let result = []\n\n  for (let i = 0; i < grades.length; i++) {\n    const grade = grades[i]\n    const letterGrade = (grade - 4.0) / 3.0\n    const letterGradeString = letterGrade.toFixed(2)\n    const letterGradeNumber = parseFloat(letterGrade.toFixed(2))\n\n    if (letterGradeNumber >= 0.0) {\n      gradeArray.push(`${letterGradeString}+`)\n    } else if (letterGradeNumber < 0.0) {\n      gradeArray.push(`${letterGradeString}`)\n    } else {\n      gradeArray.push(`${letterGradeString}-`)\n    }\n  }\n\n  for (let i = 0; i < grades.length; i++) {\n    const grade = grades[i]\n    const letterGrade = (grade - 4.0) / 3.0\n    const letterGradeString = letterGrade.toFixed(2)\n    const letterGradeNumber = parseFloat(letterGrade.toFixed(2))\n\n    if (letterGradeNumber >= 3.0) {\n      result.push(`${gradeArray[i]}`)\n    } else if (letterGradeNumber < 3.0) {\n      result.push(`${gradeArray[i]}`)\n    } else {\n      result.push(`${gradeArray[i]}`)\n    }\n  }\n  return result\n}\n\nmodule.exports = numericalLetterGrade\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if(!string) return false;\n  var len = string.length;\n  for(var i = 2; i < len; i++) {\n    if(string.indexOf(string.charAt(i)) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\nWrite a functions that returns the length of a string without the trailing spaces\n  Examples\n  removeTrailingSpaces('hello world') == 'hello world'\n  removeTrailingSpaces('hello  world') == 'hello world'\n  removeTrailingSpaces('hello world') == 'hello world'\n  */\nconst removeTrailingSpaces = (string) => {\n  if(!string) return false;\n  var len = string.length;\n  var last = string.charAt(len - 1);\n  if(last ==='') {\n    string = string.slice(0, len - 1);\n  }\n  return string;\n};\n\n/*\nWrite a functions that returns the number of the odd or even numbers in a string\n  Examples\n  oddNumbers('Hello world') == 3\n  oddNumbers('1234') == 2\n  oddNumbers('Hello') == 0\n  */\nconst oddNumbers = (string) => {\n  if(!string) return false;\n  var len = string.length;\n  var counter = 0;\n  for(var i = 0; i < len; i++) {\n    if(string.charAt(i) % 2 === 0) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\nmodule.exports = {\n  primeLength,\n  removeTrailingSpaces,\n  oddNumbers\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  const s = n.toString();\n  const m = (n.toString()).match(/\\d+/);\n  let s1 = 0;\n  let s2 = 0;\n  for (let i = 1; i < m.length + 1; i++) {\n    if (m[i - 1] > 1) {\n      s1 += m[i - 1];\n    }\n    if (m[i] > 1) {\n      s2 += m[i];\n    }\n  }\n  return s1 + s2;\n};\n\nconst allOneEnds = (n) => {\n  const s = n.toString();\n  const m = (n.toString()).match(/\\d+/);\n  let s1 = 0;\n  let s2 = 0;\n  for (let i = 1; i < m.length + 1; i++) {\n    if (m[i - 1] > 1) {\n      s1 += m[i - 1];\n    }\n    if (m[i] > 1) {\n      s2 += m[i];\n    }\n  }\n  return s1 + s2;\n};\n\nconst allStarts = (n) => {\n  const s = n.toString();\n  const m = (n.toString()).match(/\\d+/);\n  let s1 = 0;\n  let s2 = 0;\n  for (let i = 1; i < m.length + 1; i++) {\n    if (m[i - 1] > 1) {\n      s1 += m[i - 1];\n    }\n    if (m[i] > 1) {\n      s2 += m[i];\n    }\n  }\n  return s1 + s2;\n};\n\nconst allStartsOneEnds = (n) => {\n  const s = n.toString();\n  const m = (n.toString()).match(/\\d+/);\n  let s1 = 0;\n  let s2 = 0;\n  for (let i = 1; i < m.length + 1; i++) {\n    if (m[i - 1] > 1) {\n      s1 += m[i - 1];\n    }\n    if (m[i] > 1) {\n      s2 += m[i];\n    }\n  }\n  return s1 + s2;\n};\n\nconst allStartsOneEndsStarts = (n) => {\n  const s = n.toString();\n  const m = (n.toString()).match(/\\d+/);\n  let s1 = 0;\n  let s2 = 0;\n  for (let i = 1; i < m.length + 1; i++) {\n    if (m[i - 1] > 1) {\n      s1 += m[i - 1];\n    }\n    if (m[i] > 1) {\n      s2 += m[i];\n    }\n  }\n  return s1 + s2;\n};\n\nconst startsAll = (n) => {\n  const s = n.toString();\n  const m = (n.toString()).match(/\\d+/);\n  let s1 = 0;\n  let s2 = 0;\n  for (let i = 1; i < m.length + 1; i++) {\n    if (m[i - 1] > 1) {\n      s1 += m[i - 1];\n    }\n    if (m[i] > 1) {\n      s2 += m[i];\n    }\n  }\n  return s1 + s2;\n};\n\nconst startsOneEnds = (n) => {\n  const s = n.toString();\n  const m = (n.toString()).match(/\\d+/);\n  let s1 = 0;\n  let s2 = 0;\n  for (let i = 1; i < m.length + 1; i++) {\n    if (m[i - 1] > 1) {\n      s1 += m[i - 1];\n    }\n    if (m[i] > 1) {\n      s2 += m[i];\n    }\n  }\n  return s1 + s2;\n};\n\nconst startsOneEndsStarts = (n) => {\n  const s = n.toString();\n  const m = (n.toString()).match(/\\d+/);\n  let s1 = 0;\n  let s2 = 0;\n  for (let i = 1; i < m.length + 1; i++) {\n    if (m[i - 1] > 1) {\n      s1 += m[i - 1];\n    }\n    if (m[i] > 1) {\n      s2 += m[i];\n    }\n  }\n  return s1 + s2;\n};\n\nconsole.log(startsOneEnds(8));\nconsole.log(allOneEnds(8));\nconsole.log(allStarts(8));\nconsole.log(allStartsOneEnds(8));\nconsole.log(startsAll(8));\nconsole.log(startsOneEndsStarts(8));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let s = \"\";\n  for (let i = 0; i <= N; i++) {\n    let j = N - i;\n    s += (i === 0)? \"0\" : (i === 1)? \"1\" : (j === 0)? \"0\" : `${i}${j}`;\n  }\n  return s;\n};\n\nmodule.exports = solve;<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let evens = 0;\n  for (let i = 1; i < lst.length; i += 2) {\n    evens += lst[i];\n  }\n  return evens;\n};\n\nexport { add };\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const s = s.split(' ')\n  s.sort((a, b) => a.length - b.length)\n  return s.join(' ')\n}\n\n/*\n  Shuffle a function that takes a string and returns an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replaced by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  shuffle('Hi') returns 'Hiw'\n  shuffle('hello') returns 'hleo'\n  shuffle('Hello World!!!') returns 'lleo'\n  */\nconst shuffle = (s) => {\n  const s = s.split(' ')\n  s.sort((a, b) => a.length - b.length)\n  return s.join(' ')\n}\n\n// const words = ['hello', 'world', 'Hi', 'world', 'world', 'world', 'Hi', 'hello', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', 'world', '"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n    let result = [];\n    for (let row = 0; row < lst.length; row++) {\n        let currentRow = lst[row];\n        let currentRowLength = currentRow.length;\n        let currentRowCoordinates = [];\n        for (let column = 0; column < currentRowLength; column++) {\n            let currentRowCoordinate = currentRow[column];\n            if (x === currentRowCoordinate) {\n                currentRowCoordinates.push(column);\n            }\n        }\n        currentRowCoordinates.sort((a, b) => a - b);\n        result.push(currentRowCoordinates);\n    }\n    return result;\n};\n\n/*\n  Returns all the rows in the list. Sorts coordinates in each row, then rows by ascends order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [[0,0], [1,4], [1,0], [2,5], [2,0]]\n  getRows([]) == []\n  getRows([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]]) == [[0,0], [1,4], [1,0], [2,5], [2,0]]\n*/\nconst getRows = (lst) => {\n    let result = [];\n    for (let row = 0; row < lst.length; row++) {\n        let currentRow = lst[row];\n        currentRow.sort((a, b) => a - b);\n        result.push(currentRow);\n    }\n    return result;\n};\n\n/*\n  Returns all the columns in the list. Sorts coordinates in each row, then rows by descends order.\n  \n  Examples:\n  getColumns([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ]) == [[0,0], [1,0], [1,1], [2,1], [2,2], [2,3]]\n  getColumns([]) == []\n  getColumns([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]]) == [[0,0], [1,0], [1,1], [2,1], [2,2], [2,3]]\n*/\nconst getColumns = (lst) => {\n    let result = [];\n    for (let row = 0; row < lst.length; row++) {\n        let currentRow = lst[row];\n        currentRow.sort((a, b) => b - a);\n        result.push(currentRow);\n    }\n    return result;\n};\n\nmodule.exports = {\n    getRow,\n    getRows,\n    getColumns\n};\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sorted = [];\n\n  for (let i = 0; i < array.length; i++) {\n    sorted.push(array[i]);\n  }\n\n  sorted.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n\n  return sorted;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  if(s === null || typeof s!=='string'){\n    return null;\n  }\n  let a = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let b = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let c = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let d = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let e = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let f = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let g = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let h = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let i = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let j = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let k = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let l = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let m = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let n = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let o = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let p = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let q = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let r = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let t = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let u = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let v = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let w = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let x = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let y = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let z = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let i2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let j2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let k2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let l2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let m2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let n2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let o2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let p2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let q2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let r2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let s2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let t2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let u2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let v2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let w2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let x2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let y2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let z2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  let alphabet = '';\n  let array = '';\n  let s2 = s;\n  let x = (x + 1) % 26;\n  for (let i = 0; i < s.length; i++) {\n    alphabet = a[(x + i) % 26] + b[(x + i) % 26] + c[(x + i) % 26] + d[(x + i) % 26] + e[(x + i) % 26] + f[(x + i) % 26] + g[(x + i) % 26] + h[(x + i) % 26] + i[(x + i) % 26] + j[(x + i) % 26] + k[(x + i) % 26] + l[(x + i) % 26] + m[(x + i) % 26] + n[(x + i) % 26] + o[(x + i) % 26] + p[(x + i) % 26] + q[(x + i) % 26] + r[(x + i) % 26] + s[(x + i) % 26] + t[(x + i) % 26] + u[(x + i) % 26] + v[(x + i) % 26] + w[(x + i) % 26] + x[(x + i) % 26] + y[(x + i) % 26] + z[(x + i) % 26];\n    array = alphabet.split('');\n    for (let i = 0; i < array.length; i++) {\n      s2 = s2.replace(array[i], array[i2]);\n      i2 = (i2 + 1) %"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  if (lst.length === 0) return null;\n  let min = Number.MAX_SAFE_INTEGER;\n  let index = -1;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n      index = i;\n    }\n  }\n  if (index === -1) return null;\n  return lst[index + 1];\n};\n\n// console.log(nextSmallest([1, 2, 3, 4, 5]));\n// console.log(nextSmallest([5, 1, 4, 3, 2]));\n// console.log(nextSmallest([]));\n// console.log(nextSmallest([1, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    let isBored = false;\n    for (let i = 0; i < S.length; i++) {\n        if (S.charAt(i) === 'I') {\n            isBored = true;\n            break;\n        }\n    }\n    return isBored;\n};\n\n//export function isBored(S) {\n//    let isBored = false;\n//    for (let i = 0; i < S.length; i++) {\n//        if (S.charAt(i) === 'I') {\n//            isBored = true;\n//            break;\n//        }\n//    }\n//    return isBored;\n//}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y + z === x * y + x * z + y * z\n}\n\nexport default anyInt\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const alphabet = {\n    'a': 'v',\n    'b': 'v',\n    'c': 'v',\n    'd': 'v',\n    'e': 'v',\n    'f': 'v',\n    'g': 'v',\n    'h': 'v',\n    'i': 'v',\n    'j': 'v',\n    'k': 'v',\n    'l': 'v',\n   'm': 'v',\n    'n': 'v',\n    'o': 'v',\n    'p': 'v',\n    'q': 'v',\n    'r': 'v',\n   's': 'v',\n    't': 'v',\n    'u': 'v',\n    'v': 'v',\n    'w': 'v',\n    'x': 'v',\n    'y': 'v',\n    'z': 'v',\n    'A': 'A',\n    'B': 'B',\n    'C': 'C',\n    'D': 'D',\n    'E': 'E',\n    'F': 'F',\n    'G': 'G',\n    'H': 'H',\n    'I': 'I',\n    'J': 'J',\n    'K': 'K',\n    'L': 'L',\n    'M': 'M',\n    'N': 'N',\n    'O': 'O',\n    'P': 'P',\n    'Q': 'Q',\n    'R': 'R',\n    'S': 'S',\n    'T': 'T',\n    'U': 'U',\n    'V': 'V',\n    'W': 'W',\n    'X': 'X',\n    'Y': 'Y',\n    'Z': 'Z',\n   '':''\n  };\n\n  let result = message.toLowerCase().replace(/[aeiou]/g, (match) => {\n    const vowel = alphabet[match];\n    const nextVowel = alphabet[match + 1];\n    return vowel === nextVowel? vowel : nextVowel;\n  });\n\n  return result;\n};\n\nconst decode = (message) => {\n  const alphabet = {\n    'v': 'a',\n    'A': 'a',\n    'V': 'a',\n    'W': 'a',\n    'X': 'a',\n    'Y': 'a',\n    'Z': 'a',\n   '':''\n  };\n\n  let result = message.toLowerCase().replace(/[a-z]/g, (match) => {\n    const vowel = alphabet[match];\n    const nextVowel = alphabet[match + 1];\n    return vowel === nextVowel? vowel : nextVowel;\n  });\n\n  return result;\n};\n\nmodule.exports = {\n  encode,\n  decode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const arr = lst.reduce((a, b) => {\n    a += b;\n    return a;\n  }, 0);\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const d = arr[i];\n    if (d > 0) {\n      sum += d;\n    }\n  }\n  return sum;\n}\n\nconst p0 = () => {\n  const arr = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3];\n  return skjkasdkd(arr);\n}\n\nconst p1 = () => {\n  const arr = [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1];\n  return skjkasdkd(arr);\n}\n\nconst p2 = () => {\n  const arr = [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3];\n  return skjkasdkd(arr);\n}\n\nconst p3 = () => {\n  const arr = [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6];\n  return skjkasdkd(arr);\n}\n\nconst p4 = () => {\n  const arr = [0, 81, 12, 3, 1, 21];\n  return skjkasdkd(arr);\n}\n\nconst p5 = () => {\n  const arr = [0, 8, 1, 2, 1, 7];\n  return skjkasdkd(arr);\n}\n\n/*\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  let bool = true\n  if (keys.length === 0) {\n    return false\n  }\n  keys.forEach((key) => {\n    if (typeof dict[key]!== \"string\") {\n      bool = false\n    } else if (dict[key].toUpperCase()!== dict[key]) {\n      bool = false\n    }\n  })\n  return bool\n}\n\n/*\n  Gives a dictionary, return trueer if all keys was strings in lower cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseSensitive = (dict) => {\n  let keys = Object.keys(dict)\n  let bool = true\n  if (keys.length === 0) {\n    return false\n  }\n  keys.forEach((key) => {\n    if (typeof dict[key]!== \"string\") {\n      bool = false\n    } else if (dict[key].toUpperCase()!== dict[key]) {\n      bool = false\n    }\n  })\n  return bool\n}\n\nexport { checkDictCase, checkDictCaseSensitive }\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const count = [0]\n  const primes = [2]\n  for (let i = 3; i < Math.pow(2, n); i += 2) {\n    let countPrime = 0\n    let isPrime = true\n    for (let j = 0; j < primes.length; j++) {\n      if (i % primes[j] === 0) {\n        isPrime = false\n        break\n      }\n    }\n    if (isPrime) {\n      countPrime++\n      count.push(countPrime)\n    }\n  }\n  return count\n}\n\nconst countUpTo10 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo100 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo1000 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo10000 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo100000 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo1000000 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo10000000 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo100000000 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo1000000000 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo10000000000 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo100000000000 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo1000000000000 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo10000000000000 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo100000000000000 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo1000000000000000 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo10000000000000000 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo100000000000000000 = (n) => {\n  const count = [0]\n  for (let i = 1; i <= n; i++) {\n    count.push(countUpTo(i)[countUpTo(i - 1).length - 1])\n  }\n  return count\n}\n\nconst countUpTo1000000000000000000 = (n) => {\n  const count = [0]\n  for (let i = 1;"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0) {\n    return 0;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  let a_unit = a % 10;\n  let b_unit = b % 10;\n  if (a_unit === b_unit) {\n    return a * b;\n  }\n  if (a_unit > b_unit) {\n    return a * multiply(a / 10, b);\n  }\n  return multiply(a, b / 10);\n};\n\nconst multiply = (a, b) => {\n  if (b === 0) {\n    return 0;\n  }\n  if (a === 0) {\n    return 0;\n  }\n  if (a === 1) {\n    return b;\n  }\n  if (b === 1) {\n    return a;\n  }\n  if (a === b) {\n    return a;\n  }\n  if (a === -b) {\n    return -a;\n  }\n  if (a === -b + 1) {\n    return -a + b;\n  }\n  if (b === -a + 1) {\n    return b - a;\n  }\n  if (a === -b - 1) {\n    return a + b;\n  }\n  if (b === -a - 1) {\n    return b + a;\n  }\n  if (a === b - 1) {\n    return a + b;\n  }\n  if (b === -a + 2) {\n    return a + b;\n  }\n  if (a === b + 1) {\n    return a - b;\n  }\n  if (b === -a + 2) {\n    return b + a;\n  }\n  if (a === b + 2) {\n    return a - b;\n  }\n  if (b === -a - 2) {\n    return b + a;\n  }\n  if (a === b - 2) {\n    return a + b;\n  }\n  if (b === -a - 2) {\n    return b + a;\n  }\n  if (a === b - 3) {\n    return a + b;\n  }\n  if (b === -a - 3) {\n    return b + a;\n  }\n  if (a === b + 3) {\n    return a - b;\n  }\n  if (b === -a + 3) {\n    return b + a;\n  }\n  if (a === b + 3) {\n    return a - b;\n  }\n  if (b === -a + 4) {\n    return b + a;\n  }\n  if (a === b + 4) {\n    return a - b;\n  }\n  if (b === -a + 5) {\n    return b + a;\n  }\n  if (a === b + 5) {\n    return a - b;\n  }\n  if (b === -a + 6) {\n    return b + a;\n  }\n  if (a === b + 6) {\n    return a - b;\n  }\n  if (b === -a + 7) {\n    return b + a;\n  }\n  if (a === b + 7) {\n    return a - b;\n  }\n  if (b === -a + 8) {\n    return b + a;\n  }\n  if (a === b + 8) {\n    return a - b;\n  }\n  if (b === -a + 9) {\n    return b + a;\n  }\n  if (a === b + 9) {\n    return a - b;\n  }\n  if (b === -a + 10) {\n    return b + a;\n  }\n  if (a === b + 10) {\n    return a - b;\n  }\n  if (b === -a + 11) {\n    return b + a;\n  }\n  if (a === b + 11) {\n    return a - b;\n  }\n  if (b === -a + 12) {\n    return b + a;\n  }\n  if (a === b + 12) {\n    return a - b;\n  }\n  if (b === -a + 13) {\n    return b + a;\n  }\n  if (a === b + 13) {\n    return a - b;\n  }\n  if (b === -a + 14) {\n    return b + a;\n  }\n  if (a === b + 14) {\n    return a - b;\n  }\n  if (b === -a + 15) {\n    return b + a;\n  }\n  if (a === b + 15) {\n    return a - b;\n  }\n  if (b === -a + 16) {\n    return b + a;\n  }\n  if (a === b + 16) {\n    return a - b;\n  }\n  if (b === -a + 17) {\n    return b + a;\n  }\n  if (a === b + 17) {\n    return a - b;\n  }\n  if (b === -a + 18) {\n    return b + a;\n  }\n  if (a === b + 18) {\n    return a - b;\n  }\n  if (b === -a + 19) {\n    return b + a;\n  }\n  if (a === b + 19) {\n    return a - b;\n  }\n  if (b === -a + 20) {\n    return b + a;\n  }\n  if (a === b + 20) {\n    return a - b;\n  }\n  if (b === -a + 21) {\n    return b + a;\n  }\n  if (a === b + 21) {\n    return a - b;\n  }\n  if (b === -a + 22) {\n    return b"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  return s.split('').map((c) => {\n    if (c.toUpperCase() === c) return 1;\n    return 0;\n  }).reduce((acc, x) => acc + x, 0);\n};\n\nconsole.log(countUpper('aBCdEf'));\nconsole.log(countUpper('abcdefg'));\nconsole.log(countUpper('dBBE'));\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const intPart = parseInt(value, 10);\n  const fractionPart = value.slice(intPart.toString().length);\n  const remainder = parseFloat(fractionPart);\n\n  if (remainder === 0) {\n    return intPart;\n  }\n\n  const absRemainder = Math.abs(remainder);\n  const nearestInt = intPart + (remainder > 0? 1 : -1);\n\n  return nearestInt;\n};\n\n/*\n  Create a functions that returns the closest integer to a number.\n  Example: closestInteger(20) -> 18.\n  */\nconst closestInteger2 = (value) => {\n  const intPart = parseInt(value, 10);\n  const fractionPart = value.slice(intPart.toString().length);\n  const remainder = parseFloat(fractionPart);\n\n  if (remainder === 0) {\n    return intPart;\n  }\n\n  const absRemainder = Math.abs(remainder);\n  const nearestInt = intPart + (remainder > 0? 1 : -1);\n\n  return nearestInt;\n};\n\nconst closestInteger3 = (value) => {\n  const intPart = parseInt(value, 10);\n  const fractionPart = value.slice(intPart.toString().length);\n  const remainder = parseFloat(fractionPart);\n\n  if (remainder === 0) {\n    return intPart;\n  }\n\n  const nearestInt = intPart + (remainder > 0? 1 : -1);\n\n  return nearestInt;\n};\n\nconst closestInteger4 = (value) => {\n  const intPart = parseInt(value, 10);\n  const fractionPart = value.slice(intPart.toString().length);\n  const remainder = parseFloat(fractionPart);\n\n  if (remainder === 0) {\n    return intPart;\n  }\n\n  const nearestInt = intPart + (remainder > 0? 1 : -1);\n\n  return nearestInt;\n};\n\nconst closestInteger5 = (value) => {\n  const intPart = parseInt(value, 10);\n  const fractionPart = value.slice(intPart.toString().length);\n  const remainder = parseFloat(fractionPart);\n\n  if (remainder === 0) {\n    return intPart;\n  }\n\n  const nearestInt = intPart + (remainder > 0? 1 : -1);\n\n  return nearestInt;\n};\n\nconst closestInteger6 = (value) => {\n  const intPart = parseInt(value, 10);\n  const fractionPart = value.slice(intPart.toString().length);\n  const remainder = parseFloat(fractionPart);\n\n  if (remainder === 0) {\n    return intPart;\n  }\n\n  const nearestInt = intPart + (remainder > 0? 1 : -1);\n\n  return nearestInt;\n};\n\nconst closestInteger7 = (value) => {\n  const intPart = parseInt(value, 10);\n  const fractionPart = value.slice(intPart.toString().length);\n  const remainder = parseFloat(fractionPart);\n\n  if (remainder === 0) {\n    return intPart;\n  }\n\n  const nearestInt = intPart + (remainder > 0? 1 : -1);\n\n  return nearestInt;\n};\n\nconst closestInteger8 = (value) => {\n  const intPart = parseInt(value, 10);\n  const fractionPart = value.slice(intPart.toString().length);\n  const remainder = parseFloat(fractionPart);\n\n  if (remainder === 0) {\n    return intPart;\n  }\n\n  const nearestInt = intPart + (remainder > 0? 1 : -1);\n\n  return nearestInt;\n};\n\nconst closestInteger9 = (value) => {\n  const intPart = parseInt(value, 10);\n  const fractionPart = value.slice(intPart.toString().length);\n  const remainder = parseFloat(fractionPart);\n\n  if (remainder === 0) {\n    return intPart;\n  }\n\n  const nearestInt = intPart + (remainder > 0? 1 : -1);\n\n  return nearestInt;\n};\n\nconst closestInteger10 = (value) => {\n  const intPart = parseInt(value, 10);\n  const fractionPart = value.slice(intPart.toString().length);\n  const remainder = parseFloat(fractionPart);\n\n  if (remainder === 0) {\n    return intPart;\n  }\n\n  const nearestInt = intPart + (remainder > 0? 1 : -1);\n\n  return nearestInt;\n};\n\nexport {\n  closestInteger,\n  closestInteger2,\n  closestInteger3,\n  closestInteger4,\n  closestInteger5,\n  closestInteger6,\n  closestInteger7,\n  closestInteger8,\n  closestInteger9,\n  closestInteger10\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const ans = [];\n  for (let i = 1; i <= n; i++) {\n    ans.push(n - i);\n  }\n  return ans;\n};\n\nexport default makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let result = [];\n  let current = \"\";\n  let index = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == \",\" || s[i] == \" \") {\n      result.push(current);\n      current = \"\";\n    } else {\n      current += s[i];\n    }\n  }\n  return result;\n}\n\n/*\n  Given an array of string, return the length of the array.\n  \n  For example:\n  wordsArray(\"Hello, world\") == 8\n  wordsArray(\"Hello, world, hello\") == 12\n  wordsArray(\"\") == 0\n  wordsArray(null) == 0\n  wordsArray(undefined) == 0\n  */\nconst wordsArray = (s) => {\n  return s.length;\n}\n\n/*\n  Given an array of number, return the sum of all the numbers in the array.\n  \n  For example:\n  wordsArray([1, 2, 3, 4]) == 10\n  wordsArray([1, 2, 3, 4, 5]) == 15\n  wordsArray([]) == 0\n  wordsArray(null) == 0\n  wordsArray(undefined) == 0\n  */\nconst wordsArraySum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i];\n  }\n  return sum;\n}\n\n/*\n  Given an array of number, return the sum of the squares of all the numbers in the array.\n  \n  For example:\n  wordsArray([1, 2, 3, 4]) == 100\n  wordsArray([1, 2, 3, 4, 5]) == 325\n  wordsArray([]) == 0\n  wordsArray(null) == 0\n  wordsArray(undefined) == 0\n  */\nconst wordsArraySumOfSquares = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += Math.pow(s[i], 2);\n  }\n  return sum;\n}\n\n/*\n  Given an array of strings, return the length of the longest common prefix.\n  \n  For example:\n  wordsArray(\"Hello, world\") == 8\n  wordsArray(\"Hello, world, hello\") == 12\n  wordsArray(\"\") == 0\n  wordsArray(null) == 0\n  wordsArray(undefined) == 0\n  */\nconst wordsArrayLongestCommonPrefix = (s) => {\n  let prefix = \"\";\n  let index = 0;\n  let length = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == s[index]) {\n      length += 1;\n    } else {\n      prefix = s[index];\n      length = 1;\n    }\n    index += 1;\n  }\n  return prefix;\n}\n\n/*\n  Given an array of strings, return the length of the longest common suffix.\n  \n  For example:\n  wordsArray(\"Hello, world\") == 8\n  wordsArray(\"Hello, world, hello\") == 12\n  wordsArray(\"\") == 0\n  wordsArray(null) == 0\n  wordsArray(undefined) == 0\n  */\nconst wordsArrayLongestCommonSuffix = (s) => {\n  let suffix = \"\";\n  let index = s.length - 1;\n  let length = 0;\n  for (let i = s.length - 1; i >= 0; i--) {\n    if (s[i] == s[index]) {\n      length += 1;\n    } else {\n      suffix = s[index];\n      length = 1;\n    }\n    index -= 1;\n  }\n  return suffix;\n}\n\n/*\n  Given an array of strings, return the average of the lengths of the longest common prefix and suffix.\n  \n  For example:\n  wordsArray(\"Hello, world\") == 8\n  wordsArray(\"Hello, world, hello\") == 12\n  wordsArray(\"\") == 0\n  wordsArray(null) == 0\n  wordsArray(undefined) == 0\n  */\nconst wordsArrayAverageLength = (s) => {\n  let prefix = wordsArrayLongestCommonPrefix(s);\n  let suffix = wordsArrayLongestCommonSuffix(s);\n  return (prefix + suffix) / 2;\n}\n\n/*\n  Given an array of strings, return the number of strings in the array.\n  \n  For example:\n  wordsArray(\"Hello, world\") == 1\n  wordsArray(\"Hello, world, hello\") == 2\n  wordsArray(\"Hello, world, hello, world\") == 3\n  wordsArray(\"Hello, world, hello, world, hello\") == 4\n  wordsArray(\"\") == 0\n  wordsArray(null) == 0\n  wordsArray(undefined) == 0\n  */\nconst wordsArrayCount = (s) => {\n  return s.length;\n}\n\n/*\n  Given an array of strings, return the number of strings in the array.\n  \n  For example:\n  wordsArray(\"Hello, world\") == 1\n  wordsArray(\"Hello, world, hello\") == 2\n  wordsArray(\"Hello, world, hello, world\") == 3\n  wordsArray(\"Hello, world, hello, world, hello\") == 4\n  wordsArray(\"\") == 0\n  wordsArray(null) == 0\n  wordsArray(undefined) == 0\n  */\nconst wordsArrayCountUnique = (s) => {\n  let counter = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.indexOf(s[i]) == -1) {\n      counter += 1;\n    }\n  }\n  return counter;\n}\n\nmodule.exports = {\n  wordsArray,\n  wordsArraySum,\n  wordsArraySumOfSquares,\n  wordsArrayLongestCommonPrefix,\n  wordsArrayLongestCommonSuffix,\n  wordsArrayAverageLength,\n  wordsArrayCount"}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) return x;\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n  let a = x;\n  let b = y;\n  let max = x;\n  while (a <= b) {\n    let mid = (a + b) / 2;\n    let count = 0;\n    for (let i = 0; i < mid; i++) {\n      if (mid % i === 0) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n    }\n    if (count === b) {\n      return mid;\n    }\n    if (count === max) {\n      return max;\n    }\n    if (count > max) {\n      b = mid - 1;\n    } else {\n      a = mid + 1;\n    }\n  }\n  return -1;\n};\n\nexport default chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const a = new Array(m + 1).fill(0)\n  for (let i = n; i <= m; i++) {\n    a[i - n] += 1\n  }\n  let result = a.reduce((a, b) => a + b) / (m - n + 1)\n  return result.toString(2)\n}\n\nexport default roundedAvg\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let i = 1\n  const result = []\n  while (i < x) {\n    const digit = x % 10\n    if (digit % 2 === 0) {\n      result.push(digit)\n    }\n    x = Math.floor(x / 10)\n    i++\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = ['Zero', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  const result = []\n  let i = 0\n  let j = 0\n  while (i < arr.length) {\n    let num = arr[i]\n    let len = names.indexOf(num)\n    result.push(names[len])\n    i++\n  }\n  return result.reverse()\n}\n\nmodule.exports = byLength\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const l = [1];\n  let i = 2;\n  let prev = 1;\n  while (i <= n) {\n    l.push(prev);\n    prev = prev * i;\n    i++;\n  }\n  return l;\n};\n\n/* This is the function that returns the factorial of a number. */\nconst factorial = (n) => {\n  return f(n)\n};\n\nmodule.exports = factorial;\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let max = 0\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j >= 1) {\n      if (isPalindrome(i) && j % 2 === 0) {\n        max++\n      }\n      j--\n    }\n  }\n  return (max, (max / 2) + 1)\n}\n\nlet test = [\n  [2, 1],\n  [3, 2],\n  [6, 4],\n  [10, 6],\n  [15, 10],\n  [20, 14],\n  [30, 16],\n  [36, 18],\n  [45, 21],\n  [48, 22],\n  [55, 23],\n  [60, 24],\n  [63, 25],\n  [66, 26],\n  [72, 27],\n  [77, 29],\n  [81, 30],\n  [84, 31],\n  [90, 32],\n  [93, 33],\n  [96, 34],\n  [102, 35],\n  [108, 36],\n  [114, 37],\n  [120, 38],\n  [125, 39],\n  [132, 40],\n  [138, 41],\n  [145, 42],\n  [151, 43],\n  [156, 44],\n  [162, 45],\n  [168, 46],\n  [176, 47],\n  [185, 48],\n  [190, 49],\n  [200, 50],\n  [210, 51],\n  [220, 52],\n  [230, 53],\n  [240, 54],\n  [250, 55],\n  [255, 56],\n  [262, 57],\n  [268, 58],\n  [275, 59],\n  [282, 60],\n  [290, 61],\n  [300, 62],\n  [305, 63],\n  [312, 64],\n  [320, 65],\n  [327, 66],\n  [335, 67],\n  [344, 68],\n  [353, 69],\n  [362, 70],\n  [370, 71],\n  [380, 72],\n  [390, 73],\n  [401, 74],\n  [420, 75],\n  [430, 76],\n  [443, 77],\n  [455, 78],\n  [467, 79],\n  [478, 80],\n  [490, 81],\n  [500, 82],\n  [510, 83],\n  [522, 84],\n  [536, 85],\n  [548, 86],\n  [559, 87],\n  [564, 88],\n  [571, 89],\n  [578, 90],\n  [585, 91],\n  [592, 92],\n  [598, 93],\n  [606, 94],\n  [615, 95],\n  [624, 96],\n  [633, 97],\n  [642, 98],\n  [652, 99],\n  [661, 100],\n  [672, 101],\n  [682, 102],\n  [691, 103],\n  [702, 104],\n  [712, 105],\n  [721, 106],\n  [732, 107],\n  [741, 108],\n  [753, 109],\n  [764, 110],\n  [775, 111],\n  [785, 112],\n  [797, 113],\n  [809, 114],\n  [821, 115],\n  [834, 116],\n  [848, 117],\n  [858, 118],\n  [869, 119],\n  [880, 120],\n  [891, 121],\n  [902, 122],\n  [913, 123],\n  [924, 124],\n  [936, 125],\n  [947, 126],\n  [958, 127],\n  [969, 128],\n  [980, 129],\n  [991, 130],\n  [1002, 131],\n  [1013, 132],\n  [1024, 133],\n  [1035, 134],\n  [1046, 135],\n  [1057, 136],\n  [1068, 137],\n  [1079, 138],\n  [1090, 139],\n  [1098, 140],\n  [1109, 141],\n  [1119, 142],\n  [1130, 143],\n  [1140, 144],\n  [1151, 145],\n  [1162, 146],\n  [1174, 147],\n  [1185, 148],\n  [1196, 149],\n  [1208, 150],\n  [1219, 151],\n  [1230, 152],\n  [1240, 153],\n  [1252, 154],\n  [1264, 155],\n  [1276, 156],\n  [1287, 157],\n  [1298, 158],\n  [1310, 159],\n  [1320, 160],\n  [1331, 161],\n  [1342, 162],\n  [1352, 163],\n  [1362, 164],\n  [1372, 165],\n  [1383, 166],\n  [1394, 167],\n  [1406, 168],\n  [1417, 169],\n  [1428, 170],\n  [1438, 171],\n  [1449, 172],\n  [1460, 173],\n  [1471, 174],\n  [1482, 175],\n  [1492, 176],\n  [1503, 177],\n  [1514, 178],\n  [1525, 179],\n  [15"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n};\n\nexport { countNums };\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let min = arr[0];\n  let max = arr[arr.length - 1];\n  let sorted = true;\n  \n  while (sorted) {\n    let k = (Math.random() * (max - min) + min) | 0;\n    sorted = moveOneBall(arr.slice(1).concat(k));\n  }\n  return sorted;\n}\n\nmoveOneBall([3, 4, 5, 1, 2]); //=> true<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return 'NO';\n  let lst1Start = 0, lst1End = lst1.length - 1;\n  let lst2Start = 0, lst2End = lst2.length - 1;\n  while (lst1Start <= lst1End && lst2Start <= lst2End) {\n    if (lst1[lst1Start]!== lst2[lst2Start]) return 'NO';\n    if (lst1[lst1Start] % 2!== 0) return 'NO';\n    lst1Start += 1;\n    lst2Start += 1;\n  }\n  return 'YES';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const str = test.split(\" \")\n  const hist = {}\n  for (let i = 0; i < str.length; i++) {\n    hist[str[i].toLowerCase()] = hist[str[i].toLowerCase()] || 0\n    hist[str[i].toLowerCase()]++\n  }\n  const dict = Object.keys(hist)\n  const arr = []\n  for (let i = 0; i < dict.length; i++) {\n    arr.push(hist[dict[i]])\n  }\n  return dict\n}\n\n/*\nGiven a string, return the string reversed.\n\nExample:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"\") == \"\"\n*/\nconst reverse = (test) => {\n  return test.split(\"\").reverse().join(\"\")\n}\n\n/*\nGiven a string, return the string reversed.\n\nExample:\n  reverse(\"abc\") == \"cba\"\n  reverse(\"\") == \"\"\n*/\nconst reverse1 = (test) => {\n  return test.split(\"\").reverse().join(\"\")\n}\n\n/*\nGiven a string, return the number of vowel in the string.\n\nExample:\n  vowelCount(\"abc\") == 2\n  vowelCount(\"\") == 0\n*/\nconst vowelCount = (test) => {\n  let result = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test[i] == \"a\" || test[i] == \"e\" || test[i] == \"i\" || test[i] == \"o\" || test[i] == \"u\") {\n      result++\n    }\n  }\n  return result\n}\n\n/*\nGiven a string, return the number of vowel in the string.\n\nExample:\n  vowelCount(\"abc\") == 2\n  vowelCount(\"\") == 0\n*/\nconst vowelCount1 = (test) => {\n  let result = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test[i] == \"a\" || test[i] == \"e\" || test[i] == \"i\" || test[i] == \"o\" || test[i] == \"u\" || test[i] == \"A\" || test[i] == \"E\" || test[i] == \"I\" || test[i] == \"O\" || test[i] == \"U\") {\n      result++\n    }\n  }\n  return result\n}\n\n/*\nGiven a string, return the number of vowel in the string.\n\nExample:\n  vowelCount(\"abc\") == 2\n  vowelCount(\"\") == 0\n*/\nconst vowelCount2 = (test) => {\n  let result = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test[i] == \"A\" || test[i] == \"E\" || test[i] == \"I\" || test[i] == \"O\" || test[i] == \"U\" || test[i] == \"a\" || test[i] == \"e\" || test[i] == \"i\" || test[i] == \"o\" || test[i] == \"u\") {\n      result++\n    }\n  }\n  return result\n}\n\n/*\nGiven a string, return the number of vowel in the string.\n\nExample:\n  vowelCount(\"abc\") == 2\n  vowelCount(\"\") == 0\n*/\nconst vowelCount3 = (test) => {\n  let result = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test[i] == \"a\" || test[i] == \"e\" || test[i] == \"i\" || test[i] == \"o\" || test[i] == \"u\" || test[i] == \"A\" || test[i] == \"E\" || test[i] == \"I\" || test[i] == \"O\" || test[i] == \"U\" || test[i] == \"1\") {\n      result++\n    }\n  }\n  return result\n}\n\n/*\nGiven a string, return the number of vowel in the string.\n\nExample:\n  vowelCount(\"abc\") == 2\n  vowelCount(\"\") == 0\n*/\nconst vowelCount4 = (test) => {\n  let result = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test[i] == \"1\" || test[i] == \"A\" || test[i] == \"E\" || test[i] == \"I\" || test[i] == \"O\" || test[i] == \"U\" || test[i] == \"a\" || test[i] == \"e\" || test[i] == \"i\" || test[i] == \"o\" || test[i] == \"u\") {\n      result++\n    }\n  }\n  return result\n}\n\n/*\nGiven a string, return the number of vowel in the string.\n\nExample:\n  vowelCount(\"abc\") == 2\n  vowelCount(\"\") == 0\n*/\nconst vowelCount5 = (test) => {\n  let result = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test[i] == \"1\" || test[i] == \"a\" || test[i] == \"e\" || test[i] == \"i\" || test[i] == \"o\" || test[i] == \"u\" || test[i] == \"A\" || test[i] == \"E\" || test[i] == \"I\" || test[i] == \"O\" || test[i] == \"U\") {\n      result++\n    }\n  }\n  return result\n}\n\n/*\n"}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const len = s.length\n  const left = 0\n  const right = len - 1\n  const check = (x) => {\n    const i = left\n    const j = right\n    const sLen = len\n    const cLen = c.length\n    while (i < sLen && j >= 0) {\n      if (s[i] === c[j]) {\n        // delete the leftmost character\n        s.splice(i, 1)\n        j--\n      } else {\n        // skip the character in c\n        i++\n        j--\n      }\n    }\n    if (j < 0) {\n      // delete the rightmost character\n      s.splice(i, 1)\n    }\n    return s\n  }\n\n  return [check(s), check(s.reverse())]\n}\n\nconsole.log(reverseDelete(\"abcde\", \"ae\"))\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const dp = new Map();\n  for (let i = 0; i < lst.length; i++) {\n    const arr = lst[i].split(\"\");\n    for (let j = 0; j < arr.length; j++) {\n      dp.set(arr[j], (dp.get(arr[j]) || 0) + 1);\n    }\n  }\n  const [max, num] = Object.keys(dp).sort().reverse();\n  let output = [];\n  for (let i = 0; i < num; i++) {\n    let str = \"\";\n    for (let j = 0; j < max; j++) {\n      str += (dp.get(j) || 0);\n    }\n    output.push(`the number of odd elements ${str} of the ${lst[i]}put.`);\n  }\n  return output;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let max = 0\n  let minSum = 0\n\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0\n    let maxSum = 0\n\n    for (let j = 0; j < nums.length; j++) {\n      if (j === i) {\n        sum += nums[j]\n      } else {\n        sum += Math.max(nums[i], nums[j])\n      }\n\n      if (sum > maxSum) {\n        maxSum = sum\n        max = j\n      }\n    }\n\n    if (sum > maxSum) {\n      maxSum = sum\n      max = i\n    }\n\n    if (sum < minSum) {\n      minSum = sum\n      min = i\n    }\n  }\n\n  return minSum + nums[min]\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]))\nconsole.log(minSubArraySum([-1, -2, -3]))\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const buckets = grid.map(row => row.map(i => 1))\n  const rowMaxes = Array.from(buckets).reduce((max, row, index) => Math.max(max, row.reduce((carry, cell, index) => {\n    if (carry + cell > capacity) {\n      return capacity\n    } else {\n      return carry + cell\n    }\n  }, 0)), 0)\n  return rowMaxes\n}\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const len = arr.length;\n  const sorted = [...new Array(len)].map(() => []);\n  let i = 0;\n  for (let j = 0; j < len; j++) {\n    sorted[i].push(arr[j]);\n    i = arr[j] % 2 === 0? i + 1 : i;\n  }\n  return sorted.map(([i, x]) => i + x);\n};\n\ndescribe('Sorting', () => {\n  const testArr = [2, 3, 1, 5, 4, 6, 7, 8, 9];\n  const sortedArr = sortArray(testArr);\n  console.log(sortedArr);\n  it('should sort array of non-negative integers accords to number of ones in their binary representations in ascends order', () => {\n    expect(sortedArr).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  });\n  it('should sort array of non-negative integers accords to number of ones in their binary representations in ascends order', () => {\n    expect(sortedArr).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = [];\n  const len = s.length;\n  let c = 0;\n  let p = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (c < n) {\n    while (i < len && s[i]!=='') {\n      if (s[i] ==='') {\n        p = i;\n      }\n      c++;\n      i++;\n    }\n    if (c === n) {\n      words.push(s.slice(p, i));\n      i++;\n    }\n    while (i < len && s[i] ==='') {\n      p = i;\n      i++;\n    }\n    k = p;\n    while (k < i && s[k]!=='') {\n      if (s[k] ==='') {\n        p = k;\n      }\n      c++;\n      k++;\n    }\n    if (k === i) {\n      words.push(s.slice(p, i));\n      i++;\n    }\n    while (i < len && s[i] ==='') {\n      p = i;\n      i++;\n    }\n    k = p;\n    while (k < i && s[k]!=='') {\n      if (s[k] ==='') {\n        p = k;\n      }\n      c++;\n      k++;\n    }\n    if (k === i) {\n      words.push(s.slice(p, i));\n      i++;\n    }\n  }\n  if (i === len) {\n    words.push(s.slice(p, i));\n  }\n  return words;\n};\n\nconst words = selectWords(\"Hello world\", 4);\nconsole.log(words);\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowel = '';\n  for (let i = 0; i < word.length - 1; i++) {\n    if (isVowel(word[i]) &&!isVowel(word[i + 1])) {\n      vowel = word[i + 1];\n      break;\n    }\n  }\n  return vowel;\n};\n\nexport default getClosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [],\n        len = lst.length,\n        isBalanced = true;\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        isBalanced = false;\n        break;\n      }\n      stack.pop();\n    }\n  }\n  return isBalanced;\n};\n\nmatchParens([\n  '()',\n  '(()',\n  '(())',\n  '()()',\n  '(())()',\n  '()()()',\n  '()()()',\n  '(())()()',\n  '(())()()',\n  '(())()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '()()()()"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const [max, arr2] = maxBy([arr, 0], (a, i) => a > i);\n  return arr2.slice(0, k);\n};\n\nconst maxBy = (arr, comparator) => {\n  const [max, arr2] = sortedArray(arr, comparator);\n  return [max, arr2];\n};\n\nconst sortedArray = (arr, comparator) => {\n  const arr2 = arr.slice();\n  const len = arr2.length;\n  let max = 0;\n  let min = arr2[0];\n\n  for (let i = 0; i < len; i++) {\n    if (comparator(arr2[i], min) > 0) {\n      min = arr2[i];\n    }\n    if (comparator(arr2[i], max) < 0) {\n      max = arr2[i];\n    }\n  }\n\n  return [max, arr2];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for(let i = 0; i < lst.length; i += 2) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const arrLength = arr.length\n  const subArray = arr.slice(0, k)\n\n  return (subArray.reduce((prev, curr) => prev + curr, 0) +\n          subArray.reduce((prev, curr) => prev + curr, 0))\n}\n\nexport default addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let list = [n]\n  while (n!= 1) {\n    if (n % 2 == 0) {\n      n = n / 2\n    } else {\n      n = 3 * n + 1\n    }\n    list.push(n)\n  }\n  return list.sort()\n}\n\nexport { getOddCollatz }\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === '') return false\n  const month = parseInt(date.slice(0,2))\n  const day = parseInt(date.slice(3,5))\n  const year = parseInt(date.slice(6,10))\n  return month >= 1 && month <= 12 && day >= 1 && day <= 30 && year >= 2000\n}\n\nconst parseDate = (date) => {\n  const splitDate = date.split('/')\n  return {\n    year: parseInt(splitDate[2]),\n    month: parseInt(splitDate[0]),\n    day: parseInt(splitDate[1])\n  }\n}\n\nconst validDateArray = (dates) => dates.every(validDate)\n\nconst parseDateArray = (dates) => dates.map(parseDate)\n\nmodule.exports = {\n  parseDate,\n  parseDateArray,\n  validDate,\n  validDateArray\n}<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  if (txt === undefined) return undefined\n  txt = txt.toString()\n  if (txt.length === 0) return []\n  let words = txt.split(/\\s+/g)\n  return words\n}\n\n/* Gives the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  ord(\"Hello world!\") ➞ 15\n  ord(\"abcdef\") ➞ 4\n  */\nconst ord = (txt) => {\n  if (txt === undefined) return undefined\n  txt = txt.toString()\n  txt = txt.toLowerCase()\n  let words = txt.split(/\\s+/)\n  let count = 0\n  words.forEach((word) => {\n    count += word.length\n  })\n  return count\n}\n\n/* Gives the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  ord(\"Hello world!\") ➞ 15\n  ord(\"abcdef\") ➞ 4\n  */\nconst ord2 = (txt) => {\n  if (txt === undefined) return undefined\n  txt = txt.toString()\n  txt = txt.toLowerCase()\n  let count = 0\n  let length = txt.length\n  for (let i = 0; i < length; i++) {\n    count += txt[i].length\n  }\n  return count\n}\n\n/* Gives a list of words that contains the given string, if no string is given returns all words in the texts\n  Examples\n  find(\"Hello world!\", [\"Hello\", \"world!\"]) ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"Hello\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"h\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"world\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"ello\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"Hello \") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \" world!\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"world \") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"hello world!\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"Hello world\") ➞ [\"Hello\", \"world!\"]\n  */\nconst find = (txt, word) => {\n  if (txt === undefined) return undefined\n  txt = txt.toString()\n  if (word === undefined) word = \"\"\n  let words = splitWords(txt)\n  return words.filter((word) => word.indexOf(word) >= 0)\n}\n\n/* Gives a list of words that contains the given string, if no string is given returns all words in the texts\n  Examples\n  find(\"Hello world!\", [\"Hello\", \"world!\"]) ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"Hello\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"h\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"world\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"ello\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"Hello \") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \" world!\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"world \") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"hello world!\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"Hello world\") ➞ [\"Hello\", \"world!\"]\n  */\nconst find2 = (txt, word) => {\n  if (txt === undefined) return undefined\n  txt = txt.toString()\n  if (word === undefined) word = \"\"\n  let words = splitWords(txt)\n  return words.filter((word) => word.indexOf(word) >= 0)\n}\n\n/* Gives a list of words that contains the given string, if no string is given returns all words in the texts\n  Examples\n  find(\"Hello world!\", [\"Hello\", \"world!\"]) ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"Hello\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"h\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"world\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"ello\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"Hello \") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \" world!\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"world \") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"hello world!\") ➞ [\"Hello\", \"world!\"]\n  find(\"Hello world!\", \"Hello world\") ➞ [\"Hello\", \"world!\"]\n  */\nconst find3 = (txt, word) => {\n  if (txt === undefined) return undefined\n  txt = txt.toString()\n  if (word === undefined) word = \"\"\n  let words = splitWords(txt)\n  return words.filter((word) => word.indexOf(word) >= 0)\n}\n\n/* Gives"}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const listLength = lst.length\n  let prevNum = -1\n  let prevIsSorted = false\n\n  for (let i = 0; i < listLength; i++) {\n    if (lst[i] > prevNum) {\n      if (prevIsSorted) {\n        return false\n      }\n      prevNum = lst[i]\n      prevIsSorted = true\n    }\n    if (lst[i] < prevNum) {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const min1 = Math.min(interval1[0], interval1[1])\n  const max1 = Math.max(interval1[0], interval1[1])\n  const min2 = Math.min(interval2[0], interval2[1])\n  const max2 = Math.max(interval2[0], interval2[1])\n  if (min1 > max2 || max1 < min2) return \"NO\"\n  return Math.floor(Math.max(min1, min2) - Math.min(max1, max2)) % 1 === 0\n}\n\nexport default intersection<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const sign = arr.map((x) => x > 0? 1 : x < 0? -1 : 0);\n  const mag = arr.map((x) => Math.abs(x));\n  let sum = 0;\n  for (let i = 0; i < sign.length; i++) {\n    sum = sum + sign[i] * mag[i] * Math.pow(mag[i], 2);\n  }\n  return sum;\n};\n\nmodule.exports = prodSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    let gridLength = grid.length;\n    if (gridLength === 1) {\n        return [grid[0][0]];\n    }\n\n    let paths = [];\n    for (let i = 0; i < gridLength; i++) {\n        for (let j = 0; j < gridLength; j++) {\n            if (i === j) {\n                continue;\n            }\n            paths.push([grid[i][j], grid[j][i]]);\n        }\n    }\n\n    // make paths as a sorted array\n    paths.sort((a, b) => {\n        return a[0] - b[0];\n    });\n\n    let min = [];\n    let minLen = 0;\n    let minPathLength = 0;\n    let visited = [];\n    let current = [];\n    for (let i = 0; i < paths.length; i++) {\n        // if the path is longer than k, ignore\n        if (paths[i][0] > k) {\n            continue;\n        }\n\n        // if the path is less than k, then ignore\n        if (paths[i][0] < k) {\n            continue;\n        }\n\n        // if the path is the minimum, save it\n        if (minLen === 0) {\n            min = paths[i];\n            minLen = min[0];\n        } else if (min[0] < paths[i][0]) {\n            // if the path is not the minimum, find the minimum\n            min = paths[i];\n            minLen = min[0];\n        }\n\n        // if the path is not the minimum, check whether the path is shorter than minLen\n        if (minLen < paths[i][0]) {\n            // if the path is not the minimum and is shorter than minLen, ignore\n            continue;\n        }\n\n        // if the path is the minimum, find the minimum\n        // for each cell in the path\n        current = paths[i];\n        minPathLength = current[0];\n        for (let j = 1; j < minLen; j++) {\n            // if the current path has j-1 cell, add it\n            if (visited.indexOf(current[j]) === -1) {\n                visited.push(current[j]);\n            }\n            // if the current path has j-1 cell, add it\n            if (visited.indexOf(current[j]) === -1) {\n                visited.push(current[j]);\n            }\n        }\n    }\n\n    // find the minimum path\n    let path = [];\n    for (let i = 0; i < minLen; i++) {\n        path.push(visited[i]);\n    }\n\n    return path;\n};\n\nexport {\n    minPath\n};\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [];\n  let nth = 1;\n  let fib = 1;\n  \n  while (nth < n + 1) {\n    result.push(fib);\n    fib = fib + fib;\n    nth++;\n  }\n  return result;\n};\n\nconsole.log(tri(3));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const digits = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 634, 991]\n  const nums = []\n  let tmp = n\n  let i = 0\n  let count = 0\n  while (tmp > 0) {\n    nums.push(digits[tmp % 10])\n    tmp = Math.floor(tmp / 10)\n    count++\n  }\n  return nums.reduce((a, b) => a * b, 1)\n}\n\nconsole.log(digits(23))\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  const brackets = {\n    '[': true,\n    '[': true,\n    '(': false,\n    '{': false,\n    '}': false,\n    ')': false,\n    '}': false,\n  }\n  let stack = []\n  for (let i = 0; i < string.length; i++) {\n    const current = string[i]\n    if (brackets[current]) {\n      stack.push(current)\n    } else {\n      if (stack.length === 0) {\n        return false\n      }\n      const last = stack[stack.length - 1]\n      if (brackets[last] && current!== last) {\n        return false\n      }\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return lst.map((n) => Math.pow(n, 2))\n}\n\n/*\nGiven a string containing lowercase letters, return the same string with all the letters\n  moved one space to the right.\n  Examples:\n  For str = \"abc\", the output should be \"ABC\"\n  For str = \"pqrst\", the output should be \"PQRST\"\n  For str = \"abcdefg\", the output should be \"ABCDEFG\"\n  For str = \"hijklmn\", the output should be \"HIJKLMN\"\n  For str = \"xyz\", the output should be \"XYZ\"\n  */\nconst rotateString = (str) => {\n  const array = str.split(\"\")\n  return array.map((elem, index) => array[index + 1] + elem)\n}\n\n/*\nGiven two arrays of numbers, return the intersection of the two arrays.\n  Examples:\n  For lst = [1,2,3,4] and lst2 = [2,4,5,6], the output should be [2,4]\n  */\nconst intersection = (lst, lst2) => {\n  const result = []\n  lst.forEach((element, index) => {\n    if (lst2.indexOf(element)!== -1) {\n      result.push(element)\n    }\n  })\n  return result\n}\n\n/*\nGiven a list of numbers, return the sum of the even numbers in the list.\n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26], the output should be 31\n  */\nconst sumEven = (lst) => {\n  return lst.reduce((previous, current) => {\n    return previous + (current % 2 === 0? current : 0)\n  })\n}\n\n/*\nGiven a list of numbers, return the sum of the odd numbers in the list.\n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126], the output should be 126\n  */\nconst sumOdd = (lst) => {\n  return lst.reduce((previous, current) => {\n    return previous + (current % 2 === 0? 0 : current)\n  })\n}\n\n/*\nGiven a list of numbers, return the product of the numbers in the list.\n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26], the output should be 26400\n  */\nconst product = (lst) => {\n  return lst.reduce((previous, current) => {\n    return previous * current\n  })\n}\n\n/*\nGiven a list of numbers, return the sum of the squares of the numbers in the list.\n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26], the output should be 861\n  */\nconst sumSquaresOfSquares = (lst) => {\n  return lst.reduce((previous, current) => {\n    return previous + Math.pow(current, 2)\n  })\n}\n\n/*\nGiven a list of numbers, return the sum of the square of the differences between the numbers in the list.\n  Examples:\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26], the output should be 438\n  */\nconst sumOfSquareDifferences = (lst) => {\n  return lst.reduce((previous, current, index) => {\n    if (index!== 0) {\n      return previous + Math.pow(current - previous, 2)\n    } else {\n      return previous\n    }\n  })\n}\n\nconst main = (args) => {\n  let result = \"\"\n\n  let list1 = args[0]\n  let list2 = args[1]\n\n  let list1Squared = sumSquares(list1)\n  let list2Squared = sumSquares(list2)\n\n  let list1Rotated = rotateString(list1)\n  let list2Rotated = rotateString(list2)\n\n  let intersection = intersection(list1Rotated, list2Rotated)\n  let sumEven"}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1);\n  if(lastChar.match(/[a-zA-Z]/)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a functions that returning trueer if the last character of a gives string is a digit and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsADigit(\"apple pie\") ➞ false\n  checkIfLastCharIsADigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsADigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsADigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsADigit = (txt) => {\n  const lastChar = txt.slice(-1);\n  if(lastChar.match(/[0-9]/)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a function that returns true if a string contains at least one alpha-numeric character and false otherwise.\n  Notes: \"words\" is a group of character separates by space.\n  Examples:\n  containsAlphaNumeric(\"apple pie\") ➞ true\n  containsAlphaNumeric(\"apple pi e\") ➞ true\n  containsAlphaNumeric(\"apple pi e \") ➞ true\n  containsAlphaNumeric(\"apple pie \") ➞ true\n  containsAlphaNumeric(\"\") ➞ true\n  */\nconst containsAlphaNumeric = (txt) => {\n  const lastChar = txt.slice(-1);\n  if(lastChar.match(/[a-zA-Z0-9]/)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a function that returns true if a string contains only lowercase letters and false otherwise.\n  Notes: \"words\" is a group of character separates by space.\n  Examples:\n  containsOnlyLowercaseLetters(\"apple pie\") ➞ true\n  containsOnlyLowercaseLetters(\"apple pi e\") ➞ true\n  containsOnlyLowercaseLetters(\"apple pi e \") ➞ true\n  containsOnlyLowercaseLetters(\"apple pie \") ➞ true\n  containsOnlyLowercaseLetters(\"\") ➞ true\n  */\nconst containsOnlyLowercaseLetters = (txt) => {\n  const lastChar = txt.slice(-1);\n  if(lastChar.match(/[a-z]/)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a function that returns true if a string contains at least one lowercase letter and false otherwise.\n  Notes: \"words\" is a group of character separates by space.\n  Examples:\n  containsOnlyUppercaseLetters(\"apple pie\") ➞ false\n  containsOnlyUppercaseLetters(\"apple pi e\") ➞ true\n  containsOnlyUppercaseLetters(\"apple pi e \") ➞ true\n  containsOnlyUppercaseLetters(\"apple pie \") ➞ true\n  containsOnlyUppercaseLetters(\"\") ➞ false\n  */\nconst containsOnlyUppercaseLetters = (txt) => {\n  const lastChar = txt.slice(-1);\n  if(lastChar.match(/[A-Z]/)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a function that returns true if a string contains a number and false otherwise.\n  Notes: \"words\" is a group of character separates by space.\n  Examples:\n  containsOnlyNumbers(\"apple pie\") ➞ true\n  containsOnlyNumbers(\"apple pi e\") ➞ true\n  containsOnlyNumbers(\"apple pi e \") ➞ true\n  containsOnlyNumbers(\"apple pie \") ➞ true\n  containsOnlyNumbers(\"\") ➞ false\n  */\nconst containsOnlyNumbers = (txt) => {\n  const lastChar = txt.slice(-1);\n  if(lastChar.match(/[0-9]/)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a function that returns true if a string contains only digits and false otherwise.\n  Notes: \"words\" is a group of character separates by space.\n  Examples:\n  containsOnlyDigits(\"apple pie\") ➞ true\n  containsOnlyDigits(\"apple pi e\") ➞ true\n  containsOnlyDigits(\"apple pi e \") ➞ true\n  containsOnlyDigits(\"apple pie \") ➞ true\n  containsOnlyDigits(\"\") ➞ false\n  */\nconst containsOnlyDigits = (txt) => {\n  const lastChar = txt.slice(-1);\n  if(lastChar.match(/[0-9]/)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a function that returns true if a string contains a space and false otherwise.\n  Notes: \"words\" is a group of character separates by space.\n  Examples:\n  containsOnlySpaces(\"apple pie\") ➞ false\n  containsOnlySpaces(\"apple pi e\") ➞ true\n  containsOnlySpaces(\"apple pi e \") ➞ true\n  containsOnlySpaces(\"apple pie \") ➞ true\n  containsOnlySpaces(\"\") ➞ false\n  */\nconst containsOnlySpaces = (txt) => {\n  const lastChar = txt.slice(-1);\n  if(lastChar.match(/ /)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/* Create a function that returns true if a string contains a single punctuation mark and"}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) return -1;\n\n  let curMax = arr[0];\n  let index = 0;\n  for (let i = 1; i < arrLength; i++) {\n    if (arr[i] > curMax) {\n      curMax = arr[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Given two arrays, return the element which is largest in one of the two arrays.\n  If no such element exists then return -1. The given arrays will not containing duplicate value.\n  \n  Examples:\n  canArrange([1,2,4,3,5]) = 5\n  canArrange([1,2,3]) = -1\n  */\nconst canArrangeInArr = (arr1, arr2) => {\n  const arr1Length = arr1.length;\n  const arr2Length = arr2.length;\n  if (arr1Length === 0 || arr2Length === 0) return -1;\n\n  const arr1Max = arr1[0];\n  const arr2Max = arr2[0];\n\n  let index = -1;\n  for (let i = 0; i < arr1Length; i++) {\n    if (arr1[i] > arr1Max) {\n      arr1Max = arr1[i];\n      index = i;\n    }\n  }\n  for (let i = 0; i < arr2Length; i++) {\n    if (arr2[i] > arr2Max) {\n      arr2Max = arr2[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nexport { canArrange, canArrangeInArr };<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return null\n  }\n  let minMax = [null, null]\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    if (minMax[0] === null) {\n      minMax = [num, num]\n    } else if (minMax[0] > num) {\n      minMax = [num, num]\n    } else if (minMax[0] < num) {\n      minMax[0] = num\n    }\n    if (minMax[1] === null) {\n      minMax = [num, num]\n    } else if (minMax[1] < num) {\n      minMax[1] = num\n    }\n  }\n  return minMax\n}\n\n// Return the largest of the two positive integers.\nconst largest = (a, b) => {\n  if (a < b) {\n    return b\n  } else {\n    return a\n  }\n}\n\n// Return the smallest of the two positive integers.\nconst smallest = (a, b) => {\n  if (a < b) {\n    return a\n  } else {\n    return b\n  }\n}\n\nconst main = () => {\n  let input = [2, 4, 1, 3, 5, 7]\n  console.log(largestSmallestIntegers(input))\n  console.log(largest(2, 1))\n  console.log(smallest(2, 1))\n  input = [0]\n  console.log(largestSmallestIntegers(input))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  if(a < b){\n    return a;\n  }\n  else if(b < a){\n    return b;\n  }\n  else{\n    return null;\n  }\n}\n\n/*\n  Given two realer numbers, return the larger of them. Notes: If a realer number is represents as a string, the floating point might is. or, compareTwo(2.5, 1) ➞ 2.5 compareTwo(1, 2.5) ➞ 2.5 compareTwo(\"2,3\", \"2.5\") ➞ \"2,3\" compareTwo(\"2,3\", \"1\") ➞ \"2,3\" compareTwo(\"1\", \"1\") ➞ \"1\" */ const compareTwo = (a, b) => {\n  if(a < b){\n    return a;\n  }\n  else if(b < a){\n    return b;\n  }\n  else{\n    return a;\n  }\n}\n\n/*\n  Given a list of realer numbers, return the largest number in the list. Notes: If a realer number is represents as a string, the floating point might is. or, compareList(1, 2, 3, 4, 5) ➞ 5 compareList(1, 2, \"3\", 4, 5) ➞ \"3\" compareList(\"1\", 2, 3, 4, 5) ➞ \"3\" */ const compareList = (...numbers) => {\n  let max = numbers[0];\n  for(let i = 1; i < numbers.length; i++){\n    if(compareOne(numbers[i], max) > 0){\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n\n/*\n  Given a list of realer numbers, return the smallest number in the list. Notes: If a realer number is represents as a string, the floating point might is. or, compareList(1, 2, 3, 4, 5) ➞ 1 compareList(1, 2, \"3\", 4, 5) ➞ \"1\" compareList(\"1\", 2, 3, 4, 5) ➞ \"1\" */ const compareList = (...numbers) => {\n  let min = numbers[0];\n  for(let i = 1; i < numbers.length; i++){\n    if(compareOne(numbers[i], min) < 0){\n      min = numbers[i];\n    }\n  }\n  return min;\n}\n\n/*\n  Given a list of realer numbers, return the average of the numbers. Notes: If a realer number is represented as a string, the floating point might is. or, average(1, 2, 3, 4) ➞ 2.5 average(1, \"2,3\", 4) ➞ 2.5 average(\"1\", 2, 3, 4) ➞ 2.5 */ const average = (...numbers) => {\n  let sum = 0;\n  for(let i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n  }\n  return sum/numbers.length;\n}\n\n/*\n  Given a list of realer numbers, return the list with the largest and smallest elements removed. Notes: If a realer number is represented as a string, the floating point might is. or, average(1, 2, 3, 4) ➞ 2.5 average(1, \"2,3\", 4) ➞ 2.5 average(\"1\", 2, 3, 4) ➞ 2.5 */ const largestRemoves = (...numbers) => {\n  let largest = numbers[0];\n  let min = numbers[0];\n  for(let i = 1; i < numbers.length; i++){\n    if(compareOne(numbers[i], largest) > 0){\n      largest = numbers[i];\n    }\n    if(compareOne(numbers[i], min) < 0){\n      min = numbers[i];\n    }\n  }\n  return [largest, min];\n}\n\n/*\n  Given a list of realer numbers, return the list with the largest and smallest elements removed. Notes: If a realer number is represented as a string, the floating point might is. or, average(1, 2, 3, 4) ➞ 2.5 average(1, \"2,3\", 4) ➞ 2.5 average(\"1\", 2, 3, 4) ➞ 2.5 */ const smallestRemoves = (...numbers) => {\n  let smallest = numbers[0];\n  let largest = numbers[0];\n  for(let i = 1; i < numbers.length; i++){\n    if(compareOne(numbers[i], smallest) < 0){\n      smallest = numbers[i];\n    }\n    if(compareOne(numbers[i], largest) > 0){\n      largest = numbers[i];\n    }\n  }\n  return [smallest, largest];\n}\n\n/*\n  Given a list of realer numbers, return the list with the largest and smallest elements removed. Notes: If a realer number is represented as a string, the floating point might is. or, average(1, 2, 3, 4) ➞ 2.5 average(1, \"2,3\", 4) ➞ 2.5 average(\"1\", 2, 3, 4) ➞ 2.5 */ const sortedRemoves = (...numbers) => {\n  let sorted = sortedArray(numbers);\n  return sorted.slice(0, numbers.length - 1);\n}\n\n/*\n  Given two lists of realer numbers, return the list with the largest and smallest elements removed. Notes: If a realer number is represented as a string, the floating point might is. or, average(1, 2, 3, 4) ➞ 2.5 average(1, \"2,3\", 4) ➞ 2.5 average(\"1\", 2, 3, 4) ➞ 2.5 */ const largestAndSmallestRemoves = (...numbers) => {\n  let"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n < 1) return false;\n  const num = Math.floor(n);\n  const even = (num & 1) === 0;\n  const div = num / 2;\n  const sum = (num + 1) * div;\n  return (sum === n || sum === n + 2);\n};\n\n/*Evaluate whether the given number n is a perfect number\n  Example\n  isPerfectNumber(6) == false\n  isPerfectNumber(7) == true\n  */\nconst isPerfectNumber = (n) => {\n  if (n < 1) return false;\n  const num = Math.floor(n);\n  const sum = num + 1;\n  const div = sum / 2;\n  return (sum === num || sum === num + 2);\n};\n\n/*Evaluate whether the given number n is a power of 2\n  Example\n  isPowerOfTwo(1) == true\n  isPowerOfTwo(2) == false\n  isPowerOfTwo(8) == true\n  */\nconst isPowerOfTwo = (n) => {\n  if (n < 1) return false;\n  const num = Math.floor(n);\n  return (num & (num - 1)) === 0;\n};\n\n/*Evaluate whether the given number n is an odd number\n  Example\n  isOddNumber(1) == false\n  isOddNumber(2) == true\n  isOddNumber(3) == false\n  isOddNumber(7) == true\n  */\nconst isOddNumber = (n) => {\n  if (n < 1) return false;\n  const num = Math.floor(n);\n  return num % 2!== 0;\n};\n\n/*Evaluate whether the given number n is an even number\n  Example\n  isEvenNumber(1) == false\n  isEvenNumber(2) == false\n  isEvenNumber(3) == true\n  isEvenNumber(7) == false\n  */\nconst isEvenNumber = (n) => {\n  if (n < 1) return false;\n  const num = Math.floor(n);\n  return num % 2 === 0;\n};\n\n/*Evaluate whether the given number n is a prime number\n  Example\n  isPrimeNumber(1) == false\n  isPrimeNumber(2) == true\n  isPrimeNumber(3) == false\n  isPrimeNumber(5) == true\n  isPrimeNumber(7) == false\n  isPrimeNumber(8) == true\n  isPrimeNumber(9) == false\n  isPrimeNumber(11) == true\n  isPrimeNumber(13) == false\n  */\nconst isPrimeNumber = (n) => {\n  if (n < 1) return false;\n  if (n === 1) return false;\n  if (n === 2) return true;\n  if (n < 3) return false;\n  let factor = 2;\n  while (factor * factor <= n) {\n    if (n % factor === 0) return false;\n    factor++;\n  }\n  return true;\n};\n\n/*Evaluate whether the given number n is a triangular number\n  Example\n  isTriangularNumber(1) == true\n  isTriangularNumber(2) == true\n  isTriangularNumber(3) == false\n  isTriangularNumber(4) == false\n  isTriangularNumber(5) == true\n  isTriangularNumber(6) == true\n  isTriangularNumber(7) == true\n  isTriangularNumber(8) == true\n  isTriangularNumber(9) == true\n  isTriangularNumber(10) == true\n  isTriangularNumber(11) == true\n  isTriangularNumber(12) == true\n  isTriangularNumber(13) == false\n  isTriangularNumber(14) == true\n  isTriangularNumber(15) == true\n  isTriangularNumber(16) == true\n  */\nconst isTriangularNumber = (n) => {\n  if (n < 1) return false;\n  const num = Math.floor(n);\n  return (num * (num + 1) / 2 === n);\n};\n\n/*Evaluate whether the given number n is a pentagonal number\n  Example\n  isPentagonalNumber(1) == true\n  isPentagonalNumber(2) == true\n  isPentagonalNumber(3) == true\n  isPentagonalNumber(4) == true\n  isPentagonalNumber(5) == true\n  isPentagonalNumber(6) == true\n  isPentagonalNumber(7) == true\n  isPentagonalNumber(8) == true\n  isPentagonalNumber(9) == true\n  isPentagonalNumber(10) == true\n  isPentagonalNumber(11) == true\n  isPentagonalNumber(12) == true\n  isPentagonalNumber(13) == true\n  isPentagonalNumber(14) == true\n  isPentagonalNumber(15) == false\n  isPentagonalNumber(16) == true\n  isPentagonalNumber(17) == true\n  isPentagonalNumber(18) == true\n  isPentagonalNumber(19) == true\n  isPentagonalNumber(20) == true\n  */\nconst isPentagonalNumber = (n) => {\n  if (n < 1) return false;\n  const num = Math.floor(n);\n  return (num * (3 * num - 1) / 2 === n);\n};\n\n/*Evaluate whether the given number n is a hexagonal number\n  Example\n  isHexagonalNumber(1) == true\n  isHexagonalNumber(2) == true\n  isHexagonalNumber(3) == true\n  isHexagonalNumber(4) == true\n  isHexagonalNumber(5) == true\n  isHexagonalNumber(6) == true\n  isHexagonalNumber(7) == true\n  isHexagonalNumber(8) == true\n  isHexagonalNumber(9) == true\n  isHexagonalNumber(10) == true\n  isHexagonalNumber(11) == true\n  isHexagonalNumber(12) == true\n  isHexagonalNumber(13) == true\n  "}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let a = 1\n  let b = 1\n  for (let i = 2; i <= n; i++) {\n    a *= i\n  }\n  b = a\n\n  for (let i = 2; i <= n; i++) {\n    b *= i\n  }\n\n  return b\n}\n\nconsole.log(specialFactorial(4))\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    text = text.replace(/ /g, '_');\n    text = text.replace(/\\s+/g, '-');\n    return text;\n};\n\nconst text = 'This is a test';\nconsole.log(fixSpaces(text));\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_array = file_name.split('.')\n  if (file_name_array.length > 3) {\n    return 'No'\n  } else if (file_name.match(/\\d+/g)) {\n    return 'No'\n  } else if (file_name.match(/\\.\\d+/g)) {\n    return 'No'\n  } else if (file_name.match(/\\.\\d+\\..+/g)) {\n    return 'No'\n  } else if (file_name.match(/^[a-zA-Z]+\\..+/g)) {\n    return 'No'\n  } else if (file_name.match(/\\.[tT][xX][tT][xX]/g)) {\n    return 'No'\n  } else if (file_name.match(/\\.\\.\\d+/g)) {\n    return 'No'\n  } else if (file_name.match(/^\\.\\d+/g)) {\n    return 'No'\n  } else if (file_name.match(/\\.\\.\\d+\\.\\d+/g)) {\n    return 'No'\n  } else if (file_name.match(/\\.\\.\\d+\\.\\d+\\.\\d+/g)) {\n    return 'No'\n  } else if (file_name.match(/^\\.\\.\\d+/g)) {\n    return 'No'\n  } else if (file_name.match(/\\.\\.\\d+\\.\\d+/g)) {\n    return 'No'\n  } else if (file_name.match(/\\.\\.\\d+\\.\\d+\\.\\d+/g)) {\n    return 'No'\n  } else if (file_name.match(/\\.\\.\\d+\\.\\d+\\.\\d+\\.\\d+/g)) {\n    return 'No'\n  } else {\n    return 'Yes'\n  }\n}\n\nmodule.exports = fileNameCheck<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    return lst.reduce((sum, n) => sum + n * n, 0);\n}\n\nconst getIndexes = (lst) => {\n    const getIndex = (val, index) => {\n        const indexOf = indexOf(val);\n        if (indexOf === -1) {\n            return index;\n        }\n        return indexOf;\n    };\n    const indexes = lst.map(getIndex);\n    const indexSum = indexes.reduce((sum, n) => sum + n, 0);\n    return indexes;\n}\n\nconst getSum = (lst) => {\n    const getIndex = (val, index) => {\n        const indexOf = indexOf(val);\n        if (indexOf === -1) {\n            return index;\n        }\n        return indexOf;\n    };\n    const sums = lst.map(v => v * v);\n    const indexSum = sums.reduce((sum, n) => sum + n, 0);\n    return indexSum;\n}\n\nconst indexOf = (val) => {\n    const len = lst.length;\n    for (let i = 0; i < len; i++) {\n        if (lst[i] === val) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,2,3,4,5,6]));\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10]));\nconsole.log(getIndexes([1,2,3,4,5,6,7,8,9,10]));\nconsole.log(getSum([1,2,3,4,5,6,7,8,9,10]));<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  // check for empty sentence\n  if (!sentence) return ''\n\n  // get first and last char of sentence\n  const firstChar = sentence[0]\n  const lastChar = sentence[sentence.length - 1]\n\n  // check if char in sentence is a letter\n  if (!isCharInSentence(firstChar)) return ''\n  if (!isCharInSentence(lastChar)) return ''\n\n  // split sentence to array\n  const sentenceArray = sentence.split(' ')\n\n  // create new string\n  let newSentence = ''\n\n  // get a list of words in sentence\n  const wordsInSentenceArray = sentenceArray.map((item) => {\n    const firstCharInWord = item.charAt(0)\n    const lastCharInWord = item.charAt(item.length - 1)\n\n    // check if first and last char of word is letters\n    if (!isCharInWord(firstCharInWord)) return ''\n    if (!isCharInWord(lastCharInWord)) return ''\n\n    return item\n  })\n\n  // get an array of prime numbers\n  const primeNumbers = getPrimeNumbers()\n\n  // check if there is at least one prime number in the array\n  if (!primeNumbers.length) return ''\n\n  // sort array of prime numbers\n  primeNumbers.sort((a, b) => {\n    return a - b\n  })\n\n  // get a new string of words in sentence\n  for (let i = 0; i < wordsInSentenceArray.length; i++) {\n    // get prime number of the current word\n    const currentPrimeNumber = primeNumbers[i]\n\n    // get a list of the first and last chars in the current word\n    const firstCharInCurrentWord = wordsInSentenceArray[i].charAt(0)\n    const lastCharInCurrentWord = wordsInSentenceArray[i].charAt(wordsInSentenceArray[i].length - 1)\n\n    // get the index of first char in the current word\n    const indexOfFirstCharInCurrentWord = firstCharInSentence(firstCharInCurrentWord)\n\n    // get the index of last char in the current word\n    const indexOfLastCharInCurrentWord = lastCharInSentence(lastCharInCurrentWord)\n\n    // get the length of the current word\n    const currentWordLength = indexOfLastCharInCurrentWord - indexOfFirstCharInCurrentWord + 1\n\n    // add the current word to the new string\n    newSentence += wordsInSentenceArray[i].substring(indexOfFirstCharInCurrentWord, indexOfLastCharInCurrentWord + 1)\n\n    // if the current word length is not a prime number\n    if (currentWordLength % currentPrimeNumber!== 0) {\n      // append a space to the new sentence\n      newSentence +=''\n    }\n  }\n\n  // return new string\n  return newSentence\n}\n\nconst isCharInWord = (char) => {\n  // check if char is a letter\n  if (char.match(/[a-zA-Z]/)) {\n    return true\n  }\n  return false\n}\n\nconst isCharInSentence = (char) => {\n  // check if char is a letter\n  if (char.match(/[a-zA-Z]/)) {\n    return true\n  }\n  return false\n}\n\nconst firstCharInSentence = (char) => {\n  // check if char is a letter\n  if (char.match(/[a-zA-Z]/)) {\n    return char.charCodeAt(0)\n  }\n  return -1\n}\n\nconst lastCharInSentence = (char) => {\n  // check if char is a letter\n  if (char.match(/[a-zA-Z]/)) {\n    return char.charCodeAt(char.length - 1)\n  }\n  return -1\n}\n\nconst getPrimeNumbers = () => {\n  const primeNumbers = []\n  for (let i = 1; i < 1000; i++) {\n    if (primeNumbers.indexOf(i) === -1) {\n      primeNumbers.push(i)\n    }\n  }\n  return primeNumbers\n}\n\nexport default wordsInSentence\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n    const numerator = x.split('/')[0]\n    const denominator = x.split('/')[1]\n    const is_integer = x.split('/').length === 1\n    return!is_integer && parseInt(numerator, 10) % parseInt(denominator, 10) === 0\n}\n\n/*Your task is to implement a function to multiply the elements of the array. The function should return a new array with the multiplication of the elements in the array. For example: multiply([2,4,6,3,1]) = [2,16,54,12,6,4,2] */ const multiply = (array) => {\n    let result = []\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array.length; j++) {\n            if (i === j) {\n                result.push(array[i] * array[j])\n            } else {\n                result.push(array[i] * array[j])\n            }\n        }\n    }\n    return result\n}\n\n/*Your task is to implement a function to multiply the elements of the array. The function should return a new array with the multiplication of the elements in the array. For example: multiply([2,4,6,3,1]) = [2,16,54,12,6,4,2] */ const multiply_without_zero = (array) => {\n    let result = []\n    for (let i = 0; i < array.length; i++) {\n        for (let j = i + 1; j < array.length; j++) {\n            if (array[i]!== 0 && array[j]!== 0) {\n                result.push(array[i] * array[j])\n            }\n        }\n    }\n    return result\n}\n\n/*Your task is to implement a function to multiply the elements of the array. The function should return a new array with the multiplication of the elements in the array. For example: multiply([2,4,6,3,1]) = [2,16,54,12,6,4,2] */ const multiply_without_zero_with_zero = (array) => {\n    let result = []\n    for (let i = 0; i < array.length; i++) {\n        for (let j = i + 1; j < array.length; j++) {\n            if (array[i]!== 0 && array[j]!== 0) {\n                result.push(array[i] * array[j])\n            }\n        }\n    }\n    return result\n}\n\n/*Your task is to implement a function to multiply the elements of the array. The function should return a new array with the multiplication of the elements in the array. For example: multiply([2,4,6,3,1]) = [2,16,54,12,6,4,2] */ const multiply_without_one = (array) => {\n    let result = []\n    for (let i = 0; i < array.length; i++) {\n        for (let j = i + 1; j < array.length; j++) {\n            if (array[i]!== 1 && array[j]!== 1) {\n                result.push(array[i] * array[j])\n            }\n        }\n    }\n    return result\n}\n\n/*Your task is to implement a function to multiply the elements of the array. The function should return a new array with the multiplication of the elements in the array. For example: multiply([2,4,6,3,1]) = [2,16,54,12,6,4,2] */ const multiply_with_one = (array) => {\n    let result = []\n    for (let i = 0; i < array.length; i++) {\n        for (let j = i + 1; j < array.length; j++) {\n            if (array[i]!== 1 && array[j]!== 1) {\n                result.push(array[i] * array[j])\n            }\n        }\n    }\n    return result\n}\n\n/*Your task is to implement a function to multiply the elements of the array. The function should return a new array with the multiplication of the elements in the array. For example: multiply([2,4,6,3,1]) = [2,16,54,12,6,4,2] */ const multiply_with_zero = (array) => {\n    let result = []\n    for (let i = 0; i < array.length; i++) {\n        for (let j = i + 1; j < array.length; j++) {\n            if (array[i]!== 0 && array[j]!== 0) {\n                result.push(array[i] * array[j])\n            }\n        }\n    }\n    return result\n}\n\n/*Your task is to implement a function to multiply the elements of the array. The function should return a new array with the multiplication of the elements in the array. For example: multiply([2,4,6,3,1]) = [2,16,54,12,6,4,2] */ const multiply_with_one_without_zero = (array) => {\n    let result = []\n    for (let i = 0; i < array.length; i++) {\n        for (let j = i + 1; j < array.length; j++) {\n            if (array[i]!== 1 && array[j]!== 1) {\n                result.push(array[i] * array[j])\n            }\n        }\n    }\n    return result\n}\n\n/*Your task is to implement a function to multiply the elements of the array. The function should return a new array with the multiplication of the elements in the array. For example: multiply([2,4,6,3,1]) = [2,16,54,12,6,4,2] */ const multiply_with_zero_without_one = (array) =>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = []\n  const sortedByDigits = {}\n\n  for (let i = 0; i < nums.length; i++) {\n    const sum = sumDigits(nums[i])\n    if (sortedByDigits[sum] === undefined) {\n      sorted.push(nums[i])\n      sortedByDigits[sum] = nums[i]\n    } else if (sortedByDigits[sum]!== nums[i]) {\n      sorted.push(nums[i])\n      sortedByDigits[sum] = nums[i]\n    }\n  }\n  return sorted\n}\n\nconst sumDigits = (num) => {\n  let sum = 0\n  while (num > 0) {\n    sum += num % 10\n    num = Math.floor(num / 10)\n  }\n  return sum\n}\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12]))\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = [...nums];\n  return arr.reduce((sum, num) => {\n    if (num > 10 && num % 2 === 1 && num % 3 === 1) {\n      sum++;\n    }\n    return sum;\n  }, 0);\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n\n/*\nWrite a function that takes an array of numbers as input and returns the number of elements in the array that was less than 5 and both first and last digit of a number was odd (1, 3, 5, 7, 9).\n\nFor example:\nspecialFilter([15, -73, 14, -15]) => 2\nspecialFilter([33, -2, -3, 45, 21, 109]) => 0\nspecialFilter([12, -12, 13, -13]) => 3\nspecialFilter([11, -11]) => 0\n*/\nconst specialFilter2 = (nums) => {\n  const arr = [...nums];\n  return arr.reduce((sum, num) => {\n    if (num < 5 && num % 2 === 1 && num % 3 === 1) {\n      sum++;\n    }\n    return sum;\n  }, 0);\n};\n\nconsole.log(specialFilter2([15, -73, 14, -15]));\nconsole.log(specialFilter2([33, -2, -3, 45, 21, 109]));\nconsole.log(specialFilter2([12, -12, 13, -13]));\nconsole.log(specialFilter2([11, -11]));\n\n/*\nWrite a function that takes an array of numbers as input and returns the number of elements in the array that was less than 10 and both first and last digit of a number was odd (1, 3, 5, 7, 9).\n\nFor example:\nspecialFilter([15, -73, 14, -15]) => 0\nspecialFilter([33, -2, -3, 45, 21, 109]) => 2\nspecialFilter([12, -12, 13, -13]) => 1\nspecialFilter([11, -11]) => 0\n*/\nconst specialFilter3 = (nums) => {\n  const arr = [...nums];\n  return arr.reduce((sum, num) => {\n    if (num < 10 && num % 2 === 1 && num % 3 === 1) {\n      sum++;\n    }\n    return sum;\n  }, 0);\n};\n\nconsole.log(specialFilter3([15, -73, 14, -15]));\nconsole.log(specialFilter3([33, -2, -3, 45, 21, 109]));\nconsole.log(specialFilter3([12, -12, 13, -13]));\nconsole.log(specialFilter3([11, -11]));<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    const a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            a[j] = a[j] + a[i] * (i * i - i + 1);\n        }\n    }\n    const triples = a.filter(x => x > 0);\n    return triples.reduce((acc, x) => acc + (x > 0? x / 3 : 0), 0);\n};\n\n/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n  \n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n      The only valid triple is (7, 13, 21).\n  */\nconst getMaxTriples2 = (n) => {\n    const a = new Array(n).fill(0);\n    for (let i = 1; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            a[j] = a[j] + a[i] * (i * i - i + 1);\n        }\n    }\n    return a.filter(x => x > 0).reduce((acc, x) => acc + (x > 0? x / 3 : 0), 0);\n};\n\nexport {\n    getMaxTriples,\n    getMaxTriples2\n};<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planetNames = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  const planetNamesLength = planetNames.length;\n  const distance = Math.abs(Math.pow(Math.pow(planet1, 2) + Math.pow(planet2, 2) - Math.pow(planet1, 2) - Math.pow(planet2, 2), 0.5) - Math.pow(Math.pow(planet1, 2) + Math.pow(planet2, 2) - Math.pow(planet1, 2) - Math.pow(planet2, 2), 0.5));\n  const index = Math.floor(distance / Math.pow(planetNamesLength - 1, 2));\n  return (planetNames[index - 1], planetNames[index]);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let res = [];\n  let sum = 0;\n  lst.forEach((item) => {\n    sum += item.length;\n  });\n  let l = lst.length;\n  let last = lst[l - 1];\n  let i = 0;\n  while (i < l) {\n    if (sum % 2 === 1) {\n      res.push(lst[i]);\n    }\n    sum = sum / 2;\n    i++;\n  }\n  return res;\n};\n\nexport {\n  sortedListSum,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  return xOrYPrime(n, x, y);\n};\n\nexport default xOrY;\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n\n  const result = lst.map(number => Math.pow(number, 2));\n  return result.reduce((prev, curr) => prev + curr, 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const [score, guess] = game;\n  const [correct, incorrect] = guess;\n  const correctArray = correct.map(c => c === score);\n  const incorrectArray = incorrect.map(c => c === score);\n  const correctLength = correctArray.length;\n  const incorrectLength = incorrectArray.length;\n  const answer = incorrectLength === 0? 0 : incorrectLength - correctLength;\n  return answer;\n};\n\n/*\n * \n * @description\n * @param {number[]}\n * @return {number[]}\n */\nconst sum = (array) => {\n  const sum = array.reduce((acc, num) => acc + num, 0);\n  return sum;\n};\n\n/*\n * \n * @description\n * @param {number[]}\n * @return {number[]}\n */\nconst avg = (array) => {\n  const sum = sum(array);\n  const avg = sum / array.length;\n  return avg;\n};\n\n/*\n * \n * @description\n * @param {number[]}\n * @return {number[]}\n */\nconst stdDev = (array) => {\n  const avg = avg(array);\n  const sum = array.reduce((acc, num) => acc + Math.pow(num - avg, 2), 0);\n  const stdDev = Math.sqrt(sum / array.length);\n  return stdDev;\n};\n\n/*\n * \n * @description\n * @param {number[]}\n * @return {number[]}\n */\nconst median = (array) => {\n  const arrayLength = array.length;\n  const half = Math.floor(arrayLength / 2);\n  const sorted = array.slice().sort((a, b) => a - b);\n  return sorted[half];\n};\n\n/*\n * \n * @description\n * @param {number[]}\n * @return {number[]}\n */\nconst mean = (array) => {\n  const sum = sum(array);\n  const mean = sum / array.length;\n  return mean;\n};\n\n/*\n * \n * @description\n * @param {number[]}\n * @return {number[]}\n */\nconst mode = (array) => {\n  const max = array.reduce((acc, num) => Math.max(acc, num), -Infinity);\n  const maxIndex = array.indexOf(max);\n  const mode = array.slice(maxIndex, maxIndex + 1);\n  return mode;\n};\n\n/*\n * \n * @description\n * @param {number[]}\n * @return {number[]}\n */\nconst modeCount = (array) => {\n  const max = array.reduce((acc, num) => Math.max(acc, num), -Infinity);\n  const maxIndex = array.indexOf(max);\n  const mode = array.slice(maxIndex, maxIndex + 1);\n  return mode.length;\n};\n\nexport {\n  compare,\n  sum,\n  avg,\n  stdDev,\n  median,\n  mean,\n  mode,\n  modeCount\n};\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n    const classNameParts = class_name.split(\".\");\n    const extensionName = classNameParts[1];\n    const extensionsMap = extensions.reduce((map, extension) => {\n        let extensionParts = extension.split(\".\");\n        map[extensionParts[1]] = extensionParts[0];\n        return map;\n    }, {});\n    let extensionNameIndex = 0;\n    const extensionStrength = extensions.reduce((strength, extension) => {\n        let extensionParts = extension.split(\".\");\n        let nameParts = extensionParts[0].split(\"_\");\n        let nameLength = nameParts.length;\n        let extensionStrength = nameLength - nameParts.filter((namePart) => {\n            return namePart.length === 1;\n        }).length;\n        strength += extensionStrength;\n        return strength;\n    }, 0);\n    return classNameParts.concat(extensionName).join(\".\");\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  const a1 = a.split(\"\").sort().join(\"\");\n  const b1 = b.split(\"\").sort().join(\"\");\n  const a1_len = a1.length;\n  const b1_len = b1.length;\n\n  for (let i = 0; i < a1_len; i++) {\n    for (let j = 0; j < b1_len; j++) {\n      if (a1[i] === b1[j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst isCyclic = (s) => {\n  const cyclicPatternCheck = cycpatternCheck(s,s);\n\n  return cyclicPatternCheck;\n};\n\nexport {isCyclic};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let numDigits = num.toString().length;\n  let oddCount = 0;\n  let evenCount = 0;\n\n  while (numDigits > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n    numDigits--;\n  }\n  return [evenCount, oddCount];\n};\n\nconst evenOddCount1 = (num) => {\n  let numDigits = num.toString().length;\n  let oddCount = 0;\n  let evenCount = 0;\n\n  while (numDigits > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n    numDigits--;\n  }\n  return [evenCount, oddCount];\n};\n\nconst evenOddCount2 = (num) => {\n  let numDigits = num.toString().length;\n  let oddCount = 0;\n  let evenCount = 0;\n\n  while (numDigits > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n    numDigits--;\n  }\n  return [evenCount, oddCount];\n};\n\nconst evenOddCount3 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numDigits = num.toString().length;\n\n  while (numDigits > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n    numDigits--;\n  }\n  return [evenCount, oddCount];\n};\n\nconst evenOddCount4 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numDigits = num.toString().length;\n\n  while (numDigits > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n    numDigits--;\n  }\n  return [evenCount, oddCount];\n};\n\nconst evenOddCount5 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numDigits = num.toString().length;\n\n  while (numDigits > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n    numDigits--;\n  }\n  return [evenCount, oddCount];\n};\n\nconst evenOddCount6 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numDigits = num.toString().length;\n\n  while (numDigits > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n    numDigits--;\n  }\n  return [evenCount, oddCount];\n};\n\nconst evenOddCount7 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numDigits = num.toString().length;\n\n  while (numDigits > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n    numDigits--;\n  }\n  return [evenCount, oddCount];\n};\n\nconst evenOddCount8 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numDigits = num.toString().length;\n\n  while (numDigits > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n    numDigits--;\n  }\n  return [evenCount, oddCount];\n};\n\nconst evenOddCount9 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numDigits = num.toString().length;\n\n  while (numDigits > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n    numDigits--;\n  }\n  return [evenCount, oddCount];\n};\n\nconst evenOddCount10 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numDigits = num.toString().length;\n\n  while (numDigits > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n    numDigits--;\n  }\n  return [evenCount, oddCount];\n};\n\nconst evenOddCount11 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numDigits = num.toString().length;\n\n  while (numDigits > 0) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n    numDigits--;\n  }\n  return [evenCount, oddCount];\n};\n\nconst evenOddCount12 = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let numDigits = num.toString().length;\n\n  while (numDigits > 0) {\n    if (num % 2 ==="}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number <= 0) {\n    return 'zero';\n  }\n  const digits = [\n    'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'\n  ];\n  const res = [];\n  for (let i = 0; i < digits.length; i++) {\n    let n = number;\n    while (n >= 1) {\n      n -= 1;\n      res.unshift(digits[i]);\n    }\n  }\n  return res.join('').toLowerCase();\n};\n\n/*\n  Given a roman numeral, return its integer value.\n  Roman numeral must be only one of the following: I, II, III, IV, V, VI, VII, VIII, IX, X, XII, XIII, XIV, XV, XVI, XIX, XX, and XXI.\n  Examples:\n  >>> miniRomanToInt('V') == 5\n  >>> miniRomanToInt('XV') == 17\n  >>> miniRomanToInt('XVI') == 16\n  */\nconst miniRomanToInt = (roman) => {\n  const nums = {\n    'M': 1,\n    'D': 5,\n    'C': 10,\n    'L': 50,\n    'X': 100,\n    'V': 500,\n    'I': 1000,\n  };\n  const res = 0;\n  for (let i = roman.length - 1; i >= 0; i--) {\n    res += nums[roman[i]] * Math.pow(10, roman.length - i - 1);\n  }\n  return res;\n};\n\n/*\n  Given a roman numeral, return its largest integer value.\n  Roman numeral must be only one of the following: I, II, III, IV, V, VI, VII, VIII, IX, X, XII, XIII, XIV, XV, XVI, XIX, XX, and XXI.\n  Examples:\n  >>> largestIntFromRoman('IX') == 19\n  >>> largestIntFromRoman('XVI') == 16\n  */\nconst largestIntFromRoman = (roman) => {\n  const res = 0;\n  for (let i = roman.length - 1; i >= 0; i--) {\n    res += Math.pow(10, roman.length - i - 1);\n  }\n  return res;\n};\n\nexport {\n  intToMiniRoman,\n  miniRomanToInt,\n  largestIntFromRoman\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    let side = ((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) >= 0)? Math.abs(((Math.pow(b, 2) - Math.pow(a, 2) - Math.pow(c, 2)) / (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)))) : 0;\n    return (side >= 1 && side <= Math.sqrt(3))? true : false;\n}\n\nconst rightAngleTriangle2 = (a, b, c) => {\n    let s1 = (a + b + c) / 2;\n    let s2 = (a + b - c) / 2;\n    let s3 = (a - b + c) / 2;\n    let s4 = (a - b - c) / 2;\n    let s5 = (a + c) / 2;\n    let s6 = (a - c) / 2;\n    let s7 = (b + c) / 2;\n    let s8 = (b - c) / 2;\n    let a1 = Math.abs(s1 - a);\n    let a2 = Math.abs(s2 - a);\n    let a3 = Math.abs(s3 - a);\n    let a4 = Math.abs(s4 - a);\n    let a5 = Math.abs(s5 - a);\n    let a6 = Math.abs(s6 - a);\n    let a7 = Math.abs(s7 - a);\n    let a8 = Math.abs(s8 - a);\n    let b1 = Math.abs(s1 - b);\n    let b2 = Math.abs(s2 - b);\n    let b3 = Math.abs(s3 - b);\n    let b4 = Math.abs(s4 - b);\n    let b5 = Math.abs(s5 - b);\n    let b6 = Math.abs(s6 - b);\n    let b7 = Math.abs(s7 - b);\n    let b8 = Math.abs(s8 - b);\n    let c1 = Math.abs(s1 - c);\n    let c2 = Math.abs(s2 - c);\n    let c3 = Math.abs(s3 - c);\n    let c4 = Math.abs(s4 - c);\n    let c5 = Math.abs(s5 - c);\n    let c6 = Math.abs(s6 - c);\n    let c7 = Math.abs(s7 - c);\n    let c8 = Math.abs(s8 - c);\n    let d1 = Math.abs(s1 - d);\n    let d2 = Math.abs(s2 - d);\n    let d3 = Math.abs(s3 - d);\n    let d4 = Math.abs(s4 - d);\n    let d5 = Math.abs(s5 - d);\n    let d6 = Math.abs(s6 - d);\n    let d7 = Math.abs(s7 - d);\n    let d8 = Math.abs(s8 - d);\n    let r = (a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + d1 + d2 + d3 + d4 + d5 + d6 + d7 + d8) / 18;\n    return (r >= 1)? true : false;\n}\n\nconst triangleArea = (a, b, c) => {\n    return Math.sqrt(((b - a) * (c - a) + (c - b) * (a - b)) / 2);\n}\n\nconst rightTriangle = (a, b, c) => {\n    let d = triangleArea(a, b, c);\n    return (d > 0)? true : false;\n}\n\nconst rightTriangle2 = (a, b, c) => {\n    let d = triangleArea(a, b, c);\n    return (d >= (a + b + c) / 2)? true : false;\n}\n\nconst rightTriangle3 = (a, b, c) => {\n    let d = triangleArea(a, b, c);\n    return (d >= (a * b) / 2 + (b * c) / 2 + (c * a) / 2)? true : false;\n}\n\nconst rightTriangle4 = (a, b, c, d) => {\n    let e = triangleArea(a, b, c);\n    return (e >= ((a + b) * (c + d)) / 2 + ((b + c) * (a + d)) / 2 + ((c + d) * (a + b)) / 2)? true : false;\n}\n\nconst rightTriangle5 = (a, b, c, d, e) => {\n    let f = triangleArea(a, b, c);\n    return (f >= ((a + b) * (c + d)) / 2 + ((b + c) * (a + d)) / 2 + ((c + d) * (a + b)) / 2 + ((a + b) * (e + d)) / 2 + ((b + c) * (e + d)) / 2 + ((c + d) * (e + b)) / 2 + ((a + b) * (e + c)) / 2 + ((b + c) * (e + a)) / 2 + ((c + d) * (e + a)) / 2 + ((a + b) * (d + c)) / 2 + ((b + c) * (d + a)) / 2 + ((c + d) * (d + b)) / 2 + ((a + b) * (c + e)) / 2 + ((b + c) * (c + e)) / 2 + ((c + d) * (a + e)) / 2 + (("}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  let max = 0;\n  let result = \"\";\n  let counter = {};\n  words.forEach(word => {\n    let charCount = 0;\n    for (let char of word) {\n      if (counter[char] === undefined) {\n        counter[char] = 1;\n      } else {\n        counter[char] += 1;\n      }\n      if (counter[char] > max) {\n        max = counter[char];\n        result = word;\n      }\n      charCount += 1;\n    }\n  });\n  return result;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"games\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number === 0) return [0, need]\n  const [eaten, remain] = eat(number - 1, need, remaining)\n  if (remain > 0) return [eaten + 1, remain]\n  else return [eaten, remaining]\n}\n\nconst number = 5\nconst need = 6\nconst remaining = 10\nconst [eaten, remain] = eat(number, need, remaining)\nconsole.log(eaten)\nconsole.log(remain)\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  // 1. check input\n  if (!operator ||!operand || (operator.length < 1 || operand.length < 2)) {\n    return undefined\n  }\n  // 2. check operator\n  let operatorLength = operator.length\n  let operatorCount = 0\n  for (let i = 0; i < operatorLength; i++) {\n    let operatorItem = operator[i]\n    if (!operatorItem) {\n      return undefined\n    }\n    if (operatorItem.length < 1) {\n      return undefined\n    }\n    operatorCount += operatorItem.length\n    for (let j = 0; j < operatorItem.length; j++) {\n      let operatorItemOperand = operatorItem[j]\n      if (operatorItemOperand < 0) {\n        return undefined\n      }\n    }\n  }\n  // 3. check operand\n  let operandLength = operand.length\n  let operandCount = 0\n  for (let i = 0; i < operandLength; i++) {\n    let operandItem = operand[i]\n    if (!operandItem) {\n      return undefined\n    }\n    if (operandItem.length < 1) {\n      return undefined\n    }\n    operandCount += operandItem.length\n    for (let j = 0; j < operandItem.length; j++) {\n      let operandItemOperand = operandItem[j]\n      if (operandItemOperand < 0) {\n        return undefined\n      }\n    }\n  }\n  // 4. do the work\n  let result = 0\n  for (let i = 0; i < operatorCount; i++) {\n    let operatorItem = operator[i]\n    let operatorCount = operatorItem.length\n    let operatorItemOperand = operatorItem[0]\n    let currentOperand = operand[operandCount]\n    let currentOperandCount = currentOperand.length\n    let carry = 0\n    for (let j = 0; j < currentOperandCount; j++) {\n      let currentOperandItem = currentOperand[j]\n      let currentOperandItemOperand = currentOperandItem[0]\n      let currentOperandItemOperandOperand = currentOperandItemOperand[0]\n      let currentOperandItemOperandOperandOperand = currentOperandItemOperandOperand[0]\n      let currentOperandItemOperandOperandOperandOperand = currentOperandItemOperandOperandOperand[0]\n      let currentOperandItemOperandOperandOperandOperandOperand = currentOperandItemOperandOperandOperandOperand[0]\n      let operandItemOperandOperand = operatorItemOperandOperandOperandOperandOperand[0]\n      let operandItemOperand = operatorItemOperandOperand[0]\n      let resultItem = (operandItemOperandOperandOperandOperand - currentOperandItemOperandOperandOperandOperandOperand) % 10\n      carry = (currentOperandItemOperandOperandOperandOperandOperand - resultItem) / 10\n      result = (operandItemOperandOperandOperandOperand - currentOperandItemOperandOperandOperandOperand) - carry * 10 + result\n    }\n    result = (carry + result) % 10\n    operandCount++\n  }\n  // 5. return result\n  return result\n}\n\n// test\n// console.log(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]))\n// console.log(doAlgebra(['*', '+', '-'], [2, 3, 4, 5]))\n// console.log(doAlgebra(['-', '+', '*', '-'], [2, 3, 4, 5]))\n// console.log(doAlgebra(['-', '-', '*', '*', '+'], [2, 3, 4, 5]))\n// console.log(doAlgebra(['+', '*', '-'], [2, 3, 4, 5, 6]))\n// console.log(doAlgebra(['*', '+', '-'], [2, 3, 4, 5, 6]))\n// console.log(doAlgebra(['*', '-', '+'], [2, 3, 4, 5, 6]))\n// console.log(doAlgebra(['*', '*', '-'], [2, 3, 4, 5, 6]))\n// console.log(doAlgebra(['*', '*', '+', '+'], [2, 3, 4, 5, 6]))\n// console.log(doAlgebra(['-', '-', '+', '*', '*', '+', '+'], [2, 3, 4, 5, 6]))\n// console.log(doAlgebra(['*', '-', '-', '+', '+', '*', '*', '+', '*', '+', '*'], [2, 3, 4, 5, 6]))\n// console.log(doAlgebra(['-', '-', '+', '*', '*', '+', '+', '*', '*', '+', '+', '*', '*', '+', '+', '+'], [2, 3, 4, 5, 6]))\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const { length } = s\n  let reversed = \"\"\n  for (let i = length - 1; i >= 0; i--) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      reversed += s[i].toLowerCase()\n    } else {\n      reversed += s[i].toUpperCase()\n    }\n  }\n  return reversed\n}\n\nconsole.log(solve(\"1234\"))\nconsole.log(solve(\"ab\"))\nconsole.log(solve(\"#a@C\"))\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  const hash = md5.update(text).digest('hex');\n  return hash;\n};\n\n/*\n  Gives a string 'text', return its sha256 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha256('Hello world') == 'b8b7f1afc4e3f2d7b2f6c7b8f0c9f2a74bca2d8f5b7a5cf3a9f1e4d5c0d7c7d6a2e7b7f7a7a1c9f3c9e2e'\n  */\nconst stringToSha256 = (text) => {\n  const sha256 = crypto.createHash('sha256');\n  const hash = sha256.update(text).digest('hex');\n  return hash;\n};\n\n/*\n  Returns the current date and time\n\n  >>> stringToDate('2015-12-29T18:59:28.000Z')\n  */\nconst stringToDate = (text) => {\n  const date = new Date(Date.parse(text));\n  return date.toISOString();\n};\n\n/*\n  Returns a random integer number.\n  This number will be between 0 and 'limit'\n\n  >>> randomInt(100, 200)\n  */\nconst randomInt = (limit) => {\n  const r = Math.floor(Math.random() * limit);\n  return r;\n};\n\n/*\n  Returns the md5 hashes of a string\n\n  >>> md5('Hello world')\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  const hash = md5.update(text).digest('hex');\n  return hash;\n};\n\n/*\n  Returns the sha256 hashes of a string\n\n  >>> sha256('Hello world')\n  */\nconst sha256 = (text) => {\n  const sha256 = crypto.createHash('sha256');\n  const hash = sha256.update(text).digest('hex');\n  return hash;\n};\n\n/*\n  Returns the date and time of a string\n\n  >>> stringToDate('2015-12-29T18:59:28.000Z')\n  */\nconst stringToDate = (text) => {\n  const date = new Date(Date.parse(text));\n  return date.toISOString();\n};\n\n/*\n  Returns a random integer number.\n  This number will be between 'from' and 'to'\n\n  >>> randomInt(100, 200)\n  */\nconst randomInt = (from, to) => {\n  const r = Math.floor(Math.random() * (to - from) + from);\n  return r;\n};\n\n/*\n  Returns the md5 hashes of a string\n\n  >>> md5('Hello world')\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  const hash = md5.update(text).digest('hex');\n  return hash;\n};\n\n/*\n  Returns the sha256 hashes of a string\n\n  >>> sha256('Hello world')\n  */\nconst sha256 = (text) => {\n  const sha256 = crypto.createHash('sha256');\n  const hash = sha256.update(text).digest('hex');\n  return hash;\n};\n\n/*\n  Returns the date and time of a string\n\n  >>> stringToDate('2015-12-29T18:59:28.000Z')\n  */\nconst stringToDate = (text) => {\n  const date = new Date(Date.parse(text));\n  return date.toISOString();\n};\n\n/*\n  Returns a random integer number.\n  This number will be between 'from' and 'to'\n\n  >>> randomInt(100, 200)\n  */\nconst randomInt = (from, to) => {\n  const r = Math.floor(Math.random() * (to - from) + from);\n  return r;\n};\n\n/*\n  Returns the md5 hashes of a string\n\n  >>> md5('Hello world')\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  const hash = md5.update(text).digest('hex');\n  return hash;\n};\n\n/*\n  Returns the sha256 hashes of a string\n\n  >>> sha256('Hello world')\n  */\nconst sha256 = (text) => {\n  const sha256 = crypto.createHash('sha256');\n  const hash = sha256.update(text).digest('hex');\n  return hash;\n};\n\n/*\n  Returns the date and time of a string\n\n  >>> stringToDate('2015-12-29T18:59:28.000Z')\n  */\nconst stringToDate = (text) => {\n  const date = new Date(Date.parse(text));\n  return date.toISOString();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const evenDigits = [];\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      evenDigits.push(digit);\n    }\n  }\n  return evenDigits;\n};\n\nconst generateAllIntegers = () => generateIntegers(1, 1e9);\n\n// ---------- Part Two ----------\n\n/*\n  For each digit in the number, multiply the number by 10 and then add the\n  digit to the result. The new number is the result of this multiplication.\n\n  For example:\n  generateIntegers(2, 8) => [20, 40, 60, 80]\n  generateIntegers(8, 2) => [20, 40, 60, 80]\n  generateIntegers(10, 14) => [1290, 1280, 1270, 1260]\n  generateIntegers(10, 12) => [1290, 1280, 1270, 1260]\n*/\nconst generateIntegersAgain = (a, b) => {\n  const allIntegers = generateAllIntegers();\n  return allIntegers.map((integer) => {\n    return integer * 10 + integer;\n  });\n};\n\nconst generateAllIntegersAgain = () => generateAllIntegers();\n\n// ---------- Part Three ----------\n\n/*\n  The final two integers you generated in part one and part two sum to\n  4,000,000,000. Find the sum of all the even-valued digits in the\n  number.\n*/\nconst generateEvenDigits = () => generateIntegersAgain(1, 9999);\n\nconst generateAllEvenDigits = () => generateEvenDigits();\n\nconst finalSum = (evenDigits) => {\n  const sum = evenDigits.reduce((acc, x) => acc + x, 0);\n  return sum;\n};\n\nconst finalSumAgain = () => finalSum(generateAllEvenDigits());\n\n// ---------- Part Four ----------\n\n/*\n  In addition to finding the sum of all the even-valued digits in the\n  number, also find the largest sum of even-valued digits in the number.\n\n  For example:\n  generateIntegers(2, 8) => [20, 40, 60, 80]\n  generateIntegers(8, 2) => [20, 40, 60, 80]\n  generateIntegers(10, 14) => [1290, 1280, 1270, 1260]\n  generateIntegers(10, 12) => [1290, 1280, 1270, 1260]\n\n  For example:\n  generateIntegersAgain(1, 9999) => [1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290]\n\n  For example:\n  generateAllIntegersAgain() => [1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290]\n*/\n\nconst findLargestSum = () => {\n  const largestSum = finalSum(generateAllEvenDigits());\n  return largestSum;\n};\n\n// ---------- Part Five ----------\n\nconst findLargestSumAgain = () => finalSumAgain();\n\nconst findLargestSumAgainAgain = () => findLargestSum();\n\n// ---------- Part Six ----------\n\nconst findLargestSumAllAgain = () => largestSumAgain();\n\nconst findLargestSumAllAgainAgain = () => findLargestSumAgain();\n\nconst findLargestSumAllAgainAgainAgain = () => findLargestSumAllAgain();\n<|endoftext|>"}
