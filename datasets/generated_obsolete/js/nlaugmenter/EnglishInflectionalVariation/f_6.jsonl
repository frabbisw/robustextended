{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length && j < numbers.length) {\n    const a = numbers[i];\n    const b = numbers[j];\n    if (Math.abs(a - b) < threshold) {\n      return true;\n    }\n    i++;\n    j++;\n  }\n  return false;\n};\n\n/* Check if in given number is larger than all numbers in given list, was any two numbers\n  closer to each other than threshold.\n  >>> hasLargerElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasLargerElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasLargerElements = (numbers, threshold) => {\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length && j < numbers.length) {\n    const a = numbers[i];\n    const b = numbers[j];\n    if (a < b) {\n      return false;\n    }\n    i++;\n    j++;\n  }\n  return true;\n};\n\n/* Check if in given number is larger than all numbers in given list, was any two numbers\n  closer to each other than threshold.\n  >>> hasLargerElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasLargerElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasLargerElementsThan = (numbers, threshold) => {\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length && j < numbers.length) {\n    const a = numbers[i];\n    const b = numbers[j];\n    if (a <= b) {\n      return false;\n    }\n    i++;\n    j++;\n  }\n  return true;\n};\n\n/* Check if in given number is smaller than all numbers in given list, was any two numbers\n  closer to each other than threshold.\n  >>> hasSmallerElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasSmallerElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasSmallerElements = (numbers, threshold) => {\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length && j < numbers.length) {\n    const a = numbers[i];\n    const b = numbers[j];\n    if (a > b) {\n      return false;\n    }\n    i++;\n    j++;\n  }\n  return true;\n};\n\n/* Check if in given number is smaller than all numbers in given list, was any two numbers\n  closer to each other than threshold.\n  >>> hasSmallerElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasSmallerElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasSmallerElementsThan = (numbers, threshold) => {\n  let i = 0;\n  let j = 0;\n  while (i < numbers.length && j < numbers.length) {\n    const a = numbers[i];\n    const b = numbers[j];\n    if (a >= b) {\n      return false;\n    }\n    i++;\n    j++;\n  }\n  return true;\n};\n\nexport default {\n  hasCloseElements,\n  hasLargerElements,\n  hasLargerElementsThan,\n  hasSmallerElements,\n  hasSmallerElementsThan,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const array = [];\n  const stack = [];\n  let paren_string_char = '';\n  let paren_string_chars = '';\n  const paren_string_regex = /[()]/g;\n  paren_string_chars = paren_string.replace(paren_string_regex, () => {\n    paren_string_char = '';\n    return paren_string_char;\n  });\n  paren_string_chars.split('').forEach(ch => {\n    if (ch === '(') {\n      stack.push(ch);\n    } else if (ch === ')') {\n      const temp_stack = stack.pop();\n      stack.push(temp_stack);\n    }\n  });\n  stack.forEach(element => {\n    array.push(element);\n  });\n  return array;\n};\n\nexport default separateParenGroups;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number.toString().split(/\\.(\\d+)/)[1].slice(0, -2)\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  return number.toString().split(/\\.(\\d+)/)[0].slice(0, -1)\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst roundNumber = (number) => {\n  return Math.round(number * 10) / 10\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst roundInteger = (number) => {\n  return Math.round(number)\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst ceilNumber = (number) => {\n  return Math.ceil(number)\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst ceilInteger = (number) => {\n  return Math.ceil(number)\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst floorNumber = (number) => {\n  return Math.floor(number)\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst floorInteger = (number) => {\n  return Math.floor(number)\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst modNumber = (number) => {\n  return number % 1\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst modInteger = (number) => {\n  return number % 1\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst minNumber = (number) => {\n  return Math.min(number, 2)\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst minInteger = (number) => {\n  return Math.min(number, 2)\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst maxNumber = (number) => {\n  return Math.max(number, 2)\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst maxInteger = (number) => {\n  return Math.max(number, 2)\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst sumNumber = (number) => {\n  return number + 1\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst sumInteger = (number) => {\n  return number + 1\n}\n\n/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the integer parts of the number.\n  >>> roundNumber(3.5)\n  3\n  */\nconst subNumber = (number) => {\n  return number - 1\n}\n\n/* Gives a positive floating point number, it can"}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const balance = [0,...operations].reduce((acc, curr) => acc + curr, 0)\n  return balance < 0\n}\n\nexport default belowZero\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const centerPoint = numbers[Math.floor(numbers.length / 2)];\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - centerPoint);\n  }\n  return sum / numbers.length;\n};\n\nexport default meanAbsoluteDeviation;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (typeof numbers === 'undefined' || numbers === null) return [];\n  if (typeof delimeter === 'undefined' || delimeter === null) return numbers;\n\n  let result = [];\n  let current = [];\n  let index = 0;\n  let length = numbers.length;\n  while (index < length) {\n    result.push(numbers[index]);\n    index++;\n    if (index < length) {\n      current.push(numbers[index]);\n      index++;\n    }\n    result.push(delimeter);\n    current.push(delimeter);\n  }\n\n  return result;\n};\n\n// export\n\nexport { intersperse };\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let stack = [paren_string];\n  let level = 0;\n  let max_level = 0;\n  while (stack.length > 0) {\n    let current_level = 0;\n    let current_group = stack.pop();\n    while (current_group.length > 0) {\n      if (current_group.charAt(0) === '(') {\n        current_level++;\n      }\n      else if (current_group.charAt(0) === ')') {\n        current_level--;\n      }\n      if (current_level === 0) {\n        return [current_level, max_level];\n      }\n      else {\n        stack.push(current_group);\n      }\n      current_group = current_group.substr(1, current_group.length - 1);\n    }\n    max_level = Math.max(current_level, max_level);\n  }\n  return [-1, -1];\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(substring) >= 0) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\nexport default filterBySubstring;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let number of numbers) {\n        sum += number\n        product *= number\n    }\n    return (sum, product)\n}\n\n// **********\n// ** TESTING **\n// **********\n\n// console.log('sumProduct(1, 2, 3, 4)', sumProduct(1, 2, 3, 4))\n// console.log('sumProduct([1, 2, 3, 4])', sumProduct([1, 2, 3, 4]))\n// console.log('sumProduct([])', sumProduct([1, 2, 3, 4]))\n// console.log('sumProduct([1])', sumProduct([1]))\n// console.log('sumProduct([1, 2])', sumProduct([1, 2]))\n// console.log('sumProduct([1, 2, 3, 4, 5, 6, 7])', sumProduct([1, 2, 3, 4, 5, 6, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let rollingMaxes = [];\n  let previousMax = Number.MIN_SAFE_INTEGER;\n\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number > previousMax) {\n      rollingMaxes.push(number);\n      previousMax = rollingMaxes[rollingMaxes.length - 1];\n    }\n  }\n  return rollingMaxes;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n    let postfix = string.split('').reverse().join('');\n    let prefix = string.split('').reverse().join('');\n    if (postfix === prefix) {\n        return postfix;\n    } else {\n        let first = string.slice(0, string.length - postfix.length);\n        let second = string.slice(string.length - postfix.length);\n        return first + postfix + second;\n    }\n}\n\n/* Finds the longer palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makePalindrome = (string) => {\n    let postfix = string.split('').reverse().join('');\n    let prefix = string.split('').reverse().join('');\n    if (postfix === prefix) {\n        return postfix;\n    } else {\n        let first = string.slice(0, string.length - postfix.length);\n        let second = string.slice(string.length - postfix.length);\n        return first + postfix + second;\n    }\n}\n\n/* Tests if two strings are anagram.\n  >>> isAnagram('cat', 'cata')\n  True\n  >>> isAnagram('cat', 'hat')\n  False\n  */\nconst isAnagram = (string1, string2) => {\n    let arr1 = string1.split('').map(v => parseInt(v));\n    let arr2 = string2.split('').map(v => parseInt(v));\n    let count = 0;\n    let arr = {};\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr[arr1[i]] === undefined) {\n            arr[arr1[i]] = 1;\n        } else {\n            arr[arr1[i]]++;\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr[arr2[i]] === undefined) {\n            arr[arr2[i]] = 0;\n        } else {\n            arr[arr2[i]]--;\n        }\n    }\n    for (let i in arr) {\n        count += arr[i];\n    }\n    return count === 0;\n}\n\n/* Tests if a string is a permutation of the supplied string.\n  >>> isPermutation('cata', 'cat')\n  True\n  >>> isPermutation('cata', 'cata')\n  True\n  >>> isPermutation('cata', 'dog')\n  False\n  */\nconst isPermutation = (string1, string2) => {\n    let arr1 = string1.split('');\n    let arr2 = string2.split('');\n    let arr = {};\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr[arr1[i]] === undefined) {\n            arr[arr1[i]] = 1;\n        } else {\n            arr[arr1[i]]++;\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr[arr2[i]] === undefined) {\n            arr[arr2[i]] = 0;\n        } else {\n            arr[arr2[i]]--;\n        }\n    }\n    for (let i in arr) {\n        if (arr[i]!== 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/* Tests if a string is a permutation of the supplied string.\n  >>> isPermutation('cata', 'cat')\n  True\n  >>> isPermutation('cata', 'cata')\n  True\n  >>> isPermutation('cata', 'dog')\n  False\n  */\nconst isPermutation = (string1, string2) => {\n    let arr1 = string1.split('');\n    let arr2 = string2.split('');\n    let arr = {};\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr[arr1[i]] === undefined) {\n            arr[arr1[i]] = 1;\n        } else {\n            arr[arr1[i]]++;\n        }\n    }\n    for (let i = 0; i < arr2.length; i++) {\n        if (arr[arr2[i]] === undefined) {\n            arr[arr2[i]] = 0;\n        } else {\n            arr[arr2[i]]--;\n        }\n    }\n    for (let i in arr) {\n        if (arr[i]!== 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/* Tests if a string is a permutation of the supplied string.\n  >>> isPermutation('cata', 'cat')\n  True\n  >>> isPermutation('cata', 'cata')\n  True\n  >>> isPermutation('cata', 'dog')\n  False\n  */\nconst isPermutation = (string1, string2) => {\n    let arr1 = string1.split('');\n    let arr2 = string2.split('');\n    let arr = {};\n    for (let i = 0; i < arr1.length; i++) {\n        if (arr[arr1[i]] === undefined) {\n            arr[arr1["}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const result = [];\n  for (let i = 0; i < aLength; i++) {\n    const aBit = a.charAt(i);\n    const bBit = b.charAt(i);\n    result.push(`${aBit ^ bBit}`);\n  }\n  return result.join('');\n};\n\nmodule.exports = stringXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  const max = (a, b) => a > b? a : b;\n  const findMax = (list) => list.reduce((a, b) => max(a, b.length), 0);\n\n  return (strings) => {\n    const list = strings.map(string => string.length);\n    return findMax(list)? list[list.indexOf(findMax(list))] : null;\n  };\n};\n\nconsole.log(longest(['a', 'bb', 'ccc']));\n// → 'ccc'\nconsole.log(longest(['a', 'b', 'c']));\n// → 'b'\nconsole.log(longest(['a', '', 'b']));\n// → null\nconsole.log(longest([]));\n// → null\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let temp = a;\n  while (b!= 0) {\n    temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n};\n\n/* Return a prime factor of n\n  >>> primeFactor(12)\n  2\n  >>> primeFactor(20)\n  5\n  >>> primeFactor(120)\n  2\n  >>> primeFactor(2000)\n  2\n  >>> primeFactor(5000)\n  5\n  >>> primeFactor(8192)\n  2\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  1\n  >>> primeFactor(20)\n  1\n  >>> primeFactor(120)\n  1\n  >>> primeFactor(2000)\n  1\n  >>> primeFactor(5000)\n  1\n  >>> primeFactor(8192)\n  1\n  >>> primeFactor(12)\n  "}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [''];\n  let currentPrefix = '';\n  let currentPrefixLength = 0;\n  for (let i = 0; i < string.length; i++) {\n    currentPrefix += string[i];\n    if (currentPrefixLength < currentPrefix.length) {\n      prefixes.push(currentPrefix);\n      currentPrefix = currentPrefix.substr(currentPrefixLength + 1);\n    } else {\n      currentPrefix = '';\n    }\n    currentPrefixLength = currentPrefix.length;\n  }\n  return prefixes;\n};\n\nmodule.exports = {\n  allPrefixes\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const res = []\n  for (let i = 0; i <= n; i++) {\n    res.push(i)\n  }\n  return res.join(' ')\n}\n\n// Challenge Input\n/*\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n*/\n\n/*\n  Challenge Output\n*/\n\n// Challenge Input\n/*\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charMap = {};\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    let c = string.charAt(i);\n    if (charMap.hasOwnProperty(c)) {\n      charMap[c]++;\n    } else {\n      charMap[c] = 1;\n    }\n  }\n  for (let i in charMap) {\n    if (charMap.hasOwnProperty(i)) {\n      count += charMap[i];\n    }\n  }\n  return count;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let last_beat_number = 0;\n  let last_note = 0;\n  let result = [];\n  let char;\n  for (let i = 0; i < music_string.length; i++) {\n    char = music_string[i];\n    if (char === 'o') {\n      if (last_beat_number === 0) {\n        last_note = 1;\n      }\n      last_beat_number++;\n    } else if (char === '|') {\n      last_beat_number = 0;\n      last_note = 0;\n    } else {\n      last_beat_number = 0;\n      last_note = 0;\n    }\n    if (last_beat_number === 4) {\n      result.push(last_note);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string representing musical notes in ASCII, return the sum of all of them.\n  Here is a legend:\n    'o' - whole notes,\n    'o|' - halves notes,\n    '.' - quater notes,\n    '|' - eighth notes,\n    'x' - sixteenth notes,\n    '+' - 32nd notes,\n    '-' - 64th notes,\n    'o+' - 128th notes.\n  */\nconst sumMusic = (music_string) => {\n  let result = 0;\n  for (let i = 0; i < music_string.length; i++) {\n    result += parseMusic(music_string[i]);\n  }\n  return result;\n};\n\n/*\n  Given a string representing musical notes in ASCII, return the difference between each not of the two before it and the not after it.\n  Here is a legend:\n    'o' - whole notes,\n    'o|' - halves notes,\n    '.' - quater notes,\n    '|' - eighth notes,\n    'x' - sixteenth notes,\n    '+' - 32nd notes,\n    '-' - 64th notes,\n    'o+' - 128th notes.\n  */\nconst differenceMusic = (music_string) => {\n  let result = 0;\n  let last_beat_number = 0;\n  for (let i = 0; i < music_string.length; i++) {\n    let char = music_string[i];\n    if (char === 'o') {\n      if (last_beat_number === 0) {\n        last_beat_number = 1;\n      }\n      last_beat_number++;\n    } else if (char === '|') {\n      last_beat_number = 0;\n    } else {\n      last_beat_number = 0;\n    }\n    if (last_beat_number === 4) {\n      result += parseMusic(music_string[i + 1]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string representing musical notes in ASCII, return the difference between the first and the last not.\n  Here is a legend:\n    'o' - whole notes,\n    'o|' - halves notes,\n    '.' - quater notes,\n    '|' - eighth notes,\n    'x' - sixteenth notes,\n    '+' - 32nd notes,\n    '-' - 64th notes,\n    'o+' - 128th notes.\n  */\nconst differenceLastMusic = (music_string) => {\n  let result = 0;\n  let last_beat_number = 0;\n  let char;\n  for (let i = 0; i < music_string.length; i++) {\n    char = music_string[i];\n    if (char === 'o') {\n      if (last_beat_number === 0) {\n        last_beat_number = 1;\n      }\n      last_beat_number++;\n    } else if (char === '|') {\n      last_beat_number = 0;\n    } else {\n      last_beat_number = 0;\n    }\n    if (last_beat_number === 4) {\n      result += parseMusic(music_string[i - 1]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string representing musical notes in ASCII, return the total duration of the song.\n  Here is a legend:\n    'o' - whole notes,\n    'o|' - halves notes,\n    '.' - quater notes,\n    '|' - eighth notes,\n    'x' - sixteenth notes,\n    '+' - 32nd notes,\n    '-' - 64th notes,\n    'o+' - 128th notes.\n  */\nconst durationMusic = (music_string) => {\n  let result = 0;\n  let last_beat_number = 0;\n  for (let i = 0; i < music_string.length; i++) {\n    let char = music_string[i];\n    if (char === 'o') {\n      if (last_beat_number === 0) {\n        last_beat_number = 1;\n      }\n      last_beat_number++;\n    } else if (char === '|') {\n      last_beat_number = 0;\n    } else {\n      last_beat_number = 0;\n    }\n    if (last_beat_number === 4) {\n      result += differenceLastMusic(music_string[i - 1]);\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string representing musical notes in ASCII, return the number of the notes.\n  Here is a legend:\n    'o' - whole notes,\n    'o|' - halves notes,\n    '.' - quater notes,\n    '|' - eighth notes,\n    'x' - sixteenth notes,\n    '+' - 32nd notes,\n    '-' - 64th notes,\n    'o+' - 128th notes.\n  */\nconst numberMusic = (music_string) => {\n  let result ="}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  while (string.indexOf(substring)!== -1) {\n    count++;\n    string = string.replace(substring, '');\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    return numbers.split(' ').sort((a, b) => {\n        if (a.length > b.length) {\n            return 1;\n        } else if (a.length < b.length) {\n            return -1;\n        } else {\n            return 0;\n        }\n    });\n};\n\n/*\n  Problem 7\n  Input: \"PAYPALISHIRING\"\n  Output: \"PALISAHIRING PAYPAL\"\n  Find the minimum number of steps required to convert 'PAYPALISHIRING' to 'PALISAHIRING PAYPAL' using only two shuffles.\n  */\nconst convertPayPal = (string) => {\n    let current = string.toUpperCase();\n    let prev = current.slice(1, current.length);\n    let prev2 = current.slice(2, current.length);\n    let prev3 = current.slice(3, current.length);\n    let prev4 = current.slice(4, current.length);\n    let prev5 = current.slice(5, current.length);\n    let prev6 = current.slice(6, current.length);\n    let prev7 = current.slice(7, current.length);\n    let prev8 = current.slice(8, current.length);\n    let prev9 = current.slice(9, current.length);\n    let prev10 = current.slice(10, current.length);\n    let prev11 = current.slice(11, current.length);\n    let prev12 = current.slice(12, current.length);\n    let prev13 = current.slice(13, current.length);\n    let prev14 = current.slice(14, current.length);\n    let prev15 = current.slice(15, current.length);\n    let prev16 = current.slice(16, current.length);\n    let prev17 = current.slice(17, current.length);\n    let prev18 = current.slice(18, current.length);\n    let prev19 = current.slice(19, current.length);\n    let prev20 = current.slice(20, current.length);\n    let prev21 = current.slice(21, current.length);\n    let prev22 = current.slice(22, current.length);\n    let prev23 = current.slice(23, current.length);\n    let prev24 = current.slice(24, current.length);\n    let prev25 = current.slice(25, current.length);\n    let prev26 = current.slice(26, current.length);\n    let prev27 = current.slice(27, current.length);\n    let prev28 = current.slice(28, current.length);\n    let prev29 = current.slice(29, current.length);\n    let prev30 = current.slice(30, current.length);\n    let prev31 = current.slice(31, current.length);\n    let prev32 = current.slice(32, current.length);\n    let prev33 = current.slice(33, current.length);\n    let prev34 = current.slice(34, current.length);\n    let prev35 = current.slice(35, current.length);\n    let prev36 = current.slice(36, current.length);\n    let prev37 = current.slice(37, current.length);\n    let prev38 = current.slice(38, current.length);\n    let prev39 = current.slice(39, current.length);\n    let prev40 = current.slice(40, current.length);\n    let prev41 = current.slice(41, current.length);\n    let prev42 = current.slice(42, current.length);\n    let prev43 = current.slice(43, current.length);\n    let prev44 = current.slice(44, current.length);\n    let prev45 = current.slice(45, current.length);\n    let prev46 = current.slice(46, current.length);\n    let prev47 = current.slice(47, current.length);\n    let prev48 = current.slice(48, current.length);\n    let prev49 = current.slice(49, current.length);\n    let prev50 = current.slice(50, current.length);\n    let prev51 = current.slice(51, current.length);\n    let prev52 = current.slice(52, current.length);\n    let prev53 = current.slice(53, current.length);\n    let prev54 = current.slice(54, current.length);\n    let prev55 = current.slice(55, current.length);\n    let prev56 = current.slice(56, current.length);\n    let prev57 = current.slice(57, current.length);\n    let prev58 = current.slice(58, current.length);\n    let prev59 = current.slice(59, current.length);\n    let prev60 = current.slice(60, current.length);\n    let prev61 = current.slice(61, current.length);\n    let prev62 = current.slice(62, current.length);\n    let prev63 = current.slice(63, current.length);\n    let prev64 = current.slice(64, current.length);\n    let prev65 = current.slice(65, current.length);\n    let prev66 = current.slice(66, current.length);\n    let prev67 = current.slice(67, current.length);\n    let prev68 = current.slice(68, current.length);\n    let prev69 = current.slice(69, current.length);\n    let prev70 = current.slice(70, current.length);\n    let prev71 = current.slice(71, current.length);\n    let prev72 = current.slice(72, current.length);\n    let prev73 = current.slice(73, current.length);\n    let prev74 = current.slice(74, current.length);\n    let prev75 = current.slice(75, current.length);\n    let prev76 = current.slice(76, current.length);\n    let prev77 = current.slice(77, current.length);\n    let prev78 = current.slice(78, current.length);\n    let prev79 = current.slice(79, current.length);\n    let prev"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let closestPair = [0, 0];\n  let minPair = [0, 0];\n  let min = Infinity;\n  numbers.forEach((x, index) => {\n    let distance = Math.abs(closestPair[0] - x);\n    if (distance < min) {\n      min = distance;\n      minPair = [index, x];\n    }\n  });\n  return [minPair[1], closestPair[1]];\n}\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  let closestPair = [0, 0];\n  let minPair = [0, 0];\n  let min = Infinity;\n  numbers.forEach((x, index) => {\n    let distance = Math.abs(closestPair[0] - x);\n    if (distance < min) {\n      min = distance;\n      minPair = [index, x];\n    }\n  });\n  return [minPair[1], closestPair[1]];\n}\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements3 = (numbers) => {\n  let closestPair = [0, 0];\n  let minPair = [0, 0];\n  let min = Infinity;\n  numbers.forEach((x, index) => {\n    let distance = Math.abs(closestPair[0] - x);\n    if (distance < min) {\n      min = distance;\n      minPair = [index, x];\n    }\n  });\n  return [minPair[1], closestPair[1]];\n}\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements4 = (numbers) => {\n  let closestPair = [0, 0];\n  let minPair = [0, 0];\n  let min = Infinity;\n  numbers.forEach((x, index) => {\n    let distance = Math.abs(closestPair[0] - x);\n    if (distance < min) {\n      min = distance;\n      minPair = [index, x];\n    }\n  });\n  return [minPair[1], closestPair[1]];\n}\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  let closestPair = [0, 0];\n  let minPair = [0, 0];\n  let min = Infinity;\n  numbers.forEach((x, index) => {\n    let distance = Math.abs(closestPair[0] - x);\n    if (distance < min) {\n      min = distance;\n      minPair = [index, x];\n    }\n  });\n  return [minPair[1], closestPair[1]];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return numbers.map((value) => value - min)\n   .map(value => value / (max - min))\n   .map((value) => value * (1 - min) + min);\n};\n\n/**\n * Given a list of numbers, give a list of numbers that will\n * produce a log-scale.  This is useful when you want to plot\n * the log-scale of your data.\n  >>> logScale( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] )\n  [-1.0, -0.5, -0.25, 0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75]\n  */\nconst logScale = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return [Math.log(min), Math.log(max), Math.log(max) - Math.log(min)];\n};\n\n/**\n * Given a list of numbers, give a list of numbers that will\n * produce a log-scale.  This is useful when you want to plot\n * the log-scale of your data.\n  >>> logScale( [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] )\n  [-1.0, -0.5, -0.25, 0.0, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75]\n  */\nconst inverseLogScale = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  return [Math.exp(min), Math.exp(max), Math.exp(max) - Math.exp(min)];\n};\n\nexport {\n  rescaleToUnit,\n  logScale,\n  inverseLogScale\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\nconst filterStringsOrIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number' || typeof value ==='string';\n  });\n};\n\nconst filterNone = (values) => {\n  return values.filter((value) => {\n    return value!== null && value!== undefined;\n  });\n};\n\nconst filterNoneOrIntegers = (values) => {\n  return values.filter((value) => {\n    return value!== null && value!== undefined && typeof value === 'number';\n  });\n};\n\nconst filterNoneOrStrings = (values) => {\n  return values.filter((value) => {\n    return value!== null && value!== undefined && typeof value ==='string';\n  });\n};\n\nconst filterNoneOrStringsOrIntegers = (values) => {\n  return values.filter((value) => {\n    return value!== null && value!== undefined && typeof value === 'number' || typeof value ==='string';\n  });\n};\n\nconst filterNoneOrStringsOrIntegersOrNone = (values) => {\n  return values.filter((value) => {\n    return value!== null && value!== undefined && typeof value === 'number' || typeof value ==='string' || value === null;\n  });\n};\n\nconst filterNoneOrIntegersOrNone = (values) => {\n  return values.filter((value) => {\n    return value!== null && value!== undefined && typeof value === 'number' || value === null;\n  });\n};\n\nconst filterNoneOrStringsOrNone = (values) => {\n  return values.filter((value) => {\n    return value!== null && value!== undefined && typeof value ==='string' || value === null;\n  });\n};\n\nconst filterNoneOrNone = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined;\n  });\n};\n\nconst filterNoneOrNoneOrIntegers = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined || typeof value === 'number';\n  });\n};\n\nconst filterNoneOrNoneOrStrings = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined || typeof value ==='string';\n  });\n};\n\nconst filterNoneOrNoneOrStringsOrIntegers = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined || typeof value ==='string' || typeof value === 'number';\n  });\n};\n\nconst filterNoneOrNoneOrNone = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined;\n  });\n};\n\nconst filterNoneOrNoneOrNone = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined;\n  });\n};\n\nconst filterNoneOrNoneOrNoneOrIntegers = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined || typeof value === 'number';\n  });\n};\n\nconst filterNoneOrNoneOrNoneOrStrings = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined || typeof value ==='string';\n  });\n};\n\nconst filterNoneOrNoneOrNoneOrNone = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined;\n  });\n};\n\nconst filterNoneOrNoneOrNoneOrNone = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined;\n  });\n};\n\nconst filterNoneOrNoneOrNoneOrNoneOrIntegers = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined || typeof value === 'number';\n  });\n};\n\nconst filterNoneOrNoneOrNoneOrNoneOrStrings = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined || typeof value ==='string';\n  });\n};\n\nconst filterNoneOrNoneOrNoneOrNoneOrNone = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined;\n  });\n};\n\nconst filterNoneOrNoneOrNoneOrNoneOrNone = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined;\n  });\n};\n\nconst filterNoneOrNoneOrNoneOrNoneOrNoneOrIntegers = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined || typeof value === 'number';\n  });\n};\n\nconst filterNoneOrNoneOrNoneOrNoneOrNoneOrStrings = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined || typeof value ==='string';\n  });\n};\n\nconst filterNoneOrNoneOrNoneOrNoneOrNoneOrNone = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined;\n  });\n};\n\nconst filterNoneOrNoneOrNoneOrNoneOrNoneOrNone = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined;\n  });\n};\n\nconst filterNoneOrNoneOrNoneOrNoneOrNoneOrNoneOrIntegers = (values) => {\n  return values.filter((value) => {\n    return value === null || value === undefined || typeof value === 'number';\n  });\n};\n\nconst filterNoneOrNoneOrNoneOrNoneOrNoneOrNoneOrStrings = (values"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    return string.length;\n};\n\nexport default strlen;\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let result = 1\n  while (n % result!== 0) {\n    result += 1\n  }\n  return result\n}\n\n/*\n  Function to find the smallest divisor of a given number\n  >>> smallestDivisor(15)\n  3\n  >>> smallestDivisor(12)\n  2\n  >>> smallestDivisor(5)\n  1\n  >>> smallestDivisor(7)\n  1\n  >>> smallestDivisor(10)\n  1\n  >>> smallestDivisor(100)\n  1\n  >>> smallestDivisor(900)\n  1\n  >>> smallestDivisor(1000)\n  1\n  >>> smallestDivisor(5000)\n  1\n  >>> smallestDivisor(10000)\n  1\n  >>> smallestDivisor(100000)\n  1\n  >>> smallestDivisor(200000)\n  1\n  >>> smallestDivisor(500000)\n  1\n  >>> smallestDivisor(1000000)\n  1\n  >>> smallestDivisor(1500000)\n  1\n  >>> smallestDivisor(1500001)\n  1\n  >>> smallestDivisor(100000000)\n  1\n  >>> smallestDivisor(1000000000)\n  1\n  >>> smallestDivisor(1500000000)\n  1\n  >>> smallestDivisor(15000000000)\n  1\n  >>> smallestDivisor(150000000000)\n  1\n  >>> smallestDivisor(1500000000000)\n  1\n  >>> smallestDivisor(15000000000000)\n  1\n  >>> smallestDivisor(150000000000000)\n  1\n  >>> smallestDivisor(1500000000000000)\n  1\n  >>> smallestDivisor(15000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(15000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(1500000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1\n  >>> smallestDivisor(150000000000000000000000000000000000000000000000000000000000000000"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let num = n;\n  let prime = false;\n\n  while (num > 1) {\n    for (let i = 2; i < Math.sqrt(num); i++) {\n      if (num % i === 0) {\n        if (prime) {\n          factors.push(i);\n        } else {\n          prime = true;\n          factors.push(i);\n        }\n        num = num / i;\n      }\n    }\n    if (num > 1) {\n      prime = false;\n      factors.push(num);\n      num = 1;\n    }\n  }\n  return factors;\n};\n\nmodule.exports = factorize;\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueNumbers = new Set(numbers);\n  return [...uniqueNumbers];\n}\n\nexport {removeDuplicates};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n    return string.split('').map((char) => {\n        return char.toUpperCase() === char.toLowerCase()? char.toUpperCase() : char.toLowerCase();\n    }).join('');\n};\n\n/*\n  * Returns the first letter of the string.\n  * Example:\n    >>> firstLetter('hello')\n    'H'\n    >>> firstLetter('world')\n    'W'\n    */\nconst firstLetter = (string) => {\n    return string.charAt(0);\n};\n\n/*\n  * Returns a new string with each character in string lowercased.\n  * Example:\n    >>> lowerCase('Hello')\n    'hello'\n    >>> lowerCase('World')\n    'world'\n    */\nconst lowerCase = (string) => {\n    return string.toLowerCase();\n};\n\n/*\n  * Returns a new string with each character in string uppercased.\n  * Example:\n    >>> upperCase('Hello')\n    'HELLO'\n    >>> upperCase('World')\n    'WORLD'\n    */\nconst upperCase = (string) => {\n    return string.toUpperCase();\n};\n\n/*\n  * Returns the first two letters of the string.\n  * Example:\n    >>> firstTwo('Hello')\n    'HL'\n    >>> firstTwo('World')\n    'WR'\n    */\nconst firstTwo = (string) => {\n    return string.substring(0, 2);\n};\n\n/*\n  * Returns a new string with each character in string capitalized.\n  * Example:\n    >>> capitalize('Hello')\n    'Hello'\n    >>> capitalize('World')\n    'World'\n    */\nconst capitalize = (string) => {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n};\n\n/*\n  * Returns a new string with each character in string capitalized and with all characters in the string lowercased.\n  * Example:\n    >>> upperAndLowerCase('Hello')\n    'hello'\n    >>> upperAndLowerCase('World')\n    'world'\n    */\nconst upperAndLowerCase = (string) => {\n    return flipCase(upperCase(firstTwo(string)));\n};\n\n/*\n  * Returns a new string with each character in string capitalized and with all characters in the string lowercased.\n  * Example:\n    >>> upperAndLowerCase('Hello')\n    'hello'\n    >>> upperAndLowerCase('World')\n    'world'\n    */\nconst upperAndLowerCase = (string) => {\n    return upperCase(lowerCase(firstTwo(string)));\n};\n\n/*\n  * Returns a new string with each character in string capitalized and with all characters in the string lowercased.\n  * Example:\n    >>> upperAndLowerCase('Hello')\n    'Hello'\n    >>> upperAndLowerCase('World')\n    'World'\n    */\nconst upperAndLowerCase = (string) => {\n    return firstTwo(upperCase(lowerCase(firstTwo(string))));\n};\n\n/*\n  * Returns a new string with each character in string capitalized and with all characters in the string lowercased.\n  * Example:\n    >>> upperAndLowerCase('Hello')\n    'Hello'\n    >>> upperAndLowerCase('World')\n    'World'\n    */\nconst upperAndLowerCase = (string) => {\n    return firstTwo(upperCase(lowerCase(firstTwo(string))));\n};\n\n/*\n  * Returns a new string with each character in string capitalized and with all characters in the string lowercased.\n  * Example:\n    >>> upperAndLowerCase('Hello')\n    'Hello'\n    >>> upperAndLowerCase('World')\n    'World'\n    */\nconst upperAndLowerCase = (string) => {\n    return firstTwo(upperCase(lowerCase(firstTwo(string))));\n};\n\n/*\n  * Returns a new string with each character in string capitalized and with all characters in the string lowercased.\n  * Example:\n    >>> upperAndLowerCase('Hello')\n    'Hello'\n    >>> upperAndLowerCase('World')\n    'World'\n    */\nconst upperAndLowerCase = (string) => {\n    return firstTwo(upperCase(lowerCase(firstTwo(string))));\n};\n\n/*\n  * Returns a new string with each character in string capitalized and with all characters in the string lowercased.\n  * Example:\n    >>> upperAndLowerCase('Hello')\n    'Hello'\n    >>> upperAndLowerCase('World')\n    'World'\n    */\nconst upperAndLowerCase = (string) => {\n    return firstTwo(upperCase(lowerCase(firstTwo(string))));\n};\n\n/*\n  * Returns a new string with each character in string capitalized and with all characters in the string lowercased.\n  * Example:\n    >>> upperAndLowerCase('Hello')\n    'Hello'\n    >>> upperAndLowerCase('World')\n    'World'\n    */\nconst upperAndLowerCase = (string) => {\n    return firstTwo(upperCase(lowerCase(firstTwo(string))));\n};\n\n/*\n  * Returns a new string with each character in string capitalized and with all characters in the string lowercased.\n  * Example:\n    >>> upperAndLowerCase('Hello')\n    'Hello'\n    >>> upperAndLowerCase('World')\n    'World'\n    */\nconst upperAndLowerCase = (string) => {\n    return firstTwo(upperCase(lowerCase(firstTwo(string))));\n};\n\n/*\n  * Returns a new string with each character in string capitalized and with all characters in the string lowercased.\n  * Example:\n    >>> upperAndLowerCase('Hello')\n    'Hello'\n    >>> upperAndLowerCase('World')\n    'World'\n    */\nconst upperAndLowerCase = (string) => {\n    return firstTwo(upperCase(lowerCase(firstTwo(string))));\n};\n\n/*\n  * Returns a new string with each character in string capitalized and with all characters in the string lowercased.\n  * Example:\n    >>> upperAndLowerCase('Hello')\n    'Hello'\n    >>> upperAndLowerCase('World')\n    'World'\n    */\nconst upperAndLowerCase ="}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if(strings.length === 0)\n    return ''\n  let result = strings[0]\n  for(let i = 1; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\n/*\n  Given a string and a list of strings, return a list of all the\n  strings in the list that can be formed by concatenating the\n  first string with the rest of the strings\n  >>> concatenate('abcd', ['efgh', 'ijkl'])\n  ['abcd', 'efgh', 'ijkl']\n  >>> concatenate('abcd', ['efgh', 'ijkl'])\n  ['abcd', 'efgh', 'ijkl']\n  */\nconst concatenateWith = (first, rest) => {\n  let result = [first]\n  for(let i = 0; i < rest.length; i++) {\n    result = concatenate(result, rest[i])\n  }\n  return result\n}\n\n/*\n  Given two lists, return a list of all the tuples in the first\n  list that can be formed by concatenating the first list with\n  the second list\n  >>> concatenateWith([1, 2, 3], [4, 5, 6])\n  [[1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6]]\n  >>> concatenateWith([1, 2, 3], [4, 5, 6])\n  [[1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6]]\n  */\nconst concatenateWith = (first, rest) => {\n  let result = [first]\n  for(let i = 0; i < rest.length; i++) {\n    result = concatenateWith(result, rest[i])\n  }\n  return result\n}\n\n/*\n  Given a list of strings, return a list of all the\n  strings in the list that can be formed by concatenating the\n  strings in reverse order\n  >>> concatenateReversed([1, 2, 3])\n  ['3', '2', '1']\n  >>> concatenateReversed([1, 2, 3])\n  ['3', '2', '1']\n  */\nconst concatenateReversed = (strings) => {\n  if(strings.length === 0)\n    return []\n  let result = [strings[strings.length - 1]]\n  for(let i = strings.length - 2; i >= 0; i--) {\n    result = concatenate(result, strings[i])\n  }\n  return result\n}\n\n/*\n  Given a list of lists, return a list of all the tuples in the\n  first list that can be formed by concatenating the lists in\n  reverse order\n  >>> concatenateReversed([[1, 2], [3, 4, 5]])\n  [[5, 4, 3], [2, 1]]\n  >>> concatenateReversed([[1, 2], [3, 4, 5]])\n  [[5, 4, 3], [2, 1]]\n  */\nconst concatenateReversed = (lists) => {\n  if(lists.length === 0)\n    return []\n  let result = [lists[lists.length - 1]]\n  for(let i = lists.length - 2; i >= 0; i--) {\n    result = concatenate(result, lists[i])\n  }\n  return result\n}\n\n/*\n  Given a list of lists, return a list of lists that\n  contain the concatenation of the lists in the first list with\n  the lists in the rest\n  >>> concatenateLists([[1, 2], [3, 4, 5]])\n  [[1, 2], [1, 2], [3, 4, 5]]\n  >>> concatenateLists([[1, 2], [3, 4, 5]])\n  [[1, 2], [1, 2], [3, 4, 5]]\n  */\nconst concatenateLists = (lists) => {\n  if(lists.length === 0)\n    return []\n  let result = [[lists[0][0]]]\n  for(let i = 1; i < lists.length; i++) {\n    result = concatenate(result, lists[i])\n  }\n  return result\n}\n\n/*\n  Given a list of lists, return a list of lists that\n  contain the concatenation of the lists in the first list with\n  the lists in the rest in reverse order\n  >>> concatenateListsReversed([[1, 2], [3, 4, 5]])\n  [[5, 4, 3], [2, 1]]\n  >>> concatenateListsReversed([[1, 2], [3, 4, 5]])\n  [[5, 4, 3], [2, 1]]\n  */\nconst concatenateListsReversed = (lists) => {\n  if(lists.length === 0)\n    return []\n  let result = [[lists[lists.length - 1][0]]]\n  for(let i = lists.length - 2; i >= 0; i--) {\n    result = concatenate(result, lists[i])\n  }\n  return result\n}\n\n/*\n  Given a list of lists, return a list of lists that\n  contain the concatenation of the lists in the first list with\n  the lists in the rest in reverse order\n  >>> concatenateListsReversed([[1, 2], [3, 4, 5]])\n  [[5, 4, 3], [2, 1]]\n  >>> concatenateListsReversed([[1, 2], [3, 4, 5]])\n  [[5, 4, 3], [2, 1]]\n  */\nconst concatenateListsReversed = (lists) => {\n  if(lists.length === 0)\n    return []\n  let result = [[lists[0][0]]]\n  for(let i = 1; i < lists.length; i++) {\n    result = concatenate(result"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n  * Filter an input list of strings by the given prefix.\n  * @param  {Array} strings - The list of strings to be filtered\n  * @param  {string} prefix - The prefix to search for\n  * @return {Array}          - The filtered list of strings\n  * @example\n  * // Filter an input list of strings only for ones that start with a gives prefix.\n  * filterByPrefix([], 'a')\n  * // => []\n  * filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  * // => ['abc', 'array']\n  * filterByPrefix(['a', 'b', 'c'], 'a')\n  * // => ['a', 'b', 'c']\n  */\nexport const filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/**\n  * Converts a list of strings to a hash with the string as the key and the number as the value.\n  * @param  {Array} strings - The list of strings to be converted\n  * @return {Object}         - The converted hash\n  * @example\n  * convertToHash([])\n  * // => {}\n  * convertToHash(['a', 'b', 'c'])\n  * // => {a: 1, b: 1, c: 1}\n  * convertToHash(['a', 'b', 'c'], '_')\n  * // => {a: '_', b: '_', c: '_'}\n  * convertToHash(['a', 'b', 'c'],'')\n  * // => {a:'', b:'', c:''}\n  */\nexport const convertToHash = (strings, separator = '_') => {\n  return strings.reduce((hash, string) => {\n    hash[string] = hash[string]? hash[string] + 1 : 1;\n    return hash;\n  }, {});\n};\n\n/**\n * Given a hash, return an array of all the keys.\n * @param  {Object} hash - The hash to get the keys from\n * @return {Array}       - The list of keys\n * @example\n * convertToHash({a: 1, b: 2, c: 3})\n * // => [a, b, c]\n */\nexport const getKeys = (hash) => Object.keys(hash);\n\n/**\n  * Given a hash, return an array of all the values.\n  * @param  {Object} hash - The hash to get the values from\n  * @return {Array}       - The list of values\n  * @example\n  * convertToHash({a: 1, b: 2, c: 3})\n  * // => [1, 2, 3]\n  */\nexport const getValues = (hash) => Object.values(hash);\n\n/**\n  * Given a hash, return an array of all the keys and values.\n  * @param  {Object} hash - The hash to get the keys and values from\n  * @return {Array}       - The list of keys and values\n  * @example\n  * convertToHash({a: 1, b: 2, c: 3})\n  * // => [{a: 1, b: 2, c: 3}]\n  */\nexport const getKeysAndValues = (hash) => {\n  return Object.keys(hash).map((key) => {\n    return {\n      key,\n      value: hash[key]\n    };\n  });\n};\n\n/**\n  * Given a list of strings, return a hash of the list.\n  * @param  {Array} strings - The list of strings to be hashed\n  * @return {Object}         - The hashed list\n  * @example\n  * convertToHash(['a', 'b', 'c'])\n  * // => {a: 1, b: 1, c: 1}\n  */\nexport const convertToHashList = (strings) => {\n  return strings.reduce((hash, string) => {\n    hash[string] = hash[string]? hash[string] + 1 : 1;\n    return hash;\n  }, {});\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nexport default getPositive;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1 || n === 0) return false\n  if (n < 2) return true\n  if (n < 3) return false\n  if (n % 2 === 0) return false\n  if (n < 9) return true\n  if (n < 25) return false\n  if (n < 43) return true\n  if (n < 137) return false\n  if (n < 251) return true\n  if (n < 321) return false\n  if (n < 761) return true\n  if (n < 1009) return false\n  if (n < 1621) return true\n  if (n < 2561) return false\n  if (n < 4441) return true\n  if (n < 9689) return false\n  if (n < 17221) return true\n  if (n < 28661) return false\n  if (n < 46241) return true\n  if (n < 90781) return false\n  if (n < 163841) return true\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let coeffs = xs.slice(0, n - 1);\n  let c = coeffs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  let x = -c / coeffs[n - 1];\n  return {x: x, coeffs: coeffs};\n}\n\nconst poly(xs, x) { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); }\n\nconst findZero(xs) {\n  let n = xs.length;\n  let coeffs = xs.slice(0, n - 1);\n  let c = coeffs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  let x = -c / coeffs[n - 1];\n  return {x: x, coeffs: coeffs};\n}\n\nconst poly(xs, x) { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); }\n\nconst findZero(xs) {\n  let n = xs.length;\n  let coeffs = xs.slice(0, n - 1);\n  let c = coeffs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0);\n  let x = -c / coeffs[n - 1];\n  return {x: x, coeffs: coeffs};\n}\n\n// http://stackoverflow.com/questions/10691784/how-to-find-the-roots-of-a-polynomial-in-javascript\nconst findRoots = (coeffs, x) => {\n  let n = coeffs.length;\n  let roots = [];\n  let prev = 0;\n  for (let i = 1; i < n; i++) {\n    let xi = (x + prev) / coeffs[i];\n    roots.push(xi);\n    prev = (x + prev) * xi;\n  }\n  return roots;\n}\n\nconst findRoots(coeffs, x) {\n  let n = coeffs.length;\n  let roots = [];\n  let prev = 0;\n  for (let i = 1; i < n; i++) {\n    let xi = (x + prev) / coeffs[i];\n    roots.push(xi);\n    prev = (x + prev) * xi;\n  }\n  return roots;\n}\n\nconst findRoots(coeffs, x) {\n  let n = coeffs.length;\n  let roots = [];\n  let prev = 0;\n  for (let i = 1; i < n; i++) {\n    let xi = (x + prev) / coeffs[i];\n    roots.push(xi);\n    prev = (x + prev) * xi;\n  }\n  return roots;\n}\n\nconst findRoots(coeffs, x) {\n  let n = coeffs.length;\n  let roots = [];\n  let prev = 0;\n  for (let i = 1; i < n; i++) {\n    let xi = (x + prev) / coeffs[i];\n    roots.push(xi);\n    prev = (x + prev) * xi;\n  }\n  return roots;\n}\n\nconst findRoots(coeffs, x) {\n  let n = coeffs.length;\n  let roots = [];\n  let prev = 0;\n  for (let i = 1; i < n; i++) {\n    let xi = (x + prev) / coeffs[i];\n    roots.push(xi);\n    prev = (x + prev) * xi;\n  }\n  return roots;\n}\n\nconst findRoots(coeffs, x) {\n  let n = coeffs.length;\n  let roots = [];\n  let prev = 0;\n  for (let i = 1; i < n; i++) {\n    let xi = (x + prev) / coeffs[i];\n    roots.push(xi);\n    prev = (x + prev) * xi;\n  }\n  return roots;\n}\n\nconst findRoots(coeffs, x) {\n  let n = coeffs.length;\n  let roots = [];\n  let prev = 0;\n  for (let i = 1; i < n; i++) {\n    let xi = (x + prev) / coeffs[i];\n    roots.push(xi);\n    prev = (x + prev) * xi;\n  }\n  return roots;\n}\n\nconst findRoots(coeffs, x) {\n  let n = coeffs.length;\n  let roots = [];\n  let prev = 0;\n  for (let i = 1; i < n; i++) {\n    let xi = (x + prev) / coeffs[i];\n    roots.push(xi);\n    prev = (x + prev) * xi;\n  }\n  return roots;\n}\n"}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const newList = l.slice(0);\n  const first = newList.shift();\n  newList.splice(Math.floor(first / 3) * 3, 0, first);\n  newList.splice(Math.floor(first / 3) * 3 + 1, 0, first);\n  newList.splice(Math.floor(first / 3) * 3 + 2, 0, first);\n  return newList;\n};\n\nconst sortByLength = (a, b) => {\n  const lengthA = a.length;\n  const lengthB = b.length;\n  if (lengthA === lengthB) {\n    return a < b? -1 : 1;\n  }\n  return lengthA < lengthB? -1 : 1;\n};\n\nconst sort = (l) => {\n  l.sort((a, b) => {\n    const lengthA = a.length;\n    const lengthB = b.length;\n    if (lengthA === lengthB) {\n      return sortThird(a) < sortThird(b)? -1 : 1;\n    }\n    return lengthA < lengthB? -1 : 1;\n  });\n  return l;\n};\n\nmodule.exports = sort;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const sorted = l.slice().sort();\n  const result = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (result.indexOf(sorted[i]) === -1) {\n      result.push(sorted[i]);\n    }\n  }\n  return result;\n};\n\n/*Return elements of a list\n  >>> list(['Hello', 'world', 'here'])\n  ['Hello', 'world', 'here']\n  >>> list([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  */\nconst list = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i]);\n  }\n  return result;\n};\n\n/*Return elements of a list which are greater than 5\n  >>> list(['Hello', 'world', 'here'])\n  [6, 7, 8, 9]\n  >>> list([1, 2, 3, 4, 5])\n  [6, 7, 8, 9]\n  */\nconst listGreaterThan = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 5) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return elements of a list which are less than 5\n  >>> list(['Hello', 'world', 'here'])\n  ['Hello', 'world']\n  >>> list([1, 2, 3, 4, 5])\n  ['Hello', 'world']\n  */\nconst listLessThan = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < 5) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return elements of a list which are even\n  >>> list([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 4, 6, 8]\n  */\nconst listEven = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return elements of a list which are odd\n  >>> list([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 3, 5, 7, 9]\n  */\nconst listOdd = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2!== 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return elements of a list which are multiples of 3\n  >>> list([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [3, 6]\n  */\nconst listMultipleOf3 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return elements of a list which are multiples of 5\n  >>> list([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [5, 10]\n  */\nconst listMultipleOf5 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 5 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*Return elements of a list which are multiples of 7\n  >>> list([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [7]\n  */\nconst listMultipleOf7 = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 7 === 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  listGreaterThan,\n  listLessThan,\n  listEven,\n  listOdd,\n  listMultipleOf3,\n  listMultipleOf5,\n  listMultipleOf7,\n  unique,\n  list\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const arr = Array.from(l).sort((a, b) => b - a)\n  return arr[arr.length - 1]\n}\n\nexport default maxElement\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let num = n\n  let divisor = 11\n  let divisors = [11, 13]\n\n  while (num) {\n    for (let i = 0; i < divisors.length; i++) {\n      if (num % divisors[i] === 0) {\n        console.log(num)\n        break\n      }\n    }\n    num -= 1\n  }\n}\n\n/*\n  >>> fizzBuzz(14)\n  3\n  >>> fizzBuzz(15)\n  4\n  >>> fizzBuzz(16)\n  5\n  >>> fizzBuzz(17)\n  6\n  >>> fizzBuzz(18)\n  7\n  >>> fizzBuzz(19)\n  8\n  >>> fizzBuzz(20)\n  9\n  */\nconst fizzBuzz2 = (n) => {\n  let num = n\n  let divisor = 13\n  let divisors = [13]\n\n  while (num) {\n    for (let i = 0; i < divisors.length; i++) {\n      if (num % divisors[i] === 0) {\n        console.log(num)\n        break\n      }\n    }\n    num -= 1\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const l2 = l.slice().reverse()\n  const l3 = [...l2,...l2]\n  return l3\n}\n\nconst sortEvenSorted = (l) => {\n  return l.slice().sort((a, b) => a - b)\n}\n\nexport { sortEven, sortEvenSorted }\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n Takes as input string encoding with encode_cyclic functions. Returns a string of the encoded string.\n Encoded string can be decoded with decodeCyclic(). */ const encodeCyclic_decodeCyclic = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns a string of the encoded string.\n Encoded string can be decoded with decodeCyclic(). */ const encodeCyclic_decodeCyclic_1 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns a string of the encoded string.\n Encoded string can be decoded with decodeCyclic(). */ const encodeCyclic_decodeCyclic_2 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns a string of the encoded string.\n Encoded string can be decoded with decodeCyclic(). */ const encodeCyclic_decodeCyclic_3 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns a string of the encoded string.\n Encoded string can be decoded with decodeCyclic(). */ const encodeCyclic_decodeCyclic_4 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns a string of the encoded string.\n Encoded string can be decoded with decodeCyclic(). */ const encodeCyclic_decodeCyclic_5 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns a string of the encoded string.\n Encoded string can be decoded with decodeCyclic(). */ const encodeCyclic_decodeCyclic_6 = (s) => {\n var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns a string of the encoded"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const a = 1\n  const b = 1\n  const i = 1\n\n  while (i < n) {\n    a = b\n    b = a + b\n    i++\n  }\n  return b\n}\n\nexport default primeFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const unique = new Set();\n  for (const i of l) {\n    const val = +i;\n    if (val === 0) {\n      continue;\n    }\n    if (unique.has(val)) {\n      return true;\n    }\n    unique.add(val);\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  return (n * (n + 1)) / 2;\n};\n\nconst isValid = (n) => {\n  if (n === 0) return false;\n  if (n === 1) return true;\n  return carRaceCollision(n) === (2 * n - 1);\n};\n\nconsole.log(isValid(20));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let incr = (i) => {\n    if (i == l.length) {\n      return [1]\n    } else {\n      return [l[i] + 1, incr(i + 1)]\n    }\n  }\n  return incr([1])\n}\n\n/**\n  * Return the max value in a list.\n  *\n  * @param {Array} l\n  * @return {Number}\n  */\nconst max = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let maxValue = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > maxValue) {\n      maxValue = l[i]\n    }\n  }\n  return maxValue\n}\n\n/**\n  * Return the min value in a list.\n  *\n  * @param {Array} l\n  * @return {Number}\n  */\nconst min = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let minValue = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < minValue) {\n      minValue = l[i]\n    }\n  }\n  return minValue\n}\n\n/**\n  * Return the median of a list.\n  *\n  * @param {Array} l\n  * @return {Number}\n  */\nconst median = (l) => {\n  const sortedList = l.slice()\n  sortedList.sort()\n  let middle = Math.floor(sortedList.length / 2)\n  if (sortedList.length % 2 === 0) {\n    return (sortedList[middle - 1] + sortedList[middle]) / 2\n  } else {\n    return sortedList[middle]\n  }\n}\n\n/**\n  * Return the average of a list.\n  *\n  * @param {Array} l\n  * @return {Number}\n  */\nconst average = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  return l.reduce((a, b) => a + b) / l.length\n}\n\n/**\n  * Return the sum of a list.\n  *\n  * @param {Array} l\n  * @return {Number}\n  */\nconst sum = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  return l.reduce((a, b) => a + b)\n}\n\n/**\n  * Return the mean of a list.\n  *\n  * @param {Array} l\n  * @return {Number}\n  */\nconst mean = (l) => {\n  return sum(l) / l.length\n}\n\nexport {\n  incrList,\n  max,\n  min,\n  median,\n  average,\n  sum,\n  mean\n}\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  return l.reduce((p, n) => {\n    return p || (n && n[0] === 0 && n[1] === 0);\n  }, false);\n};\n\n/*\n  pairsWithDuplicatesSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsWithDuplicatesSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsWithDuplicatesSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsWithDuplicatesSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsWithDuplicatesSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsWithDuplicatesSumToZero([1])\n  false\n  */\nconst pairsWithDuplicatesSumToZero = (l) => {\n  return l.reduce((p, n) => {\n    return p || (n && n[0] === 0 && n[1] === 0);\n  }, false);\n};\n\n/*\n  pairsWithDuplicatesWithSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsWithDuplicatesWithSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsWithDuplicatesWithSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsWithDuplicatesWithSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsWithDuplicatesWithSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsWithDuplicatesWithSumToZero([1])\n  false\n  */\nconst pairsWithDuplicatesWithSumToZero = (l) => {\n  return l.reduce((p, n) => {\n    return p || (n && n[0] === 0 && n[1] === 0);\n  }, false);\n};\n\n/*\n  sum takes a list of integers as an input. it returning sum of all elements in the list.\n  >>> sum([1, 2, 3, 4])\n  10\n  >>> sum([1, 2, 3, -2])\n  -1\n  >>> sum([1])\n  1\n  */\nconst sum = (l) => {\n  return l.reduce((s, n) => s + n, 0);\n};\n\n/*\n  findMax takes a list of integers as an input. it returning the maximum element in the list.\n  >>> findMax([1, 2, 3, 4])\n  4\n  >>> findMax([1, 2, 3, -2])\n  3\n  >>> findMax([1])\n  1\n  */\nconst findMax = (l) => {\n  return l.reduce((p, n) => {\n    return p > n? p : n;\n  }, -Infinity);\n};\n\n/*\n  findMin takes a list of integers as an input. it returning the minimum element in the list.\n  >>> findMin([1, 2, 3, 4])\n  1\n  >>> findMin([1, 2, 3, -2])\n  -2\n  >>> findMin([1])\n  1\n  */\nconst findMin = (l) => {\n  return l.reduce((p, n) => {\n    return p < n? p : n;\n  }, Infinity);\n};\n\n/*\n  findGreatestCommonDivisor takes a list of integers as an input. it returning the greatest common divisor of all elements in the list.\n  >>> findGreatestCommonDivisor([1, 2, 3, 4])\n  2\n  >>> findGreatestCommonDivisor([1, 2, 3, -2])\n  2\n  >>> findGreatestCommonDivisor([1])\n  1\n  */\nconst findGreatestCommonDivisor = (l) => {\n  return l.reduce((p, n) => {\n    return p % n === 0? p : n;\n  }, 1);\n};\n\n/*\n  findPairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> findPairsSumToZero([1, 3, 5, 0])\n  false\n  >>> findPairsSumToZero([1, 3, -2, 1])\n  false\n  >>> findPairsSumToZero([1, 2, 3, 7])\n  false\n  >>> findPairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> findPairsSumToZero([1])\n  false\n  */\nconst findPairsSumToZero = (l) => {\n  return l.reduce((p, n) => {\n    return p || (n && n[0] === 0 && n[1] === 0);\n  }, false);\n};\n\n/*\n  findPairsWithDuplicatesSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> findPairsWithDuplicatesSumToZero([1, 3, 5, 0])\n  false\n  >>> findPairsWithDuplicatesSumToZero([1, 3, -2, 1])\n  false\n  >>> findPairsWithDuplicatesSumToZero([1, 2, 3, 7])\n  false\n  >>> findPairsWithDuplicatesSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> findPairsWithDuplicatesSumToZero([1])\n  false\n  */\nconst findPairsWithDuplicatesSumToZero = (l)"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let string = x.toString(base);\n  return (string.length > 1 && string[1] === '0')? string.slice(2) : string;\n};\n\n/*\n   Convert decimal number to binary.\n   >>> convertDecimalToBinary(10)\n   '1010'\n   >>> convertDecimalToBinary(2)\n   '10'\n   >>> convertDecimalToBinary(1)\n   '1'\n   >>> convertDecimalToBinary(0)\n   '0'\n   >>> convertDecimalToBinary(-1)\n   '-1'\n   >>> convertDecimalToBinary(-2)\n   '-10'\n   >>> convertDecimalToBinary(-3)\n   '-100'\n   >>> convertDecimalToBinary(-4)\n   '-1000'\n   >>> convertDecimalToBinary(10)\n   '1010'\n   >>> convertDecimalToBinary(2)\n   '10'\n   >>> convertDecimalToBinary(1)\n   '1'\n   >>> convertDecimalToBinary(0)\n   '0'\n   >>> convertDecimalToBinary(-1)\n   '-1'\n   >>> convertDecimalToBinary(-2)\n   '-10'\n   >>> convertDecimalToBinary(-3)\n   '-100'\n   >>> convertDecimalToBinary(-4)\n   '-1000'\n   >>> convertDecimalToBinary(10)\n   '1010'\n   >>> convertDecimalToBinary(2)\n   '10'\n   >>> convertDecimalToBinary(1)\n   '1'\n   >>> convertDecimalToBinary(0)\n   '0'\n   >>> convertDecimalToBinary(-1)\n   '-1'\n   >>> convertDecimalToBinary(-2)\n   '-10'\n   >>> convertDecimalToBinary(-3)\n   '-100'\n   >>> convertDecimalToBinary(-4)\n   '-1000'\n   */\nconst convertDecimalToBinary = (x) => {\n  let string = x.toString(2);\n  return (string.length > 1 && string[1] === '0')? string.slice(2) : string;\n};\n\n/*\n   Convert binary number to decimal.\n   >>> convertBinaryToDecimal(10)\n   10\n   >>> convertBinaryToDecimal(2)\n   2\n   >>> convertBinaryToDecimal(1)\n   1\n   >>> convertBinaryToDecimal(0)\n   0\n   >>> convertBinaryToDecimal(0b101)\n   3\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101)\n   3\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal(0b101010)\n   8\n   >>> convertBinaryToDecimal("}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n    if (h === 0) return 0;\n    return a * h / 2;\n}\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n\noddLengthTriangle = function () {\n    console.log(\n      \"Enter triangle sides: \"\n    )\n    var triangleSides = prompt().split(\" \").map(Number);\n    triangleSides.sort(function (a, b) {return a - b});\n    var a = triangleSides[0];\n    var h = triangleSides[1];\n    var area = triangleArea(a, h);\n    console.log(\n      \"The area of the triangle is \"\n    )\n    console.log(area)\n    return area\n}\n\n/*\n  __________________________________________\n  Homework 1:  Modify the program from the above test run to compute\n  the area of a triangle for every triangle in the input list.\n  \n  Test Code:  Do not alter code below this line.\n*/\n\n/*\n  __________________________________________\n  Homework 2:  Modify the program from the above test run to compute\n  the area of a triangle for every odd triangle in the input list.\n  \n  Test Code:  Do not alter code below this line.\n*/\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 1\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nexport default fib4\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n    const copy = l.slice();\n    copy.sort();\n    const size = copy.length;\n    if (size % 2 === 1) {\n        return copy[Math.floor(size / 2)];\n    }\n    return (copy[size / 2] + copy[size / 2 - 1]) / 2;\n};\n\n/**\n  * Return the mean of elements in the list l.\n  * @param {Array} l\n  * @return {number}\n  */\nconst mean = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return sum / l.length;\n};\n\nmodule.exports = {\n    median,\n    mean\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    const str = text.split('').reverse().join('');\n    return str === text;\n};\n\nexport default isPalindrome;<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  n = n % p\n  if (n === 0) return 0\n  while (n >= p) n -= p\n  return n\n}\n\n/**\n * Return the sum of the digits of n.\n *\n * @param {number} n\n * @return {number}\n */\nconst sumDigits = n => {\n  let res = 0\n  while (n > 0) {\n    res += n % 10\n    n = n / 10\n  }\n  return res\n}\n\n/**\n * Return the sum of the digits of n modulo p.\n *\n * @param {number} n\n * @param {number} p\n * @return {number}\n */\nconst modpSumDigits = (n, p) => {\n  return modp(sumDigits(n), p)\n}\n\n/**\n * Return the sum of the digits of n modulo p modulo 10.\n *\n * @param {number} n\n * @param {number} p\n * @return {number}\n */\nconst mod10SumDigits = (n, p) => {\n  return modp(sumDigits(n) % 10, p)\n}\n\n/**\n * Return the sum of the digits of n modulo p modulo 10.\n *\n * @param {number} n\n * @param {number} p\n * @return {number}\n */\nconst modpSumDigitsMod10 = (n, p) => {\n  return modp(sumDigitsMod10(n), p)\n}\n\n/**\n * Return the sum of the digits of n modulo p modulo 10.\n *\n * @param {number} n\n * @param {number} p\n * @return {number}\n */\nconst mod10SumDigitsMod10 = (n, p) => {\n  return modp(sumDigitsMod10(n) % 10, p)\n}\n\n/**\n * Return the sum of the digits of n modulo p modulo 10.\n *\n * @param {number} n\n * @param {number} p\n * @return {number}\n */\nconst modpSumDigitsMod10Mod10 = (n, p) => {\n  return modp(sumDigitsMod10Mod10(n), p)\n}\n\n/**\n * Return the sum of the digits of n modulo p modulo 10.\n *\n * @param {number} n\n * @param {number} p\n * @return {number}\n */\nconst mod10SumDigitsMod10Mod10 = (n, p) => {\n  return modp(sumDigitsMod10Mod10(n) % 10, p)\n}\n\n/**\n * Return the sum of the digits of n modulo p modulo 10.\n *\n * @param {number} n\n * @param {number} p\n * @return {number}\n */\nconst modpSumDigitsMod10Mod10Mod10 = (n, p) => {\n  return modp(sumDigitsMod10Mod10Mod10(n), p)\n}\n\n/**\n * Return the sum of the digits of n modulo p modulo 10.\n *\n * @param {number} n\n * @param {number} p\n * @return {number}\n */\nconst mod10SumDigitsMod10Mod10Mod10 = (n, p) => {\n  return modp(sumDigitsMod10Mod10Mod10(n) % 10, p)\n}\n\n/**\n * Return the sum of the digits of n modulo p modulo 10.\n *\n * @param {number} n\n * @param {number} p\n * @return {number}\n */\nconst modpSumDigitsMod10Mod10Mod10Mod10 = (n, p) => {\n  return modp(sumDigitsMod10Mod10Mod10Mod10(n), p)\n}\n\n/**\n * Return the sum of the digits of n modulo p modulo 10.\n *\n * @param {number} n\n * @param {number} p\n * @return {number}\n */\nconst mod10SumDigitsMod10Mod10Mod10Mod10 = (n, p) => {\n  return modp(sumDigitsMod10Mod10Mod10Mod10(n) % 10, p)\n}\n\nmodule.exports = {\n  modp,\n  sumDigits,\n  modpSumDigits,\n  mod10SumDigits,\n  modpSumDigitsMod10,\n  mod10SumDigitsMod10,\n  modpSumDigitsMod10Mod10,\n  mod10SumDigitsMod10Mod10,\n  modpSumDigitsMod10Mod10Mod10,\n  mod10SumDigitsMod10Mod10Mod10,\n  modpSumDigitsMod10Mod10Mod10Mod10\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n var result = \"\";\n var i = 0;\n while (i < s.length) {\n  var ch = s.charCodeAt(i);\n  if ((ch >= \"a\".charCodeAt(0)) && (ch <= \"z\".charCodeAt(0))) {\n   result += String.fromCharCode(ch - 5 + \"a\".charCodeAt(0));\n  } else {\n   result += String.fromCharCode(ch + 5 - \"a\".charCodeAt(0));\n  }\n  i++;\n }\n return result;\n} /* takes as input string encoding with decode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n var result = \"\";\n var i = 0;\n while (i < s.length) {\n  var ch = s.charCodeAt(i);\n  if ((ch >= \"a\".charCodeAt(0)) && (ch <= \"z\".charCodeAt(0))) {\n   result += String.fromCharCode(ch - 5 + \"a\".charCodeAt(0));\n  } else {\n   result += String.fromCharCode(ch + 5 - \"a\".charCodeAt(0));\n  }\n  i++;\n }\n return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let start = 0;\n  let end = text.length - 1;\n  while (start <= end) {\n    while (vowels.indexOf(text[start]) >= 0) {\n      start += 1;\n    }\n    while (vowels.indexOf(text[end]) >= 0) {\n      end -= 1;\n    }\n    if (start < end) {\n      const temp = text[start];\n      text = text.slice(0, start) + text.slice(end + 1);\n      text = text.slice(0, start) + text.slice(end + 1);\n      text = text.slice(0, start) + temp + text.slice(end + 1);\n    }\n  }\n  return text;\n};\n\nexport default removeVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) return false\n  }\n  return true\n}\n\n/*\n  Return a list of numbers that are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  [1, 4]\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  []\n  */\nconst belowThresholdList = (l, t) => {\n  const len = l.length\n  const ret = []\n  for (let i = 0; i < len; i++) {\n    if (l[i] <= t) ret.push(l[i])\n  }\n  return ret\n}\n\n/*\n  Return a list of numbers that are above threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  [2, 4, 10]\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  []\n  */\nconst aboveThresholdList = (l, t) => {\n  const len = l.length\n  const ret = []\n  for (let i = 0; i < len; i++) {\n    if (l[i] > t) ret.push(l[i])\n  }\n  return ret\n}\n\nexport {\n  belowThreshold,\n  belowThresholdList,\n  aboveThresholdList\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n    return x + y;\n}\n\n// Add two numbers in reverse order\n//\n//    add(3, 2)\n//  --> 2\n//    add(2, 3)\n//  --> 5\n//    add(5, 7)\n//  --> 12\n\nconst reverseAdd = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd2 = (x, y) => {\n    return x + y;\n}\n\n// Add two numbers, the second number has a larger magnitude\n//\n//    add(2, 3)\n//  --> 5\n//    add(3, 2)\n//  --> 5\n//    add(5, 7)\n//  --> 12\n\nconst reverseAdd3 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd4 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd5 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd6 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd7 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd8 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd9 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd10 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd11 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd12 = (x, y) => {\n    return y + x;\n}\n\n// Add two numbers, the first number has a larger magnitude\n//\n//    add(2, 3)\n//  --> 5\n//    add(3, 2)\n//  --> 5\n//    add(5, 7)\n//  --> 12\n\nconst reverseAdd13 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd14 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd15 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd16 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd17 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd18 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd19 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd20 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd21 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd22 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd23 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd24 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd25 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd26 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd27 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd28 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd29 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd30 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd31 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd32 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd33 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd34 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd35 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd36 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd37 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd38 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd39 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd40 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd41 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd42 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd43 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd44 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd45 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd46 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd47 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd48 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd49 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd50 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd51 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd52 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd53 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd54 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd55 = (x, y) => {\n    return x + y;\n}\n\nconst reverseAdd56 = (x, y) => {\n    return y + x;\n}\n\nconst reverseAdd57 = (x, y) => {\n    return x + y;\n}\n\nconst"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    if (s0.length!== s1.length) {\n        return false;\n    }\n    const charSet = new Set();\n    for (let i = 0; i < s0.length; i++) {\n        charSet.add(s0.charAt(i));\n    }\n    for (let i = 0; i < s1.length; i++) {\n        if (!charSet.has(s1.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconsole.log(`The same chars of ${s0} and ${s1} are: ${sameChars(s0, s1)}`);\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return 1\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\n/* Return n-th Fibonacci number, with cache.\n  >>> fib_cache(10)\n  55\n  >>> fib_cache(1)\n  1\n  >>> fib_cache(8)\n  21\n  >>> fib_cache(4)\n  4\n  >>> fib_cache(2)\n  2\n  >>> fib_cache(1)\n  1\n  */\nconst fib_cache = (n) => {\n  if (n < 2) {\n    return 1\n  }\n  if (n in fib_cache.cache) {\n    return fib_cache.cache[n]\n  }\n  let a = 1\n  let b = 1\n  while (b < n) {\n    b = a + b\n    a = b - a\n  }\n  fib_cache.cache[n] = b\n  return b\n}\n\nconsole.log(fib(10))\nconsole.log(fib_cache(10))\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openings = brackets.split(\"<\")\n  const closings = brackets.split(\">\")\n  const index = {};\n  let counter = 0;\n  for (let i = 0; i < openings.length; i++) {\n    const opening = openings[i];\n    if (!(opening in index)) {\n      index[opening] = counter;\n      counter++;\n    }\n  }\n  for (let i = 0; i < closings.length; i++) {\n    const closing = closings[i];\n    if (!(closing in index)) {\n      return false;\n    }\n    if (index[closing]!== index[opening]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconsole.log(correctBracketing(\"<>\"));\nconsole.log(correctBracketing(\"<><><>\"));\nconsole.log(correctBracketing(\"<><>\"));\nconsole.log(correctBracketing(\"<>\"));\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    if (l.length === 0) {\n        return false;\n    }\n\n    let i = 0;\n    let last = l[i];\n\n    for (i = 1; i < l.length; i++) {\n        if (l[i] < last) {\n            return false;\n        }\n        last = l[i];\n    }\n\n    return true;\n};\n\nmodule.exports = monotonic;<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  if (l1.length === 0) {\n    return l2\n  } else if (l2.length === 0) {\n    return l1\n  }\n  return [...new Set(l1).intersection(new Set(l2))]\n}\n\nexport default common\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const divisors = Array(n).fill(1).map((x) => x + 1)\n  let p = 2\n  while (divisors[p]) {\n    if (n % p === 0) {\n      return p\n    }\n    p = p + 1\n  }\n  return n\n}\n\n/*Return the number of distinct prime factors of n. Assume n > 1 and is not a prime.\n  >>> numberOfDistinctPrimeFactors(13195)\n  17\n  >>> numberOfDistinctPrimeFactors(2048)\n  2\n  */\nconst numberOfDistinctPrimeFactors = (n) => {\n  const divisors = Array(n).fill(1).map((x) => x + 1)\n  let p = 2\n  let count = 1\n  while (divisors[p]) {\n    if (n % p === 0) {\n      count = count + 1\n    }\n    p = p + 1\n  }\n  return count\n}\n\nmodule.exports = {\n  largestPrimeFactor,\n  numberOfDistinctPrimeFactors\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n// Sum N numbers from 1 to N, each time by 1.\nconst sumN = (n) => {\n  return sumToN(n);\n};\n\n// Sum N numbers from 1 to N, each time by N.\nconst sumNn = (n) => {\n  return n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^2.\nconst sumNn2 = (n) => {\n  return n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^3.\nconst sumNn3 = (n) => {\n  return n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^4.\nconst sumNn4 = (n) => {\n  return n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^5.\nconst sumNn5 = (n) => {\n  return n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^6.\nconst sumNn6 = (n) => {\n  return n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^7.\nconst sumNn7 = (n) => {\n  return n * n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^8.\nconst sumNn8 = (n) => {\n  return n * n * n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^9.\nconst sumNn9 = (n) => {\n  return n * n * n * n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^10.\nconst sumNn10 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^11.\nconst sumNn11 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^12.\nconst sumNn12 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^13.\nconst sumNn13 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^14.\nconst sumNn14 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^15.\nconst sumNn15 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^16.\nconst sumNn16 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^17.\nconst sumNn17 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^18.\nconst sumNn18 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^19.\nconst sumNn19 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^20.\nconst sumNn20 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from 1 to N, each time by N^21.\nconst sumNn21 = (n) => {\n  return n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * sumToN(n - 1);\n};\n\n// Sum N numbers from"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    let currentChar = brackets[i]\n    if (currentChar === '(') {\n      stack.push(currentChar)\n    } else {\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\nexport default {\n  brackets: brackets,\n  correctBracketing\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return xs\n  }\n\n  return [0, 0, 0]\n .concat(xs.reduce((a, b) => [a[1], a[1] + b, a[2]]))\n}\n\nexport { derivative }\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  else if (n === 1) return 1\n  else if (n === 2) return 2\n  else return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconst test = () => {\n  console.log(fibfib(0))\n  console.log(fibfib(1))\n  console.log(fibfib(2))\n  console.log(fibfib(3))\n  console.log(fibfib(4))\n  console.log(fibfib(5))\n  console.log(fibfib(6))\n  console.log(fibfib(7))\n  console.log(fibfib(8))\n  console.log(fibfib(9))\n  console.log(fibfib(10))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = 'aeiou'\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count += 1\n    }\n  }\n  if (s.length > 1 && vowels.includes(s[s.length - 1])) {\n    count += 1\n  }\n  return count\n}\n\n/*\n  Write a function isPalindrome which takes a string as input and returning a boolean value.\n  It is a palindrome if it is equal to itself reversed. Example:\n  >>> isPalindrome(\"abcd\")\n  True\n  >>> isPalindrome(\"abcd\")\n  True\n  >>> isPalindrome(\"abd\")\n  False\n  >>> isPalindrome(\"aabbb\")\n  False\n  */\nconst isPalindrome = (s) => {\n  let i = 0\n  let j = s.length - 1\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Write a function isVowel which takes a string as input and returning a boolean value.\n  A string is a Vowel if it has at least one vowel in it.\n  Examples:\n  >>> isVowel(\"a\")\n  True\n  >>> isVowel(\"\")\n  False\n  >>> isVowel(\"aeiou\")\n  True\n  */\nconst isVowel = (s) => {\n  const vowels = 'aeiou'\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  Write a function isUppercase which takes a string as input and returning a boolean value.\n  A string is Uppercase if it contains only capital letters.\n  Examples:\n  >>> isUppercase(\"ab\")\n  False\n  >>> isUppercase(\"abc\")\n  True\n  >>> isUppercase(\"A\")\n  True\n  */\nconst isUppercase = (s) => {\n  return s.split('').every(c => c === c.toUpperCase())\n}\n\n/*\n  Write a function containsVowel which takes a string as input and returning a boolean value.\n  A string contains a Vowel if it has at least one vowel in it.\n  Examples:\n  >>> containsVowel(\"a\")\n  True\n  >>> containsVowel(\"\")\n  False\n  >>> containsVowel(\"aeiou\")\n  True\n  */\nconst containsVowel = (s) => {\n  const vowels = 'aeiou'\n  return vowels.some(v => s.includes(v))\n}\n\n/*\n  Write a function containsUppercase which takes a string as input and returning a boolean value.\n  A string contains a Uppercase if it contains only capital letters.\n  Examples:\n  >>> containsUppercase(\"ab\")\n  False\n  >>> containsUppercase(\"abc\")\n  True\n  >>> containsUppercase(\"A\")\n  True\n  */\nconst containsUppercase = (s) => {\n  return s.split('').every(c => c === c.toUpperCase())\n}\n\n/*\n  Write a function isAllVowels which takes a string as input and returning a boolean value.\n  A string is AllVowels if it contains all vowels.\n  Examples:\n  >>> isAllVowels(\"a\")\n  False\n  >>> isAllVowels(\"\")\n  False\n  >>> isAllVowels(\"aeiou\")\n  True\n  */\nconst isAllVowels = (s) => {\n  const vowels = 'aeiou'\n  return vowels.every(v => s.includes(v))\n}\n\n/*\n  Write a function isAllUppercase which takes a string as input and returning a boolean value.\n  A string is AllUppercase if it contains all capital letters.\n  Examples:\n  >>> isAllUppercase(\"ab\")\n  False\n  >>> isAllUppercase(\"abc\")\n  True\n  >>> isAllUppercase(\"A\")\n  True\n  */\nconst isAllUppercase = (s) => {\n  return s.split('').every(c => c === c.toUpperCase())\n}\n\n/*\n  Write a function isAllLowercase which takes a string as input and returning a boolean value.\n  A string is AllLowercase if it contains all lower case letters.\n  Examples:\n  >>> isAllLowercase(\"a\")\n  False\n  >>> isAllLowercase(\"\")\n  False\n  >>> isAllLowercase(\"aeiou\")\n  True\n  */\nconst isAllLowercase = (s) => {\n  return s.split('').every(c => c === c.toLowerCase())\n}\n\n/*\n  Write a function isAlpha which takes a string as input and returning a boolean value.\n  A string is Alpha if it contains only alphabetical characters.\n  Examples:\n  >>> isAlpha(\"a\")\n  True\n  >>> isAlpha(\"\")\n  False\n  >>> isAlpha(\"A\")\n  True\n  >>> isAlpha(\"a1\")\n  False\n  >>> isAlpha(\"ä\")\n  False\n  */\nconst isAlpha = (s) => {\n  return s.split('').every(c => c.match(/[a-zA-Z]/))\n}\n\n/*\n  Write a function containsDigit which takes a string as input and returning a boolean value.\n  A string contains a Digit if it contains only digit characters.\n  Examples:\n  >>> containsDigit(\"a\")\n  False\n  >>> containsDigit(\"\")\n  False\n  >>> containsDigit(\"1\")\n  True\n  >>> containsDigit(\"a"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const str = x.toString()\n  const length = str.length\n  const result = x >>> shift\n  const last = str[length - 1]\n  const left = str[0]\n  const right = str[length - 1]\n  return (result << shift) + left + right\n}\n\n/*\n  The function reverse the digit in the number x.\n  >>> reverse(12)\n  12\n  >>> reverse(21)\n  21\n  >>> reverse(12)\n  12\n  */\nconst reverse = (x) => {\n  const str = x.toString()\n  return parseInt(str.slice().reverse().join(''))\n}\n\n/*\n  The function sum the digits of the number x.\n  >>> sumDigits(12)\n  12\n  >>> sumDigits(21)\n  21\n  >>> sumDigits(12)\n  12\n  */\nconst sumDigits = (x) => {\n  const str = x.toString()\n  return parseInt(str.slice().reduce((a, b) => a + b))\n}\n\n/*\n  The function sum the digits of the number x.\n  >>> sumDigits(12)\n  12\n  >>> sumDigits(21)\n  21\n  >>> sumDigits(12)\n  12\n  */\nconst sumDigitsRev = (x) => {\n  const str = x.toString()\n  return parseInt(str.slice().reduce((a, b) => a + b, 0))\n}\n\n/*\n  The function multiply the digits of the number x.\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  >>> multiply(12, 3)\n  12\n  "}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const map = {\n    '0': 0,\n    '1': 1,\n    '2': 2,\n    '3': 3,\n    '4': 4,\n    '5': 5,\n    '6': 6,\n    '7': 7,\n    '8': 8,\n    '9': 9\n  }\n\n  let sum = 0\n\n  for (let i = 0; i < s.length; i++) {\n    const code = parseInt(s[i], 10)\n    if (code < 0 || code > 255) {\n      throw new Error('code must be between 0 and 255')\n    }\n\n    const n = map[s[i]]\n    sum += n\n  }\n\n  return sum\n}\n\nconsole.log(digitSum('A'))\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n    let result = 0;\n    let apple = 0;\n    let orange = 0;\n    let mango = 0;\n    for (let i = 0; i < s.length; i++) {\n      if (s[i] === 'a') {\n        apple++;\n      } else if (s[i] === 'o') {\n        orange++;\n      } else if (s[i] ==='m') {\n        mango++;\n      }\n    }\n    result = apple + orange + mango;\n    return (result);\n  };\n\n/*\n  Given an integer n, calculate the number of n-digit numbers that are also\n  an n-digit palindrome, where 1 <= n <= 9999.\n */\nconst isPalindrome = (n) => {\n  let digit = 0;\n  while (n >= 0) {\n    digit = n % 10;\n    n = n / 10;\n    digit = digit * 10 + n;\n    if (digit!= n) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, calculate the number of n-digit numbers that are also\n  a palindrome, where 1 <= n <= 9999.\n */\nconst isPalindromeNumber = (n) => {\n  let digit = 0;\n  let result = 0;\n  while (n > 0) {\n    digit = n % 10;\n    result = result + (digit * (digit + 1));\n    n = n / 10;\n  }\n  return result;\n};\n\nconst isPalindrome = (n) => {\n  let digit = 0;\n  while (n > 0) {\n    digit = n % 10;\n    if (digit!= n) {\n      return false;\n    }\n    n = n / 10;\n  }\n  return true;\n};\n\nconst isPalindromeNumber = (n) => {\n  let digit = 0;\n  let result = 0;\n  while (n > 0) {\n    digit = n % 10;\n    result = result + (digit * (digit + 1));\n    n = n / 10;\n  }\n  return result;\n};\n\nconst isPalindrome = (n) => {\n  let digit = 0;\n  let result = 0;\n  while (n > 0) {\n    digit = n % 10;\n    result = result + (digit * (digit + 1));\n    n = n / 10;\n  }\n  return result;\n};\n\nconst isPalindromeNumber = (n) => {\n  let digit = 0;\n  let result = 0;\n  while (n > 0) {\n    digit = n % 10;\n    result = result + (digit * (digit + 1));\n    n = n / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, calculate the number of n-digit numbers that are also\n  an n-digit palindrome, where 1 <= n <= 9999.\n */\nconst isPalindrome = (n) => {\n  let digit = 0;\n  while (n > 0) {\n    digit = n % 10;\n    if (digit!= n) {\n      return false;\n    }\n    n = n / 10;\n  }\n  return true;\n};\n\nconst isPalindromeNumber = (n) => {\n  let digit = 0;\n  let result = 0;\n  while (n > 0) {\n    digit = n % 10;\n    result = result + (digit * (digit + 1));\n    n = n / 10;\n  }\n  return result;\n};\n\nconst isPalindrome = (n) => {\n  let digit = 0;\n  while (n > 0) {\n    digit = n % 10;\n    if (digit!= n) {\n      return false;\n    }\n    n = n / 10;\n  }\n  return true;\n};\n\nconst isPalindromeNumber = (n) => {\n  let digit = 0;\n  let result = 0;\n  while (n > 0) {\n    digit = n % 10;\n    result = result + (digit * (digit + 1));\n    n = n / 10;\n  }\n  return result;\n};\n\nconst isPalindrome = (n) => {\n  let digit = 0;\n  while (n > 0) {\n    digit = n % 10;\n    if (digit!= n) {\n      return false;\n    }\n    n = n / 10;\n  }\n  return true;\n};\n\nconst isPalindromeNumber = (n) => {\n  let digit = 0;\n  let result = 0;\n  while (n > 0) {\n    digit = n % 10;\n    result = result + (digit * (digit + 1));\n    n = n / 10;\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0]\n  let minIndex = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i]\n      minIndex = i\n    }\n  }\n  return [min, minIndex]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) max = lst[i]\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === max) {\n      if (lst[i] > 0) {\n        return lst[i]\n      }\n    }\n  }\n  return -1\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  return lst.sort((a, b) => {\n    if (a < b) {\n      return 1;\n    } else if (a > b) {\n      return -1;\n    }\n    return 0;\n  });\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    return (a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n};\n\nconst isValid = (a, b, c) => {\n    return triangleArea(a, b, c) > 0;\n};\n\nmodule.exports = isValid;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n    return q.length >= 2 && q.length <= 4 &&\n        (q[q.length - 1] + q[q.length - 2] + q[q.length - 3] + q[q.length - 4] <= w) &&\n        q.every(q => q >= 0);\n};\n\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 9));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    let num = arr.length;\n    let min = 0;\n    let count = 0;\n    while(true) {\n        if(arr[0] === arr[num-1]) {\n            min += 1;\n            count += 1;\n            arr.splice(0, 1);\n            arr.splice(num-1, 1);\n            num -= 2;\n            if(min === num) {\n                break;\n            }\n        }\n        else if(arr[0] < arr[num-1]) {\n            arr.splice(0, 1);\n            num -= 1;\n        }\n        else {\n            arr.splice(num-1, 1);\n            num -= 1;\n        }\n    }\n    return count;\n};\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  return lst1.reduce((acc, n, i) => {\n    if (lst2.indexOf(n) === -1) {\n      acc.push(n)\n    }\n    return acc\n  }, []);\n}\n\nexport default totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    const primeArray = primeNumbers.slice(0);\n    for (let i = 0; i < primeArray.length; i++) {\n      if (a % primeArray[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n};\n\n/**\n  *Find the biggest prime factor of a number.\n  *Example:\n  *isBiggestPrime(12) == 2\n  *12 = 2 * 3 * 5\n  */\nconst isBiggestPrime = (a) => {\n  if (a < 100) {\n    return primeNumbers[primeNumbers.length - 1];\n  }\n  for (let i = primeNumbers.length - 1; i >= 0; i--) {\n    if (a % primeNumbers[i] === 0) {\n      return primeNumbers[i];\n    }\n  }\n  return false;\n};\n\n/**\n * Find the smallest number divisible by all prime numbers up to the given number.\n * Example:\n * isPrime(5) == 7\n * 5 = 2 * 3 * 5\n * */\nconst isPrime = (a) => {\n  if (a < 100) {\n    return primeNumbers[primeNumbers.length - 1];\n  }\n  let divisor = 1;\n  for (let i = primeNumbers.length - 1; i >= 0; i--) {\n    if (a % primeNumbers[i] === 0) {\n      return primeNumbers[i];\n    }\n    divisor *= primeNumbers[i];\n  }\n  return false;\n};\n\nconst main = async () => {\n  const primes = await readFile('primes.txt');\n  let counter = 0;\n  for (let i = 0; i < primes.length; i++) {\n    const primeNumber = parseInt(primes[i]);\n    counter += 1;\n    if (isPrime(primeNumber)) {\n      counter -= 1;\n    }\n    if (counter === 0) {\n      counter += 1;\n      break;\n    }\n  }\n  const isPrime = isPrime(counter);\n  console.log(isPrime);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n === 1) return x === 1\n  if (n === 0) return false\n  if (x < 0) return false\n  if (x === 0) return true\n  let i = 1\n  while (i <= n) {\n    if (x % i === 0) {\n      if (i === n) return true\n      else return false\n    }\n    i++\n  }\n}\n\nconst isPrime = (x) => {\n  if (x === 1) return false\n  for (let i = 2; i <= Math.sqrt(x); i++) {\n    if (x % i === 0) return false\n  }\n  return true\n}\n\nconst isPrimeNumber = (x) => isPrime(x)\n\nconst isPrimePower = (x, n) => isPrime(x) && isSimplePower(x, n)\n\nconst isPrimePowerNumber = (x, n) => isPrimePower(x, n)\n\n// console.log(isPrimePowerNumber(2, 3)) // true\n// console.log(isPrimePowerNumber(3, 2)) // false\n// console.log(isPrimePowerNumber(7, 2)) // true\n// console.log(isPrimePowerNumber(3, 1)) // false\n// console.log(isPrimePowerNumber(2, 4)) // true\n// console.log(isPrimePowerNumber(5, 3)) // false\n// console.log(isPrimePowerNumber(8, 2)) // true\n// console.log(isPrimePowerNumber(3, 2)) // false\n// console.log(isPrimePowerNumber(9, 3)) // false\n// console.log(isPrimePowerNumber(8, 2)) // true\n// console.log(isPrimePowerNumber(5, 3)) // false\n// console.log(isPrimePowerNumber(4, 2)) // false\n// console.log(isPrimePowerNumber(2, 4)) // true\n// console.log(isPrimePowerNumber(2, 1)) // false\n// console.log(isPrimePowerNumber(1, 4)) // true\n// console.log(isPrimePowerNumber(2, 8)) // false\n// console.log(isPrimePowerNumber(2, 4)) // true\n// console.log(isPrimePowerNumber(1, 4)) // true\n// console.log(isPrimePowerNumber(2, 5)) // false\n// console.log(isPrimePowerNumber(3, 5)) // true\n// console.log(isPrimePowerNumber(5, 5)) // false\n// console.log(isPrimePowerNumber(1, 5)) // false\n// console.log(isPrimePowerNumber(7, 5)) // true\n// console.log(isPrimePowerNumber(5, 3)) // false\n// console.log(isPrimePowerNumber(2, 7)) // true\n// console.log(isPrimePowerNumber(3, 7)) // true\n// console.log(isPrimePowerNumber(7, 7)) // false\n// console.log(isPrimePowerNumber(7, 3)) // false\n// console.log(isPrimePowerNumber(3, 7)) // false\n// console.log(isPrimePowerNumber(4, 7)) // false\n// console.log(isPrimePowerNumber(5, 7)) // true\n// console.log(isPrimePowerNumber(7, 7)) // false\n// console.log(isPrimePowerNumber(7, 4)) // false\n// console.log(isPrimePowerNumber(7, 2)) // false\n// console.log(isPrimePowerNumber(7, 3)) // true\n// console.log(isPrimePowerNumber(7, 5)) // false\n// console.log(isPrimePowerNumber(7, 7)) // false\n// console.log(isPrimePowerNumber(7, 8)) // false\n// console.log(isPrimePowerNumber(7, 9)) // false\n// console.log(isPrimePowerNumber(7, 2)) // false\n// console.log(isPrimePowerNumber(7, 4)) // false\n// console.log(isPrimePowerNumber(7, 9)) // false\n// console.log(isPrimePowerNumber(7, 11)) // false\n// console.log(isPrimePowerNumber(7, 17)) // false\n// console.log(isPrimePowerNumber(7, 21)) // false\n// console.log(isPrimePowerNumber(7, 31)) // false\n// console.log(isPrimePowerNumber(7, 41)) // false\n// console.log(isPrimePowerNumber(7, 43)) // false\n// console.log(isPrimePowerNumber(7, 53)) // false\n// console.log(isPrimePowerNumber(7, 59)) // false\n// console.log(isPrimePowerNumber(7, 71)) // false\n// console.log(isPrimePowerNumber(7, 73)) // false\n// console.log(isPrimePowerNumber(7, 79)) // false\n// console.log(isPrimePowerNumber(7, 83)) // false\n// console.log(isPrimePowerNumber(7, 89)) // false\n// console.log(isPrimePowerNumber(7, 97)) // false\n// console.log(isPrimePowerNumber(7, 99)) // false\n// console.log(isPrimePowerNumber(7, 107)) // false\n// console.log(isPrimePowerNumber(7, 109)) // false\n// console.log(isPrimePowerNumber(7, 113)) // false\n// console.log(isPrimePowerNumber(7, 121)) // false\n// console.log(isPrimePowerNumber(7, 127)) // false\n// console.log(isPrimePowerNumber(7, 131)) // false\n// console.log(isPrimePowerNumber(7, 137)) // false\n// console.log(isPrimePowerNumber(7, 139)) // false\n// console.log(isPrimePowerNumber(7, 149)) // false\n// console.log(isPrimePowerNumber(7, 151)) // false\n// console.log(isPrimePowerNumber(7, 157)) // false\n// console.log(isPrimePowerNumber(7, 163)) // false\n// console.log"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if(a === 0) return true;\n  let cnt = 0;\n  while(a > 0) {\n    cnt += a % 5 == 0? 1 : 0;\n    a = a / 5;\n  }\n  return cnt === 3;\n};\n\nmodule.exports = iscube;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    let count = 0;\n    for (let i = 0; i < num.length; i += 1) {\n        if (num[i] == 'A' || num[i] == 'B' || num[i] == 'C' || num[i] == 'D' || num[i] == 'E' || num[i] == 'F') {\n            count += 1;\n        }\n    }\n    return count;\n};\n\nconst isPrime = (num) => {\n    for (let i = 2; i <= Math.sqrt(num); i += 1) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconsole.log(hexKey(num));\nconsole.log(isPrime(num));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = 'db';\n  for (let i = 1; i <= decimal; i++) {\n    binary += '1';\n  }\n  return binary.slice(0, -2);\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += Math.pow(2, i);\n    }\n  }\n  return decimal;\n};\n\nexport default {\n  decimalToBinary,\n  binaryToDecimal\n};\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) {\n    return false;\n  }\n  const set = new Set();\n  for (let i = 0; i < s.length - 1; i++) {\n    if (set.has(s[i])) {\n      return false;\n    }\n    set.add(s[i]);\n  }\n  return true;\n};\n\nconst test = () => {\n  let a = \"adb\";\n  let b = \"abc\";\n  console.log(`a=${a}`);\n  console.log(`b=${b}`);\n  console.log(`isHappy(a)=${isHappy(a)}`);\n  console.log(`isHappy(b)=${isHappy(b)}`);\n  console.log(`isHappy(a) && isHappy(b) => ${isHappy(a) && isHappy(b)}`);\n  console.log(`isHappy(a) || isHappy(b) => ${isHappy(a) || isHappy(b)}`);\n  console.log(`!(isHappy(a) && isHappy(b)) => ${!(isHappy(a) && isHappy(b))}`);\n  console.log(`!(isHappy(a) || isHappy(b)) => ${!(isHappy(a) || isHappy(b))}`);\n  console.log(`isHappy(a) &&!isHappy(b) => ${isHappy(a) &&!isHappy(b)}`);\n  console.log(`isHappy(a) ||!isHappy(b) => ${isHappy(a) ||!isHappy(b)}`);\n  console.log(`!(isHappy(a) &&!isHappy(b)) => ${!(isHappy(a) &&!isHappy(b))}`);\n  console.log(`!(isHappy(a) ||!isHappy(b)) => ${!(isHappy(a) ||!isHappy(b))}`);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = Array.isArray(grades)? grades : [grades];\n  let letterGrades = [];\n  for (let i = 0; i < gradesArray.length; i++) {\n    let currentGrade = parseFloat(gradesArray[i]);\n    if (currentGrade < 3.7) {\n      letterGrades.push('A+');\n    } else if (currentGrade > 3.7 && currentGrade < 3.3) {\n      letterGrades.push('A');\n    } else if (currentGrade > 3.3 && currentGrade < 3.0) {\n      letterGrades.push('B+');\n    } else if (currentGrade > 2.7 && currentGrade < 2.3) {\n      letterGrades.push('B');\n    } else if (currentGrade > 2.3 && currentGrade < 2.0) {\n      letterGrades.push('C-');\n    } else if (currentGrade > 1.7 && currentGrade < 1.3) {\n      letterGrades.push('C');\n    } else if (currentGrade > 1.3 && currentGrade < 1.0) {\n      letterGrades.push('D-');\n    } else {\n      letterGrades.push('D');\n    }\n  }\n  return letterGrades;\n};\n\nexport default numericalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n    const l = string.length\n    const isPrime = (p) => {\n        let cnt = 2\n        while (cnt < p) {\n            if (p % cnt === 0) return false\n            cnt++\n        }\n        return true\n    }\n\n    const max = (n) => {\n        if (n > 0) {\n            return Math.sqrt(n)\n        }\n        return 0\n    }\n\n    for (let i = 2; i <= max(l); i++) {\n        if (isPrime(i)) {\n            return true\n        }\n    }\n    return false\n}\n\nmodule.exports = primeLength\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i >= 10) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1 and end with 10. */ const startsTenEnds = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i >= 10) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that end with 1 and start with 10. */ const endsOneStarts = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i <= 10) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 10 and end with 1. */ const endsTenStarts = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i <= 10) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 10 and end with 10. */ const endsTenEnds = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i <= 10) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1 and end with 10. */ const startsOneEnds = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i >= 10) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 10 and end with 1. */ const startsTenEnds = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i <= 10) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 10 and end with 10. */ const startsTenEnds = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i <= 10) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 1 and end with 10. */ const endsOneStarts = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i <= 10) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start with 10 and end with 1. */ const endsTenStarts = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i <= 10) {\n            count++;\n        }\n    }\n    return count;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const total = N.toString(2).split('').reduce((a, b) => a + b, 0);\n  return `${total}`;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    let i = 0;\n    while (i < lst.length - 1) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n        i++;\n    }\n    if (lst[i] % 2 === 0) {\n        result += lst[i];\n    }\n    return result;\n};\n\n/*\nGiven a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let result = 0;\n    let i = 0;\n    while (i < lst.length - 1) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n        i++;\n    }\n    if (lst[i] % 2 === 0) {\n        result += lst[i];\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(\" \");\n  let newArr = [];\n  for(let i=0; i<arr.length; i++){\n    newArr.push(arr[i]);\n    for(let j=0; j<arr.length-1; j++){\n      if(arr[j].length < arr[j+1].length){\n        newArr.splice(j, 0, arr[j+1].substring(0, arr[j].length));\n        j = j-1;\n      }\n    }\n  }\n  return newArr.join(\" \");\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const cols = lst.length\n  let result = []\n  for(let row = 0; row < lst.length; row++) {\n    const rowCoords = []\n    let x1 = 0\n    for(let col = 0; col < cols; col++) {\n      const coord = [row, col]\n      if(x === coord[0]) {\n        x1 = col\n        break\n      }\n      rowCoords.push(coord)\n    }\n    rowCoords.sort((a, b) => a[0] - b[0])\n    rowCoords.sort((a, b) => a[1] - b[1])\n    result.push((x1, row))\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n    const sorted = [];\n    let prevSum = 0;\n    array.forEach((num) => {\n        sorted.push(num);\n        const currentSum = num + prevSum;\n        prevSum = currentSum;\n    });\n    return sorted;\n}\n\nmodule.exports = sortArray;<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const alphabetLength = alphabet.length\n  const alphabetToShift = alphabet.split('').reverse()\n\n  let currentChar = alphabet[0]\n  let currentShift = 0\n  let currentCharShift = 0\n\n  return s.split('').map((char, index) => {\n    const newChar = alphabet.charAt(currentCharShift)\n    currentCharShift += 2\n    currentChar = alphabet.charAt(currentCharShift)\n    currentShift += 2\n    return newChar\n  }).join('')\n}\n\n/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift up by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'ih'\n  encrypt('asdfghjkl') returns 'jk'\n  encrypt('gf') returns 'f'\n  encrypt('et') returns 't'\n  */\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const alphabetLength = alphabet.length\n  const alphabetToShift = alphabet.split('').reverse()\n\n  let currentChar = alphabet[alphabetLength - 1]\n  let currentShift = alphabetLength - 2\n  let currentCharShift = alphabetLength - 2\n\n  return s.split('').map((char, index) => {\n    const newChar = alphabet.charAt(currentCharShift)\n    currentCharShift -= 2\n    currentChar = alphabet.charAt(currentCharShift)\n    currentShift -= 2\n    return newChar\n  }).join('')\n}\n\n/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift up by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'hi'\n  encrypt('asdfghjkl') returns 'asdfghjkl'\n  encrypt('gf') returns 'gf'\n  encrypt('et') returns 'et'\n  */\nconst reverse = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const alphabetLength = alphabet.length\n\n  let index = alphabet.length - 1\n  return s.split('').map((char, i) => {\n    const newChar = alphabet.charAt(index)\n    index -= 1\n    return newChar\n  }).join('')\n}\n\n/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift up by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'g'\n  encrypt('asdfghjkl') returns 'p'\n  encrypt('gf') returns 'j'\n  encrypt('et') returns 'y'\n  */\nconst reverseAndAdd = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const alphabetLength = alphabet.length\n\n  let index = alphabet.length - 1\n  return s.split('').map((char, i) => {\n    const newChar = alphabet.charAt(index)\n    index -= 1\n    return newChar\n  }).join('')\n}\n\n/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'l'\n  encrypt('asdfghjkl') returns 'f'\n  encrypt('gf') returns 'j'\n  encrypt('et') returns 'z'\n  */\nconst add = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const alphabetLength = alphabet.length\n\n  let index = alphabetLength - 1\n  return s.split('').map((char, i) => {\n    const newChar = alphabet.charAt(index)\n    index -= 1\n    return newChar\n  }).join('')\n}\n\n/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift up by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'g'\n  encrypt('asdfghjkl') returns 'h'\n  encrypt('gf') returns 'j'\n  encrypt('et') returns 'z'\n  */\nconst reverseAndAddTwo = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const alphabetLength = alphabet.length\n\n  let index = alphabetLength - 1\n  return s.split('').map((char, i) => {\n    const newChar = alphabet.charAt(index)\n    index -= 1\n    return newChar\n  }).join('')\n}\n\n/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'i'\n  encrypt('asdfghjkl') returns 'f'\n  encrypt('gf') returns 'j'\n  encrypt('et') returns's'\n  */\nconst reverseAddTwo = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const alphabetLength = alphabet.length"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n  const len = lst.length\n  const next = [...lst,...lst]\n  let i = 0\n  let j = len - 1\n\n  while (i < j) {\n    let min = next[i]\n    let minIndex = i\n\n    for (let k = i + 1; k < j; k++) {\n      if (next[k] < min) {\n        min = next[k]\n        minIndex = k\n      }\n    }\n\n    next[i] = next[minIndex]\n    next[minIndex] = min\n    i = i === j - 1? j : minIndex + 1\n  }\n\n  return next[0]\n}\n\n/*\n  You was gives a list of integers. Writes a functions nextLargest() that returning the 2nd largest elements of the list.\n Return null if there is no such elements. nextLargest([1, 2, 3, 4, 5]) == 4 nextLargest([5, 1, 4, 3, 2]) == 5 nextLargest([]) == null nextLargest([1, 1]) == null */ const nextLargest = (lst) => {\n  const len = lst.length\n  const next = [...lst,...lst]\n  let i = 0\n  let j = len - 1\n\n  while (i < j) {\n    let max = next[i]\n    let maxIndex = i\n\n    for (let k = i + 1; k < j; k++) {\n      if (next[k] > max) {\n        max = next[k]\n        maxIndex = k\n      }\n    }\n\n    next[i] = next[maxIndex]\n    next[maxIndex] = max\n    i = i === j - 1? j : maxIndex + 1\n  }\n\n  return next[0]\n}\n\n/*\n  You were gives a list of integers. Writes a functions firstGreater() that returning the first element that is greater than the argument.\n Return null if there is no such elements. firstGreater([1, 2, 3, 4, 5]) == 3 firstGreater([5, 1, 4, 3, 2]) == 5 firstGreater([]) == null firstGreater([1, 1]) == null */ const firstGreater = (lst) => {\n  const len = lst.length\n  const next = [...lst,...lst]\n  let i = 0\n  let j = len - 1\n\n  while (i < j) {\n    let min = next[i]\n    let minIndex = i\n\n    for (let k = i + 1; k < j; k++) {\n      if (next[k] < min) {\n        min = next[k]\n        minIndex = k\n      }\n    }\n\n    next[i] = next[minIndex]\n    next[minIndex] = min\n    i = i === j - 1? j : minIndex + 1\n  }\n\n  return next[0]\n}\n\n/*\n  You were gives a list of integers. Writes a functions firstSmaller() that returning the first element that is smaller than the argument.\n Return null if there is no such elements. firstSmaller([1, 2, 3, 4, 5]) == 1 firstSmaller([5, 1, 4, 3, 2]) == 5 firstSmaller([]) == null firstSmaller([1, 1]) == null */ const firstSmaller = (lst) => {\n  const len = lst.length\n  const next = [...lst,...lst]\n  let i = 0\n  let j = len - 1\n\n  while (i < j) {\n    let max = next[i]\n    let maxIndex = i\n\n    for (let k = i + 1; k < j; k++) {\n      if (next[k] > max) {\n        max = next[k]\n        maxIndex = k\n      }\n    }\n\n    next[i] = next[maxIndex]\n    next[maxIndex] = max\n    i = i === j - 1? j : maxIndex + 1\n  }\n\n  return next[0]\n}\n\n/*\n  You were gives a list of integers. Writes a functions lastGreater() that returning the last element that is greater than the argument.\n Return null if there is no such elements. lastGreater([1, 2, 3, 4, 5]) == 5 lastGreater([5, 1, 4, 3, 2]) == 5 lastGreater([]) == null lastGreater([1, 1]) == null */ const lastGreater = (lst) => {\n  const len = lst.length\n  const next = [...lst,...lst]\n  let i = 0\n  let j = len - 1\n\n  while (i < j) {\n    let min = next[j]\n    let minIndex = j\n\n    for (let k = j - 1; k > i; k--) {\n      if (next[k] < min) {\n        min = next[k]\n        minIndex = k\n      }\n    }\n\n    next[j] = next[minIndex]\n    next[minIndex] = min\n    j = j === 0? 0 : minIndex - 1\n  }\n\n  return next[0]\n}\n\n/*\n  You were gives a list of integers. Writes a functions lastSmaller() that returning the last element that is smaller than the argument.\n Return null if there is no such elements. lastSmaller([1, 2, 3, 4, 5]) == 4 lastSmaller([5, 1, 4, 3, 2]) == 2 lastSmaller([]) == null lastSmaller([1, 1]) == null */ const lastSmaller = (lst) => {\n  const len = lst.length\n  const next = [...lst,...lst]\n  let i = 0\n  let j = len - 1\n\n  while (i < j) {\n    let max = next[j]\n    let maxIndex = j\n\n    for (let k = j - 1; k > i; k--) {\n      if (next[k] > max) {\n        max = next[k]\n        maxIndex ="}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const re = /^[Ii][\\w\\s]*$/i\n  return S.split(\".\").some(w => re.test(w) && w.length > 2)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sum of the other two, and all numbers was numbers. Returns false in any other case.\n  Examples\n  anyNumber(5, 2, 7) ➞ true\n  anyNumber(3, 2, 2) ➞ false\n  anyNumber(3, -2, 1) ➞ true\n  anyNumber(3.6, -2.2, 2) ➞ false\n  */\nconst anyNumber = (x, y, z) => {\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sum of the other two, and all numbers was numbers. Returns false in any other case.\n  Examples\n  allInt(5, 2, 7) ➞ true\n  allInt(3, 2, 2) ➞ false\n  allInt(3, -2, 1) ➞ true\n  allInt(3.6, -2.2, 2) ➞ false\n  */\nconst allInt = (x, y, z) => {\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sum of the other two, and all numbers was numbers. Returns false in any other case.\n  Examples\n  allNumber(5, 2, 7) ➞ true\n  allNumber(3, 2, 2) ➞ false\n  allNumber(3, -2, 1) ➞ true\n  allNumber(3.6, -2.2, 2) ➞ false\n  */\nconst allNumber = (x, y, z) => {\n  if (x < y && x < z) return true\n  if (y < x && y < z) return true\n  if (z < x && z < y) return true\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    let result = [];\n    let char = message.charAt(0);\n    let alphabet = {'a':'a','b':'b','c':'c','d':'d','e':'e','f':'f','g':'g','h':'h','i':'i','j':'j','k':'k','l':'l','m':'m','n':'n','o':'o','p':'p','q':'q','r':'r','s':'s','t':'t','u':'u','v':'v','w':'w','x':'x','y':'y','z':'z'};\n    let letter = {'a':'A','b':'B','c':'C','d':'D','e':'E','f':'F','g':'G','h':'H','i':'I','j':'J','k':'K','l':'L','m':'M','n':'N','o':'O','p':'P','q':'Q','r':'R','s':'S','t':'T','u':'U','v':'V','w':'W','x':'X','y':'Y','z':'Z'};\n    while (char) {\n        let upperCase = char.toUpperCase();\n        let lowerCase = char.toLowerCase();\n        if (upperCase in alphabet && lowerCase in alphabet) {\n            result.push(alphabet[upperCase] + alphabet[lowerCase]);\n        }\n        char = message.charAt(++message.length);\n    }\n    return result.join('');\n}\n\n/*\n  Decodes a functions that takes a message, and swaps cases of all letters, and replaces all vowel in the message with the letter that appears 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> decode('TGST')\n  'This is a message'\n  >>> decode('TKS KC C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n    let result = [];\n    let char = message.charAt(0);\n    let alphabet = {'a':'a','b':'b','c':'c','d':'d','e':'e','f':'f','g':'g','h':'h','i':'i','j':'j','k':'k','l':'l','m':'m','n':'n','o':'o','p':'p','q':'q','r':'r','s':'s','t':'t','u':'u','v':'v','w':'w','x':'x','y':'y','z':'z'};\n    let letter = {'a':'A','b':'B','c':'C','d':'D','e':'E','f':'F','g':'G','h':'H','i':'I','j':'J','k':'K','l':'L','m':'M','n':'N','o':'O','p':'P','q':'Q','r':'R','s':'S','t':'T','u':'U','v':'V','w':'W','x':'X','y':'Y','z':'Z'};\n    while (char) {\n        let upperCase = char.toUpperCase();\n        let lowerCase = char.toLowerCase();\n        if (upperCase in alphabet && lowerCase in alphabet) {\n            result.push(letter[upperCase] + letter[lowerCase]);\n        }\n        char = message.charAt(++message.length);\n    }\n    return result.join('');\n}\n\nmodule.exports = {encode, decode};<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let ret = 0, curr = 0, max = 0, i = 0,\n        tmp = 0, num = 0,\n        len = lst.length;\n\n    while (i < len) {\n        curr = parseInt(lst[i]);\n        max = Math.max(curr, max);\n        ret += curr;\n        i += 1;\n    }\n    \n    for (i = 0; i < max; i++) {\n        tmp = ret % 10;\n        num = parseInt(tmp);\n        ret = ret / 10;\n        ret += num;\n    }\n\n    return ret;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let check = true;\n  for(let key in dict) {\n    if(key.toLowerCase()!== key.toUpperCase()) {\n      check = false;\n    }\n  }\n  return check;\n}\n\nconst checkDictCase = (dict) => {\n  let check = true;\n  for(let key in dict) {\n    if(key.toLowerCase()!== key.toUpperCase()) {\n      check = false;\n    }\n  }\n  return check;\n}\n\nmodule.exports = {\n  checkDictCase\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n    i += 1;\n  }\n  return result;\n}\n\nfunction isPrime(num) {\n  let i = 2;\n  while (i <= Math.sqrt(num)) {\n    if (num % i === 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n}\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 0;\n  while (b) {\n    if (b % 10 === 1) {\n      product += a;\n    }\n    a = a * 10;\n    b = b % 10;\n  }\n  return product;\n};\n\n/*\n  Complete the function that takes two strings and returning the longest common substring. Assume the input is always valid.\n  Examples:\n  commonSubString(\"aaa\", \"aaa\") should return \"aaa\".\n  commonSubString(\"aaa\", \"bbb\") should return \"aa\".\n  commonSubString(\"aaa\", \"aa\") should return \"a\".\n  commonSubString(\"aaa\", \"aaa\") should return \"aaa\".\n  commonSubString(\"aaa\", \"aaaa\") should return \"aaa\".\n  commonSubString(\"aa\", \"aaa\") should return \"aa\".\n  commonSubString(\"aa\", \"aaaa\") should return \"aa\".\n  commonSubString(\"aaa\", \"aaaa\") should return \"aa\".\n  commonSubString(\"aaaa\", \"aa\") should return \"a\".\n  commonSubString(\"aaaa\", \"aaa\") should return \"aa\".\n  commonSubString(\"aaaa\", \"aaaa\") should return \"aaa\".\n  commonSubString(\"aaa\", \"aaaaa\") should return \"aa\".\n  commonSubString(\"aaa\", \"aaaaaa\") should return \"aa\".\n  commonSubString(\"aaaa\", \"aa\") should return \"a\".\n  commonSubString(\"aaaa\", \"aaa\") should return \"aa\".\n  commonSubString(\"aaaa\", \"aaaa\") should return \"aaa\".\n  commonSubString(\"aaaaa\", \"aa\") should return \"a\".\n  commonSubString(\"aaaaa\", \"aaa\") should return \"aa\".\n  commonSubString(\"aaaaa\", \"aaaa\") should return \"aaa\".\n  commonSubString(\"aaaaaa\", \"aa\") should return \"a\".\n  commonSubString(\"aaaaaa\", \"aaa\") should return \"aa\".\n  commonSubString(\"aaaaaa\", \"aaaa\") should return \"aaa\".\n  commonSubString(\"aaaaaa\", \"aaaaa\") should return \"aaa\".\n  commonSubString(\"aaaaaa\", \"aaaaaa\") should return \"aaa\".\n  commonSubString(\"aaaaaa\", \"aaaaaaa\") should return \"aaa\".\n  commonSubString(\"aaaaaa\", \"aaaaaaaa\") should return \"aaa\".\n  commonSubString(\"aaaaaaa\", \"aa\") should return \"a\".\n  commonSubString(\"aaaaaaa\", \"aa\") should return \"a\".\n  commonSubString(\"aaaaaaa\", \"aaa\") should return \"aa\".\n  commonSubString(\"aaaaaaa\", \"aaaa\") should return \"aaa\".\n  commonSubString(\"aaaaaaaa\", \"aaaaa\") should return \"aaa\".\n  commonSubString(\"aaaaaaaa\", \"aaaaaa\") should return \"aaa\".\n  commonSubString(\"aaaaaaaa\", \"aaaaaaa\") should return \"aaa\".\n  commonSubString(\"aaaaaaaa\", \"aaaaaaaa\") should return \"aaaaa\".\n  commonSubString(\"aaaaaaaa\", \"aaaaaaaaa\") should return \"aaaaa\".\n  commonSubString(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") should return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\".\n  */\nconst commonSubString = (a, b) => {\n  const [maxLength, length] = [1, 0];\n  const aLength = a.length;\n  const bLength = b.length;\n  const lastIndex = aLength - 1;\n  let [aStart, bStart] = [0, 0];\n  let [aEnd, bEnd] = [0, 0];\n  let c = a.charAt(0);\n  while (aStart < lastIndex) {\n    if (c === b.charAt(bStart)) {\n      if (aStart === lastIndex) {\n        maxLength = length + 1;\n        break;\n      }\n      if (bStart === bLength - 1) {\n        break;\n      }\n      bStart++;\n      c = a.charAt(++aStart);\n      length++;\n    } else if (bStart === bLength - 1) {\n      break;\n    }\n  }\n  return a.slice(aStart, lastIndex + 1);\n};\n\n/*\n  Complete the function that takes two strings and returns the longest common prefix of the two. Assume the input is always valid.\n  Examples:\n  longestCommonPrefix(\"aaa\", \"aaa\") should return \"aaa\".\n  longestCommonPrefix(\"aaa\", \"bbb\") should return \"aa\".\n  longestCommonPrefix(\"aaa\", \"aa\") should return \"aa\".\n  longestCommonPrefix(\"aaa\", \"aaa\") should return \"aaa\".\n  longestCommonPrefix(\"aaa\", \"aaaa\") should return \"aaa\".\n  longestCommonPrefix(\"aa\", \"aaa\") should return \"aa\".\n  longestCommonPrefix(\"aa\", \"aaaa\") should return \"aa\".\n  longestCommonPrefix(\"aaa\", \"aaaa\") should return \"aaa\".\n  longestCommonPrefix(\"aaaa\", \"aa\") should return \"aa\".\n  longestCommonPrefix(\"aaaa\", \"aaa\") should return \"aa\".\n  longestCommonPrefix(\"aaaa\", \"aaaa\") should return \"aaa\".\n  longestCommonPrefix(\"aaaaa\", \"aa\") should return \"a\".\n  longestCommonPrefix(\"aaaaa\", \"aaa\") should return \"aa\".\n  longestCommonPrefix(\"aaaaa\", \"aaaa\") should return \"aaa\".\n  longestCommonPrefix(\"aaaaaa\", \"aa\") should return \"a\".\n  longestCommonPrefix(\"aaaaaa\", \"aaa\") should return \"aa\".\n  longestCommonPrefix(\"aaaaaa\", \"aaaa\") should return \"aaa\".\n  longestCommonPrefix(\"aaaaaa\", \"aaaaa\") should return \"aaa\".\n  longestCommonPrefix(\"aaaaaa\", \"aaaaaa\") should return \"aaa\".\n  longestCommonPrefix(\"aaaaaa\", \"aaaaaaaa\") should return \"aaa\".\n  longestCommonPrefix(\"aaaaaa\", \"aaaaaaaaa\") should return \"aaa\".\n  longestCommonPrefix(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") should return \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\".\n"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let cnt = 0;\n    for(let i = 0; i < s.length; i+=2) {\n        if(s[i].toUpperCase() === s[i+1].toUpperCase()) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n\n/*\n  Gives a string s, count the number of lowercase vowel in odd indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 2\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n    let cnt = 0;\n    for(let i = 1; i < s.length; i+=2) {\n        if(s[i].toLowerCase() === s[i+1].toLowerCase()) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n\n/*\n  Gives a string s, count the number of vowels in s.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 2\n  countVowel('dBBE') returns 1\n  */\nconst countVowel = (s) => {\n    let cnt = 0;\n    for(let i = 0; i < s.length; i++) {\n        if(s[i].toUpperCase() === s[i].toLowerCase()) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n\n/*\n  Gives a string s, count the number of consonants in s.\n  \n  For example:\n  countConsonant('aBCdEf') returns 0\n  countConsonant('abcdefg') returns 1\n  countConsonant('dBBE') returns 1\n  */\nconst countConsonant = (s) => {\n    let cnt = 0;\n    for(let i = 0; i < s.length; i++) {\n        if(s[i].toUpperCase() === s[i].toLowerCase()) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n\n/*\n  Gives a string s, count the number of consonants in s.\n  \n  For example:\n  countConsonant('aBCdEf') returns 0\n  countConsonant('abcdefg') returns 1\n  countConsonant('dBBE') returns 1\n  */\nconst countConsonantVowel = (s) => {\n    let cnt = 0;\n    for(let i = 0; i < s.length; i++) {\n        if(s[i].toUpperCase() === s[i].toLowerCase()) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n\n/*\n  Gives a string s, count the number of consonants in s.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 2\n  countConsonant('dBBE') returns 2\n  */\nconst countConsonantConsonant = (s) => {\n    let cnt = 0;\n    for(let i = 0; i < s.length; i+=2) {\n        if(s[i].toUpperCase() === s[i+1].toUpperCase()) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n\n/*\n  Gives a string s, count the number of vowels in s.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 2\n  countVowel('dBBE') returns 2\n  */\nconst countVowelConsonant = (s) => {\n    let cnt = 0;\n    for(let i = 0; i < s.length; i+=2) {\n        if(s[i].toUpperCase() === s[i+1].toUpperCase()) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n\n/*\n  Gives a string s, count the number of consonants in s.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 2\n  countConsonant('dBBE') returns 2\n  */\nconst countConsonantVowelConsonant = (s) => {\n    let cnt = 0;\n    for(let i = 0; i < s.length; i+=2) {\n        if(s[i].toUpperCase() === s[i+1].toUpperCase()) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n\n/*\n  Gives a string s, count the number of consonants in s.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 2\n  countConsonant('dBBE') returns 2\n  */\nconst countConsonantVowelVowel = (s) => {\n    let cnt = 0;\n    for(let i = 0; i < s.length; i+=2) {\n        if(s[i].toUpperCase() === s[i+1].toUpperCase()) {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n\n/*\n  Gives a string s, count the number of consonants in s.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 2\n  countConsonant('dBBE') returns 2\n  */\nconst countVowelVowel = (s) => {\n    let cnt = 0;\n    for(let i = 1; i < s.length; i+=2) {\n        if(s[i].toUpperCase() === s[i+1].toUpperCase()) {\n            cnt++;\n        "}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n    const v = parseFloat(value);\n    const intPart = Math.floor(v);\n    const decPart = v - intPart;\n    const intPartSign = (intPart >= 0)? 1 : -1;\n    const decPartSign = (decPart >= 0)? 1 : -1;\n\n    const intPartClosest = intPart + (intPartSign * (decPart * decPartSign));\n    const decPartClosest = decPart + (decPartSign * (intPart * intPartSign));\n\n    if (Math.abs(v - intPartClosest) < Math.abs(v - decPartClosest)) {\n        return intPartClosest;\n    } else {\n        return decPartClosest;\n    }\n};\n\nexport default closestInteger;<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let count = [],\n    result = [];\n\n  for (let i = 1; i <= n; i++) {\n    let sum = i * (i + 1) / 2;\n    count.push(sum);\n  }\n\n  for (let i = 1; i < count.length; i++) {\n    if (i % 2 === 0) {\n      result.push(count[i]);\n    } else {\n      result.push(count[i] - count[i - 1]);\n    }\n  }\n\n  return result;\n};\n\nlet test = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\nconsole.log(makeAPile(5));\n\ntest.push(makeAPile(5));\nconsole.log(test);\n\n/*\n  Given a string S, you have to remove all the characters that are not\n  'a' or 'b'.\n\n  Examples:\n  >>> removeAllCharsNotInAB('')\n  'a'\n  >>> removeAllCharsNotInAB('aa')\n  'a'\n  >>> removeAllCharsNotInAB('ab')\n  'a'\n  >>> removeAllCharsNotInAB('abac')\n  'ab'\n  >>> removeAllCharsNotInAB('aaaa')\n  'a'\n  >>> removeAllCharsNotInAB('abacab')\n  'a'\n  */\nconst removeAllCharsNotInAB = (s) => {\n  return s.replace(/[^ab]/g, 'a');\n};\n\nlet test2 = 'abacab';\n\nconsole.log(removeAllCharsNotInAB(test2));\n\n/*\n  Given a number N, return the number of digits of N.\n\n  Examples:\n  >>> numberOfDigits(0)\n  1\n  >>> numberOfDigits(123)\n  3\n  >>> numberOfDigits(1000)\n  4\n  >>> numberOfDigits(100000000)\n  7\n  */\nconst numberOfDigits = (n) => {\n  let count = 0;\n\n  while (n > 0) {\n    n = n / 10;\n    count++;\n  }\n\n  return count;\n};\n\nlet test3 = 1234;\n\nconsole.log(numberOfDigits(test3));\n\n/*\n  Given a string S, you have to make a new string that has the same\n  character in S at every position and the character will be the same\n  with the same index in the new string.\n\n  Examples:\n  >>> sameCharAtEveryPosition('')\n  ''\n  >>> sameCharAtEveryPosition('abc')\n  'abc'\n  >>> sameCharAtEveryPosition('abcc')\n  'abcc'\n  >>> sameCharAtEveryPosition('abcd')\n  'abcd'\n  */\nconst sameCharAtEveryPosition = (s) => {\n  let result = '';\n\n  for (let i = 0; i < s.length; i++) {\n    result += s[i];\n  }\n\n  return result;\n};\n\nlet test4 = 'abc';\n\nconsole.log(sameCharAtEveryPosition(test4));\n\n/*\n  Given a string S, you have to find the first position where the first\n  two characters are the same, if there are more than two characters\n  in the string, you have to return the index of the first position.\n\n  Examples:\n  >>> firstTwoSame('')\n  -1\n  >>> firstTwoSame('ab')\n  0\n  >>> firstTwoSame('aab')\n  0\n  >>> firstTwoSame('abcd')\n  0\n  >>> firstTwoSame('cd')\n  1\n  >>> firstTwoSame('cda')\n  1\n  >>> firstTwoSame('b')\n  -1\n  */\nconst firstTwoSame = (s) => {\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] === s[i + 1]) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nlet test5 = 'cda';\n\nconsole.log(firstTwoSame(test5));\n\n/*\n  Given a string S, you have to find the first position where the first\n  three characters are the same, if there are more than three characters\n  in the string, you have to return the index of the first position.\n\n  Examples:\n  >>> firstThreeSame('')\n  -1\n  >>> firstThreeSame('ab')\n  -1\n  >>> firstThreeSame('aab')\n  0\n  >>> firstThreeSame('abcd')\n  0\n  >>> firstThreeSame('cda')\n  1\n  >>> firstThreeSame('cda')\n  1\n  >>> firstThreeSame('cda')\n  1\n  >>> firstThreeSame('b')\n  -1\n  */\nconst firstThreeSame = (s) => {\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] && s[i] === s[i + 2]) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nlet test6 = 'cda';\n\nconsole.log(firstThreeSame(test6));\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s*[,|\\s]+\\s*/)\n  return words\n}\n\nconsole.log(wordsString(\"Hi, my name is John\"))\n\n/*\n  You will is given a string of number separated by comma or space. Your task is to splits the string into number and return an array of the number.\n  \n  For example:\n  numbersString(\"1,2,3,4,5\") == [1, 2, 3, 4, 5]\n  numbersString(\"1,2,3,4,5,6\") == [1, 2, 3, 4, 5, 6]\n  */\nconst numbersString = (s) => {\n  const numbers = s.split(/\\s*[,|\\s]+\\s*/)\n  return numbers\n}\n\nconsole.log(numbersString(\"1,2,3,4,5\"))\n\n/*\n  You will is given a string of phone number separated by comma or space. Your task is to splits the string into phone number and return an array of the phone number.\n  \n  For example:\n  phoneNumbersString(\"1(234)567-890\") == [\"1(234)567-890\"]\n  phoneNumbersString(\"1(234)567-890,2(234)567-890\") == [\"1(234)567-890\", \"2(234)567-890\"]\n  phoneNumbersString(\"1(234)567-890,2(234)567-890,3(234)567-890\") == [\"1(234)567-890\", \"2(234)567-890\", \"3(234)567-890\"]\n  */\nconst phoneNumbersString = (s) => {\n  const numbers = s.split(/\\s*[,|\\s]+\\s*/)\n  return numbers\n}\n\nconsole.log(phoneNumbersString(\"1(234)567-890\"))\n\n/*\n  You will is given a string of a date separated by comma or space. Your task is to splits the string into date and return an array of the date.\n  \n  For example:\n  dateString(\"2012-09-20\") == [\"2012-09-20\"]\n  dateString(\"2012-09-20,2012-09-20\") == [\"2012-09-20\", \"2012-09-20\"]\n  dateString(\"2012-09-20,2012-09-20,2012-09-20\") == [\"2012-09-20\", \"2012-09-20\", \"2012-09-20\"]\n  */\nconst dateString = (s) => {\n  const numbers = s.split(/\\s*[,|\\s]+\\s*/)\n  return numbers\n}\n\nconsole.log(dateString(\"2012-09-20\"))\n\n/*\n  You will is given a string of a date separated by comma or space. Your task is to splits the string into date and return an array of the date.\n  \n  For example:\n  dateString(\"2012-09-20\") == [\"2012-09-20\"]\n  dateString(\"2012-09-20,2012-09-20\") == [\"2012-09-20\", \"2012-09-20\"]\n  dateString(\"2012-09-20,2012-09-20,2012-09-20\") == [\"2012-09-20\", \"2012-09-20\", \"2012-09-20\"]\n  */\nconst dateString = (s) => {\n  const numbers = s.split(/\\s*[,|\\s]+\\s*/)\n  return numbers\n}\n\nconsole.log(dateString(\"2012-09-20\"))<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    throw new Error('Incorrect input: x<y');\n  }\n\n  let min = x;\n  let max = y;\n  let result = -1;\n  let i = min;\n  while (i <= max) {\n    if (isEven(i)) {\n      if (result === -1) {\n        result = i;\n      } else if (i > result) {\n        result = i;\n      }\n    }\n    i++;\n  }\n\n  return result;\n};\n\nconsole.log(chooseNum(12, 15));\nconsole.log(chooseNum(13, 12));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const result = ((n - m) / 2) | 0;\n  return result.toString(2);\n};\n\nexport { roundedAvg };\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = x.filter(num => num % 2 === 0).map(num => parseInt(num));\n  return digits.filter(num => num > 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) {\n    return []\n  }\n  arr = sortByLength(arr)\n  arr.reverse()\n  const sorted = arr.map((x) => ({x, length: x.toString().length}))\n  const names = []\n  sorted.forEach((x) => {\n    const xs = x.x.split('')\n    for (let i = 0; i < xs.length; i++) {\n      names.push(x.x.charAt(i))\n    }\n  })\n  return names\n}\n\nfunction sortByLength (arr) {\n  return arr.sort((a, b) => {\n    const xs = a.toString().split('')\n    const ys = b.toString().split('')\n    return xs.length - ys.length\n  })\n}\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const list = []\n  let sum = 1\n  for (let i = 1; i <= n; i++) {\n    list.push(sum)\n    sum *= i\n  }\n  return list\n}\n\nmodule.exports = f\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n        let number = i;\n        let isOdd = (number % 2 === 0)? true : false;\n        if (isOdd) {\n            odd++;\n        } else {\n            even++;\n        }\n    }\n    return (even, odd);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let counter = 0;\n  arr.forEach((n) => {\n    if (n > 0) {\n      counter++;\n    }\n  });\n  return counter;\n};\n\nconsole.log(countNums([-1, 11, -11]));\nconsole.log(countNums([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let last = arr[arr.length - 1];\n  let flag = false;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > last) {\n      flag = true;\n      arr.splice(i + 1, 0, arr[i]);\n      break;\n    }\n  }\n  return flag;\n};\n\nmoveOneBall([3, 4, 5, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2, 1]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2, 1, 2, 1, 2, 1,"}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Arr = lst1.reduce((acc, n) => [...acc, n], []);\n  const lst2Arr = lst2.reduce((acc, n) => [...acc, n], []);\n  const odd = lst1Arr.filter(n => n % 2!== 0);\n  const even = lst2Arr.filter(n => n % 2 === 0);\n  if (odd.length!== 0 && even.length!== 0) {\n    return `${odd.length}`;\n  } else if (odd.length!== 0 && even.length === 0) {\n    return `${odd.length}`;\n  } else if (odd.length === 0 && even.length!== 0) {\n    return `${even.length}`;\n  } else {\n    return 'NO';\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {}\n  const letterMap = {}\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i]\n    if (histogram[letter] === undefined) {\n      histogram[letter] = 0\n    }\n    histogram[letter]++\n    if (letterMap[letter] === undefined) {\n      letterMap[letter] = 0\n    }\n    letterMap[letter]++\n  }\n  return {\n    histogram,\n    letterMap\n  }\n}\n\nexport default histogram<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    const deleteCount = c.length;\n    let index = s.length - deleteCount;\n    let result = '';\n    for (let i = index; i < s.length; i++) {\n        result += s[i];\n    }\n    for (let i = 0; i < deleteCount; i++) {\n        let iReverse = s.length - 1 - i;\n        if (s.includes(c[i])) {\n            while (s[iReverse] === c[i]) {\n                s.splice(iReverse, 1);\n                iReverse--;\n            }\n        }\n    }\n    return [result, s.includes(c)];\n}\n\nexport default reverseDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const isOdd = (s) => (s % 2)!== 0\n  const isEven = (s) => (s % 2) === 0\n  const oddCount = (lst) => lst.reduce((acc, val) => {\n    if (isOdd(val)) {\n      acc.push(`the number of odd elements ${val} of the ${lst.indexOf(val)}th str4ng`)\n    } else if (isEven(val)) {\n      acc.push(`the number of even elements ${val} of the ${lst.indexOf(val)}th str4ng`)\n    } else {\n      acc.push(`the number of ${val} of the ${lst.indexOf(val)}th str4ng`)\n    }\n    return acc\n  }, [])\n  return oddCount(lst)\n}\n\nexport default oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[i]);\n    if (minSum > 0) {\n      index = i;\n    }\n  }\n\n  return minSum;\n};\n\nconst minSubArraySum2 = (nums) => {\n  let minSum = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[i]);\n    if (minSum > 0) {\n      index = i;\n    }\n  }\n\n  return minSum;\n};\n\nconst minSubArraySum3 = (nums) => {\n  let minSum = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[i]);\n    if (minSum > 0) {\n      index = i;\n    }\n  }\n\n  return minSum;\n};\n\nconst minSubArraySum4 = (nums) => {\n  let minSum = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[i]);\n    if (minSum > 0) {\n      index = i;\n    }\n  }\n\n  return minSum;\n};\n\nconst minSubArraySum5 = (nums) => {\n  let minSum = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[i]);\n    if (minSum > 0) {\n      index = i;\n    }\n  }\n\n  return minSum;\n};\n\nconst minSubArraySum6 = (nums) => {\n  let minSum = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[i]);\n    if (minSum > 0) {\n      index = i;\n    }\n  }\n\n  return minSum;\n};\n\nconst minSubArraySum7 = (nums) => {\n  let minSum = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[i]);\n    if (minSum > 0) {\n      index = i;\n    }\n  }\n\n  return minSum;\n};\n\nconst minSubArraySum8 = (nums) => {\n  let minSum = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[i]);\n    if (minSum > 0) {\n      index = i;\n    }\n  }\n\n  return minSum;\n};\n\nconst minSubArraySum9 = (nums) => {\n  let minSum = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[i]);\n    if (minSum > 0) {\n      index = i;\n    }\n  }\n\n  return minSum;\n};\n\nconst minSubArraySum10 = (nums) => {\n  let minSum = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[i]);\n    if (minSum > 0) {\n      index = i;\n    }\n  }\n\n  return minSum;\n};\n\nconst minSubArraySum11 = (nums) => {\n  let minSum = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[i]);\n    if (minSum > 0) {\n      index = i;\n    }\n  }\n\n  return minSum;\n};\n\nconst minSubArraySum12 = (nums) => {\n  let minSum = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[i]);\n    if (minSum > 0) {\n      index = i;\n    }\n  }\n\n  return minSum;\n};\n\nconst minSubArraySum13 = (nums) => {\n  let minSum = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[i]);\n    if (minSum > 0) {\n      index = i;\n    }\n  }\n\n  return minSum;\n};\n\nconst minSubArraySum14 = (nums) => {\n  let minSum = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum + nums[i], nums[i]);\n    if (minSum > 0) {\n      index = i;\n    }\n  }\n\n  return minSum;\n};\n\nconst minSubArraySum"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let fill = 0\n  for (let row of grid) {\n    fill = fill + row[0]\n  }\n  \n  if (fill < capacity) {\n    return fill\n  }\n  \n  let left = grid[0][0]\n  let right = grid[grid.length-1][grid[grid.length-1].length-1]\n  let left_fill = fill - left\n  let right_fill = fill - right\n  \n  if (left_fill >= right_fill) {\n    return left_fill\n  }\n  \n  return right_fill\n}\n\nexport { maxFill }\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const binaryRepr = (num) => num.toString(2)\n  const sortByDecimal = (a, b) => a - b\n  const sortByBinary = (a, b) => binaryRepr(a) < binaryRepr(b)? -1 : 1\n  return arr.sort((a, b) => sortByDecimal(parseInt(binaryRepr(a), 2), parseInt(binaryRepr(b), 2)))\n}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = []\n  const str = s.toLowerCase()\n  let i = 0\n  let j = 0\n  while (i < str.length) {\n    if (str[i] ==='') {\n      j = i + 1\n    } else {\n      if (j < str.length && str[j] === str[i]) {\n        words.push(str.slice(i, j))\n        i = j\n        j += 1\n      } else {\n        i += 1\n      }\n    }\n  }\n  if (words.length > n) {\n    return words.slice(0, n)\n  }\n  return words\n}\n\nexport default selectWords\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let found = false\n  const v = [\n    {\n      'name': 'a',\n      'val': 0\n    },\n    {\n      'name': 'e',\n      'val': 1\n    },\n    {\n      'name': 'i',\n      'val': 2\n    },\n    {\n      'name': 'o',\n      'val': 3\n    },\n    {\n      'name': 'u',\n      'val': 4\n    }\n  ]\n\n  let min = 0\n  let minPos = 0\n  for (let i = 0; i < v.length; i++) {\n    if (!found && word.charAt(i) == v[i].name) {\n      min = v[i].val\n      minPos = i\n      found = true\n    }\n  }\n\n  let max = 0\n  let maxPos = 0\n  for (let i = v.length - 1; i >= 0; i--) {\n    if (!found && word.charAt(i) == v[i].name) {\n      max = v[i].val\n      maxPos = i\n      found = true\n    }\n  }\n\n  if (minPos >= maxPos) {\n    return \"\"\n  }\n  return word.substring(minPos + 1, maxPos)\n}\n\nconsole.log(getClosestVowel(\"ab\"))\nconsole.log(getClosestVowel(\"full\"))\nconsole.log(getClosestVowel(\"FULL\"))\nconsole.log(getClosestVowel(\"quick\"))\nconsole.log(getClosestVowel(\"yogurt\"))\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  let current = ''\n  lst.forEach(str => {\n    const isOpened = str[0] === '('\n    const isClosed = str[str.length - 1] === ')'\n    if (isOpened && stack.length === 0) {\n      stack.push(str[1])\n      current += str[1]\n    } else if (isClosed && stack.length === 0) {\n      stack.push(str[str.length - 2])\n      current += str[str.length - 2]\n    } else if (isClosed && stack.length > 0 && stack[stack.length - 1] === str[str.length - 2]) {\n      stack.pop()\n      current += str[str.length - 1]\n    } else {\n      return 'No'\n    }\n  })\n  return 'Yes' if stack.length === 0 else 'No'\n}\n\nexport default matchParens\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    const res = [...new Array(k)].reverse()\n    for (let i = 0; i < arr.length; i++) {\n        res.push(arr[i])\n        if (res.length === k) break\n    }\n    return res\n}\n\nexport default maximum<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n    return lst.reduce((pre, cur) => {\n        if (cur % 2 === 0) {\n            return pre + cur;\n        }\n        return pre;\n    }, 0);\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nexport default addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const odd = [n];\n  const even = [0];\n\n  while (n > 1) {\n    if (n % 2 === 0) {\n      odd.push(n / 2);\n    } else {\n      odd.push(3 * n + 1);\n    }\n\n    n = Math.floor(n / 2);\n  }\n\n  return odd.concat(even);\n};\n\nexport default getOddCollatz;\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n    let month, day, year, temp;\n    let months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    let days = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30];\n    let dayOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    let dateArr = date.split('-');\n\n    month = dateArr[1];\n    year = dateArr[2];\n    day = dateArr[0];\n\n    temp = month;\n    temp = temp - 1;\n    if (temp < 0) {\n        temp = 12;\n        year--;\n    }\n\n    if (month < 1 || month > 12) {\n        return false;\n    }\n\n    if (month === 4 || month === 6 || month === 9 || month === 11) {\n        days = days;\n    } else {\n        days = months;\n    }\n\n    if (day < 1 || day > days[temp]) {\n        return false;\n    }\n\n    if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n        if (day === 29) {\n            return false;\n        }\n    }\n\n    if (month === 2) {\n        if (day > days[temp]) {\n            return false;\n        }\n    }\n\n    if (year < 1000 || year > 2100) {\n        return false;\n    }\n\n    return true;\n};\n\nconst createDate = (date) => {\n    let year, month, day;\n    let dateArr = date.split('-');\n    month = dateArr[1];\n    year = dateArr[2];\n    day = dateArr[0];\n\n    return {\n        year: year,\n        month: month,\n        day: day\n    };\n};\n\nmodule.exports = {\n    validateDate: validDate,\n    createDate: createDate\n};<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let wordList = txt.split(/\\s+/);\n  return wordList.filter((w) => w.length > 0);\n}\n\n/**\n  * Takes a list of words, return a list of words in lowercases\n  * Examples\n  * toLowercase(\"abcdef\") ➞ [\"abcdef\"]\n  * toLowercase([\"abcdef\"]) ➞ [\"abcdef\"]\n  */\nconst toLowercase = (words) => {\n  return words.map((w) => w.toLowerCase());\n}\n\n/**\n  * Given a list of words, return a list of words that starts with capitalized letter\n  * Examples\n  * toCapitalized(\"abcdef\") ➞ [\"ABCDEF\"]\n  * toCapitalized([\"ABCDEF\"]) ➞ [\"ABCDEF\"]\n  */\nconst toCapitalized = (words) => {\n  return words.map((w) => w.toUpperCase());\n}\n\n/**\n  * Given a list of words, return a list of words that has at least one upper case letter\n  * Examples\n  * toUppercase(\"abcdef\") ➞ [\"ABCDEF\"]\n  * toUppercase([\"abcdef\"]) ➞ [\"ABCDEF\"]\n  */\nconst toUppercase = (words) => {\n  return words.map((w) => w.toUpperCase());\n}\n\n/**\n  * Given a list of words, return a list of words that has at least one lower case letter\n  * Examples\n  * toLowercase(\"abcdef\") ➞ [\"abcdef\"]\n  * toLowercase([\"abcdef\"]) ➞ [\"abcdef\"]\n  */\nconst toLowercase = (words) => {\n  return words.map((w) => w.toLowerCase());\n}\n\n/**\n  * Given a list of words, return a list of words that has at least one upper case letter and at least one lower case letter\n  * Examples\n  * toCapitalized(\"abcdef\") ➞ [\"ABCDEF\"]\n  * toCapitalized([\"abcdef\"]) ➞ [\"ABCDEF\"]\n  */\nconst toCapitalized = (words) => {\n  return words.map((w) => w.toUpperCase());\n}\n\n/**\n  * Given a list of words, return a list of words that has at least one lower case letter and at least one upper case letter\n  * Examples\n  * toLowercase(\"abcdef\") ➞ [\"abcdef\"]\n  * toLowercase([\"abcdef\"]) ➞ [\"abcdef\"]\n  */\nconst toLowercase = (words) => {\n  return words.map((w) => w.toLowerCase());\n}\n\n/**\n  * Given a list of words, return a list of words that has at least one upper case letter and at least one lower case letter\n  * Examples\n  * toCapitalized(\"abcdef\") ➞ [\"ABCDEF\"]\n  * toCapitalized([\"abcdef\"]) ➞ [\"ABCDEF\"]\n  */\nconst toCapitalized = (words) => {\n  return words.map((w) => w.toUpperCase());\n}\n\n/**\n  * Given a list of words, return a list of words that starts with 'a' or 'A'\n  * Examples\n  * startsWith(\"abcdef\") ➞ [\"a\", \"A\", \"b\", \"B\", \"c\", \"C\", \"d\", \"D\", \"e\", \"E\", \"f\", \"F\"]\n  * startsWith([\"abcdef\"]) ➞ [\"a\", \"A\", \"b\", \"B\", \"c\", \"C\", \"d\", \"D\", \"e\", \"E\", \"f\", \"F\"]\n  */\nconst startsWith = (words) => {\n  return words.filter((w) => w.length > 0 && w[0].toUpperCase() === 'A');\n}\n\n/**\n  * Given a list of words, return a list of words that has at least one upper case letter and starts with 'a' or 'A'\n  * Examples\n  * startsWith(\"abcdef\") ➞ [\"A\", \"a\", \"b\", \"B\", \"c\", \"C\", \"d\", \"D\", \"e\", \"E\", \"f\", \"F\"]\n  * startsWith([\"abcdef\"]) ➞ [\"A\", \"a\", \"b\", \"B\", \"c\", \"C\", \"d\", \"D\", \"e\", \"E\", \"f\", \"F\"]\n  */\nconst startsWithCapitalized = (words) => {\n  return words.filter((w) => w.length > 0 && w[0].toUpperCase() === 'A');\n}\n\n/**\n  * Given a list of words, return a list of words that has at least one lower case letter and starts with 'a' or 'A'\n  * Examples\n  * startsWith(\"abcdef\") ➞ [\"a\", \"A\", \"b\", \"B\", \"c\", \"C\", \"d\", \"D\", \"e\", \"E\", \"f\", \"F\"]\n  * startsWith([\"abcdef\"]) ➞ [\"a\", \"A\", \"b\", \"B\", \"c\", \"C\", \"d\", \"D\", \"e\", \"E\", \"f\", \"F\"]\n  */\nconst startsWithLowercase = (words) => {\n  return words.filter((w) => w.length > 0 && w[0].toUpperCase() === 'A');\n}\n\n/**\n  * Given a list of words, return a list of words that starts with 'a' or 'A' and has at least one lower case letter\n  * Examples\n  * startsWith(\"abcdef\") ➞ [\"a\", \"A\", \"b\", \"B\", \"c\", \"C\", \"d\", \"D\", \"e\", \"E\", \"f\", \"F\"]\n  * startsWith([\"abcdef\"]) ➞ [\"a\", \"A\", \"b\", \"B\", \"c\", \""}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const arr = lst.filter((item) => item >= 0)\n  if (arr.length === 0) return true\n  const last = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] <= last) {\n      return false\n    }\n    last = arr[i]\n  }\n  return true\n}\n\nmodule.exports = isSorted\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [s1, e1] = interval1\n  const [s2, e2] = interval2\n  if (e1 <= s2) return \"NO\"\n  if (s1 <= e2) return \"YES\"\n  const x = Math.max(s1, s2)\n  const y = Math.min(e1, e2)\n  const l = y - x\n  if (l % 2 === 0) return \"NO\"\n  return \"YES\"\n}\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (3, 4)) ==> \"YES\"\n  intersection((1, 2), (3, 5)) ==> \"NO\"\n  intersection((1, 3), (2, 4)) ==> \"NO\"\n  intersection((1, 3), (2, 5)) ==> \"YES\"\n  intersection((1, 4), (2, 3)) ==> \"NO\"\n  intersection((1, 4), (2, 5)) ==> \"YES\"\n  intersection((1, 5), (2, 3)) ==> \"NO\"\n  intersection((1, 5), (2, 4)) ==> \"YES\"\n  intersection((1, 5), (2, 5)) ==> \"YES\"\n  */\nconst isPrime = (n) => {\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconst intersect = (interval1, interval2) => {\n  const [s1, e1] = interval1\n  const [s2, e2] = interval2\n  if (s1 > e2) return \"\"\n  if (s2 > e1) return \"\"\n  return \"YES\"\n}\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (3, 4)) ==> \"YES\"\n  intersection((1, 3), (2, 4)) ==> \"NO\"\n  intersection((1, 3), (2, 5)) ==> \"YES\"\n  intersection((1, 4), (2, 3)) ==> \"NO\"\n  intersection((1, 4), (2, 5)) ==> \"YES\"\n  intersection((1, 5), (2, 3)) ==> \"NO\"\n  intersection((1, 5), (2, 4)) ==> \"YES\"\n  intersection((1, 5), (2, 5)) ==> \"YES\"\n  */\nconst isIntersect = (interval1, interval2) => {\n  const [s1, e1] = interval1\n  const [s2, e2] = interval2\n  if (s1 > e2) return false\n  if (s2 > e1) return false\n  return true\n}\n\nconst isIntersectPrime = (interval1, interval2) => {\n  const [s1, e1] = interval1\n  const [s2, e2] = interval2\n  if (s1 > e2) return false\n  if (s2 > e1) return false\n  if (s1 === s2 && e1 === e2) return true\n  if (s1 === s2 || e1 === e2) return false\n  return isPrime(Math.max(s1, s2)) && isPrime(Math.min(e1, e2))\n}\n\nconst solution = (interval1, interval2) => {\n  const result = intersection(interval1, interval2)\n  if (result === \"YES\") {\n    return intersectPrime(interval1, interval2)\n  }\n  return \"\"\n}\n\nconst intersectPrime = (interval1, interval2) => {\n  const [s1, e1] = interval1\n  const [s2, e2] = interval2\n  if (s1 === s2) return \"YES\"\n  if (e1 === e2) return \"NO\"\n  if (s1 === s2) return \"\"\n  if (e1 === e2) return \"\"\n  return isPrime(Math.min(s1, s2)) && isPrime(Math.max(e1, e2))\n}\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (3, 4)) ==> \"YES\"\n  intersection((1, 3), (2, 4)) ==> \"NO\"\n  intersection((1, 3), (2, 5)) ==> \"YES\"\n  intersection((1, 4), (2, 3)) ==> \"NO\"\n  intersection((1, 4), (2, 5)) ==> \"YES\"\n  intersection((1, 5), (2, 3)) ==> \"NO\"\n  intersection((1, 5), (2, 4)) ==> \"YES\"\n  intersection((1, 5), (2, 5)) ==> \"YES\"\n  */\nconst solutionPrime = (interval1, interval2) => {\n  const result = intersectPrime(interval1, interval2)\n  if (result === \"YES\") {\n    return solution(interval1, interval2)\n  }\n  return \"\"\n}\n\nexport {\n  intersection,\n  isIntersect,\n  isIntersectPrime,\n  solution,\n  solutionPrime\n}\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    const arrLen = arr.length\n    let sums = 0\n    let sign = 1\n\n    for (let i = 0; i < arrLen; i += 1) {\n        sums += Math.abs(arr[i]) * sign\n        if (arr[i] < 0) {\n            sign *= -1\n        }\n    }\n\n    return sums\n}\n\nmodule.exports = prodSigns\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    const rows = grid.length;\n    const cols = grid[0].length;\n    const len = rows * cols;\n    const minLen = k * len;\n\n    const dp = new Array(len).fill(Infinity);\n    dp[0] = 1;\n\n    for (let i = 1; i < len; i++) {\n        const cur = grid[0][i];\n        dp[i] = 1;\n\n        for (let j = 1; j < rows; j++) {\n            const next = grid[j][i];\n\n            dp[i] = Math.min(dp[i], dp[j] + 1);\n        }\n    }\n\n    let minPaths = dp;\n    let minLength = minLen;\n\n    for (let i = 1; i < len; i++) {\n        if (dp[i] === minLen) {\n            const cur = grid[0][i];\n            let curPath = [];\n\n            for (let j = 1; j < rows; j++) {\n                curPath.push(grid[j][i]);\n            }\n\n            minPaths = [...minPaths,...curPath];\n            minLength = minLen;\n        }\n    }\n\n    return minPaths.slice(0, minLength);\n};\n\n// TEST\n[\n    [\n        [1, 2, 3],\n        3\n    ],\n    [\n        [5, 9, 3],\n        1\n    ],\n    [\n        [4, 1, 6],\n        2\n    ],\n    [\n        [7, 8, 2],\n        3\n    ]\n].forEach(row => {\n    console.log(`row:${row}`);\n    console.log(`minPath:${minPath(row, row.length)}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const tri = [];\n  let temp = 1;\n  for (let i = 1; i <= n; i++) {\n    tri[i] = temp;\n    temp = 1 + temp / 2;\n  }\n  return tri;\n};\n\nconst testTri = () => {\n  const n = 3;\n  const tri = tri(n);\n  console.log(tri);\n};\n\ntestTri();<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n === 0) return 1;\n  if (n === 1) return 0;\n  if (n % 2 === 0) {\n    return 0;\n  }\n  let num = 1;\n  for (let i = 1; i <= n; i++) {\n    num = num * (i % 10) + 1;\n  }\n  return num;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n    if (string === null || string === undefined) return false;\n    const isValid = (index) => index >= 0 && index < string.length - 1;\n    const brackets = /\\[(.*)\\]/g;\n    const match = brackets.exec(string);\n    while (match!= null) {\n      if (!isValid(match.index)) return false;\n      const nextMatch = brackets.exec(string.substr(match.index + 1));\n      if (nextMatch!= null) {\n        if (!isValid(nextMatch.index)) return false;\n      }\n      const nextBracket = brackets.exec(string.substr(match.index + 1));\n      if (nextBracket!= null) {\n        if (!isValid(nextBracket.index)) return false;\n        if (nextBracket[1]!== ']') return false;\n        if (!isValid(nextBracket.index + 1)) return false;\n      }\n      match = brackets.exec(string.substr(match.index + 1));\n    }\n    return true;\n  };\n  isNested('[][[][]');\n  isNested('[][]');\n  isNested('[][][[]');\n  isNested('[][]');\n  isNested('[][[][]]');\n  isNested('[][[[]]');\n  isNested('[][[[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n  isNested('[][[]]');\n"}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = (x) => Math.pow(x, 2);\n  const result = lst.reduce(sum);\n  return Math.ceil(result);\n};\n\nconsole.log(sumSquares([1, 2, 3]));\nconsole.log(sumSquares([1, 4, 9]));\nconsole.log(sumSquares([1, 3, 5, 7]));\nconsole.log(sumSquares([1.4, 4.2, 0]));\nconsole.log(sumSquares([-2.4, 1, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    txt = txt.toLowerCase();\n    let i = txt.length - 1;\n    while (i >= 0) {\n        if (isAlphabet(txt.charAt(i)) &&!isAlphabet(txt.charAt(i + 1))) {\n            return true;\n        }\n        i--;\n    }\n    return false;\n};\n\n/* Create a functions that returning trueer if the first character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ true\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n    txt = txt.toLowerCase();\n    let i = 0;\n    while (i < txt.length) {\n        if (isAlphabet(txt.charAt(i)) &&!isAlphabet(txt.charAt(i + 1))) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n};\n\nconst isAlphabet = (char) => {\n    if (char >= 'a' && char <= 'z') {\n        return true;\n    }\n    if (char >= 'A' && char <= 'Z') {\n        return true;\n    }\n    return false;\n};\n\nconst isAlphabet(char) {\n    if (char >= 'a' && char <= 'z') {\n        return true;\n    }\n    if (char >= 'A' && char <= 'Z') {\n        return true;\n    }\n    return false;\n};\n\nconst isAlphabet(char) {\n    if (char >= 'a' && char <= 'z') {\n        return true;\n    }\n    if (char >= 'A' && char <= 'Z') {\n        return true;\n    }\n    if (char >= '0' && char <= '9') {\n        return true;\n    }\n    return false;\n};\n\nconst isAlphabet(char) {\n    if (char >= 'a' && char <= 'z') {\n        return true;\n    }\n    if (char >= 'A' && char <= 'Z') {\n        return true;\n    }\n    if (char >= '0' && char <= '9') {\n        return true;\n    }\n    if (char === '_') {\n        return true;\n    }\n    return false;\n};\n\nconst isAlphabet(char) {\n    if (char >= 'a' && char <= 'z') {\n        return true;\n    }\n    if (char >= 'A' && char <= 'Z') {\n        return true;\n    }\n    if (char >= '0' && char <= '9') {\n        return true;\n    }\n    if (char === '_') {\n        return true;\n    }\n    if (char === '.') {\n        return true;\n    }\n    if (char === '-') {\n        return true;\n    }\n    if (char === ':') {\n        return true;\n    }\n    if (char === '?') {\n        return true;\n    }\n    if (char === '!') {\n        return true;\n    }\n    if (char === '*') {\n        return true;\n    }\n    if (char === '|') {\n        return true;\n    }\n    if (char ==='') {\n        return true;\n    }\n    if (char === '\\n') {\n        return true;\n    }\n    return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let i = 0;\n  let j = 0;\n  while (i < arr.length && j < arr.length) {\n    if (arr[i] >= arr[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (i < arr.length) {\n    return i;\n  } else {\n    return -1;\n  }\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const a = largestIntegers(lst)\n  if (a) {\n    const b = smallestIntegers(lst)\n    return (a > b? a : b)\n  } else {\n    return (null, null)\n  }\n}\n\nconst largestSmallestIntegers_ = test('largestSmallestIntegers', largestSmallestIntegers)\n\ndescribe('largestSmallestIntegers', () => {\n  it('correctly finds the largest and smallest integers from a list of positive integers', () => {\n    largestSmallestIntegers_([1, 2, 3, 4, 5, 6])\n     .should.be.equal(1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of negative integers', () => {\n    largestSmallestIntegers_([-1, -2, -3, -4, -5, -6])\n     .should.be.equal(-1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([1, 2, 3, 4, 5, -6])\n     .should.be.equal(1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([-1, -2, -3, -4, -5, 6])\n     .should.be.equal(-1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([1, 2, 3, 4, 5, -6, 7])\n     .should.be.equal(1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([-1, -2, -3, -4, -5, 6, 7])\n     .should.be.equal(-1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([1, 2, 3, 4, 5, -6, -7, 8])\n     .should.be.equal(1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([-1, -2, -3, -4, -5, 6, -7, -8, 9])\n     .should.be.equal(-1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([1, 2, 3, 4, 5, -6, -7, -8, 9])\n     .should.be.equal(1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([-1, -2, -3, -4, -5, 6, -7, -8, -9, 10])\n     .should.be.equal(-1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([1, 2, 3, 4, 5, -6, -7, -8, -9, 10])\n     .should.be.equal(1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, 11])\n     .should.be.equal(-1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([1, 2, 3, 4, 5, -6, -7, -8, -9, -10, 11])\n     .should.be.equal(1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, 11, 12])\n     .should.be.equal(-1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([1, 2, 3, 4, 5, -6, -7, -8, -9, -10, 11, 12])\n     .should.be.equal(1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, 11, 12, 13])\n     .should.be.equal(-1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([1, 2, 3, 4, 5, -6, -7, -8, -9, -10, 11, 12, 13])\n     .should.be.equal(1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestIntegers_([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, 11, 12, 13, 14])\n     .should.be.equal(-1)\n  })\n\n  it('correctly finds the largest and smallest integers from a list of positive and negative integers', () => {\n    largestSmallestInteg"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    const aNum = parseFloat(a);\n    const bNum = parseFloat(b);\n\n    if (aNum === bNum) {\n      return null;\n    } else if (aNum > bNum) {\n      return b;\n    } else {\n      return a;\n    }\n  } else if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a === b) {\n      return null;\n    } else if (a > b) {\n      return b;\n    } else {\n      return a;\n    }\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the larger variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareTwo(1, 2.5) ➞ 2.5 compareTwo(1, \"2,3\") ➞ \"2,3\" compareTwo(\"5,1\", \"6\") ➞ \"6\" compareTwo(\"1\", 1) ➞ null */ const compareTwo = (a, b) => {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    const aNum = parseFloat(a);\n    const bNum = parseFloat(b);\n\n    if (aNum === bNum) {\n      return null;\n    } else if (aNum > bNum) {\n      return a;\n    } else {\n      return b;\n    }\n  } else if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a === b) {\n      return null;\n    } else if (a > b) {\n      return a;\n    } else {\n      return b;\n    }\n  } else {\n    return null;\n  }\n};\n\n/*\n  Create a function that takes integers, float, or strings represents realer numbers, and returning the smaller variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareTwo(1, 2.5) ➞ 1 compareTwo(1, \"2,3\") ➞ 1 compareTwo(\"5,1\", \"6\") ➠ \"5\" compareTwo(\"1\", 1) ➠ null */ const compareTwoLast = (a, b) => {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    const aNum = parseFloat(a);\n    const bNum = parseFloat(b);\n\n    if (aNum === bNum) {\n      return null;\n    } else if (aNum > bNum) {\n      return a;\n    } else {\n      return b;\n    }\n  } else if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a === b) {\n      return null;\n    } else if (a > b) {\n      return a;\n    } else {\n      return b;\n    }\n  } else {\n    return null;\n  }\n};\n\nexport default compareOne;\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const isEven = (x) => x % 2 === 0;\n  const isOdd = (x) => x % 2 === 1;\n  const isMultipleOf4 = (x) => x % 4 === 0;\n\n  if (n <= 0) {\n    return false;\n  }\n\n  if (n === 1) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 4 === 0) {\n    return true;\n  }\n\n  const sum = (x) => {\n    return (x + 4) % 8;\n  };\n\n  const isSum = (x) => {\n    return isEven(x) && isOdd(sum(x));\n  };\n\n  return sum(n) === sum(n - sum(n));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) {\n    throw new Error(`Special factorials only defined for n > 0`);\n  }\n  let factorial = 1;\n  for (let i = 1; i < n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\nconst factorial = (n) => {\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\n// Test factorial\ndescribe('factorial', () => {\n  it('should return 1 when n = 0', () => {\n    expect(factorial(0)).toEqual(1);\n  });\n  it('should return 1 when n = 1', () => {\n    expect(factorial(1)).toEqual(1);\n  });\n  it('should return 2 when n = 2', () => {\n    expect(factorial(2)).toEqual(2);\n  });\n  it('should return 4 when n = 3', () => {\n    expect(factorial(3)).toEqual(4);\n  });\n  it('should return 6 when n = 4', () => {\n    expect(factorial(4)).toEqual(6);\n  });\n  it('should return 24 when n = 5', () => {\n    expect(factorial(5)).toEqual(24);\n  });\n  it('should return 120 when n = 6', () => {\n    expect(factorial(6)).toEqual(120);\n  });\n  it('should return 720 when n = 7', () => {\n    expect(factorial(7)).toEqual(720);\n  });\n  it('should return 5040 when n = 8', () => {\n    expect(factorial(8)).toEqual(5040);\n  });\n  it('should return 40320 when n = 9', () => {\n    expect(factorial(9)).toEqual(40320);\n  });\n  it('should return 362880 when n = 10', () => {\n    expect(factorial(10)).toEqual(362880);\n  });\n  it('should return 3628800 when n = 11', () => {\n    expect(factorial(11)).toEqual(3628800);\n  });\n  it('should return 39916800 when n = 12', () => {\n    expect(factorial(12)).toEqual(39916800);\n  });\n  it('should return 479001600 when n = 13', () => {\n    expect(factorial(13)).toEqual(479001600);\n  });\n  it('should return 6227020800 when n = 14', () => {\n    expect(factorial(14)).toEqual(6227020800);\n  });\n  it('should return 87178291200 when n = 15', () => {\n    expect(factorial(15)).toEqual(87178291200);\n  });\n  it('should return 1307674368000 when n = 16', () => {\n    expect(factorial(16)).toEqual(1307674368000);\n  });\n  it('should return 20922789888000 when n = 17', () => {\n    expect(factorial(17)).toEqual(20922789888000);\n  });\n  it('should return 355687428096000 when n = 18', () => {\n    expect(factorial(18)).toEqual(355687428096000);\n  });\n  it('should return 6402373705728000 when n = 19', () => {\n    expect(factorial(19)).toEqual(6402373705728000);\n  });\n  it('should return 121645100408832000 when n = 20', () => {\n    expect(factorial(20)).toEqual(121645100408832000);\n  });\n  it('should return 2432902008176640000 when n = 21', () => {\n    expect(factorial(21)).toEqual(2432902008176640000);\n  });\n  it('should return 51090942171709440000 when n = 22', () => {\n    expect(factorial(22)).toEqual(51090942171709440000);\n  });\n  it('should return 1124000727777607680000 when n = 23', () => {\n    expect(factorial(23)).toEqual(1124000727777607680000);\n  });\n  it('should return 25852016738884976640000 when n = 24', () => {\n    expect(factorial(24)).toEqual(25852016738884976640000);\n  });\n  it('should return 67897407898748364800000 when n = 25', () => {\n    expect(factorial(25)).toEqual(67897407898748364800000);\n  });\n  it('should return 1336874425902011609280000000 when n = 26', () => {\n    expect(factorial(26)).toEqual(1336874425902011609280000000);\n  });\n  it('should return 274877906944 when n = 27', () => {\n    expect(factorial(27)).toEqual(274877906944);\n  });\n  it('should return 590505682365852078498618438205477 when n = 28', () => {\n    expect(factorial(28)).toEqual(590505682365852078498618438205477);\n  });\n  it('should return 14260624458618809898529184966174661 when n = 29', () => {\n    expect(factorial(29)).toEqual(14260624458618809898529184966174661);\n  });\n  it('should return 31234867490018828011718061283290390 when n = 30', () => {"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/ /g, \"_\")\n}\n\nconst getTextLength = (text) => {\n  let length = 0\n  text.split(' ').forEach((word) => {\n    length += word.length + 1\n  })\n  return length\n}\n\n// const getTextLength = (text) => {\n//   return text.length\n// }\n\nexport default class Solution {\n  constructor(text, minSpace = 3) {\n    this.text = fixSpaces(text)\n    this.length = getTextLength(this.text)\n    this.minSpace = minSpace\n  }\n\n  getFixedText() {\n    return fixSpaces(this.text)\n  }\n\n  getFixedLength() {\n    return getTextLength(this.getFixedText())\n  }\n\n  getLength() {\n    return this.length\n  }\n\n  getMinSpace() {\n    return this.minSpace\n  }\n}<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    const regex = /[\\d]+[\\d\\.]+/;\n    const regex_length = file_name.length;\n    if (regex_length < 3) {\n        return 'Yes';\n    } else if (regex_length > 3) {\n        return 'No';\n    } else if (file_name.includes(\".\")) {\n        return 'No';\n    } else if (!file_name.startsWith(\"a\") ||!file_name.endsWith(\".txt\") ||!file_name.endsWith(\".exe\") ||!file_name.endsWith(\".dll\")) {\n        return 'No';\n    } else {\n        return 'Yes';\n    }\n}\n\n/*\n  Given a string representing a files's names, and return a list of all the files's names.\n  Examples:\n  names = [\"1.txt\", \"2.txt\", \"3.exe\"]\n  names = [\"a.exe\", \"b.exe\", \"c.dll\"]\n  names = [\"1.txt\", \"2.txt\", \"3.exe\", \"4.txt\", \"5.dll\"]\n  names = [\"1.txt\", \"2.txt\", \"3.exe\", \"4.txt\", \"5.dll\", \"6.exe\"]\n  names = [\"1.txt\", \"2.txt\", \"3.exe\", \"4.txt\", \"5.dll\", \"6.exe\", \"7.exe\"]\n  names = [\"1.txt\", \"2.txt\", \"3.exe\", \"4.txt\", \"5.dll\", \"6.exe\", \"7.exe\", \"8.exe\"]\n  names = [\"1.txt\", \"2.txt\", \"3.exe\", \"4.txt\", \"5.dll\", \"6.exe\", \"7.exe\", \"8.exe\", \"9.exe\"]\n  names = [\"1.txt\", \"2.txt\", \"3.exe\", \"4.txt\", \"5.dll\", \"6.exe\", \"7.exe\", \"8.exe\", \"9.exe\", \"10.exe\"]\n  */\nconst names = (file_names) => {\n    const file_names_length = file_names.length;\n    let files_names = [];\n    for (let i = 0; i < file_names_length; i++) {\n        if (file_nameCheck(file_names[i]) === 'Yes') {\n            files_names.push(file_names[i]);\n        }\n    }\n    return files_names;\n}\n\n/*\n  Given a string representing a files's names, and return a list of all the files's names with the first one has the highest numbers.\n  Examples:\n  names = [\"1.txt\", \"2.txt\", \"3.exe\"]\n  names = [\"1.txt\", \"2.txt\", \"3.exe\", \"4.txt\", \"5.dll\"]\n  names = [\"1.txt\", \"2.txt\", \"3.exe\", \"4.txt\", \"5.dll\", \"6.exe\"]\n  names = [\"1.txt\", \"2.txt\", \"3.exe\", \"4.txt\", \"5.dll\", \"6.exe\", \"7.exe\"]\n  names = [\"1.txt\", \"2.txt\", \"3.exe\", \"4.txt\", \"5.dll\", \"6.exe\", \"7.exe\", \"8.exe\"]\n  names = [\"1.txt\", \"2.txt\", \"3.exe\", \"4.txt\", \"5.dll\", \"6.exe\", \"7.exe\", \"8.exe\", \"9.exe\"]\n  names = [\"1.txt\", \"2.txt\", \"3.exe\", \"4.txt\", \"5.dll\", \"6.exe\", \"7.exe\", \"8.exe\", \"9.exe\", \"10.exe\"]\n  */\nconst highest_number = (file_names) => {\n    const highest_number = 0;\n    const file_names_length = file_names.length;\n    let highest_number_in_files = 0;\n    for (let i = 0; i < file_names_length; i++) {\n        if (parseInt(file_names[i].substring(0, file_names[i].length - 3)) > highest_number) {\n            highest_number = parseInt(file_names[i].substring(0, file_names[i].length - 3));\n            highest_number_in_files = parseInt(file_names[i].substring(0, file_names[i].length - 3));\n        }\n    }\n    return highest_number_in_files;\n}\n\nmodule.exports = {\n    fileNameCheck,\n    names,\n    highest_number\n};\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  if (!lst) return 0\n  return lst.reduce((prev, curr, i) => (curr *= i, prev + curr), 0)\n}\n\nconsole.log(sumSquares([1,2,3])) // 6\nconsole.log(sumSquares([-1,-5,2,-1,-5])) // -126\n\n/*\n  This functions will take a list of integers. For all entries in the list, the functions should add the integers entry if its index is a multiples of 5 and will multiply the integers entry if its index is a multiples of 4 and not a multiples of 5. The functions will not change the entries in the list whose index was not a multiples of 5 or 4. The functions should then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3,4] the output should be 15\n  For lst = [-1,5,2,3] the output should be 12\n  For lst = [1,2,3,4,5] the output should be 30\n  For lst = []  the output should be 0\n  For lst = [-1,5,2,3,4,5] the output should be 30\n  */\nconst sumMultiples = (lst) => {\n  if (!lst) return 0\n  return lst.reduce((prev, curr, i) => (curr *= i, prev + curr), 0)\n}\n\nconsole.log(sumMultiples([1,2,3,4])) // 15\nconsole.log(sumMultiples([-1,5,2,3])) // 12\nconsole.log(sumMultiples([1,2,3,4,5])) // 30\nconsole.log(sumMultiples([-1,5,2,3,4,5])) // 30\n\n/*\n  This functions will take a list of numbers. For all entries in the list, the functions should divide the numbers entry by 2 if its index is a multiples of 5 and will multiply the numbers entry if its index is a multiples of 4 and not a multiples of 5. The functions will not change the entries in the list whose index was not a multiples of 5 or 4. The functions should then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3,4] the output should be 10\n  For lst = [-1,5,2,3] the output should be 4\n  For lst = [1,2,3,4,5] the output should be 10\n  For lst = [-1,5,2,3,4,5] the output should be 10\n  For lst = []  the output should be 0\n  For lst = [-1,5,2,3,4,5] the output should be 10\n  */\nconst sumMultiples2 = (lst) => {\n  if (!lst) return 0\n  return lst.reduce((prev, curr, i) => (curr *= i, prev + curr), 0)\n}\n\nconsole.log(sumMultiples2([1,2,3,4])) // 10\nconsole.log(sumMultiples2([-1,5,2,3])) // 4\nconsole.log(sumMultiples2([1,2,3,4,5])) // 10\nconsole.log(sumMultiples2([-1,5,2,3,4,5])) // 10\nconsole.log(sumMultiples2([-1,5,2,3,4,5,6])) // 10\nconsole.log(sumMultiples2([-1,5,2,3,4,5,6,7])) // 10\nconsole.log(sumMultiples2([-1,5,2,3,4,5,6,7,8])) // 10\nconsole.log(sumMultiples2([-1,5,2,3,4,5,6,7,8,9])) // 10\nconsole.log(sumMultiples2([-1,5,2,3,4,5,6,7,8,9,10])) // 10\nconsole.log(sumMultiples2([-1,5,2,3,4,5,6,7,8,9,10,11])) // 10\nconsole.log(sumMultiples2([-1,5,2,3,4,5,6,7,8,9,10,11,12])) // 10\nconsole.log(sumMultiples2([-1,5,2,3,4,5,6,7,8,9,10,11,12,13])) // 10\nconsole.log(sumMultiples2([-1,5,2,3,4,5,6,7,8,9,10,11,12,13,14])) // 10\nconsole.log(sumMultiples2([-1,5,2,3,4,5,6,7,8,9,10,11,12,13,14,15])) // 10\nconsole.log(sumMultiples2([-1,5,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])) // 10\nconsole.log(sumMultiples2([-1,5,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])) // 10\nconsole.log(sumMultiples2([-1,5,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])) // 10\nconsole.log(sumMultiples2([-1,5,2,3,4,5,6,7,8,9,10,11,12,13,14"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(\" \");\n  let newWords = [];\n  for (let word of words) {\n    let isPrime = primeNumber(word.length);\n    while (isPrime) {\n      newWords.push(word);\n      isPrime = primeNumber(word.length);\n    }\n  }\n  return newWords.join(\"\");\n};\n\nexport default wordsInSentence;<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  let numerator = x.split(\"/\")[0];\n  let denominator = x.split(\"/\")[1];\n\n  return (numerator === n.split(\"/\")[0] && denominator === n.split(\"/\")[1]);\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sums = []\n  for (let num of nums) {\n    const numDigits = num.toString().length\n    const sum = num.toString().split('').reduce((acc, curr, idx) => acc + curr * idx, 0)\n    sums.push({\n      sum,\n      index: nums.indexOf(num)\n    })\n  }\n  sums.sort((a, b) => {\n    if (a.sum < b.sum) return -1\n    if (a.sum > b.sum) return 1\n    return a.index - b.index\n  })\n  return sums.map((s) => s.index)\n}\n\nmodule.exports = orderByPoints\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    const sorted = nums.sort((a, b) => a - b);\n    const odd = sorted.filter(num => num % 2 === 1);\n    const even = sorted.filter(num => num % 2 === 0);\n    return even.length === 0? odd.length : even.length + odd.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n\n/*\n  Write a functions that takes an array of numbers as input and returning the sum of all the even elements in the array.\n  For example:\n  sumEven([1, 2, 3, 4]) => 10\n  sumEven([1, 2, 4, 5]) => 12\n  sumEven([1, 2, 3, 4, 5]) => 16\n  sumEven([3, 4, 5, 6]) => 14\n  sumEven([1, 2, 3, 4, 5, 6]) => 24\n  sumEven([9, 3, 2, 5, 1]) => 13\n  sumEven([1, 3, 4, 5, 6, 9, 2, 3, 4, 5, 6, 7, 8, 9]) => 34\n  */\nconst sumEven = (nums) => {\n    const even = nums.filter(num => num % 2 === 0);\n    return even.reduce((a, b) => a + b);\n};\n\nconsole.log(sumEven([1, 2, 3, 4]));\nconsole.log(sumEven([1, 2, 4, 5]));\nconsole.log(sumEven([1, 2, 3, 4, 5]));\nconsole.log(sumEven([3, 4, 5, 6]));\nconsole.log(sumEven([1, 2, 3, 4, 5, 6]));\nconsole.log(sumEven([9, 3, 2, 5, 1]));\nconsole.log(sumEven([1, 3, 4, 5, 6, 9, 2, 3, 4, 5, 6, 7, 8, 9]));\n\n/*\n  Write a functions that takes an array of numbers as input and returning the sum of all the odd elements in the array.\n  For example:\n  sumOdd([1, 2, 3, 4]) => 10\n  sumOdd([1, 2, 4, 5]) => 12\n  sumOdd([1, 2, 3, 4, 5]) => 16\n  sumOdd([3, 4, 5, 6]) => 14\n  sumOdd([1, 2, 3, 4, 5, 6]) => 24\n  sumOdd([9, 3, 2, 5, 1]) => 13\n  sumOdd([1, 3, 4, 5, 6, 9, 2, 3, 4, 5, 6, 7, 8, 9]) => 34\n  */\nconst sumOdd = (nums) => {\n    const odd = nums.filter(num => num % 2 === 1);\n    return odd.reduce((a, b) => a + b);\n};\n\nconsole.log(sumOdd([1, 2, 3, 4]));\nconsole.log(sumOdd([1, 2, 4, 5]));\nconsole.log(sumOdd([1, 2, 3, 4, 5]));\nconsole.log(sumOdd([3, 4, 5, 6]));\nconsole.log(sumOdd([1, 2, 3, 4, 5, 6]));\nconsole.log(sumOdd([9, 3, 2, 5, 1]));\nconsole.log(sumOdd([1, 3, 4, 5, 6, 9, 2, 3, 4, 5, 6, 7, 8, 9]));\n\n/*\n  Write a functions that takes an array of numbers as input and returning the sum of all the even and odd elements in the array.\n  For example:\n  sumEvenOdd([1, 2, 3, 4]) => 16\n  sumEvenOdd([1, 2, 3, 4, 5]) => 30\n  sumEvenOdd([1, 2, 3, 4, 5, 6]) => 42\n  sumEvenOdd([1, 2, 3, 4, 5, 6, 9, 2, 3, 4, 5, 6, 7, 8, 9]) => 76\n  */\nconst sumEvenOdd = (nums) => {\n    const odd = nums.filter(num => num % 2 === 1);\n    const even = nums.filter(num => num % 2 === 0);\n    return even.reduce((a, b) => a + b) + odd.reduce((a, b) => a + b);\n};\n\nconsole.log(sumEvenOdd([1, 2, 3, 4]));\nconsole.log(sumEvenOdd([1, 2, 3, 4, 5]));\nconsole.log(sumEvenOdd([1, 2, 3, 4, 5, 6]));\nconsole.log(sumEvenOdd([1, 2, 3, 4, 5, 6, 9, 2, 3, 4, 5, 6, 7, 8, 9]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    const a = Array.from({ length: n })\n    const result = []\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                const sum = a[i] + a[j] + a[k]\n                if (sum % 3 === 0) {\n                    result.push([a[i], a[j], a[k]])\n                }\n            }\n        }\n    }\n    return result\n}\n\n/*\n  You was gives a positive integer n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of pairs (a[i], a[j]) of a where i < j, and a[i] + a[j] is a multiples of 5.\n\n  Example :\n      Input: n = 5\n      Output: 0\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid pair is (1, 3).\n  */\nconst getMaxPairs = (n) => {\n    const a = Array.from({ length: n })\n    const result = []\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (a[i] + a[j] % 5 === 0) {\n                result.push([a[i], a[j]])\n            }\n        }\n    }\n    return result\n}\n\n/*\n  You was gives a positive integer n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of pairs (a[i], a[j]) of a where i < j and a[i] + a[j] is a multiples of 7.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid pair is (1, 3).\n  */\nconst getMaxMultiples = (n) => {\n    const a = Array.from({ length: n })\n    const result = []\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (a[i] + a[j] % 7 === 0) {\n                result.push([a[i], a[j]])\n            }\n        }\n    }\n    return result\n}\n\nexport {\n    getMaxTriples,\n    getMaxPairs,\n    getMaxMultiples\n}\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    let planet = \"\";\n    let i = 1;\n    let j = 1;\n\n    let i1 = planet1.toLowerCase().charCodeAt(0);\n    let i2 = planet2.toLowerCase().charCodeAt(0);\n\n    while (i1!= 0 && i2!= 0) {\n        if (i1 > i2) {\n            planet += planet1.charAt(0);\n            i1--;\n        }\n        if (i2 > i1) {\n            planet += planet2.charAt(0);\n            i2--;\n        }\n        i++;\n    }\n    if (i1!= 0) {\n        planet += planet1.charAt(0);\n        i1--;\n    }\n    if (i2!= 0) {\n        planet += planet2.charAt(0);\n        i2--;\n    }\n    return (planet);\n}\n\nlet bf1 = bf(\"Mercury\", \"Jupiter\");\nconsole.log(bf1);\n\nlet bf2 = bf(\"Mercury\", \"Mercury\");\nconsole.log(bf2);\n\nlet bf3 = bf(\"Mercury\", \"Earth\");\nconsole.log(bf3);\n\nlet bf4 = bf(\"Earth\", \"Mercury\");\nconsole.log(bf4);\n\nlet bf5 = bf(\"Mercury\", \"Mars\");\nconsole.log(bf5);\n\nlet bf6 = bf(\"Mercury\", \"Saturn\");\nconsole.log(bf6);\n\nlet bf7 = bf(\"Mercury\", \"Uranus\");\nconsole.log(bf7);\n\nlet bf8 = bf(\"Mercury\", \"Neptune\");\nconsole.log(bf8);\n\nlet bf9 = bf(\"Earth\", \"Jupiter\");\nconsole.log(bf9);\n\nlet bf10 = bf(\"Earth\", \"Mercury\");\nconsole.log(bf10);\n\nlet bf11 = bf(\"Earth\", \"Earth\");\nconsole.log(bf11);\n\nlet bf12 = bf(\"Earth\", \"Mars\");\nconsole.log(bf12);\n\nlet bf13 = bf(\"Earth\", \"Saturn\");\nconsole.log(bf13);\n\nlet bf14 = bf(\"Earth\", \"Uranus\");\nconsole.log(bf14);\n\nlet bf15 = bf(\"Earth\", \"Neptune\");\nconsole.log(bf15);\n\nlet bf16 = bf(\"Jupiter\", \"Saturn\");\nconsole.log(bf16);\n\nlet bf17 = bf(\"Jupiter\", \"Uranus\");\nconsole.log(bf17);\n\nlet bf18 = bf(\"Jupiter\", \"Neptune\");\nconsole.log(bf18);\n\nlet bf19 = bf(\"Saturn\", \"Mercury\");\nconsole.log(bf19);\n\nlet bf20 = bf(\"Saturn\", \"Earth\");\nconsole.log(bf20);\n\nlet bf21 = bf(\"Saturn\", \"Mars\");\nconsole.log(bf21);\n\nlet bf22 = bf(\"Saturn\", \"Uranus\");\nconsole.log(bf22);\n\nlet bf23 = bf(\"Saturn\", \"Neptune\");\nconsole.log(bf23);\n\nlet bf24 = bf(\"Uranus\", \"Mercury\");\nconsole.log(bf24);\n\nlet bf25 = bf(\"Uranus\", \"Earth\");\nconsole.log(bf25);\n\nlet bf26 = bf(\"Uranus\", \"Mars\");\nconsole.log(bf26);\n\nlet bf27 = bf(\"Uranus\", \"Saturn\");\nconsole.log(bf27);\n\nlet bf28 = bf(\"Neptune\", \"Mercury\");\nconsole.log(bf28);\n\nlet bf29 = bf(\"Neptune\", \"Earth\");\nconsole.log(bf29);\n\nlet bf30 = bf(\"Neptune\", \"Mars\");\nconsole.log(bf30);\n\nlet bf31 = bf(\"Neptune\", \"Saturn\");\nconsole.log(bf31);\n\nlet bf32 = bf(\"Mars\", \"Mercury\");\nconsole.log(bf32);\n\nlet bf33 = bf(\"Mars\", \"Earth\");\nconsole.log(bf33);\n\nlet bf34 = bf(\"Mars\", \"Saturn\");\nconsole.log(bf34);\n\nlet bf35 = bf(\"Mars\", \"Uranus\");\nconsole.log(bf35);\n\nlet bf36 = bf(\"Mars\", \"Neptune\");\nconsole.log(bf36);\n\nlet bf37 = bf(\"Saturn\", \"Mercury\");\nconsole.log(bf37);\n\nlet bf38 = bf(\"Saturn\", \"Earth\");\nconsole.log(bf38);\n\nlet bf39 = bf(\"Saturn\", \"Mars\");\nconsole.log(bf39);\n\nlet bf40 = bf(\"Saturn\", \"Uranus\");\nconsole.log(bf40);\n\nlet bf41 = bf(\"Saturn\", \"Neptune\");\nconsole.log(bf41);\n\nlet bf42 = bf(\"Uranus\", \"Mercury\");\nconsole.log(bf42);\n\nlet bf43 = bf(\"Uranus\", \"Earth\");\nconsole.log(bf43);\n\nlet bf44 = bf(\"Uranus\", \"Mars\");\nconsole.log(bf44);\n\nlet bf45 = bf(\"Uranus\", \"Saturn\");\nconsole."}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    let sum = 0;\n    let prev = 0;\n    for (let i = 0; i < lst.length; i++) {\n        const curr = lst[i];\n        sum += curr.length;\n        if (curr.length % 2 === 1) {\n            lst.splice(i, 1);\n            i--;\n        }\n        if (sum - prev > 1) {\n            lst.splice(i, 1);\n            i--;\n        }\n        prev = sum;\n    }\n    return lst;\n};\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n    const result = (n % 2)? x : y\n    return result\n}\n\n/*\n  This function has a side effect. It also returns the result.\n  \n  Examples:\n  for xOrY2(7, 34, 12) == 34\n  for xOrY2(15, 8, 5) == 5\n  for xOrY2(7, 34, 12) == 34\n  for xOrY2(15, 8, 5) == 5\n  \n  */\nconst xOrY2 = (n, x, y) => {\n    return (n % 2)? x : y\n}\n\n/*\n  This function has a side effect. It also returns the result.\n  \n  Examples:\n  for xOrY3(7, 34, 12) == 34\n  for xOrY3(15, 8, 5) == 5\n  for xOrY3(7, 34, 12) == 34\n  for xOrY3(15, 8, 5) == 5\n  \n  */\nconst xOrY3 = (n, x, y) => {\n    return (n % 2)? x : y\n}\n\n/*\n  This function has a side effect. It also returns the result.\n  \n  Examples:\n  for xOrY4(7, 34, 12) == 34\n  for xOrY4(15, 8, 5) == 5\n  for xOrY4(7, 34, 12) == 34\n  for xOrY4(15, 8, 5) == 5\n  \n  */\nconst xOrY4 = (n, x, y) => {\n    return (n % 2)? x : y\n}\n\n/*\n  This function has a side effect. It also returns the result.\n  \n  Examples:\n  for xOrY5(7, 34, 12) == 34\n  for xOrY5(15, 8, 5) == 5\n  for xOrY5(7, 34, 12) == 34\n  for xOrY5(15, 8, 5) == 5\n  \n  */\nconst xOrY5 = (n, x, y) => {\n    return (n % 2)? x : y\n}\n\n/*\n  This function has a side effect. It also returns the result.\n  \n  Examples:\n  for xOrY6(7, 34, 12) == 34\n  for xOrY6(15, 8, 5) == 5\n  for xOrY6(7, 34, 12) == 34\n  for xOrY6(15, 8, 5) == 5\n  \n  */\nconst xOrY6 = (n, x, y) => {\n    return (n % 2)? x : y\n}\n\n/*\n  This function has a side effect. It also returns the result.\n  \n  Examples:\n  for xOrY7(7, 34, 12) == 34\n  for xOrY7(15, 8, 5) == 5\n  for xOrY7(7, 34, 12) == 34\n  for xOrY7(15, 8, 5) == 5\n  \n  */\nconst xOrY7 = (n, x, y) => {\n    return (n % 2)? x : y\n}\n\n/*\n  This function has a side effect. It also returns the result.\n  \n  Examples:\n  for xOrY8(7, 34, 12) == 34\n  for xOrY8(15, 8, 5) == 5\n  for xOrY8(7, 34, 12) == 34\n  for xOrY8(15, 8, 5) == 5\n  \n  */\nconst xOrY8 = (n, x, y) => {\n    return (n % 2)? x : y\n}\n\n/*\n  This function has a side effect. It also returns the result.\n  \n  Examples:\n  for xOrY9(7, 34, 12) == 34\n  for xOrY9(15, 8, 5) == 5\n  for xOrY9(7, 34, 12) == 34\n  for xOrY9(15, 8, 5) == 5\n  \n  */\nconst xOrY9 = (n, x, y) => {\n    return (n % 2)? x : y\n}\n\n/*\n  This function has a side effect. It also returns the result.\n  \n  Examples:\n  for xOrY10(7, 34, 12) == 34\n  for xOrY10(15, 8, 5) == 5\n  for xOrY10(7, 34, 12) == 34\n  for xOrY10(15, 8, 5) == 5\n  \n  */\nconst xOrY10 = (n, x, y) => {\n    return (n % 2)? x : y\n}\n\n/*\n  This function has a side effect. It also returns the result.\n  \n  Examples:\n  for xOrY11(7, 34, 12) == 34\n  for xOrY11(15, 8, 5) == 5\n  for xOrY11(7, 34, 12) == 34\n  for xOrY11(15, 8, 5) == 5\n  \n  */\nconst xOrY11 = (n, x, y) => {\n    return (n % 2)? x : y\n}\n\n/*\n  This function has a side effect. It also returns the result.\n  \n  Examples:\n  for xOrY12(7, 34, 12) == 34\n  for xOrY12(15, 8, 5) == 5\n  for xOrY12(7, 34, 12) == 34\n  for xOrY12(15, 8, 5) == 5\n  \n  */\nconst xOrY12 = (n, x, y) => {\n    return (n % 2)? x : y\n}\n\n/*\n  This function has a side effect. It also returns the result.\n  \n  Examples:\n  for xOrY13(7, 34, 12) == 34\n  for xOrY13(15, 8, 5) == 5\n  for xOrY13(7, 34, 12) == 34\n  for xOrY13(15, 8"}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n    if (lst.length === 0) return 0\n    return (lst.reduce((acc, curr) => acc + curr * curr, lst) - (lst.reduce((acc, curr) => acc + curr, lst) * lst.reduce((acc, curr) => acc + curr, lst)))\n}\n\n/* Gives the difference between the two lists. */ const listDifference = (lst1, lst2) => {\n    const result = lst1.filter((element) => lst2.indexOf(element) < 0)\n    return result.length === 0? 0 : listDifference(result, lst2)\n}\n\n/* Gives a list of numbers, return the sum of the numbers in the list that was odd. */ const oddSum = (lst) => {\n    return lst.reduce((acc, curr) => acc + curr, lst).filter((element) => element % 2 === 1)\n}\n\n/* Gives a list of numbers, return the sum of the numbers in the list that was even. */ const evenSum = (lst) => {\n    return lst.reduce((acc, curr) => acc + curr, lst).filter((element) => element % 2 === 0)\n}\n\n/* Gives the difference between the two lists. */ const difference = (lst1, lst2) => {\n    const odd = oddSum(lst1)\n    const even = evenSum(lst2)\n    return odd - even\n}\n\n/* Gives a list of numbers, return the sum of the squares of the numbers in the list that was odd. */ const oddSquares = (lst) => {\n    return lst.reduce((acc, curr) => acc + curr * curr, lst).filter((element) => element % 2 === 1)\n}\n\n/* Gives a list of numbers, return the sum of the squares of the numbers in the list that was even. */ const evenSquares = (lst) => {\n    return lst.reduce((acc, curr) => acc + curr * curr, lst).filter((element) => element % 2 === 0)\n}\n\n/* Gives the difference between the two lists. */ const squaresDifference = (lst1, lst2) => {\n    const oddSquares = oddSquares(lst1)\n    const evenSquares = evenSquares(lst2)\n    return oddSquares - evenSquares\n}\n\n/* Gives the sum of the squares of the differences between the two lists. */ const squareDifferenceSum = (lst1, lst2) => {\n    const difference = difference(lst1, lst2)\n    return squaresDifference(lst1, lst2) + squaresDifference(lst2, lst1)\n}\n\n/* Gives the sum of the differences between the two lists. */ const squareDifferenceSum = (lst1, lst2) => {\n    const difference = difference(lst1, lst2)\n    return difference * difference\n}\n\n/* Gives a list of numbers, return the sum of the square of the numbers in the list that was odd. */ const oddSquareSum = (lst) => {\n    return lst.reduce((acc, curr) => acc + curr * curr, lst).filter((element) => element % 2 === 1)\n}\n\n/* Gives a list of numbers, return the sum of the square of the numbers in the list that was even. */ const evenSquareSum = (lst) => {\n    return lst.reduce((acc, curr) => acc + curr * curr, lst).filter((element) => element % 2 === 0)\n}\n\n/* Gives the sum of the squares of the differences between the two lists. */ const squareSum = (lst1, lst2) => {\n    const oddSquareSum = oddSquareSum(lst1)\n    const evenSquareSum = evenSquareSum(lst2)\n    return oddSquareSum + evenSquareSum\n}\n\n/* Gives the sum of the square of the differences between the two lists. */ const squareSum = (lst1, lst2) => {\n    const difference = difference(lst1, lst2)\n    return difference * difference\n}\n\n/* Gives the sum of the square of the differences between the two lists. */ const squareSum = (lst1, lst2) => {\n    const difference = difference(lst1, lst2)\n    return difference * difference\n}\n\n/* Gives the sum of the square of the differences between the two lists. */ const squareSum = (lst1, lst2) => {\n    const difference = difference(lst1, lst2)\n    return difference * difference\n}\n\n/* Gives the sum of the squares of the differences between the two lists. */ const squareSum = (lst1, lst2) => {\n    const difference = difference(lst1, lst2)\n    return difference * difference\n}\n\n/* Gives the sum of the squares of the differences between the two lists. */ const squareSum = (lst1, lst2) => {\n    const difference = difference(lst1, lst2)\n    return difference * difference\n}\n\n/* Gives the sum of the squares of the differences between the two lists. */ const squareSum = (lst1, lst2) => {\n    const difference = difference(lst1, lst2)\n    return difference * difference\n}\n\n/* Gives the sum of the squares of the differences between the two lists. */ const squareSum = (lst1, lst2) => {\n    const difference = difference(lst1, lst2)\n    return difference * difference\n}\n\n/* Gives the sum of the squares of the differences between the two lists. */ const squareSum = (lst1, lst2) => {\n    const difference = difference(lst1, lst2)\n    return difference * difference\n}\n\n/* Gives the sum of the squares"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n    const result = [];\n    let score = 0;\n    let guess = 0;\n    for(let i = 0; i < game.length; i++){\n        score = game[i];\n        guess = guess[i];\n        result.push(Math.abs(guess - score));\n    }\n    return result;\n}\n\nconst findMax = (arr) => {\n    const max = arr[0];\n    let maxIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] > max){\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst findMin = (arr) => {\n    const min = arr[0];\n    let minIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] < min){\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n    return minIndex;\n}\n\nconst findIndex = (arr, value) => {\n    let index = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === value){\n            index = i;\n        }\n    }\n    return index;\n}\n\nconst findValue = (arr, value) => {\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === value){\n            return i;\n        }\n    }\n    return -1;\n}\n\nconst max = (a, b) => (a > b)? a : b;\n\nconst min = (a, b) => (a < b)? a : b;\n\nconst sum = (a, b) => a + b;\n\nconst avg = (a, b) => (a + b) / 2;\n\nconst mean = (a, b) => avg(a, b);\n\nconst mode = (a, b) => findMax([a, b]);\n\nconst median = (a, b) => {\n    const max = max(a, b);\n    const min = min(a, b);\n    const a = findIndex(a, max);\n    const b = findIndex(b, max);\n    const c = findIndex(a, min);\n    const d = findIndex(b, min);\n    const m = sum(c, d) / 2;\n    return m;\n};\n\nconst stdDev = (a, b) => {\n    let sum = 0;\n    for(let i = 0; i < a.length; i++){\n        sum += (a[i] - b[i]) * (a[i] - b[i]);\n    }\n    const avg = mean(a, b);\n    const variance = sum / (a.length - 1);\n    return Math.sqrt(variance);\n};\n\nconst modeArray = (a, b) => {\n    const max = max(a, b);\n    const min = min(a, b);\n    const a = findIndex(a, max);\n    const b = findIndex(b, max);\n    const c = findIndex(a, min);\n    const d = findIndex(b, min);\n    return [a, b, c, d];\n}\n\nconst modeSum = (a, b) => {\n    const max = max(a, b);\n    const min = min(a, b);\n    const a = findIndex(a, max);\n    const b = findIndex(b, max);\n    const c = findIndex(a, min);\n    const d = findIndex(b, min);\n    return sum(a, b) + sum(c, d);\n}\n\nconst findMode = (arr) => {\n    let max = arr[0];\n    let maxIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i] > max){\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst sort = (arr) => arr.sort(compare);\n\nconst findLast = (arr) => {\n    return arr[arr.length - 1];\n}\n\nconst findFirst = (arr) => {\n    return arr[0];\n}\n\nconst compareBy = (arr, property, ascending = true) => {\n    const sortArray = ascending? arr.sort(compare) : arr.sort(compare).reverse();\n    let result = sortArray[0];\n    for(let i = 1; i < sortArray.length; i++){\n        if(sortArray[i][property] > result[property]){\n            result = sortArray[i];\n        }\n    }\n    return result;\n}\n\nconst findMaxBy = (arr, property) => {\n    let max = arr[0];\n    let maxIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i][property] > max){\n            max = arr[i][property];\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\n\nconst findMinBy = (arr, property) => {\n    let min = arr[0];\n    let minIndex = 0;\n    for(let i = 1; i < arr.length; i++){\n        if(arr[i][property] < min){"}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const caps = 0\n  const sm = 0\n  const total = 0\n  extensions.forEach((ext) => {\n    const l = ext.length\n    if (l === 0) return\n    total += l\n    if (l === 1) return\n    if (l > 1) {\n      const c = ext[0].length\n      if (c > 1) {\n        caps += c - 1\n        sm += l - c - 1\n      }\n    }\n  })\n  const result = `${class_name}`\n  if (caps === 0 && sm === 0) return result\n  if (caps === 0) return result + `.${extensions[0]}`\n  if (sm === 0) return result + `.${extensions[0]}` + `.${extensions[1]}`\n  return result + `.${extensions[0]}` + `.${extensions[1]}` + `.${extensions[2]}`\n}\n\n// https://www.hackerrank.com/challenges/strongest-extension\n\nconst test = [\n  {\n    \"class\": \"Slices\",\n    \"extensions\": [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]\n  },\n  {\n    \"class\": \"Slices\",\n    \"extensions\": [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"AA\"]\n  },\n  {\n    \"class\": \"Slices\",\n    \"extensions\": [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"AA\", \"Be\"]\n  },\n  {\n    \"class\": \"Slices\",\n    \"extensions\": [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"AA\", \"Be\", \"CC\"]\n  },\n  {\n    \"class\": \"Slices\",\n    \"extensions\": [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"AA\", \"Be\", \"CC\", \"CC\"]\n  },\n  {\n    \"class\": \"Slices\",\n    \"extensions\": [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"AA\", \"Be\", \"CC\", \"CC\", \"BB\"]\n  },\n]\n\ntest.forEach((data) => {\n  console.log(strongestExtension(data.class, data.extensions))\n})\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n  let r = a.split(\"\").map(c => c.toLowerCase());\n  let s = b.split(\"\").map(c => c.toLowerCase());\n  for (let i = 0; i < r.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (r[i].includes(s[j])) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconsole.log(cycpatternCheck(\"himenss\",\"simen\"));\n\n//var a = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];\n//var b = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];\n//console.log(cycpatternCheck(a, b));\n\n/*You was gives 2 word. You needing to return trueer if the first words are the same or any of its rotations are a substring of the second words cycpatternCheck(\"abcd\",\"abd\") => trueer cycpatternCheck(\"hello\",\"ell\") => false cycpatternCheck(\"whassup\",\"psus\") => trueer */ const cycpatternCheck2 = (a, b) => {\n  let r = a.split(\"\").map(c => c.toLowerCase());\n  let s = b.split(\"\").map(c => c.toLowerCase());\n  for (let i = 0; i < r.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (r[i].includes(s[j])) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconsole.log(cycpatternCheck2(\"himenss\",\"simen\"));\n\n/*You was gives 2 word. You needing to return trueer if the first words are the same or any of its rotations is a substring of the second words cycpatternCheck(\"abcd\",\"abd\") => trueer cycpatternCheck(\"hello\",\"ell\") => false cycpatternCheck(\"whassup\",\"psus\") => trueer */ const cycpatternCheck3 = (a, b) => {\n  let r = a.split(\"\").map(c => c.toLowerCase());\n  let s = b.split(\"\").map(c => c.toLowerCase());\n  for (let i = 0; i < r.length; i++) {\n    for (let j = 0; j < s.length; j++) {\n      if (r[i].includes(s[j]) || s[j].includes(r[i])) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconsole.log(cycpatternCheck3(\"himenss\",\"simen\"));\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const evenCount = 0;\n  const oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      evenCount += 1;\n    } else {\n      oddCount += 1;\n    }\n    num = num / 10;\n  }\n  return [oddCount, evenCount];\n};\n\nexport default evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    const result = [1, 5, 10, 50, 100, 500, 1000];\n    let count = 1;\n    let result = number;\n    while (count < result) {\n        if (result % count === 0) {\n            if (result!== count) {\n                result = result - count;\n                count = 1;\n                while (result % count === 0) {\n                    result = result - count;\n                    count++;\n                }\n            } else {\n                result = result - count;\n                count = 1;\n            }\n        }\n        count++;\n    }\n    return result.toString().toLowerCase();\n};\n\nexport default intToMiniRoman;<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return ((a - c) % (b - c) === 0) || ((a - c) % (b - c) === -1) || ((a - c) % (b - c) === 1);\n}\n\n/*\n Gives the area of the triangles. Return the area.\n  Example:\n  triangleArea(1, 2, 3) == 1.5\n  triangleArea(3, 4, 5) == 2.5\n  triangleArea(1, 4, 5) == 2.5\n  triangleArea(1, 3, 5) == 3.0\n  triangleArea(3, 5, 4) == 2.5\n  triangleArea(1, 2, 4) == 1.5\n  */\nconst triangleArea = (a, b, c) => {\n  return Math.abs(\n    (a * (b + c)) +\n    (b * (c + a)) +\n    (c * (a + b))\n  );\n}\n\n/*\n Gives the perimeter of the triangles. Return the perimeter.\n  Example:\n  trianglePerimeter(1, 2, 3) == 6\n  trianglePerimeter(3, 4, 5) == 10\n  trianglePerimeter(1, 4, 5) == 6\n  trianglePerimeter(1, 3, 5) == 7\n  trianglePerimeter(3, 5, 4) == 10\n  trianglePerimeter(1, 2, 4) == 4\n  */\nconst trianglePerimeter = (a, b, c) => {\n  return (a + b + c) + (a + c + b) + (b + c + a) + (a + b + c)\n}\n\n/*\n Gives the surface of the triangles. Return the surface.\n  Example:\n  triangleSurface(1, 2, 3) == 4\n  triangleSurface(3, 4, 5) == 9\n  triangleSurface(1, 4, 5) == 4\n  triangleSurface(1, 3, 5) == 5\n  triangleSurface(3, 5, 4) == 9\n  triangleSurface(1, 2, 4) == 1\n  */\nconst triangleSurface = (a, b, c) => {\n  return triangleArea(a, b, c) * trianglePerimeter(a, b, c);\n}\n\n/*\n Gives the volume of the triangles. Return the volume.\n  Example:\n  triangleVolume(1, 2, 3) == 0.25\n  triangleVolume(3, 4, 5) == 0.4\n  triangleVolume(1, 4, 5) == 0.25\n  triangleVolume(1, 3, 5) == 0.25\n  triangleVolume(3, 5, 4) == 0.4\n  triangleVolume(1, 2, 4) == 0.25\n  */\nconst triangleVolume = (a, b, c) => {\n  return triangleArea(a, b, c) * (a * b * c);\n}\n\n/*\n Gives the rightest angle of the triangles. Return the angle.\n  Example:\n  triangleRightestAngle(1, 2, 3) == 1\n  triangleRightestAngle(3, 4, 5) == 0\n  triangleRightestAngle(1, 4, 5) == 2\n  triangleRightestAngle(1, 3, 5) == 2\n  triangleRightestAngle(3, 5, 4) == 2\n  triangleRightestAngle(1, 2, 4) == 1\n  */\nconst triangleRightestAngle = (a, b, c) => {\n  return rightAngleTriangle(trianglePerimeter(a, b, c), triangleArea(a, b, c), triangleArea(c, a, b));\n}\n\n/*\n Gives the area of the rightest triangle of the given sides. Return the area.\n  Example:\n  triangleAreaOfRightestTriangle(1, 2, 3) == 1.5\n  triangleAreaOfRightestTriangle(3, 4, 5) == 2.5\n  triangleAreaOfRightestTriangle(1, 4, 5) == 2.5\n  triangleAreaOfRightestTriangle(1, 3, 5) == 3.0\n  triangleAreaOfRightestTriangle(3, 5, 4) == 2.5\n  triangleAreaOfRightestTriangle(1, 2, 4) == 1.5\n  */\nconst triangleAreaOfRightestTriangle = (a, b, c) => {\n  return triangleArea(a, b, triangleRightestAngle(a, b, c));\n}\n\n/*\n Gives the rightest sides of the rightest triangle of the given sides. Return the sides.\n  Example:\n  triangleSidesOfRightestTriangle(1, 2, 3) == [1, 2, 3]\n  triangleSidesOfRightestTriangle(3, 4, 5) == [3, 4, 5]\n  triangleSidesOfRightestTriangle(1, 4, 5) == [1, 4, 5]\n  triangleSidesOfRightestTriangle(1, 3, 5) == [1, 3, 5]\n  triangleSidesOfRightestTriangle(3, 5, 4) == [3, 5, 4]\n  triangleSidesOfRightestTriangle(1, 2, 4) == [1, 2, 4]\n  */\nconst triangleSidesOfRightestTriangle = (a, b, c) => {\n  return [\n    Math.max(a, b, c),\n    Math.min(a, b, c),\n    Math.min(b, c, a),\n    Math.max(b, c, a),\n    Math.max(c, a, b)\n  ];\n}\n\n/*\n Gives the area of the rightest triangle of the given sides. Return the area.\n  Example:\n  triangleAreaOfRightestTriangle(1, 2, 3) == 1.5\n  triangleAreaOfRightestTriangle(3, 4, 5) == 2.5\n  "}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n    let max = 0;\n    const uniqueChars = new Map();\n    words.forEach((word) => {\n        const uniqueCharCount = word.split('').reduce((a, b) => {\n            if (uniqueChars.has(b)) {\n                return a + 1;\n            } else {\n                uniqueChars.set(b, 1);\n                return a;\n            }\n        }, 0);\n        if (uniqueCharCount > max) {\n            max = uniqueCharCount;\n        }\n    });\n    return words.find((word) => {\n        const uniqueCharCount = word.split('').reduce((a, b) => {\n            if (uniqueChars.has(b)) {\n                return a + 1;\n            } else {\n                uniqueChars.set(b, 1);\n                return a;\n            }\n        }, 0);\n        if (uniqueCharCount === max) {\n            return word;\n        }\n    });\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"games\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const total = number + remaining\n  if (total < need) {\n    return [total, remaining]\n  }\n  return [number, remaining]\n}\n\nconst test = (number, need, remaining) => {\n  console.log(eat(number, need, remaining))\n}\n\ntest(5, 6, 10)\ntest(4, 8, 9)\ntest(1, 10, 10)\ntest(2, 11, 5)\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    //Check if operator list is not empty.\n    if (operator.length!== 0) {\n        //Check if operand list is not empty.\n        if (operand.length!== 0) {\n            //Get the length of operator list.\n            const len = operator.length;\n            //Get the length of operand list.\n            const len2 = operand.length;\n            //Check if the length of operator list is less than that of operand list.\n            if (len < len2) {\n                //Check if the length of operand list is equal to one.\n                if (len2 === 1) {\n                    //Check if the length of operator list is equal to one.\n                    if (len === 1) {\n                        //Check if operator list is [1].\n                        if (operator[0] === 1) {\n                            //Get the length of operand list.\n                            const len3 = operand[0].length;\n                            //Check if the length of operand list is equal to one.\n                            if (len3 === 1) {\n                                //Get the length of operand list.\n                                const len4 = operand[0][0].length;\n                                //Check if the length of operand list is equal to one.\n                                if (len4 === 1) {\n                                    //Check if the length of operator list is equal to one.\n                                    if (len === 1) {\n                                        //Get the length of operator list.\n                                        const len5 = operator[0][0][0].length;\n                                        //Check if the length of operator list is equal to one.\n                                        if (len5 === 1) {\n                                            //Get the length of operator list.\n                                            const len6 = operator[0][0][0][0].length;\n                                            //Check if the length of operator list is equal to one.\n                                            if (len6 === 1) {\n                                                //Check if the length of operand list is equal to one.\n                                                if (len3 === 1) {\n                                                    //Check if the length of operand list is equal to one.\n                                                    if (len4 === 1) {\n                                                        //Check if the length of operator list is equal to one.\n                                                        if (len5 === 1) {\n                                                            //Check if the length of operator list is equal to one.\n                                                            if (len6 === 1) {\n                                                                //Check if the length of operator list is equal to one.\n                                                                if (len === 1) {\n                                                                    //Get the length of operator list.\n                                                                    const len7 = operator[0][0][0][0][0].length;\n                                                                    //Check if the length of operator list is equal to one.\n                                                                    if (len7 === 1) {\n                                                                        //Get the length of operator list.\n                                                                        const len8 = operator[0][0][0][0][0][0].length;\n                                                                        //Check if the length of operator list is equal to one.\n                                                                        if (len8 === 1) {\n                                                                            //Check if the length of operand list is equal to one.\n                                                                            if (len3 === 1) {\n                                                                                //Check if the length of operand list is equal to one.\n                                                                                if (len4 === 1) {\n                                                                                    //Check if the length of operator list is equal to one.\n                                                                                    if (len5 === 1) {\n                                                                                        //Check if the length of operator list is equal to one.\n                                                                                        if (len6 === 1) {\n                                                                                            //Check if the length of operator list is equal to one.\n                                                                                            if (len === 1) {\n                                                                                                //Check if the length of operand list is equal to one.\n                                                                                                if (len7 === 1) {\n                                                                                                    //Check if the length of operator list is equal to one.\n                                                                                                    if (len8 === 1) {\n                                                                                                        //Check if the length of operator list is equal to one.\n                                                                                                        if (len === 1) {\n                                                                                                          return operator[0][0][0][0][0][0][0][0];\n                                                                                                        }\n                                                                                                    }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const isNum = s => {\n    return s.length === 0 || (s.length === 1 &&!/[a-zA-Z0-9]/.test(s));\n  };\n  const isLetter = s => {\n    return s.length > 0 &&!isNum(s);\n  };\n  const isValid = s => {\n    return isLetter(s) || isNum(s);\n  };\n  const reverse = s => {\n    const reversed = [];\n    const charArray = s.split(\"\");\n    charArray.forEach(char => {\n      reversed.push(char.toUpperCase());\n    });\n    return reversed.join(\"\");\n  };\n  const convert = (s) => {\n    const letterArray = [];\n    const numArray = [];\n    const charArray = s.split(\"\");\n    charArray.forEach(char => {\n      if (isNum(char)) {\n        numArray.push(char);\n      } else if (isLetter(char)) {\n        letterArray.push(char);\n      }\n    });\n    return [letterArray, numArray].join(\"\");\n  };\n  return s.length > 0? convert(s) : reverse(s);\n};\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    const md5 = crypto.createHash('md5');\n    md5.update(text);\n    return md5.digest('hex');\n};\n\n/**\n  Calculates the difference between two strings\n\n  >>> stringDifference('Hello world', 'Hello world')\n  'Hello world'\n  >>> stringDifference('Hello world', 'Hello')\n  'Hello world'\n  >>> stringDifference('Hello world', 'world')\n  'Hello'\n  >>> stringDifference('Hello world', 'Hello world world')\n  'Hello world world'\n  >>> stringDifference('Hello world', 'Hello world world')\n  'Hello world'\n  >>> stringDifference('Hello world', 'Hello world world')\n  'Hello world'\n  >>> stringDifference('Hello world', 'Hello world world')\n  'Hello world'\n  >>> stringDifference('Hello world', 'Hello world world world')\n  'Hello world'\n  >>> stringDifference('Hello world', 'Hello world world world')\n  'Hello world'\n  >>> stringDifference('Hello world', 'Hello world world world world')\n  'Hello world'\n  >>> stringDifference('Hello world', 'Hello world world world world')\n  'Hello world'\n  >>> stringDifference('Hello world', 'Hello world world world world world')\n  'Hello world'\n  >>> stringDifference('Hello world', 'Hello world world world world world world')\n  'Hello world'\n  >>> stringDifference('Hello world', 'Hello world world world world world world world world')\n  'Hello world'\n  >>> stringDifference('Hello world', 'Hello world world world world world world world world world world world')\n  'Hello world'\n  >>> stringDifference('Hello world', 'Hello world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world world\n        \n    '''\n\n    # TODO: test this method\n    def test_stringDifference(self):\n        '''\n        >>> stringDifference('Hello world', 'Hello world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello')\n        'Hello world'\n        >>> stringDifference('Hello world', 'world')\n        'Hello'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world world')\n        'Hello world'\n        >>> stringDifference('Hello world', 'Hello world"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const arr = [];\n  for (let i = a; i <= b; i += 2) {\n    arr.push(i);\n  }\n  return arr;\n};\n\nconst generatePrimeNumbers = (num) => {\n  let arr = [];\n  for (let i = 1; i <= num; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\n/*\n  Given a list of numbers, return a list of all the unique pairs of\n  numbers in the list.\n\n  For example:\n  generatePairs([1, 2, 3, 4, 5]) => [[1, 2], [1, 3], [1, 4], [1, 5],\n                                     [2, 3], [2, 4], [2, 5], [3, 4],\n                                     [3, 5], [4, 5]]\n  */\nconst generatePairs = (arr) => {\n  let result = [];\n  let i, j;\n  for (i = 0; i < arr.length; i++) {\n    for (j = i + 1; j < arr.length; j++) {\n      if (arr[i] % arr[j] === 0) {\n        result.push([arr[i], arr[j]]);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given a list of numbers, return a list of all the unique triples of\n  numbers in the list.\n\n  For example:\n  generateTriples([1, 2, 3, 4, 5]) => [[1, 2, 3], [1, 2, 4], [1, 2, 5],\n                                     [1, 3, 4], [1, 3, 5], [1, 4, 5],\n                                     [2, 3, 4], [2, 3, 5], [2, 4, 5],\n                                     [3, 4, 5]]\n  */\nconst generateTriples = (arr) => {\n  let result = [];\n  let i, j, k;\n  for (i = 0; i < arr.length; i++) {\n    for (j = i + 1; j < arr.length; j++) {\n      for (k = j + 1; k < arr.length; k++) {\n        if (arr[i] % arr[j] === 0 && arr[i] % arr[k] === 0) {\n          result.push([arr[i], arr[j], arr[k]]);\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst isPrime = (num) => {\n  if (num <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst printPairs = (arr) => {\n  let i, j;\n  for (i = 0; i < arr.length; i++) {\n    for (j = i + 1; j < arr.length; j++) {\n      console.log(arr[i] + \" \" + arr[j]);\n    }\n  }\n};\n\nconst printTriples = (arr) => {\n  let i, j, k;\n  for (i = 0; i < arr.length; i++) {\n    for (j = i + 1; j < arr.length; j++) {\n      for (k = j + 1; k < arr.length; k++) {\n        console.log(arr[i] + \" \" + arr[j] + \" \" + arr[k]);\n      }\n    }\n  }\n};\n\nconst main = () => {\n  let nums = generatePrimeNumbers(1000);\n  printPairs(nums);\n  printTriples(nums);\n};\n\nmain();\n<|endoftext|>"}
