{"task_id": "JavaScript/0", "prompt": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const [n1, n2] = numbers\n  const distance = Math.abs(n1 - n2)\n  return distance < threshold\n}\n\nexport default hasCloseElements\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let group_string = paren_string\n  let last_group = ''\n  const regex = /\\(\\s*\\)/g\n  let i = 0\n  const return_list = []\n  const return_str = () => {\n    if (i === 0) {\n      return_list.push(last_group)\n    }\n    return return_list\n  }\n  while (i < group_string.length) {\n    const next_char = group_string[i]\n    if (next_char === '(') {\n      last_group = '()'\n    } else if (next_char === ')') {\n      last_group = '()()'\n    } else if (next_char ==='') {\n      return_list.push(last_group)\n      last_group = ''\n    } else {\n      last_group += next_char\n    }\n    i++\n  }\n  return return_str()\n}\n\nconst find_nested_groups = (paren_string) => {\n  let group_string = paren_string\n  let last_group = ''\n  const regex = /\\(\\s*\\)/g\n  let i = 0\n  const return_list = []\n  const return_str = () => {\n    if (i === 0) {\n      return_list.push(last_group)\n    }\n    return return_list\n  }\n  while (i < group_string.length) {\n    const next_char = group_string[i]\n    if (next_char === '(') {\n      last_group = '()()'\n    } else if (next_char === ')') {\n      last_group = '()()()'\n    } else if (next_char ==='') {\n      return_list.push(last_group)\n      last_group = ''\n    } else {\n      last_group += next_char\n    }\n    i++\n  }\n  return return_str()\n}\n\nconst find_single_nested_groups = (paren_string) => {\n  let group_string = paren_string\n  let last_group = ''\n  const regex = /\\(\\s*\\)/g\n  let i = 0\n  const return_list = []\n  const return_str = () => {\n    if (i === 0) {\n      return_list.push(last_group)\n    }\n    return return_list\n  }\n  while (i < group_string.length) {\n    const next_char = group_string[i]\n    if (next_char === '(') {\n      last_group = '()'\n    } else if (next_char === ')') {\n      last_group = '()()'\n    } else if (next_char ==='') {\n      return_list.push(last_group)\n      last_group = ''\n    } else {\n      last_group += next_char\n    }\n    i++\n  }\n  return return_str()\n}\n\nconst separate_nested_groups = (paren_string) => {\n  let group_string = paren_string\n  let last_group = ''\n  const regex = /\\(\\s*\\)/g\n  let i = 0\n  const return_list = []\n  const return_str = () => {\n    if (i === 0) {\n      return_list.push(last_group)\n    }\n    return return_list\n  }\n  while (i < group_string.length) {\n    const next_char = group_string[i]\n    if (next_char === '(') {\n      last_group = '()()'\n    } else if (next_char === ')') {\n      last_group = '()()()'\n    } else if (next_char ==='') {\n      return_list.push(last_group)\n      last_group = ''\n    } else {\n      last_group += next_char\n    }\n    i++\n  }\n  return return_str()\n}\n\nconst find_first_paren_group = (paren_string) => {\n  let group_string = paren_string\n  let last_group = ''\n  const regex = /\\(\\s*\\)/g\n  let i = 0\n  const return_str = () => {\n    if (i === 0) {\n      return last_group\n    }\n  }\n  while (i < group_string.length) {\n    const next_char = group_string[i]\n    if (next_char === '(') {\n      last_group = '()'\n    } else if (next_char === ')') {\n      last_group = '()()'\n    } else if (next_char ==='') {\n      return return_str()\n    } else {\n      last_group += next_char\n    }\n    i++\n  }\n  return return_str()\n}\n\nconst find_last_paren_group = (paren_string) => {\n  let group_string = paren_string\n  let last_group = ''\n  const regex = /\\(\\s*\\)/g\n  let i = 0\n  const return_str = () => {\n    if (i === 0) {\n      return last_group\n    }\n  }\n  while (i < group_string.length) {\n    const next_char = group_string[i]\n    if (next_char === '(') {\n      last_group = '()'\n    } else if (next_char === ')') {\n      last_group = '()()'\n    } else if (next_char ==='') {\n      return return_str()\n    "}
{"task_id": "JavaScript/2", "prompt": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let result = number;\n  let i = 0;\n  while (result > 1) {\n    result = Math.floor(result);\n    i++;\n  }\n  result = Math.ceil(result);\n  result = Math.max(result, 1);\n  result = Math.min(result, 10);\n  return result;\n}\n\nconst getReverse = (number) => {\n  let result = 0;\n  let i = 0;\n  while (number > 0) {\n    number = Math.floor(number);\n    result = result * 10 + number;\n    i++;\n  }\n  return result;\n}\n\nconst reverseNumber = (number) => {\n  let result = 0;\n  let i = number.length - 1;\n  while (i >= 0) {\n    result = result * 10 + number[i];\n    i--;\n  }\n  return result;\n}\n\nconst getDigits = (number) => {\n  let result = 0;\n  let i = 0;\n  while (number > 0) {\n    number = Math.floor(number);\n    result = result * 10 + number;\n    i++;\n  }\n  return result;\n}\n\nconst getDigitsReverse = (number) => {\n  let result = 0;\n  let i = 0;\n  while (number > 0) {\n    number = Math.floor(number);\n    result = result * 10 + number;\n    i++;\n  }\n  return result;\n}\n\nconst getReverseDigits = (number) => {\n  let result = 0;\n  let i = 0;\n  while (number > 0) {\n    number = Math.ceil(number);\n    result = result * 10 + number;\n    i++;\n  }\n  return result;\n}\n\nconst reverseDigits = (number) => {\n  let result = 0;\n  let i = number.length - 1;\n  while (i >= 0) {\n    result = result * 10 + number[i];\n    i--;\n  }\n  return result;\n}\n\nconst getAllDigits = (number) => {\n  let result = 0;\n  let i = 0;\n  while (number > 0) {\n    number = Math.ceil(number);\n    result = result * 10 + number;\n    i++;\n  }\n  return result;\n}\n\nconst getAllDigitsReverse = (number) => {\n  let result = 0;\n  let i = 0;\n  while (number > 0) {\n    number = Math.floor(number);\n    result = result * 10 + number;\n    i++;\n  }\n  return result;\n}\n\nconst getReverseDigitsReverse = (number) => {\n  let result = 0;\n  let i = 0;\n  while (number > 0) {\n    number = Math.ceil(number);\n    result = result * 10 + number;\n    i++;\n  }\n  return result;\n}\n\nconst getAllDigitsReverse = (number) => {\n  let result = 0;\n  let i = 0;\n  while (number > 0) {\n    number = Math.floor(number);\n    result = result * 10 + number;\n    i++;\n  }\n  return result;\n}\n\nconst getLastDigit = (number) => {\n  return number % 10;\n}\n\nconst getLastDigitReverse = (number) => {\n  return number % 10;\n}\n\nconst getLastDigitReverseDigits = (number) => {\n  let result = 0;\n  let i = number.length - 1;\n  while (i >= 0) {\n    result = result * 10 + number[i];\n    i--;\n  }\n  return result;\n}\n\nconst getLastDigitReverseDigitsReverse = (number) => {\n  let result = 0;\n  let i = number.length - 1;\n  while (i >= 0) {\n    result = result * 10 + number[i];\n    i--;\n  }\n  return result;\n}\n\nconst getAllDigitsReverseDigits = (number) => {\n  let result = 0;\n  let i = number.length - 1;\n  while (i >= 0) {\n    result = result * 10 + number[i];\n    i--;\n  }\n  return result;\n}\n\nconst getAllDigitsReverseDigitsReverse = (number) => {\n  let result = 0;\n  let i = number.length - 1;\n  while (i >= 0) {\n    result = result * 10 + number[i];\n    i--;\n  }\n  return result;\n}\n\nconst getDigitsReverseDigitsReverse = (number) => {\n  let result = 0;\n  let i = number.length - 1;\n  while (i >= 0) {\n    result = result * 10 + number[i];\n    i--;\n  }\n  return result;\n}\n\nconst getDigitsReverseDigitsReverseReverse = (number) => {\n  let result = 0;\n  let i = number.length - 1;\n  while (i >= 0) {\n    result = result * 10 + number[i];\n    i--;\n  }\n  return result;\n}\n\nconst getAllDigitsReverseDigitsReverseReverse = (number) => {\n  let result = 0;\n  let i = number.length - 1;\n  while (i >= 0) {\n    result = result * 10 + number[i];\n    i--;\n  }\n  return result;\n}\n\nconst getAllDigitsReverseDigitsReverseReverseReverse = (number) => {\n  let result = 0;\n  let i = number.length - 1;\n  while"}
{"task_id": "JavaScript/3", "prompt": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const belowZeroSum = () => operations.reduce((a, b) => a + b);\n  const belowZeroSumLessThanZero = () => belowZeroSum() < 0;\n  return belowZeroSumLessThanZero();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = sum(numbers) / numbers.length;\n  let absDeviation = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    absDeviation += Math.abs(numbers[i] - mean);\n  }\n  return absDeviation / numbers.length;\n};\n\n/*\n  For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst stdDeviation = (numbers) => {\n  let variance = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    variance += (numbers[i] - meanAbsoluteDeviation(numbers)) * (numbers[i] - meanAbsoluteDeviation(numbers));\n  }\n  return Math.sqrt(variance / numbers.length);\n};\n\n/*\n  For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst rootMeanSquareDeviation = (numbers) => {\n  let mean = sum(numbers) / numbers.length;\n  let variance = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    variance += (numbers[i] - mean) * (numbers[i] - mean);\n  }\n  return Math.sqrt(variance / numbers.length);\n};\n\nconst variance = (numbers) => {\n  let mean = sum(numbers) / numbers.length;\n  let variance = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    variance += (numbers[i] - mean) * (numbers[i] - mean);\n  }\n  return variance / numbers.length;\n};\n\nexport default {\n  meanAbsoluteDeviation,\n  stdDeviation,\n  rootMeanSquareDeviation,\n  variance\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let counter = 0;\n  const next = () => {\n    if (counter > (numbers.length - 1)) {\n      return;\n    }\n    if (counter === 0) {\n      return numbers[i++];\n    }\n    const next = numbers[j++];\n    result.push(next);\n    counter += 1;\n    next();\n  };\n  next();\n  return result;\n};\n\nconst numbers = [1, 2, 3];\nconst result = intersperse(numbers, 4);\nconsole.log(result);\n// -> [1, 4, 2, 4, 3]\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  const len = paren_array.length;\n  const paren_array_index = [0];\n  const paren_array_count = [0];\n  const result = [];\n  let current_index = 0;\n\n  for (let i = 0; i < len; i++) {\n    if (paren_array[i] === '(') {\n      paren_array_count[current_index]++;\n    } else if (paren_array[i] === ')') {\n      paren_array_count[current_index]--;\n      if (paren_array_count[current_index] === 0) {\n        current_index++;\n        paren_array_index[current_index] = i;\n        paren_array_count[current_index] = paren_array_count[current_index - 1];\n      }\n    }\n  }\n\n  for (let i = 0; i < len; i++) {\n    if (paren_array[i] === '(') {\n      const new_index = paren_array_index[i] + 1;\n      const start = i;\n      const end = paren_array_index[new_index] - 1;\n      result.push(paren_array.substring(start, end + 1));\n      i = paren_array_index[new_index];\n    }\n  }\n\n  return result;\n};\n\n/**\n  * @method parseNestedParens\n  * @param {string} paren_string\n  * @return {Array}\n  */\nexport default parseNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const newStrings = []\n  for (const string of strings) {\n    if (string.indexOf(substring) >= 0) {\n      newStrings.push(string)\n    }\n  }\n  return newStrings\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const newStrings = []\n  for (const string of strings) {\n    if (string.indexOf(substring) >= 0) {\n      newStrings.push(string)\n    }\n  }\n  return newStrings\n}\n\nconst isPalindrome = (string) => {\n  let reversed = string\n  while (reversed.length > 0) {\n    reversed = reversed.split('').reverse().join('')\n  }\n  return string === reversed\n}\n\nconst isPalindrome2 = (string) => {\n  let reversed = string\n  while (reversed.length > 0) {\n    reversed = reversed.split('').reverse().join('')\n  }\n  return reversed === reversed.split('').reverse().join('')\n}\n\n// TEST\nconst test = [\n  'aab',\n  'aabccc',\n  'abc',\n  'aaa',\n  'aaa',\n  '',\n  'baba'\n]\nconst test2 = [\n  'aabccc',\n  'aabccc',\n  'abc',\n  'aaa',\n  'aaa',\n  '',\n  'baba'\n]\n\ntest.forEach(string => {\n  console.log(`isPalindrome(${string}) = ${isPalindrome(string)}`)\n})\n\ntest2.forEach(string => {\n  console.log(`isPalindrome(${string}) = ${isPalindrome2(string)}`)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = 1\n  const sum = 0\n  const i = 0\n  const j = len(numbers) - 1\n  while (i < j) {\n    const product_i = numbers[i] * product\n    const sum_i = sum + product_i\n    const product_j = numbers[j] * product\n    const sum_j = sum + product_j\n    product = product_i + product_j\n    sum = sum_i + sum_j\n    i++\n    j--\n  }\n  return sum, product\n}\n\n// Sum of Products of an ARRAY of NUMBERS\nconst sumProductArray = (numbers) => {\n  const sum = 0\n  const product = 1\n  const i = 0\n  const j = len(numbers) - 1\n  while (i < j) {\n    const product_i = numbers[i] * product\n    const sum_i = sum + product_i\n    const product_j = numbers[j] * product\n    const sum_j = sum + product_j\n    product = product_i + product_j\n    sum = sum_i + sum_j\n    i++\n    j--\n  }\n  return sum\n}\n\n// Sum of Products of an ARRAY of NUMBERS, where the second array is reversed\nconst sumProductReversedArray = (numbers, reversed) => {\n  const sum = 0\n  const product = 1\n  const i = 0\n  const j = len(numbers) - 1\n  while (i < j) {\n    const product_i = numbers[i] * product\n    const sum_i = sum + product_i\n    const product_j = reversed[j] * product\n    const sum_j = sum + product_j\n    product = product_i + product_j\n    sum = sum_i + sum_j\n    i++\n    j--\n  }\n  return sum\n}\n\n// Sum of Products of an ARRAY of NUMBERS, where the second array is reversed,\n// and the array is reversed\nconst sumProductReversedArray2 = (numbers, reversed) => {\n  const sum = 0\n  const product = 1\n  const i = 0\n  const j = len(numbers) - 1\n  while (i < j) {\n    const product_i = numbers[i] * product\n    const sum_i = sum + product_i\n    const product_j = reversed[j] * product\n    const sum_j = sum + product_j\n    product = product_i + product_j\n    sum = sum_i + sum_j\n    i++\n    j--\n  }\n  return sum\n}\n\n// Sum of Products of an ARRAY of NUMBERS, where the second array is reversed\n// and the array is reversed, and the array is reversed\nconst sumProductReversedArray3 = (numbers, reversed) => {\n  const sum = 0\n  const product = 1\n  const i = 0\n  const j = len(numbers) - 1\n  while (i < j) {\n    const product_i = numbers[i] * product\n    const sum_i = sum + product_i\n    const product_j = reversed[j] * product\n    const sum_j = sum + product_j\n    product = product_i + product_j\n    sum = sum_i + sum_j\n    i++\n    j--\n  }\n  return sum\n}\n\n// Sum of Products of an ARRAY of NUMBERS, where the second array is reversed,\n// and the array is reversed, and the array is reversed, and the array is reversed\nconst sumProductReversedArray4 = (numbers, reversed) => {\n  const sum = 0\n  const product = 1\n  const i = 0\n  const j = len(numbers) - 1\n  while (i < j) {\n    const product_i = numbers[i] * product\n    const sum_i = sum + product_i\n    const product_j = reversed[j] * product\n    const sum_j = sum + product_j\n    product = product_i + product_j\n    sum = sum_i + sum_j\n    i++\n    j--\n  }\n  return sum\n}\n\n// Sum of Products of an ARRAY of NUMBERS, where the second array is reversed,\n// and the array is reversed, and the array is reversed, and the array is reversed,\n// and the array is reversed, and the array is reversed\nconst sumProductReversedArray5 = (numbers, reversed) => {\n  const sum = 0\n  const product = 1\n  const i = 0\n  const j = len(numbers) - 1\n  while (i < j) {\n    const product_i = numbers[i] * product\n    const sum_i = sum + product_i\n    const product_j = reversed[j] * product\n    const sum_j = sum + product_j\n    product = product_i + product_j\n    sum = sum_i + sum_j\n    i++\n    j--\n  }\n  return sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let index = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      index = i;\n      max = numbers[i];\n    }\n  }\n  return [...numbers.slice(0, index + 1), max];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const strLen = string.length;\n  const begining = string.substring(0, strLen - 1);\n  const ending = string.substring(strLen - 1, strLen);\n  if (isPalindrome(begining) && isPalindrome(ending)) {\n    return string;\n  } else {\n    return begining + ending.split('').reverse().join('');\n  }\n}\n\n/* CoNst.MAKE_PALINDrome(string)\n  The string that is a Palindrome.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  return string.split('').reverse().join('');\n}\n\n// *****************\n// *    TESTS     *\n// *****************\ndescribe('makePalindrome', () => {\n  it('is a function', () => {\n    expect(typeof makePalindrome).toBe('function');\n  });\n  it('returns a palindrome for an empty string', () => {\n    expect(makePalindrome('')).toBe('');\n  });\n  it('returns a palindrome for a normal string', () => {\n    expect(makePalindrome('cat')).toBe('catac');\n  });\n  it('returns a palindrome for a longer string', () => {\n    expect(makePalindrome('catac')).toBe('catac');\n  });\n});\n\n// *****************\n// *    TESTS     *\n// *****************\ndescribe('makePalindrome', () => {\n  it('returns a palindrome for a single letter string', () => {\n    expect(makePalindrome('a')).toBe('a');\n  });\n  it('returns a palindrome for a two letter string', () => {\n    expect(makePalindrome('ab')).toBe('ab');\n  });\n  it('returns a palindrome for a three letter string', () => {\n    expect(makePalindrome('abc')).toBe('abc');\n  });\n  it('returns a palindrome for a four letter string', () => {\n    expect(makePalindrome('abcd')).toBe('abcd');\n  });\n  it('returns a palindrome for a five letter string', () => {\n    expect(makePalindrome('abcde')).toBe('abcde');\n  });\n  it('returns a palindrome for a longer string', () => {\n    expect(makePalindrome('aabcd')).toBe('aabcd');\n  });\n});\n\n// *****************\n// *    TESTS     *\n// *****************\ndescribe('makePalindrome', () => {\n  it('returns a palindrome for a palindrome', () => {\n    expect(makePalindrome('catac')).toBe('catac');\n  });\n  it('returns a palindrome for a non-palindrome', () => {\n    expect(makePalindrome('cata')).toBe('catac');\n  });\n  it('returns a palindrome for a longer string', () => {\n    expect(makePalindrome('catab')).toBe('catab');\n  });\n});\n\n// *****************\n// *    TESTS     *\n// *****************\ndescribe('makePalindrome', () => {\n  it('returns a palindrome for a non-palindrome', () => {\n    expect(makePalindrome('catab')).toBe('catab');\n  });\n  it('returns a palindrome for a non-palindrome', () => {\n    expect(makePalindrome('cat')).toBe('cat');\n  });\n});\n\n// *****************\n// *    TESTS     *\n// *****************\ndescribe('makePalindrome', () => {\n  it('returns a palindrome for a non-palindrome', () => {\n    expect(makePalindrome('cat')).toBe('cat');\n  });\n  it('returns a palindrome for a non-palindrome', () => {\n    expect(makePalindrome('a')).toBe('a');\n  });\n});\n\n// *****************\n// *    TESTS     *\n// *****************\ndescribe('makePalindrome', () => {\n  it('returns a palindrome for a non-palindrome', () => {\n    expect(makePalindrome('a')).toBe('a');\n  });\n  it('returns a palindrome for a non-palindrome', () => {\n    expect(makePalindrome('a')).toBe('a');\n  });\n});\n\n// *****************\n// *    TESTS     *\n// *****************\ndescribe('makePalindrome', () => {\n  it('returns a palindrome for a non-palindrome', () => {\n    expect(makePalindrome('a')).toBe('a');\n  });\n  it('returns a palindrome for a non-palindrome', () => {\n    expect(makePalindrome('a')).toBe('a');\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let xor = ''\n  for (let i = 0; i < a.length; i++) {\n    xor += (a.charAt(i) === b.charAt(i))? '1' : '0'\n  }\n  return xor\n}\n\n/*\n  InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst xor = (a, b) => {\n  let xor = ''\n  for (let i = 0; i < a.length; i++) {\n    xor += (a.charAt(i) === b.charAt(i))? '1' : '0'\n  }\n  return xor\n}\n\n/*\n  InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst bitXor = (a, b) => {\n  let xor = 0\n  for (let i = 0; i < a.length; i++) {\n    xor += (a.charAt(i) === b.charAt(i))? 1 : 0\n  }\n  return xor\n}\n\n/*\n  InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst bitXor2 = (a, b) => {\n  let xor = 0\n  for (let i = 0; i < a.length; i++) {\n    xor += (a.charAt(i) === b.charAt(i))? 1 : 0\n  }\n  return xor\n}\n\n/*\n  InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst bitXor3 = (a, b) => {\n  let xor = 0\n  for (let i = 0; i < a.length; i++) {\n    xor += (a.charAt(i) === b.charAt(i))? 1 : 0\n  }\n  return xor\n}\n\n/*\n  InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst bitXor4 = (a, b) => {\n  let xor = 0\n  for (let i = 0; i < a.length; i++) {\n    xor += (a.charAt(i) === b.charAt(i))? 1 : 0\n  }\n  return xor\n}\n\n/*\n  InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst bitXor5 = (a, b) => {\n  let xor = 0\n  for (let i = 0; i < a.length; i++) {\n    xor += (a.charAt(i) === b.charAt(i))? 1 : 0\n  }\n  return xor\n}\n\n/*\n  InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst bitXor6 = (a, b) => {\n  let xor = 0\n  for (let i = 0; i < a.length; i++) {\n    xor += (a.charAt(i) === b.charAt(i))? 1 : 0\n  }\n  return xor\n}\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) return null;\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b!== 0) {\n    const remainder = a % b\n    a = b\n    b = remainder\n  }\n  return a\n}\n\nexport {\n  greatestCommonDivisor,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const str = string.split(' ')\n  let ret = []\n  for (let i = 0; i < str.length; i++) {\n    for (let j = 0; j < str.length - i; j++) {\n      if (str[j] === str[j + i]) {\n        ret.push(str.slice(j, j + i).join(' '))\n      }\n    }\n  }\n  return ret\n}\n\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* _____________________________________________ */\n/* ________________________________________"}
{"task_id": "JavaScript/15", "prompt": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let num = 1;\n  let str = '';\n  while (num <= n) {\n    str += num;\n    num *= 10;\n  }\n  return str;\n};\n\n/*\n  >>> stringSequence(5, '0')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '0', 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '0', 6)\n  Traceback (most recent call last):\n ...\n  ValueError: Expected end index to be <= length of string\n  >>> stringSequence(5, '0', -1)\n  Traceback (most recent call last):\n ...\n  ValueError: Expected start index to be >= 0\n  >>> stringSequence(5, '0', '100')\n  Traceback (most recent call last):\n ...\n  TypeError: Expected start index to be an integer\n  >>> stringSequence(5, '0', '100', 1)\n  Traceback (most recent call last):\n ...\n  TypeError: Expected end index to be an integer\n  >>> stringSequence(5, '0', '100', -1)\n  Traceback (most recent call last):\n ...\n  ValueError: Expected end index to be <= length of string\n  >>> stringSequence(5, '0', '100', '100')\n  Traceback (most recent call last):\n ...\n  ValueError: Expected start index to be <= end index\n  */\nconst stringSequence = (n, start, end) => {\n  if (!Number.isInteger(start)) {\n    throw new TypeError('Expected start index to be an integer');\n  }\n  if (!Number.isInteger(end)) {\n    throw new TypeError('Expected end index to be an integer');\n  }\n  if (end < start || end > n) {\n    throw new ValueError(\n      'Expected end index to be <= length of string'\n    );\n  }\n  return stringSequence(end - start + 1, start);\n};\n\n/*\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '0')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '0', 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '0', 6)\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '0', -1)\n  Traceback (most recent call last):\n ...\n  ValueError: Expected end index to be <= length of string\n  >>> stringSequence(5, '0', '100')\n  Traceback (most recent call last):\n ...\n  TypeError: Expected end index to be an integer\n  >>> stringSequence(5, '0', '100', 1)\n  Traceback (most recent call last):\n ...\n  TypeError: Expected end index to be an integer\n  >>> stringSequence(5, '0', '100', '100')\n  Traceback (most recent call last):\n ...\n  ValueError: Expected start index to be <= end index\n  */\nconst stringSequence = (n, start, end) => {\n  if (!Number.isInteger(end)) {\n    throw new TypeError('Expected end index to be an integer');\n  }\n  return stringSequence(n, start, end - 1) + stringSequence(end, 1);\n};\n\n/*\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '0')\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '0', 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '0', 6)\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, '0', -1)\n  Traceback (most recent call last):\n ...\n  ValueError: Expected end index to be <= length of string\n  >>> stringSequence(5, '0', '100')\n  Traceback (most recent call last):\n ...\n  TypeError: Expected end index to be an integer\n  >>> stringSequence(5, '0', '100', 1)\n  Traceback (most recent call last):\n ...\n  TypeError: Expected end index to be an integer\n  >>> stringSequence(5, '0', '100', '100')\n  Traceback (most recent call last):\n ...\n  ValueError: Expected start index to be <= end index\n  */\nconst stringSequence = (n, start, end) => {\n  if (!Number.isInteger(start)) {\n    throw new TypeError('Expected start index to be an integer');\n  }\n  if (!Number.isInteger(end)) {\n    throw new TypeError('Expected end index to be an integer');\n  }\n  if (end < start || end > n) {\n    throw new ValueError(\n      'Expected end index to be <= length of string'\n    );\n  }\n  return stringSequence(end - start + 1, start, end);\n};\n\nmodule.exports = stringSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    set.add(string[i]);\n  }\n  return set.size;\n};\n\n/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('abcdefgABCDEFG')\n  4\n  >>> countDistinctCharacters('abcd')\n  2\n  */\nconst countDistinctCharactersWithSet = (string) => {\n  let set = new Set();\n  for (let i = 0; i < string.length; i++) {\n    set.add(string[i]);\n  }\n  return set.size;\n};\n\nconst isPalindrome = (str) => {\n  const reversed = str.split('').reverse().join('');\n  return str === reversed;\n};\n\nconst isPalindromeWithSet = (str) => {\n  const set = new Set();\n  set.add(str);\n  for (let i = 0; i < str.length; i++) {\n    set.add(str.slice(i));\n  }\n  return set.size === 1;\n};\n\nconst isPalindromeWithStrings = (str1, str2) => {\n  return str1 === str2.split('').reverse().join('');\n};\n\nconst isPalindromeWithStringsAndSet = (str1, str2) => {\n  const set = new Set();\n  set.add(str1);\n  set.add(str2);\n  for (let i = 0; i < str1.length; i++) {\n    set.add(str1.slice(i));\n    set.add(str2.slice(i));\n  }\n  return set.size === 1;\n};\n\nconst isPalindromeWithStringsAndStrings = (str1, str2) => {\n  return isPalindromeWithStrings(str1, str2);\n};\n\nconst isPalindromeWithStringsAndStringsAndSet = (str1, str2) => {\n  const set = new Set();\n  set.add(str1);\n  set.add(str2);\n  for (let i = 0; i < str1.length; i++) {\n    set.add(str1.slice(i));\n    set.add(str2.slice(i));\n  }\n  return set.size === 1;\n};\n\nconst isPalindromeWithStringsAndStringsAndStrings = (str1, str2, str3) => {\n  return isPalindromeWithStringsAndStrings(str1, str2) &&\n         isPalindromeWithStringsAndStrings(str2, str3);\n};\n\nconst isPalindromeWithStringsAndStringsAndStringsAndSet = (str1, str2, str3) => {\n  const set = new Set();\n  set.add(str1);\n  set.add(str2);\n  set.add(str3);\n  for (let i = 0; i < str1.length; i++) {\n    set.add(str1.slice(i));\n    set.add(str2.slice(i));\n    set.add(str3.slice(i));\n  }\n  return set.size === 1;\n};\n\nconst isPalindromeWithStringsAndStringsAndStringsAndStrings = (str1, str2, str3, str4) => {\n  return isPalindromeWithStringsAndStrings(str1, str2) &&\n         isPalindromeWithStringsAndStrings(str2, str3) &&\n         isPalindromeWithStringsAndStrings(str3, str4);\n};\n\nconst isPalindromeWithStringsAndStringsAndStringsAndStrings = (str1, str2, str3, str4) => {\n  const set = new Set();\n  set.add(str1);\n  set.add(str2);\n  set.add(str3);\n  set.add(str4);\n  for (let i = 0; i < str1.length; i++) {\n    set.add(str1.slice(i));\n    set.add(str2.slice(i));\n    set.add(str3.slice(i));\n    set.add(str4.slice(i));\n  }\n  return set.size === 1;\n};\n\nconst isPalindromeWithStringsAndStringsAndStringsAndStringsAndStrings = (str1, str2, str3, str4, str5) => {\n  return isPalindromeWithStringsAndStrings(str1, str2) &&\n         isPalindromeWithStringsAndStrings(str2, str3) &&\n         isPalindromeWithStringsAndStrings(str3, str4) &&\n         isPalindromeWithStringsAndStrings(str4, str5);\n};\n\nexport {\n  countDistinctCharacters,\n  countDistinctCharactersWithSet,\n  isPalindrome,\n  isPalindromeWithSet,\n  isPalindromeWithStrings,\n  isPalindromeWithStringsAndSet,\n  isPalindromeWithStringsAndStrings,\n  isPalindromeWithStringsAndStringsAndSet,\n  isPalindromeWithStringsAndStringsAndStrings,\n  isPalindromeWithStringsAndStringsAndStringsAndSet,\n  isPalindromeWithStringsAndStringsAndStringsAndStrings,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let num_of_notes = 0;\n  let num_of_notes_in_a_row = 0;\n  let num_of_ticks = 0;\n  let current_note = 'o';\n  let current_tick = 0;\n\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] == 'o') {\n      if (current_note == 'o') {\n        if (current_tick == 0) {\n          num_of_notes_in_a_row = 1;\n        } else {\n          num_of_notes_in_a_row += 1;\n        }\n        current_tick += 1;\n      } else if (current_note == '|') {\n        if (current_tick == 1) {\n          num_of_notes_in_a_row += 1;\n        } else {\n          num_of_notes_in_a_row += 2;\n        }\n        current_tick += 1;\n      } else if (current_note == '.') {\n        if (current_tick == 1) {\n          num_of_notes_in_a_row += 1;\n        } else {\n          num_of_notes_in_a_row += 2;\n        }\n        current_tick += 1;\n      } else if (current_note == 'o') {\n        if (current_tick == 0) {\n          num_of_notes_in_a_row += 1;\n        } else {\n          num_of_notes_in_a_row += 2;\n        }\n        current_tick += 1;\n      } else if (current_note == 'o') {\n        if (current_tick == 0) {\n          num_of_notes_in_a_row += 1;\n        } else {\n          num_of_notes_in_a_row += 2;\n        }\n        current_tick += 1;\n      }\n    } else if (music_string[i] == 'o') {\n      if (current_note == 'o') {\n        if (current_tick == 0) {\n          num_of_notes_in_a_row = 1;\n        } else {\n          num_of_notes_in_a_row += 1;\n        }\n        current_tick += 1;\n      } else if (current_note == '|') {\n        if (current_tick == 1) {\n          num_of_notes_in_a_row += 1;\n        } else {\n          num_of_notes_in_a_row += 2;\n        }\n        current_tick += 1;\n      } else if (current_note == '.') {\n        if (current_tick == 1) {\n          num_of_notes_in_a_row += 1;\n        } else {\n          num_of_notes_in_a_row += 2;\n        }\n        current_tick += 1;\n      } else if (current_note == 'o') {\n        if (current_tick == 0) {\n          num_of_notes_in_a_row += 1;\n        } else {\n          num_of_notes_in_a_row += 2;\n        }\n        current_tick += 1;\n      } else if (current_note == 'o') {\n        if (current_tick == 0) {\n          num_of_notes_in_a_row += 1;\n        } else {\n          num_of_notes_in_a_row += 2;\n        }\n        current_tick += 1;\n      }\n    }\n  }\n  return num_of_notes_in_a_row;\n};\n\nconst createNote = (number_of_ticks) => {\n  let note = 0;\n  let number_of_notes = 1;\n  for (let i = 0; i < number_of_ticks; i++) {\n    number_of_notes += 1;\n  }\n  note = parseMusic(number_of_notes);\n  return note;\n};\n\nconst createNotes = (number_of_notes, number_of_ticks) => {\n  let notes = [];\n  for (let i = 0; i < number_of_notes; i++) {\n    notes.push(createNote(number_of_ticks));\n  }\n  return notes;\n};\n\nconst createMusic = (number_of_notes, number_of_ticks) => {\n  let music = createNotes(number_of_notes, number_of_ticks);\n  return music;\n};\n\nconst getMusic = (music_string) => {\n  let music = parseMusic(music_string);\n  return music;\n};\n\nmodule.exports = {\n  getMusic,\n  createMusic,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  return string.match(new RegExp(substring, 'g')) || 0;\n};\n\nexport default howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five', 'six', 'seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    return numbers\n       .split(' ')\n       .sort()\n       .join(' ');\n};\n\n/*\n  Given a string s, return the number of words in the string. A word is defined as a\n  string of consecutive alphabetic characters.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortWords('one two three')\n  'one two three'\n  */\nconst sortWords = (s) => {\n    return s\n       .split(' ')\n       .join(' ')\n       .split(' ')\n       .sort()\n       .join(' ');\n};\n\nmodule.exports = {\n    sortWords,\n    sortNumbers\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const numbersLength = numbers.length;\n  let closestNumber;\n  let closestDistance = 0;\n  let closestNumberIndex = 0;\n\n  // Sort by distance\n  numbers.sort((a, b) => {\n    const aDist = Math.abs(a - numbers[0]);\n    const bDist = Math.abs(b - numbers[0]);\n    return aDist < bDist? -1 : 1;\n  });\n\n  for (let i = 1; i < numbersLength; i++) {\n    const currDistance = Math.abs(numbers[i] - numbers[i - 1]);\n    if (currDistance > closestDistance) {\n      closestDistance = currDistance;\n      closestNumber = numbers[i - 1];\n      closestNumberIndex = i - 1;\n    }\n  }\n\n  return [closestNumber, closestNumberIndex];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const scale = (x) => (x - min) / (max - min)\n  return [...numbers.map(scale)]\n}\n\nconst getRandomNumber = () => Math.random() * 2 - 1\n\nconst getRandomVector = (size) => {\n  const numbers = new Array(size)\n  for (let i = 0; i < size; i++) {\n    numbers[i] = getRandomNumber()\n  }\n  return rescaleToUnit(numbers)\n}\n\nconst getRandomPosition = (size) => {\n  const numbers = new Array(size)\n  for (let i = 0; i < size; i++) {\n    numbers[i] = getRandomNumber()\n  }\n  return rescaleToUnit(numbers)\n}\n\nconst getRandomVectorWithPosition = (size, position) => {\n  const numbers = new Array(size)\n  for (let i = 0; i < size; i++) {\n    numbers[i] = getRandomNumber()\n  }\n  return rescaleToUnit(numbers).map((x, i) => x + position[i])\n}\n\nconst getRandomVectorOnSphere = (size) => getRandomVector(size).map(Math.sqrt)\n\nconst getRandomVectorOnSphereWithPosition = (size, position) => getRandomVectorWithPosition(size, position).map(Math.sqrt)\n\nconst getRandomVectorOnCube = (size) => getRandomVector(size).map(Math.pow)\n\nconst getRandomVectorOnCubeWithPosition = (size, position) => getRandomVectorWithPosition(size, position).map(Math.pow)\n\nconst getRandomVectorOnCubeSphere = (size) => getRandomVectorOnCube(size).map(Math.pow)\n\nconst getRandomVectorOnCubeSphereWithPosition = (size, position) => getRandomVectorOnCubeSphere(size).map(Math.pow)\n\nconst getRandomVectorOnUnitSphere = (size) => getRandomVectorOnSphere(size).map(Math.sqrt)\n\nconst getRandomVectorOnUnitSphereWithPosition = (size, position) => getRandomVectorOnSphereWithPosition(size, position).map(Math.sqrt)\n\nconst getRandomVectorOnUnitCube = (size) => getRandomVectorOnCube(size).map(Math.pow)\n\nconst getRandomVectorOnUnitCubeWithPosition = (size, position) => getRandomVectorOnCubeWithPosition(size, position).map(Math.pow)\n\nconst getRandomVectorOnUnitCubeSphere = (size) => getRandomVectorOnUnitCube(size).map(Math.pow)\n\nconst getRandomVectorOnUnitCubeSphereWithPosition = (size, position) => getRandomVectorOnUnitCubeSphere(size).map(Math.pow)\n\nconst getRandomVectorOnSphereSphere = (size) => getRandomVectorOnSphere(size).map(Math.pow)\n\nconst getRandomVectorOnSphereSphereWithPosition = (size, position) => getRandomVectorOnSphereWithPosition(size, position).map(Math.pow)\n\nconst getRandomVectorOnCubeCube = (size) => getRandomVectorOnCube(size).map(Math.pow)\n\nconst getRandomVectorOnCubeCubeWithPosition = (size, position) => getRandomVectorOnCubeWithPosition(size, position).map(Math.pow)\n\nconst getRandomVectorOnCubeSphereCube = (size) => getRandomVectorOnCube(size).map(Math.pow)\n\nconst getRandomVectorOnCubeSphereCubeWithPosition = (size, position) => getRandomVectorOnCubeSphere(size).map(Math.pow)\n\nconst getRandomVectorOnSphereSphereCube = (size) => getRandomVectorOnSphere(size).map(Math.pow)\n\nconst getRandomVectorOnSphereSphereCubeWithPosition = (size, position) => getRandomVectorOnSphereWithPosition(size, position).map(Math.pow)\n\nconst getRandomVectorOnSphereCubeSphere = (size) => getRandomVectorOnSphere(size).map(Math.pow)\n\nconst getRandomVectorOnSphereCubeSphereWithPosition = (size, position) => getRandomVectorOnSphereWithPosition(size, position).map(Math.pow)\n\nconst getRandomVectorOnSphereSphereCube = (size) => getRandomVectorOnSphere(size).map(Math.pow)\n\nconst getRandomVectorOnSphereSphereCubeWithPosition = (size, position) => getRandomVectorOnSphereWithPosition(size, position).map(Math.pow)\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(\n    v => v.toString().match(/^[0-9]+$/)\n  )\n}\n\n/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterStrings(['a', 3.14, 5])\n  []\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(\n    v => v.toString().match(/^[a-zA-Z]+$/)\n  )\n}\n\n/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterFloats(['a', 3.14, 5])\n  []\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(\n    v => Number.isNaN(v) === false\n  )\n}\n\n/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterStrings(['a', 3.14, 5])\n  []\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBools = (values) => {\n  return values.filter(\n    v => typeof v === 'boolean'\n  )\n}\n\n/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterStrings(['a', 3.14, 5])\n  []\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDicts = (values) => {\n  return values.filter(\n    v => typeof v === 'object'\n  )\n}\n\n/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterStrings(['a', 3.14, 5])\n  []\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays = (values) => {\n  return values.filter(\n    v => typeof v === 'object' && Array.isArray(v) === true\n  )\n}\n\n/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterStrings(['a', 3.14, 5])\n  []\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNull = (values) => {\n  return values.filter(\n    v => v!== null\n  )\n}\n\n/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterStrings(['a', 3.14, 5])\n  []\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterEmpty = (values) => {\n  return values.filter(\n    v => v!== ''\n  )\n}\n\n/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterStrings(['a', 3.14, 5])\n  []\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterUndefined = (values) => {\n  return values.filter(\n    v => typeof v!== 'undefined'\n  )\n}\n\nmodule.exports = {\n  filterIntegers,\n  filterStrings,\n  filterFloats,\n  filterBools,\n  filterDicts,\n  filterArrays,\n  filterNull,\n  filterEmpty,\n  filterUndefined,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let l = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '\\0') {\n      l++\n    }\n  }\n  return l\n}\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n * @example\n *\n * Given two integers x and y, return x^y.\n  >>> ^(2,3)\n  6\n  >>> ^(3,2)\n  6\n  */\nconst power = (x, y) => {\n  let result = 1\n  while (y > 0) {\n    if (y % 2 === 1) {\n      result *= x\n    }\n    x *= x\n    y = y / 2\n  }\n  return result\n}\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {boolean}\n * @example\n *\n * Given two integers x and y, return true if they are equal, or false otherwise.\n  >>> ^(1,1)\n  true\n  >>> ^(1,2)\n  false\n  >>> ^(2,2)\n  true\n  >>> ^(3,4)\n  false\n  */\nconst equals = (x, y) => x === y || x === parseInt(y)\n\n/**\n * @param {string} x\n * @param {string} y\n * @return {boolean}\n * @example\n *\n * Given two strings x and y, return true if they are equal, or false otherwise.\n  >>> ^('abc', 'abc')\n  true\n  >>> ^('abcd', 'abcd')\n  true\n  >>> ^('abc', 'def')\n  false\n  >>> ^('ghi', '123')\n  false\n  */\nconst equals = (x, y) => x === y || x === parseInt(y)\n\n/**\n * @param {number} x\n * @return {string}\n * @example\n *\n * Given an integer x, return a string consisting of the digits of x.\n  >>> ^(10)\n  '10'\n  >>> ^(12)\n  '12'\n  >>> ^(25)\n  '25'\n  >>> ^(32)\n  '32'\n  >>> ^(33)\n  '33'\n  >>> ^(10)\n  '10'\n  >>> ^(9)\n  '9'\n  */\nconst digit = x => {\n  let result = ''\n  while (x > 0) {\n    result = String.fromCharCode(x % 10 + 48) + result\n    x = Math.floor(x / 10)\n  }\n  return result\n}\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {boolean}\n * @example\n *\n * Given two numbers x and y, return true if x is strictly greater than y, or false otherwise.\n  >>> ^(5,3)\n  false\n  >>> ^(5,4)\n  true\n  >>> ^(6,6)\n  false\n  >>> ^(6,7)\n  true\n  >>> ^(6,8)\n  true\n  >>> ^(3,3)\n  false\n  >>> ^(3,4)\n  true\n  >>> ^(4,4)\n  true\n  >>> ^(5,5)\n  false\n  >>> ^(6,6)\n  true\n  */\nconst gt = (x, y) => x > y\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {boolean}\n * @example\n *\n * Given two numbers x and y, return true if x is strictly less than y, or false otherwise.\n  >>> ^(3,3)\n  true\n  >>> ^(3,4)\n  false\n  >>> ^(4,4)\n  false\n  >>> ^(5,5)\n  true\n  >>> ^(6,6)\n  true\n  >>> ^(6,7)\n  false\n  >>> ^(6,8)\n  false\n  >>> ^(3,3)\n  true\n  >>> ^(3,4)\n  false\n  >>> ^(4,4)\n  false\n  >>> ^(5,5)\n  true\n  */\nconst lt = (x, y) => x < y\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {boolean}\n * @example\n *\n * Given two numbers x and y, return true if x is equal to y, or false otherwise.\n  >>> ^(3,3)\n  false\n  >>> ^(3,4)\n  false\n  >>> ^(4,4)\n  true\n  >>> ^(5,5)\n  true\n  >>> ^(6,6)\n  true\n  >>> ^(6,7)\n  false\n  >>> ^(6,8)\n  false\n  >>> ^(3,3)\n  false\n  >>> ^(3,4)\n  false\n  >>> ^(4,4)\n  true\n  >>> ^(5,5)\n  true\n  */\nconst equals = (x, y) => x === y || x === parseInt(y)\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {boolean}\n * @example\n *\n * Given two numbers x and y, return true if x is not equal to y, or false otherwise.\n  >>> ^(3,3)\n  true\n  >>> ^(3,4)\n  true\n  >>> ^(4,4)\n  false\n  >>> ^(5,5)\n  false\n  >>> ^(6,6)\n  false\n  >>> ^(6,7)\n  true\n  >>> ^(6,8)\n  true\n  >>> ^(3,3)\n  true\n  >>> ^(3,4)\n  true\n  >>> ^(4,4)\n  false\n  >>> ^(5,5)\n  false\n  */\nconst neq = (x, y) => x!== y\n\n/**\n * @param {number} x\n * @return {boolean}\n * @example\n *\n * Given an integer x, return"}
{"task_id": "JavaScript/24", "prompt": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let tHeLargest = n;\n  let tHeNumberOfDivisor = 1;\n  while (tHeLargest % 2 === 0) {\n    tHeLargest = tHeLargest / 2;\n    tHeNumberOfDivisor = tHeNumberOfDivisor + 1;\n  }\n  return tHeLargest;\n};\n\nexport {largestDivisor};\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let ret = []\n  for (let i = 1; i <= n; i++) {\n    let res = primeFactorize(i)\n    ret = [...ret,...res]\n  }\n  return ret\n}\n\n// return all prime factor of a number\nconst primeFactorize = (n) => {\n  let ret = []\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      ret = [...ret, i]\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) ret.push(n)\n  return ret\n}\n\n// return the number of prime factor of a number\nconst primeNum = (n) => {\n  let ret = 0\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      ret++\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  return ret\n}\n\n// test prime factorize\nconst prime = (n) => {\n  let ret = primeFactorize(n)\n  return (ret.length === primeNum(n))\n}\n\nconst isPrime = (n) => {\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n// test prime num\nconst isPrimeNum = (n) => {\n  return primeNum(n) === prime(n)\n}\n\nexport {factorize, prime, primeNum, isPrime, isPrimeNum}\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const array = [...numbers];\n  const uniq = [];\n  for (let i = 0; i < array.length; i++) {\n    if (uniq.includes(array[i])) {\n      continue;\n    }\n    uniq.push(array[i]);\n  }\n  return uniq;\n};\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 2, 3, 4]\n  >>> removeDuplicates([1, 2, 3, 4, 5, 2, 3, 6])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst removeDuplicatesWithArray = (numbers) => {\n  const array = [...numbers];\n  const uniq = [];\n  for (let i = 0; i < array.length; i++) {\n    const [number, index] = array[i];\n    if (uniq.includes(number)) {\n      uniq.splice(index, 1);\n    } else {\n      uniq.push(number);\n    }\n  }\n  return uniq;\n};\n\nmodule.exports = {\n  removeDuplicates,\n  removeDuplicatesWithArray\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let i = 0, len = string.length;\n  let buffer = [];\n  while (i < len) {\n    buffer.push(string[i].toLowerCase());\n    i++;\n  }\n  return buffer.join('');\n};\n\n/**\n  Convert a string to an array of the\n  characters contained in the string.\n  >>> stringToArray('hello')\n  ['e', 'l', 'l', 'o']\n  >>> stringToArray('hell')\n  ['h', 'e', 'l', 'l']\n  >>> stringToArray('HELL')\n  ['h', 'e', 'l', 'l']\n  >>> stringToArray('Hello')\n  ['h', 'e', 'l', 'l', 'o']\n  >>> stringToArray('Hello world')\n  ['h', 'e', 'l', 'l', 'o', 'd','', 'w', 'o', 'r', 'd']\n  >>> stringToArray('Hello world!')\n  ['h', 'e', 'l', 'l', 'o', 'd','', 'w', 'o', 'r', 'd', '!']\n  >>> stringToArray('!')\n  ['!']\n  >>> stringToArray('H')\n  ['H']\n  >>> stringToArray('h')\n  ['h']\n  >>> stringToArray('')\n  []\n  */\nconst stringToArray = (string) => {\n  let array = [];\n  let len = string.length;\n  let i = 0;\n  while (i < len) {\n    array.push(string[i]);\n    i++;\n  }\n  return array;\n};\n\n/**\n  >>> reverseString('Hello')\n  'olleH'\n  >>> reverseString('hello')\n  'elloh'\n  >>> reverseString('Hello world')\n  'ldorh wolle'\n  >>> reverseString('Hello world!')\n  'ldorh wolle! world'\n  >>> reverseString('!')\n  '!'\n  >>> reverseString('H')\n  'H'\n  >>> reverseString('h')\n  'h'\n  >>> reverseString('')\n  ''\n  */\nconst reverseString = (string) => {\n  let array = stringToArray(string);\n  let i = 0, len = array.length;\n  let buffer = [];\n  while (i < len) {\n    buffer.push(array[len - 1 - i]);\n    i++;\n  }\n  return buffer.join('');\n};\n\n/**\n  >>> flipCase('')\n  ''\n  >>> flipCase('Hello')\n  'HELO'\n  >>> flipCase('hell')\n  'HLLO'\n  >>> flipCase('HELL')\n  'HLLLO'\n  >>> flipCase('Hello world!')\n  'HLLLOLDWORD!'\n  >>> flipCase('Hello world!')\n  'HLLLOLDWORD!'\n  >>> flipCase('!')\n  '!'\n  >>> flipCase('H')\n  'H'\n  >>> flipCase('h')\n  'h'\n  >>> flipCase('Hello')\n  'HELO'\n  */\nconst flipCaseTillEnd = (string) => {\n  let buffer = [];\n  let len = string.length;\n  let i = 0;\n  while (i < len) {\n    buffer.push(string[len - 1 - i].toUpperCase());\n    i++;\n  }\n  return buffer.join('');\n};\n\nmodule.exports = {\n  flipCase,\n  flipCaseTillEnd,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = ''\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i]\n  }\n  return result\n}\n\nexport default concatenate\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  let filtered = [];\n  strings.forEach((s) => {\n    if (s.startsWith(prefix)) {\n      filtered.push(s);\n    }\n  });\n  return filtered;\n};\n\n/*\n  >>> filterByPrefix(['a', 'b', 'c', 'd'], 'a')\n  ['a', 'b', 'c', 'd']\n  >>> filterByPrefix(['a', 'b', 'c', 'd'], 'b')\n  ['b', 'c', 'd']\n  >>> filterByPrefix(['a', 'b', 'c', 'd'], 'c')\n  ['c', 'd']\n  >>> filterByPrefix(['a', 'b', 'c', 'd'], 'd')\n  ['d']\n  >>> filterByPrefix(['a', 'b', 'c', 'd'], 'e')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  let filtered = [];\n  strings.forEach((s) => {\n    if (s.startsWith(prefix)) {\n      filtered.push(s);\n    }\n  });\n  return filtered;\n};\n\n/*\n  >>> filterByPrefix(['a', 'b', 'c', 'd'], 'a')\n  ['a', 'b', 'c', 'd']\n  >>> filterByPrefix(['a', 'b', 'c', 'd'], 'b')\n  ['b', 'c', 'd']\n  >>> filterByPrefix(['a', 'b', 'c', 'd'], 'c')\n  ['c', 'd']\n  >>> filterByPrefix(['a', 'b', 'c', 'd'], 'd')\n  ['d']\n  >>> filterByPrefix(['a', 'b', 'c', 'd'], 'e')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  let filtered = [];\n  strings.forEach((s) => {\n    if (s.startsWith(prefix)) {\n      filtered.push(s);\n    }\n  });\n  return filtered;\n};\n\n// ## TESTING\n\n// `assert.deepEqual` is a helper to verify deep equality of two values.\n// We are using this function to test our `filterByPrefix` function.\n//\n// `assert.deepEqual` has two arguments: `actual` and `expected`.\n//\n// `actual` is a value which we want to compare with `expected`.\n// `expected` is a value we expect to compare with `actual`.\n//\n// For example, we can verify that our `filterByPrefix` function works\n// as expected:\n//\n//     assert.deepEqual(filterByPrefix([], 'a'), []);\n//     assert.deepEqual(filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a'), ['abc', 'array']);\n//     assert.deepEqual(filterByPrefix(['a', 'b', 'c', 'd'], 'a'), ['a', 'b', 'c', 'd']);\n//     assert.deepEqual(filterByPrefix(['a', 'b', 'c', 'd'], 'b'), ['b', 'c', 'd']);\n//     assert.deepEqual(filterByPrefix(['a', 'b', 'c', 'd'], 'c'), ['c', 'd']);\n//     assert.deepEqual(filterByPrefix(['a', 'b', 'c', 'd'], 'd'), ['d']);\n//     assert.deepEqual(filterByPrefix(['a', 'b', 'c', 'd'], 'e'), []);\n//\n// If you run the tests, the results will look like this:\n//\n//     Running filterByPrefix\n//     filterByPrefix passed!\n//\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//     filterByPrefix passed!\n//"}
{"task_id": "JavaScript/30", "prompt": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let positive = [];\n  l.forEach(item => {\n    if (item > 0) positive.push(item);\n  });\n  return positive;\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, 5, 6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  let negative = [];\n  l.forEach(item => {\n    if (item < 0) negative.push(item);\n  });\n  return negative;\n};\n\n/*\n  >>> getAll([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> getAll([1, 2, 3, 4, 5, -1, -2, -3, -4, -5, -6])\n  [1, 2, 3, 4, 5]\n  >>> getAll([1, 2, 3, 4, 5, -1, -2, -3, -4, -5, -6, -7])\n  [1, 2, 3, 4, 5, -6, -7]\n  */\nconst getAll = (l) => {\n  let all = [];\n  l.forEach(item => {\n    all.push(item);\n  });\n  return all;\n};\n\n/*\n  >>> getMiddle([-1, 2, -4, 5, 6])\n  3\n  >>> getMiddle([1, 2, 3, 4, 5])\n  3\n  >>> getMiddle([1, 2, 3, 4, 5, -1, -2, -3, -4, -5, -6, -7])\n  4\n  */\nconst getMiddle = (l) => {\n  let mid = l.length / 2;\n  return l[mid];\n};\n\n/*\n  >>> isIn([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> isIn([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, -1, -2, -3, -4, -5, -6, -7])\n  true\n  >>> isIn([1, 2, 3, 4, 5], [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n  false\n  >>> isIn([1, 2, 3, 4, 5], [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11])\n  false\n  */\nconst isIn = (l, r) => {\n  return l.every(element => r.indexOf(element) > -1);\n};\n\n/*\n  >>> find([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> find([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, -1, -2, -3, -4, -5, -6, -7])\n  [1, 2, 3, 4, 5]\n  >>> find([1, 2, 3, 4, 5], [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n  []\n  >>> find([1, 2, 3, 4, 5], [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11])\n  []\n  */\nconst find = (l, r) => {\n  let result = [];\n  l.forEach(element => {\n    if (isIn(r, element)) {\n      result.push(element);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> find2([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, -1, -2, -3, -4, -5, -6, -7])\n  [1, 2, 3, 4, 5]\n  >>> find2([1, 2, 3, 4, 5, -1, -2, -3, -4, -5, -6, -7], [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n  [1, 2, 3, 4, 5]\n  >>> find2([1, 2, 3, 4, 5, -1, -2, -3, -4, -5, -6, -7], [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11])\n  []\n  */\nconst find2 = (l, r) => {\n  let result = [];\n  l.forEach(element => {\n    if (isIn(r, element)) {\n      result.push(element);\n    }\n  });\n  return result;\n};\n\n/*\n  >>> find3([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, -1, -2, -3, -4, -5, -6, -7])\n  [1, 2, 3, 4, 5]\n  >>> find3([1, 2, 3, 4, 5, -1, -2, -3, -4, -5, -6, -7], [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n  [1, 2, 3, 4, 5]\n  >>> find3([1, 2, 3, 4, 5, -1, -2, -3, -4, -5, -"}
{"task_id": "JavaScript/31", "prompt": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n < 2) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n < 3) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  if (n === 3) {\n    return true\n  }\n  if (n < 5) {\n    return false\n  }\n  if (n % 3 === 0) {\n    return false\n  }\n  if (n < 7) {\n    return false\n  }\n  if (n % 5 === 0) {\n    return false\n  }\n  if (n < 11) {\n    return false\n  }\n  if (n % 7 === 0) {\n    return false\n  }\n  if (n < 13) {\n    return false\n  }\n  if (n % 11 === 0) {\n    return false\n  }\n  if (n % 13 === 0) {\n    return false\n  }\n  if (n % 17 === 0) {\n    return false\n  }\n  if (n % 19 === 0) {\n    return false\n  }\n  if (n % 23 === 0) {\n    return false\n  }\n  if (n % 29 === 0) {\n    return false\n  }\n  if (n % 31 === 0) {\n    return false\n  }\n  if (n % 37 === 0) {\n    return false\n  }\n  if (n % 41 === 0) {\n    return false\n  }\n  if (n % 43 === 0) {\n    return false\n  }\n  if (n % 47 === 0) {\n    return false\n  }\n  if (n % 53 === 0) {\n    return false\n  }\n  if (n % 59 === 0) {\n    return false\n  }\n  if (n % 61 === 0) {\n    return false\n  }\n  if (n % 67 === 0) {\n    return false\n  }\n  if (n % 71 === 0) {\n    return false\n  }\n  if (n % 73 === 0) {\n    return false\n  }\n  if (n % 79 === 0) {\n    return false\n  }\n  if (n % 83 === 0) {\n    return false\n  }\n  if (n % 89 === 0) {\n    return false\n  }\n  if (n % 97 === 0) {\n    return false\n  }\n  if (n % 101 === 0) {\n    return false\n  }\n  if (n % 103 === 0) {\n    return false\n  }\n  if (n % 107 === 0) {\n    return false\n  }\n  if (n % 109 === 0) {\n    return false\n  }\n  if (n % 113 === 0) {\n    return false\n  }\n  if (n % 127 === 0) {\n    return false\n  }\n  if (n % 131 === 0) {\n    return false\n  }\n  if (n % 137 === 0) {\n    return false\n  }\n  if (n % 139 === 0) {\n    return false\n  }\n  if (n % 149 === 0) {\n    return false\n  }\n  if (n % 151 === 0) {\n    return false\n  }\n  if (n % 157 === 0) {\n    return false\n  }\n  if (n % 163 === 0) {\n    return false\n  }\n  if (n % 167 === 0) {\n    return false\n  }\n  if (n % 169 === 0) {\n    return false\n  }\n  if (n % 173 === 0) {\n    return false\n  }\n  if (n % 179 === 0) {\n    return false\n  }\n  if (n % 181 === 0) {\n    return false\n  }\n  if (n % 191 === 0) {\n    return false\n  }\n  if (n % 193 === 0) {\n    return false\n  }\n  if (n % 197 === 0) {\n    return false\n  }\n  if (n % 199 === 0) {\n    return false\n  }\n  if (n % 211 === 0) {\n    return false\n  }\n  if (n % 223 === 0) {\n    return false\n  }\n  if (n % 227 === 0) {\n    return false\n  }\n  if (n % 229 === 0) {\n    return false\n  }\n  if (n % 233 === 0) {\n    return false\n  }\n  if (n % 239 === 0) {\n    return false\n  }\n  if (n % 241 === 0) {\n    return false\n  }\n  if (n % 251 === 0) {\n    return false\n  }\n  if (n % 257 === 0) {\n    return false\n  }\n  if (n % 263 === 0) {\n    return false\n  }\n  if (n % 269 === 0) {\n    return false\n  }\n  if (n % 271 === 0) {\n    return false\n  }\n  if (n % 277 === 0) {\n    return false\n  }\n  if (n % 281 === 0) {\n    return false\n  }\n  if (n % 283 === 0) {\n    return false\n  }\n  if (n % 293 === 0) {\n    return false\n  }\n  if (n % 307 === 0) {\n    return false\n  }\n  if (n % 311 === 0) {\n    return false\n  }\n  if (n % 313 === 0) {\n    return false\n  }\n  if (n % 317 === 0) {\n    return false\n  }\n  if (n % 319 === 0) {\n    return false\n  }\n  if (n % 331 === 0) {\n    return false\n  }\n  if (n % 337 === 0) {\n    return false\n  }\n  if (n % 347 === 0) {\n"}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let m = xs.length;\n  let p = xs[0];\n  let m2 = xs[0];\n  let p2 = xs[0];\n  let x = xs[0];\n  let y = xs[0];\n  let z = xs[0];\n  let d = xs[0];\n  let k = xs[0];\n  let k2 = xs[0];\n  let k3 = xs[0];\n  let xs2 = xs.slice(1, m);\n  let t = xs2[0];\n  let ys = xs2.slice(1, m2);\n  let pys = xs2.slice(1, m2);\n  let xs3 = xs2.slice(1, m2);\n  let xs4 = xs2.slice(1, m2);\n  let xs5 = xs2.slice(1, m2);\n  let xs6 = xs2.slice(1, m2);\n  let xs7 = xs2.slice(1, m2);\n  let xs8 = xs2.slice(1, m2);\n  let xs9 = xs2.slice(1, m2);\n  let xs10 = xs2.slice(1, m2);\n  let xs11 = xs2.slice(1, m2);\n  let xs12 = xs2.slice(1, m2);\n  let xs13 = xs2.slice(1, m2);\n  let xs14 = xs2.slice(1, m2);\n  let xs15 = xs2.slice(1, m2);\n  let xs16 = xs2.slice(1, m2);\n  let xs17 = xs2.slice(1, m2);\n  let xs18 = xs2.slice(1, m2);\n  let xs19 = xs2.slice(1, m2);\n  let xs20 = xs2.slice(1, m2);\n  let xs21 = xs2.slice(1, m2);\n  let xs22 = xs2.slice(1, m2);\n  let xs23 = xs2.slice(1, m2);\n  let xs24 = xs2.slice(1, m2);\n  let xs25 = xs2.slice(1, m2);\n  let xs26 = xs2.slice(1, m2);\n  let xs27 = xs2.slice(1, m2);\n  let xs28 = xs2.slice(1, m2);\n  let xs29 = xs2.slice(1, m2);\n  let xs30 = xs2.slice(1, m2);\n  let xs31 = xs2.slice(1, m2);\n  let xs32 = xs2.slice(1, m2);\n  let xs33 = xs2.slice(1, m2);\n  let xs34 = xs2.slice(1, m2);\n  let xs35 = xs2.slice(1, m2);\n  let xs36 = xs2.slice(1, m2);\n  let xs37 = xs2.slice(1, m2);\n  let xs38 = xs2.slice(1, m2);\n  let xs39 = xs2.slice(1, m2);\n  let xs40 = xs2.slice(1, m2);\n  let xs41 = xs2.slice(1, m2);\n  let xs42 = xs2.slice(1, m2);\n  let xs43 = xs2.slice(1, m2);\n  let xs44 = xs2.slice(1, m2);\n  let xs45 = xs2.slice(1, m2);\n  let xs46 = xs2.slice(1, m2);\n  let xs47 = xs2.slice(1, m2);\n  let xs48 = xs2.slice(1, m2);\n  let xs49 = xs2.slice(1, m2);\n  let xs50 = xs2.slice(1, m2);\n  let xs51 = xs2.slice(1, m2);\n  let xs52 = xs2.slice(1, m2);\n  let xs53 = xs2.slice(1, m2);\n  let xs54 = xs2.slice(1, m2);\n  let xs55 = xs2.slice(1, m2);\n  let xs56 = xs2.slice(1, m2);\n  let xs57 = xs2.slice(1, m2);\n  let xs58 = xs2.slice(1, m2);\n  let"}
{"task_id": "JavaScript/33", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let list = [];\n  let length = l.length;\n  for (let i = 0; i < length; i++) {\n    if (l[i] % 3 === 0) {\n      list.push(l[i]);\n    }\n  }\n  return list;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return l.filter(e => l.indexOf(e) === -1)\n}\n\n/*RetuRn a unique list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  return l.filter(e => l.indexOf(e) === -1 && unique(l).indexOf(e) === -1)\n}\n\nconst unique3 = (l) => {\n  return l.filter(e => l.indexOf(e) === -1 && unique2(l).indexOf(e) === -1)\n}\n\nmodule.exports = {\n  unique,\n  unique2,\n  unique3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l)\n}\n\n/*\n  >>> add(1, 2)\n  3\n  >>> add(1, 2)\n  3\n  >>> add(1, 2)\n  3\n  */\nconst add = (x, y) => {\n  return x + y\n}\n\n/*\n  >>> subtract(5, 2)\n  3\n  >>> subtract(5, 2)\n  3\n  >>> subtract(5, 2)\n  3\n  */\nconst subtract = (x, y) => {\n  return x - y\n}\n\n/*\n  >>> multiply(4, 2)\n  8\n  >>> multiply(4, 2)\n  8\n  >>> multiply(4, 2)\n  8\n  */\nconst multiply = (x, y) => {\n  return x * y\n}\n\n/*\n  >>> divide(12, 3)\n  4\n  >>> divide(12, 3)\n  4\n  >>> divide(12, 3)\n  4\n  */\nconst divide = (x, y) => {\n  return x / y\n}\n\n/*\n  >>> add([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> add([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> add([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> add([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> add([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  */\nconst addList = (l) => {\n  return l.concat(l)\n}\n\n/*\n  >>> subtract([5, 2, 3, 4])\n  [3, 4]\n  >>> subtract([5, 2, 3, 4])\n  [3, 4]\n  >>> subtract([5, 2, 3, 4])\n  [3, 4]\n  >>> subtract([5, 2, 3, 4])\n  [3, 4]\n  */\nconst subtractList = (l) => {\n  return l.filter(x => x!= 0)\n}\n\n/*\n  >>> multiply([4, 2, 3, 4])\n  [8, 6, 4, 2]\n  >>> multiply([4, 2, 3, 4])\n  [8, 6, 4, 2]\n  >>> multiply([4, 2, 3, 4])\n  [8, 6, 4, 2]\n  >>> multiply([4, 2, 3, 4])\n  [8, 6, 4, 2]\n  */\nconst multiplyList = (l) => {\n  return l.map(x => x * 2)\n}\n\n/*\n  >>> divide([12, 3, 4, 6])\n  [4, 2, 2]\n  >>> divide([12, 3, 4, 6])\n  [4, 2, 2]\n  >>> divide([12, 3, 4, 6])\n  [4, 2, 2]\n  >>> divide([12, 3, 4, 6])\n  [4, 2, 2]\n  */\nconst divideList = (l) => {\n  return l.map(x => x / 2)\n}\n\n/*\n  >>> multiply([4, 2, 3, 4])\n  [8, 6, 4, 2]\n  >>> multiply([4, 2, 3, 4])\n  [8, 6, 4, 2]\n  >>> multiply([4, 2, 3, 4])\n  [8, 6, 4, 2]\n  >>> multiply([4, 2, 3, 4])\n  [8, 6, 4, 2]\n  */\nconst multiply2 = (l) => {\n  return l.map(x => x * x)\n}\n\n/*\n  >>> divide([12, 3, 4, 6])\n  [4, 2, 2]\n  >>> divide([12, 3, 4, 6])\n  [4, 2, 2]\n  >>> divide([12, 3, 4, 6])\n  [4, 2, 2]\n  >>> divide([12, 3, 4, 6])\n  [4, 2, 2]\n  */\nconst divide2 = (l) => {\n  return l.map(x => x / x)\n}\n\n/*\n  >>> multiply([4, 2, 3, 4])\n  [8, 6, 4, 2]\n  >>> multiply([4, 2, 3, 4])\n  [8, 6, 4, 2]\n  >>> multiply([4, 2, 3, 4])\n  [8, 6, 4, 2]\n  >>> multiply([4, 2, 3, 4])\n  [8, 6, 4, 2]\n  */\nconst multiply3 = (l) => {\n  return l.map(x => x * x * x)\n}\n\n/*\n  >>> divide([12, 3, 4, 6])\n  [4, 2, 2]\n  >>> divide([12, 3, 4, 6])\n  [4, 2, 2]\n  >>> divide([12, 3, 4, 6])\n  [4, 2, 2]\n  >>> divide([12, 3, 4, 6])\n  [4, 2, 2]\n  */\nconst divide3 = (l) => {\n  return l.map(x => x / x / x)\n}\n\nmodule.exports = {\n  maxElement,\n  add,\n  subtract,\n  multiply,\n  divide,\n  addList,\n  subtractList,\n  multiplyList,\n  divideList,\n  multiply2,\n  divide2,\n  multiply3,\n  divide3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const results = [];\n  for (let i = 1; i <= n; i++) {\n    const r = fizzBuzz(i);\n    results.push(r);\n  }\n  return results;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let a = l.slice();\n  for (let i = 0; i < a.length / 2; i++) {\n    let t = a[i];\n    let r = a[i + a.length / 2];\n    if (t > r) {\n      let t1 = t;\n      let t2 = r;\n      t = t1;\n      r = t2;\n    }\n    let t1 = a[i + 1];\n    let t2 = a[i + a.length / 2 + 1];\n    if (t1 > t2) {\n      let t3 = t1;\n      let t4 = t2;\n      t1 = t3;\n      t2 = t4;\n    }\n    let tmp = a[i];\n    a[i] = t1;\n    a[i + a.length / 2] = t2;\n    a[i + 1] = tmp;\n  }\n  return a;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n\nexport default sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  const groups = s.split('');\n  const groups2 = [];\n  for (const group of groups) {\n    groups2.push(group.slice(1, group.length));\n    IF (group.length == 3)\n      groups2.push(group[0] + group.slice(1, group.length));\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n === 1) return 2;\n  if (n === 2) return 3;\n  let fib = [0, 1];\n  for (let i = 3; i < n + 1; i++) {\n    let t = fib[i - 2];\n    fib.push(t + fib[i - 3]);\n  }\n  return fib[n - 1];\n};\n\nconst isPrime = (n) => {\n  let i = 1;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n};\n\nexport { primeFib, isPrime };\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  if(l.length <= 0)\n    return false;\n  let result = false;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0)\n      return false;\n    if (l[i] < 0) {\n      return false;\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  if (sum === 0) {\n    return true;\n  }\n  return false;\n}\n\nexport default triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n  if (n.x < 0 || n.y < 0 || n.x > screen.width || n.y > screen.height) {\n    return false\n  }\n  for (const car of this.cars) {\n    const col = carRaceCollision(car)\n    if (col) {\n      return col\n    }\n  }\n  return false\n}\n\ncOnst carRaceCollision = (n) => {\n  const nBoundingBox = this.boundingBox(n)\n  for (const car of this.cars) {\n    const bb = this.boundingBox(car)\n    if (bb.x < nBoundingBox.x || bb.y < nBoundingBox.y || bb.x > nBoundingBox.x + nBoundingBox.width || bb.y > nBoundingBox.y + nBoundingBox.height) {\n      return false\n    }\n  }\n  return true\n}\n\ncOnst carRaceCollision = (n) => {\n  const nBoundingBox = this.boundingBox(n)\n  for (const car of this.cars) {\n    const bb = this.boundingBox(car)\n    if (bb.x < nBoundingBox.x || bb.y < nBoundingBox.y || bb.x > nBoundingBox.x + nBoundingBox.width || bb.y > nBoundingBox.y + nBoundingBox.height) {\n      return true\n    }\n  }\n  return false\n}\n\ncOnst carRaceCollision = (n) => {\n  const nBoundingBox = this.boundingBox(n)\n  for (const car of this.cars) {\n    const bb = this.boundingBox(car)\n    if (bb.x < nBoundingBox.x || bb.y < nBoundingBox.y || bb.x > nBoundingBox.x + nBoundingBox.width || bb.y > nBoundingBox.y + nBoundingBox.height) {\n      return true\n    }\n  }\n  return false\n}\n\ncOnst carRaceCollision = (n) => {\n  const nBoundingBox = this.boundingBox(n)\n  for (const car of this.cars) {\n    const bb = this.boundingBox(car)\n    if (bb.x < nBoundingBox.x || bb.y < nBoundingBox.y || bb.x > nBoundingBox.x + nBoundingBox.width || bb.y > nBoundingBox.y + nBoundingBox.height) {\n      return true\n    }\n  }\n  return false\n}\n\ncOnst carRaceCollision = (n) => {\n  const nBoundingBox = this.boundingBox(n)\n  for (const car of this.cars) {\n    const bb = this.boundingBox(car)\n    if (bb.x < nBoundingBox.x || bb.y < nBoundingBox.y || bb.x > nBoundingBox.x + nBoundingBox.width || bb.y > nBoundingBox.y + nBoundingBox.height) {\n      return true\n    }\n  }\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const r = l.slice();\n  r.unshift(0);\n  r.push(1);\n  return r;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const r = l.slice();\n  r.unshift(0);\n  r.push(1);\n  return r;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const r = l.slice();\n  r.unshift(0);\n  r.push(1);\n  return r;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const r = l.slice();\n  r.unshift(0);\n  r.push(1);\n  return r;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const r = l.slice();\n  r.unshift(0);\n  r.push(1);\n  return r;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const r = l.slice();\n  r.unshift(0);\n  r.push(1);\n  return r;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const r = l.slice();\n  r.unshift(0);\n  r.push(1);\n  return r;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const r = l.slice();\n  r.unshift(0);\n  r.push(1);\n  return r;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const r = l.slice();\n  r.unshift(0);\n  r.push(1);\n  return r;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const r = l.slice();\n  r.unshift(0);\n  r.push(1);\n  return r;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const r = l.slice();\n  r.unshift(0);\n  r.push(1);\n  return r;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const r = l.slice();\n  r.unshift(0);\n  r.push(1);\n  return r;\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const r = l.slice();\n  r.unshift(0);\n  "}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    let r = true;\n    l.forEach((v) => {\n        if (v < 0) {\n            r = false;\n        }\n    })\n    return r;\n}\n\n//Test\n//print(pairsSumToZero([1, 3, 5, 0]));\n//print(pairsSumToZero([1, 3, -2, 1]));\n//print(pairsSumToZero([1, 2, 3, 7]));\n//print(pairsSumToZero([2, 4, -5, 3, 5, 7]));\n//print(pairsSumToZero([1]));\n\n//End Test<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let cNdBase = base,\n    str = '',\n    num = x;\n  while (num > 0) {\n    str = num % cNdBase + str;\n    num = Math.floor(num / cNdBase);\n  }\n  return str;\n};\n\n/*\n  Convert a number to a string in base 8.\n  >>> convertToBase8(42)\n  '101010'\n  >>> convertToBase8(13)\n  '7'\n  >>> convertToBase8(42, 8)\n  '101010'\n  >>> convertToBase8(13, 8)\n  '7'\n  >>> convertToBase8(42, 2)\n  '10'\n  */\nconst convertToBase8 = (x, base = 10) => {\n  return changeBase(x, base).toString(8);\n};\n\n/*\n  Convert a number to a string in base 10.\n  >>> convertToBase10(42)\n  '42'\n  >>> convertToBase10(13)\n  '13'\n  >>> convertToBase10(42, 8)\n  '1098'\n  >>> convertToBase10(13, 8)\n  '713'\n  >>> convertToBase10(42, 2)\n  '42'\n  */\nconst convertToBase10 = (x, base = 10) => {\n  return changeBase(x, base).toString(10);\n};\n\n/*\n  Convert a number to a string in base 16.\n  >>> convertToBase16(42)\n  '42'\n  >>> convertToBase16(13)\n  '13'\n  >>> convertToBase16(42, 8)\n  '9E'\n  >>> convertToBase16(13, 8)\n  'D'\n  >>> convertToBase16(42, 2)\n  '42'\n  */\nconst convertToBase16 = (x, base = 16) => {\n  return changeBase(x, base).toString(16);\n};\n\n/*\n  Convert a number to a string in base 36.\n  >>> convertToBase36(42)\n  '42'\n  >>> convertToBase36(13)\n  '13'\n  >>> convertToBase36(42, 8)\n  'AC'\n  >>> convertToBase36(13, 8)\n  'D'\n  >>> convertToBase36(42, 2)\n  '42'\n  */\nconst convertToBase36 = (x, base = 36) => {\n  return changeBase(x, base).toString(36);\n};\n\n/*\n  Convert a number to a string in base 2.\n  >>> convertToBase2(42)\n  '101010'\n  >>> convertToBase2(13)\n  '7'\n  >>> convertToBase2(42, 8)\n  '1098'\n  >>> convertToBase2(13, 8)\n  '713'\n  >>> convertToBase2(42, 2)\n  '10'\n  */\nconst convertToBase2 = (x, base = 2) => {\n  return changeBase(x, base).toString(2);\n};\n\nexport default {\n  convertToBase2,\n  convertToBase10,\n  convertToBase16,\n  convertToBase36,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * a * h) / 3;\n}\n\n/*\n  >>> print(triangleArea(3, 3))\n  6\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  The Fibonacci sequence is defined by the recurrence relation:\n  f(n) = f(n-1) + f(n-2), where f(1) = 1 and f(2) = 1.\n  Hence the sequence is: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n  Write a program that prints the first ten elements of the Fibonacci sequence.\n  Do NOT use dynamic arrays.\n  >>> fib(5)\n  3\n  >>> fib(6)\n  5\n  >>> fib(7)\n  8\n  >>> fib(8)\n  13\n  >>> fib(9)\n  21\n  >>> fib(10)\n  34\n  >>> fib(11)\n  55\n  >>> fib(12)\n  89\n  >>> fib(13)\n  121\n  >>> fib(14)\n  156\n  >>> fib(15)\n  217\n  >>> fib(16)\n  284\n  >>> fib(17)\n  358\n  >>> fib(18)\n  461\n  >>> fib(19)\n  676\n  >>> fib(20)\n  924\n  >>> fib(21)\n  1262\n  >>> fib(22)\n  1789\n  >>> fib(23)\n  2526\n  >>> fib(24)\n  3389\n  >>> fib(25)\n  4732\n  >>> fib(26)\n  6245\n  >>> fib(27)\n  8418\n  >>> fib(28)\n  11367\n  >>> fib(29)\n  14650\n  >>> fib(30)\n  18407\n  >>> fib(31)\n  24024\n  >>> fib(32)\n  28657\n  >>> fib(33)\n  36284\n  >>> fib(34)\n  46211\n  >>> fib(35)\n  58464\n  >>> fib(36)\n  71619\n  >>> fib(37)\n  89694\n  >>> fib(38)\n  111341\n  >>> fib(39)\n  133178\n  >>> fib(40)\n  165597\n  >>> fib(41)\n  193614\n  >>> fib(42)\n  228691\n  >>> fib(43)\n  272364\n  >>> fib(44)\n  328929\n  >>> fib(45)\n  392814\n  >>> fib(46)\n  484425\n  >>> fib(47)\n  581446\n  >>> fib(48)\n  709715\n  >>> fib(49)\n  855056\n  >>> fib(50)\n  1011387\n  >>> fib(51)\n  1184402\n  >>> fib(52)\n  1407961\n  >>> fib(53)\n  1677990\n  >>> fib(54)\n  1965923\n  >>> fib(55)\n  2299884\n  >>> fib(56)\n  2658995\n  >>> fib(57)\n  3048926\n  >>> fib(58)\n  3411759\n  >>> fib(59)\n  3772298\n  >>> fib(60)\n  4111340\n  >>> fib(61)\n  4513763\n  >>> fib(62)\n  5023894\n  >>> fib(63)\n  5604615\n  >>> fib(64)\n  6195532\n  >>> fib(65)\n  7233329\n  >>> fib(66)\n  8639344\n  >>> fib(67)\n  9987493\n  >>> fib(68)\n  11312404\n  >>> fib(69)\n  12690598\n  >>> fib(70)\n  14231208\n  >>> fib(71)\n  15816999\n  >>> fib(72)\n  17900614\n  >>> fib(73)\n  19735685\n  >>> fib(74)\n  21059372\n  >>> fib(75)\n  23102687\n  >>> fib(76)\n  24732796\n  >>> fib(77)\n  26243695\n  >>> fib(78)\n  27926394\n  >>> fib(79)\n  29305598\n  >>> fib(80)\n  30881791\n  >>> fib(81)\n  33193912\n  >>> fib(82)\n  34589211\n  >>> fib(83)\n  36687513\n  >>> fib(84)\n  38372920\n  >>> fib(85)\n  40129651\n  >>> fib(86)\n  42643552\n  >>> fib(87)\n  44790749\n  >>> fib(88)\n  46570186\n  >>> fib(89)\n  47850939\n  >>> fib(90)\n  49088098\n  >>> fib(91)\n  50872035\n  >>> fib(92)\n  52378484\n  >>> fib(93)\n  54730207\n  >>> fib(94)\n  56144494\n  >>> fib(95)\n  58191299\n  >>> fib(96)\n  59292636\n  >>> fib(97)\n  60438795\n  >>> fib(98)\n  61672904\n  >>> fib(99)\n  63027079\n  >>> fib(100)\n  63988168\n  >>> fib(101)\n  64"}
{"task_id": "JavaScript/47", "prompt": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n    let sort = []\n    for (let elem of l) {\n        sort.push(elem)\n    }\n    sort.sort()\n    return (sort[(sort.length - 1) / 2])\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @description\n  * Return the average of x and y.\n  * @example\n  * sum([3, 1, 2, 4, 5])\n  * //= 7.0\n  */\nconst sum = (x, y) => {\n    return (x + y) / 2\n}\n\n/**\n  * @param {number} n\n  * @returns {number}\n  * @description\n  * Return the nth prime number.\n  * @example\n  * getPrime(5)\n  * //= 13\n  */\nconst getPrime = (n) => {\n    let i = 2\n    while (i < n) {\n        if (n % i === 0) {\n            return i\n        }\n        i++\n    }\n    return n\n}\n\n/**\n  * @param {number} n\n  * @returns {number}\n  * @description\n  * Return the nth fibonacci number.\n  * @example\n  * fib(5)\n  * //= 8\n  */\nconst fib = (n) => {\n    if (n === 1) {\n        return 1\n    } else if (n === 2) {\n        return 2\n    } else {\n        return fib(n - 1) + fib(n - 2)\n    }\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @description\n  * Return the Euclidean distance between x and y.\n  * @example\n  * distance([3, 1, 2, 4, 5], [6, 4, 7, 8, 9])\n  * //= 2.25\n  */\nconst distance = (x, y) => {\n    let xLength = Math.sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2])\n    let yLength = Math.sqrt(y[0] * y[0] + y[1] * y[1] + y[2] * y[2])\n    return (xLength + yLength) / 2\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  * @description\n  * Return the Chebyshev distance between x and y.\n  * @example\n  * distance([3, 1, 2, 4, 5], [6, 4, 7, 8, 9])\n  * //= 2.25\n  */\nconst chebyshev = (x, y) => {\n    let max = Math.max(x[0], y[0])\n    let min = Math.min(x[0], y[0])\n    let distance = max - min\n    return distance\n}\n\nmodule.exports = {\n    sum,\n    median,\n    getPrime,\n    fib,\n    distance,\n    chebyshev\n}<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (!text) return false;\n  const textLength = text.length;\n  if (textLength <= 1) return true;\n\n  const reverseText = text.split('').reverse().join('');\n  return text === reverseText;\n};\n\n/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isNotPalindrome = (text) => {\n  if (!text) return false;\n  const textLength = text.length;\n  if (textLength <= 1) return false;\n\n  const reverseText = text.split('').reverse().join('');\n  return text!== reverseText;\n};\n\n/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isValidPalindrome = (text) => {\n  if (!text) return false;\n  const textLength = text.length;\n  if (textLength <= 1) return false;\n\n  const reverseText = text.split('').reverse().join('');\n  return isPalindrome(reverseText);\n};\n\n/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isValidNotPalindrome = (text) => {\n  if (!text) return false;\n  const textLength = text.length;\n  if (textLength <= 1) return false;\n\n  const reverseText = text.split('').reverse().join('');\n  return isNotPalindrome(reverseText);\n};\n\n/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isValidPalindromeOrNotPalindrome = (text) => {\n  if (!text) return false;\n  const textLength = text.length;\n  if (textLength <= 1) return false;\n\n  const reverseText = text.split('').reverse().join('');\n  return isValidPalindrome(reverseText) || isValidNotPalindrome(reverseText);\n};\n\nmodule.exports = {\n  isPalindrome,\n  isNotPalindrome,\n  isValidPalindrome,\n  isValidNotPalindrome,\n  isValidPalindromeOrNotPalindrome,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    return n % p;\n}\n\n/**\n  >>> modp(10, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modq = (n, q) => {\n    return n % q;\n}\n\n/**\n  >>> modq(10, 5)\n  3\n  >>> modq(1101, 101)\n  2\n  >>> modq(0, 101)\n  1\n  >>> modq(3, 11)\n  8\n  >>> modq(100, 101)\n  1\n  */\nconst modf = (n, p) => {\n    return modp(n, p) + modq(n, p) * p;\n}\n\nconst mod = (n, p, q) => modf(n, p) % modq(n, q);\n\n/**\n  >>> mod(10, 5, 11)\n  8\n  >>> mod(1101, 101, 11)\n  1\n  >>> mod(0, 101, 11)\n  2\n  >>> mod(3, 11, 11)\n  8\n  >>> mod(100, 101, 11)\n  1\n  */\n\nconst p = (n, p, q) => mod(n, p, q);\n\n/**\n  >>> p(10, 5, 11)\n  8\n  >>> p(1101, 101, 11)\n  1\n  >>> p(0, 101, 11)\n  2\n  >>> p(3, 11, 11)\n  8\n  >>> p(100, 101, 11)\n  1\n  */\nconst q = (n, p, q) => mod(n, q, p);\n\n/**\n  >>> q(10, 5, 11)\n  8\n  >>> q(1101, 101, 11)\n  1\n  >>> q(0, 101, 11)\n  2\n  >>> q(3, 11, 11)\n  8\n  >>> q(100, 101, 11)\n  1\n  */\nconst modpow = (base, exp, mod) => {\n    let b = base;\n    for (let i = 0; i < exp; i++) {\n        b = modpow(b, 2, mod);\n    }\n    return b;\n}\n\nconst pow = (base, exp) => modpow(base, exp, mod);\n\n/**\n  >>> pow(10, 2)\n  100\n  >>> pow(1101, 11)\n  9\n  >>> pow(0, 101)\n  1\n  >>> pow(3, 11)\n  8\n  >>> pow(100, 101)\n  1\n  */\nconst pow = (base, exp) => {\n    let b = base;\n    for (let i = 0; i < exp; i++) {\n        b = modpow(b, 2, mod);\n    }\n    return b;\n}\n\nmodule.exports = {\n    mod,\n    pow\n}<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n  let str = s.split(\"\").map(i => i.charAt(0)).join(\"\");\n  return str;\n}\n\n/*\n  take a string, and a number of shifts to take it through.\n  returns the result.\n  */\nconst encodeShift = (s) => {\n  let str = s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n  return str;\n}\n\n/*\n  takes a string, and a number of shifts to take it through.\n  returns the result.\n  */\nconst decodeShift = (s) => {\n  let str = s.split(\"\").map(i => i.charAt(0)).join(\"\");\n  return str;\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst encodeShift = (s) => {\n  let str = s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n  return str;\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst decodeShift = (s) => {\n  let str = s.split(\"\").map(i => i.charAt(0)).join(\"\");\n  return str;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  isVowel returns a bool if the string passed to it contains a vowel.\n  >>> isVowel('')\n  False\n  >>> isVowel('a')\n  True\n  >>> isVowel('aae')\n  True\n  >>> isVowel('aaa')\n  False\n  */\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\n/*\n  isVowel returns a bool if the string passed to it contains a vowel.\n  >>> isVowel('')\n  False\n  >>> isVowel('a')\n  True\n  >>> isVowel('aae')\n  True\n  >>> isVowel('aaa')\n  False\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst isVowel = (text) => {\n  return /[aeiou]/i.test(text);\n};\n\nconst removeVowels = (text) => {\n  return text.replace("}
{"task_id": "JavaScript/52", "prompt": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length\n  const tlen = t.length\n  if (tlen === 0) return true\n  if (len === 0) return false\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < len) {\n    if (l[i] < t[j]) {\n      i++\n    } else {\n      if (l[i] === t[j]) {\n        k++\n        if (k === tlen) return true\n        j++\n      } else {\n        return false\n      }\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y;\n}\n\n/*\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst multiply = (x, y) => {\n  return x * y;\n}\n\n/*\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  return x / y;\n}\n\n/*\n  >>> divide(2, 3)\n  0.5\n  >>> divide(5, 7)\n  2.25\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n}\n\n/*\n  >>> squareRoot(5)\n  2.0\n  */\nconst cubeRoot = (x) => {\n  return Math.cbrt(x);\n}\n\n/*\n  >>> cubeRoot(5)\n  2.0\n  */\nconst exponent = (x, y) => {\n  return Math.pow(x, y);\n}\n\n/*\n  >>> exponent(2, 3)\n  8\n  >>> exponent(5, 7)\n  125\n  */\nconst absoluteValue = (x) => {\n  return Math.abs(x);\n}\n\n/*\n  >>> absoluteValue(5)\n  5\n  */\nconst negative = (x) => {\n  return -x;\n}\n\n/*\n  >>> negative(5)\n  -5\n  */\nconst negativeOne = () => {\n  return -1;\n}\n\n/*\n  >>> negativeOne()\n  -1\n  */\n\nconst round = (x) => {\n  return Math.round(x);\n}\n\n/*\n  >>> round(5.4)\n  6\n  */\n\nconst isEven = (x) => {\n  return x % 2 === 0;\n}\n\n/*\n  >>> isEven(3)\n  true\n  >>> isEven(4)\n  false\n  */\n\nconst isOdd = (x) => {\n  return x % 2 === 1;\n}\n\n/*\n  >>> isOdd(3)\n  false\n  >>> isOdd(4)\n  true\n  */\n\nconst isPositive = (x) => {\n  return x > 0;\n}\n\n/*\n  >>> isPositive(3)\n  true\n  >>> isPositive(0)\n  false\n  */\n\nconst isNegative = (x) => {\n  return x < 0;\n}\n\n/*\n  >>> isNegative(3)\n  false\n  >>> isNegative(0)\n  true\n  */\n\nconst isZero = (x) => {\n  return x === 0;\n}\n\nconst isNegativeZero = (x) => {\n  return x === 0 && isNegative(x);\n}\n\n/*\n  >>> isNegativeZero(3)\n  false\n  >>> isNegativeZero(0)\n  true\n  */\n\nconst isPositiveZero = (x) => {\n  return x === 0 && isPositive(x);\n}\n\nconst isNaN = (x) => {\n  return typeof x === 'number' && isNaN(x);\n}\n\n/*\n  >>> isNaN(NaN)\n  true\n  >>> isNaN(1)\n  false\n  */\n\nconst isInfinite = (x) => {\n  return typeof x === 'number' && isInfinite(x);\n}\n\nconst isNegativeInfinite = (x) => {\n  return typeof x === 'number' && isNegativeInfinite(x);\n}\n\nconst isPositiveInfinite = (x) => {\n  return typeof x === 'number' && isPositiveInfinite(x);\n}\n\n/*\n  >>> isNegativeInfinite(3)\n  false\n  >>> isPositiveInfinite(3)\n  true\n  */\n\nconst isFinite = (x) => {\n  return typeof x === 'number' && isFinite(x);\n}\n\nconst modulo = (x, y) => {\n  return x % y;\n}\n\n/*\n  >>> modulo(5, 3)\n  2\n  >>> modulo(3, 5)\n  2\n  >>> modulo(5, 5)\n  0\n  >>> modulo(3, 3)\n  0\n  >>> modulo(4, 3)\n  1\n  >>> modulo(4, 4)\n  0\n  */\n\nconst factorial = (x) => {\n  return x <= 1? 1 : x * factorial(x - 1);\n}\n\n/*\n  >>> factorial(3)\n  6\n  >>> factorial(5)\n  120\n  */\n\nconst binomialCoefficient = (x, y) => {\n  return factorial(x) / (factorial(x - y) * factorial(y));\n}\n\n/*\n  >>> binomialCoefficient(3, 2)\n  1\n  >>> binomialCoefficient(5, 2)\n  5\n  >>> binomialCoefficient(3, 3)\n  3\n  >>> binomialCoefficient(5, 3)\n  10\n  >>> binomialCoefficient(5, 4)\n  15\n  >>> binomialCoefficient(5, 5)\n  10\n  >>> binomialCoefficient(3, 4)\n  3\n  >>> binomialCoefficient(3, 5)\n  5\n  >>> binomialCoefficient(4, 3)\n  4\n  >>> binomialCoefficient(4, 4)\n  1\n  >>> binomialCoefficient(4, 5)\n  1\n  >>> binomialCoefficient(4, 6)\n  1\n  >>> binomialCoefficient(3, 6)\n  3\n  >>> binomialCoefficient(3, 7)\n  5\n  >>> binomialCoefficient(3, 8)\n  7\n  >>> binomialCoefficient(4, 7)\n  3\n  >>> binomialCoefficient"}
{"task_id": "JavaScript/54", "prompt": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let a = s0.split('')\n  let b = s1.split('')\n  let aLen = a.length\n  let bLen = b.length\n  if (aLen!= bLen) {\n    return false\n  }\n  for (let i = 0; i < aLen; i++) {\n    if (a[i]!= b[i]) {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\n/*\n  Return a list of all the numbers that can be formed as the sum of\n  the first n positive integers.\n  >>> sum_of_first_n_numbers(2)\n  [3, 7, 15, 22]\n  >>> sum_of_first_n_numbers(3)\n  [5, 11, 17, 25]\n  >>> sum_of_first_n_numbers(4)\n  [7, 13, 19, 27]\n  >>> sum_of_first_n_numbers(5)\n  [9, 15, 21, 29]\n  >>> sum_of_first_n_numbers(6)\n  [11, 17, 23, 31]\n  >>> sum_of_first_n_numbers(7)\n  [13, 19, 25, 33]\n  >>> sum_of_first_n_numbers(8)\n  [15, 21, 27, 35]\n  >>> sum_of_first_n_numbers(9)\n  [17, 23, 29, 37]\n  >>> sum_of_first_n_numbers(10)\n  [19, 25, 31, 39]\n  >>> sum_of_first_n_numbers(11)\n  [21, 27, 33, 41]\n  >>> sum_of_first_n_numbers(12)\n  [23, 29, 35, 43]\n  >>> sum_of_first_n_numbers(13)\n  [25, 31, 37, 45]\n  >>> sum_of_first_n_numbers(14)\n  [27, 33, 39, 47]\n  >>> sum_of_first_n_numbers(15)\n  [29, 35, 41, 49]\n  >>> sum_of_first_n_numbers(16)\n  [31, 37, 43, 51]\n  >>> sum_of_first_n_numbers(17)\n  [33, 39, 45, 53]\n  >>> sum_of_first_n_numbers(18)\n  [35, 41, 47, 55]\n  >>> sum_of_first_n_numbers(19)\n  [37, 43, 49, 57]\n  >>> sum_of_first_n_numbers(20)\n  [39, 45, 51, 59]\n  >>> sum_of_first_n_numbers(21)\n  [41, 47, 53, 61]\n  >>> sum_of_first_n_numbers(22)\n  [43, 49, 55, 63]\n  >>> sum_of_first_n_numbers(23)\n  [45, 51, 57, 65]\n  >>> sum_of_first_n_numbers(24)\n  [47, 53, 59, 67]\n  >>> sum_of_first_n_numbers(25)\n  [49, 55, 61, 69]\n  >>> sum_of_first_n_numbers(26)\n  [51, 57, 63, 71]\n  >>> sum_of_first_n_numbers(27)\n  [53, 59, 65, 73]\n  >>> sum_of_first_n_numbers(28)\n  [55, 61, 67, 75]\n  >>> sum_of_first_n_numbers(29)\n  [57, 63, 69, 77]\n  >>> sum_of_first_n_numbers(30)\n  [59, 65, 71, 79]\n  >>> sum_of_first_n_numbers(31)\n  [61, 67, 73, 81]\n  >>> sum_of_first_n_numbers(32)\n  [63, 69, 75, 83]\n  >>> sum_of_first_n_numbers(33)\n  [65, 71, 77, 85]\n  >>> sum_of_first_n_numbers(34)\n  [67, 73, 79, 87]\n  >>> sum_of_first_n_numbers(35)\n  [69, 75, 81, 89]\n  >>> sum_of_first_n_numbers(36)\n  [71, 77, 83, 91]\n  >>> sum_of_first_n_numbers(37)\n  [73, 79, 85, 93]\n  >>> sum_of_first_n_numbers(38)\n  [75, 81, 87, 95]\n  >>> sum_of_first_n_numbers(39)\n  [77, 83, 89, 97]\n  >>> sum_of_first_n_numbers(40)\n  [79, 85, 91, 99]\n  >>> sum_of_first_n_numbers(41)\n  [81, 87, 93, 101]\n  >>> sum_of_first_n_numbers(42)\n  [83, 89, 95, 103]\n  >>> sum_of_first_n_numbers(43)\n  [85, 91, 97, 105]\n  >>> sum_of_first_n_numbers(44)\n  [87, 93, 99, 107]\n  >>> sum_of_first_n_numbers(45)\n  [89, 95, 101, 109]\n  >>> sum_of_first_n_numbers(46)\n  [91, 97, 103, 111]\n  >>> sum_of_first_n_numbers(47)\n  [93, 99, 105, 113]\n  >>> sum_of_first_n_numbers(48)\n  [95, 101, 107, 115]\n  >>> sum_of_first_n_numbers(49)\n  [97, 103, 109, 117]\n  >>> sum_of_first_n_numbers(50)\n  [99, 105, 111, 119]\n  >>> sum_of_first_n_numbers(51)\n  [101, 107, 113, 121]\n  >>> sum_of_first_n_numbers(52)\n  [103, 109, 115, 123]\n  >>> sum_of_first_n_numbers(53)\n  [105"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let result = true;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      if (i === 0 || brackets[i - 1]!== \">\") {\n        result = false;\n      }\n    }\n    if (brackets[i] === \">\") {\n      if (i === brackets.length - 1 || brackets[i + 1]!== \"<\") {\n        result = false;\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 1\n  while (l[i] < l[i - 1]) {\n    i++\n  }\n  return i === l.length\n}\n\n// console.log(monotonic([1, 2, 4, 20]))\n// console.log(monotonic([1, 20, 4, 10]))\n// console.log(monotonic([4, 1, 0, -10]))\n\n// console.log(monotonic([2, 1, 3, 5, 4, 7, 1, 3, 3, 1, 5, 7, 4, 6, 2, 4, 3, 7, 8, 7, 8, 4, 6, 8, 8, 5, 4, 3, 3, 5, 3, 7, 8, 3, 4, 3, 3, 4, 6, 6, 8, 5, 6, 4, 8, 8, 4, 6, 8, 8, 3, 4, 3, 3, 5, 3, 7, 8, 3, 4, 3, 3, 4, 6, 6, 8, 5, 6, 4, 8, 8, 4, 6, 8, 8, 3, 4, 3, 3, 5, 3, 7, 8, 3, 4, 3, 3, 4, 6, 6, 8, 5, 6, 4, 8, 8, 4, 6, 8, 8, 3, 4, 3, 3, 5, 3, 7, 8, 3, 4, 3, 3, 4, 6, 6, 8, 5, 6, 4, 8, 8, 4, 6, 8, 8, 3, 4, 3, 3, 5, 3, 7, 8, 3, 4, 3, 3, 4, 6, 6, 8, 5, 6, 4, 8, 8, 4, 6, 8, 8, 3, 4, 3, 3, 5, 3, 7, 8, 3, 4, 3, 3, 4, 6, 6, 8, 5, 6, 4, 8, 8, 4, 6, 8, 8, 3, 4, 3, 3, 5, 3, 7, 8, 3, 4, 3, 3, 4, 6, 6, 8, 5, 6, 4, 8, 8, 4, 6, 8, 8, 3, 4, 3, 3, 5, 3, 7, 8, 3, 4, 3, 3, 4, 6, 6, 8, 5, 6, 4, 8, 8, 4, 6, 8, 8, 3, 4, 3, 3, 5, 3, 7, 8, 3, 4, 3, 3, 4, 6, 6, 8, 5, 6, 4, 8, 8, 4, 6, 8, 8, 3, 4, 3, 3, 5, 3, 7, 8, 3, 4, 3, 3, 4, 6, 6, 8, 5, 6, 4, 8, 8, 4, 6, 8, 8]))\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n\n  if (l1Len === 0 || l2Len === 0) {\n    return [];\n  }\n\n  const map = new Map();\n\n  for (let i = 0; i < l1Len; i++) {\n    const item = l1[i];\n    if (!map.has(item)) {\n      map.set(item, 1);\n    } else {\n      map.set(item, map.get(item) + 1);\n    }\n  }\n\n  const l2Set = new Set();\n\n  for (let i = 0; i < l2Len; i++) {\n    const item = l2[i];\n    if (map.has(item)) {\n      l2Set.add(item);\n    }\n  }\n\n  const result = [];\n  for (const item of l2Set) {\n    if (map.get(item) === 1) {\n      result.push(item);\n    }\n  }\n\n  return result;\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const factors = [];\n  const prime = (n) => n > 1 && n % 2 === 0;\n  let largestPrime = 1;\n  while (n > 1) {\n    let primeFactor = n;\n    while (primeFactor <= largestPrime) {\n      if (prime(primeFactor)) {\n        factors.push(primeFactor);\n        n = n / primeFactor;\n        break;\n      }\n      primeFactor = largestPrime + largestPrime;\n    }\n    largestPrime = largestPrime + largestPrime;\n  }\n  return factors.sort((a, b) => a - b)[0];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n    const result = n;\n    for (let i = 1; i <= n; i++) {\n        result += i;\n    }\n    return result;\n};\n\nexport {sumToN};\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const opening = brackets[0]\n  const closing = brackets[brackets.length - 1]\n  const openingLength = opening.length\n  const closingLength = closing.length\n\n  if (openingLength === 1 && closingLength === 1) {\n    return false\n  }\n\n  let openingIndex = 0\n  let closingIndex = brackets.length - 1\n  let bracketLength = openingLength + closingLength\n  let openingStart = brackets.indexOf(opening)\n  let openingEnd = openingStart + openingLength\n  let openingBracket = brackets.slice(openingStart, openingEnd)\n  let closingStart = brackets.lastIndexOf(closing)\n  let closingEnd = closingStart + closingLength\n  let closingBracket = brackets.slice(closingStart, closingEnd)\n\n  // loop through each character in opening bracket\n  while (openingIndex < openingLength) {\n    if (openingBracket[openingIndex]!== opening[openingIndex]) {\n      return false\n    }\n    openingIndex++\n  }\n\n  // loop through each character in closing bracket\n  while (closingIndex >= 0) {\n    if (closingBracket[closingIndex]!== closing[closingIndex]) {\n      return false\n    }\n    closingIndex--\n  }\n\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let out = []\n  const len = xs.length\n  for (let i = 0; i < len; i++) {\n    out.push(xs[i])\n  }\n  for (let i = len - 1; i > 0; i--) {\n    out.push(xs[i] * i)\n  }\n  return out\n}\n\nconst main = (xs) => {\n  const sum = xs.reduce((p, c) => p + c, 0)\n  return sum\n}\n\nconst test = () => {\n  const poly1 = [3, 1, 2]\n  const poly2 = [2, 1, 3]\n  console.log(poly1.length)\n  console.log(poly1)\n  console.log(poly2)\n  console.log(derivative(poly1))\n  console.log(derivative(poly2))\n  console.log(main(poly1))\n  console.log(main(poly2))\n  console.log(main(poly1.concat(poly2)))\n  console.log(main(poly2.concat(poly1)))\n  console.log(main(poly1.concat(poly2.concat(poly1))))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nconst fib2 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\nconst fib3 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib3(n - 1) + fib3(n - 2) + fib3(n - 3);\n};\n\nconst fib4 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconst fib5 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\nconst fib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nconst fib2 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\nconst fib3 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib3(n - 1) + fib3(n - 2) + fib3(n - 3);\n};\n\nconst fib4 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconst fib5 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\nconst fib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nconst fib2 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib2(n - 1) + fib2(n - 2);\n};\n\nconst fib3 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib3(n - 1) + fib3(n - 2) + fib3(n - 3);\n};\n\nconst fib4 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconst fib5 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\nexport default {\n  fibfib,\n  fib,\n  fib2,\n  fib3,\n  fib4,\n  fib5,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n    return s.match(/[AEIOUy]/g).length\n}\n\nexport default vowelsCount\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  x = x.toString();\n  if (shift >= x.length) {\n    return x.split('').reverse().join('');\n  }\n  const newDigits = x.split('').reverse();\n  return newDigits.join('').substr(shift);\n};\n\nmodule.exports = circularShift;\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const arr = s.toLowerCase().split(\"\");\n  return arr.reduce((acc, curr) => {\n    const num = parseInt(curr);\n    return acc + num;\n  }, 0);\n}\n\n/*Task\n  Write a function to check if a string is a palindrome.\n  Note:\n    1. The string need not be empty\n    2. The string may contain only lowercase letters\n    3. The string may contain spaces.\n    4. The string may contain punctuation\n    5. The string may contain multiple occurences of the same character\n\n  Examples:\n    isPalindrome(\"A man, a plan, a canal-Pan\") => true\n    isPalindrome(\"race a car\") => false\n*/\nconst isPalindrome = (s) => {\n  let first = s[0];\n  let last = s[s.length - 1];\n\n  for (let i = 0; i < s.length / 2; i++) {\n    if (s[i]!== s[s.length - 1 - i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/*Task\n  Write a function to check if a string is a anagram of other string\n  Note:\n    1. The string need not be empty\n    2. The string may contain only lowercase letters\n    3. The string may contain spaces.\n    4. The string may contain punctuation\n    5. The string may contain multiple occurences of the same character\n\n  Examples:\n    isAnagram(\"race a car\", \"man a plan\") => true\n    isAnagram(\"race a car\", \"man a car\") => false\n*/\nconst isAnagram = (s1, s2) => {\n  if (s1.length!== s2.length) {\n    return false;\n  }\n\n  const hash1 = {};\n  const hash2 = {};\n  for (let i = 0; i < s1.length; i++) {\n    if (hash1[s1[i]]) {\n      return false;\n    }\n\n    hash1[s1[i]] = true;\n  }\n\n  for (let i = 0; i < s2.length; i++) {\n    if (hash2[s2[i]]) {\n      return false;\n    }\n\n    hash2[s2[i]] = true;\n  }\n\n  return true;\n}\n\n/*Task\n  Write a function that takes two strings, s1 and s2 and prints out the strings\n  that are anagrams of each other in the given strings.\n\n  Examples:\n    findAnagrams(\"race a car\", \"man a plan\") => \"a car\"\n    findAnagrams(\"race a car\", \"man a car\") => \"\"\n*/\nconst findAnagrams = (s1, s2) => {\n  const hash1 = {};\n  const hash2 = {};\n  for (let i = 0; i < s1.length; i++) {\n    if (hash1[s1[i]]) {\n      return \"\";\n    }\n\n    hash1[s1[i]] = true;\n  }\n\n  for (let i = 0; i < s2.length; i++) {\n    if (hash2[s2[i]]) {\n      return s1[i];\n    }\n\n    hash2[s2[i]] = true;\n  }\n}\n\n/*Task\n  Write a function to check if a string is a \"word\"\n  Word - A string with only lowercase letters and spaces\n  Note:\n    1. The string need not be empty\n    2. The string may contain only lowercase letters\n    3. The string may contain spaces.\n    4. The string may contain punctuation\n    5. The string may contain multiple occurences of the same character\n\n  Examples:\n    isWord(\"a man a plan is a canal-Pan\") => true\n    isWord(\"a man a plan\") => true\n    isWord(\"race a car\") => false\n*/\nconst isWord = (s) => {\n  const arr = s.split(\"\");\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length > 1) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/*Task\n  Write a function that takes a string and returns the number of words in the\n  string.\n\n  Examples:\n    countWords(\"a man a plan is a canal-Pan\") => 3\n    countWords(\"a man a plan\") => 2\n*/\nconst countWords = (s) => {\n  const arr = s.split(\" \");\n  return arr.length;\n}\n\n/*Task\n  Write a function that checks if a string has all unique words.\n  Unique - A string with only lowercase letters and spaces\n\n  Examples:\n    isUnique(\"a man a plan is a canal-Pan\") => false\n    isUnique(\"a man a plan\") => true\n*/\nconst isUnique = (s) => {\n  const arr = s.split(\" \");\n  let hash = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (!hash[arr[i]]) {\n      return false;\n    }\n\n    hash[arr[i]] = true;\n  }\n\n  return true;\n}\n\n/*Task\n  Write a function that takes a string and returns the number of unique words\n  in the string.\n  Unique - A string with only lowercase letters and spaces\n\n  Examples:\n    countUnique(\"a man a plan is a canal-Pan\") => 3\n    countUnique(\"a man a plan\") => 2\n*/\nconst countUnique = (s) => {\n  const arr = s.split(\" \");\n  let hash = {};\n  for (let i = 0; i < arr.length; i++) {\n    if (!hash[arr[i]]) {\n      hash[arr[i]] = 1;\n    } else {\n      hash[arr[i"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n  // s = sThAt aRe distribuTED in a basket of Fruit ThIS bAsKEt ContaINS\n  // n = nuMbER oF tHE MaNgO fRuits in The bAsket.\n  const fruitCount = Array.from(fruitDistribution(s, n))\n  fruitCount.sort()\n  return fruitCount\n}\n\nconst fruitDistribution = (s, n) => {\n  const count = s.length\n  const arr = Array.from(fruitDistribution(s, n))\n  const countArr = Array.from(fruitDistribution(s, n))\n  let i = 0\n  while (i < count) {\n    arr[countArr.indexOf(arr[i])] = arr[i]\n    i++\n  }\n  return arr\n}\n\nconst fruitDistribution = (s, n) => {\n  const count = s.length\n  const arr = Array.from(fruitDistribution(s, n))\n  const countArr = Array.from(fruitDistribution(s, n))\n  let i = 0\n  while (i < count) {\n    arr[countArr.indexOf(arr[i])] = arr[i]\n    i++\n  }\n  return arr\n}\n\nfruitDistribution(\"5 apples aNd 6 orANGes\", 3) // \"orange\"\nfruitDistribution(\"0 aPpLEs AND 1 orANGEs\", 2) // \"apple\"\nfruitDistribution(\"2 applEs anD 3 oRANGeS\", 100) // \"apple\"\nfruitDistribution(\"100 APPLES aND 1 oRANGeS\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aND 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 oRANGEs\", 120) // \"apple\"\nfruitDistribution(\"100 APPLES aNd 1 o"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    let list = [];\n    for (let i = 0; i < arr.length; i++) {\n        let node = arr[i];\n        if (node.value % 2 === 1) {\n            list.push([node, i]);\n        }\n    }\n    list.sort((a, b) => {\n        return a[0].value - b[0].value;\n    });\n    let result = [];\n    let prev = null;\n    for (let i = 0; i < list.length; i++) {\n        let [node, index] = list[i];\n        if (node.value % 2 === 0) {\n            if (prev === null) {\n                result.push(node);\n            } else {\n                result[result.length - 1][1] = index;\n            }\n            prev = node;\n        }\n    }\n    return result;\n};\n\nconsole.log(pluck([1,2,3])); //[2, 1]\nconsole.log(pluck([4,2,3])); //[2, 1]\nconsole.log(pluck([0,0,0,0])); //[]\nconsole.log(pluck([5, 0, 3, 0, 4, 2])); //[0, 1]<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const len = lst.length;\n  const target = lst[0];\n  let min = 0;\n  let max = len - 1;\n  while (min < max) {\n    let mid = Math.floor((min + max) / 2);\n    if (lst[mid] === target) return mid;\n    if (lst[mid] > target) {\n      max = mid;\n    } else {\n      min = mid + 1;\n    }\n  }\n  if (lst[min] === target) return min;\n  return -1;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return []\n  }\n  const list = []\n  const len = lst.length\n  const result = []\n  let min = lst[0]\n  let max = lst[0]\n  let minIndex = 0\n  let maxIndex = 0\n  let currentIndex = 0\n  const current = lst[0]\n\n  while (currentIndex < len) {\n    if (lst[currentIndex] < min) {\n      min = lst[currentIndex]\n      minIndex = currentIndex\n    }\n    if (lst[currentIndex] > max) {\n      max = lst[currentIndex]\n      maxIndex = currentIndex\n    }\n    list.push(lst[currentIndex])\n    currentIndex++\n  }\n  // result.push(list[minIndex])\n  // result.push(list[maxIndex])\n  // return result\n\n  const sOrtinG = (minIndex === 0)\n   ? [max, maxIndex, max]\n    : [min, minIndex, min]\n\n  const stArT = [sOrtinG, result]\n\n  const ret = [...stArT]\n  return ret\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sideA = Math.sqrt(Math.pow(b - a, 2) + Math.pow(c - a, 2))\n  const sideB = Math.sqrt(Math.pow(c - b, 2) + Math.pow(a - b, 2))\n  const sideC = Math.sqrt(Math.pow(a - c, 2) + Math.pow(b - c, 2))\n  const area = Math.pow(sideA + sideB + sideC, 2) / 4\n  return (Math.round(area * 100) / 100).toFixed(2)\n}\n\n/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle When The Sum of Any Two sIDES is Greater\n  thAN The Third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sideA = Math.sqrt(Math.pow(b - a, 2) + Math.pow(c - a, 2))\n  const sideB = Math.sqrt(Math.pow(c - b, 2) + Math.pow(a - b, 2))\n  const sideC = Math.sqrt(Math.pow(a - c, 2) + Math.pow(b - c, 2))\n  const area = Math.pow(sideA + sideB + sideC, 2) / 2\n  return (Math.round(area * 100) / 100).toFixed(2)\n}\n\n/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle When The Sum of Any Two sIDES is GREATER\n  ThAN The Third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sideA = Math.sqrt(Math.pow(b - a, 2) + Math.pow(c - a, 2))\n  const sideB = Math.sqrt(Math.pow(c - b, 2) + Math.pow(a - b, 2))\n  const sideC = Math.sqrt(Math.pow(a - c, 2) + Math.pow(b - c, 2))\n  const area = Math.pow(sideA + sideB + sideC, 2)\n  return (Math.round(area * 100) / 100).toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const sideA = Math.sqrt(Math.pow(b - a, 2) + Math.pow(c - a, 2))\n  const sideB = Math.sqrt(Math.pow(c - b, 2) + Math.pow(a - b, 2))\n  const sideC = Math.sqrt(Math.pow(a - c, 2) + Math.pow(b - c, 2))\n  const area = Math.pow(sideA + sideB + sideC, 2)\n  return (Math.round(area * 100) / 100).toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const sideA = Math.sqrt(Math.pow(b - a, 2) + Math.pow(c - a, 2))\n  const sideB = Math.sqrt(Math.pow(c - b, 2) + Math.pow(a - b, 2))\n  const sideC = Math.sqrt(Math.pow(a - c, 2) + Math.pow(b - c, 2))\n  const area = Math.pow(sideA + sideB + sideC, 2)\n  return (Math.round(area * 100) / 100).toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const sideA = Math.sqrt(Math.pow(b - a, 2) + Math.pow(c - a, 2))\n  const sideB = Math.sqrt(Math.pow(c - b, 2) + Math.pow(a - b, 2))\n  const sideC = Math.sqrt(Math.pow(a - c, 2) + Math.pow(b - c, 2))\n  const area = Math.pow(sideA + sideB + sideC, 2)\n  return (Math.round(area * 100) / 100).toFixed(2)\n}\n\nconst triangleArea = (a, b, c) => {\n  const sideA = Math.sqrt(Math.pow(b - a, 2) + Math.pow(c - a, 2))\n  const sideB = Math.sqrt(Math.pow(c - b, 2) + Math.pow(a - b, 2))\n  const sideC = Math.sqrt(Math.pow(a - c, 2) + Math.pow(b - c, 2))\n  const area = Math.pow"}
{"task_id": "JavaScript/72", "prompt": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 1) {\n    return q[0] <= w;\n  }\n  const total = q.reduce((a, b) => a + b, 0);\n  if (total <= w) {\n    return true;\n  }\n  if (q.reduce((a, b) => a + b, 0) < w) {\n    return false;\n  }\n  return true;\n};\n\nexport {\n  willItFly\n};\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    let i = 0;\n    let j = arr.length - 1;\n    let min = arr[0];\n    let temp = 0;\n\n    while (i < j) {\n        while (arr[i] <= arr[i + 1]) {\n            i++;\n        }\n        while (arr[j] >= arr[j - 1]) {\n            j--;\n        }\n        if (arr[i] < arr[j]) {\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n    return min;\n};\n\n/*\n  For example:\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n*/\nconst smallestChangeWithRecursion = (arr) => {\n    let i = 0;\n    let j = arr.length - 1;\n    let min = arr[0];\n    let temp = 0;\n\n    while (i < j) {\n        while (arr[i] <= arr[i + 1]) {\n            i++;\n        }\n        while (arr[j] >= arr[j - 1]) {\n            j--;\n        }\n        if (arr[i] < arr[j]) {\n            temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        if (arr[i] === arr[j]) {\n            if (j === 0) {\n                j = arr.length - 1;\n            } else {\n                j--;\n            }\n        }\n    }\n    return min;\n};\n\nexport {smallestChange, smallestChangeWithRecursion};\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = []\n  let last1 = null\n  let last2 = null\n  lst1.forEach((s) => {\n    if (last1 === null || last2 === null) {\n      result.push(s)\n    } else {\n      if (last1 === s) {\n        last2 = null\n      } else if (last2 === s) {\n        last1 = null\n      } else {\n        result.push(s)\n      }\n    }\n    last1 = s\n  })\n  lst2.forEach((s) => {\n    if (last1 === null || last2 === null) {\n      result.push(s)\n    } else {\n      if (last1 === s) {\n        last2 = null\n      } else if (last2 === s) {\n        last1 = null\n      } else {\n        result.push(s)\n      }\n    }\n    last2 = s\n  })\n  return result\n}\n\n/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch2 = (lst1, lst2) => {\n  let result = []\n  let last1 = null\n  let last2 = null\n  lst2.forEach((s) => {\n    if (last1 === null || last2 === null) {\n      result.push(s)\n    } else {\n      if (last1 === s) {\n        last2 = null\n      } else if (last2 === s) {\n        last1 = null\n      } else {\n        result.push(s)\n      }\n    }\n    last1 = s\n  })\n  lst1.forEach((s) => {\n    if (last1 === null || last2 === null) {\n      result.push(s)\n    } else {\n      if (last1 === s) {\n        last2 = null\n      } else if (last2 === s) {\n        last1 = null\n      } else {\n        result.push(s)\n      }\n    }\n    last2 = s\n  })\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i = 0,\n    n = 0;\n  if (a % 2!== 0) {\n    return false;\n  }\n  for (i = 3; i * i <= a; i += 2) {\n    if (a % i === 0) {\n      n++;\n    }\n  }\n  if (n!== 2) {\n    return false;\n  }\n  return true;\n};\n\nconst sum = (n, x) => {\n  if (n === 1) {\n    return x;\n  }\n  return sum(n - 1, x + n * n);\n};\n\nconst sumOfPrimes = (n) => {\n  if (isMultiplyPrime(n)) {\n    return n;\n  } else {\n    return sumOfPrimes(n + 1);\n  }\n};\n\n/*\n  Write a funCtion that returns the sum of all primes less than or equal to n\n*/\nconst sumOfPrimesUntil = (n) => {\n  let p = 0;\n  for (p = 1; p < n; p++) {\n    if (isMultiplyPrime(p)) {\n      return sumOfPrimesUntil(p);\n    }\n  }\n  return sumOfPrimesUntil(n);\n};\n\n/*\n  Write a funCtion that returns the sum of all primes less than or equal to n\n  and returns the nth prime number.\n*/\nconst sumOfPrimesUpTo = (n) => {\n  return sumOfPrimesUntil(n) + n;\n};\n\n/*\n  Write a funCtion that returns the sum of all primes less than or equal to n\n  and returns the nth prime number.\n  */\nconst isPrime = (n) => {\n  let i = 0,\n    p = 0;\n  for (i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sumOfPrimesUpTo = (n) => {\n  let p = 0;\n  for (p = 1; p < n; p++) {\n    if (isPrime(p)) {\n      return sumOfPrimesUpTo(p);\n    }\n  }\n  return sumOfPrimesUpTo(n);\n};\n\n/*\n  Write a funCtion that returns the sum of all primes less than or equal to n\n  and returns the nth prime number.\n*/\nconst sumOfPrimesUntil = (n) => {\n  let p = 0;\n  for (p = 1; p < n; p++) {\n    if (isPrime(p)) {\n      return sumOfPrimesUntil(p);\n    }\n  }\n  return sumOfPrimesUntil(n);\n};\n\n/*\n  Write a funCtion that returns the sum of all primes less than or equal to n\n  and returns the nth prime number.\n*/\nconst isPrime = (n) => {\n  let i = 0,\n    p = 0;\n  for (i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst sumOfPrimesUpTo = (n) => {\n  let p = 0;\n  for (p = 1; p < n; p++) {\n    if (isPrime(p)) {\n      return sumOfPrimesUpTo(p);\n    }\n  }\n  return sumOfPrimesUpTo(n);\n};\n\nconst sumOfPrimesUntil = (n) => {\n  let p = 0;\n  for (p = 1; p < n; p++) {\n    if (isPrime(p)) {\n      return sumOfPrimesUntil(p);\n    }\n  }\n  return sumOfPrimesUntil(n);\n};\n\nconst sumOfPrimesUpTo = (n) => {\n  let p = 0;\n  for (p = 1; p < n; p++) {\n    if (isPrime(p)) {\n      return sumOfPrimesUpTo(p);\n    }\n  }\n  return sumOfPrimesUpTo(n);\n};\n\n/*\n  Write a funCtion that returns the sum of all primes less than or equal to n\n  and returns the nth prime number.\n*/\nconst sumOfPrimesUpTo = (n) => {\n  let p = 0;\n  for (p = 1; p < n; p++) {\n    if (isPrime(p)) {\n      return sumOfPrimesUpTo(p);\n    }\n  }\n  return sumOfPrimesUpTo(n);\n};\n\n/*\n  Write a funCtion that returns the sum of all primes less than or equal to n\n  and returns the nth prime number.\n*/\nconst sumOfPrimesUpTo = (n) => {\n  let p = 0;\n  for (p = 1; p < n; p++) {\n    if (isPrime(p)) {\n      return sumOfPrimesUpTo(p);\n    }\n  }\n  return sumOfPrimesUpTo(n);\n};\n\n/*\n  Write a funCtion that returns the sum of all primes less than or equal to n\n  and returns the nth prime number.\n*/\nconst sumOfPrimesUpTo = (n) => {\n  let p = 0;\n  for (p = 1; p < n; p++) {\n    if (isPrime(p)) {\n      return sumOfPrimesUpTo(p);\n    }\n  }\n  return sumOfPrimesUpTo(n);\n};\n\n/*\n  Write a funCtion that returns the sum of all primes less than or equal to n\n  and returns the nth prime number.\n*/\nconst sumOfPrimesUpTo = (n) => {\n  let p = 0;\n  for (p = 1; p < n; p++) {\n    if (isPrime(p)) {\n      return sumOfPrimesUpTo"}
{"task_id": "JavaScript/76", "prompt": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const isPower = x.toString().indexOf('^') > -1;\n  if (!isPower) return false;\n  const str = x.toString();\n  const num = str.substr(1, str.length - 1);\n  const div = parseInt(num, 10);\n  return div === Math.pow(n, num);\n};\n\nexport {isSimplePower};\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) {\n    return true;\n  }\n  const b = a - 1;\n  return b * b == a;\n}\n\n// console.log(iscube(64));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hexDigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n  const intStr = num.toString(16);\n  return hexDigits.indexOf(intStr.substring(intStr.length - 1, intStr.length));\n}\n\nconst isPrime = (num) => {\n  return num > 1 && num % 1 === 0;\n}\n\nconst primeSieve = (limit) => {\n  let i = 2;\n  let num = i + 1;\n  let output = [];\n  while (num <= limit) {\n    output.push(num);\n    while (i < num) {\n      i += 2;\n      if (isPrime(num) === true) {\n        output.push(num);\n      }\n    }\n    num += 2;\n  }\n  return output;\n}\n\nconst primeFactors = (num) => {\n  let output = [];\n  if (isPrime(num) === true) {\n    output.push(num);\n  }\n  let i = 2;\n  while (num!== 1) {\n    while (num % i === 0) {\n      output.push(i);\n      num /= i;\n    }\n    i += 1;\n  }\n  return output;\n}\n\nconst numPrimeFactors = (num) => {\n  let output = primeFactors(num);\n  let i = output.length;\n  while (i--) {\n    output[i] = output[i].toString();\n  }\n  return output;\n}\n\nconst isPalindrome = (num) => {\n  return num.toString() === num.toString().split(\"\").reverse().join(\"\");\n}\n\nconst numFactors = (num) => {\n  let output = primeFactors(num);\n  let i = output.length;\n  while (i--) {\n    output[i] = output[i].toString();\n  }\n  return output;\n}\n\nconst numPermutations = (num) => {\n  let output = primeFactors(num);\n  let i = output.length;\n  while (i--) {\n    output[i] = output[i].toString();\n  }\n  return output;\n}\n\nconst isPermutationOf = (num1, num2) => {\n  return num1.toString() === num2.toString().split(\"\").reverse().join(\"\");\n}\n\nconst numPermutationsOf = (num) => {\n  let output = numPermutations(num);\n  let i = output.length;\n  while (i--) {\n    output[i] = output[i].toString();\n  }\n  return output;\n}\n\nconst numUniqueDigits = (num) => {\n  let output = primeFactors(num);\n  let i = output.length;\n  while (i--) {\n    output[i] = output[i].toString();\n  }\n  return output;\n}\n\nconst numUniqueDigitsOf = (num) => {\n  let output = numUniqueDigits(num);\n  let i = output.length;\n  while (i--) {\n    output[i] = output[i].toString();\n  }\n  return output;\n}\n\nconst numUniqueDigitsOf = (num) => {\n  let output = numUniqueDigits(num);\n  let i = output.length;\n  while (i--) {\n    output[i] = output[i].toString();\n  }\n  return output;\n}\n\nconst numUniqueDigitsOf = (num) => {\n  let output = numUniqueDigits(num);\n  let i = output.length;\n  while (i--) {\n    output[i] = output[i].toString();\n  }\n  return output;\n}\n\nconst numUniqueDigitsOf = (num) => {\n  let output = numUniqueDigits(num);\n  let i = output.length;\n  while (i--) {\n    output[i] = output[i].toString();\n  }\n  return output;\n}\n\nconst numUniqueDigitsOf = (num) => {\n  let output = numUniqueDigits(num);\n  let i = output.length;\n  while (i--) {\n    output[i] = output[i].toString();\n  }\n  return output;\n}\n\nconst isPrime = (num) => {\n  return num > 1 && num % 1 === 0;\n}\n\nconst findPrimeFactor = (num) => {\n  let primeFactor = num;\n  let i = 2;\n  while (primeFactor % i ==="}
{"task_id": "JavaScript/79", "prompt": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = ''\n  for (let i = 0; i < decimal.length; i++) {\n    binary += (decimal[i] == 1? '1' : '0')\n  }\n  return binary\n}\n\nconst binaryToDecimal = (binary) => {\n  let decimal = []\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] == '1') {\n      decimal.push(1)\n    } else {\n      decimal.push(0)\n    }\n  }\n  return decimal\n}\n\nconst binaryToString = (binary) => {\n  let str = ''\n  for (let i = 0; i < binary.length; i++) {\n    str += binary[i]\n  }\n  return str\n}\n\nconst stringToBinary = (str) => {\n  let binary = []\n  for (let i = 0; i < str.length; i++) {\n    binary.push(str[i] == '1'? 1 : 0)\n  }\n  return binary\n}\n\nconst stringToDecimal = (str) => {\n  let decimal = []\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] == '1') {\n      decimal.push(1)\n    } else {\n      decimal.push(0)\n    }\n  }\n  return decimal\n}\n\nconst test = (decimal, binary, str) => {\n  console.log(decimalToBinary(decimal))\n  console.log(binaryToDecimal(binary))\n  console.log(binaryToString(binary))\n  console.log(decimalToString(decimal))\n  console.log(strToBinary(str))\n  console.log(binaryToString(strToBinary(str)))\n  console.log(strToDecimal(str))\n  console.log(decimalToDecimal(strToDecimal(str)))\n}\n\ntest(\n  decimalToBinary(15),\n  binaryToDecimal(decimalToBinary(15)),\n  binaryToString(binaryToDecimal(decimalToBinary(15)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binaryToDecimal(decimalToBinary(32)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binaryToDecimal(decimalToBinary(32)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binaryToDecimal(decimalToBinary(32)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binaryToDecimal(decimalToBinary(32)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binaryToDecimal(decimalToBinary(32)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binaryToDecimal(decimalToBinary(32)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binaryToDecimal(decimalToBinary(32)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binaryToDecimal(decimalToBinary(32)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binaryToDecimal(decimalToBinary(32)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binaryToDecimal(decimalToBinary(32)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binaryToDecimal(decimalToBinary(32)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binaryToDecimal(decimalToBinary(32)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binaryToDecimal(decimalToBinary(32)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binaryToDecimal(decimalToBinary(32)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binaryToDecimal(decimalToBinary(32)))\n)\n\ntest(\n  decimalToBinary(32),\n  binaryToDecimal(decimalToBinary(32)),\n  binaryToString(binary"}
{"task_id": "JavaScript/80", "prompt": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  if (len < 3) return false\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    const t = s[i]\n    sum += (parseInt(t) % 10)\n  }\n  return sum === 0\n}\n\nconst isHappy2 = (s) => {\n  const len = s.length\n  if (len < 3) return false\n  let sum = 0\n  let carry = 0\n  for (let i = 0; i < len; i++) {\n    const t = s[i]\n    carry = (sum + parseInt(t) % 10) % 10\n    sum = (sum + parseInt(t) % 10) / 10\n  }\n  return sum === 0\n}\n\nconst isHappy3 = (s) => {\n  const len = s.length\n  if (len < 3) return false\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    const t = s[i]\n    sum += parseInt(t)\n  }\n  return sum % 3 === 0\n}\n\nconst isHappy4 = (s) => {\n  const len = s.length\n  if (len < 3) return false\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    const t = s[i]\n    sum += parseInt(t)\n  }\n  return sum % 4 === 0\n}\n\nconsole.log(isHappy('abc'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aa'))\nconsole.log(isHappy('ab'))\nconsole.log(isHappy('aba'))\nconsole.log(isHappy('aab'))\nconsole.log(isHappy('baba'))\nconsole.log(isHappy('bbab'))\nconsole.log(isHappy('abbc'))\nconsole.log(isHappy('aabc'))\nconsole.log(isHappy('aabd'))\nconsole.log(isHappy('aabbd'))\nconsole.log(isHappy('aabbc'))\nconsole.log(isHappy('aabbb'))\nconsole.log(isHappy('aabbaa'))\nconsole.log(isHappy('aabbccc'))\nconsole.log(isHappy('aabbcccc'))\nconsole.log(isHappy('aabbccccc'))\nconsole.log(isHappy('aabbcccccc'))\nconsole.log(isHappy('aabbccccccc'))\nconsole.log(isHappy('aabbcccccccc'))\nconsole.log(isHappy('aabbccccccccc'))\nconsole.log(isHappy('aabbcccccccccc'))\nconsole.log(isHappy('aabbccccccccccc'))\nconsole.log(isHappy('aabbcccccccccccc'))\nconsole.log(isHappy('aabbccccccccccccc'))\nconsole.log(isHappy('aabbcccccccccccccc'))\nconsole.log(isHappy('aabbccccccccccccccc'))\nconsole.log(isHappy('aabbcccccccccccccccc'))\nconsole.log(isHappy('aabbccccccccccccccccc'))\nconsole.log(isHappy('aabbcccccccccccccccccc'))\nconsole.log(isHappy('aabbccccccccccccccccccc'))\nconsole.log(isHappy('aabbcccccccccccccccccccc'))\nconsole.log(isHappy('aabbccccccccccccccccccccc'))\nconsole.log(isHappy('aabbcccccccccccccccccccccc'))\nconsole.log(isHappy('aabbccccccccccccccccccccccc'))\nconsole.log(isHappy('aabbcccccccccccccccccccccccc'))\nconsole.log(isHappy('aabbccccccccccccccccccccccccc'))\nconsole.log(isHappy('aabbcccccccccccccccccccccccccc'))\nconsole.log(isHappy('aabbccccccccccccccccccccccccccc'))\nconsole.log(isHappy('aabbcccccccccccccccccccccccccccc'))\nconsole.log(isHappy('aabbccccccccccccccccccccccccccccc'))\nconsole.log(isHappy('aabbcccccccccccccccccccccccccccccc'))\nconsole.log(isHappy('aabbccccccccccccccccccccccccccccccc'))\nconsole.log(isHappy('aabbcccccccccccccccccccccccccccccccc'))\nconsole.log(isHappy('aabbccccccccccccccccccccccccccccccccc'))\nconsole.log(isHappy('aabbcccccccccccccccccccccccccccccccccc'))\nconsole.log(isHappy('aabbccccccccccccccccccccccccccccccccccc'))\nconsole.log(isHappy('aabbcccccccccccccccccccccccccccccccccccc'))\nconsole.log(isHappy('aabbccccccccccccccccccccccccccccccccccccc'))\nconsole.log(isHappy('aabbcccccccccccccccccccccccccccccccc"}
{"task_id": "JavaScript/81", "prompt": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n    const average = Math.floor(grades.reduce((acc, grade) => acc + grade) / grades.length);\n    const letterGrades = {\n        'A+': 'A+',\n        'A': 'A',\n        'A-': 'A-',\n        'B+': 'B+',\n        'B': 'B',\n        'B-': 'B-',\n        'C+': 'C+',\n        'C': 'C',\n        'C-': 'C-',\n        'D+': 'D+',\n        'D': 'D',\n        'D-': 'D-',\n        'E': 'E',\n    };\n\n    return grades.map(grade => {\n        if (grade > 4.0) {\n            return letterGrades[grade];\n        }\n\n        if (grade > 3.0) {\n            return 'C';\n        }\n\n        if (grade > 2.0) {\n            return 'B';\n        }\n\n        if (grade > 1.0) {\n            return 'A';\n        }\n\n        return 'A-';\n    });\n};\n\nexport default numericalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  return /^[0-9]*$/.test(string)\n   ? (parseInt(string) <= 10)\n   ? (parseInt(string) % 2 === 0)\n    : (string.length % 2 === 0)\n    : false;\n};\n\n// @include\nmodule.exports = primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n  let result = 1;\n  let temp = n;\n  let count = 0;\n\n  while (temp > 0) {\n    temp = temp / 10;\n    count++;\n  }\n\n  let start = n;\n  while (start > 0) {\n    start = start % 10;\n    result = result * 10 + start;\n  }\n\n  return result;\n};\n\nconst givEnds = (n) => {\n  let result = 1;\n  let temp = n;\n  let count = 0;\n\n  while (temp > 0) {\n    temp = temp / 10;\n    count++;\n  }\n\n  let end = n;\n  while (end > 0) {\n    end = end % 10;\n    result = result * 10 + end;\n  }\n\n  return result;\n};\n\nconst givEndsOne = (n) => {\n  let result = 1;\n  let temp = n;\n  let count = 0;\n\n  while (temp > 0) {\n    temp = temp / 10;\n    count++;\n  }\n\n  let end = n;\n  while (end > 0) {\n    end = end % 10;\n    result = result * 10 + end;\n  }\n\n  return result;\n};\n\nconst givStarts = (n) => {\n  let result = 1;\n  let temp = n;\n  let count = 0;\n\n  while (temp > 0) {\n    temp = temp / 10;\n    count++;\n  }\n\n  let start = n;\n  while (start > 0) {\n    start = start % 10;\n    result = result * 10 + start;\n  }\n\n  return result;\n};\n\nconst givStartsOne = (n) => {\n  let result = 1;\n  let temp = n;\n  let count = 0;\n\n  while (temp > 0) {\n    temp = temp / 10;\n    count++;\n  }\n\n  let start = n;\n  while (start > 0) {\n    start = start % 10;\n    result = result * 10 + start;\n  }\n\n  return result;\n};\n\nconst givStartsEnds = (n) => {\n  let result = 1;\n  let temp = n;\n  let count = 0;\n\n  while (temp > 0) {\n    temp = temp / 10;\n    count++;\n  }\n\n  let start = n;\n  while (start > 0) {\n    start = start % 10;\n    result = result * 10 + start;\n  }\n\n  let end = n;\n  while (end > 0) {\n    end = end % 10;\n    result = result * 10 + end;\n  }\n\n  return result;\n};\n\nconst givStartsEndsOne = (n) => {\n  let result = 1;\n  let temp = n;\n  let count = 0;\n\n  while (temp > 0) {\n    temp = temp / 10;\n    count++;\n  }\n\n  let start = n;\n  while (start > 0) {\n    start = start % 10;\n    result = result * 10 + start;\n  }\n\n  let end = n;\n  while (end > 0) {\n    end = end % 10;\n    result = result * 10 + end;\n  }\n\n  return result;\n};\n\nconst givStartsEndsOneStartOne = (n) => {\n  let result = 1;\n  let temp = n;\n  let count = 0;\n\n  while (temp > 0) {\n    temp = temp / 10;\n    count++;\n  }\n\n  let start = n;\n  while (start > 0) {\n    start = start % 10;\n    result = result * 10 + start;\n  }\n\n  let end = n;\n  while (end > 0) {\n    end = end % 10;\n    result = result * 10 + end;\n  }\n\n  return result;\n};\n\nconst givStartsEndsOneStartEnd = (n) => {\n  let result = 1;\n  let temp = n;\n  let count = 0;\n\n  while (temp > 0) {\n    temp = temp / 10;\n    count++;\n  }\n\n  let start = n;\n  while (start > 0) {\n    start = start % 10;\n    result = result * 10 + start;\n  }\n\n  let end = n;\n  while (end > 0) {\n    end = end % 10;\n    result = result * 10 + end;\n  }\n\n  return result;\n};\n\nconst givStartsEndsOneStartEndOne = (n) => {\n  let result = 1;\n  let temp = n;\n  let count = 0;\n\n  while (temp > 0) {\n    temp = temp / 10;\n    count++;\n  }\n\n  let start = n;\n  while (start > 0) {\n    start = start % 10;\n    result = result * 10 + start;\n  }\n\n  let end = n;\n  while (end > 0) {\n    end = end % 10;\n    result = result * 10 + end;\n  }\n\n  return result;\n};\n\nconst givStartsEndsOneStartEndTwo = (n) => {\n  let result = 1;\n  let temp = n;\n  let count = 0;\n\n  while (temp > 0) {\n    temp = temp / 10;\n    count++;\n  }\n\n  let start = n;\n  while (start > 0) {\n    start = start % 10;\n    result = result * 10 + start;\n  }\n\n  let end = n;\n  while (end > 0) {\n    end = end % 10;\n    result = result * 10 + end;\n  }\n\n  return result;\n};\n\nconst givStartsEndsOneStartEndTwoOne = (n) => {\n  let result = 1;\n  let temp = n;\n  let count = 0;\n\n  while (temp > 0) {\n    temp = temp / 10;\n    count++;\n  }\n\n  let start = n;\n  while (start > 0) {\n    start = start % 10;\n    result = result * 10 + start;\n  }\n\n  let"}
{"task_id": "JavaScript/84", "prompt": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let toTal = (N).toString().split('');\n  let sum = 0;\n  for(let i = 0; i < toTal.length; i++){\n    sum += toTal[i].charCodeAt(0);\n  }\n  return sum.toString(2);\n};\n\nconsole.log(solve(100));\nconsole.log(solve(200));\nconsole.log(solve(300));\nconsole.log(solve(500));\nconsole.log(solve(1000));\nconsole.log(solve(1500));\nconsole.log(solve(2000));\nconsole.log(solve(3000));\nconsole.log(solve(4000));\nconsole.log(solve(5000));\nconsole.log(solve(6000));\nconsole.log(solve(7000));\nconsole.log(solve(8000));\nconsole.log(solve(9000));\nconsole.log(solve(10000));\nconsole.log(solve(15000));\nconsole.log(solve(20000));\nconsole.log(solve(25000));\nconsole.log(solve(30000));\nconsole.log(solve(35000));\nconsole.log(solve(40000));\nconsole.log(solve(45000));\nconsole.log(solve(50000));\nconsole.log(solve(55000));\nconsole.log(solve(60000));\nconsole.log(solve(65000));\nconsole.log(solve(70000));\nconsole.log(solve(75000));\nconsole.log(solve(80000));\nconsole.log(solve(85000));\nconsole.log(solve(90000));\nconsole.log(solve(95000));\nconsole.log(solve(100000));\nconsole.log(solve(105000));\nconsole.log(solve(110000));\nconsole.log(solve(115000));\nconsole.log(solve(120000));\nconsole.log(solve(125000));\nconsole.log(solve(130000));\nconsole.log(solve(135000));\nconsole.log(solve(140000));\nconsole.log(solve(145000));\nconsole.log(solve(150000));\nconsole.log(solve(155000));\nconsole.log(solve(160000));\nconsole.log(solve(165000));\nconsole.log(solve(170000));\nconsole.log(solve(175000));\nconsole.log(solve(180000));\nconsole.log(solve(185000));\nconsole.log(solve(190000));\nconsole.log(solve(195000));\nconsole.log(solve(200000));\nconsole.log(solve(205000));\nconsole.log(solve(210000));\nconsole.log(solve(215000));\nconsole.log(solve(220000));\nconsole.log(solve(225000));\nconsole.log(solve(230000));\nconsole.log(solve(235000));\nconsole.log(solve(240000));\nconsole.log(solve(245000));\nconsole.log(solve(250000));\nconsole.log(solve(255000));\nconsole.log(solve(260000));\nconsole.log(solve(265000));\nconsole.log(solve(270000));\nconsole.log(solve(275000));\nconsole.log(solve(280000));\nconsole.log(solve(285000));\nconsole.log(solve(290000));\nconsole.log(solve(295000));\nconsole.log(solve(300000));\nconsole.log(solve(305000));\nconsole.log(solve(310000));\nconsole.log(solve(315000));\nconsole.log(solve(320000));\nconsole.log(solve(325000));\nconsole.log(solve(330000));\nconsole.log(solve(335000));\nconsole.log(solve(340000));\nconsole.log(solve(345000));\nconsole.log(solve(350000));\nconsole.log(solve(355000));\nconsole.log(solve(360000));\nconsole.log(solve(365000));\nconsole.log(solve(370000));\nconsole.log(solve(375000));\nconsole.log(solve(380000));\nconsole.log(solve(385000));\nconsole.log(solve(390000));\nconsole.log(solve(395000));\nconsole.log(solve(400001));\nconsole.log(solve(405000));\nconsole.log(solve(410000));\nconsole.log(solve(415000));\nconsole.log(solve(420000));\nconsole.log(solve(425000));\nconsole.log(solve(430000));\nconsole.log(solve(435000));\nconsole.log(solve(440000));\nconsole.log(solve(445000));\nconsole.log(solve(450000));\nconsole.log(solve(455000));\nconsole.log(solve(460000));\nconsole.log(solve(465000));\nconsole.log(solve(470000));\nconsole.log(solve(475000));\nconsole.log(solve(480000));\nconsole.log(solve(485000));\nconsole.log(solve(490000));\nconsole.log(solve(495000));\nconsole.log(solve(500000));\nconsole.log(solve(505000));\nconsole.log(solve(510000));\nconsole.log(solve(515000));\nconsole.log(solve(520000));\nconsole.log(solve(525000));\nconsole.log(solve(530000));\nconsole.log(solve(535000));\nconsole.log(solve"}
{"task_id": "JavaScript/85", "prompt": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const sum = (a, b) => a + b;\n  return lst.reduce(sum);\n};\n\nconst sum = (a, b) => a + b;\n\nconst lst = [4, 2, 6, 7];\nconsole.log(add(lst)); //=> 2<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let r = Math.floor(Math.random() * s.length);\n    newString += s.charAt(r);\n    s = s.substr(1);\n  }\n  return newString + s;\n}\n\n/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'heo'\n  */\nconst antiShuffleString = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let r = Math.floor(Math.random() * s.length);\n    newString += s.charAt(r);\n  }\n  return newString;\n}\n\n/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'heo'\n  */\nconst antiShuffleStringInverse = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let r = Math.floor(Math.random() * s.length);\n    newString += s.charAt(r);\n  }\n  return newString;\n}\n\n/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hello World!!!') returns 'Hello World!!!'\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'heo'\n  */\nconst antiShuffleStringInverseInverse = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let r = Math.floor(Math.random() * s.length);\n    newString += s.charAt(r);\n  }\n  return newString;\n}\n\nmodule.exports = {\n  antiShuffle,\n  antiShuffleString,\n  antiShuffleStringInverse,\n  antiShuffleStringInverseInverse\n};\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2) ...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let [row, cols] = lst[i]\n    res.push([row, cols[x]])\n  }\n  return res\n}\n\nconst getRowSorted = (lst, x) => {\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let [row, cols] = lst[i]\n    res.push([row, cols[x]])\n  }\n  return res.sort((a, b) => a[0] - b[0])\n}\n\nconst getRowDesc = (lst, x) => {\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let [row, cols] = lst[i]\n    res.push([row, cols[x]])\n  }\n  return res.sort((a, b) => b[0] - a[0])\n}\n\nconst getCols = (lst, x) => {\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let [row, cols] = lst[i]\n    res.push(cols[x])\n  }\n  return res\n}\n\nconst getColsSorted = (lst, x) => {\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let [row, cols] = lst[i]\n    res.push(cols[x])\n  }\n  return res.sort((a, b) => a - b)\n}\n\nconst getColsDesc = (lst, x) => {\n  let res = []\n  for(let i = 0; i < lst.length; i++) {\n    let [row, cols] = lst[i]\n    res.push(cols[x])\n  }\n  return res.sort((a, b) => b - a)\n}\n\nconst getRowLength = (lst, x) => lst[0][x].length\n\nconst getRowLengthSorted = (lst, x) => lst.sort((a, b) => a[0] - b[0]).length\n\nconst getRowLengthDesc = (lst, x) => lst.sort((a, b) => b[0] - a[0]).length\n\nconst getColLength = (lst, x) => lst[0].length\n\nconst getColLengthSorted = (lst, x) => lst.sort((a, b) => a - b).length\n\nconst getColLengthDesc = (lst, x) => lst.sort((a, b) => b - a).length\n\nconst getRow = (lst, x) => lst[0]\n\nconst getRowSorted = (lst, x) => lst.sort((a, b) => a[x] - b[x])\n\nconst getRowDesc = (lst, x) => lst.sort((a, b) => b[x] - a[x])\n\nconst getCols = (lst, x) => lst[0].slice(x)\n\nconst getColsSorted = (lst, x) => lst.sort((a, b) => a[x] - b[x])\n\nconst getColsDesc = (lst, x) => lst.sort((a, b) => b[x] - a[x])\n\nconst getRowLength = (lst, x) => lst[0][x].length\n\nconst getRowLengthSorted = (lst, x) => lst.sort((a, b) => a[x] - b[x]).length\n\nconst getRowLengthDesc = (lst, x) => lst.sort((a, b) => b[x] - a[x]).length\n\nconst getColLength = (lst, x) => lst[0].length\n\nconst getColLengthSorted = (lst, x) => lst.sort((a, b) => a[x] - b[x]).length\n\nconst getColLengthDesc = (lst, x) => lst.sort((a, b) => b[x] - a[x]).length\n\nconst getRow = (lst, x) => lst[0]\n\nconst getRowSorted = (lst, x) => lst.sort((a, b) => a[x] - b[x])\n\nconst getRowDesc = (lst, x) => lst.sort((a, b) => b[x] - a[x])\n\nconst getCols = (lst, x) => lst[0].slice(x)\n\nconst getColsSorted = (lst, x) => lst.sort((a, b)"}
{"task_id": "JavaScript/88", "prompt": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sortedArray = []\n  for (let i = 0; i < array.length; i++) {\n    sortedArray.push(array[i])\n  }\n  sortedArray = sortedArray.sort((a, b) => a - b)\n  return sortedArray\n}\n\nexport default sortArray<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let charArray = s.split('')\n  let encrypted = ''\n  for (let i = 0; i < charArray.length; i++) {\n    let char = charArray[i]\n    let encryptedChar = ''\n    for (let j = 0; j < charArray.length; j++) {\n      let currentChar = charArray[j]\n      if (currentChar === char) {\n        encryptedChar += char\n      }\n    }\n    encrypted += encryptedChar\n  }\n  return encrypted\n}\n\nconsole.log(encrypt('asdfghjkl'))\n//=> 'pfjkcwfqpz'\nconsole.log(encrypt('et'))\n//=> 'xjbxn'\nconsole.log(encrypt('gf'))\n//=> 'j'\nconsole.log(encrypt('hi'))\n//=> 'l'\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  var smallest = lst[0];\n  var temp = lst.slice(1, lst.length);\n  var smallestIndex = 0;\n  for (var i = 0; i < temp.length; i++) {\n    if (temp[i] < smallest) {\n      smallest = temp[i];\n      smallestIndex = i;\n    }\n  }\n  return smallestIndex;\n};\n\nvar list = [1, 2, 3, 4, 5];\nconsole.log(nextSmallest(list));\n\nvar list = [5, 1, 4, 3, 2];\nconsole.log(nextSmallest(list));\n\nvar list = [];\nconsole.log(nextSmallest(list));\n\nvar list = [1, 1];\nconsole.log(nextSmallest(list));<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^[iI](.*)[!?]?$/\n  const re = new RegExp(regex)\n  const matches = S.match(re)\n  if (matches) {\n    return matches[1]\n  }\n  return false\n}\n\nmodule.exports = isBored\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n    return x === y + z\n}\n\nconst anyInt2 = (x, y, z) => {\n    return x === y + z\n}\n\nconsole.log(anyInt(5, 2, 7))\n// → true\nconsole.log(anyInt(3, 2, 2))\n// → false\nconsole.log(anyInt(3, -2, 1))\n// → true\nconsole.log(anyInt(3.6, -2.2, 2))\n// → false\n\nconst anyInt3 = (x, y, z) => {\n    return x === y + z\n}\n\nconst anyInt4 = (x, y, z) => {\n    return x === y + z\n}\n\nconsole.log(anyInt3(5, 2, 7))\n// → true\nconsole.log(anyInt3(3, 2, 2))\n// → false\nconsole.log(anyInt3(3, -2, 1))\n// → true\nconsole.log(anyInt3(3.6, -2.2, 2))\n// → false\n\n/* Create a Function that returns the sum of a List of Numbers.\n  REturnS a Number, and when invoked, returns the sum of the Numbers in the List.\n  Examples\n  sum(1, 2, 3) ➞ 6\n  sum([1, 2, 3]) ➞ 6\n  sum([1, 2, 3.6]) ➞ 9.6\n  */\nconst sum = (...list) => {\n    return list.reduce((acc, n) => acc + n)\n}\n\nconsole.log(sum(1, 2, 3))\n// → 6\nconsole.log(sum([1, 2, 3]))\n// → 6\nconsole.log(sum([1, 2, 3.6]))\n// → 9.6\n\n/* Create a Function that returns the sum of a List of Numbers,\n  except that it does not accept negative Numbers.\n  REturnS a Number, and when invoked, returns the sum of the Numbers in the List,\n  except that if any number in the List is negative, it returns 0.\n  Examples\n  sumIfPositive(1, 2, 3) ➞ 6\n  sumIfPositive([1, 2, 3]) ➞ 6\n  sumIfPositive([1, 2, 3.6]) ➞ 6\n  sumIfPositive([1, 2, -3.6]) ➞ 0\n  sumIfPositive([1, 2, 3, -3.6]) ➞ 0\n  */\nconst sumIfPositive = (...list) => {\n    return list.reduce((acc, n) => acc + n, 0)\n}\n\nconsole.log(sumIfPositive(1, 2, 3))\n// → 6\nconsole.log(sumIfPositive([1, 2, 3]))\n// → 6\nconsole.log(sumIfPositive([1, 2, 3.6]))\n// → 6\nconsole.log(sumIfPositive([1, 2, -3.6]))\n// → 0\nconsole.log(sumIfPositive([1, 2, 3, -3.6]))\n// → 0\n\n/* Create a Function that returns the product of a List of Numbers.\n  REturnS a Number, and when invoked, returns the product of the Numbers in the List.\n  Examples\n  product(1, 2, 3) ➞ 12\n  product([1, 2, 3]) ➞ 12\n  product([1, 2, 3.6]) ➞ 12\n  product([1, 2, -3.6]) ➞ 0\n  product([1, 2, 3, -3.6]) ➞ 0\n  */\nconst product = (...list) => {\n    return list.reduce((acc, n) => acc * n, 1)\n}\n\nconsole.log(product(1, 2, 3))\n// → 12\nconsole.log(product([1, 2, 3]))\n// → 12\nconsole.log(product([1, 2, 3.6]))\n// → 12\nconsole.log(product([1, 2, -3.6]))\n// → 0\nconsole.log(product([1, 2, 3, -3.6]))\n// → 0\n\n/* Create a Function that returns the product of a List of Numbers,\n  except that it does not accept negative Numbers.\n  REturnS a Number, and when invoked, returns the product of the Numbers in the List,\n  except that if any number in the List is negative, it returns 0.\n  Examples\n  productIfPositive(1, 2, 3) ➞ 12\n  productIfPositive([1, 2, 3]) ➞ 12\n  productIfPositive([1, 2, 3.6]) ➞ 12\n  productIfPositive([1, 2, -3.6]) ➞ 0\n  productIfPositive([1, 2, 3, -3.6]) ➞ 0\n  */\nconst productIfPositive = (...list) => {\n    return list.reduce((acc, n) => acc * n, 1)\n}\n\nconsole.log(productIfPositive(1, 2, 3))\n// → 12\nconsole.log(productIfPositive([1, 2, 3]))\n// → 12\nconsole.log(productIfPositive([1, 2, 3.6]))\n// → 12\nconsole.log(productIfPositive([1, 2, -3.6]))\n// → 0\nconsole.log(productIfPositive([1, 2, 3, -3.6]))\n// → 0\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const code = [];\n  for (let i = 0; i < message.length; i++) {\n    const letter = message[i];\n    if (isVowel(letter)) {\n      code.push(letter);\n    } else if (isConsonant(letter)) {\n      if (code.length > 0) {\n        code.push(getCode(code.join('')));\n        code.push(letter);\n      } else {\n        code.push(letter);\n      }\n    }\n  }\n  return code.join('');\n};\n\nconst isVowel = (letter) => {\n  return vowels.includes(letter);\n};\n\nconst isConsonant = (letter) => {\n  return consonants.includes(letter);\n};\n\nconst getCode = (string) => {\n  return codes[string];\n};\n\nconst vowels = ['a', 'e', 'i', 'o', 'u'];\nconst consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n\nconst codes = {\n  a: 'A',\n  e: 'E',\n  i: 'I',\n  o: 'O',\n  u: 'U',\n  b: 'B',\n  c: 'C',\n  d: 'D',\n  f: 'F',\n  g: 'G',\n  h: 'H',\n  j: 'J',\n  k: 'K',\n  l: 'L',\n  m: 'M',\n  n: 'N',\n  p: 'P',\n  q: 'Q',\n  r: 'R',\n  s: 'S',\n  t: 'T',\n  v: 'V',\n  w: 'W',\n  x: 'X',\n  y: 'Y',\n  z: 'Z'\n};\n\nconsole.log(encode('This is a message'));<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n// TEST\n// console.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\n// console.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\n// console.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\n// console.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\n// console.log(skjkasdkd([0,81,12,3,1,21]));\n// console.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let check = true;\n  for (let key in dict) {\n    if (typeof dict[key] === \"string\" && dict[key].length > 0) {\n      continue;\n    } else {\n      check = false;\n      break;\n    }\n  }\n  return check;\n};\n\n/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDict = (dict) => {\n  let check = true;\n  for (let key in dict) {\n    if (typeof dict[key]!== \"string\" && dict[key].length > 0) {\n      check = false;\n      break;\n    }\n  }\n  return check;\n};\n\nmodule.exports = {\n  checkDictCase,\n  checkDict\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n  const count = []\n  const index = []\n  for(let i=0; i<primes.length; i++){\n    const current = primes[i]\n    while(n >= current){\n      count.push(current)\n      index.push(i)\n      n -= current\n    }\n  }\n  return [count, index]\n}\n\n/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGER AnD retURns An array of the fIRST n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n  const count = []\n  const index = []\n  for(let i=0; i<primes.length; i++){\n    const current = primes[i]\n    while(n >= current){\n      count.push(current)\n      index.push(i)\n      n -= current\n    }\n  }\n  return [count, index]\n}\n\nconst countUpTo = (n) => {\n  const primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n  const count = []\n  const index = []\n  for(let i=0; i<primes.length; i++){\n    const current = primes[i]\n    while(n >= current){\n      count.push(current)\n      index.push(i)\n      n -= current\n    }\n  }\n  return [count, index]\n}\n\nmodule.exports = {\n  countUpTo\n}\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0) return 0\n  if (b === 0) return 0\n  if (a < 0) {\n    return multiply(b, -a)\n  }\n  if (b < 0) {\n    return multiply(-a, b)\n  }\n  if (a === 1) return b\n  if (b === 1) return a\n  if (a === -1) return multiply(-b, a)\n  if (b === -1) return multiply(a, -b)\n  if (a === 2) return multiply(b, b)\n  if (b === 2) return multiply(a, a)\n  if (a === -2) return multiply(-b, -b)\n  if (b === -2) return multiply(-a, -a)\n\n  let d = a % b\n  if (d === 0) return a / b\n  if (d === b) return a\n  if (d === -b) return -a\n  return multiply(a - d, b) + multiply(d, b)\n}\n\nexport default multiply\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    s.split('').forEach(c => {\n        if(c >= 'A' && c <= 'Z'){\n            count++;\n        }\n    });\n    return count;\n};\n\n/*\n  GivEn a sTring s, a String t, which contains sTring s, the function\n  returns true if t contains sTring s.\n  \n  For example:\n  contains('cada', 'ada') returns true\n  contains('ada', 'cada') returns false\n  contains('abcd', 'abcde') returns false\n  contains('ada', 'bac') returns false\n  */\nconst contains = (s, t) => {\n    let result = false;\n    for(let i = 0; i < t.length; i++){\n        if(s.indexOf(t[i]) > -1){\n            result = true;\n        }\n    }\n    return result;\n};\n\n/*\n  GivEn a sTring s, the function returns true if sTring s is an empty String.\n  \n  For example:\n  isEmpty('cada') returns false\n  isEmpty('ada') returns true\n  isEmpty('') returns true\n  */\nconst isEmpty = (s) => {\n    return!s;\n};\n\n/*\n  GivEn a sTring s, the function returns true if sTring s is an sTring\n  with at least one vowel in it.\n  \n  For example:\n  hasVowel('dbe') returns false\n  hasVowel('cada') returns true\n  hasVowel('abcd') returns false\n  */\nconst hasVowel = (s) => {\n    let vowel = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(vowel.indexOf(s[i]) > -1){\n            count++;\n        }\n    }\n    return count > 0;\n};\n\n/*\n  GivEn a sTring s, the function returns the sTring with the vowels\n  in it removed.\n  \n  For example:\n  removeVowels('cada') returns 'ada'\n  removeVowels('abcd') returns 'abcd'\n  */\nconst removeVowels = (s) => {\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!hasVowel(s[i])){\n            result += s[i];\n        }\n    }\n    return result;\n};\n\n/*\n  GivEn a sTring s, the function returns the sTring with the first letter\n  removed.\n  \n  For example:\n  removeFirstLetter('cada') returns 'ada'\n  removeFirstLetter('abcd') returns 'abcd'\n  */\nconst removeFirstLetter = (s) => {\n    return s.slice(1);\n};\n\n/*\n  GivEn a sTring s, the function returns the sTring with the first letter\n  and any following vowels removed.\n  \n  For example:\n  removeFirstLetter('cada') returns 'ada'\n  removeFirstLetter('abcd') returns 'abcd'\n  */\nconst removeFirstLetterAndVowels = (s) => {\n    return removeVowels(removeFirstLetter(s));\n};\n\n/*\n  GivEn a sTring s, the function returns the sTring with the first letter\n  removed and any following vowels removed.\n  \n  For example:\n  removeFirstLetterAndVowels('cada') returns 'ada'\n  removeFirstLetterAndVowels('abcd') returns 'abcd'\n  */\nconst removeFirstLetterAndVowels2 = (s) => {\n    return removeVowels(removeFirstLetter(s));\n};\n\n/*\n  GivEn a sTring s, the function returns the sTring with the vowels\n  in it removed.\n  \n  For example:\n  removeVowels('cada') returns 'cada'\n  removeVowels('abcd') returns 'abcd'\n  */\nconst removeVowels2 = (s) => {\n    let vowel = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!vowel.includes(s[i])){\n            result += s[i];\n        }\n    }\n    return result;\n};\n\n/*\n  GivEn a sTring s, the function returns the sTring with the vowels\n  removed.\n  \n  For example:\n  removeVowels('cada') returns 'cada'\n  removeVowels('abcd') returns 'abcd'\n  */\nconst removeVowels3 = (s) => {\n    let vowel = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let result = '';\n    for(let i = 0; i < s.length; i++){\n        if(!vowel.includes(s[i])){\n            result += s[i];\n        }\n    }\n    return result;\n};\n\n/*\n  GivEn a sTring s, the function returns the sTring with the vowels\n  and first letter removed.\n  \n  For example:\n  removeVowelsAndFirstLetter('cada') returns 'cada'\n  removeVowelsAndFirstLetter('abcd') returns 'abcd'\n  */\nconst removeVowelsAndFirstLetter = (s) => {\n    return removeVowels(removeFirstLetter(s));\n};\n\n/*\n  GivEn a sTring"}
{"task_id": "JavaScript/99", "prompt": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const nums = Array.from(Array(20)).map((_, index) => index + 1)\n  const distances = nums.map((number) => Math.abs(value - number))\n  const closest = distances.reduce((prev, current, index) => {\n    if (prev === null) {\n      return current\n    } else if (current < prev) {\n      return current\n    } else {\n      return prev\n    }\n  })\n  return closest\n}\n\nexport default closestInteger\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = []\n  for (let i = 1; i <= n; i++) {\n    result.push(i)\n  }\n  return result\n}\n\nconst pOsItIvE = (n, pile) => {\n  let i = 0\n  let result = []\n  let stack = []\n  while (i < n) {\n    if (stack.length === 0) {\n      stack = pile\n    }\n    let el = stack.pop()\n    result.push(el)\n    i++\n  }\n  return result\n}\n\nconst retUrn = (n, pile) => {\n  let result = []\n  let stack = []\n  for (let i = 1; i <= n; i++) {\n    while (stack.length > 0) {\n      stack.pop()\n    }\n    while (stack.length < pile.length) {\n      stack.push(0)\n    }\n    result.push(stack.slice())\n    stack.pop()\n  }\n  return result\n}\n\n/*\n  GivEn a pOsItIvE, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  >>> retUrn(3, makeAPile(3))\n  [3, 5, 7]\n  */\n\nexport { makeAPile, pOsItIvE, retUrn }\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const wordList = s.split(/\\s+/)\n  return wordList\n}\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordCount = (s) => {\n  const wordList = s.split(/\\s+/)\n  const wordCount = wordList.length\n  return wordCount\n}\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst letterCount = (s) => {\n  const wordList = s.split(/\\s+/)\n  const letterCount = wordList.map(word => word.length).reduce((a, b) => a + b)\n  return letterCount\n}\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordLength = (s) => {\n  const wordList = s.split(/\\s+/)\n  const wordLength = wordList.map(word => word.length)\n  return wordLength\n}\n\nconst wordScore = (s) => {\n  const wordList = s.split(/\\s+/)\n  const wordScore = wordList.map(word => word.toUpperCase().length)\n  return wordScore\n}\n\nconst allWords = (s) => {\n  const wordList = s.split(/\\s+/)\n  const allWords = wordList.reduce((a, b) => a + b)\n  return allWords\n}\n\nconst allLetterCount = (s) => {\n  const wordList = s.split(/\\s+/)\n  const allLetterCount = wordList.map(word => word.length).reduce((a, b) => a + b)\n  return allLetterCount\n}\n\nconst allWordLength = (s) => {\n  const wordList = s.split(/\\s+/)\n  const allWordLength = wordList.map(word => word.length)\n  return allWordLength\n}\n\nconst allWordScore = (s) => {\n  const wordList = s.split(/\\s+/)\n  const allWordScore = wordList.map(word => word.toUpperCase().length)\n  return allWordScore\n}\n\nconst maxScore = (s) => {\n  const wordList = s.split(/\\s+/)\n  const maxScore = wordList.map(word => word.toUpperCase().length)\n  return maxScore\n}\n\nconst wordCountScore = (s) => {\n  const wordList = s.split(/\\s+/)\n  const wordCountScore = wordList.map(word => word.toUpperCase().length)\n  return wordCountScore\n}\n\nconst letterCountScore = (s) => {\n  const wordList = s.split(/\\s+/)\n  const letterCountScore = wordList.map(word => word.toUpperCase().length)\n  return letterCountScore\n}\n\nconst allWordCountScore = (s) => {\n  const wordList = s.split(/\\s+/)\n  const allWordCountScore = wordList.map(word => word.toUpperCase().length)\n  return allWordCountScore\n}\n\nconst letterCountScoreMax = (s) => {\n  const wordList = s.split(/\\s+/)\n  const letterCountScoreMax = wordList.map(word => word.toUpperCase().length)\n  return letterCountScoreMax\n}\n\nconst letterCountScoreMaxMin = (s) => {\n  const wordList = s.split(/\\s+/)\n  const letterCountScoreMax = wordList.map(word => word.toUpperCase().length)\n  const letterCountScoreMin = wordList.map(word => word.toUpperCase().length)\n  return [letterCountScoreMax, letterCountScoreMin]\n}\n\nconst letterCountScoreMaxMin2 = (s) => {\n  const wordList = s.split(/\\s+/)\n  const letterCountScoreMax = wordList.map(word => word.toUpperCase().length)\n  const letterCountScoreMin = wordList.map(word => word.toUpperCase().length)\n  return [letterCountScoreMax, letterCountScoreMin]\n}\n\nconst letterCountScoreMaxMin3 = (s) => {\n  const wordList = s.split(/\\s+"}
{"task_id": "JavaScript/102", "prompt": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) return x\n  if (x > y) {\n    return -1\n  }\n  if (x < y) {\n    return chooseNum(y, x)\n  }\n  const m = x - y\n  const t = x + y + 1\n  if (t % 2 === 1) return chooseNum(t, m)\n  return chooseNum(t - 1, m)\n}\n\nconst chooseNumTest = () => {\n  const t = chooseNum(12, 15)\n  if (t!== 14) {\n    console.log(`Expected 14, got ${t}`)\n  }\n  if (chooseNum(13, 12)!== -1) {\n    console.log(`Expected -1, got ${chooseNum(13, 12)}`)\n  }\n}\n\nconst chooseNumTest2 = () => {\n  const t = chooseNum(12, 15)\n  if (t!== 14) {\n    console.log(`Expected 14, got ${t}`)\n  }\n  if (chooseNum(15, 12)!== -1) {\n    console.log(`Expected -1, got ${chooseNum(15, 12)}`)\n  }\n}\n\nconst chooseNumTest3 = () => {\n  const t = chooseNum(12, 15)\n  if (t!== 14) {\n    console.log(`Expected 14, got ${t}`)\n  }\n  if (chooseNum(15, 15)!== -1) {\n    console.log(`Expected -1, got ${chooseNum(15, 15)}`)\n  }\n}\n\nconst chooseNumTest4 = () => {\n  const t = chooseNum(12, 15)\n  if (t!== 14) {\n    console.log(`Expected 14, got ${t}`)\n  }\n  if (chooseNum(16, 15)!== -1) {\n    console.log(`Expected -1, got ${chooseNum(16, 15)}`)\n  }\n}\n\nconst chooseNumTest5 = () => {\n  const t = chooseNum(12, 15)\n  if (t!== 14) {\n    console.log(`Expected 14, got ${t}`)\n  }\n  if (chooseNum(15, 16)!== -1) {\n    console.log(`Expected -1, got ${chooseNum(15, 16)}`)\n  }\n}\n\nconst chooseNumTest6 = () => {\n  const t = chooseNum(12, 15)\n  if (t!== 14) {\n    console.log(`Expected 14, got ${t}`)\n  }\n  if (chooseNum(16, 17)!== -1) {\n    console.log(`Expected -1, got ${chooseNum(16, 17)}`)\n  }\n}\n\nconst chooseNumTest7 = () => {\n  const t = chooseNum(12, 15)\n  if (t!== 14) {\n    console.log(`Expected 14, got ${t}`)\n  }\n  if (chooseNum(17, 16)!== -1) {\n    console.log(`Expected -1, got ${chooseNum(17, 16)}`)\n  }\n}\n\nconst chooseNumTest8 = () => {\n  const t = chooseNum(12, 15)\n  if (t!== 14) {\n    console.log(`Expected 14, got ${t}`)\n  }\n  if (chooseNum(16, 18)!== -1) {\n    console.log(`Expected -1, got ${chooseNum(16, 18)}`)\n  }\n}\n\nconst chooseNumTest9 = () => {\n  const t = chooseNum(12, 15)\n  if (t!== 14) {\n    console.log(`Expected 14, got ${t}`)\n  }\n  if (chooseNum(18, 19)!== -1) {\n    console.log(`Expected -1, got ${chooseNum(18, 19)}`)\n  }\n}\n\nconst chooseNumTest10 = () => {\n  const t = chooseNum(12, 15)\n  if (t!== 14) {\n    console.log(`Expected 14, got ${t}`)\n  }\n  if (chooseNum(19, 20)!== -1) {\n    console.log(`Expected -1, got ${chooseNum(19, 20)}`)\n  }\n}\n\nconst chooseNumTest11 = () => {\n  const t = chooseNum(12, 15)\n  if (t!== 14) {\n    console.log(`Expected 14, got ${t}`)\n  }\n  if (chooseNum(20, 21)!== -1) {\n    console.log(`Expected -1, got ${chooseNum(20, 21)}`)\n  }\n}\n\nconst chooseNumTest12 = () => {\n  const t = chooseNum(12, 15)\n  if (t!== 14) {\n    console.log(`Expected 14, got ${t}`)\n  }\n  if (chooseNum(21, 22)!== -1) {\n    console.log(`Expected -1, got ${chooseNum(21, 22)}`)\n  }\n}\n\nconst chooseNumTest13 = () => {\n  const t = chooseNum(12, 15)\n  if (t!== 14) {\n    console.log(`Expected 14, got ${t}`)\n  }\n  if (chooseNum(22, 23)!== -1) {\n    console.log(`Expected -1, got ${chooseNum(22, 23)}`)\n  }\n}\n\nconst chooseNumTest14"}
{"task_id": "JavaScript/103", "prompt": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const num = n + m;\n  const average = Math.round(num / 2);\n  const roundedAverage = Math.round(average);\n  const diff = num - roundedAverage;\n  if (diff <= 0) {\n    return roundedAverage;\n  }\n  return -1;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const nums = [...x].map(x => x.toString().replace(/\\D/g, ''));\n  const result = nums.filter((x) => x.length > 1);\n  return result;\n}\n\nconst uniqueDigits = (x) => {\n  const nums = [...x].map(x => x.toString().replace(/\\D/g, ''));\n  const result = nums.filter((x) => x.length > 1);\n  return result;\n}\n\nconsole.log(uniqueDigits([15, 33, 1422, 1])); // [1, 15, 33]\nconsole.log(uniqueDigits([152, 323, 1422, 10])); // []\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  return arr.map((x, i) => {\n    return (x + \" \")\n     .split(\" \")\n     .reverse()\n     .map(str => str.slice(0, 1))\n     .join(\"\")\n  })\n};\n\nconst byName = (arr) => {\n  return arr.map((x, i) => {\n    return (x + \" \")\n     .split(\" \")\n     .reverse()\n     .join(\" \")\n  })\n};\n\nconst reverseByLength = (arr) => {\n  return arr.reverse().slice(0, 9)\n}\n\nconst main = () => {\n  const arr = [\n    \"one\",\n    \"two\",\n    \"three\",\n    \"four\",\n    \"five\",\n    \"six\",\n    \"seven\",\n    \"eight\",\n    \"nine\",\n  ]\n  const reverseArray = [\n    \"eight\",\n    \"five\",\n    \"four\",\n    \"three\",\n    \"two\",\n    \"one\",\n    \"six\",\n    \"seven\",\n  ]\n  console.log(byLength(arr))\n  console.log(reverseByLength(arr))\n  console.log(byName(arr))\n  console.log(reverseByName(arr))\n  console.log(reverseByLength(reverseByLength(arr)))\n};\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const nIsEven = n % 2 === 0;\n  const nIsOdd = n % 2!== 0;\n  const nIsEvens = f(n - nIsEven);\n  const nIsOdds = f(n - nIsOdd);\n  const nIsEvens = [...nIsEvens,...nIsOdds];\n  const nIsOdds = [...nIsOdds,...nIsEvens];\n  return [...nIsEvens,...nIsOdds];\n};\n\nf(10);\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  if (n <= 0) return (0, 0)\n\n  let oddCount = 0\n  let evenCount = 0\n  let ret = []\n  for (let i = 1; i <= n; i++) {\n    let num = i\n    while (num > 0) {\n      if (num % 2 === 0) {\n        ret.push(num)\n        evenCount++\n      } else {\n        oddCount++\n      }\n      num /= 2\n    }\n  }\n\n  return (ret.length, evenCount + oddCount)\n}\n\nexport default evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Counts the number of numbers in the array which has a sum of Digits > 0.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums2 = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/*\n  Write a function to check whether the number is a Palindrome.\n  >>> isPalindrome(1)\n  False\n  >>> isPalindrome(2)\n  True\n  >>> isPalindrome(3)\n  True\n  >>> isPalindrome(2147483647)\n  True\n  >>> isPalindrome(2147483648)\n  False\n  */\nconst isPalindrome = (num) => {\n  let str = String(num);\n  let reverseStr = str.split('').reverse().join('');\n  return str === reverseStr;\n}\n\n/*\n  Write a function to check whether the number is a Rotunmber\n  >>> isRotunmber(1)\n  False\n  >>> isRotunmber(2)\n  False\n  >>> isRotunmber(3)\n  False\n  >>> isRotunmber(2147483647)\n  False\n  >>> isRotunmber(2147483648)\n  True\n  */\nconst isRotunmber = (num) => {\n  let str = String(num);\n  return (str.length === 3 && str.substring(0, 1) === str.substring(str.length - 1));\n}\n\n/*\n  Write a function to check whether the number is a Numbber\n  >>> isNumber(1)\n  False\n  >>> isNumber(2)\n  True\n  >>> isNumber(3)\n  True\n  >>> isNumber(2147483647)\n  True\n  >>> isNumber(2147483648)\n  False\n  */\nconst isNumber = (num) => {\n  let str = String(num);\n  return /^[0-9]+$/.test(str);\n}\n\nconst isPalindrome2 = (num) => {\n  let str = String(num);\n  return str.split('').reverse().join('') === str;\n}\n\nconst isRotunmber2 = (num) => {\n  let str = String(num);\n  return str.substring(0, 1) === str.substring(str.length - 1);\n}\n\nconst isNumber2 = (num) => {\n  let str = String(num);\n  return /^[0-9]+$/.test(str);\n}\n\n/*\n  Write a function to check whether the number is a Numbber\n  >>> isNumber(1)\n  False\n  >>> isNumber(2)\n  True\n  >>> isNumber(3)\n  True\n  >>> isNumber(2147483647)\n  True\n  >>> isNumber(2147483648)\n  False\n  */\nconst isNumber3 = (num) => {\n  let str = String(num);\n  return /^[0-9]+$/.test(str);\n}\n\nmodule.exports = {\n  countNums,\n  countNums2,\n  isPalindrome,\n  isPalindrome2,\n  isRotunmber,\n  isRotunmber2,\n  isNumber,\n  isNumber2,\n  isNumber3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2], ..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2],..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  let i, j;\n  for (i = 0; i < len; i++) {\n    for (j = 0; j < len - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        const t = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = t;\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconst isPossible = moveOneBall([3, 5, 4, 1, 2]);\nconsole.log(`${isPossible}`);\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return 'NO'\n  }\n  const length = lst1.length\n  const arr1 = [...lst1]\n  const arr2 = [...lst2]\n  let arr = [...lst1]\n  let temp = arr2[0]\n  let flag = true\n  for (let i = 0; i < length; i++) {\n    if (arr[i] > temp) {\n      temp = arr[i]\n      arr[i] = arr2[i]\n    } else if (arr[i] < temp) {\n      arr[i] = arr1[i]\n      arr2[i] = temp\n      flag = false\n    }\n  }\n  if (flag) {\n    return 'YES'\n  } else {\n    return 'NO'\n  }\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  //convert string to a dictionary\n  const words = test.split(' ');\n  const dictionary = {};\n  words.forEach(word => {\n    if (!dictionary[word]) {\n      dictionary[word] = 1;\n    } else {\n      dictionary[word]++;\n    }\n  });\n\n  const sortedKeys = Object.keys(dictionary).sort((a, b) => {\n    return dictionary[a] - dictionary[b];\n  });\n\n  return sortedKeys.reduce((a, b) => {\n    a[b] = dictionary[b];\n    return a;\n  }, {});\n};\n\nmodule.exports = {\n  histogram\n};<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let sLength = s.length\n  let sReverse = s.split('').reverse().join('')\n  let cLength = c.length\n\n  if (sLength < cLength) {\n    return undefined\n  }\n\n  let sReverseLength = sReverse.length\n  let sReverseFirstChar = sReverse[0]\n  let sReverseLastChar = sReverse[sReverseLength - 1]\n  let cLastChar = c[cLength - 1]\n\n  let cFirstChar = c[0]\n  let cLastChar = c[cLength - 1]\n\n  let cFirstCharIndex = 0\n  let cLastCharIndex = cLength - 1\n\n  while (cLastCharIndex >= cFirstCharIndex) {\n    if (sReverseLastChar === cLastChar) {\n      sReverse = sReverse.substr(0, sReverseLength - 1)\n      break\n    }\n    cLastCharIndex--\n  }\n\n  if (sReverseLastChar!== cLastChar) {\n    return undefined\n  }\n\n  while (cLastCharIndex >= cFirstCharIndex) {\n    if (sReverseFirstChar === cFirstChar) {\n      s = s.substr(1, sLength - 1)\n      break\n    }\n    cLastCharIndex--\n  }\n\n  if (cFirstChar!== cLastChar) {\n    return undefined\n  }\n\n  return [s, true]\n}\n\nmodule.exports = reverseDelete\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let output = []\n  for (let i = 0; i < lst.length; i++) {\n    let str = lst[i]\n    let count = 0\n    for (let j = 0; j < str.length; j++) {\n      if (str[j] % 2 === 1) {\n        count++\n      }\n    }\n    output.push(`the number of odd elements ${count}n the str${i + 1} of the ${i + 1}put.`)\n  }\n  return output\n}\n\nmodule.exports = oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = Number.MAX_VALUE;\n  let sum = 0;\n  let minSumIndex = 0;\n  let start = 0;\n  let end = 0;\n  let i = 0;\n  let j = 0;\n  for (i = 0; i < nums.length; i++) {\n    sum = 0;\n    for (j = start; j < end; j++) {\n      sum += nums[j];\n    }\n    if (sum < minSum) {\n      minSum = sum;\n      minSumIndex = i;\n      start = end;\n    }\n    if (sum == 0) {\n      end = i;\n    }\n  }\n  return minSum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let bucket = 0;\n    let i = 0;\n    while (i < grid.length) {\n        let j = 0;\n        while (j < grid[i].length) {\n            if (grid[i][j] === 1) {\n                bucket += capacity;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return bucket;\n}<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const arrLength = arr.length\n  const sortedArray = new Array(arrLength)\n\n  const i = 0\n  const j = arrLength - 1\n  const isSorted = (i < j)\n\n  while (isSorted) {\n    if (arr[i] > arr[j]) {\n      sortedArray[i] = arr[i]\n      i++\n      j--\n    } else if (arr[i] < arr[j]) {\n      sortedArray[j] = arr[j]\n      j--\n    } else {\n      sortedArray[i] = arr[i]\n      i++\n      j--\n    }\n    isSorted = (i < j)\n  }\n  return sortedArray\n}\n\nmodule.exports = sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    let words = [];\n    let wordCount = 0;\n    let wordStart = 0;\n    let i = 0;\n    let char = \"\";\n    while(i < s.length) {\n        char = s.charAt(i);\n        if(char.isSpace()) {\n            if(wordCount > 0) {\n                words.push(s.substring(wordStart, i));\n                wordStart = i + 1;\n                wordCount = 0;\n            }\n        } else if(wordCount < n) {\n            wordCount += 1;\n        }\n        i += 1;\n    }\n    if(wordCount > 0) {\n        words.push(s.substring(wordStart, i));\n    }\n    return words;\n}\n\nconsole.log(selectWords(\"Mary had a little lamb\", 4)); // [\"little\"]\nconsole.log(selectWords(\"Mary had a little lamb\", 3)); // [\"Mary\"]\nconsole.log(selectWords(\"simple white space\", 2)); // []\nconsole.log(selectWords(\"Hello world\", 4)); // [\"world\"]\nconsole.log(selectWords(\"Uncle sam\", 3)); // [\"Uncle\"]\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n    let closest = word.toUpperCase()\n    let vowelFound = false\n    let vowelCount = 0\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.replace(/[^a-zA-Z]/g, \"\")\n    closest = closest.toUpperCase()\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.replace(/[^a-zA-Z]/g, \"\")\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.toUpperCase()\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.replace(/[^a-zA-Z]/g, \"\")\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.toUpperCase()\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.replace(/[^a-zA-Z]/g, \"\")\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.toUpperCase()\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.replace(/[^a-zA-Z]/g, \"\")\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.toUpperCase()\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.replace(/[^a-zA-Z]/g, \"\")\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.toUpperCase()\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.replace(/[^a-zA-Z]/g, \"\")\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.toUpperCase()\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.replace(/[^a-zA-Z]/g, \"\")\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.toUpperCase()\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.replace(/[^a-zA-Z]/g, \"\")\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    closest = closest.toUpperCase()\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    while (closest.indexOf(\" \") > -1) {\n        closest = closest.replace(\" \", \"\")\n    }\n\n    while (closest."}
{"task_id": "JavaScript/119", "prompt": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const len = lst.length\n  const arr = []\n  for (let i = 0; i < len; i++) {\n    const char = lst[i]\n    const isParen = char === '(' || char === ')'\n    if (isParen) {\n      arr.push(char)\n    } else {\n      const match = arr.filter(s => s === char)\n      if (match.length === 0) {\n        return 'No'\n      }\n    }\n  }\n  return 'Yes'\n}\n\n/*\n  matchParens(['()', ')', '(()']) == 'Yes'\n  matchParens(['(()', ')', '()']) == 'No'\n  matchParens(['()', ')', '(()', ')', '(())']) == 'No'\n  matchParens(['())', '(())', '(()())']) == 'Yes'\n  matchParens(['())', '()()', '()']) == 'Yes'\n  matchParens(['()', '())', '(()')]) == 'Yes'\n  matchParens(['()', ')', '(()']) == 'No'\n  matchParens(['()', ')', '(()', ')']) == 'No'\n  matchParens(['(())', '()()', '(())', '()()']) == 'No'\n  matchParens(['(())', '()()', '()']) == 'No'\n  matchParens(['()', ')', '(()', ')', '())']) == 'Yes'\n  matchParens(['())', '()()', '(())', '())', '())']) == 'No'\n  matchParens(['()', ')', '(()', ')', '())', '())']) == 'Yes'\n  matchParens(['())', '()()', '(())', '()()', '()']) == 'Yes'\n  matchParens(['())', '()()', '())', '())', '()']) == 'No'\n  matchParens(['())', '()()', '())', '())', '())', ')()']) == 'Yes'\n  matchParens(['())', '()()', '())', '())', '())', ')()']) == 'Yes'\n  matchParens(['())', '()()', '())', '())', '())', ')()']) == 'Yes'\n  matchParens(['())', '()()', '())', '())', '())', ')()']) == 'No'\n  matchParens(['())', '()()', '())', '())', '())', '())', '()']) == 'No'\n  matchParens(['())', '()()', '())', '())', '())', '())', '())', ')()']) == 'Yes'\n  matchParens(['())', '()()', '())', '())', '())', '())', '())', ')()']) == 'No'\n  matchParens(['())', '()()', '())', '())', '())', '())', '())', '())', ')()']) == 'Yes'\n  matchParens(['())', '()()', '())', '())', '())', '())', '())', '())', '()()']) == 'No'\n  matchParens(['())', '()()', '())', '())', '())', '())', '())', '())', '())', ')()']) == 'No'\n  matchParens(['())', '()()', '())', '())', '())', '())', '())', '())', '())', ')()']) == 'No'\n  matchParens(['())', '()()', '())', '())', '())', '())', '())', '())', '())', ')()']) == 'Yes'\n  matchParens(['())', '()()', '())', '())', '())', '())', '())', '())', '())', ')()']) == 'No'\n  matchParens(['())', '()()', '())', '())', '())', '())', '())', '())', '())', ')()']) == 'No'\n  matchParens(['())', '()()', '())', '())', '())', '())', '())', '())', '())', ')()']) == 'No'\n  matchParens(['())', '()()', '())', '())', '())', '())', '())', '())', '())', ')()']) == 'Yes'\n  matchParens(['())', '()()', '())', '())', '())', '())', '())', '())', '())', ')()']) == 'No'\n  matchParens(['())', '()()', '())', '())', '())', '())', '())', '())', '())', ')()']) == 'No'\n  matchParens(['())', '()()', '())', '())', '())', '())', '())', '())', '())', ')()']) == 'Yes'\n  matchParens(['())', '()()', '())', '())', '())', '"}
{"task_id": "JavaScript/120", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    let sortArr = arr.slice();\n    sortArr.sort((a, b) => a - b);\n    return sortArr.slice(0, k);\n};\n\n//export default maximum;<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n    return lst.reduce((acc, num) => acc + num, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let result = 0\n  let start = 0\n  while (start < k) {\n    let currentElement = arr[start]\n    let next = start + 1\n    while (next < k) {\n      currentElement += arr[next]\n      next++\n    }\n    result += currentElement\n    start++\n  }\n  return result\n}\n\nexport {\n  addElements,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n    const odd = new Set();\n    const collatz = getCollatz(n);\n    collatz.forEach((x) => odd.add(x));\n    return odd.values();\n}\n\nconst getCollatz = (n) => {\n    const collatz = [];\n    const isOdd = (x) => x % 2 === 1;\n    const next = (x) => x + (x % 2 === 0? 3 : 1);\n    collatz.push(n);\n    while(next(collatz[0])!== 1) {\n        collatz.unshift(next(collatz[0]));\n    }\n    return collatz;\n}\n\nmodule.exports = {\n    getOddCollatz\n}<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateArray = date.split('-')\n  const dateArrayLength = dateArray.length\n\n  const dateCheck = [\n    parseInt(dateArray[0]),\n    parseInt(dateArray[1]),\n    parseInt(dateArray[2])\n  ]\n\n  const validDateCheck = [\n    Date.getFullYear(),\n    Date.getMonth(),\n    Date.getDate()\n  ]\n\n  if (dateCheck[2] >= 1 && dateCheck[2] <= 31 && dateCheck[1] >= 1 && dateCheck[1] <= 12) {\n    if (dateCheck[2] <= validDateCheck[2] && dateCheck[1] <= validDateCheck[1] && dateCheck[0] <= validDateCheck[0]) {\n      return true\n    } else {\n      return false\n    }\n  } else {\n    return false\n  }\n}\n\nconst isNumber = (input) => {\n  if (!input) {\n    return false\n  }\n\n  return /^\\d+$/.test(input)\n}\n\nexport default {\n  isNumber,\n  validDate\n}\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1, ... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/);\n};\n\nconst toTitleCase = (txt) => {\n  return txt.replace(/\\w\\S*/g, (txt) => {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n\nconst toLowerCase = (txt) => {\n  return txt.toLowerCase();\n};\n\nconst toUpperCase = (txt) => {\n  return txt.toUpperCase();\n};\n\nconst isVowel = (char) => {\n  return char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u';\n};\n\nconst removeVowels = (txt) => {\n  return txt.replace(/[aeiou]/g, '');\n};\n\nconst getFirstWord = (txt) => {\n  return txt.split(' ')[0];\n};\n\nconst getLastWord = (txt) => {\n  return txt.split(' ')[txt.split(' ').length - 1];\n};\n\nconst isValidName = (name) => {\n  return /^[A-Za-z]*$/.test(name);\n};\n\nconst isValidEmail = (email) => {\n  return /^[A-Za-z0-9_\\-\\.]+@[A-Za-z0-9_\\-\\.]+\\.[A-Za-z]{2,4}$/.test(email);\n};\n\nconst isValidIP = (ip) => {\n  return /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/.test(ip);\n};\n\nconst isValidPhone = (phone) => {\n  return /^[0-9\\-\\(\\)]+$/.test(phone);\n};\n\nconst isValidDate = (date) => {\n  return /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(date);\n};\n\nconst isValidNumber = (number) => {\n  return /^[0-9]+$/.test(number);\n};\n\nconst isValidColor = (color) => {\n  return /^[0-9a-f]{3}$/.test(color);\n};\n\nconst isValidURL = (url) => {\n  return /^(http|https|ftp|rtsp|mms|mmst|mmsh|rtspu|rtp|rtmp|rtmpt|rtspt|rtpz|rtspz|rtmpz|rtmptz|rtsptz|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rtp2t|rtmp2t|rtmpt2t|rtsp2t|rt"}
{"task_id": "JavaScript/126", "prompt": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const res = []\n  for (let i = 0; i < lst.length; i++) {\n    let c = lst[i]\n    let j = i - 1\n    while (j >= 0) {\n      if (lst[j] < c) {\n        return false\n      }\n      j--\n    }\n    res.push(c)\n  }\n  return true\n}\n\n/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in DescENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ false\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 2, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 2, 2, 3, 3]) ➞ true\n  isSorted([1, 2, 2, 2, 2, 2, 2, 3, 3, 3]) ➞ true\n  isSorted([1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) ➞ true\n  */\nconst isSortedDesc = (lst) => {\n  const res = []\n  for (let i = lst.length - 1; i >= 0; i--) {\n    let c = lst[i]\n    let j = i + 1\n    while (j < lst.length) {\n      if (lst[j] > c) {\n        return false\n      }\n      j++\n    }\n    res.push(c)\n  }\n  return true\n}\n\n/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in ASCEndInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ false\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ false\n  isSorted([1, 2, 2, 2, 3, 3, 4]) ➝ false\n  isSorted([1, 2, 2, 2, 2, 3, 3, 4]) ➝ false\n  isSorted([1, 2, 2, 2, 2, 2, 3, 3, 3]) ➝ false\n  isSorted([1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3]) ➝ false\n  */\nconst isSortedAsc = (lst) => {\n  const res = []\n  for (let i = 0; i < lst.length; i++) {\n    let c = lst[i]\n    let j = i + 1\n    while (j < lst.length) {\n      if (lst[j] < c) {\n        return false\n      }\n      j++\n    }\n    res.push(c)\n  }\n  return true\n}\n\nexport {\n  isSorted,\n  isSortedDesc,\n  isSortedAsc\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return \"NO\";\n  }\n  if (interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const len = Math.abs(interval1[1] - interval1[0]) + Math.abs(interval2[1] - interval2[0]);\n  if (Math.floor(len)!== len) {\n    return \"NO\";\n  }\n  return \"YES\";\n};\n\nmodule.exports = intersection;\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (!arr ||!arr.length) {\n    return null\n  }\n  let i = 0\n  let sum = 1\n  while (i < arr.length) {\n    if (arr[i] > 0) {\n      sum *= arr[i]\n    } else if (arr[i] < 0) {\n      sum *= -1 * arr[i]\n    }\n    i++\n  }\n  return sum\n}\n\nexport default prodSigns\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    let r = grid[0].length - 1\n    let c = grid.length - 1\n    let min_path = [grid[0][0]]\n    let visited = new Array(r)\n    let visited[0] = new Array(c)\n    for(let i = 1; i < r; i++){\n        for(let j = 0; j < c; j++){\n            if(grid[i][j] === k && visited[i-1][j] === 0){\n                min_path.push(grid[i][j])\n                visited[i][j] = 1\n            }\n        }\n    }\n    return min_path\n}\n\nexport default minPath\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    const fib = fibOnaccI;\n    const fibArr = Array.from(fib(n));\n    return fibArr.reverse();\n};\n\nconsole.log(tri(4));<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let nDigits = n.toString().split('').reverse().reduce((a, b) => {\n    return a + (nDigits.length - 1 - (b - '0').length)\n  })\n  return (nDigits.length % 2 === 1)? 0 : nDigits.length\n}\n\nconst main = () => {\n  console.log(digits(5))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n  const n = string.length\n  let count = 0\n  for (let i = 0; i < n; ++i) {\n    if (string[i] === '[') {\n      count++\n    }\n    if (string[i] === ']') {\n      count--\n    }\n    if (count === 0) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  Auxilary function to generate a random string of length n.\n  */\nfunction genRandStr (n) {\n  let r = ''\n  for (let i = 0; i < n; ++i) {\n    r += Math.floor(Math.random() * 10)\n  }\n  return r\n}\n\n/*\n  Returns a new string with all of the letters reversed.\n  */\nfunction reverse (str) {\n  return str.split('').reverse().join('')\n}\n\n/*\n  Returns a new string with the letters in the upper case.\n  */\nfunction upper (str) {\n  return str.split('').map(x => x.toUpperCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the lower case.\n  */\nfunction lower (str) {\n  return str.split('').map(x => x.toLowerCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstUpper (str) {\n  return str.split('').map(x => x.toUpperCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first lowercase.\n  */\nfunction firstLower (str) {\n  return str.split('').map(x => x.toLowerCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first lowercase.\n  */\nfunction firstUpper (str) {\n  return str.split('').map(x => x.toUpperCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstLower (str) {\n  return str.split('').map(x => x.toLowerCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstUpper (str) {\n  return str.split('').map(x => x.toUpperCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstLower (str) {\n  return str.split('').map(x => x.toLowerCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstUpper (str) {\n  return str.split('').map(x => x.toUpperCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstLower (str) {\n  return str.split('').map(x => x.toLowerCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstUpper (str) {\n  return str.split('').map(x => x.toUpperCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstLower (str) {\n  return str.split('').map(x => x.toLowerCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstUpper (str) {\n  return str.split('').map(x => x.toUpperCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstLower (str) {\n  return str.split('').map(x => x.toLowerCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstUpper (str) {\n  return str.split('').map(x => x.toUpperCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstLower (str) {\n  return str.split('').map(x => x.toLowerCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstUpper (str) {\n  return str.split('').map(x => x.toUpperCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstLower (str) {\n  return str.split('').map(x => x.toLowerCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstUpper (str) {\n  return str.split('').map(x => x.toUpperCase()).join('')\n}\n\n/*\n  Returns a new string with the letters in the first uppercase.\n  */\nfunction firstLower (str) {\n  return str."}
{"task_id": "JavaScript/133", "prompt": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const squares = lst.map(i => i * i);\n  return squares.reduce((a, b) => a + b);\n};\n\nconst test = {\n  sumSquares([1, 2, 3]),\n  sumSquares([1, 4, 9]),\n  sumSquares([1, 3, 5, 7]),\n  sumSquares([1.4, 4.2, 0]),\n  sumSquares([-2.4, 1, 1]),\n};\n\nconst {\n  sumSquares,\n} = require('./sumSquares');\n\ntest.sumSquares([1, 2, 3]).should.be.equal(14);\ntest.sumSquares([1, 4, 9]).should.be.equal(98);\ntest.sumSquares([1, 3, 5, 7]).should.be.equal(84);\ntest.sumSquares([1.4, 4.2, 0]).should.be.equal(29);\ntest.sumSquares([-2.4, 1, 1]).should.be.equal(6);\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt === null || txt === undefined) return false;\n    return txt.lastIndexOf(\"a\")!== -1 &&\n        txt.lastIndexOf(\"b\")!== -1 &&\n        txt.lastIndexOf(\"c\")!== -1 &&\n        txt.lastIndexOf(\"d\")!== -1 &&\n        txt.lastIndexOf(\"e\")!== -1 &&\n        txt.lastIndexOf(\"f\")!== -1 &&\n        txt.lastIndexOf(\"g\")!== -1 &&\n        txt.lastIndexOf(\"h\")!== -1 &&\n        txt.lastIndexOf(\"i\")!== -1 &&\n        txt.lastIndexOf(\"j\")!== -1 &&\n        txt.lastIndexOf(\"k\")!== -1 &&\n        txt.lastIndexOf(\"l\")!== -1 &&\n        txt.lastIndexOf(\"m\")!== -1 &&\n        txt.lastIndexOf(\"n\")!== -1 &&\n        txt.lastIndexOf(\"o\")!== -1 &&\n        txt.lastIndexOf(\"p\")!== -1 &&\n        txt.lastIndexOf(\"q\")!== -1 &&\n        txt.lastIndexOf(\"r\")!== -1 &&\n        txt.lastIndexOf(\"s\")!== -1 &&\n        txt.lastIndexOf(\"t\")!== -1 &&\n        txt.lastIndexOf(\"u\")!== -1 &&\n        txt.lastIndexOf(\"v\")!== -1 &&\n        txt.lastIndexOf(\"w\")!== -1 &&\n        txt.lastIndexOf(\"x\")!== -1 &&\n        txt.lastIndexOf(\"y\")!== -1 &&\n        txt.lastIndexOf(\"z\")!== -1;\n};\n\n/*\n  Check if a String Is A Word\n  Examples:\n  isWord(\"apple pie\") ➞ true\n  isWord(\"apple pi e\") ➞ false\n  isWord(\"apple pi e \") ➞ false\n  isWord(\"\") ➞ true\n  */\nconst isWord = (txt) => {\n    if (txt === null || txt === undefined) return false;\n    return txt.indexOf(\" \") === -1 &&\n        txt.indexOf(\".\") === -1 &&\n        txt.indexOf(\"-\") === -1 &&\n        txt.indexOf(\";\") === -1 &&\n        txt.indexOf(\",\") === -1 &&\n        txt.indexOf(\"(\") === -1 &&\n        txt.indexOf(\")\") === -1 &&\n        txt.indexOf(\"[\") === -1 &&\n        txt.indexOf(\"]\") === -1 &&\n        txt.indexOf(\"{\") === -1 &&\n        txt.indexOf(\"}\") === -1 &&\n        txt.indexOf(\"+\") === -1 &&\n        txt.indexOf(\"/\") === -1 &&\n        txt.indexOf(\"*\") === -1 &&\n        txt.indexOf(\"^\") === -1 &&\n        txt.indexOf(\"~\") === -1 &&\n        txt.indexOf(\"<\") === -1 &&\n        txt.indexOf(\">\") === -1 &&\n        txt.indexOf(\"=\") === -1 &&\n        txt.indexOf(\"|\") === -1 &&\n        txt.indexOf(\"\\\\\") === -1 &&\n        txt.indexOf(\"#\") === -1 &&\n        txt.indexOf(\"&\") === -1 &&\n        txt.indexOf(\"?\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"#\") === -1 &&\n        txt.indexOf(\"*\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"~\") === -1 &&\n        txt.indexOf(\";\") === -1 &&\n        txt.indexOf(\"%\") === -1 &&\n        txt.indexOf(\"^\") === -1 &&\n        txt.indexOf(\"|\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -1 &&\n        txt.indexOf(\"`\") === -1 &&\n        txt.indexOf(\"'\") === -"}
{"task_id": "JavaScript/135", "prompt": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const length = arr.length;\n  let currentIndex = 0;\n  let currentMax = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < length; i++) {\n    if (arr[i] > currentMax) {\n      currentMax = arr[i];\n      maxIndex = currentIndex;\n    }\n    currentIndex++;\n  }\n  if (currentMax > length - 1) {\n    return -1;\n  }\n  return maxIndex;\n};\n\n/*\n  Gets the index of the element that is in the given array\n  that is less THAn or Equal to the given element.\n  Returns -1 if no element can be found\n  */\nconst getLessThanIndex = (arr, element) => {\n  const length = arr.length;\n  let currentIndex = 0;\n  let currentMax = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < length; i++) {\n    if (arr[i] <= element && arr[i] > currentMax) {\n      currentMax = arr[i];\n      maxIndex = currentIndex;\n    }\n    currentIndex++;\n  }\n  if (currentMax === -1) {\n    return -1;\n  }\n  return maxIndex;\n};\n\n/*\n  Gets the index of the element that is in the given array\n  that is greater THAn or Equal to the given element.\n  Returns -1 if no element can be found\n  */\nconst getGreaterThanIndex = (arr, element) => {\n  const length = arr.length;\n  let currentIndex = 0;\n  let currentMax = -1;\n  let maxIndex = -1;\n  for (let i = 0; i < length; i++) {\n    if (arr[i] >= element && arr[i] > currentMax) {\n      currentMax = arr[i];\n      maxIndex = currentIndex;\n    }\n    currentIndex++;\n  }\n  if (currentMax === -1) {\n    return -1;\n  }\n  return maxIndex;\n};\n\nconst getMaxIndex = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxIndex) {\n      maxIndex = arr[i];\n    }\n  }\n  return maxIndex;\n};\n\nconst getMinIndex = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < minIndex) {\n      minIndex = arr[i];\n    }\n  }\n  return minIndex;\n};\n\nconst getMinElement = (arr) => {\n  let minElement = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n    }\n  }\n  return minElement;\n};\n\nconst getMaxElement = (arr) => {\n  let maxElement = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxElement) {\n      maxElement = arr[i];\n    }\n  }\n  return maxElement;\n};\n\nconst findMax = (arr) => {\n  const length = arr.length;\n  let max = arr[0];\n  for (let i = 0; i < length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\nconst findMin = (arr) => {\n  const length = arr.length;\n  let min = arr[0];\n  for (let i = 0; i < length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\nconst findMaxIndex = (arr) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxIndex) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst findMinIndex = (arr) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < minIndex) {\n      minIndex = i;\n    }\n  }\n  return minIndex;\n};\n\nconst findMaxElement = (arr) => {\n  let maxElement = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxElement) {\n      maxElement = arr[i];\n    }\n  }\n  return maxElement;\n};\n\nconst findMinElement = (arr) => {\n  let minElement = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < minElement) {\n      minElement = arr[i];\n    }\n  }\n  return minElement;\n};\n\nconst findMaxByValue = (arr, value) => {\n  let maxIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === value && arr[i] > maxIndex) {\n      maxIndex = i;\n    }\n  }\n  return maxIndex;\n};\n\nconst findMinByValue = (arr, value) => {\n  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if ("}
{"task_id": "JavaScript/136", "prompt": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = lst.sort((a, b) => a - b);\n  if (!a ||!b) {\n    return [null, null];\n  }\n  return [a, b];\n};\n\nmodule.exports = largestSmallestIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n  var numOne = a;\n  var numTwo = b;\n  if (typeof numOne == \"string\") {\n    numOne = parseFloat(numOne);\n  }\n  if (typeof numTwo == \"string\") {\n    numTwo = parseFloat(numTwo);\n  }\n  if (isNaN(numOne)) {\n    return numTwo;\n  }\n  if (isNaN(numTwo)) {\n    return numOne;\n  }\n  return numOne - numTwo;\n};\n\nconsole.log(compareOne(1, 2.5));\nconsole.log(compareOne(1, \"2,3\"));\nconsole.log(compareOne(\"5,1\", \"6\"));\nconsole.log(compareOne(\"1\", 1));<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n % 2 === 0) {\n    return true;\n  }\n  return false;\n};\n\n/*\n * Function\n *\n * Return true if the given number n can bE divided by sum of its\n * positive even number.\n *\n * Example\n *\n * isDivisibleBySumEven(6) == false\n * isDivisibleBySumEven(8) == true\n * isDivisibleBySumEven(12) == true\n * */\nconst isDivisibleBySumEven = (n) => {\n  if (isEqualToSumEven(n) === true) {\n    return true;\n  }\n  return false;\n};\n\n/*\n * Function\n *\n * Return true if the given number n can bE multiplied by sum of its\n * positive even number.\n *\n * Example\n *\n * isMulipleOfSumEven(6) == true\n * isMulipleOfSumEven(8) == true\n * isMulipleOfSumEven(12) == false\n * */\nconst isMulipleOfSumEven = (n) => {\n  if (isEqualToSumEven(n) === false) {\n    return false;\n  }\n  return true;\n};\n\n/*\n * Function\n *\n * Return true if the given number n can bE divided by sum of its\n * positive even number.\n *\n * Example\n *\n * isDivisibleBySumEven(6) == true\n * isDivisibleBySumEven(8) == true\n * isDivisibleBySumEven(12) == false\n * */\nconst isDivisibleBySumEven = (n) => {\n  if (isDivisibleBySumEven(n) === true) {\n    return true;\n  }\n  return false;\n};\n\n/*\n * Function\n *\n * Return true if the given number n can bE multiplied by sum of its\n * positive even number.\n *\n * Example\n *\n * isMulipleOfSumEven(6) == true\n * isMulipleOfSumEven(8) == true\n * isMulipleOfSumEven(12) == false\n * */\nconst isMulipleOfSumEven = (n) => {\n  if (isMulipleOfSumEven(n) === false) {\n    return false;\n  }\n  return true;\n};\n\n/*\n * Function\n *\n * Return true if the given number n can bE divided by sum of its\n * positive even number.\n *\n * Example\n *\n * isDivisibleBySumEven(6) == true\n * isDivisibleBySumEven(8) == true\n * isDivisibleBySumEven(12) == false\n * */\nconst isDivisibleBySumEven = (n) => {\n  if (isDivisibleBySumEven(n) === true) {\n    return true;\n  }\n  return false;\n};\n\n/*\n * Function\n *\n * Return true if the given number n can bE multiplied by sum of its\n * positive even number.\n *\n * Example\n *\n * isMulipleOfSumEven(6) == true\n * isMulipleOfSumEven(8) == true\n * isMulipleOfSumEven(12) == false\n * */\nconst isMulipleOfSumEven = (n) => {\n  if (isMulipleOfSumEven(n) === false) {\n    return false;\n  }\n  return true;\n};\n\nexport default {\n  isEqualToSumEven,\n  isDivisibleBySumEven,\n  isMulipleOfSumEven,\n  isDivisibleBySumEven\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) return 1;\n  return n * specialFactorial(n - 1);\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) return 1;\n  return n * specialFactorial(n - 1);\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) return 1;\n  return n * specialFactorial(n - 1);\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) return 1;\n  return n * specialFactorial(n - 1);\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) return 1;\n  return n * specialFactorial(n - 1);\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) return 1;\n  return n * specialFactorial(n - 1);\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) return 1;\n  return n * specialFactorial(n - 1);\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) return 1;\n  return n * specialFactorial(n - 1);\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) return 1;\n  return n * specialFactorial(n - 1);\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) return 1;\n  return n * specialFactorial(n - 1);\n}\n\n/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  "}
{"task_id": "JavaScript/140", "prompt": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const re = /\\s{2,}/g;\n  return text.replace(re,'');\n}\n\n/*\n  GivEn a sTring text, Add aLl sQuare Brackets, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wiTh sQuare Brackets. \n  \n  fixSpaces(\"Example\") == \"\\\"Example\\\"\"\n  fixSpaces(\"Example 1\") == \"\\\"Example\\\"1\"\n  fixSpaces(\" Example 2\") == \"\\\"Example\\\"2\"\n  fixSpaces(\" Example   3\") == \"\\\"Example\\\"3\"\n  */\nconst addSquareBrackets = (text) => {\n  const re = /\\s{2,}/g;\n  return `\"${text.replace(re, '\" \"')}\"`;\n}\n\nconst addBrackets = (text) => {\n  const re = /\\s{2,}/g;\n  return `${text.replace(re, '\"')}\"`;\n}\n\nconst getString = (text) => {\n  let result = addSquareBrackets(text);\n  return result;\n}\n\nconst getArray = (text) => {\n  let result = addBrackets(text);\n  return result;\n}\n\nconst getStringArray = (text) => {\n  let result = getString(text);\n  return result;\n}\n\nconst getArrayString = (text) => {\n  let result = getArray(text);\n  return result;\n}\n\nmodule.exports = {\n  getString,\n  getArray,\n  getStringArray,\n  getArrayString\n}<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const valid_characters = /[\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s\\w\\d\\s"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    let sum = 0;\n    for(let x of lst) {\n        sum += Math.pow(x, 2);\n    }\n    return sum;\n};\n\nconst multiply = (a, b) => {\n    return a * b;\n}\n\nconst square = (x) => {\n    return x * x;\n}\n\nconst squaredSum = (lst) => {\n    return sumSquares(lst);\n}\n\nconst squaredSumSquared = (lst) => {\n    return squaredSum(lst);\n}\n\nconst sum = (lst) => {\n    let sum = 0;\n    for(let x of lst) {\n        sum += x;\n    }\n    return sum;\n}\n\nconst squaredSumOfSquares = (lst) => {\n    return squaredSumSquared(lst);\n}\n\nconst squareSumOfSquares = (lst) => {\n    return squareSumSquared(lst);\n}\n\nconst squaredSumOfSquaresSquared = (lst) => {\n    return squaredSumOfSquares(lst);\n}\n\nconst sumSquared = (lst) => {\n    let sum = 0;\n    for(let x of lst) {\n        sum += square(x);\n    }\n    return sum;\n}\n\nconst sumSquaredSum = (lst) => {\n    return sumSquared(lst);\n}\n\nconst sumSquaredSumSquared = (lst) => {\n    return sumSquaredSumSquared(lst);\n}\n\nconst sumSquaredSumSquaredSquared = (lst) => {\n    return sumSquaredSumSquaredSquared(lst);\n}\n\nconst squareSum = (lst) => {\n    return sumSquared(lst);\n}\n\nconst squareSumSum = (lst) => {\n    return squareSumSumSquared(lst);\n}\n\nconst squareSumSumSquared = (lst) => {\n    return squareSumSumSquaredSquared(lst);\n}\n\nconst squareSumSumSquaredSquared = (lst) => {\n    return squareSumSumSquaredSquaredSquared(lst);\n}\n\nconst sumSumSquared = (lst) => {\n    return sumSquaredSumSquared(lst);\n}\n\nconst sumSumSquaredSum = (lst) => {\n    return sumSquaredSumSumSquared(lst);\n}\n\nconst sumSumSquaredSumSquared = (lst) => {\n    return sumSquaredSumSumSquaredSquared(lst);\n}\n\nconst sumSumSquaredSumSquaredSquared = (lst) => {\n    return sumSquaredSumSumSquaredSquaredSquared(lst);\n}\n\nconst squaredSumSumSquaredSquaredSum = (lst) => {\n    return squaredSumSumSquaredSumSquaredSquared(lst);\n}\n\nconst squaredSumSumSquaredSumSquaredSum = (lst) => {\n    return squaredSumSumSumSquaredSumSquaredSum(lst);\n}\n\nconst squaredSumSumSquaredSumSquaredSum = (lst) => {\n    return squaredSumSumSumSquaredSumSquaredSum(lst);\n}\n\nconst squaredSumSumSquaredSumSquaredSum = (lst) => {\n    return squaredSumSumSumSquaredSumSquaredSum(lst);\n}\n\nconst squaredSumSumSquaredSumSquaredSumSquared = (lst) => {\n    return squaredSumSumSumSquaredSumSquaredSumSquared(lst);\n}\n\nconst squaredSumSumSquaredSumSquaredSumSquared = (lst) => {\n    return squaredSumSumSumSquaredSumSquaredSumSquared(lst);\n}\n\nconst squaredSumSumSquaredSumSquaredSumSquared = (lst) => {\n    return squaredSumSumSumSquaredSumSquaredSumSquared(lst);\n}\n\nconst squaredSumSumSquaredSumSquaredSumSquared = (lst) => {\n    return squaredSumSumSumSquaredSumSquaredSumSquared(lst);\n}\n\nconst squaredSumSumSquaredSumSquaredSumSquared = (lst) => {\n    return squaredSumSumSumSquaredSumSquaredSumSquared(lst);\n}\n\nconst squaredSumSumSquaredSumSquaredSumSquared = (lst) => {\n    return squaredSumSumSumSquaredSumSquaredSumSquared(lst);\n}\n\nconst squaredSumSumSquaredSumSquaredSumSquared = (lst) => {\n    return squaredSumSumSumSquaredSumSquaredSumSquared(lst);\n}\n\nconst squaredSumSumSquaredSumSquaredSumSquared = (lst) => {\n    return squaredSumSumSumSquaredSumSquaredSumSquared(lst);\n}\n\nconst squaredSumSumSquaredSumSquaredSumSquared = (lst) => {\n    return squaredSumSumSumSquaredSumSquaredSumSquared(lst);\n}\n\nconst squaredSumSumSquaredSumSquaredSumSquared = (lst) => {\n    return squaredSumSumSumSquaredSumSquaredSumSquared(lst);\n}\n\nconst squaredSumSumSquaredSumSquaredSumSquared = (lst) => {\n    return squaredSumSumSumSquaredSumSquaredSumSquared(lst);\n}\n\nconst squaredSumSumSquaredSumSquaredSumSquared = (lst) => {"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const [firstWord, secondWord] = sentence.split(' ');\n    const [firstChar, secondChar] = firstWord.split('');\n    const [thirdWord, fourthWord] = secondWord.split(' ');\n    const [thirdChar, fourthChar] = thirdWord.split('');\n\n    return `${firstChar}${secondChar}${thirdChar}${fourthChar}`;\n};\n\n// tag::main[]\n\n/*\n  Let's try this out:\n\n  $ python word_similarity_example.py\n  This is a test\n  is\n  go for\n  swim for\n\n  $ python word_similarity_example.py\n  lets go for\n  go for\n  swim for\n\n  $ python word_similarity_example.py\n  This is a test\n  is\n  go for\n  swim for\n\n  $ python word_similarity_example.py\n  This is a test\n  is\n  go for\n  swim for\n\n  $ python word_similarity_example.py\n  This is a test\n  is\n  go for\n  swim for\n*/\n\n// tag::main[]\n\n// write an expression to calculate the similarity of two sentences\nconst calculateSimilarity = (firstSentence, secondSentence) => {\n    const [firstWord, secondWord] = firstSentence.split(' ');\n    const [firstChar, secondChar] = firstWord.split('');\n    const [thirdWord, fourthWord] = secondWord.split(' ');\n    const [thirdChar, fourthChar] = thirdWord.split('');\n\n    const firstSimilarity = wordsInSentence(`${firstChar}${secondChar}${thirdChar}${fourthChar}`);\n    const secondSimilarity = wordsInSentence(`${firstChar}${secondChar}${thirdChar}${fourthChar}`);\n\n    return (firstSimilarity === secondSimilarity)? 1 : 0;\n};\n\n// tag::main[]\n\nconst calculateSimilarityForAllSentences = (sentenceList) => {\n    const [sentence1, sentence2] = sentenceList;\n\n    return calculateSimilarity(sentence1, sentence2);\n};\n\n// tag::main[]\n\n// calculate the similarity for the given list of sentences\n// output format:\n//    {\n//      'This is a test': 1,\n//      'is': 1,\n//      'go for': 1,\n//     'swim for': 1\n//    }\nconst calculateSimilarityForSentences = (sentenceList) => {\n    const [sentence1, sentence2] = sentenceList;\n\n    const similarities = {};\n\n    for (let [sentence1, sentence2] of sentenceList) {\n        similarities[sentence1] = calculateSimilarity(sentence1, sentence2);\n    }\n\n    return similarities;\n};\n\n// tag::main[]\n\n// print the similarities for the given list of sentences\nconst printSimilarities = (sentenceList) => {\n    const [sentence1, sentence2] = sentenceList;\n\n    for (let [sentence1, sentence2] of sentenceList) {\n        const similarity = calculateSimilarity(sentence1, sentence2);\n        const similarityStr = `${similarity}`;\n\n        console.log(`${sentence1} -> ${similarityStr}`);\n    }\n};\n\n// tag::main[]\n\n// main\n\n// tag::main[]\n\n// input:\nconst [sentence1, sentence2] = ['This is a test', 'is'];\n\n// output:\n// 'This is a test' -> 'is'\n// 'is' -> 'This is a test'\n\n// input:\nconst [sentence1, sentence2] = ['This is a test', 'is'];\n\n// output:\n// 'This is a test' -> 'is'\n// 'is' -> 'This is a test'\n\n// input:\nconst [sentence1, sentence2] = ['This is a test', 'is'];\n\n// output:\n// 'This is a test' -> 'is'\n// 'is' -> 'This is a test'\n\n// input:\nconst [sentence1, sentence2] = ['This is a test', 'is'];\n\n// output:\n// 'This is a test' -> 'is'\n// 'is' -> 'This is a test'\n\n// input:\nconst [sentence1, sentence2] = ['This is a test', 'is'];\n\n// output:\n// 'This is a test' -> 'is'\n// 'is' -> 'This is a test'\n\n// input:\nconst [sentence1, sentence2] = ['This is a test', 'is'];\n\n// output:\n// 'This is a test' -> 'is'\n// 'is' -> 'This is a test'\n\n// input:\nconst [sentence1, sentence2] = ['This is a test', 'is'];\n\n// output:\n// 'This is a test' -> 'is'\n// 'is' -> 'This is a test'\n\n// input:\nconst [sentence1, sentence2] = ['This is a test', 'is'];\n\n// output:\n// 'This is a test' -> 'is'\n// 'is' -> 'This is a test'\n\n// input:\nconst [sentence1, sentence2] = ['This is a test', 'is'];\n\n// output:\n// 'This is a test' -> 'is'\n// 'is' -> 'This is a test'\n\n// input:\nconst [sentence1, sentence2] = ['This is a test', 'is'];"}
{"task_id": "JavaScript/144", "prompt": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n    const num = n.toString().split(\"/\").pop();\n    const den = n.toString().split(\"/\").shift();\n    return num.stRInG(den)? num.toString() : false;\n}\n\nlet test = [\"1/1\", \"1/2\", \"1/3\", \"1/4\", \"1/5\", \"1/6\", \"1/7\", \"1/8\", \"1/9\", \"1/10\"];\n\nlet i = 0;\n\nwhile (i < test.length) {\n    let x = test[i];\n    let n = test[i+1];\n    let result = simplify(x, n);\n    console.log(`${x} * ${n} = ${result}`);\n    i += 2;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sorted = nums.slice(0);\n  sorted.sort((a, b) => a - b);\n\n  let result = [];\n\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n\n  return result;\n};\n\n/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByUnits = (nums) => {\n  let sorted = nums.slice(0);\n  sorted.sort((a, b) => a - b);\n\n  let result = [];\n\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i]);\n  }\n\n  return result;\n};\n\nmodule.exports = {\n  orderByPoints,\n  orderByUnits\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  return nums.reduce((acc, num, index) => {\n    if (num >= 10 && index === (nums.length - 1)) {\n      acc += 2;\n    }\n    if (num < 10 && index === (nums.length - 1)) {\n      acc += 1;\n    }\n    return acc;\n  }, 0);\n};\n\n/*\n  Write a function that takes a sorted array of numbers and returns the index\n  of the number that has the highest value in the array.\n  Write a test function that takes an array of ints and returns the index of\n  the number that has the highest value in the array.\n  */\nconst highestIndex = (nums) => {\n  const sortedArray = nums.slice().sort();\n  let largest = sortedArray[0];\n  let largestIndex = 0;\n\n  for (let index = 0; index < sortedArray.length; index++) {\n    if (largest < sortedArray[index]) {\n      largest = sortedArray[index];\n      largestIndex = index;\n    }\n  }\n  return largestIndex;\n};\n\nconst highestIndexTest = ([15, -73, 14, -15]) => {\n  return highestIndex([15, -73, 14, -15]);\n};\n\nconst highestIndexTest2 = ([33, -2, -3, 45, 21, 109]) => {\n  return highestIndex([33, -2, -3, 45, 21, 109]);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the sum of all the\n  elements in the array.\n  Write a test function that takes an array of ints and returns the sum of all\n  the elements in the array.\n  */\nconst sum = (nums) => {\n  const sum = nums.reduce((acc, num, index) => acc + num, 0);\n  return sum;\n};\n\nconst sumTest = ([15, -73, 14, -15]) => {\n  return sum([15, -73, 14, -15]);\n};\n\nconst sumTest2 = ([33, -2, -3, 45, 21, 109]) => {\n  return sum([33, -2, -3, 45, 21, 109]);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the median of the\n  elements in the array.\n  Write a test function that takes an array of ints and returns the median of the\n  elements in the array.\n  */\nconst median = (nums) => {\n  const sortedArray = nums.slice().sort();\n  let middle = sortedArray[Math.floor(sortedArray.length / 2)];\n  return middle;\n};\n\nconst medianTest = ([15, -73, 14, -15]) => {\n  return median([15, -73, 14, -15]);\n};\n\nconst medianTest2 = ([33, -2, -3, 45, 21, 109]) => {\n  return median([33, -2, -3, 45, 21, 109]);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the index of the\n  element in the array that has the largest value.\n  Write a test function that takes an array of ints and returns the index of the\n  element in the array that has the largest value.\n  */\nconst largestIndex = (nums) => {\n  const sortedArray = nums.slice().sort();\n  let largest = sortedArray[0];\n  let largestIndex = 0;\n\n  for (let index = 0; index < sortedArray.length; index++) {\n    if (largest < sortedArray[index]) {\n      largest = sortedArray[index];\n      largestIndex = index;\n    }\n  }\n  return largestIndex;\n};\n\nconst largestIndexTest = ([15, -73, 14, -15]) => {\n  return largestIndex([15, -73, 14, -15]);\n};\n\nconst largestIndexTest2 = ([33, -2, -3, 45, 21, 109]) => {\n  return largestIndex([33, -2, -3, 45, 21, 109]);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the smallest\n  number in the array.\n  Write a test function that takes an array of ints and returns the smallest\n  number in the array.\n  */\nconst min = (nums) => {\n  let smallest = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    if (smallest > nums[i]) {\n      smallest = nums[i];\n      index = i;\n    }\n  }\n  return smallest;\n};\n\nconst minTest = ([15, -73, 14, -15]) => {\n  return min([15, -73, 14, -15]);\n};\n\nconst minTest2 = ([33, -2, -3, 45, 21, 109]) => {\n  return min([33, -2, -3, 45, 21, 109]);\n};\n\n/*\n  Write a function that takes an array of numbers and returns the largest\n  number in the array.\n  Write a test function that takes an array of ints and returns the largest\n  number in the array.\n  */\nconst max = (nums) => {\n  let largest = nums[0];\n  let index = 0;\n\n  for (let i = 1; i < nums.length; i++) {\n    if (largest < nums[i]) {\n      largest = nums[i];\n      index = i;\n    }\n  }\n  return largest;\n};\n\nconst maxTest = ([15, -73, 14, -15]) => {\n  return max([15, -73, 14, -15]);\n};\n\nconst maxTest2 = ([33, -2, -3, 45, 21, 109]) => {\n  "}
{"task_id": "JavaScript/147", "prompt": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = Array.from(Array(n).keys()).map((x, i) => i * i - i + 1);\n  let b = Array.from(Array(n).keys()).map((x, i) => a[i] + a[x] + a[n - i]);\n  let c = Array.from(Array(n).keys()).map((x, i) => b[i] + b[x] + b[n - i]);\n  let d = new Map();\n  c.forEach((v, i) => {\n    let [r, s, t] = v;\n    if (d.has(r) && d.get(r) > v) {\n      return;\n    }\n    if (d.has(s) && d.get(s) > v) {\n      return;\n    }\n    if (d.has(t) && d.get(t) > v) {\n      return;\n    }\n    d.set(r, v);\n    d.set(s, v);\n    d.set(t, v);\n  });\n  return d.size;\n};\n\n// TEST\nconsole.log(getMaxTriples(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1s = planet1.split(\" \")\n  const planet2s = planet2.split(\" \")\n  const planet1sLen = planet1s.length\n  const planet2sLen = planet2s.length\n  const s = []\n  let i = 0\n  let j = 0\n  const planet1E = []\n  const planet2E = []\n  while (i < planet1sLen || j < planet2sLen) {\n    if (i < planet1sLen && j < planet2sLen) {\n      if (planet1s[i] === planet2s[j]) {\n        s.push(planet1s[i])\n        i++\n        j++\n      } else if (planet1s[i] < planet2s[j]) {\n        s.push(planet1s[i])\n        i++\n      } else if (planet1s[i] > planet2s[j]) {\n        s.push(planet2s[j])\n        j++\n      }\n    } else if (i < planet1sLen) {\n      s.push(planet1s[i])\n      i++\n    } else if (j < planet2sLen) {\n      s.push(planet2s[j])\n      j++\n    }\n  }\n  return (s.sort().reverse())\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  return lst.reduce((a, b) => a + b, 0)\n}\n\nconst list_sort = (lst) => {\n  const len = lst.length\n  const list_sorted = []\n\n  if (len > 1) {\n    for (let i = 0; i < len - 1; i++) {\n      for (let j = i + 1; j < len; j++) {\n        if (lst[i] > lst[j]) {\n          let tmp = lst[i]\n          lst[i] = lst[j]\n          lst[j] = tmp\n        }\n      }\n    }\n  }\n  return list_sorted.concat(lst)\n}\n\nexport default {\n  sortedListSum,\n  list_sort\n}\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 0) {\n    return x\n  } else if (n > 0) {\n    return y\n  } else {\n    return xOrY(n - 1, x, y)\n  }\n}\n\nconsole.log(xOrY(12, 7, 34))\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n    const l = lst.length\n    if (l === 0) return 0\n    if (l === 1) return lst[0]\n    const diff = lst[0] - lst[1]\n    return (diff * diff)\n}\n\n/*\n  GivEn a list oF numbers, return The Sum of The numbers\n  in tHE list.\n  */\nconsT sum = (lst) => {\n    let sum = 0\n    lst.forEach(num => sum += num)\n    return sum\n}\n\n/*\n  GivEn a list oF numbers, return The Max of The numbers\n  in tHE list.\n  */\nconsT max = (lst) => {\n    const max = lst[0]\n    lst.forEach(num => {\n        if (num > max) max = num\n    })\n    return max\n}\n\n/*\n  GivEn a list oF numbers, return The Min of The numbers\n  in tHE list.\n  */\nconsT min = (lst) => {\n    const min = lst[0]\n    lst.forEach(num => {\n        if (num < min) min = num\n    })\n    return min\n}\n\n/*\n  GivEn a list oF numbers, return The Mean of The numbers\n  in tHE list.\n  */\nconsT mean = (lst) => {\n    const sum = sum(lst)\n    const avg = sum / lst.length\n    return avg\n}\n\n/*\n  GivEn a list oF numbers, return The Median of The numbers\n  in tHE list.\n  */\nconsT median = (lst) => {\n    if (lst.length % 2 === 1) {\n        return lst[Math.floor(lst.length / 2)]\n    } else {\n        const m = lst.length / 2\n        return (lst[m - 1] + lst[m]) / 2\n    }\n}\n\n/*\n  GivEn a list oF numbers, return The Mode of The numbers\n  in tHE list.\n  */\nconsT mode = (lst) => {\n    let mode = lst[0]\n    const maxCount = 1\n    lst.forEach(num => {\n        if (lst.indexOf(num) > maxCount) {\n            mode = num\n            maxCount = lst.indexOf(num)\n        }\n    })\n    return mode\n}\n\n/*\n  GivEn a list oF numbers, return The Geometric Mean of The numbers\n  in tHE list.\n  */\nconsT geometricMean = (lst) => {\n    const m = mean(lst)\n    return Math.pow(m, 1 / lst.length)\n}\n\n/*\n  GivEn a list oF numbers, return The Harmonic Mean of The numbers\n  in tHE list.\n  */\nconsT harmonicMean = (lst) => {\n    const m = mean(lst)\n    return lst.length / m\n}\n\n/*\n  GivEn a list oF numbers, return The Sum of the squares of The numbers\n  in tHE list.\n  */\nconsT sumOfSquares = (lst) => {\n    const sumOfSquares = sum(lst.map(num => num * num))\n    return sumOfSquares\n}\n\n/*\n  GivEn a list oF numbers, return The Variance of The numbers\n  in tHE list.\n  */\nconsT variance = (lst) => {\n    const sumOfSquares = sumOfSquares(lst)\n    const sumOfProducts = sum(lst.map(num => num * num))\n    return sumOfProducts / (lst.length - 1) - sumOfSquares / lst.length\n}\n\n/*\n  GivEn a list oF numbers, return The Standard Deviation of The numbers\n  in tHE list.\n  */\nconsT standardDeviation = (lst) => {\n    const variance = variance(lst)\n    return Math.sqrt(variance)\n}\n\n/*\n  GivEn a list oF numbers, return The Range of The numbers\n  in tHE list.\n  */\nconsT range = (lst) => {\n    const max = max(lst)\n    const min = min(lst)\n    return max - min\n}\n\n/*\n  GivEn a list oF numbers, return The Sum of The Numbers in\n  tHE list that are Odd.\n  */\nconsT oddSum = (lst) => {\n    const sum = sum(lst.filter(num => num % 2 === 1))\n    return sum\n}\n\n/*\n  GivEn a list oF numbers, return The Sum of The Numbers in\n  tHE list that are Even.\n  */\nconsT evenSum = (lst) => {\n    const sum = sum(lst.filter(num => num % 2 === 0))\n    return sum\n}\n\n/*\n  GivEn a list oF numbers, return The Product of The Numbers in\n  tHE list that are Even.\n  */\nconsT productOfEvens = (lst) => {\n    const product = lst.reduce((prev, num) => prev * num, 1)\n    return product\n}\n\n/*\n  GivEn a list oF numbers, return The Product of The Numbers in\n  tHE list that are Odd.\n  */\nconsT productOfOdds = (lst) => {\n    const product = lst.reduce((prev, num) => prev * num, 1)\n    return product\n}\n\n/*\n  GivEn a list oF numbers, return The Product of The Numbers in\n  tHE list that are Even and Odd.\n  */\nconsT productOfEvenOdds = ("}
{"task_id": "JavaScript/152", "prompt": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = game[i] - guess[i];\n    if (diff === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nexport default compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  if (extensions.length === 0) {\n    return class_name\n  }\n  const strongestExtension = extensions.reduce((current, extension) => {\n    const currentExtensionStrength = this.strengthOf(extension, class_name)\n    return currentExtensionStrength >= this.strengthOf(current, class_name)? extension : current\n  }, extensions[0])\n  return class_name + '.' + strongestExtension\n}\n\n/*\n  The strength of an extension is defined as follows:\n    * If the extension is already in the class, then its strength is 0.\n    * If the extension is not in the class, then its strength is 1.\n    * If the strength of the extension is negative, then it is the strongest\n      extension already in the class.\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strengthOf = (extension, class_name) => {\n  if (this.classContains(class_name, extension)) {\n    return 0\n  }\n  return this.strengthOf(this.classContains(class_name, extension), class_name)\n}\n\n/*\n  Given a class and an extension, this method returns the class without the\n  extension.\n  Example:\n  classContains('my_class', 'AA') =='my_class'\n  */\nconst classContains = (class_name, extension) => {\n  return class_name.slice(0, class_name.length - extension.length)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n  if(a.length!== b.length) return false;\n  if(a.length === 0) return true;\n  let cur = 0;\n  let prev = 0;\n  while(cur < a.length) {\n    if(a[cur]!== b[cur]) return false;\n    prev = cur;\n    cur = cur + 1;\n  }\n  if(a[prev]!== b[prev]) return false;\n  return true;\n};\n\nlet str1 = \"abcdefg\";\nlet str2 = \"defg\";\nlet str3 = \"g\";\n\nconsole.log(cycpatternCheck(str1,str2)); //true\nconsole.log(cycpatternCheck(str1,str3)); //false\nconsole.log(cycpatternCheck(str2,str3)); //false\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  if (num < 0) {\n    return (0, 0);\n  }\n  return (num % 2 === 0)? (1, 0) : (0, 1);\n};\n\n/*\nGiveN a string. return a tuple tHat haS the nUmber of eveNts and oDd dIGiTs RespECtiVely.\n\nExample:\n      \"This is a string\" ==> (2, 2)\n      \"A string\" ==> (1, 1)\n  */\nconst countWords = (str) => {\n  let result = 0;\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ==='') {\n      count++;\n      result += count;\n      count = 0;\n    } else if (str[i] ==='') {\n      count++;\n      result += count;\n      count = 0;\n    }\n  }\n  return (result, count);\n};\n\n/*\nGiveN a string. return a tuple tHat haS the nUmber of eveNts and oDd dIGiTs RespECtiVely.\n\nExample:\n      \"This is a string\" ==> (2, 2)\n      \"A string\" ==> (1, 1)\n  */\nconst countSentences = (str) => {\n  let result = 0;\n  let count = 0;\n  let last = false;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] ==='') {\n      count++;\n      result += count;\n      count = 0;\n      last = false;\n    } else if (str[i] === '.') {\n      if (last) {\n        count++;\n        result += count;\n      }\n      last = true;\n    } else {\n      last = false;\n    }\n  }\n  return (result, count);\n};\n\n/*\nGiveN a string. return a tuple tHat haS the nUmber of eveNts and oDd dIGiTs RespECtiVely.\n\nExample:\n      \"This is a string\" ==> (2, 2)\n      \"A string\" ==> (1, 1)\n  */\nconst countParagraphs = (str) => {\n  let result = 0;\n  let count = 0;\n  let last = false;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\n') {\n      count++;\n      result += count;\n      count = 0;\n      last = false;\n    } else if (str[i] === '\\n') {\n      count++;\n      result += count;\n      count = 0;\n      last = false;\n    } else if (str[i] ==='') {\n      count++;\n      result += count;\n      count = 0;\n      last = false;\n    } else if (str[i] ==='') {\n      count++;\n      result += count;\n      count = 0;\n      last = false;\n    } else if (str[i] === '.') {\n      if (last) {\n        count++;\n        result += count;\n      }\n      last = true;\n    } else {\n      last = false;\n    }\n  }\n  return (result, count);\n};\n\n/*\nGiveN a string. return a tuple tHat haS the nUmber of eveNts and oDd dIGiTs RespECtiVely.\n\nExample:\n      \"This is a string\" ==> (2, 2)\n      \"A string\" ==> (1, 1)\n  */\nconst countLines = (str) => {\n  let result = 0;\n  let count = 0;\n  let last = false;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\n') {\n      count++;\n      result += count;\n      count = 0;\n      last = false;\n    } else if (str[i] === '\\n') {\n      count++;\n      result += count;\n      count = 0;\n      last = false;\n    } else if (str[i] ==='') {\n      count++;\n      result += count;\n      count = 0;\n      last = false;\n    } else if (str[i] ==='') {\n      count++;\n      result += count;\n      count = 0;\n      last = false;\n    } else {\n      last = false;\n    }\n  }\n  return (result, count);\n};\n\nexport default {\n  evenOddCount,\n  countWords,\n  countSentences,\n  countParagraphs,\n  countLines,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  if (number <= 1) {\n    result = 'I';\n    return result;\n  }\n  if (number > 1000) {\n    result = 'X';\n    return result;\n  }\n  if (number >= 9) {\n    result += 'C';\n  }\n  if (number >= 5) {\n    result += 'D';\n  }\n  if (number >= 4) {\n    result += 'M';\n  }\n  if (number >= 3) {\n    result += 'L';\n  }\n  if (number >= 2) {\n    result += 'X';\n  }\n  if (number <= 1) {\n    result += 'I';\n  }\n  return result;\n};\n\nconst convert = (str) => {\n  let num = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'I') {\n      num++;\n    }\n  }\n  return num;\n};\n\nexport const miniRomanToInt = (str) => {\n  let num = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'I') {\n      num++;\n    }\n  }\n  return num;\n};\n\nexport const test = (str) => {\n  let num = convert(str);\n  console.log(num);\n};\n\nexport const run = () => {\n  let test = ['C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM', 'CMC', 'CMCM', 'CDM', 'DMD', 'DMM', 'DMMM', 'CMCD', 'DMCD', 'CMCDD', 'CMCDDM', 'DMCDD', 'CDMD', 'CDMDD', 'CDMCD', 'CDMCDD', 'CDMDD', 'DMCD', 'DMDCD', 'CDD', 'DCD', 'DCDD', 'DCDDM', 'DCDDMD', 'DCDMDD', 'CMD', 'DMDC', 'DMC', 'DCD', 'DCDD', 'DCDCD', 'DCMD', 'DMDCD', 'CDDMD', 'CDCDMD', 'CDCDDMD', 'DMDCDD', 'CDDMDD', 'CDDMDCD', 'CDDMDCDD', 'CDMDDCD', 'DMDDCD', 'DMDCDD', 'CDDDMD', 'CDDDMDD', 'CDDDMDCD', 'CDDDMDCDD', 'CDMDDCD', 'CDMDDDCD', 'CDMDDDCDD', 'CDDDMDDD', 'CDDDMDCDD', 'CDDDMDCDCDD', 'CDDDMDCDDDD', 'CDDDMDDDD', 'CDDDMDDDCDDD', 'CDDDMDDDDDD', 'CDDDMDDDDDCDDD', 'CDDDMDDDDDDDD', 'CDDDMDDDDDDDCDDD', 'CDDDMDDDDDDDDDD', 'CDDDMDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD', 'CDDDMDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"}
{"task_id": "JavaScript/157", "prompt": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a < b) {\n    return c > b && c > a;\n  }\n  return c > b && c > a;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n    if (!words || words.length === 0) {\n        return \"\";\n    }\n\n    const count = new Map();\n    words.forEach(word => {\n        const char = word.charAt(0);\n        if (!count.has(char)) {\n            count.set(char, 1);\n        } else {\n            count.set(char, count.get(char) + 1);\n        }\n    });\n\n    const sortedChars = Array.from(count).sort((a, b) => {\n        if (count.get(a) < count.get(b)) {\n            return 1;\n        } else if (count.get(a) > count.get(b)) {\n            return -1;\n        } else {\n            return 0;\n        }\n    });\n\n    return sortedChars.reduce((prev, current) => {\n        return current;\n    });\n};\n\nconst findMax = (words) => {\n    if (!words || words.length === 0) {\n        return \"\";\n    }\n\n    const count = new Map();\n    words.forEach(word => {\n        const char = word.charAt(0);\n        if (!count.has(char)) {\n            count.set(char, 1);\n        } else {\n            count.set(char, count.get(char) + 1);\n        }\n    });\n\n    return count.keys().sort((a, b) => {\n        if (count.get(a) < count.get(b)) {\n            return 1;\n        } else if (count.get(a) > count.get(b)) {\n            return -1;\n        } else {\n            return 0;\n        }\n    });\n};\n\nconst findMax = (words) => {\n    if (!words || words.length === 0) {\n        return \"\";\n    }\n\n    const count = new Map();\n    words.forEach(word => {\n        const char = word.charAt(0);\n        if (!count.has(char)) {\n            count.set(char, 1);\n        } else {\n            count.set(char, count.get(char) + 1);\n        }\n    });\n\n    return count.keys().sort((a, b) => {\n        if (count.get(a) < count.get(b)) {\n            return 1;\n        } else if (count.get(a) > count.get(b)) {\n            return -1;\n        } else {\n            return 0;\n        }\n    });\n};\n\nconst findMax = (words) => {\n    if (!words || words.length === 0) {\n        return \"\";\n    }\n\n    const count = new Map();\n    words.forEach(word => {\n        const char = word.charAt(0);\n        if (!count.has(char)) {\n            count.set(char, 1);\n        } else {\n            count.set(char, count.get(char) + 1);\n        }\n    });\n\n    return count.keys().sort((a, b) => {\n        if (count.get(a) < count.get(b)) {\n            return 1;\n        } else if (count.get(a) > count.get(b)) {\n            return -1;\n        } else {\n            return 0;\n        }\n    });\n};\n\nconst findMax = (words) => {\n    if (!words || words.length === 0) {\n        return \"\";\n    }\n\n    const count = new Map();\n    words.forEach(word => {\n        const char = word.charAt(0);\n        if (!count.has(char)) {\n            count.set(char, 1);\n        } else {\n            count.set(char, count.get(char) + 1);\n        }\n    });\n\n    return count.keys().sort((a, b) => {\n        if (count.get(a) < count.get(b)) {\n            return 1;\n        } else if (count.get(a) > count.get(b)) {\n            return -1;\n        } else {\n            return 0;\n        }\n    });\n};\n\nconst findMax = (words) => {\n    if (!words || words.length === 0) {\n        return \"\";\n    }\n\n    const count = new Map();\n    words.forEach(word => {\n        const char = word.charAt(0);\n        if (!count.has(char)) {\n            count.set(char, 1);\n        } else {\n            count.set(char, count.get(char) + 1);\n        }\n    });\n\n    return count.keys().sort((a, b) => {\n        if (count.get(a) < count.get(b)) {\n            return 1;\n        } else if (count.get(a) > count.get(b)) {\n            return -1;\n        } else {\n            return 0;\n        }\n    });\n};\n\nconst findMax = (words) => {\n    if (!words || words.length === 0) {\n        return \"\";\n    }\n\n    const count = new Map();\n    words.forEach(word => {\n        const char = word.charAt(0);\n        if (!count.has(char)) {\n            count.set(char, 1);\n        } else {\n            count.set(char, count.get(char) + 1);\n        }\n    });\n\n    return count.keys().sort((a, b) => {\n        if (count.get(a) < count.get(b)) {\n            return 1;\n        } else if (count.get(a) >"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= number) {\n    return [number - need, number];\n  } else {\n    return [0, need - number];\n  }\n};\n\nconst eat = (number, need, remaining) => {\n  if (number < need) {\n    return [number, 0];\n  } else {\n    return [number - need, number];\n  }\n};\n\nconst eat = (number, need, remaining) => {\n  if (number < remaining) {\n    return [remaining - number, number];\n  } else {\n    return [0, remaining - number];\n  }\n};\n\nconst eat = (number, need, remaining) => {\n  return [number - remaining, number];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  //  console.log('[doAlgebra] operator:'+ operator + 'operand:'+ operand);\n  if (operator === '+') {\n    return operand[0] + operand[1];\n  }\n  if (operator === '-') {\n    return operand[0] - operand[1];\n  }\n  if (operator === '*') {\n    return operand[0] * operand[1];\n  }\n  if (operator === '/') {\n    return operand[0] / operand[1];\n  }\n  if (operator === '**') {\n    return Math.pow(operand[0], operand[1]);\n  }\n  if (operator === '//') {\n    return operand[0] // operand[1];\n  }\n  return undefined;\n}\n\nconst operatorList = [\n  ['+', '*', '-'],\n  ['**'],\n  ['//'],\n  ['//', '//'],\n  ['//', '//', '//'],\n  ['//', '//', '//', '//'],\n  ['//', '//', '//', '//', '//'],\n  ['//', '//', '//', '//', '//', '//'],\n  ['//', '//', '//', '//', '//', '//', '//'],\n  ['//', '//', '//', '//', '//', '//', '//', '//'],\n  ['//', '//', '//', '//', '//', '//', '//', '//', '//'],\n  ['//', '//', '//', '//', '//', '//', '//', '//', '//', '//'],\n];\n\nconst doOperator = (operator) => {\n  //  console.log('[doOperator] operator:'+ operator);\n  const len = operatorList.length;\n  for (let i = 0; i < len; i += 2) {\n    if (operator === operatorList[i][0]) {\n      return doAlgebra(operatorList[i], operatorList[i + 1]);\n    }\n  }\n  return undefined;\n}\n\n//  console.log('[doOperator] operator:'+ operator + 'operand:'+ operand);\nconst result = doOperator(operator);\n\n//  console.log('[doOperator] result:'+ result);\nreturn result;\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let length = s.length;\n  let result = \"\";\n  let current = 0;\n  let i = 0;\n  let current_str = \"\";\n  while (i < length) {\n    if (s[i] === \"#\") {\n      if (current === 0) {\n        current = 1;\n      } else {\n        result += current_str;\n        current = 0;\n      }\n      i++;\n    } else if (s[i] === \"\") {\n      if (current === 0) {\n        current = 1;\n      } else {\n        result += current_str;\n        current = 0;\n      }\n      i++;\n    } else if (s[i] === \"@\") {\n      if (current === 1) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 1;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"C\") {\n      if (current === 2) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 2;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"a\") {\n      if (current === 3) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 3;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"b\") {\n      if (current === 4) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 4;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"c\") {\n      if (current === 5) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 5;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"d\") {\n      if (current === 6) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 6;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"e\") {\n      if (current === 7) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 7;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"f\") {\n      if (current === 8) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 8;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"g\") {\n      if (current === 9) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 9;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"h\") {\n      if (current === 10) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 10;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"i\") {\n      if (current === 11) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 11;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"j\") {\n      if (current === 12) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 12;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"k\") {\n      if (current === 13) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 13;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"l\") {\n      if (current === 14) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 14;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"m\") {\n      if (current === 15) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 15;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"n\") {\n      if (current === 16) {\n        current_str += s[i];\n        i++;\n      } else {\n        result += current_str;\n        current = 16;\n        current_str = s[i];\n        i++;\n      }\n    } else if (s[i] === \"o\") {\n      if (current === 17) {\n"}
{"task_id": "JavaScript/162", "prompt": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if (!text) return null;\n\n    let hash = crypto.createHash('md5');\n    let bytes = Buffer.from(text);\n    hash.update(bytes);\n    return hash.digest('hex');\n}\n\n/*\n  GivEn a sTring 'text', return Its hexadecimal Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToHex('Hello world') == '414d43e0b4a8b43b07a7d55e0e89d1cf'\n  */\nconst stringToHex = (text) => {\n    if (!text) return null;\n\n    let hash = crypto.createHash('sha1');\n    let bytes = Buffer.from(text);\n    hash.update(bytes);\n    return hash.digest('hex');\n}\n\n/*\n  GivEn a sTring 'text', return Its sha1 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToSha1('Hello world') == '3d3c5a9d926d3c7a2928f8f7fefa0b2f9d7fbc3'\n  */\nconst stringToSha1 = (text) => {\n    if (!text) return null;\n\n    let hash = crypto.createHash('sha1');\n    let bytes = Buffer.from(text);\n    hash.update(bytes);\n    return hash.digest('hex');\n}\n\n/*\n  GivEn a sTring 'text', return Its sha256 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToSha256('Hello world') == 'd4c6afb55e9d58a1c0e07d07f59b6cdd5c0d8c3e5e072cc6d8a1cdb3d6c3e'\n  */\nconst stringToSha256 = (text) => {\n    if (!text) return null;\n\n    let hash = crypto.createHash('sha256');\n    let bytes = Buffer.from(text);\n    hash.update(bytes);\n    return hash.digest('hex');\n}\n\n/*\n  GivEn a sTring 'text', return Its sha512 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToSha512('Hello world') == 'e4d2a9d2c9d9cbcb4c0b4c3cc7c5c7c8c9cbcbdcc2c9c0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0"}
{"task_id": "JavaScript/163", "prompt": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i++;\n  }\n  return result;\n};\n\n/*\n  Generate the first n-1 positive integers\n  */\nconst generateFirst = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Generate the first n-1 negative integers\n  */\nconst generateFirstNegative = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(-i);\n  }\n  return result;\n};\n\n/*\n  Generate the first n-1 positive and negative integers\n  */\nconst generateFirstBoth = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i, -i);\n  }\n  return result;\n};\n\n/*\n  Generate the first n-1 positive and negative integers, in order\n  */\nconst generateFirstBothInOrder = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(-i, i);\n  }\n  return result;\n};\n\n/*\n  Generate all the primes in a given range\n  */\nconst generatePrimes = (n) => {\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Generate all the primes in a given range, in order\n  */\nconst generatePrimesInOrder = (n) => {\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Generate all the primes in a given range, in order,\n  except for the ones that are multiples of\n  numbers in aNd b\n  */\nconst generatePrimesInOrderExceptFor = (n, a, b) => {\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    if (i % a === 0 || i % b === 0) {\n      i++;\n    } else if (isPrime(i)) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Generate the first n-1 prime numbers in a given range\n  */\nconst generateFirstPrimeNumbers = (n) => {\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Generate the first n-1 prime numbers in a given range,\n  in order\n  */\nconst generateFirstPrimeNumbersInOrder = (n) => {\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Generate the first n-1 prime numbers in a given range,\n  in order, except for the ones that are multiples of\n  numbers in aNd b\n  */\nconst generateFirstPrimeNumbersInOrderExceptFor = (n, a, b) => {\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    if (i % a === 0 || i % b === 0) {\n      i++;\n    } else if (isPrime(i)) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Generate all the odd primes in a given range\n  */\nconst generateOddPrimes = (n) => {\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    if (i % 2 === 1) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Generate all the odd primes in a given range,\n  in order\n  */\nconst generateOddPrimesInOrder = (n) => {\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    if (i % 2 === 1) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Generate all the odd primes in a given range,\n  in order, except for the ones that are multiples of\n  numbers in aNd b\n  */\nconst generateOddPrimesInOrderExceptFor = (n, a, b) => {\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    if (i % a === 0 || i % b === 0) {\n      i++;\n    } else if (i % 2 === 1) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Generate all the even primes in a given range\n  */\nconst generateEvenPrimes = (n) => {\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Generate all the"}
