{"task_id": "JavaScript/0", "prompt": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const hasClose = [];\n  numbers.forEach((number, i) => {\n    if (i === 0) {\n      return;\n    }\n\n    const nextNumber = numbers[i - 1];\n    const distance = number - nextNumber;\n    if (Math.abs(distance) < threshold) {\n      hasClose.push(nextNumber);\n    }\n  });\n\n  return hasClose.length > 0;\n};\n\nexport default hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let stack = [],\n    last_open = [],\n    i = 0,\n    j = 0,\n    open_count = 0,\n    paren_string = paren_string.replace(/\\(\\s+/g, '(');\n  paren_string = paren_string.replace(/\\s+\\)/g, ')');\n  paren_string = paren_string.replace(/\\(\\s+)/g, '(');\n  paren_string = paren_string.replace(/\\s+\\)/g, ')');\n  paren_string = paren_string.replace(/\\(\\)/g, '(');\n  paren_string = paren_string.replace(/\\)//g, ')');\n  while (i < paren_string.length) {\n    if (paren_string[i] === '(') {\n      stack.push(paren_string[i]);\n      open_count++;\n    } else if (paren_string[i] === ')') {\n      if (open_count === 0) {\n        stack.pop();\n        open_count--;\n      } else if (open_count === 1) {\n        stack.pop();\n        open_count--;\n        last_open = stack;\n      } else if (open_count === 2) {\n        stack = last_open;\n        open_count--;\n      }\n    }\n    i++;\n  }\n  return stack;\n};\n\nmodule.exports = {\n  separateParenGroups\n};\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let decimalNumber = number.toFixed(2);\n    return parseFloat(decimalNumber.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"));\n};\n\n/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber2 = (number) => {\n    let decimalNumber = number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return parseFloat(decimalNumber);\n};\n\nmodule.exports = {\n    truncateNumber\n};<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let i = 0\n  let sum = 0\n  const total = operations.length\n\n  while (i < total) {\n    sum += operations[i]\n    if (sum === 0) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\nconst belowZero2 = (operations) => {\n  let i = 0\n  let sum = 0\n\n  while (i < operations.length) {\n    sum += operations[i]\n    if (sum === 0) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\nmodule.exports = belowZero\nmodule.exports.belowZero = belowZero\nmodule.exports.belowZero2 = belowZero2\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const abs = [Math.abs(number) for number in numbers]\n  const sum = numbers.reduce((prev, next) => prev + next, 0)\n  const mean = sum / numbers.length\n  const diff = numbers.map((x) => x - mean)\n  const absDiff = abs.map((x) => x - mean)\n  const squareDiff = absDiff.map((x) => x * x)\n  const meanSquareDiff = sum / numbers.length\n  const sd = Math.sqrt(meanSquareDiff - mean * mean)\n  return {\n    mean,\n    stdDev: sd,\n    MAD: Math.abs(diff).reduce((prev, next) => prev + next, 0) / numbers.length\n  }\n}\n\n// A cOmPleX tArXcT that aVIs a veReMeN\n// >>> aVIs a veReMeN\n// const isAValidVector = (vector) => {\n//   const n = vector.length\n//   if (n === 0) {\n//     return false\n//   }\n//   if (n === 1) {\n//     return true\n//   }\n//   let sum = 0\n//   for (let i = 0; i < n; i++) {\n//     sum += vector[i]\n//   }\n//   return sum === n\n// }\n// const isAValidVector = (vector) => {\n//   const n = vector.length\n//   if (n === 0) {\n//     return false\n//   }\n//   if (n === 1) {\n//     return true\n//   }\n//   let sum = 0\n//   for (let i = 0; i < n; i++) {\n//     sum += vector[i]\n//   }\n//   return sum === n\n// }\n\n// isAValidVector([1, 2, 3, 4, 5])\n// isAValidVector([1, 2, 3, 4, 5, 6, 7, 8, 9])\n// isAValidVector([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n// isAValidVector([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50])\n// isAValidVector([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\n// isAValidVector([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255])\n// isAValidVector([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,"}
{"task_id": "JavaScript/5", "prompt": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const array = []\n  const inters = []\n  const len = numbers.length\n  const length = len + 1\n\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      array.push(numbers[i])\n    } else {\n      if (len > i) {\n        array.push(numbers[i])\n      }\n    }\n  }\n\n  for (let i = 0; i < length; i++) {\n    if (i % 2 === 0) {\n      if (i === 0) {\n        array.unshift(numbers[0])\n      } else {\n        array.unshift(numbers[i - 1])\n      }\n    } else {\n      if (i === 0) {\n        array.unshift(numbers[len - 1])\n      } else {\n        array.unshift(numbers[i - 1])\n      }\n    }\n  }\n\n  array.forEach(e => inters.push(e))\n  return inters\n}\n\nmodule.exports = intersperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let stack = [0];\n  let parens = paren_string.split(' ');\n  let array = [];\n  for (let i = 0; i < parens.length; i++) {\n    if (parens[i] === '(') {\n      stack.push(0);\n    } else if (parens[i] === ')') {\n      stack.pop();\n    } else {\n      stack[stack.length - 1]++;\n    }\n  }\n  while (stack.length > 0) {\n    array.push(stack.pop());\n  }\n  return array;\n};\n\nconst parseNestedParensWithSortedArrays = (paren_string) => {\n  let stack = [0];\n  let parens = paren_string.split(' ');\n  let array = [];\n  for (let i = 0; i < parens.length; i++) {\n    if (parens[i] === '(') {\n      stack.push(0);\n    } else if (parens[i] === ')') {\n      stack.pop();\n    } else {\n      stack[stack.length - 1]++;\n    }\n  }\n  while (stack.length > 0) {\n    array.unshift(stack.pop());\n  }\n  return array;\n};\n\nconst parseNestedParensWithSortedArrays2 = (paren_string) => {\n  let stack = [0];\n  let parens = paren_string.split(' ');\n  let array = [];\n  for (let i = 0; i < parens.length; i++) {\n    if (parens[i] === '(') {\n      stack.push(0);\n    } else if (parens[i] === ')') {\n      stack.pop();\n    } else {\n      stack[stack.length - 1]++;\n    }\n  }\n  while (stack.length > 0) {\n    array.unshift(stack.pop());\n  }\n  return array;\n};\n\nconst parseNestedParensWithSortedArrays3 = (paren_string) => {\n  let stack = [0];\n  let parens = paren_string.split(' ');\n  let array = [];\n  for (let i = 0; i < parens.length; i++) {\n    if (parens[i] === '(') {\n      stack.push(0);\n    } else if (parens[i] === ')') {\n      stack.pop();\n    } else {\n      stack[stack.length - 1]++;\n    }\n  }\n  while (stack.length > 0) {\n    array.push(stack.pop());\n  }\n  return array;\n};\n\nconst parseNestedParensWithSortedArrays4 = (paren_string) => {\n  let stack = [0];\n  let parens = paren_string.split(' ');\n  let array = [];\n  for (let i = 0; i < parens.length; i++) {\n    if (parens[i] === '(') {\n      stack.push(0);\n    } else if (parens[i] === ')') {\n      stack.pop();\n    } else {\n      stack[stack.length - 1]++;\n    }\n  }\n  while (stack.length > 0) {\n    array.unshift(stack.pop());\n  }\n  return array;\n};\n\nconst parseNestedParensWithSortedArrays5 = (paren_string) => {\n  let stack = [0];\n  let parens = paren_string.split(' ');\n  let array = [];\n  for (let i = 0; i < parens.length; i++) {\n    if (parens[i] === '(') {\n      stack.push(0);\n    } else if (parens[i] === ')') {\n      stack.pop();\n    } else {\n      stack[stack.length - 1]++;\n    }\n  }\n  while (stack.length > 0) {\n    array.push(stack.pop());\n  }\n  return array;\n};\n\nconst parseNestedParensWithSortedArrays6 = (paren_string) => {\n  let stack = [0];\n  let parens = paren_string.split(' ');\n  let array = [];\n  for (let i = 0; i < parens.length; i++) {\n    if (parens[i] === '(') {\n      stack.push(0);\n    } else if (parens[i] === ')') {\n      stack.pop();\n    } else {\n      stack[stack.length - 1]++;\n    }\n  }\n  while (stack.length > 0) {\n    array.unshift(stack.pop());\n  }\n  return array;\n};\n\nconst parseNestedParensWithSortedArrays7 = (paren_string) => {\n  let stack = [0];\n  let parens = paren_string.split(' ');\n  let array = [];\n  for (let i = 0; i < parens.length; i++) {\n    if (parens[i] === '(') {\n      stack.push(0);\n    } else if (parens[i] === ')') {\n      stack.pop();\n    } else {\n      stack[stack.length - 1]++;\n    }\n  }\n  while (stack.length > 0) {\n    array.push(stack.pop());\n  }\n  return array;\n};\n\nconst parseNestedParensWithSortedArrays8 = (paren_string) => {\n  let stack = [0];"}
{"task_id": "JavaScript/7", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (!strings) return []\n  const newStrings = []\n  for (let i = 0; i < strings.length; i++) {\n    const string = strings[i]\n    const len = string.length\n    for (let j = 0; j < len; j++) {\n      if (string.charAt(j) === substring.charAt(0)) {\n        newStrings.push(string.substring(j))\n        break\n      }\n    }\n  }\n  return newStrings\n}\n\n//------------------------------------------------------------------------------\n// TESTS\n//------------------------------------------------------------------------------\n\nconst filterBySubstringTest = t.test('filterBySubstring', (t) => {\n  t.true(filterBySubstring([], 'a') === []);\n  t.true(filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a') === ['abc', 'bacd', 'array']);\n  t.true(filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'xyz') === []);\n  t.true(filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c') === ['abc', 'bacd', 'array']);\n  t.true(filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'de') === ['abc', 'bacd', 'array']);\n  t.true(filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'x') === []);\n  t.end()\n})\n\n//------------------------------------------------------------------------------\n// MAIN\n//------------------------------------------------------------------------------\n\nt.test('main', (t) => {\n  filterBySubstringTest(t)\n  t.end()\n})\n\nprocess.on('exit', () => {\n  t.end()\n})\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  if (numbers.length === 1) {\n    return (numbers[0], 1)\n  }\n  const product = 1\n  let sum = 0\n  for (let i = 0; i < numbers.length - 1; i++) {\n    sum += numbers[i]\n    product *= numbers[i + 1]\n  }\n  sum += numbers[numbers.length - 1]\n  product *= numbers[numbers.length]\n  return (sum, product)\n}\n\nexport default sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev) {\n      return current;\n    }\n    return prev;\n  }, 0));\n};\n\nconst rollingMaxBy = (numbers, index) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev[index]) {\n      return current;\n    }\n    return prev;\n  }, 0));\n};\n\nconst rollingMaxBy2 = (numbers, index) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev[index] || index === 0) {\n      return current;\n    }\n    return prev;\n  }, 0));\n};\n\nconst rollingMaxBy3 = (numbers, index) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev[index] || index === 0 || index === 1) {\n      return current;\n    }\n    return prev;\n  }, 0));\n};\n\nconst rollingMaxBy4 = (numbers, index) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev[index] || index === 0 || index === 1 || index === 2) {\n      return current;\n    }\n    return prev;\n  }, 0));\n};\n\nconst rollingMaxBy5 = (numbers, index) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev[index] || index === 0 || index === 1 || index === 2 || index === 3) {\n      return current;\n    }\n    return prev;\n  }, 0));\n};\n\nconst rollingMaxBy6 = (numbers, index) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev[index] || index === 0 || index === 1 || index === 2 || index === 3 || index === 4) {\n      return current;\n    }\n    return prev;\n  }, 0));\n};\n\nconst rollingMaxBy7 = (numbers, index) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev[index] || index === 0 || index === 1 || index === 2 || index === 3 || index === 4 || index === 5) {\n      return current;\n    }\n    return prev;\n  }, 0));\n};\n\nconst rollingMaxBy8 = (numbers, index) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev[index] || index === 0 || index === 1 || index === 2 || index === 3 || index === 4 || index === 5 || index === 6) {\n      return current;\n    }\n    return prev;\n  }, 0));\n};\n\nconst rollingMaxBy9 = (numbers, index) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev[index] || index === 0 || index === 1 || index === 2 || index === 3 || index === 4 || index === 5 || index === 6 || index === 7) {\n      return current;\n    }\n    return prev;\n  }, 0));\n};\n\nconst rollingMaxBy10 = (numbers, index) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev[index] || index === 0 || index === 1 || index === 2 || index === 3 || index === 4 || index === 5 || index === 6 || index === 7 || index === 8) {\n      return current;\n    }\n    return prev;\n  }, 0));\n};\n\nconst rollingMaxBy11 = (numbers, index) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev[index] || index === 0 || index === 1 || index === 2 || index === 3 || index === 4 || index === 5 || index === 6 || index === 7 || index === 8 || index === 9) {\n      return current;\n    }\n    return prev;\n  }, 0));\n};\n\nconst rollingMaxBy12 = (numbers, index) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev[index] || index === 0 || index === 1 || index === 2 || index === 3 || index === 4 || index === 5 || index === 6 || index === 7 || index === 8 || index === 9 || index === 10) {\n      return current;\n    }\n    return prev;\n  }, 0));\n};\n\nconst rollingMaxBy13 = (numbers, index) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev[index] || index === 0 || index === 1 || index === 2 || index === 3 || index === 4 || index === 5 || index === 6 || index === 7 || index === 8 || index === 9 || index === 10 || index === 11) {\n      return current;\n    }\n    return prev;\n  }, 0));\n};\n\nconst rollingMaxBy14 = (numbers, index) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev[index] || index === 0 || index === 1 || index === 2 || index === 3 || index === 4 || index === 5 || index === 6 || index === 7 || index === 8 || index === 9 || index === 10 || index === 11 || index === 12) {\n      return current;\n    }\n    return prev;\n  }, 0));\n};\n\nconst rollingMaxBy15 = (numbers, index) => {\n  return (numbers.reduce((prev, current, index) => {\n    if (current > prev[index] || index === 0 || index === 1 || index === 2 || index === 3 || index === 4 || index === 5 || index === 6 || index === 7 || index === 8 || index === 9 || index === 10 || index === 11 || index === 12 || index === 13) {\n      return current"}
{"task_id": "JavaScript/10", "prompt": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const result = string.replace(/(.*?)([a-zA-Z])(.*)/, (match, a, b, c) => {\n    const r = a + b.toUpperCase() + c;\n    return r.replace(/[^a-zA-Z]/g, '');\n  });\n  return result.replace(/^\\s+|\\s+$/g, '');\n};\n\n/*\n   TesT if the input string is a Palindrome.\n   >>> isPalindrome('cat')\n   False\n   >>> isPalindrome('cata')\n   True\n   >>> isPalindrome('CATA')\n   True\n*/\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n};\n\n/*\n   TesT if the input string is a Palindrome.\n   >>> isPalindrome('cat')\n   False\n   >>> isPalindrome('cata')\n   True\n   >>> isPalindrome('CATA')\n   True\n*/\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n};\n\n/*\n   TesT if the input string is a Palindrome.\n   >>> isPalindrome('cat')\n   False\n   >>> isPalindrome('cata')\n   True\n   >>> isPalindrome('CATA')\n   True\n*/\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n};\n\n/*\n   TesT if the input string is a Palindrome.\n   >>> isPalindrome('cat')\n   False\n   >>> isPalindrome('cata')\n   True\n   >>> isPalindrome('CATA')\n   True\n*/\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n};\n\n/*\n   TesT if the input string is a Palindrome.\n   >>> isPalindrome('cat')\n   False\n   >>> isPalindrome('cata')\n   True\n   >>> isPalindrome('CATA')\n   True\n*/\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n};\n\n/*\n   TesT if the input string is a Palindrome.\n   >>> isPalindrome('cat')\n   False\n   >>> isPalindrome('cata')\n   True\n   >>> isPalindrome('CATA')\n   True\n*/\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n};\n\n/*\n   TesT if the input string is a Palindrome.\n   >>> isPalindrome('cat')\n   False\n   >>> isPalindrome('cata')\n   True\n   >>> isPalindrome('CATA')\n   True\n*/\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n};\n\n/*\n   TesT if the input string is a Palindrome.\n   >>> isPalindrome('cat')\n   False\n   >>> isPalindrome('cata')\n   True\n   >>> isPalindrome('CATA')\n   True\n*/\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n};\n\n/*\n   TesT if the input string is a Palindrome.\n   >>> isPalindrome('cat')\n   False\n   >>> isPalindrome('cata')\n   True\n   >>> isPalindrome('CATA')\n   True\n*/\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n};\n\n/*\n   TesT if the input string is a Palindrome.\n   >>> isPalindrome('cat')\n   False\n   >>> isPalindrome('cata')\n   True\n   >>> isPalindrome('CATA')\n   True\n*/\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n};\n\n/*\n   TesT if the input string is a Palindrome.\n   >>> isPalindrome('cat')\n   False\n   >>> isPalindrome('cata')\n   True\n   >>> isPalindrome('CATA')\n   True\n*/\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n};\n\n/*\n   TesT if the input string is a Palindrome.\n   >>> isPalindrome('cat')\n   False\n   >>> isPalindrome('cata')\n   True\n   >>> isPalindrome('CATA')\n   True\n*/\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n};\n\n/*\n   TesT if the input string is a Palindrome.\n   >>> isPalindrome('cat')\n   False\n   >>> isPalindrome('cata')\n   True\n   >>> isPalindrome('CATA')\n   True\n*/\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n};\n\n/*\n   TesT if the input string is a Palindrome.\n   >>> isPalindrome('cat')\n   False\n   >>> isPalindrome('cata')\n   True\n   >>> isPalindrome('CATA')\n   True\n*/\nconst isPalindrome = (string) => {\n  return string == makePalindrome(string);\n};"}
{"task_id": "JavaScript/11", "prompt": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '0'\n  for(let i = 0; i < a.length; i++) {\n    if(a[i] == b[i]) {\n      result += '0'\n    } else {\n      result += '1'\n    }\n  }\n  return result\n}\n\n/*\n  InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('110', '010')\n  '100'\n  */\nconst stringXor2 = (a, b) => {\n  let result = '0'\n  for(let i = 0; i < a.length; i++) {\n    if(a[i]!= b[i]) {\n      result += '1'\n    } else {\n      result += '0'\n    }\n  }\n  return result\n}\n\nconst stringXor3 = (a, b) => {\n  let result = ''\n  for(let i = 0; i < a.length; i++) {\n    if(a[i]!= b[i]) {\n      result += '1'\n    } else {\n      result += '0'\n    }\n  }\n  return result\n}\n\nconst stringXor4 = (a, b) => {\n  let result = ''\n  for(let i = 0; i < a.length; i++) {\n    if(a[i]!= b[i]) {\n      result += '1'\n    } else {\n      result += '0'\n    }\n  }\n  return result\n}\n\nmodule.exports = {\n  stringXor,\n  stringXor2,\n  stringXor3,\n  stringXor4\n}\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let maxLen = 0\n  let minLen = Number.MAX_SAFE_INTEGER\n  strings.forEach(str => {\n    let len = str.length\n    if (len > maxLen) {\n      maxLen = len\n    }\n    if (len < minLen) {\n      minLen = len\n    }\n  })\n  if (strings.length === 0) {\n    return null\n  }\n  if (minLen === maxLen) {\n    return strings[0]\n  }\n  return strings[Math.max.apply(Math, [0,...strings.map(s => s.length)]) - 1]\n}\n\nmodule.exports = longest\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let s = Math.abs(a),\n    t = Math.abs(b),\n    u = 0,\n    v = 1,\n    q = 0,\n    r = 1,\n    i = 0,\n    j = 1,\n    k = 0,\n    x = 0,\n    y = 0;\n  do {\n    if(s === 0) {\n      return b;\n    }\n    if(t === 0) {\n      return a;\n    }\n    if(a < 0) {\n      a = Math.abs(a);\n    }\n    if(b < 0) {\n      b = Math.abs(b);\n    }\n    if(a < b) {\n      s = a;\n      t = b;\n    } else {\n      s = b;\n      t = a;\n    }\n    q = Math.floor(s / t);\n    r = s % t;\n    x = 0;\n    y = 1;\n    for(i = 0; i < q; i++) {\n      x = x + y;\n    }\n    if(r!== 0) {\n      y = 0;\n      x = x + 1;\n    }\n    for(j = 1; j < t; j++) {\n      y = y + x;\n    }\n    k = x;\n    a = t;\n    b = q;\n  } while(k!== 0);\n  return a;\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n    const split = string.split('')\n    const index = {\n        last: -1,\n        value: split[0]\n    }\n\n    for (let i = 1; i < split.length; i++) {\n        index = {\n            last: i,\n            value: split[i]\n        }\n\n        if (index.value === '.') {\n            index.last = -1\n            index.value = split[i + 1]\n        }\n    }\n\n    return split.slice(0, index.last + 1)\n}\n\n/* RetUnr list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n    const split = string.split('')\n    const index = {\n        last: -1,\n        value: split[split.length - 1]\n    }\n\n    for (let i = split.length - 2; i >= 0; i--) {\n        index = {\n            last: i,\n            value: split[i]\n        }\n\n        if (index.value === '.') {\n            index.last = split.length - 1\n            index.value = split[i + 1]\n        }\n    }\n\n    return split.slice(index.last + 1)\n}\n\n/*\n  >>> removePrefix('a.b.c', 'a.b')\n  'c'\n  */\nconst removePrefix = (string, prefix) => {\n    const index = string.indexOf(prefix)\n    return string.slice(index + prefix.length)\n}\n\n/*\n  >>> removeSuffix('a.b.c', 'c')\n  'a.b'\n  */\nconst removeSuffix = (string, suffix) => {\n    const index = string.lastIndexOf(suffix)\n    return string.slice(0, index)\n}\n\n/*\n  >>> removePrefixAndSuffix('a.b.c', 'a.b')\n  'c'\n  */\nconst removePrefixAndSuffix = (string, prefix, suffix) => {\n    const index = string.indexOf(prefix)\n    const index2 = string.lastIndexOf(suffix)\n    return string.slice(index + prefix.length, index2)\n}\n\n/*\n  >>> isValid(['a.b', 'a.b.c', 'a.b.c.d', 'a.b.c.d.e'])\n  True\n  */\nconst isValid = (array) => {\n    const len = array.length\n    for (let i = 0; i < len; i++) {\n        if (array[i].indexOf('.') < 0) {\n            return false\n        }\n    }\n    return true\n}\n\n/*\n  >>> findAll(['a.b.c', 'a.b.c.d', 'a.b.c.d.e'], 'a.b')\n  [{\n    first: 'a',\n    last: 'b'\n  }, {\n    first: 'a',\n    last: 'b'\n  }, {\n    first: 'a',\n    last: 'b'\n  }]\n  */\nconst findAll = (array, prefix) => {\n    const len = array.length\n    const list = []\n    for (let i = 0; i < len; i++) {\n        if (array[i].indexOf(prefix) === 0) {\n            list.push({\n                first: prefix,\n                last: array[i].slice(prefix.length)\n            })\n        }\n    }\n    return list\n}\n\nmodule.exports = {\n    allPrefixes,\n    allSuffixes,\n    removePrefix,\n    removeSuffix,\n    removePrefixAndSuffix,\n    isValid,\n    findAll\n}<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n    if (n === 0) {\n        return '0';\n    }\n\n    let s = '';\n    while (n > 0) {\n        s = `${s}${n % 10}`;\n        n = Math.floor(n / 10);\n    }\n    return s;\n};\n\n// Exercises\n\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};\n\n// TODO\nconst sumOfMultiples = (num, from, to) => {\n    let n = num;\n    let sum = 0;\n    while (n >= from && n <= to) {\n        sum += n;\n        n--;\n    }\n    return sum;\n};"}
{"task_id": "JavaScript/16", "prompt": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  let counter = chars.length\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n    if (counter <= char.length) {\n      counter = char.length\n    } else {\n      counter++\n    }\n  }\n  return counter\n}\n\nexport default countDistinctCharacters\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const m_l = music_string.split(' ')\n  const t_l = []\n  const m_l_idx = 0\n  const t_l_idx = 0\n  const is_l = false\n  const is_o = false\n  const is_s = false\n  let note_value = 0\n  let note_type = ''\n  let note_octave = 0\n  while (m_l_idx < m_l.length) {\n    const c_t = m_l[m_l_idx]\n    if (c_t === 'o') {\n      if (is_l) {\n        t_l[t_l_idx] += 1\n      } else {\n        t_l.push(1)\n      }\n      is_o = true\n      m_l_idx++\n    } else if (c_t === 'o|') {\n      if (is_l) {\n        t_l[t_l_idx] += 2\n      } else {\n        t_l.push(2)\n      }\n      is_o = true\n      m_l_idx++\n    } else if (c_t === '.') {\n      if (is_o) {\n        t_l[t_l_idx] += 4\n      } else {\n        t_l.push(4)\n      }\n      is_o = false\n      m_l_idx++\n    } else if (c_t === '|') {\n      if (is_o) {\n        t_l[t_l_idx] += 2\n      } else {\n        t_l.push(2)\n      }\n      is_o = false\n      m_l_idx++\n    } else if (c_t ==='s') {\n      if (is_o) {\n        t_l[t_l_idx] += 1\n      } else {\n        t_l.push(1)\n      }\n      is_o = false\n      is_s = true\n      m_l_idx++\n    } else if (is_s) {\n      t_l[t_l_idx] += 1\n      is_s = false\n      m_l_idx++\n    } else if (c_t === '|') {\n      t_l.push(2)\n      m_l_idx++\n    } else if (c_t === 'o') {\n      t_l.push(4)\n      m_l_idx++\n    } else if (c_t === 'o') {\n      t_l.push(1)\n      m_l_idx++\n    }\n  }\n  return t_l\n}\n\nconst music_to_list = (music_string) => {\n  const t_l = parseMusic(music_string)\n  const l = t_l.map((i) => i)\n  const s_l = l.sort()\n  const l_l = []\n  for (let i = 0; i < s_l.length; i++) {\n    l_l.push(s_l[i] * t_l[i])\n  }\n  return l_l\n}\n\nconsole.log(music_to_list('o o|.| o| o|.|.|.|.| o o'))\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    const str = string.toString();\n    const len = str.length;\n    let count = 0;\n    let index = -1;\n\n    while ((index = str.indexOf(substring, index + 1))!== -1) {\n        count += 1;\n    }\n\n    return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five', 'six', 'seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const nums = splitNumbers(numbers)\n  const length = nums.length\n  const maxLength = Math.max(...nums.map(n => n.length))\n  return repeatString('0', maxLength)\n}\n\n/*\n  InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst splitNumbers = (numbers) => {\n  const nums = numbers.replace(/\\s+/g, '').split(' ')\n  const numsLength = nums.length\n  return nums.map(n => {\n    return n.length === 1? n : n.replace(/\\d/g, '')\n  })\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst getElement = (list) => {\n  const findClosestElements = (numbers) => {\n    const { sortBy } = require('../utils');\n    const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n    return closest[0];\n  };\n  const closest = findClosestElements(list);\n  return closest;\n};\n\nconst findClosestElements2 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements3 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements4 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements5 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements6 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements7 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements8 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements9 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements10 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements11 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements12 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements13 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements14 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements15 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements16 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements17 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements18 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements19 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestElements20 = (numbers) => {\n  const { sortBy } = require('../utils');\n  const closest = sortBy(numbers, (number) => Math.abs(number - 2.2));\n  return closest[0];\n};\n\nconst findClosestE"}
{"task_id": "JavaScript/21", "prompt": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let unitSize = 0\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let min = Math.min(numbers[i], numbers[i + 1])\n    if (min!= min) {\n      throw new Error(\"Input list contains NaN.\")\n    }\n    if (min!= 0) {\n      unitSize = min\n      break\n    }\n  }\n  let scaleFactor = 1 / unitSize\n  for (let i = 0; i < numbers.length - 1; i++) {\n    numbers[i] = numbers[i] * scaleFactor\n  }\n  return numbers\n}\n\n/* GivEn a list of numbers, apply the GivEn function that finds the mean\n  >>> findMean([1, 2, 3, 4, 5, 6])\n  3.0\n  >>> findMean([1, 2, 3, 4, 5])\n  5.0\n  >>> findMean([1, 2, 3])\n  Traceback (most recent call last):\n ...\n  TypeError: 'findMean' of 'findMean' doesn't accept 0 arguments\n  >>> findMean([1, 2, 3, 4, 5, 6, 7])\n  4.5\n  */\nconst findMean = (numbers) => {\n  let total = 0\n  let length = numbers.length\n  for (let i = 0; i < length; i++) {\n    total += numbers[i]\n  }\n  return total / length\n}\n\n/* GivEn a list of numbers, apply the GivEn function that finds the median\n  >>> findMedian([1, 2, 3, 4, 5, 6])\n  3.0\n  >>> findMedian([1, 2, 3, 4, 5])\n  4.0\n  >>> findMedian([1, 2, 3])\n  Traceback (most recent call last):\n ...\n  TypeError: 'findMedian' of 'findMedian' doesn't accept 0 arguments\n  >>> findMedian([1, 2, 3, 4, 5, 6, 7])\n  4.5\n  */\nconst findMedian = (numbers) => {\n  let length = numbers.length\n  if (length % 2 == 0) {\n    return (numbers[length / 2 - 1] + numbers[length / 2]) / 2\n  } else {\n    return numbers[length / 2]\n  }\n}\n\n/* GivEn a list of numbers, apply the GivEn function that finds the\n  highest common divisor\n  >>> findLCD([1, 2, 3, 4, 5, 6])\n  1\n  >>> findLCD([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> findLCD([1, 2, 3])\n  Traceback (most recent call last):\n ...\n  TypeError: 'findLCD' of 'findLCD' doesn't accept 0 arguments\n  >>> findLCD([1, 2, 3, 4, 5, 6, 7])\n  6\n  */\nconst findLCD = (numbers) => {\n  let length = numbers.length\n  for (let i = 0; i < length - 1; i++) {\n    if (numbers[i] > numbers[i + 1]) {\n      return numbers[i + 1]\n    }\n  }\n  return numbers[0]\n}\n\n/* GivEn a list of numbers, apply the GivEn function that finds the lowest\n  common multiple\n  >>> findLCC([1, 2, 3, 4, 5, 6])\n  24\n  >>> findLCC([1, 2, 3, 4, 5, 6, 7])\n  42\n  >>> findLCC([1, 2, 3])\n  Traceback (most recent call last):\n ...\n  TypeError: 'findLCC' of 'findLCC' doesn't accept 0 arguments\n  >>> findLCC([1, 2, 3, 4, 5, 6, 7])\n  42\n  */\nconst findLCC = (numbers) => {\n  let lcd = findLCD(numbers)\n  return numbers.reduce((p, n) => p * n, lcd)\n}\n\n/* GivEn a list of numbers, apply the GivEn function that finds the sum\n  >>> findSum([1, 2, 3, 4, 5, 6])\n  21\n  >>> findSum([1, 2, 3, 4, 5, 6, 7])\n  42\n  >>> findSum([1, 2, 3])\n  Traceback (most recent call last):\n ...\n  TypeError: 'findSum' of 'findSum' doesn't accept 0 arguments\n  >>> findSum([1, 2, 3, 4, 5, 6, 7])\n  42\n  */\nconst findSum = (numbers) => {\n  let length = numbers.length\n  return numbers.reduce((p, n) => p + n, 0)\n}\n\n/* GivEn a list of numbers, apply the GivEn function that finds the\n  standard deviation\n  >>> findStdDev([1, 2, 3, 4, 5, 6, 7, 8])\n  3.0\n  >>> findStdDev([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  4.0\n  >>> findStdDev([1, 2, 3, 4, 5, 6, 7, 8])\n  Traceback (most recent call last):\n ...\n  TypeError: 'findStdDev' of 'findStdDev' doesn't accept 0 arguments\n  >>> findStdDev([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  4.0\n  */\nconst findStdDev = (numbers) => {\n  let length = numbers.length\n  let total = 0\n  for (let i = 0; i < length; i++) {\n    total += numbers[i]\n  }\n  return"}
{"task_id": "JavaScript/22", "prompt": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const integers = values.filter((val) => isInteger(val));\n  const intValues = values.filter((val) => isInteger(val));\n  const hasZero = intValues.find(isZero);\n  if (hasZero) {\n    const zero = intValues.find(isZero);\n    const hasPositive = intValues.find(isPositive);\n    const hasNegative = intValues.find(isNegative);\n    if (hasPositive && hasNegative) {\n      return [zero, hasPositive, hasNegative];\n    } else if (hasPositive) {\n      return [zero, hasPositive];\n    } else if (hasNegative) {\n      return [zero, hasNegative];\n    }\n    return [zero];\n  }\n  return integers;\n};\n\nconst isPositive = (num) => {\n  return num > 0;\n};\n\nconst isNegative = (num) => {\n  return num < 0;\n};\n\nconst isInteger = (num) => {\n  return typeof num === 'number' && num % 1 === 0;\n};\n\nconst isZero = (num) => {\n  return num === 0;\n};\n\nmodule.exports = filterIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (!string) {\n    return 0\n  }\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen(null)\n  0\n  >>> strlen(undefined)\n  0\n  >>> strlen(0)\n  0\n  >>> strlen(1)\n  1\n  >>> strlen(true)\n  1\n  >>> strlen(false)\n  1\n  >>> strlen({})\n  0\n  >>> strlen({'a': 'a'})\n  1\n  >>> strlen([])\n  0\n  >>> strlen([1, 2, 3])\n  3\n  >>> strlen(new Date())\n  14\n  */\nconst strlen = (string) => {\n  if (typeof string ==='string') {\n    return string.length\n  }\n  return 0\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (!string) {\n    return 0\n  }\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen(null)\n  0\n  >>> strlen(undefined)\n  0\n  >>> strlen(0)\n  0\n  >>> strlen(1)\n  1\n  >>> strlen(true)\n  1\n  >>> strlen(false)\n  1\n  >>> strlen({})\n  0\n  >>> strlen({'a': 'a'})\n  1\n  >>> strlen([])\n  0\n  >>> strlen([1, 2, 3])\n  3\n  >>> strlen(new Date())\n  14\n  */\nconst strlen = (string) => {\n  if (typeof string ==='string') {\n    return string.length\n  }\n  return 0\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (!string) {\n    return 0\n  }\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen(null)\n  0\n  >>> strlen(undefined)\n  0\n  >>> strlen(0)\n  0\n  >>> strlen(1)\n  1\n  >>> strlen(true)\n  1\n  >>> strlen(false)\n  1\n  >>> strlen({})\n  0\n  >>> strlen({'a': 'a'})\n  1\n  >>> strlen([])\n  0\n  >>> strlen([1, 2, 3])\n  3\n  >>> strlen(new Date())\n  14\n  */\nconst strlen = (string) => {\n  if (typeof string ==='string') {\n    return string.length\n  }\n  return 0\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (!string) {\n    return 0\n  }\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen(null)\n  0\n  >>> strlen(undefined)\n  0\n  >>> strlen(0)\n  0\n  >>> strlen(1)\n  1\n  >>> strlen(true)\n  1\n  >>> strlen(false)\n  1\n  >>> strlen({})\n  0\n  >>> strlen({'a': 'a'})\n  1\n  >>> strlen([])\n  0\n  >>> strlen([1, 2, 3])\n  3\n  >>> strlen(new Date())\n  14\n  */\nconst strlen = (string) => {\n  if (typeof string ==='string') {\n    return string.length\n  }\n  return 0\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (!string) {\n    return 0\n  }\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen(null)\n  0\n  >>> strlen(undefined)\n  0\n  >>> strlen(0)\n  0\n  >>> strlen(1)\n  1\n  >>> strlen(true)\n  1\n  >>> strlen(false)\n  1\n  >>> strlen({})\n  0\n  >>> strlen({'a': 'a'})\n  1\n  >>> strlen([])\n  0\n  >>> strlen([1, 2, 3])\n  3\n  >>> strlen(new Date())\n  14\n  */\nconst strlen = (string) => {\n  if (typeof string ==='string') {\n    return string.length\n  }\n  return 0\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (!string) {\n    return 0\n  }\n  return string.length\n}\n\n/* RetUrn lEngth Of gIven string\n  >>> strlen(null)\n  0\n  >>> strlen(undefined)\n  0\n  >>> strlen(0)\n  0\n  >>> strlen(1)\n  1\n  >>> strlen(true)\n  1\n  >>> strlen(false)\n  1\n  >>> strlen({})\n  0\n  >>> strlen({'a': 'a'})\n  1\n  >>> strlen([])\n  0\n  >>> strlen([1, 2, 3])\n  3\n  >>> strlen(new Date())\n  14\n  */\nconst strlen = (string) => {\n  if (typeof string ==='string') {\n    return string.length\n  }\n  return 0\n}\n\nmodule.exports = str"}
{"task_id": "JavaScript/24", "prompt": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let l = 1, r = n - 1;\n  let mid = (l + r) / 2;\n  let i = 0;\n\n  while (l < r) {\n    let midv = n / mid;\n    if (midv < mid) {\n      l = mid + 1;\n    } else {\n      r = mid - 1;\n    }\n    mid = (l + r) / 2;\n    i++;\n  }\n\n  return n / l;\n};\n\n/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let l = 1, r = n - 1;\n  let mid = (l + r) / 2;\n  let i = 0;\n\n  while (l < r) {\n    let midv = n / mid;\n    if (midv < mid) {\n      l = mid + 1;\n    } else {\n      r = mid - 1;\n    }\n    mid = (l + r) / 2;\n    i++;\n  }\n\n  return i;\n};\n\nconst largestDivisor3 = (n) => {\n  let l = 1, r = n - 1;\n  let mid = (l + r) / 2;\n  let i = 0;\n\n  while (l < r) {\n    let midv = n / mid;\n    if (midv < mid) {\n      l = mid + 1;\n    } else {\n      r = mid - 1;\n    }\n    mid = (l + r) / 2;\n    i++;\n  }\n\n  return i;\n};\n\nconst largestDivisor4 = (n) => {\n  let l = 1, r = n - 1;\n  let mid = (l + r) / 2;\n  let i = 0;\n\n  while (l < r) {\n    let midv = n / mid;\n    if (midv < mid) {\n      l = mid + 1;\n    } else {\n      r = mid - 1;\n    }\n    mid = (l + r) / 2;\n    i++;\n  }\n\n  return i;\n};\n\nconst largestDivisor5 = (n) => {\n  let l = 1, r = n - 1;\n  let mid = (l + r) / 2;\n  let i = 0;\n\n  while (l < r) {\n    let midv = n / mid;\n    if (midv < mid) {\n      l = mid + 1;\n    } else {\n      r = mid - 1;\n    }\n    mid = (l + r) / 2;\n    i++;\n  }\n\n  return i;\n};\n\nconst largestDivisor6 = (n) => {\n  let l = 1, r = n - 1;\n  let mid = (l + r) / 2;\n  let i = 0;\n\n  while (l < r) {\n    let midv = n / mid;\n    if (midv < mid) {\n      l = mid + 1;\n    } else {\n      r = mid - 1;\n    }\n    mid = (l + r) / 2;\n    i++;\n  }\n\n  return i;\n};\n\nconst largestDivisor7 = (n) => {\n  let l = 1, r = n - 1;\n  let mid = (l + r) / 2;\n  let i = 0;\n\n  while (l < r) {\n    let midv = n / mid;\n    if (midv < mid) {\n      l = mid + 1;\n    } else {\n      r = mid - 1;\n    }\n    mid = (l + r) / 2;\n    i++;\n  }\n\n  return i;\n};\n\nconst largestDivisor8 = (n) => {\n  let l = 1, r = n - 1;\n  let mid = (l + r) / 2;\n  let i = 0;\n\n  while (l < r) {\n    let midv = n / mid;\n    if (midv < mid) {\n      l = mid + 1;\n    } else {\n      r = mid - 1;\n    }\n    mid = (l + r) / 2;\n    i++;\n  }\n\n  return i;\n};\n\nconst largestDivisor9 = (n) => {\n  let l = 1, r = n - 1;\n  let mid = (l + r) / 2;\n  let i = 0;\n\n  while (l < r) {\n    let midv = n / mid;\n    if (midv < mid) {\n      l = mid + 1;\n    } else {\n      r = mid - 1;\n    }\n    mid = (l + r) / 2;\n    i++;\n  }\n\n  return i;\n};\n\nconst largestDivisor10 = (n) => {\n  let l = 1, r = n - 1;\n  let mid = (l + r) / 2;\n  let i = 0;\n\n  while (l < r) {\n    let midv = n / mid;\n    if (midv < mid) {\n      l = mid + 1;\n    } else {\n      r = mid - 1;\n    }\n    mid = (l + r) / 2;\n    i++;\n  }\n\n  return i;\n};\n\nconst largestDivisor11 = (n) => {\n  let l = 1, r = n - 1;\n  let mid = (l + r) / 2;\n  let i = 0;\n\n  while (l < r) {\n    let midv = n / mid;\n    if (midv < mid) {\n      l = mid + 1;\n    } else {\n      r = mid - 1;\n    }\n    mid = (l + r) / 2;\n    i++;\n  }\n\n  return i;\n};\n\nconst largestDivisor12 = (n) => {\n  let l = 1, r = n - 1;\n  let mid = (l + r) / 2;\n  let i = 0;"}
{"task_id": "JavaScript/25", "prompt": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    // console.log(\"factorize\")\n    // console.log(n)\n    const isPrime = (n) => {\n        if (n < 2) return false\n        const sqrt = Math.sqrt(n)\n        for (let i = 2; i <= sqrt; i++) {\n            if (n % i === 0) return false\n        }\n        return true\n    }\n    const factors = []\n    let i = 2\n    while (n > 1) {\n        if (isPrime(i)) {\n            const p = n / i\n            if (p >= i) {\n                factors.push([i, p])\n                n = n - p * i\n                i += 1\n            } else {\n                factors.push([i, n])\n                break\n            }\n        } else {\n            break\n        }\n    }\n    return factors\n}\n\nconst getLargestPrimeFactor = (n) => {\n    const factors = factorize(n)\n    let largest = 0\n    for (let i = 0; i < factors.length; i++) {\n        const [num, p] = factors[i]\n        if (num > largest) largest = num\n    }\n    return largest\n}\n\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getLargestPrimeFactor(70))\n// console.log(getLargestPrimeFactor(25))\n// console.log(getL"}
{"task_id": "JavaScript/26", "prompt": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const output = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1) {\n      output.push(numbers[i])\n    }\n  }\n  return output\n}\n\nexport {removeDuplicates}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/\\s+/g,'').replace(/([a-z\\d])([A-Z])/g, '$1 $2').replace(/\\d/g, '0').replace(/^0+|0+$/g, '');\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst reverseCase = (string) => {\n  return string.toLowerCase().replace(/\\s+/g,'').replace(/([a-z\\d])([A-Z])/g, '$2 $1').replace(/\\d/g, '0').replace(/^0+|0+$/g, '');\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst firstUpCase = (string) => {\n  return string.toLowerCase().replace(/\\s+/g,'').replace(/([a-z\\d])([A-Z])/g, '$1 $2').replace(/\\d/g, '0').replace(/^0+|0+$/g, '').toUpperCase();\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst firstLowerCase = (string) => {\n  return string.toUpperCase().replace(/\\s+/g,'').replace(/([a-z\\d])([A-Z])/g, '$2 $1').replace(/\\d/g, '0').replace(/^0+|0+$/g, '').toLowerCase();\n}\n\nconst flip = (string, flipCase) => {\n  return flipCase? flipCase(string) : reverseCase(string);\n}\n\nconst flipCaseWithReplace = (string, flipCase, replace) => {\n  return flipCase? flipCase(string) : replace(string);\n}\n\nconst firstUpCaseWithReplace = (string, flipCase, replace) => {\n  return flipCase? firstUpCase(string) : replace(string);\n}\n\nconst firstLowerCaseWithReplace = (string, flipCase, replace) => {\n  return flipCase? firstLowerCase(string) : replace(string);\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst reverseCaseWithReplace = (string, replace) => {\n  return string.toLowerCase().replace(/\\s+/g,'').replace(/([a-z\\d])([A-Z])/g, '$2 $1').replace(/\\d/g, '0').replace(/^0+|0+$/g, '').toUpperCase();\n}\n\nmodule.exports = {\n  flipCase,\n  flipCaseWithReplace,\n  firstUpCaseWithReplace,\n  firstLowerCaseWithReplace,\n  reverseCaseWithReplace\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let length = 0;\n  let str = '';\n  for (let i = 0; i < strings.length; i++) {\n    length += strings[i].length;\n  }\n  for (let i = 0; i < strings.length; i++) {\n    str += strings[i];\n  }\n  return str;\n}\n\n// ConCateNate list oF numbers inTo a siNgle sTring\nconst concatenateNumbers = (strings) => {\n  let length = 0;\n  let str = '';\n  for (let i = 0; i < strings.length; i++) {\n    length += strings[i].length;\n  }\n  for (let i = 0; i < strings.length; i++) {\n    str += strings[i];\n  }\n  return str;\n}\n\n// ConCateNate list oF sTrings inTo a siNgle sTring\nconst concatenateStrings = (strings) => {\n  let length = 0;\n  let str = '';\n  for (let i = 0; i < strings.length; i++) {\n    length += strings[i].length;\n  }\n  for (let i = 0; i < strings.length; i++) {\n    str += strings[i];\n  }\n  return str;\n}\n\n// ConCateNate a siNgle sTring oF strings\nconst concatenateString = (str) => {\n  let length = 0;\n  for (let i = 0; i < str.length; i++) {\n    length += str[i].length;\n  }\n  return str;\n}\n\n// ConCateNate a siNgle sTring oF numbers\nconst concatenateNumber = (num) => {\n  let length = 0;\n  for (let i = 0; i < num.length; i++) {\n    length += num[i].length;\n  }\n  return num;\n}\n\n// ConCateNate a siNgle sTring oF numbers\nconst concatenateInteger = (num) => {\n  let length = 0;\n  for (let i = 0; i < num.length; i++) {\n    length += num[i].length;\n  }\n  return num;\n}\n\n// ConCateNate a siNgle sTring oF numbers\nconst concatenateFloat = (num) => {\n  let length = 0;\n  for (let i = 0; i < num.length; i++) {\n    length += num[i].length;\n  }\n  return num;\n}\n\n// ConCateNate a siNgle sTring oF numbers\nconst concatenateDouble = (num) => {\n  let length = 0;\n  for (let i = 0; i < num.length; i++) {\n    length += num[i].length;\n  }\n  return num;\n}\n\n// ConCateNate a siNgle sTring oF strings\nconst concatenateBoolean = (bool) => {\n  let length = 0;\n  for (let i = 0; i < bool.length; i++) {\n    length += bool[i].length;\n  }\n  return bool;\n}\n\n// ConCateNate a siNgle sTring oF strings\nconst concatenateChar = (char) => {\n  let length = 0;\n  for (let i = 0; i < char.length; i++) {\n    length += char[i].length;\n  }\n  return char;\n}\n\n// ConCateNate a siNgle sTring oF strings\nconst concatenateString = (str) => {\n  let length = 0;\n  for (let i = 0; i < str.length; i++) {\n    length += str[i].length;\n  }\n  return str;\n}\n\n// ConCateNate a siNgle sTring oF strings\nconst concatenateArray = (array) => {\n  let length = 0;\n  for (let i = 0; i < array.length; i++) {\n    length += array[i].length;\n  }\n  return array;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  Filter aN array of strings, return only oneS that start with a GivEN string.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'x')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  Filter aN array of strings, return only oneS that contain a GivEN string.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'x')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  Filter aN array of strings, return only oneS that contain the GivEN string.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'x')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  Filter aN array of strings, return only oneS that start with a GivEN string.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'x')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  Filter aN array of strings, return only oneS that start with a GivEN string.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'x')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  Filter aN array of strings, return only oneS that start with a GivEN string.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'x')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  Filter aN array of strings, return only oneS that contain a GivEN string.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'x')\n  []\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix)!== -1) {\n      result.push(strings[i])\n    }\n  }\n  return result\n}\n\n/*\n  Filter aN array of strings, return only oneS that contain a GivEN string.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', '"}
{"task_id": "JavaScript/30", "prompt": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    let x = l[i]\n    if (x > 0) {\n      result.push(x)\n    }\n  }\n  return result\n}\n\n/*\n  Let's get the negative elements of the list.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, -3, -5, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i++) {\n    let x = l[i]\n    if (x < 0) {\n      result.push(x)\n    }\n  }\n  return result\n}\n\n/*\n  Let's get the sum of the elements in the list.\n  >>> getSum([1, -2, 3, -4])\n  -1\n  >>> getSum([1, -2, 3, -4, 5, -6])\n  -1\n  >>> getSum([1, -2, 3, -4, 5, -6, 9, 0, 123, 1, -10])\n  -10\n  */\nconst getSum = (l) => {\n  let result = 0\n  for (let i = 0; i < l.length; i++) {\n    let x = l[i]\n    result += x\n  }\n  return result\n}\n\n/*\n  Let's get the mean of the list.\n  >>> getMean([1, -2, 3, -4])\n  0\n  >>> getMean([1, -2, 3, -4, 5, -6])\n  2.5\n  >>> getMean([1, -2, 3, -4, 5, -6, 9, 0, 123, 1, -10])\n  7.5\n  */\nconst getMean = (l) => {\n  let result = 0\n  for (let i = 0; i < l.length; i++) {\n    let x = l[i]\n    result += x\n  }\n  return result / l.length\n}\n\n/*\n  Let's get the variance of the list.\n  >>> getVariance([1, -2, 3, -4])\n  0\n  >>> getVariance([1, -2, 3, -4, 5, -6])\n  0.5\n  >>> getVariance([1, -2, 3, -4, 5, -6, 9, 0, 123, 1, -10])\n  0.5\n  */\nconst getVariance = (l) => {\n  let result = 0\n  for (let i = 0; i < l.length; i++) {\n    let x = l[i]\n    result += Math.pow(x, 2)\n  }\n  return result / l.length\n}\n\n/*\n  Let's get the standard deviation of the list.\n  >>> getStandardDeviation([1, -2, 3, -4])\n  0\n  >>> getStandardDeviation([1, -2, 3, -4, 5, -6])\n  1.0\n  >>> getStandardDeviation([1, -2, 3, -4, 5, -6, 9, 0, 123, 1, -10])\n  1.0\n  */\nconst getStandardDeviation = (l) => {\n  let result = 0\n  for (let i = 0; i < l.length; i++) {\n    let x = l[i]\n    result += Math.pow(x, 2)\n  }\n  return Math.sqrt(result / l.length)\n}\n\n/*\n  Let's get the median of the list.\n  >>> getMedian([1, -2, 3, -4, 5, -6, 9, 0, 123, 1, -10])\n  3\n  >>> getMedian([1, -2, 3, -4, 5, -6, 9, 0, 123, 1, -10, 1, -2])\n  3\n  >>> getMedian([1, -2, 3, -4, 5, -6, 9, 0, 123, 1, -10, 1, -2, 1, -2])\n  3\n  */\nconst getMedian = (l) => {\n  let result = getSum(l) / 2\n  if (result % 2 == 0) {\n    return result / 2\n  } else {\n    return result / 2 + 1\n  }\n}\n\n/*\n  Let's get the first and last element of the list.\n  >>> getFirstAndLast([1, 2, 3, 4])\n  [1, 3]\n  >>> getFirstAndLast([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 9]\n  */\nconst getFirstAndLast = (l) => {\n  return [...l,...l.reverse()]\n}\n\n/*\n  Let's get the midpoint of the list.\n  >>> getMidpoint([1, 2, 3, 4, 5])\n  2\n  >>> getMidpoint([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  5\n  */\nconst getMidpoint = (l) => {\n  let result = getMean(l)\n  if (l.length % 2 == 1) {\n    return result\n  } else {\n    return result + (l.length / 2)\n  }\n}\n\n/*\n  Let's get the mode of the list.\n  >>> getMode([1, 2, 3, 4, 5])\n  5\n  >>> getMode([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> getMode([1, 2, 3, 4, 5, 6, 7, 8, 9, 1"}
{"task_id": "JavaScript/31", "prompt": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n < 2) return false\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> isPrime(12)\n  true\n  >>> isPrime(23)\n  true\n  >>> isPrime(30)\n  false\n  >>> isPrime(31)\n  true\n  >>> isPrime(37)\n  true\n  >>> isPrime(41)\n  true\n  >>> isPrime(51)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(63)\n  true\n  >>> isPrime(71)\n  true\n  >>> isPrime(71)\n  false\n  >>> isPrime(73)\n  true\n  >>> isPrime(79)\n  true\n  >>> isPrime(81)\n  true\n  >>> isPrime(87)\n  true\n  >>> isPrime(91)\n  true\n  >>> isPrime(99)\n  true\n  >>> isPrime(101)\n  true\n  >>> isPrime(103)\n  true\n  >>> isPrime(107)\n  true\n  >>> isPrime(109)\n  true\n  >>> isPrime(113)\n  true\n  >>> isPrime(119)\n  true\n  >>> isPrime(121)\n  true\n  >>> isPrime(127)\n  true\n  >>> isPrime(131)\n  true\n  >>> isPrime(137)\n  true\n  >>> isPrime(139)\n  true\n  >>> isPrime(149)\n  true\n  >>> isPrime(151)\n  true\n  >>> isPrime(157)\n  true\n  >>> isPrime(163)\n  true\n  >>> isPrime(167)\n  true\n  >>> isPrime(173)\n  true\n  >>> isPrime(179)\n  true\n  >>> isPrime(181)\n  true\n  >>> isPrime(191)\n  true\n  >>> isPrime(193)\n  true\n  >>> isPrime(197)\n  true\n  >>> isPrime(199)\n  true\n  >>> isPrime(211)\n  true\n  >>> isPrime(223)\n  true\n  >>> isPrime(227)\n  true\n  >>> isPrime(229)\n  true\n  >>> isPrime(233)\n  true\n  >>> isPrime(239)\n  true\n  >>> isPrime(241)\n  true\n  >>> isPrime(251)\n  true\n  >>> isPrime(257)\n  true\n  >>> isPrime(263)\n  true\n  >>> isPrime(269)\n  true\n  >>> isPrime(271)\n  true\n  >>> isPrime(277)\n  true\n  >>> isPrime(281)\n  true\n  >>> isPrime(283)\n  true\n  >>> isPrime(283)\n  false\n  >>> isPrime(289)\n  true\n  >>> isPrime(291)\n  true\n  >>> isPrime(293)\n  true\n  >>> isPrime(297)\n  true\n  >>> isPrime(299)\n  true\n  >>> isPrime(301)\n  true\n  >>> isPrime(307)\n  true\n  >>> isPrime(311)\n  true\n  >>> isPrime(313)\n  true\n  >>> isPrime(317)\n  true\n  >>> isPrime(319)\n  true\n  >>> isPrime(331)\n  true\n  >>> isPrime(337)\n  true\n  >>> isPrime(347)\n  true\n  >>> isPrime(349)\n  true\n  >>> isPrime(353)\n  true\n  >>> isPrime(359)\n  true\n  >>> isPrime(367)\n  true\n  >>> isPrime(373)\n  true\n  >>> isPrime(379)\n  true\n  >>> isPrime(383)\n  true\n  >>> isPrime(389)\n  true\n  >>> isPrime(397)\n  true\n  >>> isPrime(401)\n  true\n  >>> isPrime(409)\n  true\n  >>> isPrime(419)\n  true\n  >>> isPrime(421)\n  true\n  >>> isPrime(431)\n  true\n  >>> isPrime(433)\n  true\n  >>> isPrime(439)\n  true\n  >>> isPrime(451)\n  true\n  >>> isPrime(457)\n  true\n  >>> isPrime(461)\n  true\n  >>> isPrime(463)\n  true\n  >>> isPrime(467)\n  true\n  >>> isPrime(479)\n  true\n  >>> isPrime(481)\n  true\n  >>> isPrime(487)\n  true\n  >>> isPrime(491)\n  true\n  >>> isPrime(499)\n  true\n  >>> isPrime(503)\n  true\n  >>> isPrime(509)\n  true\n  >>> isPrime(521)\n  true\n  >>> isPrime(523)\n  true\n  >>> isPrime(541)\n  true\n  >>> isPrime(547)\n  true\n  >>> isPrime(557)\n  true\n  >>> isPrime(563)\n  true\n  >>> isPrime(569)\n  true\n  >>> isPrime(571)\n  true\n  >>> isPrime(577)\n  true\n  >>> isPrime(587)\n  true\n  >>> isPrime(587)\n  false\n  >>> isPrime(601)\n  true\n  >>> isPrime(607)\n  true\n  >>> isPrime(613)\n  true\n  >>> isPrime(617)\n  true\n  >>> isPrime(619)\n  true\n  >>> isPrime(631)\n  true\n  >>> isPrime(641)\n  true\n  >>> isPrime(643)\n  true\n  >>> isPrime(647)\n  true\n  >>> isPrime(653)\n  true\n  >>> isPrime(659)\n  true\n  >>> is"}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length === 0) {\n    throw new Error(\"No coefficients\");\n  }\n  const coeFf = xs.length;\n  const xsMax = xs[coeFf - 1];\n  const max = Math.abs(xsMax);\n  let maxIndex = coeFf - 1;\n  let t = 0;\n  let a;\n  let b;\n  let c;\n  let x;\n  let r;\n  let k;\n  for (let i = coeFf - 2; i >= 0; i--) {\n    a = xs[i];\n    b = xs[i + 1];\n    c = xs[i + 2];\n    r = a + b * x + b * x * x + c * x * x * x;\n    if (r > max) {\n      max = r;\n      maxIndex = i;\n    }\n  }\n  x = -1;\n  for (let i = 0; i < maxIndex + 1; i++) {\n    k = i;\n    if (k > maxIndex) {\n      k = maxIndex;\n    }\n    r = xs[k] + x * x * x;\n    if (r > max) {\n      x = Math.pow(x, 1.0 / k);\n      r = poly(x);\n      if (r < 0) {\n        x = -x;\n      }\n    }\n  }\n  return x;\n}\n\n// console.log(findZero([-1, 2, 2, -3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4"}
{"task_id": "JavaScript/33", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let result = []\n  const i = 0\n  const j = 0\n  const k = 0\n  while (i < l.length) {\n    if (l[i] === 3) {\n      result[j] = l[i]\n      j++\n    } else {\n      while (k < l.length && l[k] < 3) {\n        result[j] = l[k]\n        k++\n      }\n      if (l[k]!== 3) {\n        result[j] = l[k]\n        k++\n      }\n      j++\n    }\n    i++\n  }\n  return result\n}\n\nconst sortFirst = (l) => {\n  let result = []\n  const i = 0\n  const j = 0\n  const k = 0\n  while (i < l.length) {\n    if (l[i] === 1) {\n      result[j] = l[i]\n      j++\n    } else {\n      while (k < l.length && l[k] < 1) {\n        result[j] = l[k]\n        k++\n      }\n      if (l[k]!== 1) {\n        result[j] = l[k]\n        k++\n      }\n      j++\n    }\n    i++\n  }\n  return result\n}\n\nexport default {\n  sortThird,\n  sortFirst\n}\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let ret = [];\n  for(let i = 0; i < l.length; i++){\n    if(ret.indexOf(l[i]) < 0){\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n}\n\n/*\n  getItem\n  getItemAt\n  indexOf\n  item\n  remove\n  removeItem\n  removeItemAt\n  removeAll\n  reverse\n  sort\n  sortBy\n  splice\n  spliceAt\n  slice\n  toArray\n  toString\n*/\nconst getItem = (list, index) => {\n  return list[index];\n}\nconst getItemAt = (list, index) => {\n  return list[index];\n}\nconst indexOf = (list, value) => {\n  return list.indexOf(value);\n}\nconst item = (list, index) => {\n  return list[index];\n}\nconst remove = (list, value) => {\n  let ret = [];\n  for(let i = 0; i < list.length; i++){\n    if(list[i]!= value){\n      ret.push(list[i]);\n    }\n  }\n  return ret;\n}\nconst removeItem = (list, value) => {\n  let ret = [];\n  for(let i = 0; i < list.length; i++){\n    if(list[i]!= value){\n      ret.push(list[i]);\n    }\n  }\n  return ret;\n}\nconst removeItemAt = (list, index) => {\n  let ret = [];\n  for(let i = 0; i < list.length; i++){\n    if(list[i]!= list[index]){\n      ret.push(list[i]);\n    }\n  }\n  return ret;\n}\nconst removeAll = (list, value) => {\n  let ret = [];\n  for(let i = 0; i < list.length; i++){\n    if(list[i]!= value){\n      ret.push(list[i]);\n    }\n  }\n  return ret;\n}\nconst reverse = (list) => {\n  let ret = [];\n  for(let i = list.length - 1; i >= 0; i--){\n    ret.push(list[i]);\n  }\n  return ret;\n}\nconst sort = (list) => {\n  let ret = [];\n  for(let i = 0; i < list.length; i++){\n    ret.push(list[i]);\n  }\n  ret = ret.sort(function(a, b){\n    if(a < b){\n      return -1;\n    }\n    if(a > b){\n      return 1;\n    }\n    return 0;\n  });\n  return ret;\n}\nconst sortBy = (list, field) => {\n  let ret = [];\n  for(let i = 0; i < list.length; i++){\n    ret.push(list[i]);\n  }\n  ret = ret.sort(function(a, b){\n    if(a[field] < b[field]){\n      return -1;\n    }\n    if(a[field] > b[field]){\n      return 1;\n    }\n    return 0;\n  });\n  return ret;\n}\nconst splice = (list, index, count) => {\n  let ret = [];\n  for(let i = index; i < list.length - count; i++){\n    ret.push(list[i]);\n  }\n  for(let i = index; i < list.length; i++){\n    list[i] = list[i + count];\n  }\n  return ret;\n}\nconst spliceAt = (list, index) => {\n  let ret = [];\n  for(let i = index; i < list.length - 1; i++){\n    ret.push(list[i]);\n  }\n  ret.push(list[index]);\n  for(let i = index + 1; i < list.length; i++){\n    list[i - 1] = list[i];\n  }\n  return ret;\n}\nconst slice = (list, start, end) => {\n  let ret = [];\n  for(let i = start; i < end; i++){\n    ret.push(list[i]);\n  }\n  return ret;\n}\nconst toArray = (list) => {\n  return Array.prototype.slice.call(list, 0);\n}\nconst toString = (list) => {\n  return JSON.stringify(list);\n}\n\nmodule.exports = {\n  unique,\n  getItem,\n  getItemAt,\n  indexOf,\n  item,\n  remove,\n  removeItem,\n  removeItemAt,\n  removeAll,\n  reverse,\n  sort,\n  sortBy,\n  splice,\n  spliceAt,\n  slice,\n  toArray,\n  toString\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.reduce((a, b) => a > b? a : b);\n};\n\n/*\n  RetuRn the largest number that is smaller than the number\n  and smaller than the element in the list.\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12])\n  8\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13])\n  12\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14])\n  12\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15])\n  12\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])\n  16\n  >>> maxSmaller([1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27"}
{"task_id": "JavaScript/36", "prompt": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if(n % 2 === 0) {\n    return 'Fizz';\n  }\n  if(n % 3 === 0) {\n    return 'Buzz';\n  }\n  if(n % 5 === 0) {\n    return 'FizzBuzz';\n  }\n}\n\nconst fizzBuzz1 = (n) => {\n  if(n % 3 === 0) {\n    return 'Fizz';\n  }\n  if(n % 5 === 0) {\n    return 'Buzz';\n  }\n}\n\nconst fizzBuzz2 = (n) => {\n  if(n % 3 === 0 && n % 5 === 0) {\n    return 'FizzBuzz';\n  }\n}\n\nmodule.exports = {\n  fizzBuzz,\n  fizzBuzz1,\n  fizzBuzz2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [...l].filter(v => v % 2 === 0)\n  const odd = [...l].filter(v => v % 2!== 0)\n  const result = even.concat(odd)\n  return result\n}\n\nconst l = [5, 6, 3, 4]\n\nconsole.log(sortEven(l))\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  let res = '', res2 = '';\n  for (const group of s.split('')) {\n    res += group.length == 3? group.slice(1) : group;\n    res2 += group.length == 3? group.slice(0, 1) : group;\n  }\n  return res2;\n}\n\n/*\n  encOdEds Strings inPut cyclic functionnALy. reTURns sTring wItH EncOdED CyCLIC\n  functiOn.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(decodeCyclic(s));\n}\n\nconst encodeCyclic = (s) => {\n  return encodeCyclic(s);\n}\n\nconst decodeCyclic = (s) => {\n  return decodeCyclic(s);\n}\n\nexports.encodeCyclic = encodeCyclic;\nexports.decodeCyclic = decodeCyclic;\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  return (n + 1) % 2\n   ? (\n        n + 1\n       ? primeFib(n + 1)\n        : primeFib(n - 1)\n    )\n    : primeFib(n - 1)\n};\n\nconsole.log(primeFib(13));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const isTriples = (s) => {\n        const sLength = s.length;\n        if (sLength < 3) {\n            return false;\n        }\n        if (sLength === 3) {\n            return s.every((x) => x === 0);\n        }\n        return s.every((x, i) => (i + 1) % sLength === 0);\n    };\n    return l.every(isTriples);\n};\n\nconst isPythagoreanTriple = (l) => {\n    const squares = (x) => Math.pow(x, 2);\n    return l.every((a, i) => squares(a) + squares(l[i + 1]) === squares(a * l[i + 1]));\n};\n\nconst pythagoreanTripleSum = (l) => {\n    return l.reduce((a, b) => a + b, 0);\n};\n\nconst isPalindrome = (l) => {\n    return l.slice(0, -1).join('') === l.slice(1).join('');\n};\n\nconst isPalindromeOfTriples = (l) => {\n    const isTriples = (s) => {\n        const sLength = s.length;\n        if (sLength < 3) {\n            return false;\n        }\n        if (sLength === 3) {\n            return isPalindrome(s);\n        }\n        return s.every((x, i) => isPalindrome(s.slice(0, i + 1).concat(s.slice(i + 1, sLength - 1).concat(s.slice(0, i + 1)))));\n    };\n    return l.every(isTriples);\n};\n\nmodule.exports = {\n    triplesSumToZero,\n    isPythagoreanTriple,\n    pythagoreanTripleSum,\n    isPalindromeOfTriples,\n    isPalindrome,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n  return (\n    {\n      left: n.left,\n      right: n.right,\n      top: n.top,\n      bottom: n.bottom,\n      topLeft: n.topLeft,\n      topRight: n.topRight,\n      bottomLeft: n.bottomLeft,\n      bottomRight: n.bottomRight,\n    }\n  );\n};\n\ncarRaceCollision.left = carRaceCollision.right = carRaceCollision.top = carRaceCollision.bottom = carRaceCollision.topLeft = carRaceCollision.topRight = carRaceCollision.bottomLeft = carRaceCollision.bottomRight = carRaceCollision.leftTop = carRaceCollision.leftBottom = carRaceCollision.rightTop = carRaceCollision.rightBottom = carRaceCollision.topLeftTop = carRaceCollision.topLeftBottom = carRaceCollision.bottomLeftTop = carRaceCollision.bottomLeftBottom = carRaceCollision.bottomRightTop = carRaceCollision.bottomRightBottom = carRaceCollision.leftTopRight = carRaceCollision.leftBottomRight = carRaceCollision.topLeftRight = carRaceCollision.topRightRight = carRaceCollision.bottomLeftRight = carRaceCollision.bottomRightRight = carRaceCollision.leftTopRightBottom = carRaceCollision.leftBottomRightBottom = carRaceCollision.rightTopRight = carRaceCollision.rightBottomRight = carRaceCollision.topRightRightBottom = carRaceCollision.topRightBottomRight = carRaceCollision.bottomRightBottomRight = carRaceCollision.bottomRightBottomRight = carRaceCollision.leftTopRightBottomRight = carRaceCollision.leftBottomRightBottomRight = carRaceCollision.rightTopRightBottomRight = carRaceCollision.rightBottomRightBottomRight = carRaceCollision.leftTopRightBottomRightRight = carRaceCollision.leftBottomRightBottomRightRight = carRaceCollision.rightTopRightBottomRightRight = carRaceCollision.rightBottomRightBottomRightRight = carRaceCollision.leftTopRightBottomRightRightRight = carRaceCollision.leftBottomRightBottomRightRightRight = carRaceCollision.rightTopRightBottomRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRightRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRightRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRightRightRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRightRightRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightTopRightBottomRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRight = carRaceCollision.rightBottomRightBottomRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRightRight"}
{"task_id": "JavaScript/42", "prompt": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const n = l.length\n  const list = []\n\n  for (let i = 1; i < n; i++) {\n    list.push(l[i] + l[i - 1])\n  }\n\n  return list\n}\n\n/*\n  >>> incrList(['a', 'b', 'c'])\n  ['a', 'b', 'c', 'c', 'c']\n  >>> incrList(['a', 'b', 'c', 'c'])\n  ['a', 'b', 'c', 'c', 'c', 'c']\n  */\nconst incrListWithObj = (l) => {\n  const n = l.length\n  const list = []\n\n  for (let i = 1; i < n; i++) {\n    list.push(l[i] + l[i - 1])\n  }\n\n  return list\n}\n\n/*\n  >>> incrList(['a', 'b', 'c'])\n  ['a', 'b', 'c', 'c', 'c']\n  >>> incrList(['a', 'b', 'c', 'c'])\n  ['a', 'b', 'c', 'c', 'c', 'c']\n  */\nconst incrListWithObjAndList = (l1, l2) => {\n  const n = l1.length\n  const list = []\n\n  for (let i = 1; i < n; i++) {\n    list.push(l1[i] + l2[i - 1])\n  }\n\n  return list\n}\n\n/*\n  >>> incrList(['a', 'b', 'c'])\n  ['a', 'b', 'c', 'c', 'c']\n  >>> incrList(['a', 'b', 'c', 'c'])\n  ['a', 'b', 'c', 'c', 'c', 'c']\n  */\nconst incrListWithObjAndListAndList = (l1, l2, l3) => {\n  const n = l1.length\n  const list = []\n\n  for (let i = 1; i < n; i++) {\n    list.push(l1[i] + l2[i - 1] + l3[i - 2])\n  }\n\n  return list\n}\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  if(l.length === 0) return false\n  if(l.length === 1) return l[0] === 0\n  return l.reduce((p, c, i) => p + c, 0) === 0\n}\n\nmodule.exports = pairsSumToZero<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const t = x.toString(base);\n  return t.length < base? `${t.toString(10)}` : t;\n};\n\nconst convert = (value, base) => {\n  return value.toString(base).replace(/\\s/g, '');\n};\n\nconst convertBase = (value, base) => {\n  const x = parseInt(value, base);\n  return x.toString(10);\n};\n\nconst pad = (value, size) => {\n  value = convert(value, base);\n  if (value.length < size) {\n    return `${value}${''* (size - value.length)}`;\n  }\n  return value;\n};\n\nconst toHex = (value) => {\n  return pad(convert(value, 16), size);\n};\n\nconst toBaseN = (value, base) => {\n  return pad(convert(value, base), size);\n};\n\nconst toBase10 = (value) => {\n  return pad(convert(value, 10), size);\n};\n\nconst toBase2 = (value) => {\n  return pad(convert(value, 2), size);\n};\n\nconst fromBase10 = (value) => {\n  return parseInt(value, 10);\n};\n\nconst fromBaseN = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst fromBase2 = (value) => {\n  return parseInt(value, 2);\n};\n\nconst fromHex = (value) => {\n  return parseInt(value, 16);\n};\n\nconst toBase10Hex = (value) => {\n  return pad(convert(value, 16), size);\n};\n\nconst fromBase10Hex = (value) => {\n  return parseInt(value, 16);\n};\n\nconst fromBaseNHex = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBase2Hex = (value) => {\n  return pad(convert(value, 16), size);\n};\n\nconst fromBase2Hex = (value) => {\n  return parseInt(value, 16);\n};\n\nconst fromHexHex = (value) => {\n  return parseInt(value, 16);\n};\n\nconst toHexHex = (value) => {\n  return pad(convert(value, 16), size);\n};\n\nconst fromHexInt = (value) => {\n  return parseInt(value, 16);\n};\n\nconst fromHexChar = (value) => {\n  return parseInt(value, 16);\n};\n\nconst toHexChar = (value) => {\n  return pad(convert(value, 16), size);\n};\n\nconst fromBaseNInt = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNInt = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst fromBaseNChar = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNChar = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst fromHexInt = (value) => {\n  return parseInt(value, 16);\n};\n\nconst toHexInt = (value) => {\n  return parseInt(value, 16);\n};\n\nconst fromHexChar = (value) => {\n  return parseInt(value, 16);\n};\n\nconst toHexChar = (value) => {\n  return parseInt(value, 16);\n};\n\nconst toBaseNChar = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharN = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharH = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHN = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHL = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHLN = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHLL = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHLLN = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHLHL = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHLHLN = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHLHLN = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHLLL = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHLLLN = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHLHLLN = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHLHLLN = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHLLLLN = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHLLLLN = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHLHLLLN = (value, base) => {\n  return parseInt(value, base);\n};\n\nconst toBaseNCharHLHLLLN = (value, base) => {\n  return parseInt(value,"}
{"task_id": "JavaScript/45", "prompt": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const [lenGth, lenSidE] = [a, h];\n  const [sideA, sideB] = [lenSidE, lenGth - lenSidE];\n  const [sideC, sideD] = [lenGth, lenGth - lenSidE];\n  const [a1, a2, a3] = [sideA, sideC, sideD];\n  return (a1 * a2) / 2;\n};\n\n/*\n  >>> a = 3;\n  >>> b = 4;\n  >>> c = 6;\n  >>> d = 8;\n  >>> triangleArea(a, b)\n  9.0\n  >>> triangleArea(a, c)\n  7.0\n  >>> triangleArea(a, d)\n  10.0\n  */\nconst triangleArea = (a, b) => {\n  const [a1, a2] = [a, b];\n  return a1 * a2 / 2;\n};\n\n/*\n  >>> a = 3;\n  >>> b = 4;\n  >>> c = 6;\n  >>> d = 8;\n  >>> triangleArea(a, b)\n  9.0\n  >>> triangleArea(a, c)\n  7.0\n  >>> triangleArea(a, d)\n  10.0\n  >>> triangleArea(b, c)\n  7.0\n  >>> triangleArea(b, d)\n  10.0\n  >>> triangleArea(c, d)\n  7.0\n  */\nconst triangleArea = (a, b, c, d) => {\n  const [a1, a2, a3] = [a, b, c];\n  const [b1, b2, b3] = [b, c, d];\n  const [c1, c2, c3] = [c, d, a];\n  const [d1, d2, d3] = [d, a, b];\n  const area = (a1 * b2 + a2 * b3 + a3 * b1) - (c1 * d2 + c2 * d3 + c3 * d1);\n  return area / 2;\n};\n\n/*\n  >>> a = 3;\n  >>> b = 4;\n  >>> c = 6;\n  >>> d = 8;\n  >>> triangleArea(a, b)\n  9.0\n  >>> triangleArea(a, c)\n  7.0\n  >>> triangleArea(a, d)\n  10.0\n  >>> triangleArea(b, c)\n  7.0\n  >>> triangleArea(b, d)\n  10.0\n  >>> triangleArea(c, d)\n  7.0\n  >>> triangleArea(c, a, b, d)\n  10.0\n  >>> triangleArea(a, b, c, d)\n  7.0\n  */\nconst triangleArea = (a, b, c, d) => {\n  const [a1, a2, a3] = [a, b, c];\n  const [b1, b2, b3] = [b, c, d];\n  const [c1, c2, c3] = [c, d, a];\n  const [d1, d2, d3] = [d, a, b];\n  const area = (a1 * b2 + a2 * b3 + a3 * b1) - (c1 * d2 + c2 * d3 + c3 * d1);\n  return area / 2;\n};\n\n/*\n  >>> a = 3;\n  >>> b = 4;\n  >>> c = 6;\n  >>> d = 8;\n  >>> triangleArea(a, b)\n  9.0\n  >>> triangleArea(a, c)\n  7.0\n  >>> triangleArea(a, d)\n  10.0\n  >>> triangleArea(b, c)\n  7.0\n  >>> triangleArea(b, d)\n  10.0\n  >>> triangleArea(c, d)\n  7.0\n  >>> triangleArea(c, a, b, d)\n  10.0\n  >>> triangleArea(a, b, c, d)\n  7.0\n  */\nconst triangleArea = (a, b, c, d) => {\n  const [a1, a2, a3] = [a, b, c];\n  const [b1, b2, b3] = [b, c, d];\n  const [c1, c2, c3] = [c, d, a];\n  const [d1, d2, d3] = [d, a, b];\n  const area = (a1 * b2 + a2 * b3 + a3 * b1) - (c1 * d2 + c2 * d3 + c3 * d1);\n  return area / 2;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  return (n < 2)? n : fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nexport default fib4;\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n    const length = l.length;\n    let currentSum = 0;\n    let low = 0;\n    let high = length - 1;\n    let pivot = length / 2;\n    while (low <= high) {\n        if (low === high) {\n            return l[low];\n        }\n        currentSum = l[high] + l[low];\n        if (currentSum === length) {\n            return l[high];\n        } else if (currentSum > length) {\n            high--;\n        } else {\n            low++;\n        }\n    }\n    return l[pivot];\n};\n\n/**\n  * @param {Array} arr\n  * @returns {number}\n  * @description\n  * Find the median of the given array\n  *\n  * @example\n  * const arr = [3, 1, 2, 4, 5]\n  * median(arr)\n  * // -> 3\n  *\n  * @example\n  * const arr = [-10, 4, 6, 1000, 10, 20]\n  * median(arr)\n  * // -> 8.0\n  */\nconst median = (arr) => {\n    const length = arr.length;\n    if (length === 0) {\n        throw new Error('Array must not be empty');\n    }\n    const low = 0;\n    const high = length - 1;\n    let currentSum = 0;\n    while (low <= high) {\n        if (low === high) {\n            return arr[low];\n        }\n        currentSum = arr[high] + arr[low];\n        if (currentSum === length) {\n            return arr[high];\n        } else if (currentSum > length) {\n            high--;\n        } else {\n            low++;\n        }\n    }\n    return arr[pivot];\n};\n\n/**\n * @param {Array} arr\n * @returns {number}\n * @description\n * Find the median of the given array\n *\n * @example\n * const arr = [3, 1, 2, 4, 5]\n * median(arr)\n * // -> 3\n *\n * @example\n * const arr = [-10, 4, 6, 1000, 10, 20]\n * median(arr)\n * // -> 8.0\n */\nconst median = (arr) => {\n    const length = arr.length;\n    if (length === 0) {\n        throw new Error('Array must not be empty');\n    }\n    const low = 0;\n    const high = length - 1;\n    let currentSum = 0;\n    while (low <= high) {\n        if (low === high) {\n            return arr[low];\n        }\n        currentSum = arr[high] + arr[low];\n        if (currentSum === length) {\n            return arr[high];\n        } else if (currentSum > length) {\n            high--;\n        } else {\n            low++;\n        }\n    }\n    return arr[pivot];\n};\n\nexport {\n    median\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const length = text.length\n  for (let i = 0; i < length / 2; i++) {\n    if (text[i]!== text[length - 1 - i]) {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return ((n % p) * (2 ** (p - 2)) + (n // p)) % p;\n};\n\n/*\n  >>> modp(1101, 101)\n  2\n  >>> modp(3, 5)\n  3\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpp = (n, p) => {\n  return (((n + p) % p) * (2 ** (p - 2)) + (n // p)) % p;\n};\n\n/*\n  >>> modp(1101, 101)\n  2\n  >>> modp(3, 5)\n  3\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpp2 = (n, p) => {\n  return (((n + p) % p) * (2 ** (p - 2)) + (n // p)) % p;\n};\n\n/*\n  >>> modp(1101, 101)\n  2\n  >>> modp(3, 5)\n  3\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpp3 = (n, p) => {\n  return (((n + p) % p) * (2 ** (p - 2)) + (n // p)) % p;\n};\n\n/*\n  >>> modp(1101, 101)\n  2\n  >>> modp(3, 5)\n  3\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpp4 = (n, p) => {\n  return (((n + p) % p) * (2 ** (p - 2)) + (n // p)) % p;\n};\n\n/*\n  >>> modp(1101, 101)\n  2\n  >>> modp(3, 5)\n  3\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpp5 = (n, p) => {\n  return (((n + p) % p) * (2 ** (p - 2)) + (n // p)) % p;\n};\n\n/*\n  >>> modp(1101, 101)\n  2\n  >>> modp(3, 5)\n  3\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpp6 = (n, p) => {\n  return (((n + p) % p) * (2 ** (p - 2)) + (n // p)) % p;\n};\n\n/*\n  >>> modp(1101, 101)\n  2\n  >>> modp(3, 5)\n  3\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpp7 = (n, p) => {\n  return (((n + p) % p) * (2 ** (p - 2)) + (n // p)) % p;\n};\n\n/*\n  >>> modp(1101, 101)\n  2\n  >>> modp(3, 5)\n  3\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpp8 = (n, p) => {\n  return (((n + p) % p) * (2 ** (p - 2)) + (n // p)) % p;\n};\n\n/*\n  >>> modp(1101, 101)\n  2\n  >>> modp(3, 5)\n  3\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpp9 = (n, p) => {\n  return (((n + p) % p) * (2 ** (p - 2)) + (n // p)) % p;\n};\n\n/*\n  >>> modp(1101, 101)\n  2\n  >>> modp(3, 5)\n  3\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpp10 = (n, p) => {\n  return (((n + p) % p) * (2 ** (p - 2)) + (n // p)) % p;\n};\n\n/*\n  >>> modp(1101, 101)\n  2\n  >>> modp(3, 5)\n  3\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpp11 = (n, p) => {\n  return (((n + p) % p) * (2 ** (p - 2)) + (n // p)) % p;\n};\n\n/*\n  >>> modp(1101, 101)\n  2\n  >>> modp(3, 5)\n  3\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modpp12 = (n, p) => {\n  return (((n + p) % p) * (2 ** (p - 2)) + (n // p)) % p;\n};"}
{"task_id": "JavaScript/50", "prompt": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n  return s.split(\"\").map((x, i) => String.fromCharCode((x.charCodeAt(0) - 5) % 26 + \"a\".charCoDEat(0))).join(\"\");\n}\n\nconst encode = (s) => encodeShift(s);\n\nconst decode = (s) => decodeShift(s);\n\nconst decodeShift = decodeShift;\n\nconst encodeShift = encodeShift;\n\nconst decode = decodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;\n\nconst encode = encodeShift;\n\nconst decode = decodeShift;"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\n/*\n  countVowels is a FuncTion tHat Takes StrinG and retUrnS string wIThOuT vowELs.\n  >>> countVowels('abcdef')\n  2\n  >>> countVowels('bbcd')\n  1\n  >>> countVowels('aBcD')\n  2\n  >>> countVowels('aaBAA')\n  1\n  >>> countVowels('zbcd')\n  2\n  */\nconst countVowels = (text) => {\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].match(/[aeiou]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  countLetters is a FuncTion tHat Takes StrinG and retUrnS string wIThOuT vowELs.\n  >>> countLetters(\"aBcD\")\n  2\n  >>> countLetters(\"aaBAA\")\n  1\n  >>> countLetters(\"zbcd\")\n  2\n  */\nconst countLetters = (text) => {\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].match(/[a-zA-Z]/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  countPunctuations is a FuncTion tHat Takes StrinG and retUrnS string wIThOuT vowELs.\n  >>> countPunctuations(\"aBcD\")\n  0\n  >>> countPunctuations(\"aaBAA\")\n  2\n  >>> countPunctuations(\"zbcd\")\n  1\n  */\nconst countPunctuations = (text) => {\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].match(/[.,:;!?']/)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  removePunctuations is a FuncTion tHat Takes StrinG and retUrnS string wIThOuT vowELs.\n  >>> removePunctuations(\"aBcD\")\n  'abcd'\n  >>> removePunctuations(\"aaBAA\")\n  'aBAA'\n  >>> removePunctuations(\"zbcd\")\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n  return text.replace(/[.,:;!?']/g, '');\n};\n\n/*\n  toSentence is a FuncTion tThat Takes StrinG and retUrnS string wIThOuT vowELs.\n  >>> toSentence(\"abcd\")\n  'abcd'\n  >>> toSentence(\"aBcD\")\n  'aBcD'\n  >>> toSentence(\"aaBAA\")\n  'aaBAA'\n  >>> toSentence(\"zbcd\")\n  'zbcd'\n  */\nconst toSentence = (text) => {\n  return text.replace(/[^a-zA-Z0-9,:;!?']+/g, '').replace(/[^a-zA-Z0-9,:;!?']/g,'');\n};\n\n/*\n  toTitleCase is a FuncTion tThat Takes StrinG and retUrnS string wIThOuT vowELs.\n  >>> toTitleCase(\"abcd\")\n  'Abcd'\n  >>> toTitleCase(\"aBcD\")\n  'ABcD'\n  >>> toTitleCase(\"aaBAA\")\n  'AABAA'\n  >>> toTitleCase(\"zbcd\")\n  'Zbcd'\n  */\nconst toTitleCase = (text) => {\n  return text.replace(/[a-z]+|[0-9]+/g, (match, p1) => {\n    if (p1.match(/[a-z]/)) {\n      return p1.toUpperCase();\n    } else {\n      return match;\n    }\n  });\n};\n\n/*\n  toCamelCase is a FuncTion tThat Takes StrinG and retUrnS string wIThOuT vowELs.\n  >>> toCamelCase(\"abcd\")\n  'Abcd'\n  >>> toCamelCase(\"aBcD\")\n  'ABcD'\n  >>> toCamelCase(\"aaBAA\")\n  'AABAA'\n  >>> toCamelCase(\"zbcd\")\n  'Zbcd'\n  */\nconst toCamelCase = (text) => {\n  return text.replace(/[a-z]/g, (match, p1) => {\n    return p1.toUpperCase();\n  });\n};\n\n/*\n  toCamelCase is a FuncTion tThat Takes StrinG and retUrnS string wIThOuT vowELs.\n  >>> toCamelCase(\"abcd\")\n  'Abcd'\n  >>> toCamelCase(\"aBcD\")\n  'ABcD'\n  >>> toCamelCase(\"aaBAA\")\n  'AABAA'\n  >>> toCamelCase(\"zbcd\")\n  'Zbcd'\n  */\nconst toCamelCaseNoSpaces = (text) => {\n  return text.replace(/\\s+/g, '').replace(/([A-Z])/g, (match, p1) => {\n    return p1.toUpperCase();\n  });\n};\n\n/*\n  "}
{"task_id": "JavaScript/52", "prompt": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.some(x => x <= t);\n};\n\nexport default belowThreshold;\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  let sum = x + y;\n  return sum;\n}\n\n/*\n  * Add x and y\n  * @param x\n  * @param y\n  * @return {number}\n  */\nconst add2 = (x, y) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add3 = (x, y) => {\n  let sum = x + y;\n  return sum;\n}\n\n// 为了做编译，可以直接使用类型擦除\nconst add4 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\n// 可以使用类型擦除\nconst add5 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add6 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add7 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add8 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add9 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add10 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add11 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add12 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add13 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add14 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add15 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add16 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add17 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add18 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add19 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add20 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add21 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add22 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add23 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add24 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add25 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add26 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add27 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add28 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add29 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add30 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add31 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add32 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add33 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add34 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add35 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add36 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add37 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add38 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add39 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add40 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add41 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add42 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;\n}\n\nconst add43 = (x: number, y: number) => {\n  let sum = x + y;\n  return sum;"}
{"task_id": "JavaScript/54", "prompt": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const s0_arr = s0.split('')\n    const s1_arr = s1.split('')\n    const len_s0 = s0_arr.length\n    const len_s1 = s1_arr.length\n\n    if (len_s0!== len_s1) {\n        return false\n    }\n\n    for (let i = 0; i < len_s0; i++) {\n        if (s0_arr[i]!== s1_arr[i]) {\n            return false\n        }\n    }\n\n    return true\n}\n\nmodule.exports = sameChars\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 2) {\n    return 1;\n  }\n  return fib(n - 2) + fib(n - 1);\n}\n\n/*\n  >>> fib(0)\n  0\n  >>> fib(1)\n  1\n  >>> fib(2)\n  1\n  >>> fib(3)\n  2\n  >>> fib(4)\n  3\n  >>> fib(5)\n  5\n  >>> fib(6)\n  8\n  >>> fib(7)\n  13\n  >>> fib(8)\n  21\n  >>> fib(9)\n  34\n  >>> fib(10)\n  55\n  */\n\n/*\n  >>> fib(0)\n  0\n  >>> fib(1)\n  1\n  >>> fib(2)\n  1\n  >>> fib(3)\n  2\n  >>> fib(4)\n  3\n  >>> fib(5)\n  5\n  >>> fib(6)\n  8\n  >>> fib(7)\n  13\n  >>> fib(8)\n  21\n  >>> fib(9)\n  34\n  >>> fib(10)\n  55\n  */\n\n/*\n  >>> fib(20)\n  12586269025\n  >>> fib(100)\n  12586269025\n  */\n\n/*\n  >>> fib(2147483647)\n  2147483647\n  >>> fib(2147483648)\n  2147483647\n  */\n\n/*\n  >>> fib(2147483649)\n  2147483647\n  >>> fib(2147483650)\n  2147483648\n  */\n\n/*\n  >>> fib(2147483651)\n  2147483649\n  >>> fib(2147483652)\n  2147483650\n  >>> fib(2147483653)\n  2147483651\n  >>> fib(2147483654)\n  2147483652\n  >>> fib(2147483655)\n  2147483653\n  >>> fib(2147483656)\n  2147483654\n  >>> fib(2147483657)\n  2147483655\n  >>> fib(2147483658)\n  2147483656\n  >>> fib(2147483659)\n  2147483657\n  >>> fib(2147483660)\n  2147483658\n  >>> fib(2147483661)\n  2147483659\n  >>> fib(2147483662)\n  2147483660\n  >>> fib(2147483663)\n  2147483661\n  >>> fib(2147483664)\n  2147483662\n  >>> fib(2147483665)\n  2147483663\n  >>> fib(2147483666)\n  2147483664\n  >>> fib(2147483667)\n  2147483665\n  >>> fib(2147483668)\n  2147483666\n  >>> fib(2147483669)\n  2147483667\n  >>> fib(2147483670)\n  2147483668\n  >>> fib(2147483671)\n  2147483669\n  >>> fib(2147483672)\n  2147483670\n  >>> fib(2147483673)\n  2147483671\n  >>> fib(2147483674)\n  2147483672\n  >>> fib(2147483675)\n  2147483673\n  >>> fib(2147483676)\n  2147483674\n  >>> fib(2147483677)\n  2147483675\n  >>> fib(2147483678)\n  2147483676\n  >>> fib(2147483679)\n  2147483677\n  >>> fib(2147483680)\n  2147483678\n  >>> fib(2147483681)\n  2147483679\n  >>> fib(2147483682)\n  2147483680\n  >>> fib(2147483683)\n  2147483681\n  >>> fib(2147483684)\n  2147483682\n  >>> fib(2147483685)\n  2147483683\n  >>> fib(2147483686)\n  2147483684\n  >>> fib(2147483687)\n  2147483685\n  >>> fib(2147483688)\n  2147483686\n  >>> fib(2147483689)\n  2147483687\n  >>> fib(2147483690)\n  2147483688\n  >>> fib(2147483691)\n  2147483689\n  >>> fib(2147483692)\n  2147483690\n  >>> fib(2147483693)\n  2147483691\n  >>> fib(2147483694)\n  2147483692\n  >>> fib(2147483695)\n  2147483693\n  >>> fib(2147483696)\n  2147483694\n  >>> fib(2147483697)\n  2147483695\n  >>> fib(2147483698)\n  2147483696\n  >>> fib(2147483699)\n  2147483697\n  >>> fib(2147483700)\n  2147483698\n  >>> fib(2147483701)\n  2147483699\n  >>> fib(2147483702)\n  2147483700\n  >>> fib(2147483703)\n  2147483701\n  >>> fib(2147483704)\n  2147483702\n  >>> fib(2147483705)\n  2147483703\n  >>> fib(2147483706)\n  2147483704\n  >>> fib(2147483707)\n  2147483705\n  >>> fib(2147483708)\n  2147483706\n  >>> fib(2147483709)\n  2147483707\n  >>> fib(2147483710)\n  2147483708\n  >>> fib(21474837"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracket_stack = brackets.split('');\n  let open_bracket_count = 0;\n  for (let i = 0; i < bracket_stack.length; i++) {\n    if (bracket_stack[i] === '<') {\n      open_bracket_count += 1;\n    }\n    if (bracket_stack[i] === '>') {\n      open_bracket_count -= 1;\n    }\n    if (open_bracket_count < 0) {\n      return false;\n    }\n  }\n  if (open_bracket_count > 0) {\n    return false;\n  }\n  return true;\n};\n\nexport { correctBracketing };\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) {\n    return false\n  }\n  const sorted = l.sort((a, b) => a - b)\n  const last = sorted[sorted.length - 1]\n  return last < 0? true : false\n}\n\nexport default monotonic\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const count = l1.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let res = [];\n  let num = 0;\n  while (i < count && j < count) {\n    num = l1[i] === l2[j];\n    if (num) {\n      res.push(l1[i]);\n      i++;\n      j++;\n    } else {\n      if (l1[i] < l2[j]) {\n        i++;\n      } else {\n        j++;\n      }\n    }\n  }\n  return res;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const factorization = factorize(n);\n  const factorCount = factorization.length;\n  const factors = factorization.map(([p, n]) => p);\n  const max = factors[factors.length - 1];\n  const primeCount = factorCount;\n  const primes = [];\n  for (let i = 2; i < max; i++) {\n    const factor = factorization.find(([p, n]) => p === i);\n    if (!factor) {\n      primes.push(i);\n      primeCount--;\n    }\n  }\n  return largestPrime(primes, primeCount);\n};\n\n/*\n  * Find the largest prime factor of a number n > 1.\n  *\n  * @param n\n  * @return largest prime factor of n\n  *\n  * @example\n  * largestPrimeFactor(13195)\n  * // 29\n  * largestPrimeFactor(2048)\n  * // 2\n  * largestPrimeFactor(30)\n  * // 3\n  */\nconst largestPrimeFactor = (n) => {\n  const factorization = factorize(n);\n  const factorCount = factorization.length;\n  const factors = factorization.map(([p, n]) => p);\n  const max = factors[factors.length - 1];\n  const primeCount = factorCount;\n  const primes = [];\n  for (let i = 2; i < max; i++) {\n    const factor = factorization.find(([p, n]) => p === i);\n    if (!factor) {\n      primes.push(i);\n      primeCount--;\n    }\n  }\n  return largestPrime(primes, primeCount);\n};\n\nexport default largestPrimeFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (n % 2 === 0? n / 2 : n - 1);\n}\n\n/*\n  sumToN(30)\n  465\n  sumToN(100)\n  5050\n  sumToN(5)\n  15\n  sumToN(10)\n  55\n  sumToN(1)\n  1\n  */\n\n/*\n  const sumToN = (n) => {\n    return (n % 2 === 0? n / 2 : n - 1);\n  };\n  sumToN(30)\n  465\n  sumToN(100)\n  5050\n  sumToN(5)\n  15\n  sumToN(10)\n  55\n  sumToN(1)\n  1\n  */\n\n/*\n  const sumToN = (n) => {\n    return (n % 2 === 0? n / 2 : n - 1);\n  };\n  sumToN(30)\n  465\n  sumToN(100)\n  5050\n  sumToN(5)\n  15\n  sumToN(10)\n  55\n  sumToN(1)\n  1\n  */\n\n/*\n  const sumToN = (n) => {\n    return (n % 2 === 0? n / 2 : n - 1);\n  };\n  sumToN(30)\n  465\n  sumToN(100)\n  5050\n  sumToN(5)\n  15\n  sumToN(10)\n  55\n  sumToN(1)\n  1\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let len = brackets.length,\n        index = 0,\n        newIndex = 0,\n        openBracket = brackets[index],\n        openBracketLength = openBracket.length;\n\n    while (index < len) {\n        if (openBracket.charAt(openBracketLength - 1) === ')') {\n            newIndex = brackets.indexOf(openBracket, index + 1);\n            if (newIndex === -1) {\n                return false;\n            }\n            openBracket = brackets[newIndex];\n            openBracketLength = openBracket.length;\n            index = newIndex;\n        } else {\n            index++;\n        }\n    }\n    return true;\n};\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nconst tests = [\n    [\"()()()\", \"()()()\"],\n    [\"(()()\", \"()()\"],\n    [\"(()()()\", \"()()\"],\n    [\"(()()()\", \"()()\"],\n    [\"((()()\", \"()()\"],\n    [\"()()()()\", \"()()\"],\n    [\"(())()()\", \"()()\"],\n    [\"(()())()\", \"()()\"],\n    [\"()()()())\", \"()()\"],\n    [\"(())()())\", \"()()\"],\n    [\"()()())()\", \"()()\"],\n    [\"(())()())\", \"()()\"],\n    [\"()()())()\", \"()()\"],\n    [\"()()()())\", \"()()\"],\n    [\"()()())()\", \"()()\"],\n    [\"()()())()\", \"()()\"],\n    [\"()()))())\", \"()()\"],\n    [\"())())())\", \"()()\"],\n    [\"()))())())\", \"()()\"],\n    [\"())))))))\", \"()()\"],\n    [\"())))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"())))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()))))))))\", \"()()\"],\n    [\"()"}
{"task_id": "JavaScript/62", "prompt": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const dxs = []\n  let n = xs.length - 1\n  for (let i = 0; i < n; i++) {\n    const p = xs[i + 1]\n    const dp = (p - xs[i]) / (i + 1)\n    dxs.push(dp)\n  }\n  return dxs\n}\n\nconst findPolynomial = (xs) => {\n  let j = 0\n  let k = xs.length - 1\n  let result = 0\n  while (j < k) {\n    const p = xs[j] + xs[k]\n    const dp = (p - xs[j]) / (k - j)\n    j++\n    result += dp * (k - j)\n    k--\n  }\n  return result\n}\n\nconst findDerivative = (xs) => {\n  let j = 0\n  let k = xs.length - 1\n  let result = 0\n  while (j < k) {\n    const p = xs[k]\n    const dp = (p - xs[j]) / (k - j)\n    j++\n    result += dp * (k - j)\n    k--\n  }\n  return result\n}\n\nmodule.exports = {\n  findPolynomial,\n  findDerivative\n}\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    if (n === 0 || n === 1) {\n        return n;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count++\n    }\n  }\n  return count\n}\n\n// Test Code\nconst t = []\nconst t1 = 'y'\nconst t2 = 'I'\nconst t3 = 'e'\nconst t4 = 'O'\nconst t5 = 'u'\nconst t6 = 'a'\nconst t7 = 'E'\nconst t8 = 'Y'\nt.push(t1)\nt.push(t2)\nt.push(t3)\nt.push(t4)\nt.push(t5)\nt.push(t6)\nt.push(t7)\nt.push(t8)\nconsole.log(vowelsCount(t))\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const result = x.toString()\n  const n = x.toString().length\n  if (shift > n) {\n    return result.split('').reverse().join('')\n  }\n  return result.substr(n - shift)\n}\n\n/*\n  Given an array of ints, the task is to find the longest common prefix in that array.\n  >>> longestCommonPrefix([1, 2, 3])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  1\n  >>> longestCommonPrefix([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  1\n  >>> longestCommonPrefix(["}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n    return (s.match(/[0-9A-Z]/g) || []).reduce((carry, curr, idx) => {\n        const digit = parseInt(curr);\n        return carry + digit;\n    }, 0);\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Max of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitMax(\"\") => 0\n      digitMax(\"abAB\") => 9\n      digitMax(\"abcCd\") => 9\n      digitMax(\"helloE\") => 9\n      digitMax(\"woArBld\") => 9\n      digitMax(\"aAaaaXa\") => 10\n  */\nconst digitMax = (s) => {\n    return (s.match(/[0-9A-Z]/g) || []).reduce((carry, curr, idx) => {\n        const digit = parseInt(curr);\n        if (carry < digit) return digit;\n        else return carry;\n    }, 0);\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Max of the lower chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitMax(\"\") => 0\n      digitMax(\"abAB\") => 9\n      digitMax(\"abcCd\") => 9\n      digitMax(\"helloE\") => 9\n      digitMax(\"woArBld\") => 9\n      digitMax(\"aAaaaXa\") => 10\n  */\nconst lowerCaseDigitMax = (s) => {\n    return (s.match(/[a-z]/g) || []).reduce((carry, curr, idx) => {\n        const digit = parseInt(curr);\n        if (carry < digit) return digit;\n        else return carry;\n    }, 0);\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Max of the lower chaRACterS and\n  the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitMax(\"\") => 0\n      digitMax(\"abAB\") => 9\n      digitMax(\"abcCd\") => 9\n      digitMax(\"helloE\") => 9\n      digitMax(\"woArBld\") => 9\n      digitMax(\"aAaaaXa\") => 10\n  */\nconst lowerAndUpperCaseDigitMax = (s) => {\n    return (s.match(/[a-z]/g) || []).reduce((carry, curr, idx) => {\n        const digit = parseInt(curr);\n        if (carry < digit) return digit;\n        else if (carry < parseInt(s.charAt(idx+1))) return digit;\n        else return carry;\n    }, 0);\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Max of the lower chaRACterS and\n  the upper chaRACterS and the lower chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitMax(\"\") => 0\n      digitMax(\"abAB\") => 9\n      digitMax(\"abcCd\") => 9\n      digitMax(\"helloE\") => 9\n      digitMax(\"woArBld\") => 9\n      digitMax(\"aAaaaXa\") => 10\n  */\nconst lowerAndUpperCaseAndLowerCaseDigitMax = (s) => {\n    return (s.match(/[a-z]/g) || []).reduce((carry, curr, idx) => {\n        const digit = parseInt(curr);\n        if (carry < digit) return digit;\n        else if (carry < parseInt(s.charAt(idx+1))) return digit;\n        else if (carry < parseInt(s.charAt(idx+2))) return digit;\n        else return carry;\n    }, 0);\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Max of the upper chaRACterS, the\n  lower chaRACterS and the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitMax(\"\") => 0\n      digitMax(\"abAB\") => 9\n      digitMax(\"abcCd\") => 9\n      digitMax(\"helloE\") => 9\n      digitMax(\"woArBld\") => 9\n      digitMax(\"aAaaaXa\") => 10\n  */\nconst upperCaseDigitMax = (s) => {\n    return (s.match(/[A-Z]/g) || []).reduce((carry, curr, idx) => {\n        const digit = parseInt(curr);\n        if (carry < digit) return digit;\n        else return carry;\n    }, 0);\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Max of the upper chaRACterS, the\n  lower chaRACterS and the lower chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitMax(\"\") => 0\n      digitMax(\"abAB\") => 9\n      digitMax(\"abcCd\") => 9\n      digitMax(\"helloE\") => 9\n      digitMax(\"woArBld\") => 9\n      digitMax(\"aAaaaXa\") => 10\n  */\nconst upperCaseDigitMaxAndLowerCaseDigitMax = (s) => {\n    return (s.match(/[A-Z]/g) || []).reduce((carry, curr, idx) => {\n        const digit = parseInt(curr);\n        if (carry < digit) return digit;\n        else if (carry < parseInt(s.charAt(idx+1)))"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n    let numberOfApples = parseInt(s);\n    let numberOfOranges = parseInt(n);\n    let total = numberOfApples + numberOfOranges;\n    let numberOfApplesInBasket = numberOfApples - total;\n    let numberOfOrangesInBasket = numberOfOranges - total;\n    let orangeCount = numberOfOrangesInBasket;\n    let appleCount = numberOfApplesInBasket;\n    return appleCount + orangeCount;\n};\n\nconsole.log(fruitDistribution(\"1 apple, 1 orange\", \"2 apple, 2 orange\"));\nconsole.log(fruitDistribution(\"1 apple, 2 oranges\", \"2 apple, 1 orange\"));\nconsole.log(fruitDistribution(\"2 apples, 1 orange\", \"2 apples, 2 oranges\"));\nconsole.log(fruitDistribution(\"1 apple, 1 orange\", \"2 apples, 1 orange\"));\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const smallest_value = Math.min(...arr);\n  const smallest_index = arr.findIndex((n) => n == smallest_value);\n\n  if (smallest_index === -1) {\n    return [];\n  }\n\n  const [first_node, second_node] = arr.slice(0, 2).sort((a, b) => a - b);\n\n  return [first_node, second_node];\n};\n\n/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n*/\nconst pluck_2 = (arr) => {\n  const smallest_index = arr.findIndex((n) => n === Math.min(...arr));\n\n  if (smallest_index === -1) {\n    return [];\n  }\n\n  const [first_node, second_node] = arr.slice(0, 2).sort((a, b) => a - b);\n\n  return [first_node, second_node];\n};\n\nexport default pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const len = lst.length\n  const min = Math.min.apply(null, lst)\n  return lst.indexOf(min)\n}\n\nconst findMin = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    const iMin = Math.min(arr[i], arr[j])\n    if (arr[i]!== iMin) {\n      return iMin\n    }\n    const jMin = Math.min(arr[j], arr[i])\n    if (arr[j]!== jMin) {\n      return jMin\n    }\n    i++\n    j--\n  }\n  return arr[i]\n}\n\nconst findMax = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    const iMax = Math.max(arr[i], arr[j])\n    if (arr[i]!== iMax) {\n      return iMax\n    }\n    const jMax = Math.max(arr[j], arr[i])\n    if (arr[j]!== jMax) {\n      return jMax\n    }\n    i++\n    j--\n  }\n  return arr[i]\n}\n\nconst partition = (arr) => {\n  const len = arr.length\n  const i = search(arr)\n  const pivot = arr[i]\n  const less = arr.slice(0, i)\n  const more = arr.slice(i + 1)\n  const lessLen = less.length\n  const moreLen = more.length\n  const lessIdx = search(less)\n  const lessStart = i + 1\n  const lessEnd = lessLen + i + 1\n  const moreStart = i + 1\n  const moreEnd = moreLen + i + 1\n  const lessIdx = search(less)\n  const moreIdx = search(more)\n  return [\n    [\n     ...less,\n     ...more,\n      pivot,\n     ...less,\n     ...more,\n    ],\n    [\n     ...less,\n     ...more,\n     ...less,\n     ...more,\n    ],\n  ]\n}\n\nconst sort = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    const pivot = arr[i]\n    let pivotIdx = i\n    let less = arr.slice(0, i)\n    let lessIdx = search(less)\n    let lessLen = less.length\n    let more = arr.slice(i + 1)\n    let moreIdx = search(more)\n    let moreLen = more.length\n    let cmp = 0\n    while (cmp === 0) {\n      cmp = compare(pivot, arr[lessIdx])\n      if (cmp === 0) {\n        cmp = compare(pivot, arr[moreIdx])\n      }\n      if (cmp === 0) {\n        lessIdx++\n        if (lessIdx >= lessLen) {\n          lessIdx = 0\n        }\n        cmp = compare(pivot, arr[lessIdx])\n      }\n      if (cmp === 0) {\n        moreIdx++\n        if (moreIdx >= moreLen) {\n          moreIdx = 0\n        }\n        cmp = compare(pivot, arr[moreIdx])\n      }\n    }\n    if (cmp < 0) {\n      swap(arr, i, lessIdx)\n      i = lessIdx\n    } else if (cmp > 0) {\n      swap(arr, i, moreIdx)\n      i = moreIdx\n    } else {\n      i++\n    }\n    j = len - 1\n  }\n  return arr\n}\n\nconst compare = (a, b) => {\n  const i = a > b? 1 : a < b? -1 : 0\n  return i\n}\n\nconst swap = (arr, i, j) => {\n  const temp = arr[i]\n  arr[i] = arr[j]\n  arr[j] = temp\n}\n\nconst sum = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst mean = (arr) => {\n  return sum(arr) / arr.length\n}\n\nconst median = (arr) => {\n  const half = arr.length / 2\n  const middle = arr.length - half\n  if (middle > half) {\n    return sum(arr.slice(half - 1, half + 1)) / 2\n  } else if (middle === half) {\n    return sum(arr.slice(half - 1, half)) / 2\n  } else {\n    return sum(arr.slice(half, half + 1)) / 2\n  }\n}\n\nconst standardDeviation = (arr) => {\n  const meanValue = mean(arr)\n  const deviationSum = 0\n  for (let i = 0; i < arr.length; i++) {\n    deviationSum += Math.pow(arr[i] - meanValue, 2)\n  }\n  return Math.sqrt(deviationSum / arr.length)\n}\n\nconst mode = (arr) => {\n  const mode = {}\n  let max = 0\n  let maxCount = 0\n  let frequency = {}\n  for (let i = 0"}
{"task_id": "JavaScript/70", "prompt": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const strangeSort = (a, b) => (a - b);\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const arr = lst.slice(0);\n  const strangeSortArr = arr.sort(strangeSort);\n  let i = 0;\n  let j = 0;\n  const out = [];\n  while (i < len) {\n    if (i < strangeSortArr.length && strangeSortArr[i] > strangeSortArr[j]) {\n      out.push(strangeSortArr[i++]);\n    } else {\n      out.push(strangeSortArr[j++]);\n    }\n  }\n  return out;\n};\n\nconst strangeSortList = (lst) => {\n  const strangeSort = (a, b) => (a - b);\n  const len = lst.length;\n  if (len === 0) {\n    return [];\n  }\n  const arr = lst.slice(0);\n  const strangeSortArr = arr.sort(strangeSort);\n  let i = 0;\n  let j = 0;\n  const out = [];\n  while (i < len) {\n    if (i < strangeSortArr.length && strangeSortArr[i] > strangeSortArr[j]) {\n      out.push(strangeSortArr[i++]);\n    } else {\n      out.push(strangeSortArr[j++]);\n    }\n  }\n  return out;\n};\n\nexport {\n  strangeSortList\n};\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const lengthOfSideOne = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))\n  const lengthOfSideTwo = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2))\n  const lengthOfSideThree = Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2))\n\n  const area = ((lengthOfSideOne + lengthOfSideTwo + lengthOfSideThree) / 2) * 0.5\n\n  if (area < 0.000000001) {\n    return -1\n  }\n\n  return area\n}\n\nexport default triangleArea\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n    let result = false;\n\n    if (q.length === w) {\n        let sum = q.reduce((acc, curr) => acc + curr, 0);\n\n        result = sum <= w;\n    }\n\n    return result;\n};\n\n/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBJECT q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) AND The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFlyAndFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlyAndFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlyAndFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlyAndFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlyAndFly = (q, w) => {\n    let result = false;\n\n    if (q.length === w && q.every((curr, index) => index < q.length - 1)) {\n        let sum = q.reduce((acc, curr, index) => acc + curr, 0);\n\n        result = sum <= w;\n    }\n\n    return result;\n};\n\nexport {\n    willItFly,\n    willItFlyAndFly\n};\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let len = arr.length\n  let min = 0\n  let minArr = []\n  let i = 0\n\n  while (i < len) {\n    let index = 0\n    let j = len - 1\n    let value = arr[i]\n\n    while (j >= 0) {\n      if (arr[j] > value) {\n        index = j\n        j--\n      } else {\n        j = -1\n      }\n    }\n\n    if (index > min) {\n      min = index\n      minArr = [i, index]\n    }\n\n    i++\n  }\n\n  return minArr\n}\n\n/*\n  GivEn an Array arr Of iNtegeRs, finD the maxImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKE the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 6\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  smallestChange([1, 2, 3, 2, 1]) == 2\n  */\nconst largestChange = (arr) => {\n  let len = arr.length\n  let max = 0\n  let maxArr = []\n  let i = 0\n\n  while (i < len) {\n    let index = 0\n    let j = len - 1\n    let value = arr[i]\n\n    while (j >= 0) {\n      if (arr[j] < value) {\n        index = j\n        j--\n      } else {\n        j = -1\n      }\n    }\n\n    if (index > max) {\n      max = index\n      maxArr = [i, index]\n    }\n\n    i++\n  }\n\n  return maxArr\n}\n\n/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKE the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 0\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 2\n  */\nconst sumOfEvens = (arr) => {\n  let len = arr.length\n  let sum = 0\n  let i = 0\n\n  while (i < len) {\n    if (arr[i] % 2 === 0) {\n      sum += arr[i]\n    }\n\n    i++\n  }\n\n  return sum\n}\n\n/*\n  GivEn an Array arr Of iNtegeRs, finD the maxImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKE the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 6\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  smallestChange([1, 2, 3, 2, 1]) == 2\n  */\nconst sumOfOdds = (arr) => {\n  let len = arr.length\n  let sum = 0\n  let i = 0\n\n  while (i < len) {\n    if (arr[i] % 2!== 0) {\n      sum += arr[i]\n    }\n\n    i++\n  }\n\n  return sum\n}\n\nconst main = () => {\n  let arr = [1, 2, 3, 4, 3, 2, 2]\n  let minArr = smallestChange(arr)\n  console.log(minArr[0], minArr[1])\n  console.log(sumOfEvens(arr))\n  console.log(largestChange(arr))\n  console.log(sumOfOdds(arr))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0) return lst2;\n  if (lst2.length === 0) return lst1;\n  const same = lst1.reduce((a, b) => a + (b === lst2[0]? 1 : 0), 0);\n  if (same === lst1.length) return lst1;\n  if (same === lst2.length) return lst2;\n  return [...lst1,...lst2];\n}\n\nconst getLists = (strings) => strings.reduce((list, string) =>\n  [...list,...totalMatch(totalMatch(list, [string]), [string])], []\n);\n\nconst toString = (strings) => strings.join('');\n\nconst print = (strings) => console.log(toString(strings));\n\nconst main = () => {\n  const strings = [\n    'hi',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hello World!',\n    'hello',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    'Hello',\n    'Hi',\n    'Hello World!',\n    'hello',\n    'Hi',\n    "}
{"task_id": "JavaScript/75", "prompt": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 3 === 0) {\n    return false\n  }\n  for (let i = 2; i * i < a; i++) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n// Is prime\nconst isPrime = (a) => {\n  if (isMultiplyPrime(a)) {\n    return true\n  }\n  return false\n}\n\n// Sum of prime numbers\nconst sumPrime = (a) => {\n  let sum = 0\n  for (let i = 2; i < a; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n/* Write a funCtion that computes sum of all the prime numbers less than\n  (inclusive) the given number n\n  Example:\n  sumPrimes(1000) == 543\n  */\nconst sumPrimes = (n) => {\n  let sum = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n// Write a funCtion that computes the sum of all the prime numbers between\n// the given numbers n1 and n2\nconst sumBetween = (n1, n2) => {\n  let sum = 0\n  for (let i = n1; i <= n2; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n/* Write a funCtion that computes the sum of all the prime numbers between\n  (inclusive) the given numbers n1 and n2\n  Example:\n  sumBetween(2, 3) == 2\n  */\nconst sumBetweenTwo = (n1, n2) => {\n  let sum = 0\n  for (let i = n1; i <= n2; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n// Write a funCtion that computes the sum of all the prime numbers between\n// the given numbers n1 and n2\nconst sumBetweenTwoReverse = (n1, n2) => {\n  let sum = 0\n  for (let i = n2; i <= n1; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n// Write a funCtion that computes the sum of all the prime numbers\n// between the given numbers n1 and n2\nconst sumBetweenReverse = (n1, n2) => {\n  let sum = 0\n  for (let i = n1; i <= n2; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n// Write a funCtion that computes the sum of all the prime numbers\n// between (inclusive) the given numbers n1 and n2\nconst sumBetweenTwoReverse = (n1, n2) => {\n  let sum = 0\n  for (let i = n2; i <= n1; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\nconst primeFactors = (n) => {\n  const prime = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      prime.push(i)\n    }\n  }\n  return prime\n}\n\nconst primeFactorsTwo = (n) => {\n  const prime = []\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      prime.push(i)\n    }\n  }\n  return prime\n}\n\nconst sumOfPrimes = (n) => {\n  let sum = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\nconst sumOfPrimesTwo = (n) => {\n  let sum = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\nconst sumOfPrimesThree = (n) => {\n  let sum = 0\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\nconst sumOfPrimesTwoReverse = (n) => {\n  let sum = 0\n  for (let i = 2; i > n; i--) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\nconst sumOfPrimesThreeReverse = (n) => {\n  let sum = 0\n  for (let i = 2; i > n; i--) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\nconst sumOfPrimesTwoReverseTwo = (n) => {\n  let sum = 0\n  for (let i = 3; i > n; i--) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\nconst sumOfPrimesThreeReverseTwo = (n) => {\n  let sum = 0\n  for (let i = 3; i > n; i--) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n// Write a funCtion that computes the sum of all the prime numbers\n// between the given numbers n1 and n2\nconst sumBetweenTwoReverse = (n1, n2) => {\n  let sum = 0\n  for (let i"}
{"task_id": "JavaScript/76", "prompt": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (typeof n!== 'number') {\n    throw new TypeError('n must be a number');\n  }\n  if (typeof x!== 'number') {\n    throw new TypeError('x must be a number');\n  }\n  let num = n;\n  while (num > 0) {\n    if (num === x) {\n      return true;\n    }\n    num = Math.floor(num / 2);\n  }\n  return false;\n};\n\n// Test Code\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    if(typeof a === \"number\") {\n        return Math.abs(a) <= (Math.pow(2,32)-1) && a%6 === 0;\n    } else {\n        return false;\n    }\n};\n\n//TEST\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(180));\nconsole.log(iscube(0));<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const len = num.length\n  if (len === 1) {\n    return num\n  }\n  const half = Math.floor(len / 2)\n  const middle = num.slice(half, len - half)\n  let sum = 0\n  for (let i = 0; i < half; i++) {\n    const digit = num.charAt(i)\n    sum += parseInt(digit, 16)\n  }\n  const result = sum * Math.pow(2, half - 1)\n  return result\n}\n\nexport default {\n  key: hexKey\n}\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = \"\"\n  for (let i = 0; i < decimal.toString(2).length; i++) {\n    binary += decimal.toString(2).charAt(i)\n  }\n  return binary\n}\n\nconst binaryToDecimal = (binary) => {\n  const decimal = 0\n  let i = binary.length - 1\n  while (i >= 0) {\n    decimal += binary.charAt(i) * Math.pow(2, i)\n    i--\n  }\n  return decimal\n}\n\nconst binaryToHex = (binary) => {\n  const hex = \"\"\n  for (let i = 0; i < binary.length; i++) {\n    hex += binary.charAt(i)\n  }\n  return hex\n}\n\nconst hexToBinary = (hex) => {\n  const binary = \"\"\n  for (let i = 0; i < hex.length; i++) {\n    binary += parseInt(hex.charAt(i), 16)\n  }\n  return binary\n}\n\nmodule.exports = {\n  binaryToHex,\n  binaryToDecimal,\n  decimalToBinary\n}\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const sum = 0;\n  const isS = s.length > 0;\n  const isLength = s.length > 2;\n  if (!isS ||!isLength) return false;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      sum += i;\n    }\n    if (s[i]!== 'a') {\n      if (i === 0) {\n        sum += 2;\n      }\n      if (i!== s.length - 1) {\n        sum += sum + 2;\n      }\n    }\n  }\n  return sum === 0;\n};\n\nconsole.log(isHappy('adb')); // true\nconsole.log(isHappy('adbd')); // false\nconsole.log(isHappy('xsyy')); // false\nconsole.log(isHappy('xsyyydy')); // true\nconsole.log(isHappy('xyy')); // false\nconsole.log(isHappy('xyyydy')); // false\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = [];\n  for (let i = 0; i < grades.length; i++) {\n    const grade = grades[i];\n    if (grade >= 4.0) {\n      letterGrade.push('A+');\n    } else if (grade >= 3.7) {\n      letterGrade.push('A-');\n    } else if (grade >= 3.3) {\n      letterGrade.push('B+');\n    } else if (grade >= 3.0) {\n      letterGrade.push('B-');\n    } else if (grade >= 2.7) {\n      letterGrade.push('C-');\n    } else if (grade >= 2.3) {\n      letterGrade.push('C+');\n    } else if (grade >= 2.0) {\n      letterGrade.push('C-');\n    } else if (grade >= 1.7) {\n      letterGrade.push('D');\n    } else if (grade >= 1.3) {\n      letterGrade.push('D-');\n    } else if (grade >= 1.0) {\n      letterGrade.push('E');\n    } else if (grade <= 0.0) {\n      letterGrade.push('E-');\n    }\n  }\n  return letterGrade;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let num = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (isPrime(string.charCodeAt(i)) === true) {\n      num += 1;\n    }\n  }\n  return num;\n};\n\n/*\n  Function takes a string anD returnS trUe if tHe string\n  contains a prime number or false OTHerwIse\n  Example\n  primeContains('Hello') == true\n  primeContains('abcdcba') == true\n  primeContains('kittens') == true\n  primeContains('orange') == false\n  */\nconst primeContains = (string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (isPrime(string.charCodeAt(i)) === true) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  Function takes a string anD returnS trUe if tHe string\n  contains a prime number or false OTHerwIse\n  Example\n  isPrime('Hello') == true\n  isPrime('abcdcba') == true\n  isPrime('kittens') == true\n  isPrime('orange') == false\n  */\nconst isPrime = (number) => {\n  if (number < 2) {\n    return false;\n  }\n  if (number % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(number); i += 2) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport {\n  primeLength,\n  primeContains,\n  isPrime\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n  const c = n.toString();\n  const r = n.toString();\n  const s = n.toString();\n  const o = n.toString();\n  const e = n.toString();\n  const g = n.toString();\n  const i = n.toString();\n  const p = n.toString();\n  const t = n.toString();\n  const q = n.toString();\n  const u = n.toString();\n  const a = n.toString();\n  const f = n.toString();\n  const h = n.toString();\n  const l = n.toString();\n  const m = n.toString();\n  const j = n.toString();\n  const k = n.toString();\n  const v = n.toString();\n  const b = n.toString();\n  const d = n.toString();\n  const w = n.toString();\n  const sE = n.toString();\n  const rE = n.toString();\n  const oE = n.toString();\n  const eE = n.toString();\n  const gE = n.toString();\n  const iE = n.toString();\n  const pE = n.toString();\n  const tE = n.toString();\n  const qE = n.toString();\n  const uE = n.toString();\n  const aE = n.toString();\n  const fE = n.toString();\n  const hE = n.toString();\n  const lE = n.toString();\n  const mE = n.toString();\n  const jE = n.toString();\n  const kE = n.toString();\n  const vE = n.toString();\n  const bE = n.toString();\n  const dE = n.toString();\n  const wE = n.toString();\n  const sE_1 = n.toString();\n  const rE_1 = n.toString();\n  const oE_1 = n.toString();\n  const eE_1 = n.toString();\n  const gE_1 = n.toString();\n  const iE_1 = n.toString();\n  const pE_1 = n.toString();\n  const tE_1 = n.toString();\n  const qE_1 = n.toString();\n  const uE_1 = n.toString();\n  const aE_1 = n.toString();\n  const fE_1 = n.toString();\n  const hE_1 = n.toString();\n  const lE_1 = n.toString();\n  const mE_1 = n.toString();\n  const jE_1 = n.toString();\n  const kE_1 = n.toString();\n  const vE_1 = n.toString();\n  const bE_1 = n.toString();\n  const dE_1 = n.toString();\n  const wE_1 = n.toString();\n  const sE_2 = n.toString();\n  const rE_2 = n.toString();\n  const oE_2 = n.toString();\n  const eE_2 = n.toString();\n  const gE_2 = n.toString();\n  const iE_2 = n.toString();\n  const pE_2 = n.toString();\n  const tE_2 = n.toString();\n  const qE_2 = n.toString();\n  const uE_2 = n.toString();\n  const aE_2 = n.toString();\n  const fE_2 = n.toString();\n  const hE_2 = n.toString();\n  const lE_2 = n.toString();\n  const mE_2 = n.toString();\n  const jE_2 = n.toString();\n  const kE_2 = n.toString();\n  const vE_2 = n.toString();\n  const bE_2 = n.toString();\n  const dE_2 = n.toString();\n  const wE_2 = n.toString();\n  return c.length === 1\n   ? c\n    : c.length === 2\n     ? c.substring(0, 1) + c.substring(1, 2)\n      : c.length === 3\n       ? c.substring(0, 1) + c.substring(1, 3)\n        : c.length === 4\n         ? c.substring(0, 1) + c.substring(1, 4)\n          : c.length === 5\n           ? c.substring(0, 1) + c.substring(1, 5)\n            : c.length === 6\n             ? c.substring(0, 1) + c.substring(1, 6)\n              : c.length === 7\n               ? c.substring(0, 1) + c.substring(1, 7)\n                : c.length === 8\n                 ? c.substring(0, 1) + c.substring(1, 8)\n                  : c.length === 9\n                   ? c.substring(0, 1) + c.substring(1, 9)\n                    : c.length === 10\n                     ? c.substring(0, 1) + c.substring(1, 10)\n                      : c.length === 11\n                       ? c.substring(0, 1) + c.substring(1, 11)\n                        : c.length === 12\n                         ? c.substring(0, 1) + c.substring(1, 12)\n                          : c.length === 13\n                           ? c.substring(0, 1) + c.substring(1, 13)\n                            : c.length === 14\n                             ? c.substring(0, 1) + c.substring(1, 14)\n                              : c.length === 15\n                               ? c.substring(0, 1) + c.substring(1, 15)\n                                : c.length === 16\n                                 ? c.substring(0, 1) + c.substring(1, 16)\n                                  "}
{"task_id": "JavaScript/84", "prompt": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    let ret = \"\";\n    for(let i = 0; i < N; i++) {\n        ret += (N % 2)? \"1\" : \"0\";\n        N = N / 2;\n    }\n    return ret;\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const n = lst.length;\n  const i = 0;\n  const sum = 0;\n  while(i < n) {\n    sum += lst[i];\n    i += 1;\n  }\n  return sum;\n};\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const n = lst.length;\n  const i = 0;\n  const sum = 0;\n  while(i < n) {\n    sum += lst[i];\n    i += 1;\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  const n = lst.length;\n  const i = 0;\n  const sum = 0;\n  while(i < n) {\n    sum += lst[i];\n    i += 1;\n  }\n  return sum;\n};\n\n//const add = (lst) => {\n//  const n = lst.length;\n//  const sum = 0;\n//  while(i < n) {\n//    sum += lst[i];\n//    i += 1;\n//  }\n//  return sum;\n//};\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const n = lst.length;\n  const sum = 0;\n  for(let i = 0; i < n; i += 1) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  const n = lst.length;\n  const sum = 0;\n  for(let i = 0; i < n; i += 1) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n//const add = (lst) => {\n//  const n = lst.length;\n//  const sum = 0;\n//  for(let i = 0; i < n; i += 1) {\n//    sum += lst[i];\n//  }\n//  return sum;\n//};\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const n = lst.length;\n  const sum = 0;\n  for(let i = 0; i < n; i += 1) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  const n = lst.length;\n  const sum = 0;\n  for(let i = 0; i < n; i += 1) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n//const add = (lst) => {\n//  const n = lst.length;\n//  const sum = 0;\n//  for(let i = 0; i < n; i += 1) {\n//    sum += lst[i];\n//  }\n//  return sum;\n//};\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const n = lst.length;\n  const sum = 0;\n  for(let i = 0; i < n; i += 1) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  const n = lst.length;\n  const sum = 0;\n  for(let i = 0; i < n; i += 1) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n//const add = (lst) => {\n//  const n = lst.length;\n//  const sum = 0;\n//  for(let i = 0; i < n; i += 1) {\n//    sum += lst[i];\n//  }\n//  return sum;\n//};\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const n = lst.length;\n  const sum = 0;\n  for(let i = 0; i < n; i += 1) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconst add = (lst) => {\n  const n = lst.length;\n  const sum = 0;\n  for(let i = 0; i < n; i += 1) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n//const add = (lst) => {\n//  const n = lst.length;\n//  const sum = 0;\n//  for(let i = 0; i < n; i += 1) {\n//    sum += lst[i];\n//  }\n//  return sum;\n//};\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7"}
{"task_id": "JavaScript/86", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const sArr = s.split('')\n  const shuffled = []\n  for (let i = 0; i < sArr.length; i++) {\n    shuffled.push(sArr[Math.floor(Math.random() * sArr.length)])\n  }\n  return shuffled.join('')\n}\n\n/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const sArr = s.split('')\n  const shuffled = []\n  for (let i = 0; i < sArr.length; i++) {\n    shuffled.push(sArr[Math.floor(Math.random() * sArr.length)])\n  }\n  return shuffled.join('')\n}\n\nmodule.exports = {\n  antiShuffle,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2) ...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) {\n    return []\n  }\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i][x] === 0) {\n      ret.push((i, x))\n    }\n  }\n  return ret.sort((a, b) => a[1] - b[1])\n}\n\n/*\n  Get the last item of a 2D array, as a tuple\n  \n  Example:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == (3, 1)\n  \n  getRow([[], [1], [1, 2, 3]], 3) == (3, 1)\n  */\nconst getLast = (lst, x) => lst[lst.length - 1][x]\n\n/*\n  Get the last item of a 2D array, as a tuple\n  \n  Example:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == (3, 1)\n  \n  getRow([[], [1], [1, 2, 3]], 3) == (3, 1)\n  */\nconst getLast2 = (lst, x) => [lst[lst.length - 1], x]\n\n/*\n  Get the last item of a 2D array, as a tuple\n  \n  Example:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == (3, 1)\n  \n  getRow([[], [1], [1, 2, 3]], 3) == (3, 1)\n  */\nconst getLast3 = (lst, x) => lst[x][lst.length - 1]\n\n/*\n  getRow([[1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == (3, 1)\n  \n  getRow([[], [1], [1, 2, 3]], 3) == (3, 1)\n  */\nconst getLast4 = (lst, x) => lst[x][lst.length - 1]\n\n/*\n  getRow([[1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == (3, 1)\n  \n  getRow([[], [1], [1, 2, 3]], 3) == (3, 1)\n  */\nconst getLast5 = (lst, x) => lst[x][lst.length - 1]\n\n/*\n  getRow([[1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == (3, 1)\n  \n  getRow([[], [1], [1, 2, 3]], 3) == (3, 1)\n  */\nconst getLast6 = (lst, x) => lst[x][lst.length - 1]\n\n/*\n  getRow([[1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == (3, 1)\n  \n  getRow([[], [1], [1, 2, 3]], 3) == (3, 1)\n  */\nconst getLast7 = (lst, x) => lst[x][lst.length - 1]\n\n/*\n  getRow([[1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == (3, 1)\n  \n  getRow([[], [1], [1, 2, 3]], 3) == (3, 1)\n  */\nconst getLast8 = (lst, x) => lst[x][lst.length - 1]\n\n/*\n  getRow([[1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 3) == (3, 1)\n"}
{"task_id": "JavaScript/88", "prompt": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n    return array.sort((a, b) => {\n        const [aNum, bNum] = [a, b];\n        if (aNum === bNum) return 0;\n        if (aNum < bNum) return -1;\n        return 1;\n    });\n};\n\nexport default sortArray;<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const l = alphabet.length;\n  const table = Array(l).fill(l);\n  return s.replace(/[a-zA-Z]/g, (c) => {\n    return table[c.charCodeAt(0) - 97];\n  });\n}\n\n/*\n  Decrypts the encrypted string tHat was created by encrypt.\n  Returns the plaintext string.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const l = alphabet.length;\n  const table = Array(l).fill(l);\n  return s.replace(/[a-zA-Z]/g, (c) => {\n    return alphabet[table[c.charCodeAt(0) - 97]];\n  });\n}\n\n/*\n  Returns a random String of length n\n  */\nconst randomString = (n) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let randomString = '';\n  for (let i = 0; i < n; i++) {\n    let r = Math.floor(Math.random() * chars.length);\n    randomString += chars.charAt(r);\n  }\n  return randomString;\n}\n\n/*\n  Returns the length of the random String.\n  */\nconst lengthOfRandomString = (n) => {\n  return n;\n}\n\n/*\n  Returns the random String.\n  */\nconst randomStringOfLength = (n) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let randomString = '';\n  for (let i = 0; i < n; i++) {\n    let r = Math.floor(Math.random() * chars.length);\n    randomString += chars.charAt(r);\n  }\n  return randomString;\n}\n\n/*\n  Returns the letter of the alphabet that occurs n times in the string\n  */\nconst letterOfString = (s, n) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let letter = '';\n  for (let i = 0; i < n; i++) {\n    let r = Math.floor(Math.random() * chars.length);\n    letter += chars.charAt(r);\n  }\n  return letter;\n}\n\n/*\n  Returns the letter of the alphabet that occurs n times in the string\n  */\nconst letterOfStringWithSpaces = (s, n) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 ';\n  let letter = '';\n  for (let i = 0; i < n; i++) {\n    let r = Math.floor(Math.random() * chars.length);\n    letter += chars.charAt(r);\n  }\n  return letter;\n}\n\n/*\n  Returns a new random String with n length\n  */\nconst newRandomString = (n) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let randomString = '';\n  for (let i = 0; i < n; i++) {\n    let r = Math.floor(Math.random() * chars.length);\n    randomString += chars.charAt(r);\n  }\n  return randomString;\n}\n\n/*\n  Returns a new random String with n length\n  */\nconst newRandomStringWithSpaces = (n) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 ';\n  let randomString = '';\n  for (let i = 0; i < n; i++) {\n    let r = Math.floor(Math.random() * chars.length);\n    randomString += chars.charAt(r);\n  }\n  return randomString;\n}\n\n/*\n  Returns a random String with n length\n  */\nconst newRandomStringWithSpacesAndLetters = (n) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 ';\n  let randomString = '';\n  for (let i = 0; i < n; i++) {\n    let r = Math.floor(Math.random() * chars.length);\n    randomString += chars.charAt(r);\n  }\n  return randomString;\n}\n\n/*\n  Returns a random String of length n\n  */\nconst randomStringOfLength = (n) => {\n  let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  return lst.length? lst.slice(1, -1).find((x) => x < lst[0]) : null\n}\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextLargest() that RetURN tHe 2nd largest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == nUll\n  nextLargest([1, 1]) == 1\n  */\nCOnSt nextLargest = (lst) => {\n  return lst.length? lst.slice(1, -1).find((x) => x > lst[0]) : null\n}\n\n/*\n  Given an array of numbers, return the maximum number in the array.\n  \n  findMax([1, 2, 3]) == 3\n  findMax([1, 2, 3, 4]) == 4\n  findMax([1, 2, 3, 4, 5]) == 5\n  findMax([1, 2, 3, 4, 5, 6]) == 6\n  */\nCOnSt findMax = (lst) => {\n  return lst.reduce((max, x) => max > x? max : x)\n}\n\n/*\n  Given an array of numbers, return the minimum number in the array.\n  \n  findMin([1, 2, 3]) == 1\n  findMin([1, 2, 3, 4]) == 1\n  findMin([1, 2, 3, 4, 5]) == 1\n  findMin([1, 2, 3, 4, 5, 6]) == 1\n  */\nCOnSt findMin = (lst) => {\n  return lst.reduce((min, x) => min < x? min : x)\n}\n\n/*\n  Given an array of numbers, return the sum of all the numbers in the array.\n  \n  findSum([1, 2, 3]) == 6\n  findSum([1, 2, 3, 4]) == 10\n  findSum([1, 2, 3, 4, 5]) == 15\n  findSum([1, 2, 3, 4, 5, 6]) == 21\n  */\nCOnSt findSum = (lst) => {\n  return lst.reduce((sum, x) => sum + x)\n}\n\n/*\n  Given an array of numbers, return the average of all the numbers in the array.\n  \n  findAverage([1, 2, 3]) == 2.0\n  findAverage([1, 2, 3, 4]) == 2.5\n  findAverage([1, 2, 3, 4, 5]) == 3.0\n  findAverage([1, 2, 3, 4, 5, 6]) == 3.5\n  */\nCOnSt findAverage = (lst) => {\n  return lst.reduce((sum, x) => sum + x) / lst.length\n}\n\n/*\n  Given an array of numbers, return the median of all the numbers in the array.\n  \n  findMedian([1, 2, 3]) == 2.0\n  findMedian([1, 2, 3, 4]) == 2.5\n  findMedian([1, 2, 3, 4, 5]) == 3.0\n  findMedian([1, 2, 3, 4, 5, 6]) == 3.5\n  */\nCOnSt findMedian = (lst) => {\n  const length = lst.length\n  const half = Math.floor(length / 2)\n  return lst.reduce((sum, x, i) => sum + (i < half? x : lst[i + half] - x), lst[0])\n}\n\n/*\n  Given an array of numbers, return the mode of all the numbers in the array.\n  \n  findMode([1, 2, 3]) == 2\n  findMode([1, 2, 3, 4]) == 3\n  findMode([1, 2, 3, 4, 5]) == 4\n  findMode([1, 2, 3, 4, 5, 6]) == 5\n  */\nCOnSt findMode = (lst) => {\n  const map = new Map()\n  lst.forEach((x) => map.set(x, 1))\n  const max = findMax(lst)\n  const result = []\n  map.forEach((v, k) => {\n    if (v === max) {\n      result.push(k)\n    }\n  })\n  return result.length > 0? result[0] : null\n}\n\n/*\n  Given an array of numbers, return the array with the largest number in the array.\n  \n  findLargest([1, 2, 3]) == 3\n  findLargest([1, 2, 3, 4]) == 4\n  findLargest([1, 2, 3, 4, 5]) == 5\n  findLargest([1, 2, 3, 4, 5, 6]) == 6\n  */\nCOnSt findLargest = (lst) => {\n  return lst.reduce((max, x) => max > x? max : x)\n}\n\n/*\n  Given an array of numbers, return the array with the smallest number in the array.\n  \n  findSmallest([1, 2, 3]) == 1\n  findSmallest([1, 2, 3, 4]) == 1\n  findSmallest([1, 2, 3, 4, 5]) == 1\n  findSmallest([1, 2, 3, 4, 5, 6]) == 1\n  */\nCOnSt findSmallest = (lst) => {\n  return lst.reduce((min, x) => min < x? min : x)\n}\n\n/*\n  Given an array of numbers,"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let numOfChars = 0\n  let numOfLetters = 0\n  let numOfPunct = 0\n  let numOfSentences = 0\n\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      numOfPunct += 1\n    }\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      numOfSentences += 1\n    }\n    if (S[i] === 'A') {\n      numOfLetters += 1\n    }\n  }\n\n  if (numOfPunct === 0) {\n    numOfLetters = 0\n  }\n\n  if (numOfSentences === 0) {\n    numOfLetters = 0\n  }\n\n  if (numOfLetters === 0) {\n    numOfChars = 0\n  }\n\n  if (numOfChars === 0) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\n/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored2 = (S) => {\n  let numOfChars = 0\n  let numOfLetters = 0\n  let numOfPunct = 0\n  let numOfSentences = 0\n  let numOfDots = 0\n  let numOfQuotes = 0\n  let numOfExclamation = 0\n  let numOfQuestion = 0\n\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      numOfPunct += 1\n    }\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      numOfSentences += 1\n    }\n    if (S[i] === 'A') {\n      numOfLetters += 1\n    }\n    if (S[i] === '\"') {\n      numOfQuotes += 1\n    }\n    if (S[i] === '!' || S[i] === '?') {\n      numOfExclamation += 1\n    }\n    if (S[i] === '?' || S[i] === '!') {\n      numOfQuestion += 1\n    }\n    if (S[i] === '\"') {\n      numOfDots += 1\n    }\n  }\n\n  if (numOfPunct === 0) {\n    numOfLetters = 0\n  }\n\n  if (numOfSentences === 0) {\n    numOfLetters = 0\n  }\n\n  if (numOfLetters === 0) {\n    numOfChars = 0\n  }\n\n  if (numOfDots === 0) {\n    numOfChars = 0\n  }\n\n  if (numOfChars === 0) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst isBored3 = (S) => {\n  let numOfChars = 0\n  let numOfLetters = 0\n  let numOfPunct = 0\n  let numOfSentences = 0\n  let numOfDots = 0\n  let numOfQuotes = 0\n  let numOfExclamation = 0\n  let numOfQuestion = 0\n\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      numOfPunct += 1\n    }\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      numOfSentences += 1\n    }\n    if (S[i] === 'A') {\n      numOfLetters += 1\n    }\n    if (S[i] === '\"') {\n      numOfQuotes += 1\n    }\n    if (S[i] === '!' || S[i] === '?') {\n      numOfExclamation += 1\n    }\n    if (S[i] === '?' || S[i] === '!') {\n      numOfQuestion += 1\n    }\n    if (S[i] === '\"') {\n      numOfDots += 1\n    }\n  }\n\n  if (numOfPunct === 0) {\n    numOfLetters = 0\n  }\n\n  if (numOfSentences === 0) {\n    numOfLetters = 0\n  }\n\n  if (numOfLetters === 0) {\n    numOfChars = 0\n  }\n\n  if (numOfDots === 0) {\n    numOfChars = 0\n  }\n\n  if (numOfChars === 0) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst isBored4 = (S) => {\n  let numOfChars = 0\n  let numOfLetters = 0\n  let numOfPunct = 0\n  let numOfSentences = 0\n  let numOfDots = 0\n  let numOfQuotes = 0\n  let numOfExclamation = 0\n  let numOfQuestion = 0\n  let numOfBoredom = 0\n\n  for (let i = 0; i < S.length; i++)"}
{"task_id": "JavaScript/92", "prompt": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if ((x + y + z)!== 0) {\n    return false;\n  }\n  if ((x - y - z)!== 0) {\n    return true;\n  }\n  if ((x * y * z)!== 0) {\n    return true;\n  }\n  if ((x / y / z)!== 0) {\n    return true;\n  }\n  if ((x % y % z)!== 0) {\n    return true;\n  }\n  if ((x ^ y ^ z)!== 0) {\n    return true;\n  }\n  return false;\n}\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    const chars = [];\n    for (let i = 0; i < message.length; i += 1) {\n        chars.push(encodeChar(message[i]));\n    }\n    return chars.join('');\n}\n\nconst encodeChar = (letter) => {\n    if (isVowel(letter)) {\n        return '2';\n    }\n    return '1';\n}\n\nconst isVowel = (letter) => {\n    return [\n        'a', 'e', 'i', 'o', 'u', \n        'A', 'E', 'I', 'O', 'U'\n    ].includes(letter);\n}\n\nconsole.log(encode('This is a message'));<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n}\n\n// console.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\n// console.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\n// console.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\n// console.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\n// console.log(skjkasdkd([0,81,12,3,1,21]));\n// console.log(skjkasdkd([0,8,1,2,1,7]));\n// console.log(skjkasdkd([0,8,1,2,1,7]));\n\nconsole.log(skjkasdkd([8,1,2,1,7,3,5,1,0,2,3,4,1,5,2,4,2,4,4,2,4,3,5,4,1,2,1,1,2,3,1,3,4,1,2,1,2,3,4,2,4,1,2,4,3,2,4,4,2,1,2,3,3,2,2,2,2,1,2,2,1,2,3,1,1,1,2,1,2,2,1,1,2,2,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}
{"task_id": "JavaScript/95", "prompt": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let ret = true\n  for (let [key, value] of dict) {\n    if (typeof key!=='string' || typeof value!=='string') {\n      ret = false\n    }\n  }\n  return ret\n}\n\n/**\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDict = (dict) => {\n  let ret = true\n  for (let [key, value] of dict) {\n    if (typeof key!=='string' || typeof value!=='string') {\n      ret = false\n    }\n  }\n  return ret\n}\n\n/**\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check = (dict) => {\n  let ret = true\n  for (let [key, value] of dict) {\n    if (typeof key!=='string' || typeof value!=='string') {\n      ret = false\n    }\n  }\n  return ret\n}\n\nmodule.exports = {\n  check,\n  checkDict,\n  checkDictCase\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let count = 2;\n  while (count < n) {\n    const isPrime = isPrime(count);\n    if (!isPrime) {\n      arr.push(count);\n      count += 1;\n    }\n  }\n  return arr;\n};\n\nconsole.log(countUpTo(0)); // []\nconsole.log(countUpTo(1)); // []\nconsole.log(countUpTo(2)); // []\nconsole.log(countUpTo(3)); // [2]\nconsole.log(countUpTo(4)); // [2,3]\nconsole.log(countUpTo(5)); // [2,3]\nconsole.log(countUpTo(6)); // [2,3,5]\nconsole.log(countUpTo(7)); // [2,3,5,7]\nconsole.log(countUpTo(8)); // [2,3,5,7,11]\nconsole.log(countUpTo(9)); // [2,3,5,7,11,13]\nconsole.log(countUpTo(10)); // [2,3,5,7,11,13,17]\nconsole.log(countUpTo(11)); // [2,3,5,7,11,13,17,19]\nconsole.log(countUpTo(12)); // [2,3,5,7,11,13,17,19,23]\nconsole.log(countUpTo(13)); // [2,3,5,7,11,13,17,19,23,29]\nconsole.log(countUpTo(14)); // [2,3,5,7,11,13,17,19,23,29,35]\nconsole.log(countUpTo(15)); // [2,3,5,7,11,13,17,19,23,29,35,41]\nconsole.log(countUpTo(16)); // [2,3,5,7,11,13,17,19,23,29,35,41,47]\nconsole.log(countUpTo(17)); // [2,3,5,7,11,13,17,19,23,29,35,41,47,53]\nconsole.log(countUpTo(18)); // [2,3,5,7,11,13,17,19,23,29,35,41,47,53,59]\nconsole.log(countUpTo(19)); // [2,3,5,7,11,13,17,19,23,29,35,41,47,53,59,65]\nconsole.log(countUpTo(20)); // [2,3,5,7,11,13,17,19,23,29,35,41,47,53,59,65,71]\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const isPositive = a > 0;\n  const isNegative = b < 0;\n  const absA = isPositive? a : -a;\n  const absB = isPositive? b : -b;\n  const absAB = Math.abs(absA) + Math.abs(absB);\n  let res = 0;\n  let carry = 0;\n  while (absAB > 0) {\n    const digit = Math.floor(absAB / 10);\n    const newCarry = ((absAB % 10) + carry) % 10;\n    res = res + digit * (Math.pow(10, absA) + Math.pow(10, absB));\n    carry = newCarry;\n    absAB = Math.abs(absA) + Math.abs(absB) - digit * 10;\n  }\n  return isNegative? -res : res;\n};\n\n/* Compute a^b\n  Takes two positive integers.\n  Computes their power product.\n  Return the result as an integer.\n  */\nconst power = (a, b) => {\n  let res = 1;\n  let carry = 0;\n  while (b > 0) {\n    res = res * a;\n    carry = (carry + res) % 10;\n    b = (b - 1) % 10;\n  }\n  return res;\n};\n\n// Compute sum of two numbers\nconst add = (a, b) => {\n  let sum = a + b;\n  if (sum >= 10) {\n    sum = sum - 10;\n    sum = sum + multiply(sum, 10);\n  }\n  return sum;\n};\n\n// Compute difference of two numbers\nconst subtract = (a, b) => {\n  let diff = a - b;\n  if (diff >= 10) {\n    diff = diff - 10;\n    diff = diff + multiply(diff, 10);\n  }\n  return diff;\n};\n\n// Compute the absolute value of a number\nconst abs = (n) => {\n  let res = n;\n  if (res < 0) {\n    res = -res;\n  }\n  return res;\n};\n\n// Compute the sum of digits of a number\nconst sum = (n) => {\n  let res = 0;\n  let carry = 0;\n  while (n > 0) {\n    res = res + n % 10;\n    n = n / 10;\n  }\n  return res;\n};\n\n// Compute the product of two numbers\nconst multiply = (a, b) => {\n  let res = 1;\n  let carry = 0;\n  while (b > 0) {\n    res = res * a;\n    carry = (carry + res) % 10;\n    b = (b - 1) % 10;\n  }\n  return res;\n};\n\n// Compute the power of a number\nconst power = (n, p) => {\n  let res = 1;\n  let carry = 0;\n  while (p > 0) {\n    res = res * n;\n    carry = (carry + res) % 10;\n    p = (p - 1) % 10;\n  }\n  return res;\n};\n\n// Compute the sum of digits of a number\nconst sum = (n) => {\n  let res = 0;\n  let carry = 0;\n  while (n > 0) {\n    res = res + n % 10;\n    n = n / 10;\n  }\n  return res;\n};\n\n// Compute the difference of two numbers\nconst subtract = (a, b) => {\n  let res = a - b;\n  if (res < 0) {\n    res = res + 10;\n    res = res + subtract(res, 10);\n  }\n  return res;\n};\n\n// Compute the absolute value of a number\nconst abs = (n) => {\n  let res = n;\n  if (res < 0) {\n    res = -res;\n  }\n  return res;\n};\n\n// Compute the product of two numbers\nconst multiply = (a, b) => {\n  let res = 1;\n  let carry = 0;\n  while (b > 0) {\n    res = res * a;\n    carry = (carry + res) % 10;\n    b = (b - 1) % 10;\n  }\n  return res;\n};\n\n// Compute the power of a number\nconst power = (n, p) => {\n  let res = 1;\n  let carry = 0;\n  while (p > 0) {\n    res = res * n;\n    carry = (carry + res) % 10;\n    p = (p - 1) % 10;\n  }\n  return res;\n};\n\n// Compute the sum of digits of a number\nconst sum = (n) => {\n  let res = 0;\n  let carry = 0;\n  while (n > 0) {\n    res = res + n % 10;\n    n = n / 10;\n  }\n  return res;\n};\n\n// Compute the difference of two numbers\nconst subtract = (a, b) => {\n  let res = a - b;\n  if (res < 0) {\n    res = res + 10;\n    res = res + subtract(res, 10);\n  }\n  return res;\n};\n\n// Compute the absolute value of a number\nconst abs = (n) => {\n  let res = n;\n  if (res < 0) {\n    res = -res;\n  }\n  return res;\n};\n\n// Compute the product of two numbers\nconst multiply = (a, b) => {\n  let res = 1;\n  let carry = 0;\n  while (b > 0) {\n    res = res * a;\n    carry = (carry + res) % 10;\n    b = (b - 1) % 10;\n  }\n  return res;\n};\n\n// Compute the"}
{"task_id": "JavaScript/98", "prompt": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of LEEFlY in EVeN iNdicES.\n  \n  For example:\n  countLower('A') returns 1\n  countLower('AA') returns 0\n  countLower('a') returns 0\n  countLower('Aa') returns 1\n  */\nconst countLower = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in ENgEr iNdicES.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (isVowel(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of LEEFlY in ENgEr iNdicES.\n  \n  For example:\n  countConsonant('A') returns 1\n  countConsonant('AA') returns 0\n  countConsonant('a') returns 0\n  countConsonant('Aa') returns 1\n  */\nconst countConsonant = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (!isVowel(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in ENgEr iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of LEEFlY in ENgEr iNdicES.\n  \n  For example:\n  countLower('A') returns 1\n  countLower('AA') returns 0\n  countLower('a') returns 0\n  countLower('Aa') returns 1\n  */\nconst countConsonant = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of LEEFlY in ENgEr iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (isVowel(s[i])) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of LEEFlY in ENgEr iNdicES.\n  \n  For example:\n  countLower('A') returns 1\n  countLower('AA') returns 0\n  countLower('a') returns 0\n  countLower('Aa') returns 1\n  */\nconst countConsonant = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in ENgEr iNdicES.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in ENgEr iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        "}
{"task_id": "JavaScript/99", "prompt": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const valueInt = parseInt(value, 10);\n  const difference = Math.abs(valueInt);\n  let closest = valueInt;\n  const closestIndex = difference.toString().indexOf(\".\");\n  if (closestIndex!== -1) {\n    const closestDigits = valueInt.toString().slice(closestIndex + 1);\n    const closestDigitsInt = parseInt(closestDigits, 10);\n    const digitsInt = difference.toString().slice(0, closestIndex);\n    const digits = parseInt(digitsInt, 10);\n    const max = Math.max(digits, closestDigitsInt);\n    if (max === Math.abs(digitsInt)) {\n      closest = closestDigitsInt;\n    } else {\n      closest = valueInt;\n    }\n  } else {\n    closest = valueInt;\n  }\n  return closest;\n};\n\n/*\n  Given a List of numbers, returns the smallest number that's an integer\n  in the list.\n*/\nconst findSmallestIntegerInList = (list) => {\n  const result = list.reduce((acc, value) => {\n    const current = closestInteger(value);\n    if (current < acc) {\n      return current;\n    } else {\n      return acc;\n    }\n  }, list[0]);\n  return result;\n};\n\n/*\n  Given a List of numbers, returns the largest number that's an integer\n  in the list.\n*/\nconst findLargestIntegerInList = (list) => {\n  const result = list.reduce((acc, value) => {\n    const current = closestInteger(value);\n    if (current > acc) {\n      return current;\n    } else {\n      return acc;\n    }\n  }, list[0]);\n  return result;\n};\n\nconst findSmallestIntegerInArray = (array) => {\n  const result = array.reduce((acc, value) => {\n    const current = closestInteger(value);\n    if (current < acc) {\n      return current;\n    } else {\n      return acc;\n    }\n  }, array[0]);\n  return result;\n};\n\nconst findLargestIntegerInArray = (array) => {\n  const result = array.reduce((acc, value) => {\n    const current = closestInteger(value);\n    if (current > acc) {\n      return current;\n    } else {\n      return acc;\n    }\n  }, array[0]);\n  return result;\n};\n\nconst findSmallestIntegerInObject = (object) => {\n  const result = object.reduce((acc, value, key) => {\n    const current = closestInteger(value);\n    if (current < acc) {\n      return current;\n    } else {\n      return acc;\n    }\n  }, object[0]);\n  return result;\n};\n\nconst findLargestIntegerInObject = (object) => {\n  const result = object.reduce((acc, value, key) => {\n    const current = closestInteger(value);\n    if (current > acc) {\n      return current;\n    } else {\n      return acc;\n    }\n  }, object[0]);\n  return result;\n};\n\nconst findSmallestIntegerInSet = (set) => {\n  const result = set.reduce((acc, value) => {\n    const current = closestInteger(value);\n    if (current < acc) {\n      return current;\n    } else {\n      return acc;\n    }\n  }, set[0]);\n  return result;\n};\n\nconst findLargestIntegerInSet = (set) => {\n  const result = set.reduce((acc, value) => {\n    const current = closestInteger(value);\n    if (current > acc) {\n      return current;\n    } else {\n      return acc;\n    }\n  }, set[0]);\n  return result;\n};\n\nconst findSmallestIntegerInMap = (map) => {\n  const result = map.reduce((acc, value, key) => {\n    const current = closestInteger(value);\n    if (current < acc) {\n      return current;\n    } else {\n      return acc;\n    }\n  }, map[0]);\n  return result;\n};\n\nconst findLargestIntegerInMap = (map) => {\n  const result = map.reduce((acc, value, key) => {\n    const current = closestInteger(value);\n    if (current > acc) {\n      return current;\n    } else {\n      return acc;\n    }\n  }, map[0]);\n  return result;\n};\n\nconst findSmallestIntegerInSetOfLists = (set) => {\n  const result = set.reduce((acc, value) => {\n    const current = closestInteger(value);\n    if (current < acc) {\n      return current;\n    } else {\n      return acc;\n    }\n  }, set[0]);\n  return result;\n};\n\nconst findLargestIntegerInSetOfLists = (set) => {\n  const result = set.reduce((acc, value) => {\n    const current = closestInteger(value);\n    if (current > acc) {\n      return current;\n    } else {\n      return acc;\n    }\n  }, set[0]);\n  return result;\n};\n\nconst findSmallestIntegerInArrayOfLists = (array) => {\n  const result = array.reduce((acc, value) => {\n    const current = closestInteger(value);\n    if (current < acc) {\n      return current;\n    } else {"}
{"task_id": "JavaScript/100", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pOsitiVe = [];\n  for (let i = 1; i < n + 1; i++) {\n    pOsitiVe.push(i);\n  }\n  return pOsitiVe;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pOsitiVe = [];\n  for (let i = 1; i < n + 1; i++) {\n    pOsitiVe.push(i);\n  }\n  return pOsitiVe;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pOsitiVe = [];\n  for (let i = 1; i < n + 1; i++) {\n    pOsitiVe.push(i);\n  }\n  return pOsitiVe;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pOsitiVe = [];\n  for (let i = 1; i < n + 1; i++) {\n    pOsitiVe.push(i);\n  }\n  return pOsitiVe;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pOsitiVe = [];\n  for (let i = 1; i < n + 1; i++) {\n    pOsitiVe.push(i);\n  }\n  return pOsitiVe;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\n/*\n  wordsString('Hi, my name is John') == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString('One, two, three, four, five, six') == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\n/*\n  wordsString('Hi, my name is John') == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString('One, two, three, four, five, six') == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst words = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\n/*\n  wordsString('Hi, my name is John') == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString('One, two, three, four, five, six') == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = (s) => {\n  const words = s.split(' ')\n  return words\n}\n\nconst numberOfWords = ("}
{"task_id": "JavaScript/102", "prompt": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let ans = 0;\n  for (let i = x; i <= y; i += 2) {\n    ans += i;\n  }\n  return ans;\n};\n\nconst main = () => {\n  const res = chooseNum(12, 15);\n  console.log(`${res}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n === 0 || m === 0) {\n    return -1;\n  }\n\n  const count = (n + m) / 2;\n  const bits = [];\n\n  while (n > 0 || m > 0) {\n    bits.unshift(n % 2);\n    n = Math.floor(n / 2);\n\n    bits.unshift(m % 2);\n    m = Math.floor(m / 2);\n  }\n\n  return bits.join('');\n};\n\nexport { roundedAvg };\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let uniqueDigits = [];\n  for(let i = 0; i < x.length; i++){\n    let digit = x[i];\n    if(isDigit(digit)){\n      if(!uniqueDigits.includes(digit)){\n        uniqueDigits.push(digit);\n      }\n    }\n  }\n  return uniqueDigits;\n};\n\n/*\n  GiveN a list of PositIve IntegErs x. return a sOrted list of ALL \n  ElemeNts THaT hAsn't ANy eVEN digit.\n  \n  Note: RETUrnD list should be sOrted in increasIng orDEr.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422, 10]\n  */\nconst uniqueDigits = (x) => {\n  let uniqueDigits = [];\n  for(let i = 0; i < x.length; i++){\n    let digit = x[i];\n    if(isDigit(digit)){\n      if(!uniqueDigits.includes(digit)){\n        uniqueDigits.push(digit);\n      }\n    }\n  }\n  return uniqueDigits;\n};\n\n/*\n  GiveN a list of PositIve IntegErs x. return a sOrted list of ALL \n  ElemeNts THaT hAsn't ANy eVEN digit.\n  \n  Note: RETUrnD list should be sOrted in increasIng orDEr.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  [152, 323, 1422, 10]\n  */\nconst uniqueDigits = (x) => {\n  let uniqueDigits = [];\n  for(let i = 0; i < x.length; i++){\n    let digit = x[i];\n    if(isDigit(digit)){\n      if(!uniqueDigits.includes(digit)){\n        uniqueDigits.push(digit);\n      }\n    }\n  }\n  return uniqueDigits;\n};\n\n// console.log(uniqueDigits([15, 33, 1422, 1]));\n// console.log(uniqueDigits([152, 323, 1422, 10]));\n// console.log(uniqueDigits([15, 33, 1422, 1, 10]));\n// console.log(uniqueDigits([15, 33, 1422, 1, 10, 10]));\n\nmodule.exports = {\n  uniqueDigits\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const reversed = arr.reverse()\n  const count = 0\n  const result = []\n\n  reversed.forEach(item => {\n    if (item >= 1 && item <= 9) {\n      count += 1\n      result.push(`${count}`)\n    }\n  })\n\n  return result\n}\n\nmodule.exports = byLength<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const x = n;\n  let f = [1];\n  let i;\n  for (i = 1; i < x; i += 2) {\n    f = f.concat([f[i]]);\n  }\n  for (i = 0; i < x; i += 2) {\n    f = f.concat([f[i]]);\n  }\n  return f;\n}\nconsole.log(f(5));\n\n/* IMPLEMENTATION of the Factorial function */\nconst factorial = (n) => {\n  if (n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\nconsole.log(factorial(5));\n\n/*\n  Factorial2 is the funCtion f THAt Takes n as a parameter,\n  anD ReTuRns a list OF siZe n, such that the VALUE oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst factorial2 = (n) => {\n  if (n === 1) {\n    return 1;\n  } else {\n    return n * factorial2(n - 1);\n  }\n}\nconsole.log(factorial2(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let res = []\n  for (let i = 1; i <= n; i++) {\n    res.push(i)\n    res.push(n - i)\n    if (res[0] % 2 === 0 && res[1] % 2 === 1) {\n      res.shift()\n      res.shift()\n    }\n  }\n  return res\n}\n\nexport default evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const arrLen = arr.length\n  const count = 0\n  let index = 0\n  let tempSum = 0\n  while (index < arrLen) {\n    tempSum += arr[index]\n    if (tempSum > 0) {\n      count += 1\n    }\n    index += 1\n  }\n  return count\n}\n\nconsole.log(countNums([-1, 11, -11]) == 1)\nconsole.log(countNums([1, 1, 2]) == 3)\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2], ..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2],..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    let lastElement = arr.length - 1;\n    let result = true;\n    for (let i = lastElement; i >= 0; i--) {\n        let index = (arr.length - 1) - i;\n        if (arr[index] > arr[index + 1]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\nconst moveOneBall_ = (arr) => {\n    let lastElement = arr.length - 1;\n    let result = true;\n    for (let i = lastElement; i >= 0; i--) {\n        let index = (arr.length - 1) - i;\n        if (arr[index] > arr[index + 1]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\nconst moveOneBall = (arr) => {\n    let lastElement = arr.length - 1;\n    let result = true;\n    for (let i = lastElement; i >= 0; i--) {\n        let index = (arr.length - 1) - i;\n        if (arr[index] > arr[index + 1]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\nconst moveOneBall = (arr) => {\n    let lastElement = arr.length - 1;\n    let result = true;\n    for (let i = lastElement; i >= 0; i--) {\n        let index = (arr.length - 1) - i;\n        if (arr[index] > arr[index + 1]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\nconst moveOneBall = (arr) => {\n    let lastElement = arr.length - 1;\n    let result = true;\n    for (let i = lastElement; i >= 0; i--) {\n        let index = (arr.length - 1) - i;\n        if (arr[index] > arr[index + 1]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\nconst moveOneBall = (arr) => {\n    let lastElement = arr.length - 1;\n    let result = true;\n    for (let i = lastElement; i >= 0; i--) {\n        let index = (arr.length - 1) - i;\n        if (arr[index] > arr[index + 1]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\nconst moveOneBall = (arr) => {\n    let lastElement = arr.length - 1;\n    let result = true;\n    for (let i = lastElement; i >= 0; i--) {\n        let index = (arr.length - 1) - i;\n        if (arr[index] > arr[index + 1]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\nconst moveOneBall = (arr) => {\n    let lastElement = arr.length - 1;\n    let result = true;\n    for (let i = lastElement; i >= 0; i--) {\n        let index = (arr.length - 1) - i;\n        if (arr[index] > arr[index + 1]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\nconst moveOneBall = (arr) => {\n    let lastElement = arr.length - 1;\n    let result = true;\n    for (let i = lastElement; i >= 0; i--) {\n        let index = (arr.length - 1) - i;\n        if (arr[index] > arr[index + 1]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\nconst moveOneBall = (arr) => {\n    let lastElement = arr.length - 1;\n    let result = true;\n    for (let i = lastElement; i >= 0; i--) {\n        let index = (arr.length - 1) - i;\n        if (arr[index] > arr[index + 1]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\nconst moveOneBall = (arr) => {\n    let lastElement = arr.length - 1;\n    let result = true;\n    for (let"}
{"task_id": "JavaScript/110", "prompt": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return false;\n  }\n\n  let i = 0,\n    j = 0,\n    elem1,\n    elem2;\n\n  while (i < lst1.length && j < lst2.length) {\n    elem1 = lst1[i];\n    elem2 = lst2[j];\n\n    if (elem1 < elem2) {\n      lst1[i] = elem2;\n      lst2[j] = elem1;\n      i++;\n    } else if (elem1 > elem2) {\n      lst1[i] = elem1;\n      lst2[j] = elem2;\n      j++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n\n  return true;\n};\n\nexpect(exchange([1, 2, 3, 4], [1, 2, 3, 4])).toEqual(true);\nexpect(exchange([1, 2, 3, 4], [1, 5, 3, 4])).toEqual(false);\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const n = test.length\n  const m = test[0].length\n  const result = {}\n  const result2 = {}\n  let max = 0\n  let max2 = 0\n  let min = 0\n  let min2 = 0\n  let i = 0\n  let j = 0\n  let count = 0\n  let count2 = 0\n  let current = 0\n  let current2 = 0\n  while (i < n) {\n    while (j < m) {\n      if (test[i][j]!== test[i][j]) {\n        result[test[i][j]] = 1\n      }\n      j++\n    }\n    i++\n  }\n  i = 0\n  j = 0\n  while (i < n) {\n    while (j < m) {\n      if (test[i][j]!== test[i][j]) {\n        result2[test[i][j]] = 1\n      }\n      j++\n    }\n    i++\n  }\n  while (i < n) {\n    for (j = 0; j < m; j++) {\n      if (test[i][j]!== test[i][j]) {\n        current += 1\n      }\n    }\n    i++\n  }\n  while (i < n) {\n    for (j = 0; j < m; j++) {\n      if (test[i][j]!== test[i][j]) {\n        current2 += 1\n      }\n    }\n    i++\n  }\n  while (i < n) {\n    for (j = 0; j < m; j++) {\n      if (test[i][j]!== test[i][j]) {\n        count += 1\n      }\n    }\n    i++\n  }\n  while (i < n) {\n    for (j = 0; j < m; j++) {\n      if (test[i][j]!== test[i][j]) {\n        count2 += 1\n      }\n    }\n    i++\n  }\n  while (i < n) {\n    if (current > max) {\n      max = current\n    }\n    if (current2 > max2) {\n      max2 = current2\n    }\n    if (current < min) {\n      min = current\n    }\n    if (current2 < min2) {\n      min2 = current2\n    }\n    i++\n  }\n  return {\n    min: min,\n    max: max,\n    average: (max + min) / 2,\n    count: count,\n    count2: count2\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const length = s.length;\n  let i = 0;\n  let j = length - 1;\n  let temp = \"\";\n  while (i < j) {\n    temp += s[i];\n    i++;\n    j--;\n  }\n  let result = \"\";\n  while (i <= j) {\n    if (s.includes(c, i, j + 1)) {\n      result += temp.slice(i, j + 1);\n      return [result, false];\n    }\n    i++;\n  }\n  result += temp.slice(i, j + 1);\n  return [result, true];\n}\n\nconst isPalindrome = (str) => {\n  let s = str;\n  let n = s.length;\n  for (let i = 0; i < n / 2; i++) {\n    if (s.charAt(i)!== s.charAt(n - i - 1)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = {\n  isPalindrome,\n  reverseDelete\n}\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  return lst.reduce((acc, s) => {\n    acc[s] = acc[s] + 1\n    return acc\n  }, {})\n}\n\nexport default oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let result = 0;\n  const minSum = [];\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    minSum[i] = nums[i];\n    result += nums[i];\n  }\n  const subArr = [];\n  for (let j = 0; j < len; j++) {\n    const left = 0;\n    const right = j + 1;\n    while (right < len) {\n      const cur = minSum[left] + nums[right];\n      subArr.push(cur);\n      if (cur > result) {\n        result = cur;\n      }\n      left++;\n      right++;\n    }\n  }\n  return result;\n};\n\nexport default minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  if(!grid || grid.length === 0) return 0;\n  const [length, width] = grid.length;\n  const [rows, cols] = grid[0].length;\n  let max = 0;\n  for(let i = 0; i < rows; i++){\n    for(let j = 0; j < cols; j++){\n      if(grid[i][j] === 1){\n        const fill = Math.min(1, Math.min(length - i - 1, width - j - 1));\n        max = Math.max(max, fill);\n      }\n    }\n  }\n  return max;\n};\n\nconst recTanguLar = (grid, capacity) => {\n  if(!grid || grid.length === 0) return 0;\n  const [length, width] = grid.length;\n  const [rows, cols] = grid[0].length;\n  let numOfBuckets = 0;\n  for(let i = 0; i < rows; i++){\n    for(let j = 0; j < cols; j++){\n      if(grid[i][j] === 1){\n        numOfBuckets++;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return recTanguLar(grid, capacity - numOfBuckets) + numOfBuckets;\n};\n\nconst recTanguLar = (grid, capacity) => {\n  if(!grid || grid.length === 0) return 0;\n  const [length, width] = grid.length;\n  const [rows, cols] = grid[0].length;\n  let numOfBuckets = 0;\n  for(let i = 0; i < rows; i++){\n    for(let j = 0; j < cols; j++){\n      if(grid[i][j] === 1){\n        numOfBuckets++;\n        grid[i][j] = 0;\n      }\n    }\n  }\n  return recTanguLar(grid, capacity - numOfBuckets) + numOfBuckets;\n};\n\nconst solution = recTanguLar(grid, capacity);\nconsole.log(solution);<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort();\n  let index = 0;\n  for (let i = 0; i < sorted.length; i += 1) {\n    arr[index] = sorted[i];\n    index += 1;\n  }\n  return arr;\n};\n\n// es5\n/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArrayES5 = (arr) => {\n  const sorted = arr.slice().sort();\n  let index = 0;\n  for (let i = 0; i < sorted.length; i += 1) {\n    arr[index] = sorted[i];\n    index += 1;\n  }\n  return arr;\n};\n\nmodule.exports = {\n  sortArray,\n  sortArrayES5\n};\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ')\n  const len = words.length\n  let i = 0\n  const list = []\n  while(i < len) {\n    if(words[i].length > n) {\n      list.push(words[i].substring(0, n))\n      i += 1\n    }\n    else {\n      i += 1\n    }\n  }\n  return list\n}\n\nconst selectWord = (s, n) => {\n  const words = s.split(' ')\n  const len = words.length\n  let i = 0\n  const list = []\n  while(i < len) {\n    if(words[i].length > n) {\n      list.push(words[i])\n      i += 1\n    }\n    else {\n      i += 1\n    }\n  }\n  return list\n}\n\nconst selectLongestWord = (s, n) => {\n  const words = s.split(' ')\n  const len = words.length\n  let i = 0\n  const list = []\n  while(i < len) {\n    if(words[i].length > n) {\n      list.push(words[i])\n      i += 1\n    }\n    else {\n      break\n    }\n  }\n  return list\n}\n\nconst selectLongest = (s) => {\n  const words = s.split(' ')\n  const len = words.length\n  let i = 0\n  const list = []\n  while(i < len) {\n    if(words[i].length > len) {\n      list.push(words[i])\n      i += 1\n    }\n    else {\n      break\n    }\n  }\n  return list\n}\n\nconst selectWordsByLength = (s, n) => {\n  const words = s.split(' ')\n  const len = words.length\n  let i = 0\n  const list = []\n  while(i < len) {\n    if(words[i].length > n) {\n      list.push(words[i])\n      i += 1\n    }\n    else {\n      break\n    }\n  }\n  return list\n}\n\nconst selectAllWords = (s) => {\n  const words = s.split(' ')\n  const len = words.length\n  let i = 0\n  const list = []\n  while(i < len) {\n    list.push(words[i])\n    i += 1\n  }\n  return list\n}\n\nconst containsWord = (s, w) => {\n  const words = s.split(' ')\n  const len = words.length\n  let i = 0\n  while(i < len) {\n    if(words[i] === w) {\n      return true\n    }\n    i += 1\n  }\n  return false\n}\n\nconst selectNthWord = (s, n) => {\n  const words = s.split(' ')\n  const len = words.length\n  let i = 0\n  const list = []\n  while(i < len) {\n    if(i === n) {\n      list.push(words[i])\n      i += 1\n    }\n    else {\n      i += 1\n    }\n  }\n  return list\n}\n\nconst selectLastWord = (s) => {\n  const words = s.split(' ')\n  const len = words.length\n  let i = 0\n  const list = []\n  while(i < len) {\n    list.push(words[i])\n    i += 1\n  }\n  return list\n}\n\nconst containsAllWords = (s, ws) => {\n  const words = s.split(' ')\n  const len = words.length\n  let i = 0\n  const list = []\n  while(i < len) {\n    if(ws.indexOf(words[i]) > -1) {\n      list.push(words[i])\n    }\n    else {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\nconst containsAnyWord = (s, ws) => {\n  const words = s.split(' ')\n  const len = words.length\n  let i = 0\n  const list = []\n  while(i < len) {\n    if(ws.indexOf(words[i]) > -1) {\n      list.push(words[i])\n    }\n    else {\n      break\n    }\n    i += 1\n  }\n  return true\n}\n\nconst selectAllWordsInWords = (s, ws) => {\n  const words = s.split(' ')\n  const len = words.length\n  let i = 0\n  const list = []\n  while(i < len) {\n    if(ws.indexOf(words[i]) > -1) {\n      list.push(words[i])\n    }\n    else {\n      break\n    }\n    i += 1\n  }\n  return list\n}\n\nconst containsAllWordsInWords = (s, ws) => {\n  const words = s.split(' ')\n  const len = words.length\n  let i = 0\n  const list = []\n  while(i < len) {\n    if(ws.indexOf(words[i]) > -1) {\n      list.push(words[i])\n    }\n    else {\n      "}
{"task_id": "JavaScript/118", "prompt": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  if(word === undefined)\n    return undefined;\n  if(word.length === 0)\n    return undefined;\n  var consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  var consonantLength = consonants.length;\n  var vowel = '';\n  for(var i = 0; i < word.length; i++) {\n    var c = word[i];\n    if(consonants.indexOf(c) >= 0) {\n      consonantLength--;\n      if(consonantLength === 0) {\n        return vowel;\n      }\n    } else {\n      if(i === 0) {\n        vowel = c;\n      } else {\n        if(vowel === '') {\n          vowel = c;\n        } else {\n          return vowel;\n        }\n      }\n    }\n  }\n  return vowel;\n}\n\n/*\n  getClosestVowel2(\"yogurt\") ==> \"y\"\n  getClosestVowel2(\"FULL\") ==> \"U\"\n  getClosestVowel2(\"quick\") ==> \"\"\n  getClosestVowel2(\"ab\") ==> \"\"\n  getClosestVowel2(\"\") ==> \"\"\n  */\nconst getClosestVowel2 = (word) => {\n  if(word === undefined)\n    return undefined;\n  if(word.length === 0)\n    return undefined;\n  var consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  var consonantLength = consonants.length;\n  var vowel = '';\n  for(var i = 0; i < word.length; i++) {\n    var c = word[i];\n    if(consonants.indexOf(c) >= 0) {\n      consonantLength--;\n      if(consonantLength === 0) {\n        return vowel;\n      }\n    } else {\n      if(i === 0) {\n        vowel = c;\n      } else {\n        if(vowel === '') {\n          vowel = c;\n        } else {\n          return vowel;\n        }\n      }\n    }\n  }\n  return vowel;\n}\n\nconst isVowel = (c) => {\n  if(c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n    return true;\n  }\n  return false;\n}\n\nconst hasVowel = (word) => {\n  if(word.length === 0)\n    return false;\n  var consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  var consonantLength = consonants.length;\n  var vowel = '';\n  for(var i = 0; i < word.length; i++) {\n    var c = word[i];\n    if(consonants.indexOf(c) >= 0) {\n      consonantLength--;\n      if(consonantLength === 0) {\n        return true;\n      }\n    } else {\n      if(i === 0) {\n        vowel = c;\n      } else {\n        if(vowel === '') {\n          vowel = c;\n        } else {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nconst hasVowel2 = (word) => {\n  if(word.length === 0)\n    return false;\n  var consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  var consonantLength = consonants.length;\n  var vowel = '';\n  for(var i = 0; i < word.length; i++) {\n    var c = word[i];\n    if(consonants.indexOf(c) >= 0) {\n      consonantLength--;\n      if(consonantLength === 0) {\n        return true;\n      }\n    } else {\n      if(i === 0) {\n        vowel = c;\n      } else {\n        if(vowel === '') {\n          vowel = c;\n        } else {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\nconst hasVowel3 = (word) => {\n  if(word.length === 0)\n    return false;\n  var consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n"}
{"task_id": "JavaScript/119", "prompt": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let result = lst[0]\n  let i = 1\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      result += lst[i]\n      i++\n    } else if (lst[i] === ')') {\n      if (i === 1) return 'No'\n      if (result[i - 2]!== '(') return 'No'\n      result = result.slice(0, i - 2) + result[i] + result.slice(i + 1)\n      i = i - 1\n    }\n  }\n  if (result.slice(0, 1)!== '(') return 'No'\n  if (result[result.length - 1]!== ')') return 'No'\n  return 'Yes'\n}\n\nconsole.log(matchParens(['()', ')', '())', '())()', '((())))']))\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    let res = arr.slice(0, k);\n    let sorted = arr.slice().sort((a, b) => b - a);\n    let max = arr[0];\n    for (let i = 0; i < sorted.length; i++) {\n        if (sorted[i] > max) {\n            max = sorted[i];\n            res = [max];\n        } else if (sorted[i] === max) {\n            res.push(max);\n        }\n    }\n    return res;\n};\n\n/*\n  Maximum Sub Array\n\n  Given an array of n positive integers and a positive integer s, \n  find the contiguous sub array of largest sum which starts from index i \n  of the array and end at index j of the array, where i ≤ j.\n  \n  Example 1:\n\n    Input: arr = [1, 3, -1, -4, 5, 3, 1], s = 7\n    Output: [3, 3, 5, 5]\n\n  Example 2:\n\n    Input: arr = [-1, -1, 2, 2], s = 3\n    Output: [-1, -1, 2, 2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 10000].\n      2. The integers in the array will be in the range of [1, 10000].\n      3. The sum of the integers will be in the range of [1, 10000].\n      4. 0 <= s <= len(arr)\n  */\nconst maxSubArray = (arr, s) => {\n    let res = [];\n    let i = 0;\n    let j = 0;\n    let maxSum = 0;\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum = 0;\n        while (j < arr.length && sum < s) {\n            sum += arr[j];\n            j++;\n        }\n        if (sum >= s) {\n            res.push(sum);\n        }\n    }\n    return res;\n};\n\nmodule.exports = {\n    maximum,\n    maxSubArray\n};\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const l = lst.length;\n  let result = 0;\n  for (let i = 0; i < l; i += 1) {\n    result += lst[i];\n  }\n  return result;\n};\n\nconsole.log(solution([3, 3, 3, 3, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const max = arr.length - 1;\n  let sum = 0;\n  for (let i = 0; i <= max; i++) {\n    sum += arr[i];\n    if (sum >= k) {\n      return i;\n    }\n  }\n};\n\nmodule.exports = addElements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let list = [];\n  let prev = 1;\n  let current = 2;\n  while (current < n) {\n    if (prev % current === 0) {\n      list.push(current);\n      prev = current;\n    }\n    current = current * 3 + 1;\n  }\n  return list;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNEd\n  AS foLlOWs: Start witH anY Positive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, the NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  let list = [];\n  let prev = n;\n  let current = n + 1;\n  while (current < (Math.pow(2, n))) {\n    if (prev % current === 0) {\n      list.push(current);\n      prev = current;\n    }\n    current = current * 3 + 1;\n  }\n  return list;\n};\n\nconst getCollatz = (n) => {\n  if (n < 3) {\n    return [n];\n  }\n  if (n % 2 === 0) {\n    return getEvenCollatz(n);\n  }\n  return getOddCollatz(n);\n};\n\nconst getCollatzSequence = (n) => {\n  let list = getCollatz(n);\n  list.unshift(1);\n  return list;\n};\n\nconst checkSequence = (sequence) => {\n  let first = sequence[0];\n  for (let i = 1; i < sequence.length; i++) {\n    if (sequence[i]!== first * 3 + 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getCollatzSequenceLength = (n) => {\n  return getCollatzSequence(n).length;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNEd\n  AS foLlOWs: Start witH anY Positive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, the NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getCollatzSequenceLength = (n) => {\n  return getCollatzSequence(n).length;\n};\n\nconst getCollatzSequence = (n) => {\n  let list = getCollatzSequenceLength(n);\n  let sequence = getCollatzSequence(n);\n  return sequence;\n};\n\nmodule.exports = {\n  getCollatz,\n  getCollatzSequence,\n  getCollatzSequenceLength,\n  checkSequence\n};<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const d = parseDate(date);\n  if (isNaN(d)) {\n    return false;\n  }\n  const { month, day, year } = d;\n  return (\n    month >= 1 && month <= 12\n    && day >= 1 && day <= 31\n    && year >= 1900\n    && year <= 2020\n  );\n};\n\nconst isToday = (date) => {\n  const d = parseDate(date);\n  if (isNaN(d)) {\n    return false;\n  }\n  const { month, day, year } = d;\n  return (\n    month === moment().month()\n    && day === moment().date()\n    && year === moment().year()\n  );\n};\n\nconst isTomorrow = (date) => {\n  const d = parseDate(date);\n  if (isNaN(d)) {\n    return false;\n  }\n  const { month, day, year } = d;\n  return (\n    month === moment().add(1,'months').month()\n    && day === moment().add(1, 'days').date()\n    && year === moment().add(1, 'days').year()\n  );\n};\n\nconst isYesterday = (date) => {\n  const d = parseDate(date);\n  if (isNaN(d)) {\n    return false;\n  }\n  const { month, day, year } = d;\n  return (\n    month === moment().subtract(1,'months').month()\n    && day === moment().subtract(1, 'days').date()\n    && year === moment().subtract(1, 'days').year()\n  );\n};\n\nconst parseDate = (date) => {\n  const result = moment(date, 'YYYY-MM-DD', 'en-US');\n  return {\n    month: result.month(),\n    day: result.date(),\n    year: result.year(),\n  };\n};\n\nmodule.exports = {\n  isValidDate,\n  isToday,\n  isTomorrow,\n  isYesterday,\n  validDate,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1, ... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  let result = [];\n  for (let i = 0; i < words.length; i++) {\n    result.push(words[i].toUpperCase());\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let isSorted = true;\n  if (lst.length === 1) {\n    return isSorted;\n  }\n  let prev = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < prev) {\n      isSorted = false;\n      break;\n    }\n    prev = lst[i];\n  }\n  return isSorted;\n};\n\nmodule.exports = isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (!interval1 ||!interval2) {\n    return \"NO\";\n  }\n\n  if (interval1[0] > interval2[1]) {\n    return \"NO\";\n  }\n\n  if (interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n\n  const start = interval1[0];\n  const end = interval1[1];\n\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n\n  const max = Math.max(start, end);\n  const min = Math.min(start, end);\n\n  const max2 = Math.max(start2, end2);\n  const min2 = Math.min(start2, end2);\n\n  if (max < min || max2 < min2) {\n    return \"NO\";\n  }\n\n  const length = max - min;\n\n  const num = Math.floor(length / 2);\n  const remainder = length % 2;\n\n  if (remainder === 0) {\n    return \"YES\";\n  }\n\n  return \"NO\";\n};\n\nconst test = (intersection, interval, expected) => {\n  const actual = intersection(interval);\n  if (actual === expected) {\n    console.log(\"PASS\");\n  } else {\n    console.log(\"FAIL\");\n  }\n  console.log(`The intersection of ${interval[0]} and ${interval[1]} is ${actual}`);\n};\n\nconst main = () => {\n  test(intersection((-3, -1), (-5, 5)), ((-3, -1), (-5, 5)), \"YES\");\n  test(intersection((-3, -1), (-5, 5)), ((-1, -2), (-3, -2)), \"YES\");\n  test(intersection((-3, -1), (-5, 5)), ((-1, 1), (-2, 1)), \"YES\");\n  test(intersection((-3, -1), (-5, 5)), ((1, 2), (2, 3)), \"YES\");\n  test(intersection((-3, -1), (-5, 5)), ((1, 2), (3, 4)), \"YES\");\n  test(intersection((-3, -1), (-5, 5)), ((1, 2), (4, 5)), \"YES\");\n  test(intersection((-3, -1), (-5, 5)), ((2, 3), (3, 4)), \"YES\");\n  test(intersection((-3, -1), (-5, 5)), ((2, 3), (4, 5)), \"YES\");\n  test(intersection((-3, -1), (-5, 5)), ((3, 4), (4, 5)), \"YES\");\n  test(intersection((-3, -1), (-5, 5)), ((4, 5), (5, 6)), \"NO\");\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    let sum = 0;\n    arr.forEach((e, i) => {\n        sum += e * (i + 1)\n    })\n    return sum\n}\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Product Of all signes of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -12\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    let sum = 1;\n    arr.forEach((e, i) => {\n        sum *= e * (i + 1)\n    })\n    return sum\n}\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Product oF all signs of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -12\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    let sum = 1;\n    arr.forEach((e, i) => {\n        sum *= e * (i + 1)\n    })\n    return sum\n}\n\nmodule.exports = {\n    prodSigns\n}\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let dp = [],\n    lst = [],\n    gridlen = grid.length;\n\n  for (let i = 0; i < gridlen; i++) {\n    let gridline = grid[i];\n    let l = gridline.length;\n\n    if (l === k) {\n      dp.push(gridline);\n      lst.push(gridline);\n      continue;\n    }\n\n    let lst_b = [];\n    let lst_a = [];\n\n    for (let j = 0; j < l; j++) {\n      let v = gridline[j];\n      if (lst.indexOf(v) < 0) {\n        lst_a.push(v);\n      } else {\n        lst_b.push(v);\n      }\n    }\n\n    let path = dfs(gridline, lst_a, lst_b, k);\n\n    lst_a = path.lst_a;\n    lst_b = path.lst_b;\n\n    lst_a.unshift(gridline);\n    lst_b.unshift(gridline);\n\n    dp.push(...lst_a);\n    lst.push(...lst_b);\n  }\n\n  return dp;\n};\n\nexport { minPath };\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 1\n    else return fib(n - 1) + fib(n - 2) + fib(n + 1)\n  }\n  return [fib(1), fib(2), fib(3)]\n}\n\nconsole.log(tri(5))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n    let i = 1,\n        d = 1;\n    while (n / i > 0) {\n        d = d * 10 + n / i % 10;\n        i = i * 10;\n    }\n    if (d % 10 === 0) {\n        return 0;\n    }\n    return d;\n}\n\n//  ReTurN 1 If AlL digits are odd.\nconst isOdd = (n) => {\n    return n % 2 === 1;\n}\n\n//  ReTurN 2 If AlL digits are even.\nconst isEven = (n) => {\n    return n % 2 === 0;\n}\n\n//  ReTurN 3 If n is odd.\nconst isOddOrEven = (n) => {\n    return n % 2 === 1 || n % 2 === 0;\n}\n\n//  ReTurN 4 If n is even.\nconst isOddOrEven2 = (n) => {\n    return n % 2 === 0 || n % 2 === 1;\n}\n\n//  ReTurN 5 If n is a power of 2.\nconst isPowerOfTwo = (n) => {\n    return n > 0 && n % 2 === 1;\n}\n\n//  ReTurN 6 If n is a power of 3.\nconst isPowerOfThree = (n) => {\n    return n > 0 && n % 3 === 1;\n}\n\n//  ReTurN 7 If n is a power of 4.\nconst isPowerOfFour = (n) => {\n    return n > 0 && n % 4 === 1;\n}\n\n//  ReTurN 8 If n is a power of 5.\nconst isPowerOfFive = (n) => {\n    return n > 0 && n % 5 === 1;\n}\n\n//  ReTurN 9 If n is a power of 6.\nconst isPowerOfSix = (n) => {\n    return n > 0 && n % 6 === 1;\n}\n\n//  ReTurN 10 If n is a power of 7.\nconst isPowerOfSeven = (n) => {\n    return n > 0 && n % 7 === 1;\n}\n\n//  ReTurN 11 If n is a power of 8.\nconst isPowerOfEight = (n) => {\n    return n > 0 && n % 8 === 1;\n}\n\n//  ReTurN 12 If n is a power of 9.\nconst isPowerOfNine = (n) => {\n    return n > 0 && n % 9 === 1;\n}\n\n//  ReTurN 13 If n is a power of 10.\nconst isPowerOfTen = (n) => {\n    return n > 0 && n % 10 === 1;\n}\n\n//  ReTurN 14 If n is a power of 11.\nconst isPowerOfEleven = (n) => {\n    return n > 0 && n % 11 === 1;\n}\n\n//  ReTurN 15 If n is a power of 12.\nconst isPowerOfTwelve = (n) => {\n    return n > 0 && n % 12 === 1;\n}\n\n//  ReTurN 16 If n is a power of 13.\nconst isPowerOfThirteen = (n) => {\n    return n > 0 && n % 13 === 1;\n}\n\n//  ReTurN 17 If n is a power of 14.\nconst isPowerOfFourteen = (n) => {\n    return n > 0 && n % 14 === 1;\n}\n\n//  ReTurN 18 If n is a power of 15.\nconst isPowerOfFifteen = (n) => {\n    return n > 0 && n % 15 === 1;\n}\n\n//  ReTurN 19 If n is a power of 16.\nconst isPowerOfSixteen = (n) => {\n    return n > 0 && n % 16 === 1;\n}\n\n//  ReTurN 20 If n is a power of 17.\nconst isPowerOfSeventeen = (n) => {\n    return n > 0 && n % 17 === 1;\n}\n\n//  ReTurN 21 If n is a power of 18.\nconst isPowerOfEighteen = (n) => {\n    return n > 0 && n % 18 === 1;\n}\n\n//  ReTurN 22 If n is a power of 19.\nconst isPowerOfNineteen = (n) => {\n    return n > 0 && n % 19 === 1;\n}\n\n//  ReTurN 23 If n is a power of 20.\nconst isPowerOfTwenty = (n) => {\n    return n > 0 && n % 20 === 1;\n}\n\n//  ReTurN 24 If n is a power of 21.\nconst isPowerOfTwentyOne = (n) => {\n    return n > 0 && n % 21 === 1;\n}\n\n//  ReTurN 25 If n is a power of 22.\nconst isPowerOfTwentyTwo = (n) => {\n    return n > 0 && n % 22 === 1;\n}\n\n//  ReTurN 26 If n is a power of 23.\nconst isPowerOfTwentyThree = (n) => {\n    return n > 0 && n % 23 === 1;\n}\n\n//  ReTurN 27 If n is a power of 24.\nconst isPowerOfTwentyFour = (n) => {\n    return n > 0 && n % 24 === 1;\n}\n\n//  ReTurN 28 If n is a power of 25.\nconst isPowerOfTwentyFive = (n) => {\n    return n > 0 && n % 25 === 1;\n}\n\n//  ReTurN 29 If n is a power of 26.\nconst isPowerOfTwentySix = (n) => {\n    return n > 0 && n % 26 === 1;\n}\n\n//  ReTurN 30 If n is a power of 27.\nconst isPowerOfTwentySeven = (n) => {\n    return n > 0 && n % 27 === 1;\n}\n\n//  ReTurN 31 If n is a power of 28.\nconst isPowerOfTwentyEight = (n) => {\n    return n > 0 && n % 28 === 1;\n}\n\n//  ReTurN"}
{"task_id": "JavaScript/132", "prompt": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n\tlet b = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (string[i] == '[' && b == 0) {\n\t\t\tb++;\n\t\t} else if (string[i] == ']' && b > 0) {\n\t\t\tb--;\n\t\t}\n\t}\n\tif (b > 0) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n};\n\nlet functIon = (string) => {\n\tif (string.length > 2) {\n\t\tlet stringArray = string.split(' ');\n\t\tlet newString ='';\n\t\tfor (let i = 0; i < stringArray.length - 1; i++) {\n\t\t\tif (stringArray[i] == '[' && stringArray[i + 1] == ']') {\n\t\t\t\tnewString += '[' + ']' +'';\n\t\t\t} else {\n\t\t\t\tnewString += stringArray[i] +'';\n\t\t\t}\n\t\t}\n\t\treturn isNested(newString);\n\t} else {\n\t\treturn isNested(string);\n\t}\n};\n\nconsole.log(functIon('[[]]'));\nconsole.log(functIon('[]]]]]]][[[[[]'));\nconsole.log(functIon('[][]'));\nconsole.log(functIon('[]'));\nconsole.log(functIon('[[][]]'));\nconsole.log(functIon('[[]][['));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, current) => prev + current, 0)\n  const sqSum = (previous) => previous * previous\n  return sum\n   .toFixed(2)\n   .toLocaleString(undefined, {maximumFractionDigits: 2})\n}\n\nexport default sumSquares\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    if(txt === null) {\n        return false;\n    }\n    txt = txt.trim();\n    if(txt.length === 0) {\n        return false;\n    }\n    if(!isAlpha(txt[txt.length - 1])) {\n        return false;\n    }\n    if(txt.match(/[a-z]/i) === null) {\n        return false;\n    }\n    return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let ret = -1;\n  if (arr.length > 0) {\n    const sortedArr = arr.sort((a, b) => a - b);\n    const diff = sortedArr[0] - arr[0];\n    if (diff < 0) {\n      ret = 0;\n    } else if (diff === 0) {\n      ret = arr.length - 1;\n    }\n  }\n  return ret;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestSmallestInteger(lst);\n  const smallest = smallestSmallestInteger(lst);\n  if (largest === null) {\n    return (null, null);\n  }\n  if (smallest === null) {\n    return (largest, null);\n  }\n  return (largest, smallest);\n};\n\nconst largestSmallestInteger = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  return largestSmallestIntegers(lst).v;\n};\n\nconst smallestSmallestInteger = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  return largestSmallestIntegers(lst).w;\n};\n\nconst smallestSmallestIntegers = (lst) => {\n  const largest = largestSmallestInteger(lst);\n  const smallest = smallestSmallestInteger(lst);\n  if (largest === null) {\n    return (null, null);\n  }\n  if (smallest === null) {\n    return (largest, null);\n  }\n  return (largest, smallest);\n};\n\nconst smallestSmallestIntegers = (lst) => {\n  const largest = largestSmallestIntegers(lst).v;\n  const smallest = smallestSmallestIntegers(lst).w;\n  if (largest === null) {\n    return (null, null);\n  }\n  if (smallest === null) {\n    return (largest, null);\n  }\n  return (largest, smallest);\n};\n\nexport {\n  largestSmallestIntegers,\n  largestSmallestInteger,\n  smallestSmallestInteger,\n  smallestSmallestIntegers,\n  smallestSmallestIntegers,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n  if (isNaN(a) && isNaN(b)) {\n    return a === b? 0 : a > b? 1 : -1\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return a > b? 1 : -1\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return a > b? 1 : -1\n  }\n  if (typeof a === \"string\") {\n    return a > b? 1 : -1\n  }\n  if (typeof b === \"string\") {\n    return a > b? -1 : 1\n  }\n  return a > b? 1 : -1\n}\n\nconst str = \"12345\"\nconst num = 12345\nconst str2 = \"abc\"\nconst num2 = 123\n\nconsole.log(compareOne(str, str2))\nconsole.log(compareOne(str, num))\nconsole.log(compareOne(str, str2))\nconsole.log(compareOne(num, str2))\nconsole.log(compareOne(num, str))\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += parseInt(i)\n  }\n  return sum % 2 === 0\n}\n\nexport default isEqualToSumEven\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const factorial = (n) => n < 1? 1 : n * specialFactorial(n - 1);\n  const fibonacci = (n) => n < 2? 1 : fibonacci(n - 1) + fibonacci(n - 2);\n  const gcd = (a, b) => a > b? gcd(b, a % b) : gcd(a % b, b);\n  const mod = (n, mod) => n % mod;\n  const result = n;\n  const l = n % mod;\n  const r = n;\n  for (let i = 0; i < mod; i++) {\n    const p = l - r;\n    const q = r - l;\n    result += factorial(p) * fibonacci(q);\n    l = mod;\n    r = n - p;\n  }\n  return result;\n};\n\n/*\nThe function is defIned as:\n\nf(n) = f(n-1) + f(n-2)\n\nf(1) = 1\nf(2) = 1\n\nThe function will receive an integer as input and should return the sum of the\nfirst n fibonacci numbers.\n*/\nconst fibonacciSum = (n) => {\n  const f = (n) => n < 2? 1 : fibonacci(n - 1) + fibonacci(n - 2);\n  const result = n;\n  for (let i = 2; i <= n; i++) {\n    result += f(i);\n  }\n  return result;\n};\n\n/*\nThe function is defIned as:\n\nf(n) = f(n-1) * f(n-2)\n\nf(1) = 1\nf(2) = 1\n\nThe function will receive an integer as input and should return the sum of the\nfirst n fibonacci numbers squared.\n*/\nconst fibonacciSumSquared = (n) => {\n  const f = (n) => n < 2? 1 : fibonacci(n - 1) * fibonacci(n - 2);\n  const result = n;\n  for (let i = 2; i <= n; i++) {\n    result += f(i);\n  }\n  return result;\n};\n\n/*\nThe function is defIned as:\n\nf(n) = f(n-1) * f(n-2) * f(n-3) *... * f(1) * f(2) *... * f(n)\n\nf(1) = 1\nf(2) = 1\n\nThe function will receive an integer as input and should return the sum of the\nfirst n fibonacci numbers raised to the power of their values.\n*/\nconst fibonacciSumToPower = (n) => {\n  const f = (n) => n < 2? 1 : fibonacci(n - 1) * fibonacci(n - 2) * fibonacci(n - 3);\n  const result = n;\n  for (let i = 2; i <= n; i++) {\n    result += f(i);\n  }\n  return result;\n};\n\n/*\nThe function is defIned as:\n\nf(n) = f(n-1) * f(n-2) * f(n-3) *... * f(1) * f(2) *... * f(n)\n\nf(1) = 1\nf(2) = 1\n\nThe function will receive an integer as input and should return the sum of the\nfirst n fibonacci numbers raised to the power of their values squared.\n*/\nconst fibonacciSumToPowerSquared = (n) => {\n  const f = (n) => n < 2? 1 : fibonacci(n - 1) * fibonacci(n - 2) * fibonacci(n - 3);\n  const result = n;\n  for (let i = 2; i <= n; i++) {\n    result += f(i);\n  }\n  return result;\n};\n\n/*\nThe function is defIned as:\n\nf(n) = f(n-1) * f(n-2) * f(n-3) *... * f(1) * f(2) *... * f(n)\n\nf(1) = 1\nf(2) = 1\n\nThe function will receive an integer as input and should return the sum of the\nfirst n fibonacci numbers raised to the power of their values cubed.\n*/\nconst fibonacciSumToPowerCubed = (n) => {\n  const f = (n) => n < 2? 1 : fibonacci(n - 1) * fibonacci(n - 2) * fibonacci(n - 3);\n  const result = n;\n  for (let i = 2; i <= n; i++) {\n    result += f(i);\n  }\n  return result;\n};\n\nconst input = parseInt(prompt(\"Enter a number\"));\n\nconsole.log(specialFactorial(input));\nconsole.log(fibonacciSum(input));\nconsole.log(fibonacciSumSquared(input));\nconsole.log(fibonacciSumToPower(input));\nconsole.log(fibonacciSumToPowerSquared(input));\nconsole.log(fibonacciSumToPowerCubed(input));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let i = 0,\n      n = 0,\n      spaces = [],\n      replaced = '';\n\n  while (i < text.length) {\n    if (text.charAt(i) ==='') {\n      spaces.push(text.charAt(i));\n    } else {\n      replaced += spaces.join('');\n      spaces = [];\n      n++;\n    }\n    i++;\n  }\n  replaced += spaces.join('');\n  return replaced;\n};\n\nconst getWordCount = (text) => {\n  let words = text.split(' '),\n      n = 0;\n\n  words.forEach(function(w) {\n    if (w.length > 0) {\n      n++;\n    }\n  });\n  return n;\n};\n\nconst isWordInDictionary = (word, dictionary) => {\n  return dictionary.includes(word);\n};\n\nconst isStringInDictionary = (s, dictionary) => {\n  return dictionary.includes(s);\n};\n\nconst isWordInDictionaryArray = (word, dictionary) => {\n  return dictionary.includes(word);\n};\n\nconst isStringInDictionaryArray = (s, dictionary) => {\n  return dictionary.includes(s);\n};\n\nconst isValidWord = (word) => {\n  if (word.length > 0 && word.length <= 5) {\n    return isWordInDictionary(word, words) || isStringInDictionary(word, words) || isWordInDictionaryArray(word, words) || isStringInDictionaryArray(word, words);\n  }\n};\n\nconst isValidString = (s) => {\n  if (s.length > 0 && s.length <= 5) {\n    return isStringInDictionary(s, words) || isStringInDictionaryArray(s, words);\n  }\n};\n\nconst isValidWordArray = (w) => {\n  return w.every(isValidWord);\n};\n\nconst isValidStringArray = (s) => {\n  return s.every(isValidString);\n};\n\nconst containsValidWord = (text) => {\n  let words = text.split(' '),\n      i = 0,\n      n = 0,\n      word = '',\n      isValid = false;\n\n  while (i < text.length) {\n    if (isValidWord(word)) {\n      isValid = true;\n    } else if (isValidString(word)) {\n      isValid = true;\n    } else if (isValidWordArray(word)) {\n      isValid = true;\n    } else if (isValidStringArray(word)) {\n      isValid = true;\n    } else {\n      isValid = false;\n      break;\n    }\n    word = words[i];\n    i++;\n    n++;\n  }\n  return isValid;\n};\n\nconst isValidWordArray = (w) => {\n  return w.every(isValidWord);\n};\n\nconst getWordCount = (text) => {\n  let words = text.split(' '),\n      n = 0;\n\n  words.forEach(function(w) {\n    if (w.length > 0) {\n      n++;\n    }\n  });\n  return n;\n};\n\nconst isWordInDictionary = (word, dictionary) => {\n  return dictionary.includes(word);\n};\n\nconst isStringInDictionary = (s, dictionary) => {\n  return dictionary.includes(s);\n};\n\nconst isWordInDictionaryArray = (word, dictionary) => {\n  return dictionary.includes(word);\n};\n\nconst isStringInDictionaryArray = (s, dictionary) => {\n  return dictionary.includes(s);\n};\n\nconst isValidWord = (word) => {\n  if (word.length > 0 && word.length <= 5) {\n    return isWordInDictionary(word, words) || isStringInDictionary(word, words) || isWordInDictionaryArray(word, words) || isStringInDictionaryArray(word, words);\n  }\n};\n\nconst isValidString = (s) => {\n  if (s.length > 0 && s.length <= 5) {\n    return isStringInDictionary(s, words) || isStringInDictionaryArray(s, words);\n  }\n};\n\nconst isValidWordArray = (w) => {\n  return w.every(isValidWord);\n};\n\nconst containsValidWord = (text) => {\n  let words = text.split(' '),\n      i = 0,\n      n = 0,\n      word = '',\n      isValid = false;\n\n  while (i < text.length) {\n    if (isValidWord(word)) {\n      isValid = true;\n    } else if (isValidString(word)) {\n      isValid = true;\n    } else if (isValidWordArray(word)) {\n      isValid = true;\n    } else if (isValidStringArray(word)) {\n      isValid = true;\n    } else {\n      isValid = false;\n      break;\n    }\n    word = words[i];\n    i++;\n    n++;\n  }\n  return isValid;\n};\n\nconst getWordCount = (text) => {\n  let words = text.split(' '),\n      n = 0;\n\n  words.forEach(function(w) {\n    if (w.length > 0) {\n      n++;\n    }\n  });\n  return n;\n};\n\nconst isWordInDictionary = (word, dictionary) => {\n  return dictionary.includes(word);\n};\n\nconst isStringInDictionary = (s, dictionary) => {\n  return dictionary.includes(s);\n};\n\nconst isWordInDictionaryArray = (word, dictionary) => {\n  return dictionary.includes(word"}
{"task_id": "JavaScript/141", "prompt": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n\t//console.log(file_name);\n\treturn (file_name.match(/[a-zA-Z]+[\\s]\\.(txt|exe|dll)$/)!== null)? 'Yes' : 'No';\n}\n\n/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  the string repResEntinG the value of the string 'file_name'\n  The string can be empty, and the return value will be an empty string.\n  */\nconst getFileName = (file_name) => {\n\treturn file_name.match(/[a-zA-Z]+[\\s]\\.(txt|exe|dll)$/)!== null? file_name.replace(/[a-zA-Z]+[\\s]\\.(txt|exe|dll)$/, '') : '';\n}\n\n/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  the string repResEntinG the value of the string 'file_name'\n  The string can be empty, and the return value will be an empty string.\n  */\nconst getFileNameWithoutExt = (file_name) => {\n\treturn file_name.match(/[a-zA-Z]+[\\s]\\.(txt|exe|dll)$/)!== null? file_name.replace(/[a-zA-Z]+[\\s]\\.(txt|exe|dll)$/, '') : '';\n}\n\n/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  the string repResEntinG the value of the string 'file_name'\n  The string can be empty, and the return value will be an empty string.\n  */\nconst getFileNameExt = (file_name) => {\n\treturn file_name.match(/[a-zA-Z]+[\\s]\\.(txt|exe|dll)$/)!== null? file_name.replace(/[a-zA-Z]+[\\s]\\.(txt|exe|dll)$/, '') : '';\n}\n\n/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  the string repResEntinG the value of the string 'file_name'\n  The string can be empty, and the return value will be an empty string.\n  */\nconst getFileExt = (file_name) => {\n\treturn file_name.match(/[a-zA-Z]+[\\s]\\.(txt|exe|dll)$/)!== null? file_name.replace(/[a-zA-Z]+[\\s]\\.(txt|exe|dll)$/, '') : '';\n}\n\nconst isValidFileName = (file_name) => {\n\treturn fileNameCheck(file_name);\n}\n\nconst isValidFileNameWithoutExt = (file_name) => {\n\treturn fileNameCheck(getFileName(file_name));\n}\n\nconst isValidFileNameExt = (file_name) => {\n\treturn fileNameCheck(getFileNameExt(file_name));\n}\n\nconst isValidFileNameWithoutExtOrExt = (file_name) => {\n\treturn fileNameCheck(getFileNameWithoutExt(file_name)) || fileNameCheck(getFileExt(file_name));\n}\n\nmodule.exports = {\n\tfileNameCheck,\n\tgetFileName,\n\tgetFileNameWithoutExt,\n\tgetFileNameExt,\n\tgetFileExt,\n\tisValidFileName,\n\tisValidFileNameWithoutExt,\n\tisValidFileNameExt,\n\tisValidFileNameWithoutExtOrExt\n};<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const sqSum = (num) => {\n    return num * num;\n  };\n  const squareSum = (num) => {\n    return num * num;\n  };\n  const sum = (lst) => {\n    let sum = 0;\n    lst.forEach((num) => {\n      sum += num;\n    });\n    return sum;\n  };\n  const numSquares = (lst) => {\n    let numSquares = 0;\n    lst.forEach((num) => {\n      numSquares += squareSum(num);\n    });\n    return numSquares;\n  };\n  const max = (lst) => {\n    let max = -Infinity;\n    lst.forEach((num) => {\n      if (num > max) {\n        max = num;\n      }\n    });\n    return max;\n  };\n  const min = (lst) => {\n    let min = Infinity;\n    lst.forEach((num) => {\n      if (num < min) {\n        min = num;\n      }\n    });\n    return min;\n  };\n  const minmax = (lst) => {\n    return [min(lst), max(lst)];\n  };\n  const isMultiOfThree = (num) => {\n    return num % 3 === 0;\n  };\n  const isNotMultiOfThree = (num) => {\n    return num % 3!== 0;\n  };\n  const numNotMultiOfThree = (lst) => {\n    return lst.filter((num) => {\n      return isNotMultiOfThree(num);\n    });\n  };\n  const multiOfThree = (lst) => {\n    return lst.filter((num) => {\n      return isMultiOfThree(num);\n    });\n  };\n  const maxMultiOfThree = (lst) => {\n    return max(numNotMultiOfThree(lst));\n  };\n  const maxMultiOfThreeAndThree = (lst) => {\n    const [max, multiOfThree] = minmax(multiOfThree(lst));\n    return maxMultiOfThree(multiOfThree(lst));\n  };\n  const square = (num) => {\n    return num * num;\n  };\n  const numSquaresOfMultiOfThree = (lst) => {\n    return lst.map(square).filter((num) => {\n      return isMultiOfThree(num);\n    });\n  };\n  const numSquaresOfMultiOfThreeAndThree = (lst) => {\n    return numNotMultiOfThree(lst).map(square).filter((num) => {\n      return isMultiOfThree(num);\n    });\n  };\n  const numSquaresOfMultiOfThreeAndThreeAndThree = (lst) => {\n    return lst.map(square).filter((num) => {\n      return isNotMultiOfThree(num);\n    }).reduce(sumSquares, 0);\n  };\n  const numSquaresOfMultiOfThreeAndThreeAndThreeAndThree = (lst) => {\n    return lst.reduce(sumSquares, 0);\n  };\n  const numSquaresOfMultiOfThreeAndThreeAndThreeAndThree = (lst) => {\n    return lst.reduce(sumSquares, 0);\n  };\n  const numSquaresOfMultiOfThreeAndThreeAndThreeAndThree = (lst) => {\n    return lst.reduce(sumSquares, 0);\n  };\n  const numSquaresOfMultiOfThreeAndThreeAndThreeAndThree = (lst) => {\n    return lst.reduce(sumSquares, 0);\n  };\n  const numSquaresOfMultiOfThreeAndThreeAndThreeAndThree = (lst) => {\n    return lst.reduce(sumSquares, 0);\n  };\n  const numSquaresOfMultiOfThreeAndThreeAndThreeAndThree = (lst) => {\n    return lst.reduce(sumSquares, 0);\n  };\n  const numSquaresOfMultiOfThreeAndThreeAndThreeAndThree = (lst) => {\n    return lst.reduce(sumSquares, 0);\n  };\n  const numSquaresOfMultiOfThreeAndThreeAndThreeAndThree = (lst) => {\n    return lst.reduce(sumSquares, 0);\n  };\n  const numSquaresOfMultiOfThreeAndThreeAndThreeAndThree = (lst) => {\n    return lst.reduce(sumSquares, 0);\n  };\n  const numSquaresOfMultiOfThreeAndThreeAndThreeAndThree = (lst) => {\n    return lst.reduce(sumSquares, 0);\n  };\n  const numSquaresOfMultiOfThreeAndThreeAndThreeAndThree = (lst) => {\n    return lst.reduce(sumSquares, 0);\n  };\n  const numSquaresOfMultiOfThreeAndThreeAndThreeAndThree = (lst) => {\n    return lst.reduce(sumSquares, 0);\n  };\n  const numSquaresOfMultiOfThreeAndThreeAndThreeAndThree = (lst) => {\n    return lst.reduce(sumSquares, 0);\n  };\n  const numSquaresOfMultiOfThreeAndThreeAndThreeAndThree = (lst) => {\n    return lst.reduce(sumSquares, 0);\n  };\n  const num"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  sentence = sentence.trim().split(' ')\n  if (sentence.length === 0) {\n    return ''\n  }\n\n  let newSentence = ''\n  sentence.forEach(word => {\n    newSentence = newSentence + word[0]\n  })\n  return newSentence\n}\n\nmodule.exports = wordsInSentence\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n  // Your Code Here\n};\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit-pf 2.3.0\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\nusing namespace std;\nbool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, int p2) {\n\tcout << \"Test \" << testNum << \": [\" << \"\\\"\" << p0 << \"\\\"\" << \",\" << \"\\\"\" << p1 << \"\\\"\";\n\tcout << \"]\" << endl;\n\tclock_t startTime = clock();\n\tint answer;\n\tbool retCode = simplify(p0, p1, hasAnswer, answer)!= 0;\n\tclock_t endTime = clock();\n\tbool possibleAnswer = false;\n\tcout << \"Possible answer is: \" << answer << endl;\n\tcout << \"Runtime: \" << double(endTime - startTime) / CLOCKS_PER_SEC << \" seconds\" << endl;\n\tif (hasAnswer) {\n\t\tcout << \"Possible answer found\" << endl;\n\t} else {\n\t\tcout << \"No possible answer found\" << endl;\n\t}\n\tcout << endl;\n\treturn retCode;\n}\nint main() {\n\tbool all_right;\n\tbool disabled;\n\tbool tests_disabled;\n\tall_right = true;\n\ttests_disabled = false;\n\t\n\tstring p0;\n\tstring p1;\n\tint p2;\n\t\n\t// ----- test 0 -----\n\tdisabled = false;\n\tp0 = \"1/5\";\n\tp1 = \"5/1\";\n\tp2 = -1;\n\tall_right = (disabled || KawigiEdit_RunTest(0, p0, p1, true, p2) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 1 -----\n\tdisabled = false;\n\tp0 = \"1/6\";\n\tp1 = \"2/1\";\n\tp2 = -1;\n\tall_right = (disabled || KawigiEdit_RunTest(1, p0, p1, true, p2) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 2 -----\n\tdisabled = false;\n\tp0 = \"7/10\";\n\tp1 = \"10/2\";\n\tp2 = -1;\n\tall_right = (disabled || KawigiEdit_RunTest(2, p0, p1, true, p2) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\tif (all_right) {\n\t\tif (tests_disabled) {\n\t\t\tcout << \"You're a stud (but some test cases were disabled)!\" << endl;\n\t\t} else {\n\t\t\tcout << \"You're a stud (at least on given cases)!\" << endl;\n\t\t}\n\t} else {\n\t\tcout << \"Some of the test cases had errors.\" << endl;\n\t}\n\treturn 0;\n}\n// END KAWIGIEDIT TESTING\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let output = [];\n  nums.forEach((num) => {\n    let curr = num;\n    while (curr!== 0) {\n      let remainder = curr % 10;\n      output.push(remainder);\n      curr = curr / 10;\n    }\n  });\n  return output;\n};\n\nconst list = [1, 11, -1, -11, -12];\nconsole.log(orderByPoints(list));\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  let i = 0;\n  for (i = 0; i < nums.length; i++) {\n    if (nums[i] > 10) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a collection of numbers, return all the elements that are multiples\n  of the first given number.\n  */\nconst multiples = (nums, num) => {\n  let result = [];\n  let i = 0;\n  for (i = 0; i < nums.length; i++) {\n    if (nums[i] % num === 0) {\n      result.push(nums[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  specialFilter,\n  multiples\n};<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let maxTriples = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = [1];\n    for (let j = i; j <= n; j++) {\n      a.push(j * j - j + 1);\n    }\n    let aSum = a.reduce((prev, curr, i) => prev + curr, 0);\n    let aSumSum = aSum * (aSum + 1);\n    let count = aSumSum / 3;\n    if (count > maxTriples) {\n      maxTriples = count;\n    }\n  }\n  return maxTriples;\n}\n\n/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples2 = (n) => {\n  let maxTriples = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = [1];\n    for (let j = i; j <= n; j++) {\n      a.push(j * j - j + 1);\n    }\n    let aSum = a.reduce((prev, curr, i) => prev + curr, 0);\n    let aSumSum = aSum * (aSum + 1);\n    let count = aSumSum / 3;\n    if (count > maxTriples) {\n      maxTriples = count;\n    }\n  }\n  return maxTriples;\n}\n\n/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples3 = (n) => {\n  let maxTriples = 0;\n  for (let i = 1; i <= n; i++) {\n    let a = [1];\n    for (let j = i; j <= n; j++) {\n      a.push(j * j - j + 1);\n    }\n    let aSum = a.reduce((prev, curr, i) => prev + curr, 0);\n    let aSumSum = aSum * (aSum + 1);\n    let count = aSumSum / 3;\n    if (count > maxTriples) {\n      maxTriples = count;\n    }\n  }\n  return maxTriples;\n}\n\nconsole.log(getMaxTriples(5));\nconsole.log(getMaxTriples2(5));\nconsole.log(getMaxTriples3(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  if (planet1 === planet2) {\n    return () => ({\n      \"planet1\": planet1,\n      \"planet2\": planet1,\n      \"sun\": planet1\n    })\n  }\n\n  let sun = planet1\n  let planet1 = planet2\n  let planet2 = planet1\n\n  let orbits = []\n  while (planet1!== sun) {\n    orbits.push(planet1)\n    planet1 = getPlanet(planet1)\n  }\n\n  let planet1Orbit = orbits.shift()\n  let planet2Orbit = orbits.shift()\n\n  let orbit = () => ({\n    \"planet1\": planet1Orbit,\n    \"planet2\": planet2Orbit,\n    \"sun\": planet1Orbit\n  })\n\n  return orbit\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  return new Promise((resolve, reject) => {\n    const lstLen = lst.length,\n      lstLenOdd = lstLen % 2 === 0? lstLen - 1 : lstLen;\n    // console.log(\"lst: \" + lst);\n    // console.log(\"lstLen: \" + lstLen);\n    // console.log(\"lstLenOdd: \" + lstLenOdd);\n    const sortedLst = [];\n    for (let i = 0; i < lstLenOdd; i += 2) {\n      sortedLst.push(lst[i]);\n    }\n    for (let i = 1; i < lstLen; i += 2) {\n      sortedLst.push(lst[i]);\n    }\n    // console.log(\"sortedLst: \" + sortedLst);\n    sortedLst.sort((a, b) => a.localeCompare(b));\n    resolve(sortedLst);\n  });\n};\n\nconst sortByLength = (lst) => {\n  return new Promise((resolve, reject) => {\n    const lstLen = lst.length,\n      lstLenOdd = lstLen % 2 === 0? lstLen - 1 : lstLen,\n      sortedLst = [];\n    for (let i = 0; i < lstLenOdd; i += 2) {\n      sortedLst.push(lst[i]);\n    }\n    for (let i = 1; i < lstLen; i += 2) {\n      sortedLst.push(lst[i]);\n    }\n    sortedLst.sort((a, b) => a.length - b.length);\n    resolve(sortedLst);\n  });\n};\n\nconst test = () => {\n  return new Promise((resolve, reject) => {\n    const lst = [\"aa\", \"a\", \"aaa\", \"ab\", \"abcd\", \"b\", \"bcd\", \"cccc\", \"d\", \"d\", \"ddd\", \"e\"];\n    sortedListSum(lst).then(l => {\n      resolve(l);\n    }).catch(err => reject(err));\n  });\n};\n\ntest().then(lst => {\n  console.log(\"List Length: \" + lst.length);\n  lst.forEach(s => console.log(s));\n  console.log(\"\\n\\n\");\n});\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n    if (x > n) return y\n    else if (x < 0) return y\n    else return x\n}\n\nconst isValid = (n) => {\n    const x = 0\n    const y = n\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const x = 0\n        const y = n\n        const xOrY = (n, x, y)\n        return (xOrY(n, x, y) == y)\n    }\n    const xOrY = (n, x, y)\n    const isValid = (n) => {\n        const"}
{"task_id": "JavaScript/151", "prompt": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  const dif = (a, b) => a - b\n  const list = [].concat(lst)\n  return list.reduce((acc, num) => dif(acc, num), 0)\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]))\nconsole.log(doubleTheDifference([-1, -2, 0]))\nconsole.log(doubleTheDifference([9, -2]))\nconsole.log(doubleTheDifference([0]))\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let gameLen = game.length,\n    guessLen = guess.length;\n  let scores = [],\n    differences = [];\n  // loop over the game array and compare each element to the guess\n  for (let i = 0; i < gameLen; i++) {\n    let val = game[i];\n    if (guess[i] === val) {\n      scores.push(val);\n    } else {\n      differences.push(val);\n    }\n  }\n  return scores;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const names = extensions.map(ext => ext.name);\n  const namesStrings = names.map(name => name.toLowerCase());\n\n  const classNames = [...new Set(namesStrings)];\n  const classNameStrings = classNames.map(className => className + '.');\n\n  const classNameAndExtensionStrings = classNameStrings.concat(namesStrings);\n\n  return classNameAndExtensionStrings.join('.');\n};\n\n/*\n  The main idea of this function is to get the strongest extension of the\n  given class and to get the extension's strenght.\n  Example:\n  getStrength('my_class', ['AA', 'Be', 'CC']) == -1\n  */\nconst getStrength = (class_name, extensions) => {\n  return strongestExtension(class_name, extensions);\n};\n\nmodule.exports = {\n  getStrength\n};\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n  if (a.length < b.length) return false;\n  if (a.length > b.length) return true;\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i]!== b[i]) return false;\n  }\n  return true;\n};\n\nconst cycpattern = (str) => {\n  const arr = str.split('');\n  let res = 'true';\n  for (let i = 0; i < arr.length; i++) {\n    res = cycpatternCheck(arr, res);\n    if (res === 'false') break;\n  }\n  return res;\n};\n\nconst patternCheck = (str, pattern) => {\n  const res = cycpattern(str.toLowerCase());\n  return res === pattern;\n};\n\nexport default patternCheck;\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    const even = num % 2 === 0;\n    const odd =!even;\n    return [even, odd];\n};\n\nconst evenOddCount2 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount3 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount4 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount5 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount6 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount7 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount8 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount9 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount10 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount11 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount12 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount13 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount14 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount15 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount16 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount17 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount18 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount19 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount20 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount21 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount22 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount23 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount24 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount25 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount26 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount27 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount28 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount29 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount30 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount31 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount32 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount33 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount34 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount35 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount36 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount37 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount38 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount39 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount40 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount41 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount42 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount43 = (num) => {\n    const odd = num % 2!== 0;\n    return odd;\n};\n\nconst evenOddCount44 = (num) => {\n    const even = num % 2 === 0;\n    return even;\n};\n\nconst evenOddCount45 = (num) => {\n    const odd = num %"}
{"task_id": "JavaScript/156", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const numbers = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let roman = ''\n  let index = 0\n  for (let i = 0; i < numbers.length; i++) {\n    while (number >= numbers[i]) {\n      roman += numbers[i]\n      number -= numbers[i]\n    }\n  }\n  return roman\n}\n\nconst intToRoman = (number) => {\n  const numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n  let roman = ''\n  let index = 0\n  for (let i = 0; i < numbers.length; i++) {\n    while (number >= numbers[i]) {\n      roman += numbers[i]\n      number -= numbers[i]\n    }\n  }\n  return roman\n}\n\nconst romanToInt = (roman) => {\n  let i = 0\n  let j = 0\n  let total = 0\n  for (let char = roman[j]; char!= ''; char = roman[++j]) {\n    const num = numbers[i++]\n    if (char === 'M') {\n      total += num\n    } else if (char === 'D') {\n      total += 2 * num\n    } else if (char === 'C') {\n      total += 3 * num\n    } else if (char === 'L') {\n      total += 4 * num\n    } else if (char === 'X') {\n      total += 10 * num\n    } else if (char === 'V') {\n      total += 5 * num\n    } else if (char === 'I') {\n      total += 9 * num\n    } else if (char === '?') {\n      total += 1 * num\n    }\n  }\n  return total\n}\n\nconst main = () => {\n  const roman = intToRoman(2147483647)\n  console.log(roman)\n  console.log(romanToInt(roman))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return (s === a) || (s === b) || (s === c) || (s === (a + b) / 2)\n    || (s === (a + c) / 2) || (s === (b + c) / 2);\n};\n\nexport {\n  rightAngleTriangle,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n  return words.reduce((max, word) => {\n    return word.length > max? word : max;\n  }, \"\");\n};\n\nconst MAX_UNIQUE_CHARS = {\n  \"a\": 1,\n  \"b\": 1,\n  \"c\": 1,\n  \"d\": 1,\n  \"e\": 1,\n  \"f\": 1,\n  \"g\": 1,\n  \"h\": 1,\n  \"i\": 1,\n  \"j\": 1,\n  \"k\": 1,\n  \"l\": 1,\n  \"m\": 1,\n  \"n\": 1,\n  \"o\": 1,\n  \"p\": 1,\n  \"q\": 1,\n  \"r\": 1,\n  \"s\": 1,\n  \"t\": 1,\n  \"u\": 1,\n  \"v\": 1,\n  \"w\": 1,\n  \"x\": 1,\n  \"y\": 1,\n  \"z\": 1,\n};\n\nconst findUniqueChars = (string) => {\n  const uniqueChars = [];\n  const uniqChars = {};\n  const charArray = string.split(\"\");\n  let uniqueChar;\n  for (let i = 0; i < charArray.length; i++) {\n    uniqueChar = charArray[i];\n    if (uniqChars[uniqueChar] === undefined) {\n      uniqChars[uniqueChar] = 0;\n      uniqueChars.push(uniqueChar);\n    }\n    uniqChars[uniqueChar]++;\n  }\n  return uniqueChars;\n};\n\nmodule.exports = {\n  findMax,\n  findUniqueChars,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  const difference = (need - number);\n  \n  if (difference > 0) {\n    result[0] = difference;\n    result[1] = number;\n    return result;\n  }\n  \n  if (remaining > need) {\n    result[0] = remaining - need;\n    result[1] = number;\n    return result;\n  }\n  \n  result[0] = difference;\n  result[1] = number;\n  return result;\n}\n\n/*\n  This Function will let you know if you're hungry, If you're hungry,\n  you'll have to eat more than you have left.\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n  \n  Have fun :)\n  */\nconst isHungry = (number, need, remaining) => {\n  const result = [];\n  const difference = (need - number);\n  \n  if (difference > 0) {\n    result[0] = difference;\n    result[1] = number;\n    return result;\n  }\n  \n  if (remaining < need) {\n    result[0] = remaining - need;\n    result[1] = number;\n    return result;\n  }\n  \n  result[0] = difference;\n  result[1] = number;\n  return result;\n}\n\n/*\n  This Function will let you know if you're full, If you're full,\n  you'll have to eat more than you have left.\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n  \n  Have fun :)\n  */\nconst isFull = (number, need, remaining) => {\n  const result = [];\n  const difference = (need - number);\n  \n  if (difference > 0) {\n    result[0] = difference;\n    result[1] = number;\n    return result;\n  }\n  \n  if (remaining < need) {\n    result[0] = remaining - need;\n    result[1] = number;\n    return result;\n  }\n  \n  result[0] = difference;\n  result[1] = number;\n  return result;\n}\n\n/*\n  This Function will let you know if you're a hUngry RabBit, If you're a hUngry\n  RabBit, you'll have to eat more than you have left.\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n  \n  Have fun :)\n  */\nconst isHungryRabBit = (number, need, remaining) => {\n  const result = [];\n  const difference = (need - number);\n  \n  if (difference > 0) {\n    result[0] = difference;\n    result[1] = number;\n    return result;\n  }\n  \n  if (remaining < need) {\n    result[0] = remaining - need;\n    result[1] = number;\n    return result;\n  }\n  \n  result[0] = difference;\n  result[1] = number;\n  return result;\n}\n\n/*\n  This Function will let you know if you're a hUngry RabBit, If you're a hUngry\n  RabBit, you'll have to eat more than you have left.\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n  \n  Have fun :)\n  */\nconst isFullRabBit = (number, need, remaining) => {\n  const result = [];\n  const difference = (need - number);\n  \n  if (difference > 0) {\n    result[0] = difference;\n    result[1] = number;\n    return result;\n  }\n  \n  if (remaining < need) {\n    result[0] = remaining"}
{"task_id": "JavaScript/160", "prompt": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operators = operator.split('+')\n  const operands = operand.split('+')\n\n  const listLength = operators.length\n  let result = 0\n  for (let i = 0; i < listLength; i++) {\n    result += Number(operators[i]) * Number(operands[i])\n  }\n  return result\n}\n\n/*\n  Example:\n  operators = ['+', '-', '*']\n  operands = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n*/\nconst doAlgebraWithOperators = (operators, operands) => {\n  const operators = operators.split('+')\n  const operands = operands.split('+')\n\n  const listLength = operators.length\n  let result = 0\n  for (let i = 0; i < listLength; i++) {\n    result += Number(operators[i]) * Number(operands[i])\n  }\n  return result\n}\n\nconst arrayOperator = (operator, operand) => {\n  const operators = operator.split('+')\n  const operands = operand.split('+')\n\n  const listLength = operators.length\n  let result = 0\n  for (let i = 0; i < listLength; i++) {\n    result += Number(operators[i]) * Number(operands[i])\n  }\n  return result\n}\n\nconst listOperator = (operator, operand) => {\n  const operators = operator.split('+')\n  const operands = operand.split('+')\n\n  const listLength = operators.length\n  let result = 0\n  for (let i = 0; i < listLength; i++) {\n    result += Number(operators[i]) * Number(operands[i])\n  }\n  return result\n}\n\nconst listOperator2 = (operator, operand) => {\n  const operators = operator.split('+')\n  const operands = operand.split('+')\n\n  const listLength = operators.length\n  let result = 0\n  for (let i = 0; i < listLength; i++) {\n    result += Number(operators[i]) * Number(operands[i])\n  }\n  return result\n}\n\nconst listOperator3 = (operator, operand) => {\n  const operators = operator.split('+')\n  const operands = operand.split('+')\n\n  const listLength = operators.length\n  let result = 0\n  for (let i = 0; i < listLength; i++) {\n    result += Number(operators[i]) * Number(operands[i])\n  }\n  return result\n}\n\nconst listOperator4 = (operator, operand) => {\n  const operators = operator.split('+')\n  const operands = operand.split('+')\n\n  const listLength = operators.length\n  let result = 0\n  for (let i = 0; i < listLength; i++) {\n    result += Number(operators[i]) * Number(operands[i])\n  }\n  return result\n}\n\nconst listOperator5 = (operator, operand) => {\n  const operators = operator.split('+')\n  const operands = operand.split('+')\n\n  const listLength = operators.length\n  let result = 0\n  for (let i = 0; i < listLength; i++) {\n    result += Number(operators[i]) * Number(operands[i])\n  }\n  return result\n}\n\nconst listOperator6 = (operator, operand) => {\n  const operators = operator.split('+')\n  const operands = operand.split('+')\n\n  const listLength = operators.length\n  let result = 0\n  for (let i = 0; i < listLength; i++) {\n    result += Number(operators[i]) * Number(operands[i])\n  }\n  return result\n}\n\nconst listOperator7 = (operator, operand) => {\n  const operators = operator.split('+')\n  const operands = operand.split('+')\n\n  const listLength = operators.length\n  let result = 0\n  for (let i = 0; i < listLength; i++) {\n    result += Number(operators[i]) * Number(operands[i])\n  }\n  return result\n}\n\nconst listOperator8 = (operator, operand) => {\n  const operators = operator.split('+')\n  const operands = operand.split('+')\n\n  const listLength = operators.length\n  let result = 0\n  for (let i = 0; i < listLength; i++) {\n    result += Number(operators[i]) * Number(operands[i])\n  }\n  return result\n}\n\nconst listOperator9 = (operator, operand) => {\n  const operators = operator.split('+')\n  const operands = operand.split('+')\n\n  const listLength = operators.length\n  let result = 0\n  for (let i = 0; i < listLength; i++) {\n    result += Number(operators[i]) * Number(operands[i])\n  }\n  return"}
{"task_id": "JavaScript/161", "prompt": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  if (!s) return ''\n  if (s.length === 1) return s\n  if (s.length === 2 && s[0] === '#') return s\n  if (s.length === 2 && s[1] === '#') return s\n  if (s.length === 2 && s[0] === '#' && s[1] === '#') return s\n  if (s.length === 3 && s[0] === '#' && s[1] === '#' && s[2] === '#') return s\n\n  // remove white spaces\n  let str = s.replace(/\\s+/g, '')\n\n  // remove repeated spaces\n  let re = /(\\s\\s)+/g\n  str = str.replace(re,'')\n\n  // remove repeated single spaces\n  re = /(\\s)+/g\n  str = str.replace(re,'')\n\n  let st = str.split(' ')\n  let n = 0\n  let m = 0\n\n  for (let i = 0; i < st.length; i++) {\n    if (st[i] === '#') {\n      n += 1\n      m += 1\n    }\n  }\n\n  if (n === m) {\n    return '#' + st[0] + '#'\n  }\n\n  let ans = ''\n  for (let i = 0; i < st.length; i++) {\n    if (st[i] === '#') {\n      ans += '#'\n    } else {\n      ans += st[i]\n    }\n  }\n  return ans\n}\n\nexport default solve\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === null || text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nexport default stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let c = 0\n  for (let i = a; i <= b; i += 1) {\n    if (Math.random() > 0.5) {\n      c += i\n    }\n  }\n  return c\n}\n\n/**\n  Generate a random number in the range 0.0 to 1.0\n  */\nconst generateRandom = () => {\n  return Math.random()\n}\n\nexport default { generateIntegers, generateRandom }\n<|endoftext|>"}
