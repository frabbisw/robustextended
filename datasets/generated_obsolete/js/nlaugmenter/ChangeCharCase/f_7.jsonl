{"task_id": "JavaScript/0", "prompt": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length === 0) return false\n  if (numbers.length === 1) return true\n  const min = numbers[0]\n  const max = numbers[numbers.length - 1]\n  return Math.abs(max - min) < threshold\n}\n\n/*\n  Calculate the total value of the given list of numbers.\n  >>> totalValue([1, 2, 3, 4])\n  10\n  >>> totalValue([1, 2, 3, 4, 5])\n  15\n  */\nconst totalValue = (numbers) => {\n  return (numbers.length === 0)? 0 : numbers.reduce((total, number) => {\n    return total + number\n  }, 0)\n}\n\n/*\n  Calculate the average value of the given list of numbers.\n  >>> averageValue([1, 2, 3, 4])\n  2.5\n  >>> averageValue([1, 2, 3, 4, 5])\n  3.0\n  */\nconst averageValue = (numbers) => {\n  return totalValue(numbers) / numbers.length\n}\n\n/*\n  Calculate the standard deviation value of the given list of numbers.\n  >>> standardDeviation([1, 2, 3, 4])\n  1.0\n  >>> standardDeviation([1, 2, 3, 4, 5])\n  1.0\n  >>> standardDeviation([1, 2, 3, 4, 5, 6])\n  1.0\n  >>> standardDeviation([1, 2, 3, 4, 5, 6, 7])\n  1.5\n  */\nconst standardDeviation = (numbers) => {\n  if (numbers.length === 0) return 0\n  const mean = averageValue(numbers)\n  return Math.pow(standardDeviation(numbers.filter(x => x!== null)), 2)\n   .reduce((total, number) => total + number, 0) / numbers.length\n}\n\n/*\n  Calculate the range value of the given list of numbers.\n  >>> rangeValue([1, 2, 3, 4])\n  1\n  >>> rangeValue([1, 2, 3, 4, 5])\n  3\n  >>> rangeValue([1, 2, 3, 4, 5, 6])\n  4\n  >>> rangeValue([1, 2, 3, 4, 5, 6, 7])\n  5\n  */\nconst rangeValue = (numbers) => {\n  const max = Math.max.apply(Math, numbers)\n  const min = Math.min.apply(Math, numbers)\n  return Math.abs(max - min)\n}\n\n/*\n  Calculate the median value of the given list of numbers.\n  >>> median([1, 2, 3, 4])\n  2\n  >>> median([1, 2, 3, 4, 5])\n  3\n  >>> median([1, 2, 3, 4, 5, 6])\n  3.5\n  >>> median([1, 2, 3, 4, 5, 6, 7])\n  4.0\n  */\nconst median = (numbers) => {\n  if (numbers.length === 0) return null\n  const sorted = numbers.sort()\n  return sorted[Math.floor(numbers.length / 2)]\n}\n\n/*\n  Calculate the mode value of the given list of numbers.\n  >>> mode([1, 2, 3, 4])\n  2\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  >>> mode([1, 2, 3, 4, 5, 6])\n  4\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  5\n  */\nconst mode = (numbers) => {\n  if (numbers.length === 0) return null\n  const sorted = numbers.sort()\n  const max = sorted[numbers.length - 1]\n  const min = sorted[0]\n  return Math.abs(max - min) === 1? max : null\n}\n\n/*\n  Calculate the mode value of the given list of numbers.\n  >>> mode([1, 2, 3, 4, 5, 6])\n  6\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  7\n  */\nconst mode = (numbers) => {\n  if (numbers.length === 0) return null\n  const sorted = numbers.sort()\n  const max = sorted[numbers.length - 1]\n  const min = sorted[0]\n  return Math.abs(max - min) === 1? max : null\n}\n\n/*\n  Calculate the range value of the given list of numbers.\n  >>> range([1, 2, 3, 4])\n  1\n  >>> range([1, 2, 3, 4, 5])\n  3\n  >>> range([1, 2, 3, 4, 5, 6])\n  4\n  >>> range([1, 2, 3, 4, 5, 6, 7])\n  5\n  */\nconst range = (numbers) => {\n  const max = Math.max.apply(Math, numbers)\n  const min = Math.min.apply(Math, numbers)\n  return Math.abs(max - min)\n}\n\n/*\n  Calculate the mode value of the given list of numbers.\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  */\nconst mode = (numbers) => {\n  const sorted = numbers.sort()\n  const max = sorted[numbers.length - 1]\n  const min = sorted[0]\n  return Math.abs(max - min) === 1? max : null\n}\n\n/*\n  Calculate the range value of the given list of numbers.\n  >>> range([1, 2, 3, 4, 5, 6, 7])\n  5\n  */\nconst range = (numbers) => {\n  const max = Math.max.apply(Math, numbers)\n  const min = Math.min.apply(Math, numbers)\n  return Math.abs(max - min)"}
{"task_id": "JavaScript/1", "prompt": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const parens = []\n  let i = 0\n  let j = 0\n  while (i < paren_string.length) {\n    if (paren_string[i] === ')') {\n      parens.push(paren_string.substring(j, i + 1))\n      j = i + 1\n    } else if (paren_string[i] === '(') {\n      j = i\n    } else if (paren_string[i] === ')') {\n      parens.push(paren_string.substring(j, i + 1))\n      j = i + 1\n    } else if (paren_string[i] === '(') {\n      i = parens.length + 1\n    } else if (paren_string[i] === ')') {\n      i = parens.length + 1\n    }\n    i++\n  }\n  parens.push(paren_string.substring(j, i + 1))\n  return parens\n}\n\n/*\n  The following test cases are taken from the above exercise.\n  >>> test = ['()', '(())', '(())()', '((()))', '(()())']\n  >>> separateParenGroups(test)\n  ['()', '(())', '(()())', '(()())', '(()())']\n  >>> test = ['(())', '(())', '(())()', '((()))', '(()())']\n  >>> separateParenGroups(test)\n  ['(())', '(())', '(())()', '(()())', '(()())']\n  >>> test = ['(())()', '(())()', '(()())', '(())()']\n  >>> separateParenGroups(test)\n  ['(())()', '(())()', '(())()', '(())()']\n  >>> test = ['(())()()', '(())()()', '(()())', '(())()()']\n  >>> separateParenGroups(test)\n  ['(())()()', '(())()()', '(()())', '(()())()']\n  >>> test = ['((()))', '((())', '(()())', '((()()))', '(())()()']\n  >>> separateParenGroups(test)\n  ['((()))', '(())()', '(()())', '(()())()', '(()())()']\n  >>> test = ['((())())()', '(())()()', '(())()()', '(())()()']\n  >>> separateParenGroups(test)\n  ['((())())()', '(())()()', '(())()()', '(())()()']\n  >>> test = ['(())()())', '(())()()', '(())()()', '(())()()']\n  >>> separateParenGroups(test)\n  ['(())()())', '(())()()', '(())()()', '(())()()']\n  >>> test = ['((()))', '(()())', '(())()', '(())()()']\n  >>> separateParenGroups(test)\n  ['((()))', '(()())', '(())()', '(())()()']\n  >>> test = ['((())())()', '(())()()', '(())()()', '(())()()']\n  >>> separateParenGroups(test)\n  ['((())())()', '(())()()', '(())()()', '(())()()']\n  >>> test = ['((()))()()', '(())()()', '(())()()', '(())()()']\n  >>> separateParenGroups(test)\n  ['((()))()()', '(())()()', '(())()()', '(())()()']\n  >>> test = ['((())())()', '(())()()', '(())()()', '(())()()']\n  >>> separateParenGroups(test)\n  ['((())())()', '(())()()', '(())()()', '(())()()']\n  >>> test = ['(((())))(())', '(())()()', '(())()()', '(())()()']\n  >>> separateParenGroups(test)\n  ['(((())))(())', '(())()()', '(())()()', '(())()()']\n  >>> test = ['(((())))(())', '(()())()', '(()())()', '(())()()']\n  >>> separateParenGroups(test)\n  ['(((())))(())', '(())()()', '(())()()', '(())()()']\n  >>> test = ['(((())))(()())', '(())()()', '(())()()', '(())()()']\n  >>> separateParenGroups(test)\n  ['(((())))(()())', '(())()()', '(())()()', '(())()()']\n  >>> test = ['(((())))(()())', '(())()()', '(())()()', '(())()()']\n  >>> separateParenGroups(test)\n  ['(((())))(()())', '(())()()', '(())()()', '(())()()']\n  >>> test = ['(((())))(()())', '(())()()', '(())()()', '(())()()']\n  >>> separateParenGroups(test)\n  ['(((())))(()())', '(())()()', '(())()()', '(())()()']\n  >>> test = ['((()))(()())', '(())()()', '(())()()', '(())()()']\n  >>> separateParenGroups(test)\n  ['((()))(()())', '(())()()', '(())()()', '(())()()']\n  >>> test = ['((())())(())', '(())()()', '(())()()', '(())()()']\n  >>> separateParenGroups(test)\n  ['((())())(())', '(())()()', '(())()()', '(())()()']\n  >>> test = ['(("}
{"task_id": "JavaScript/2", "prompt": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    if (isNaN(number)) {\n        return 0;\n    }\n    const numberString = String(number);\n    const numberLength = numberString.length;\n    const decimals = numberString.split('.');\n    const numberPart = numberString.substr(0, numberLength - 1);\n    const numberPartLength = numberPart.length;\n    const firstChar = numberPart.charAt(numberPartLength - 1);\n    if (firstChar === '0') {\n        return number;\n    }\n    const secondChar = numberPart.charAt(numberPartLength - 2);\n    if (secondChar === '0') {\n        return number;\n    }\n    if (firstChar === '.') {\n        return number;\n    }\n    const decimalPart = decimals[1];\n    const decimalLength = decimalPart.length;\n    if (decimalLength === 0) {\n        return number;\n    }\n    const decimalNumber = decimalPart.substr(0, decimalLength - 1);\n    const decimalNumberLength = decimalNumber.length;\n    const secondCharLength = secondChar.length;\n    const firstCharLength = firstChar.length;\n    const maxLength = numberLength - numberPartLength - 1;\n    if (decimalNumberLength > maxLength) {\n        return number;\n    }\n    const finalDecimalPart = decimalPart.substr(decimalNumberLength, maxLength);\n    const finalNumber = numberString.substr(0, numberPartLength) + finalDecimalPart;\n    return parseFloat(finalNumber);\n};\n\nexport default truncateNumber;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    const sorted = _.sortBy(operations, (operation) => parseInt(operation.amount));\n    let last = sorted[sorted.length - 1];\n    return (sorted[0].amount <= 0 && last.amount < 0);\n};\n\nmodule.exports = belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let m = 0;\n  let d = 0;\n  let absDeviation = 0;\n  numbers.forEach(number => {\n    absDeviation = Math.abs(number - m);\n    if (absDeviation > d) {\n      d = absDeviation;\n    }\n    m += number;\n  });\n  return m / numbers.length;\n};\n\n/*\n  For A givEn list of iNpuT numbers, calcUlate mean Square AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN Square Absolut DeVIation is the aveRage aBsOLuTe DifFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanSquareAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquareAbsoluteDeviation = (numbers) => {\n  let m = 0;\n  let d = 0;\n  let absDeviation = 0;\n  numbers.forEach(number => {\n    absDeviation = Math.abs(number - m);\n    if (absDeviation > d) {\n      d = absDeviation;\n    }\n    m += number * number;\n  });\n  return m / numbers.length;\n};\n\n/*\n  For A givEn list of iNpuT numbers, calcUlate Std Deviation of AbsOluTe\n  ArOund THe mean oF this dataset.\n  MEAN Square Absolut DeVIation is the aveRage aBsOLuTe DifFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  let meanAbsDeviation = meanAbsoluteDeviation(numbers);\n  let meanSquareAbsDeviation = meanSquareAbsoluteDeviation(numbers);\n  let variance = meanSquareAbsDeviation - meanAbsDeviation * meanAbsDeviation;\n  return Math.sqrt(variance);\n};\n\nconst standardDeviation = (numbers) => {\n  let meanAbsDeviation = meanAbsoluteDeviation(numbers);\n  let meanSquareAbsDeviation = meanSquareAbsoluteDeviation(numbers);\n  let variance = meanSquareAbsDeviation - meanAbsDeviation * meanAbsDeviation;\n  return Math.sqrt(variance);\n};\n\n/*\n  For A givEn list of iNpuT numbers, calcUlate Std Deviation of AbsOluTe\n  ArOund THe mean oF this dataset.\n  MEAN Square Absolut DeVIation is the aveRage aBsOLuTe DifFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n  let meanAbsDeviation = meanAbsoluteDeviation(numbers);\n  let meanSquareAbsDeviation = meanSquareAbsoluteDeviation(numbers);\n  let variance = meanSquareAbsDeviation - meanAbsDeviation * meanAbsDeviation;\n  return variance;\n};\n\nexport {\n  meanAbsoluteDeviation,\n  meanSquareAbsoluteDeviation,\n  standardDeviation,\n  variance\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (delimeter <= 0) {\n    throw new Error('Intersperse error: Delimeter must be a non-zero integer.')\n  }\n\n  if (numbers.length === 0) {\n    return []\n  }\n\n  const output = []\n  let current\n  let currentLength = 0\n  let lastLength = 0\n  let i = 0\n\n  while (i < numbers.length) {\n    if (currentLength + lastLength === delimeter) {\n      output.push(numbers[i])\n      lastLength = 0\n      currentLength = 0\n      i++\n    } else if (currentLength + lastLength === delimeter - 1) {\n      output.push(numbers[i])\n      output.push(delimeter)\n      lastLength = 0\n      currentLength = 0\n      i++\n    } else {\n      lastLength++\n      currentLength++\n    }\n  }\n\n  return output\n}\n\nmodule.exports = intersperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const groups = paren_string.match(/\\((.*)\\)/g);\n  const nested_groups = paren_string.match(/\\((.*)\\)/g);\n  return nested_groups.map((i, index) => {\n    const group = groups[index].replace('(', '').replace(')', '');\n    return group.length;\n  });\n}\n\n/* This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const groups = paren_string.match(/\\((.*)\\)/g);\n  const nested_groups = paren_string.match(/\\((.*)\\)/g);\n  return nested_groups.map((i, index) => {\n    const group = groups[index].replace('(', '').replace(')', '');\n    return group.length;\n  });\n}\n\n// For testing purposes\n// const parseNestedParens2 = parseNestedParens;\n\n// const test = parseNestedParens2('((()))');\n// console.log(test);\n\n// const test = parseNestedParens2('((()))');\n// console.log(test);\n\nconst parseNestedParens3 = (paren_string) => {\n  const groups = paren_string.match(/\\((.*)\\)/g);\n  const nested_groups = paren_string.match(/\\((.*)\\)/g);\n  return nested_groups.map((i, index) => {\n    const group = groups[index].replace('(', '').replace(')', '');\n    return group.length;\n  });\n}\n\n// For testing purposes\n// const parseNestedParens3 = parseNestedParens;\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3('((()))');\n// console.log(test);\n\n// const test = parseNestedParens3"}
{"task_id": "JavaScript/7", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n    return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/*\n  * FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  * that startS with s\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  * ['abc', 'bacd', 'cde', 'array']\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  * ['cde', 'array']\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'd')\n  * []\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  * ['abc', 'bacd', 'array']\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bcd')\n  * ['abc', 'bacd', 'array']\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bac')\n  * ['abc', 'bacd', 'array']\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'aac')\n  * ['abc', 'bacd', 'array']\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ac')\n  * ['abc', 'bacd', 'cde', 'array']\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  * ['abc', 'bacd', 'cde', 'array']\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'abc')\n  * ['abc', 'bacd', 'cde', 'array']\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'abcde')\n  * ['abc', 'bacd', 'cde', 'array']\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'abcdef')\n  * []\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bacd')\n  * ['abc', 'bacd', 'array']\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bacde')\n  * ['abc', 'bacd', 'array']\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bacdef')\n  * ['abc', 'bacd', 'array']\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bacdefg')\n  * []\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  * ['abc', 'bacd', 'cde', 'array']\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cdea')\n  * []\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cdef')\n  * []\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cdefg')\n  * []\n  * >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cdefgh')\n  * []\n  */\nconst filterBySubstringStartingWith = (strings, s) => {\n    return filterBySubstring(strings, s);\n};\n\nmodule.exports = {\n    filterBySubstring,\n    filterBySubstringStartingWith\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  numbers.forEach(x => {\n    sum = sum + x;\n    product = product * x;\n  });\n  return [sum, product];\n};\n\n// const sumProduct = (numbers, int) => {\n//   let sum = 0;\n//   let product = 1;\n//   for (let i = 0; i < numbers.length; i += 1) {\n//     sum = sum + numbers[i];\n//     product = product * numbers[i];\n//   }\n//   return [sum, product];\n// };\n\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < int; i += 1) {\n    sum = sum + numbers[i];\n    product = product * numbers[i];\n  }\n  return [sum, product];\n};\n\nmodule.exports = sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    var max = numbers[0];\n    var maxIndex = 0;\n    for (var i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n        }\n    }\n    return [max, maxIndex];\n}\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    var max = numbers[0];\n    var maxIndex = 0;\n    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n        }\n    }\n    return [max, maxIndex];\n}\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    var max = numbers[0];\n    var maxIndex = 0;\n    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n        }\n    }\n    return [max, maxIndex];\n}\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    var max = numbers[0];\n    var maxIndex = 0;\n    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n        }\n    }\n    return [max, maxIndex];\n}\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    var max = numbers[0];\n    var maxIndex = 0;\n    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n        }\n    }\n    return [max, maxIndex];\n}\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    var max = numbers[0];\n    var maxIndex = 0;\n    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n        }\n    }\n    return [max, maxIndex];\n}\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    var max = numbers[0];\n    var maxIndex = 0;\n    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n        }\n    }\n    return [max, maxIndex];\n}\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    var max = numbers[0];\n    var maxIndex = 0;\n    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n        }\n    }\n    return [max, maxIndex];\n}\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    var max = numbers[0];\n    var maxIndex = 0;\n    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n        }\n    }\n    return [max, maxIndex];\n}\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    var max = numbers[0];\n    var maxIndex = 0;\n    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n        }\n    }\n    return [max, maxIndex];\n}\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    var max = numbers[0];\n    var maxIndex = 0;\n    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            maxIndex = i;\n        }\n    }\n    return [max, maxIndex];\n}\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3,"}
{"task_id": "JavaScript/10", "prompt": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let begin = 0,\n    end = string.length - 1;\n  while (begin < end) {\n    if (string[begin]!= string[end]) {\n      return string.substr(begin + 1, end - begin);\n    }\n    begin++;\n    end--;\n  }\n  return string;\n}\n\nconst makePalindromes = (string) => {\n  let result = [],\n    isPalindrome = (string) => {\n      return string == string.split('').reverse().join('');\n    },\n    makePalindrome = (string) => {\n      let result = makePalindrome(string);\n      result.push(result);\n      return result;\n    };\n  let string = string.split('');\n  for (let i = 0; i < string.length - 1; i++) {\n    for (let j = i + 1; j < string.length; j++) {\n      if (isPalindrome(string.slice(i, j + 1))) {\n        result = result.concat(makePalindrome(string.slice(i, j + 1)));\n      }\n    }\n  }\n  return result;\n}\n\n/* Testing the above functions */\n/* TODO: add tests */\n\n/*\n  This function is not necessary to complete the problem, but it is useful for\n  demonstrating that a function has been built.\n*/\nconst testFunction = (functionName,...args) => {\n  console.log(`${functionName}(${args.join(', ')})`);\n}\n\n/*\n  This function is not necessary to complete the problem, but it is useful for\n  demonstrating that a function has been built.\n*/\nconst testFunctions = (...functions) => {\n  functions.forEach(functionName => {\n    console.log(`${functionName}()`);\n  });\n}\n\n/*\n  This function is not necessary to complete the problem, but it is useful for\n  demonstrating that a function has been built.\n*/\nconst testFunctionArguments = (functionName,...args) => {\n  console.log(`${functionName}(${args.join(', ')})`);\n}\n\n/*\n  This function is not necessary to complete the problem, but it is useful for\n  demonstrating that a function has been built.\n*/\nconst testFunctionArguments2 = (functionName,...args) => {\n  console.log(`${functionName}(${args.join(', ')})`);\n}\n\n/*\n  This function is not necessary to complete the problem, but it is useful for\n  demonstrating that a function has been built.\n*/\nconst testFunctionArguments3 = (functionName,...args) => {\n  console.log(`${functionName}(${args.join(', ')})`);\n}\n\n/*\n  This function is not necessary to complete the problem, but it is useful for\n  demonstrating that a function has been built.\n*/\nconst testFunctionArguments4 = (functionName,...args) => {\n  console.log(`${functionName}(${args.join(', ')})`);\n}\n\n/*\n  This function is not necessary to complete the problem, but it is useful for\n  demonstrating that a function has been built.\n*/\nconst testFunctionArguments5 = (functionName,...args) => {\n  console.log(`${functionName}(${args.join(', ')})`);\n}\n\n/*\n  This function is not necessary to complete the problem, but it is useful for\n  demonstrating that a function has been built.\n*/\nconst testFunctionArguments6 = (functionName,...args) => {\n  console.log(`${functionName}(${args.join(', ')})`);\n}\n\n/*\n  This function is not necessary to complete the problem, but it is useful for\n  demonstrating that a function has been built.\n*/\nconst testFunctionArguments7 = (functionName,...args) => {\n  console.log(`${functionName}(${args.join(', ')})`);\n}\n\n/*\n  This function is not necessary to complete the problem, but it is useful for\n  demonstrating that a function has been built.\n*/\nconst testFunctionArguments8 = (functionName,...args) => {\n  console.log(`${functionName}(${args.join(', ')})`);\n}\n\n/*\n  This function is not necessary to complete the problem, but it is useful for\n  demonstrating that a function has been built.\n*/\nconst testFunctionArguments9 = (functionName,...args) => {\n  console.log(`${functionName}(${args.join(', ')})`);\n}\n\n/*\n  This function is not necessary to complete the problem, but it is useful for\n  demonstrating that a function has been built.\n*/\nconst testFunctionArguments10 = (functionName,...args) => {\n  console.log(`${functionName}(${args.join(', ')})`);\n}\n\n/*\n  This function is not necessary to complete the problem, but it is useful for\n  demonstrating that a function has been built.\n*/\nconst testFunctionArguments11 = (functionName,...args) => {\n  console.log(`${functionName}(${args.join(', ')})`);\n}\n\n/*\n  This function is not necessary to complete the problem, but it is useful for\n"}
{"task_id": "JavaScript/11", "prompt": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  if (a === b) return 0\n  const xor = a.split('').map((e) => {\n    if (e === b) return 1\n    return 0\n  }).reduce((acc, curr) => {\n    if (curr) {\n      acc = acc ^ curr\n    }\n    return acc\n  })\n  return xor\n}\n\nexport default stringXor\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let max = 0\n  let len = 0\n  strings.forEach((s) => {\n    if (s.length > len) {\n      max = s\n      len = s.length\n    }\n  })\n  return max\n}\n\nmodule.exports = longest\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  const gcd = Math.abs(Math.pow(a, b) - (a * b))\n  return a > 0? gcd : b > 0? gcd : Math.abs(gcd)\n}\n\nconst getDivisor = (a, b) => {\n  return Math.pow(a, b) - (a * b)\n}\n\nconst getCeil = (n) => {\n  return Math.ceil(n)\n}\n\nconst getFloor = (n) => {\n  return Math.floor(n)\n}\n\nconst getRound = (n, d) => {\n  return Math.round(n / d) * d\n}\n\nconst getMod = (a, b) => {\n  return a % b\n}\n\nconst getGCD = (a, b) => {\n  return a > 0? greatestCommonDivisor(a, b) : b > 0? greatestCommonDivisor(b, a) : a\n}\n\nconst getLCM = (a, b) => {\n  return a * b / getGCD(a, b)\n}\n\nconst getLargest = (a, b) => {\n  return a > b? a : b\n}\n\nconst getSmallest = (a, b) => {\n  return a < b? a : b\n}\n\nconst getLargestOrEqual = (a, b) => {\n  return a > b? a : b\n}\n\nconst getSmallestOrEqual = (a, b) => {\n  return a < b? a : b\n}\n\nconst getMin = (a, b) => {\n  return a < b? a : b\n}\n\nconst getMax = (a, b) => {\n  return a > b? a : b\n}\n\nconst getMedian = (a, b) => {\n  return (a + b) / 2\n}\n\nconst getSum = (a, b) => {\n  return a + b\n}\n\nconst getSubtract = (a, b) => {\n  return a - b\n}\n\nconst getProduct = (a, b) => {\n  return a * b\n}\n\nconst getAverage = (a, b) => {\n  return (a + b) / 2\n}\n\nconst getAverageOf = (a, b) => {\n  return (a + b) / 2\n}\n\nconst getDifference = (a, b) => {\n  return a - b\n}\n\nconst getDifferenceOf = (a, b) => {\n  return a - b\n}\n\nconst getQuotient = (a, b) => {\n  return a / b\n}\n\nconst getQuotientOf = (a, b) => {\n  return a / b\n}\n\nconst getDividedBy = (a, b) => {\n  return a / b\n}\n\nconst getDividedByOf = (a, b) => {\n  return a / b\n}\n\nconst getDevidedBy = (a, b) => {\n  return a / b\n}\n\nconst getDevidedByOf = (a, b) => {\n  return a / b\n}\n\nconst getDivisorOf = (a, b) => {\n  return a / b\n}\n\nconst getDivisorOfOf = (a, b) => {\n  return a / b\n}\n\nconst getMultiple = (a, b) => {\n  return a * b\n}\n\nconst getMultipleOf = (a, b) => {\n  return a * b\n}\n\nconst getRemainder = (a, b) => {\n  return a % b\n}\n\nconst getRemainderOf = (a, b) => {\n  return a % b\n}\n\nconst getRemainderOfOf = (a, b) => {\n  return a % b\n}\n\nconst getRemainderBy = (a, b) => {\n  return a % b\n}\n\nconst getRemainderByOf = (a, b) => {\n  return a % b\n}\n\nconst getRemainderByOfOf = (a, b) => {\n  return a % b\n}\n\nconst getMultipleOf = (a, b) => {\n  return a * b\n}\n\nconst getMultipleOfOf = (a, b) => {\n  return a * b\n}\n\nconst getMultipleOfOfOf = (a, b) => {\n  return a * b\n}\n\nconst getSquare = (n) => {\n  return n * n\n}\n\nconst getSquareOf = (n) => {\n  return n * n\n}\n\nconst getSquareOfOf = (n) => {\n  return n * n\n}\n\nconst getSquareRoot = (n) => {\n  return Math.sqrt(n)\n}\n\nconst getSquareRootOf = (n) => {\n  return Math.sqrt(n)\n}\n\nconst getSquareRootOfOf = (n) => {\n  return Math.sqrt(n)\n}\n\nconst getSine = (x) => {\n  return Math.sin(x)\n}\n\nconst getSineOf = (x) => {\n  return Math.sin(x)\n}\n\nconst getCosine = (x) => {\n  return Math.cos(x)\n}\n\nconst getCosineOf = (x) => {\n  return Math.cos(x)\n}\n\nconst getTangent = (x) => {\n  return Math.tan(x)\n}\n\nconst getTangentOf = (x) => {\n  return Math.tan(x)\n}\n\nconst getArcsine = (x) => {\n  return Math.asin(x)\n}\n\nconst getArcsineOf = (x) => {\n  return Math.asin(x)\n}\n\nconst getArccosine = (x) => {\n  return Math.acos(x)\n}\n\nconst getArccosineOf = (x) => {\n  return Math.acos(x)\n}\n\nconst getArctangent = (x) => {\n  return Math.atan(x"}
{"task_id": "JavaScript/14", "prompt": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let out = [''];\n  const chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    let prefix = '';\n    for (let j = i; j < chars.length; j++) {\n      if (chars[j] === chars[i]) {\n        prefix += chars[j];\n        if (j === chars.length - 1) {\n          out.push(prefix);\n        }\n      } else {\n        break;\n      }\n    }\n  }\n  return out;\n};\n\n// @author: https://stackoverflow.com/users/253945/rochhav\n// @date: 2017-01-09\n// @link: http://stackoverflow.com/a/253945/1209746\n// @function: returns the longest common substring\n// @param: {string} a - first string\n// @param: {string} b - second string\n// @return: {string} - the longest common substring\nconst longestCommonSubstring = (a, b) => {\n  if (a.length === 0 || b.length === 0) {\n    return '';\n  }\n  let [aStart, aEnd] = [0, a.length];\n  let [bStart, bEnd] = [0, b.length];\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        if (i === aStart) {\n          aStart = j;\n        }\n        if (j === bStart) {\n          bStart = i;\n        }\n        if (i === aEnd) {\n          aEnd = j;\n        }\n        if (j === bEnd) {\n          bEnd = i;\n        }\n      } else {\n        break;\n      }\n    }\n    if (aEnd - aStart > bEnd - bStart) {\n      [aStart, aEnd] = [bStart, bEnd];\n    } else {\n      [bStart, bEnd] = [aStart, aEnd];\n    }\n  }\n  return a.slice(aStart, aEnd);\n};\n\nmodule.exports = {\n  allPrefixes,\n  longestCommonSubstring\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n    const s = [];\n    for (let i = 0; i < n; i++) {\n        s.push(`${i}`);\n    }\n    return s.join('');\n}\n\nconst solution = stringSequence(5);\n\nconsole.log(solution);\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let counter = 0;\n  for (let char of string) {\n    counter += 1;\n    if (counter > 26) {\n      counter = 1;\n    }\n  }\n  return counter;\n};\n\n/* GivEn a string, fInd ouT hoW many times it appears (reGarDLeSs Of caSE) doEs it consist of\n  >>> countRepeatingCharacters('xyzXYZ')\n  2\n  >>> countRepeatingCharacters('Mary')\n  0\n  */\nconst countRepeatingCharacters = (string) => {\n  let count = 0;\n  for (let char of string) {\n    if (string.includes(char)) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst main = () => {\n  console.log(countRepeatingCharacters('Mary'));\n  console.log(countRepeatingCharacters('xyzXYZ'));\n  console.log(countDistinctCharacters('Mary'));\n  console.log(countDistinctCharacters('xyzXYZ'));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  // get the char array\n  const char_array = music_string.split('')\n\n  // return the count of beats\n  return char_array.reduce((acc, curr) => {\n    if (curr === 'o') {\n      acc[curr] = 0\n    } else if (curr === '|') {\n      acc[curr] = 1\n    } else if (curr === '.') {\n      acc[curr] = 2\n    } else if (curr === 'o') {\n      acc[curr] = 3\n    } else {\n      acc[curr] = 0\n    }\n\n    return acc\n  }, {})\n}\n\nconst Music = (music_string) => {\n  const {\n    beats,\n    count,\n    note,\n    total\n  } = parseMusic(music_string)\n\n  const duration = beats[note]\n\n  return {\n    beats,\n    count,\n    note,\n    total,\n    duration\n  }\n}\n\nexport default Music\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const subStringCount = string.length - substring.length + 1;\n  if (subStringCount === 0) {\n    return 0;\n  }\n  const result = 0;\n  for (let i = 0; i < subStringCount; i++) {\n    if (string.includes(substring, i)) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/**\n  * CoUnt GivEn Strings that can be concatenated.\n  * @param string\n  * @returns {string[]}\n  */\nconst uniqueChars = string => {\n  const chars = [];\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (chars.indexOf(char) === -1) {\n      chars.push(char);\n    }\n  }\n  return chars;\n};\n\n/**\n  * Get all combinations of length n of a given string.\n  * @param string\n  * @param n\n  * @returns {string[]}\n  */\nconst getAllCombinations = (string, n) => {\n  const allCombinations = [];\n  const uniqueChars = uniqueChars(string);\n  for (let i = 0; i < uniqueChars.length; i++) {\n    const uniqueChar = uniqueChars[i];\n    if (n === 1) {\n      allCombinations.push(uniqueChar);\n    } else if (n > 1) {\n      allCombinations = allCombinations.concat(\n        getAllCombinations(string.replace(uniqueChar, ''), n - 1),\n      );\n    }\n  }\n  return allCombinations;\n};\n\n/**\n  * @param {string} string\n  * @param {number} n\n  * @returns {string[]}\n  */\nconst getAllCombinationsLength = (string, n) => {\n  const allCombinations = getAllCombinations(string, n);\n  return allCombinations.map(combination => {\n    return combination.length;\n  });\n};\n\n/**\n * @param {string} string\n * @param {number} n\n * @returns {string[]}\n */\nconst getAllCombinationsLengthWithIndex = (string, n) => {\n  const allCombinations = getAllCombinations(string, n);\n  return allCombinations.map(combination => {\n    return [combination, combination.length];\n  });\n};\n\n/**\n  * @param {string} string\n  * @param {number} n\n  * @returns {string[]}\n  */\nconst getAllCombinationsWithIndex = (string, n) => {\n  const allCombinations = getAllCombinationsLengthWithIndex(string, n);\n  return allCombinations.map(combination => {\n    return [combination[0], combination[1]];\n  });\n};\n\n/**\n * @param {string} string\n * @param {number} n\n * @returns {string[]}\n */\nconst getAllCombinationsWithIndexLength = (string, n) => {\n  const allCombinations = getAllCombinationsWithIndex(string, n);\n  return allCombinations.map(combination => {\n    return [combination[0], combination[1], combination[2]];\n  });\n};\n\n/**\n * @param {string} string\n * @param {number} n\n * @returns {string[]}\n */\nconst getAllCombinationsWithIndexLengthWithIndex = (string, n) => {\n  const allCombinations = getAllCombinationsWithIndexLength(string, n);\n  return allCombinations.map(combination => {\n    return [combination[0], combination[1], combination[2], combination[3]];\n  });\n};\n\n/**\n * @param {string} string\n * @param {number} n\n * @returns {string[]}\n */\nconst getAllCombinationsLengthWithIndexLength = (string, n) => {\n  const allCombinations = getAllCombinationsLengthWithIndexLength(string, n);\n  return allCombinations.map(combination => {\n    return [combination[0], combination[1], combination[2], combination[3], combination[4]];\n  });\n};\n\n/**\n  * @param {string} string\n  * @param {number} n\n  * @returns {string[]}\n  */\nconst getAllCombinationsWithIndexLengthWithIndexLength = (string, n) => {\n  const allCombinations = getAllCombinationsWithIndexLengthWithIndexLength(string, n);\n  return allCombinations.map(combination => {\n    return [combination[0], combination[1], combination[2], combination[3], combination[4], combination[5]];\n  });\n};\n\n/**\n * @param {string} string\n * @param {number} n\n * @returns {string[]}\n */\nconst getAllCombinationsWithIndexLengthWithIndexLengthWithIndex = (string, n) => {\n  const allCombinations = getAllCombinationsWithIndexLengthWithIndexLengthWithIndex(string, n);\n  return allCombinations.map(combination => {\n    return [combination[0], combination[1], combination[2], combination[3], combination[4], combination[5], combination[6]];\n  });\n};\n\n/**\n * @param {string} string\n * @param {number} n\n * @returns {string[]}\n */\nconst getAllCombinationsWithIndexLengthWithIndexLengthWithIndexWithIndex = (string, n) => {\n  const allCombinations = getAllCombinationsWithIndexLengthWithIndexLengthWithIndex(string, n);\n  return allCombinations.map(combination => {\n    return [combination[0], combination[1], combination[2], combination[3], combination[4], combination[5], combination[6], combination[7]];\n  });\n};\n\n/**\n * @param {string} string\n * @param {number} n\n * @returns {string[]}\n */\nconst getAllCombinationsLengthWithIndexLengthWithIndexLength"}
{"task_id": "JavaScript/19", "prompt": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five', 'six', 'seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    const numArray = numbers.split('').sort();\n    return numArray.join('');\n};\n\n/*\n  ReversE aS the String 'One two three'.\n  >>> reversE('one two three')\n  'onetwothree'\n  */\nconst reversE = (str) => {\n    const strArray = str.split('');\n    strArray.reverse();\n    return strArray.join('');\n};\n\n/*\n  ReversE aS the String 'one two three'.\n  >>> reversE('onetwothree')\n  'one two three'\n  */\nconst reversE2 = (str) => {\n    const strArray = str.split('');\n    strArray.reverse();\n    return strArray.join('');\n};\n\n/*\n  InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> reversE2('one two three')\n  'onetwothree'\n  */\nconst reversE3 = (str) => {\n    const strArray = str.split('');\n    strArray.reverse();\n    return strArray.join('');\n};\n\n/*\n  ReversE aS the String 'one two three'.\n  >>> reversE3('onetwothree')\n  'one two three'\n  */\nconst reversE4 = (str) => {\n    const strArray = str.split('');\n    strArray.reverse();\n    return strArray.join('');\n};\n\n/*\n  ReversE aS the String 'one two three'.\n  >>> reversE4('onetwothree')\n  'one two three'\n  */\nconst reversE5 = (str) => {\n    const strArray = str.split('');\n    strArray.reverse();\n    return strArray.join('');\n};\n\n/*\n  ReversE aS the String 'one two three'.\n  >>> reversE5('onetwothree')\n  'one two three'\n  */\nconst reversE6 = (str) => {\n    const strArray = str.split('');\n    strArray.reverse();\n    return strArray.join('');\n};\n\n/*\n  ReversE aS the String 'one two three'.\n  >>> reversE6('onetwothree')\n  'one two three'\n  */\nconst reversE7 = (str) => {\n    const strArray = str.split('');\n    strArray.reverse();\n    return strArray.join('');\n};\n\n/*\n  ReversE aS the String 'one two three'.\n  >>> reversE7('onetwothree')\n  'one two three'\n  */\nconst reversE8 = (str) => {\n    const strArray = str.split('');\n    strArray.reverse();\n    return strArray.join('');\n};\n\n/*\n  ReversE aS the String 'one two three'.\n  >>> reversE8('onetwothree')\n  'one two three'\n  */\nconst reversE9 = (str) => {\n    const strArray = str.split('');\n    strArray.reverse();\n    return strArray.join('');\n};\n\n/*\n  ReversE aS the String 'one two three'.\n  >>> reversE9('onetwothree')\n  'one two three'\n  */\nconst reversE10 = (str) => {\n    const strArray = str.split('');\n    strArray.reverse();\n    return strArray.join('');\n};\n\n/*\n  ReversE aS the String 'one two three'.\n  >>> reversE10('onetwothree')\n  'one two three'\n  */\nconst reversE11 = (str) => {\n    const strArray = str.split('');\n    strArray.reverse();\n    return strArray.join('');\n};\n\n/*\n  ReversE aS the String 'one two three'.\n  >>> reversE11('onetwothree')\n  'one two three'\n  */\nconst reversE12 = (str) => {\n    const strArray = str.split('');\n    strArray.reverse();\n    return strArray.join('');\n};\n\n/*\n  ReversE aS the String 'one two three'.\n  >>> reversE12('onetwothree')\n  'one two three'\n  */\nconst reversE13 = (str) => {\n    const strArray = str.split('');\n    strArray.reverse();\n    return strArray.join('');\n};\n\n/*\n  ReversE aS the String 'one two three'.\n  >>> reversE13('onetwothree')\n  'one two three'\n  */\nconst reversE14 = (str) => {\n    const strArray = str.split('');\n    strArray.reverse();\n    return strArray.join('');\n};\n\n/*\n  ReversE aS the String 'one two three'.\n  >>> reversE14('onetwothree')\n  'one two three'\n  */\nconst reversE15 = (str) => {\n    const strArray = str.split('');\n    strArray.reverse();\n    return strArray.join('');\n};\n\n/*\n  ReversE aS the String 'one two three'.\n  >>> reversE15('onetwothree')\n  'one two three'\n  */\nconst reversE16 = (str) => {\n    const strArray = str.split('');\n    strArray"}
{"task_id": "JavaScript/20", "prompt": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  //console.log(`findClosestElements(${numbers.length})`);\n  let closest = numbers[0];\n  let smallest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    //console.log(`findClosestElements() > ${numbers[i]}, ${numbers[i-1]}`);\n    if (numbers[i] < numbers[i-1]) {\n      //console.log(`findClosestElements() > ${numbers[i]}, ${numbers[i-1]}`);\n      smallest = numbers[i];\n      closest = numbers[i-1];\n    }\n  }\n  return (smallest, closest);\n};\n\n/*\n  https://codility.com/demo/take-sample-test/find-closest-elements\n  Test case 1\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  Test case 2\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements_2 = (numbers) => {\n  //console.log(`findClosestElements_2(${numbers.length})`);\n  let closest = numbers[0];\n  let smallest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    //console.log(`findClosestElements_2() > ${numbers[i]}, ${numbers[i-1]}`);\n    if (numbers[i] < numbers[i-1]) {\n      //console.log(`findClosestElements_2() > ${numbers[i]}, ${numbers[i-1]}`);\n      smallest = numbers[i];\n      closest = numbers[i-1];\n    }\n  }\n  return (smallest, closest);\n};\n\n/*\n  https://codility.com/demo/take-sample-test/find-closest-elements\n  Test case 1\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  Test case 2\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements_3 = (numbers) => {\n  //console.log(`findClosestElements_3(${numbers.length})`);\n  let closest = numbers[0];\n  let smallest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    //console.log(`findClosestElements_3() > ${numbers[i]}, ${numbers[i-1]}`);\n    if (numbers[i] < numbers[i-1]) {\n      //console.log(`findClosestElements_3() > ${numbers[i]}, ${numbers[i-1]}`);\n      smallest = numbers[i];\n      closest = numbers[i-1];\n    }\n  }\n  return (smallest, closest);\n};\n\n/*\n  https://codility.com/demo/take-sample-test/find-closest-elements\n  Test case 1\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  Test case 2\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements_4 = (numbers) => {\n  //console.log(`findClosestElements_4(${numbers.length})`);\n  let closest = numbers[0];\n  let smallest = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    //console.log(`findClosestElements_4() > ${numbers[i]}, ${numbers[i-1]}`);\n    if (numbers[i] < numbers[i-1]) {\n      //console.log(`findClosestElements_4() > ${numbers[i]}, ${numbers[i-1]}`);\n      smallest = numbers[i];\n      closest = numbers[i-1];\n    }\n  }\n  return (smallest, closest);\n};\n\n/*\n  https://codility.com/demo/take-sample-test/find-closest-elements\n  Test case 1\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  Test case 2\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements_5 = (numbers) => {\n  //console.log(`findClosestElements_5(${numbers.length})`);\n  let closest = numbers[0"}
{"task_id": "JavaScript/21", "prompt": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  return numbers.map(n => (n - min) / (max - min))\n}\n\nconst makeActions = (numbers) => {\n  const actions = {}\n  for (let i = 0; i < numbers.length; i++) {\n    actions[`${i}-up`] = () => {\n      const last = numbers[i]\n      const next = last + 1\n      const newNumbers = [...numbers, next]\n      return {\n        type: `INC`,\n        payload: {\n          numbers\n        }\n      }\n    }\n    actions[`${i}-down`] = () => {\n      const last = numbers[i]\n      const next = last - 1\n      const newNumbers = [...numbers, next]\n      return {\n        type: `DEC`,\n        payload: {\n          numbers\n        }\n      }\n    }\n    actions[`${i}-reset`] = () => {\n      const newNumbers = [...numbers]\n      return {\n        type: `RESET`,\n        payload: {\n          numbers\n        }\n      }\n    }\n  }\n  return actions\n}\n\nconst makeReducer = (state = initialState, actions) => {\n  const { type, payload } = actions\n  switch (type) {\n    case `INC`:\n      return {\n       ...state,\n        numbers: [...state.numbers, payload.numbers[0]]\n      }\n    case `DEC`:\n      return {\n       ...state,\n        numbers: [...state.numbers, payload.numbers[1]]\n      }\n    case `RESET`:\n      return {\n       ...state,\n        numbers: [...state.numbers]\n      }\n    default:\n      return state\n  }\n}\n\nexport default (state = initialState, action) => {\n  const { type, payload } = action\n  return {\n   ...state,\n   ...makeActions(state.numbers),\n    [`state`]: makeReducer(state, action)\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((v) => {\n    return typeof v === 'number'\n  })\n}\n\n/**\n  * @name filterFalsy\n  * @param {Array} values List of values\n  * @return {Array} The values of type boolean\n  * @description FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterFalsy(['a', 3.14, 5])\n  []\n  >>> filterFalsy([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFalsy = (values) => {\n  return values.filter((v) => {\n    return typeof v!== 'boolean'\n  })\n}\n\n/**\n  * @name filterObject\n  * @param {Array} values List of values\n  * @return {Array} The values of type Object\n  * @description FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterObject(['a', 3.14, 5])\n  [{}]\n  >>> filterObject([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObject = (values) => {\n  return values.filter((v) => {\n    return typeof v === 'object'\n  })\n}\n\n/**\n  * @name isEmpty\n  * @param {Array} values List of values\n  * @return {Array} The values of type boolean\n  * @description FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> isEmpty(['a', 3.14, 5])\n  [false, false, false]\n  >>> isEmpty([1, 2, 3, 'abc', {}, []])\n  [false, false, false]\n  */\nconst isEmpty = (values) => {\n  return filterFalsy(values).length === 0\n}\n\n/**\n  * @name map\n  * @param {Array} values List of values\n  * @param {Function} fn The function to be called on each value\n  * @return {Array} The values of type Object\n  * @description FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> map(['a', 3.14, 5], (v) => v.toUpperCase())\n  ['A', '3.14', '5']\n  >>> map([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst map = (values, fn) => {\n  return values.map(fn)\n}\n\n/**\n  * @name reduce\n  * @param {Array} values List of values\n  * @param {Function} fn The function to be called on the accumulator\n  * @param {Any} initial The initial value for the accumulator\n  * @return {Any} The value of the accumulator\n  * @description FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> reduce(['a', 3.14, 5], (acc, v) => acc + v, 0)\n  26\n  >>> reduce([1, 2, 3, 'abc', {}, []])\n  0\n  */\nconst reduce = (values, fn, initial) => {\n  return values.reduce((acc, v) => {\n    return fn(acc, v)\n  }, initial)\n}\n\n/**\n  * @name reduceRight\n  * @param {Array} values List of values\n  * @param {Function} fn The function to be called on the accumulator\n  * @param {Any} initial The initial value for the accumulator\n  * @return {Any} The value of the accumulator\n  * @description FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> reduceRight(['a', 3.14, 5], (acc, v) => acc + v, 0)\n  26\n  >>> reduceRight([1, 2, 3, 'abc', {}, []])\n  0\n  */\nconst reduceRight = (values, fn, initial) => {\n  return values.reduceRight((acc, v) => {\n    return fn(acc, v)\n  }, initial)\n}\n\n/**\n  * @name sum\n  * @param {Array} values List of values\n  * @return {Number} The sum\n  * @description FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> sum(['a', 3.14, 5])\n  6.0\n  >>> sum([1, 2, 3, 'abc', {}, []])\n  0\n  */\nconst sum = (values) => {\n  return reduce(values, (acc, v) => acc + v, 0)\n}\n\n/**\n  * @name sumRight\n  * @param {Array} values List of values\n  * @return {Number} The sum\n  * @description FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> sumRight(['a', 3.14, 5])\n  6.0\n  >>> sumRight([1, 2, 3, 'abc', {}, []])\n  0\n  */\nconst sumRight = (values) => {\n  return reduceRight(values, (acc, v) => acc + v, 0)\n}\n\n/**\n  * @name zip\n  * @param {Array} values List of values\n  * @param {Array} values List of values\n  * @return {Array} The values of type Object\n  * @description FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> zip(['a', 3.14, 5], [1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, []]\n  >>> zip(['a', 3.14, 5], [1, 2, 3, 'abc', {}, []])\n  [{}, {}, {}, {}, []]\n  "}
{"task_id": "JavaScript/23", "prompt": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen2 = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen3 = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen4 = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen5 = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen6 = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen7 = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen8 = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen9 = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen10 = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen11 = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen12 = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen13 = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen14 = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen15 = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef')\n  6\n  >>> strlen('abcdefg')\n  7\n  */\nconst strlen16 = (string) => {\n  let len = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) === 0) break\n    len++\n  }\n  return len\n}\n\n/*\n  >>> strlen('abcdef"}
{"task_id": "JavaScript/24", "prompt": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646"}
{"task_id": "JavaScript/25", "prompt": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let res = []\n  let nbr = 1\n  while (nbr < n) {\n    if (n % nbr === 0) {\n      res.push(nbr)\n    }\n    nbr += 1\n  }\n  return res\n}\n\n/*\n  The facTors of fRactIOn sQuAtE in the ordEr fROm SmAlleST to Largest.\n  Each of THE facTORS should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  >>> factorize([4, 3, 7])\n  [2, 2, 3]\n  >>> factorize([9, 8, 5, 10, 7])\n  [2, 3, 5, 5]\n  >>> factorize([13, 9, 5, 8, 7])\n  [5, 5, 8, 7]\n  >>> factorize([12, 9, 5, 8, 7])\n  [2, 3, 5, 8, 7]\n  >>> factorize([9, 9, 5, 8, 7])\n  [2, 3, 5, 8, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7])\n  [2, 3, 5, 9, 9]\n  >>> factorize([12, 9, 9, 5, 8, 7])\n  [2, 3, 5, 9, 9]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7])\n  [2, 3, 5, 9, 9]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7])\n  [2, 3, 5, 9, 9, 7]\n  >>> factorize([12, 9, 9, 5, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7"}
{"task_id": "JavaScript/26", "prompt": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n    const removeDups = (x, y) => x === y? y : x;\n    const unique = (arr) => arr.filter((x, i) =>!arr.find(removeDups, x));\n    return unique(numbers);\n}\n\n// test\nremoveDuplicates([1, 2, 3, 2, 4]);\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let flip ='';\n  string.split('').forEach((character, index) => {\n    flip += character.toUpperCase();\n  });\n  return flip;\n};\n\nmodule.exports = flipCase;\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((a, b) => a + b);\n}\n\n/**\n  * @param {string} a\n  * @param {string} b\n  * @returns {string} ConCateNate list oF strings inTo a siNgle sTring\n  * @example\n  * concatenate('a', 'b', 'c')\n  * // 'abc'\n  */\nconst concatenate = (a, b) => {\n  return a + b;\n}\n\n/**\n  * @param {string} a\n  * @param {string} b\n  * @returns {string} ConCateNate list oF strings inTo a siNgle sTring\n  * @example\n  * concatenate('a', 'b', 'c')\n  * // 'abc'\n  */\nconst concatenate = (a, b, c) => {\n  return a + b + c;\n}\n\n/**\n  * @param {string} a\n  * @param {string} b\n  * @returns {string} ConCateNate list oF strings inTo a siNgle sTring\n  * @example\n  * concatenate('a', 'b', 'c')\n  * // 'abc'\n  */\nconst concatenate = (a, b, c, d) => {\n  return a + b + c + d;\n}\n\n/**\n  * @param {string} a\n  * @param {string} b\n  * @returns {string} ConCateNate list oF strings inTo a siNgle sTring\n  * @example\n  * concatenate('a', 'b', 'c')\n  * // 'abc'\n  */\nconst concatenate = (a, b, c, d, e) => {\n  return a + b + c + d + e;\n}\n\n/**\n  * @param {string} a\n  * @param {string} b\n  * @returns {string} ConCateNate list oF strings inTo a siNgle sTring\n  * @example\n  * concatenate('a', 'b', 'c')\n  * // 'abc'\n  */\nconst concatenate = (a, b, c, d, e, f) => {\n  return a + b + c + d + e + f;\n}\n\n/**\n  * @param {string} a\n  * @param {string} b\n  * @returns {string} ConCateNate list oF strings inTo a siNgle sTring\n  * @example\n  * concatenate('a', 'b', 'c')\n  * // 'abc'\n  */\nconst concatenate = (a, b, c, d, e, f, g) => {\n  return a + b + c + d + e + f + g;\n}\n\n/**\n  * @param {string} a\n  * @param {string} b\n  * @returns {string} ConCateNate list oF strings inTo a siNgle sTring\n  * @example\n  * concatenate('a', 'b', 'c')\n  * // 'abc'\n  */\nconst concatenate = (a, b, c, d, e, f, g, h) => {\n  return a + b + c + d + e + f + g + h;\n}\n\n/**\n  * @param {string} a\n  * @param {string} b\n  * @returns {string} ConCateNate list oF strings inTo a siNgle sTring\n  * @example\n  * concatenate('a', 'b', 'c')\n  * // 'abc'\n  */\nconst concatenate = (a, b, c, d, e, f, g, h, i) => {\n  return a + b + c + d + e + f + g + h + i;\n}\n\n/**\n  * @param {string} a\n  * @param {string} b\n  * @returns {string} ConCateNate list oF strings inTo a siNgle sTring\n  * @example\n  * concatenate('a', 'b', 'c')\n  * // 'abc'\n  */\nconst concatenate = (a, b, c, d, e, f, g, h, i, j) => {\n  return a + b + c + d + e + f + g + h + i + j;\n}\n\n/**\n  * @param {string} a\n  * @param {string} b\n  * @returns {string} ConCateNate list oF strings inTo a siNgle sTring\n  * @example\n  * concatenate('a', 'b', 'c')\n  * // 'abc'\n  */\nconst concatenate = (a, b, c, d, e, f, g, h, i, j, k) => {\n  return a + b + c + d + e + f + g + h + i + j + k;\n}\n\n/**\n  * @param {string} a\n  * @param {string} b\n  * @returns {string} ConCateNate list oF strings inTo a siNgle sTring\n  * @example\n  * concatenate('a', 'b', 'c')\n  * // 'abc'\n  */\nconst concatenate = (a, b, c, d, e, f, g, h, i, j, k, l) => {\n  return a + b + c + d + e + f + g + h + i + j + k + l;\n}\n\n/**\n  * @param {string} a\n  * @param {string} b\n  * @returns {string} ConCateNate list oF strings inTo a siNgle sTring\n  * @example\n  * concatenate('a', 'b', 'c')\n  * // 'abc'\n  */\nconst concatenate = (a, b, c, d, e, f, g, h, i, j, k, l, m) => {\n  return a +"}
{"task_id": "JavaScript/29", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const prefixLen = prefix.length\n  return strings.filter((string) => string.slice(0, prefixLen) === prefix)\n}\n\n/*\n  * FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  * Only works on strings.\n  * Returns an array of strings.\n  *\n  * Example:\n  * filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  * //[ 'abc', 'array']\n  *\n  * [\n  *   {\n  *     \"name\": \"a\",\n  *     \"value\": \"a\"\n  *   },\n  *   {\n  *     \"name\": \"b\",\n  *     \"value\": \"b\"\n  *   },\n  *   {\n  *     \"name\": \"c\",\n  *     \"value\": \"c\"\n  *   }\n  * ]\n  */\nexport const filterByPrefixStrings = (strings, prefix) => {\n  const prefixLen = prefix.length\n  const filtered = strings.filter((string) => string.slice(0, prefixLen) === prefix)\n  return filtered.map((string) => {\n    return {\n      \"name\": `${prefix}`,\n      \"value\": string\n    }\n  })\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\nexport default getPositive;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  const sqrtN = Math.sqrt(n)\n  let p = 2\n  while (p <= sqrtN) {\n    if (n % p === 0) {\n      return false\n    }\n    p += 1\n  }\n  return true\n}\n\nmodule.exports = isPrime\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const result = poly(xs);\n  const max = Math.max(Math.abs(result), 0);\n  const min = Math.min(Math.abs(result), max);\n  const max_index = Math.ceil(Math.log(max) / Math.log(2));\n  const min_index = Math.ceil(Math.log(min) / Math.log(2));\n  const all_coeffs = xs.slice(0, max_index);\n  const min_coeffs = xs.slice(min_index, xs.length);\n  const coeffs_for_x = all_coeffs.concat(min_coeffs);\n  const zeros = coeffs_for_x.filter(x => x === 0);\n  const min_coeffs_for_x = coeffs_for_x.filter(x => x!== 0);\n  if (zeros.length === 0) {\n    return 0;\n  }\n  const max_coeff = coeffs_for_x.reduce((prev, current) => {\n    if (prev < current) {\n      return current;\n    }\n    return prev;\n  }, 0);\n  const min_coeff = coeffs_for_x.reduce((prev, current) => {\n    if (prev > current) {\n      return current;\n    }\n    return prev;\n  }, 0);\n  if (min_coeff === 0) {\n    return min_coeff;\n  }\n  return min_coeff_for_x.reduce((prev, current) => {\n    if (prev > current) {\n      return current;\n    }\n    return prev;\n  }, 0);\n}\n\nconst main = () => {\n  console.log(findZero([-6, 11, -6, 1]));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    let i = 0;\n    let j = l.length - 1;\n    let k = 0;\n    let x;\n    let y;\n    while (i <= j) {\n        k = (i + j) / 2;\n        x = l[k];\n        y = l[k + 1];\n        if (x <= y && x <= y && x <= y) {\n            j = k - 1;\n        } else {\n            i = k + 1;\n        }\n    }\n    return l.slice(0, i);\n}\n\n// console.log(sortThird([1, 2, 3]));\n// console.log(sortThird([5, 6, 3, 4, 8, 9, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return l.filter((elem, index, array) => {\n    return array.indexOf(elem) === index;\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  return l.filter((elem, index) => {\n    return l.indexOf(elem) === index;\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  return l.filter((elem, index) => {\n    return index === l.indexOf(elem);\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  return l.filter((elem, index) => {\n    return index === l.indexOf(elem);\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  return l.filter((elem, index) => {\n    return index === l.indexOf(elem);\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  return l.filter((elem, index) => {\n    return index === l.indexOf(elem);\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  return l.filter((elem, index) => {\n    return index === l.indexOf(elem);\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  return l.filter((elem, index) => {\n    return index === l.indexOf(elem);\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  return l.filter((elem, index) => {\n    return index === l.indexOf(elem);\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  return l.filter((elem, index) => {\n    return index === l.indexOf(elem);\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (l) => {\n  return l.filter((elem, index) => {\n    return index === l.indexOf(elem);\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique12 = (l) => {\n  return l.filter((elem, index) => {\n    return index === l.indexOf(elem);\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique13 = (l) => {\n  return l.filter((elem, index) => {\n    return index === l.indexOf(elem);\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique14 = (l) => {\n  return l.filter((elem, index) => {\n    return index === l.indexOf(elem);\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique15 = (l) => {\n  return l.filter((elem, index) => {\n    return index === l.indexOf(elem);\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique16 = (l) => {\n  return l.filter((elem, index) => {\n    return index === l.indexOf(elem);\n  });\n}\n\n//unique\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique17 = (l) => {\n  return l.filter((elem, index) => {\n    return index === l.indexOf(elem);\n  });\n}\n\n//unique\n/*\n  >>>"}
{"task_id": "JavaScript/35", "prompt": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.reduce((a, b) => Math.max(a, b), -Infinity)\n}\n\n/*\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_ = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_2 = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_3 = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_4 = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_5 = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_6 = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_7 = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_8 = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_9 = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_10 = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_11 = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_12 = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_13 = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_14 = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_15 = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_16 = (n) => {\n  if (n % 2 === 0) {\n    return '2'\n  }\n  if (n % 3 === 0) {\n    return '3'\n  }\n  if (n % 5 === 0) {\n    return '5'\n  }\n  return 'fizzBuzz'\n}\n\nconst fizzBuzz_17 = (n) => {\n  if (n % 2 === 0) {\n    return '2'"}
{"task_id": "JavaScript/37", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const result = []\n  let index = 0\n  while (index < l.length) {\n    if (l[index] % 2 === 0) {\n      result.push(l[index])\n    }\n    index++\n  }\n  return result\n}\n\nconst sortOdd = (l) => {\n  const result = []\n  let index = 0\n  while (index < l.length) {\n    if (l[index] % 2!== 0) {\n      result.push(l[index])\n    }\n    index++\n  }\n  return result\n}\n\nconst sort = (l) => {\n  return sortEven(l)\n   .concat(sortOdd(l))\n   .sort((a, b) => {\n      return a - b\n    })\n}\n\nexport default sort\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  const groups = s.split(''),\n        groups2 = [];\n  foR (let i = 0; i < groups.length; i++) {\n    if (groups[i].length == 3) {\n      groups2.push(groups[i].slice(1));\n      groups2.push(groups[i][0]);\n    }\n    else\n      groups2.push(groups[i]);\n  }\n  return groups2.join('');\n}\n\n/*\n  reTURns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nconst groups = [\n  '',\n  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n  'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM', 'AN', 'AO', 'AP', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AV', 'AW', 'AX', 'AY', 'AZ',\n  'BA', 'BB', 'BC', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BK', 'BL', 'BM', 'BN', 'BO', 'BP', 'BQ', 'BR', 'BS', 'BT', 'BU', 'BV', 'BW', 'BX', 'BY', 'BZ',\n  'CAA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', 'CAC', 'CAD', 'CAE', 'CAF', 'CAG', 'CAH', 'CAI', 'CAJ', 'CAK', 'CAL', 'CAM', 'CAN', 'COA', 'CAB', '"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const num = n;\n  if (n === 1 || n === 2) {\n    return n;\n  }\n  return primeFib(n - 1) + primeFib(n - 2);\n};\n\n// returns nth fibonacci number\nconst fib = (n) => {\n  const num = n;\n  if (n === 1 || n === 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  >>> fib(2)\n  3\n  >>> fib(3)\n  5\n  >>> fib(4)\n  13\n  >>> fib(5)\n  89\n  */\nconst fibonacci = (n) => {\n  const num = n;\n  if (n === 1 || n === 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst fibonacci_iter = () => {\n  let a = 1;\n  let b = 1;\n  let i = 1;\n  while (i < 5) {\n    a = b;\n    b = a + b;\n    i = i + 1;\n  }\n  return [a, b];\n};\n\nconst fibonacci_iter_2 = () => {\n  let a = 1;\n  let b = 1;\n  let i = 1;\n  while (i < 5) {\n    a = b;\n    b = a + b;\n    i = i + 1;\n  }\n  return a + b;\n};\n\n// returns nth fibonacci number\nconst fibonacci_iter_2_iter = () => {\n  let a = 1;\n  let b = 1;\n  let i = 1;\n  while (i < 5) {\n    a = b;\n    b = a + b;\n    i = i + 1;\n  }\n  return a + b;\n};\n\n// returns nth fibonacci number\nconst fibonacci_iter_3 = () => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let i = 1;\n  while (i < 5) {\n    a = b;\n    b = c;\n    c = a + b;\n    i = i + 1;\n  }\n  return a + b + c;\n};\n\n// returns nth fibonacci number\nconst fibonacci_iter_4 = () => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let i = 1;\n  while (i < 5) {\n    a = b;\n    b = c;\n    c = d;\n    d = a + b;\n    i = i + 1;\n  }\n  return a + b + c + d;\n};\n\n// returns nth fibonacci number\nconst fibonacci_iter_5 = () => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let i = 1;\n  while (i < 5) {\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = a + b;\n    i = i + 1;\n  }\n  return a + b + c + d + e;\n};\n\n// returns nth fibonacci number\nconst fibonacci_iter_6 = () => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 1;\n  let i = 1;\n  while (i < 5) {\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = f;\n    f = a + b;\n    i = i + 1;\n  }\n  return a + b + c + d + e + f;\n};\n\nconst fibonacci_iter_7 = () => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 1;\n  let g = 1;\n  let i = 1;\n  while (i < 5) {\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = f;\n    f = g;\n    g = a + b;\n    i = i + 1;\n  }\n  return a + b + c + d + e + f + g;\n};\n\nconst fibonacci_iter_8 = () => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e = 1;\n  let f = 1;\n  let g = 1;\n  let h = 1;\n  let i = 1;\n  while (i < 5) {\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = f;\n    f = g;\n    g = h;\n    h = a + b;\n    i = i + 1;\n  }\n  return a + b + c + d + e + f + g + h;\n};\n\nconst fibonacci_iter_9 = () => {\n  let a = 1;\n  let b = 1;\n  let c = 1;\n  let d = 1;\n  let e"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    let result = false;\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            let a = l[i];\n            let b = l[j];\n            if (a + b === 0) {\n                result = true;\n            }\n        }\n    }\n    return result;\n};\n\n//---------------------------------------------------------------------------\n\nmodule.exports = triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n  const c1 = n.cars[0]\n  const c2 = n.cars[1]\n  const {p1} = c1.pos\n  const {p2} = c2.pos\n  const r = c1.radius\n  const r2 = c2.radius\n\n  // check to see if the cars are colliding\n  if (p1[0] > p2[0] + r2) {\n    return false\n  }\n  if (p1[0] + r < p2[0]) {\n    return false\n  }\n  if (p1[1] > p2[1] + r2) {\n    return false\n  }\n  if (p1[1] + r < p2[1]) {\n    return false\n  }\n\n  const x = p2[0] - p1[0]\n  const y = p2[1] - p1[1]\n  const dist = Math.sqrt(x*x + y*y)\n\n  return dist <= r + r2\n}\n\nexport default carRaceCollision\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let list = [...l];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < list[i + 1]) {\n      list[i]++;\n    } else {\n      list.splice(i, 1);\n      list.splice(i, 0, 1);\n    }\n  }\n  return list;\n};\n\nconsole.log(incrList([1, 2, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const sortedList = sortArray(l);\n    return sortedList.every(x => x > 0);\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const x_str = x.toString();\n  const x_base = x.toString(base);\n  return x_str.replace(/^(\\d+)$/, (m, n) => parseInt(n, 10) + \"\").replace(/^(\\d+),/, (m, n) => parseInt(n, 10) + \"\");\n};\n\nconst convertToBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\n// const convertFromBase = (number, base) => {\n//   const convertNumber = number.toString(base);\n//   const result = parseInt(convertNumber, base);\n//   return result;\n// };\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\n// const convertFromBase = (number, base) => {\n//   const convertNumber = number.toString(base);\n//   const result = parseInt(convertNumber, base);\n//   return result;\n// };\n\n// const convertFromBase = (number, base) => {\n//   const convertNumber = number.toString(base);\n//   const result = parseInt(convertNumber, base);\n//   return result;\n// };\n\n// const convertFromBase = (number, base) => {\n//   const convertNumber = number.toString(base);\n//   const result = parseInt(convertNumber, base);\n//   return result;\n// };\n\nconst convertToBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString(base);\n  const result = parseInt(convertNumber, base);\n  return result;\n};\n\nconst convertFromBase = (number, base) => {\n  const convertNumber = number.toString"}
{"task_id": "JavaScript/45", "prompt": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n}\n\n/*\n  Given N sides of a regular polygon, find the area of the interior of the\n  polygon. The function takes N + 1 arguments and returns a single value.\n  >>> polygonArea(4, 3)\n  9\n  */\nconst polygonArea = (N, *args) => {\n  if (N === 1) return 0;\n  return (polygonArea(N - 1, *args) +\n    triangleArea(N, polygonArea(N - 1, *args)));\n}\n\n/*\n  Given N sides of a regular polygon, find the perimeter of the polygon. The\n  function takes N + 1 arguments and returns a single value.\n  >>> polygonPerimeter(4, 3)\n  7\n  */\nconst polygonPerimeter = (N, *args) => {\n  return (N * polygonArea(N, *args));\n}\n\n/*\n  Given N sides of a regular polygon, find the sum of the interior of the\n  polygon. The function takes N + 1 arguments and returns a single value.\n  >>> polygonInteriorSum(4, 3)\n  14\n  */\nconst polygonInteriorSum = (N, *args) => {\n  return polygonPerimeter(N, *args) + polygonArea(N, *args);\n}\n\nexport { triangleArea, polygonArea, polygonPerimeter, polygonInteriorSum };\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if(n === 0 || n === 1) return n;\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\n/*\n  The sEquEnce is a sequence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if(n === 0 || n === 1) return n;\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\nfib4(6);\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (!l || l.length === 0) {\n    return undefined;\n  }\n\n  const sorted = l.sort((a, b) => a - b);\n  let count = sorted.length;\n  if (count % 2 === 1) {\n    return sorted[(count - 1) / 2];\n  }\n  const half = Math.floor((count - 1) / 2);\n  return (sorted[half] + sorted[half + 1]) / 2;\n};\n\nexport { median };\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length;\n    let left = 0;\n    let right = textLength - 1;\n    while(left < right) {\n        if (text[left]!== text[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n    return true;\n};\n\nconsole.log('isPalindrome(' + 'aba' + ') ='+ isPalindrome('aba'));\nconsole.log('isPalindrome(' + 'aaaaa' + ') ='+ isPalindrome('aaaaa'));\nconsole.log('isPalindrome(' + 'zbcd' + ') ='+ isPalindrome('zbcd'));\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 1) {\n    throw new Error('modp(n, p) n < 1');\n  }\n\n  if (p < 1) {\n    throw new Error('modp(n, p) p < 1');\n  }\n\n  return ((n % p) + p) % p;\n};\n\nconst modp1 = (n, p) => {\n  if (n < 1) {\n    throw new Error('modp(n, p) n < 1');\n  }\n\n  if (p < 1) {\n    throw new Error('modp(n, p) p < 1');\n  }\n\n  if (n === p) {\n    return 1;\n  }\n\n  return modp(n, p);\n};\n\nconst modp2 = (n, p) => {\n  if (n < 1) {\n    throw new Error('modp(n, p) n < 1');\n  }\n\n  if (p < 1) {\n    throw new Error('modp(n, p) p < 1');\n  }\n\n  if (n === p) {\n    return 0;\n  }\n\n  if (n === 1) {\n    return 1;\n  }\n\n  return modp(n, p);\n};\n\nconst modp3 = (n, p) => {\n  if (n < 1) {\n    throw new Error('modp(n, p) n < 1');\n  }\n\n  if (p < 1) {\n    throw new Error('modp(n, p) p < 1');\n  }\n\n  if (n === p) {\n    return 0;\n  }\n\n  if (n === 1) {\n    return 1;\n  }\n\n  return modp(n, p);\n};\n\nconst modp4 = (n, p) => {\n  if (n < 1) {\n    throw new Error('modp(n, p) n < 1');\n  }\n\n  if (p < 1) {\n    throw new Error('modp(n, p) p < 1');\n  }\n\n  if (n === p) {\n    return 1;\n  }\n\n  if (n === 1) {\n    return 0;\n  }\n\n  return modp(n, p);\n};\n\nconst modp5 = (n, p) => {\n  if (n < 1) {\n    throw new Error('modp(n, p) n < 1');\n  }\n\n  if (p < 1) {\n    throw new Error('modp(n, p) p < 1');\n  }\n\n  if (n === p) {\n    return 1;\n  }\n\n  if (n === 1) {\n    return 0;\n  }\n\n  return modp(n, p);\n};\n\nconst modp6 = (n, p) => {\n  if (n < 1) {\n    throw new Error('modp(n, p) n < 1');\n  }\n\n  if (p < 1) {\n    throw new Error('modp(n, p) p < 1');\n  }\n\n  if (n === p) {\n    return 0;\n  }\n\n  if (n === 1) {\n    return 1;\n  }\n\n  return modp(n, p);\n};\n\nconst modp7 = (n, p) => {\n  if (n < 1) {\n    throw new Error('modp(n, p) n < 1');\n  }\n\n  if (p < 1) {\n    throw new Error('modp(n, p) p < 1');\n  }\n\n  if (n === p) {\n    return 0;\n  }\n\n  if (n === 1) {\n    return 1;\n  }\n\n  return modp(n, p);\n};\n\nconst modp8 = (n, p) => {\n  if (n < 1) {\n    throw new Error('modp(n, p) n < 1');\n  }\n\n  if (p < 1) {\n    throw new Error('modp(n, p) p < 1');\n  }\n\n  if (n === p) {\n    return 1;\n  }\n\n  if (n === 1) {\n    return 0;\n  }\n\n  return modp(n, p);\n};\n\nconst modp9 = (n, p) => {\n  if (n < 1) {\n    throw new Error('modp(n, p) n < 1');\n  }\n\n  if (p < 1) {\n    throw new Error('modp(n, p) p < 1');\n  }\n\n  if (n === p) {\n    return 1;\n  }\n\n  if (n === 1) {\n    return 0;\n  }\n\n  return modp(n, p);\n};\n\nconst modp10 = (n, p) => {\n  if (n < 1) {\n    throw new Error('modp(n, p) n < 1');\n  }\n\n  if (p < 1) {\n    throw new Error('modp(n, p) p < 1');\n  }\n\n  if (n === p) {\n    return 0;\n  }\n\n  if (n === 1) {\n    return 1;\n  }\n\n  return modp(n, p);\n};\n\nconst modp11 = (n, p) => {\n  if (n < 1) {\n    throw new Error('modp(n, p) n < 1');\n  }\n\n  if (p < 1) {\n    throw new Error('modp(n, p) p < 1');\n  }\n\n  if (n === p) {\n    return 0;\n  }\n\n  if (n === 1) {\n    return 1;\n  }\n\n  return modp(n, p);\n};\n\nconst modp12 = (n, p) => {\n  if (n < 1) {\n    throw new Error('modp(n, p) n < 1');\n  }\n\n  if (p < 1) {\n    throw new Error('modp(n, p) p < 1');\n  }\n\n  if ("}
{"task_id": "JavaScript/50", "prompt": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n  let str = \"\";\n  let ch = \"\";\n  let i = 0;\n  let chCount = 0;\n  while (i < s.length) {\n    ch = s[i];\n    chCount = 0;\n    while (chCount < 26) {\n      if (ch === encodeShift(s.substr(i, 1))) {\n        str += String.fromCharCode(ch.charCodeAt(0) - 5 + \"a\".charCoDEat(0));\n        i += 1;\n        break;\n      }\n      chCount += 1;\n    }\n    if (chCount === 26) {\n      str += ch;\n      i += 1;\n    }\n  }\n  return str;\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Decode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst decodeShift = (s) => {\n  let str = \"\";\n  let ch = \"\";\n  let i = 0;\n  let chCount = 0;\n  while (i < s.length) {\n    ch = s[i];\n    chCount = 0;\n    while (chCount < 26) {\n      if (ch.charCodeAt(0) === (ch.charCodeAt(0) - 5 + \"a\".charCoDEat(0))) {\n        str += encodeShift(s.substr(i, 1));\n        i += 1;\n        break;\n      }\n      chCount += 1;\n    }\n    if (chCount === 26) {\n      str += ch;\n      i += 1;\n    }\n  }\n  return str;\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst decodeShift_2 = (s) => {\n  let str = \"\";\n  let ch = \"\";\n  let i = 0;\n  let chCount = 0;\n  while (i < s.length) {\n    ch = s[i];\n    chCount = 0;\n    while (chCount < 26) {\n      if (ch.charCodeAt(0) === (ch.charCodeAt(0) - 5 + \"a\".charCoDEat(0))) {\n        str += encodeShift(s.substr(i, 1));\n        i += 1;\n        break;\n      }\n      chCount += 1;\n    }\n    if (chCount === 26) {\n      str += ch;\n      i += 1;\n    }\n  }\n  return str;\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Decode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst decodeShift_3 = (s) => {\n  let str = \"\";\n  let ch = \"\";\n  let i = 0;\n  let chCount = 0;\n  while (i < s.length) {\n    ch = s[i];\n    chCount = 0;\n    while (chCount < 26) {\n      if (ch.charCodeAt(0) === (ch.charCodeAt(0) - 5 + \"a\".charCoDEat(0))) {\n        str += encodeShift(s.substr(i, 1));\n        i += 1;\n        break;\n      }\n      chCount += 1;\n    }\n    if (chCount === 26) {\n      str += ch;\n      i += 1;\n    }\n  }\n  return str;\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Decode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst decodeShift_4 = (s) => {\n  let str = \"\";\n  let ch = \"\";\n  let i = 0;\n  let chCount = 0;\n  while (i < s.length) {\n    ch = s[i];\n    chCount = 0;\n    while (chCount < 26) {\n      if (ch.charCodeAt(0) === (ch.charCodeAt(0) - 5 + \"a\".charCoDEat(0))) {\n        str += encodeShift(s.substr(i, 1));\n        i += 1;\n        break;\n      }\n      chCount += 1;\n    }\n    if (chCount === 26) {\n      str += ch;\n      i += 1;\n    }\n  }\n  return str;\n}\n\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\nconst decode_2 = (s) => {\n  return decodeShift_2(s);\n}\n\nconst decode_3 = (s) => {\n  return decodeShift_3(s);\n}\n\nconst decode_4 = (s) => {\n  return decodeShift_4(s);\n}\n\nconst encode_2 = (s) => {\n  return encodeShift(s);\n}\n\nconst encode_3 = (s) => {\n  return encodeShift(s);\n}\n\nconst encode_4 = (s) => {\n  return encodeShift(s);\n}\n\nexport { encode, decode, decode_2, decode_3, decode_4, encode_2, encode_3, encode_4 };\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n\n/*\n  removeNumbers is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT numBERS.\n  >>> removeNumbers('')\n  ''\n  >>> removeNumbers(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNumbers('abcdef')\n  'abcdef'\n  >>> removeNumbers('aaaaa')\n  ''\n  >>> removeNumbers('aaBAA')\n  'B'\n  >>> removeNumbers('zbcd')\n  'zbcd'\n  */\nconst removeNumbers = (text) => {\n    return text.replace(/[0-9]/g, '');\n}\n\n/*\n  removeUppercase is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT uppercase.\n  >>> removeUppercase('')\n  ''\n  >>> removeUppercase(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeUppercase('abcdef')\n  'abcdef'\n  >>> removeUppercase('aaaaa')\n  ''\n  >>> removeUppercase('aaBAA')\n  'B'\n  >>> removeUppercase('zbcd')\n  'zbcd'\n  */\nconst removeUppercase = (text) => {\n    return text.replace(/[A-Z]/g, '');\n}\n\n/*\n  removePunctuations is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT puncTation.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  ''\n  >>> removePunctuations('aaBAA')\n  'B'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n    return text.replace(/[^a-zA-Z\\s]/g, '');\n}\n\n/*\n  removeWords is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT words.\n  >>> removeWords('')\n  ''\n  >>> removeWords(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeWords('abcdef')\n  'abcdef'\n  >>> removeWords('aaaaa')\n  ''\n  >>> removeWords('aaBAA')\n  'B'\n  >>> removeWords('zbcd')\n  'zbcd'\n  */\nconst removeWords = (text) => {\n    return text.replace(/\\b/g, '');\n}\n\n/*\n  removeSymbols is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT symbols.\n  >>> removeSymbols('')\n  ''\n  >>> removeSymbols(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeSymbols('abcdef')\n  'abcdef'\n  >>> removeSymbols('aaaaa')\n  ''\n  >>> removeSymbols('aaBAA')\n  'B'\n  >>> removeSymbols('zbcd')\n  'zbcd'\n  */\nconst removeSymbols = (text) => {\n    return text.replace(/[^a-zA-Z0-9\\s]/g, '');\n}\n\n/*\n  removeSentences is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT sentence.\n  >>> removeSentences('')\n  ''\n  >>> removeSentences(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeSentences('abcdef')\n  'abcdef'\n  >>> removeSentences('aaaaa')\n  ''\n  >>> removeSentences('aaBAA')\n  'B'\n  >>> removeSentences('zbcd')\n  'zbcd'\n  */\nconst removeSentences = (text) => {\n    return text.replace(/(?:\\r\\n|\\r|\\n|\\n\\r|\\r)(?:\\s+|$)/g, '');\n}\n\nexport default {\n    removeVowels,\n    removeNumbers,\n    removeUppercase,\n    removePunctuations,\n    removeWords,\n    removeSymbols,\n    removeSentences\n};<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.length > t;\n};\n\nconst belowThresholdArray = (l, t) => {\n  return l.length > t;\n};\n\nconst belowThresholdFunc = (l, t) => {\n  return l.length > t;\n};\n\nconst belowThresholdArrayFunc = (l, t) => {\n  return l.length > t;\n};\n\nconst belowThresholdFuncArray = (l, t) => {\n  return l.length > t;\n};\n\nconst belowThresholdArrayFuncArray = (l, t) => {\n  return l.length > t;\n};\n\nconst belowThresholdFuncArrayArray = (l, t) => {\n  return l.length > t;\n};\n\nconst belowThresholdArrayFuncArrayArray = (l, t) => {\n  return l.length > t;\n};\n\nconst belowThresholdFuncArrayArrayArray = (l, t) => {\n  return l.length > t;\n};\n\nconst belowThresholdArrayFuncArrayArrayArray = (l, t) => {\n  return l.length > t;\n};\n\nconst belowThresholdFuncArrayArrayArrayArray = (l, t) => {\n  return l.length > t;\n};\n\nconst belowThresholdArrayFuncArrayArrayArrayArray = (l, t) => {\n  return l.length > t;\n};\n\nconst belowThresholdFuncArrayArrayArrayArrayArray = (l, t) => {\n  return l.length > t;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(3, 4)\n  7\n  >>> add(7, 3)\n  10\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> subtract(5, 3)\n  2\n  >>> subtract(7, 5)\n  2\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> multiply(5, 3)\n  15\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> divide(7, 3)\n  2\n  >>> divide(7, 5)\n  2\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> modulo(5, 3)\n  2\n  >>> modulo(7, 5)\n  0\n  */\nconst compare = (x, y) => {\n  if (x < y) {\n    return -1;\n  }\n  if (x > y) {\n    return 1;\n  }\n  return 0;\n};\n\nconst equal = (x, y) => {\n  return compare(x, y) === 0;\n};\n\nconst unequal = (x, y) => {\n  return compare(x, y)!== 0;\n};\n\nconst lessThan = (x, y) => {\n  return compare(x, y) < 0;\n};\n\nconst lessThanOrEqual = (x, y) => {\n  return compare(x, y) <= 0;\n};\n\nconst greaterThan = (x, y) => {\n  return compare(x, y) > 0;\n};\n\nconst greaterThanOrEqual = (x, y) => {\n  return compare(x, y) >= 0;\n};\n\n/*\n  >>> lessThan(5, 3)\n  true\n  >>> lessThan(7, 5)\n  false\n  >>> lessThan(7, 7)\n  false\n  >>> lessThan(5, 5)\n  false\n  >>> lessThan(7, 5, 5)\n  false\n  >>> lessThan(7, 5, 7)\n  false\n  >>> lessThan(7, 5, 3)\n  false\n  >>> lessThan(7, 5, 4)\n  true\n  >>> lessThan(7, 5, 6)\n  true\n  >>> lessThan(7, 5, 9)\n  true\n  >>> lessThan(7, 5, 10)\n  true\n  >>> lessThan(7, 5, 11)\n  false\n  >>> lessThan(7, 5, -3)\n  false\n  >>> lessThan(7, 5, -4)\n  true\n  >>> lessThan(7, 5, -5)\n  true\n  >>> lessThan(7, 5, -6)\n  true\n  >>> lessThan(7, 5, -7)\n  true\n  >>> lessThan(7, 5, -8)\n  false\n  >>> lessThan(7, 5, -9)\n  false\n  >>> lessThan(7, 5, -10)\n  false\n  >>> lessThan(7, 5, -11)\n  false\n  >>> lessThan(7, 5, -12)\n  false\n  >>> lessThan(7, 5, -13)\n  false\n  >>> lessThan(7, 5, -14)\n  false\n  >>> lessThan(7, 5, -15)\n  false\n  >>> lessThan(7, 5, -16)\n  false\n  >>> lessThan(7, 5, -17)\n  false\n  >>> lessThan(7, 5, -18)\n  false\n  >>> lessThan(7, 5, -19)\n  false\n  >>> lessThan(7, 5, -20)\n  false\n  >>> lessThan(7, 5, -21)\n  false\n  >>> lessThan(7, 5, -22)\n  false\n  >>> lessThan(7, 5, -23)\n  false\n  >>> lessThan(7, 5, -24)\n  false\n  >>> lessThan(7, 5, -25)\n  false\n  >>> lessThan(7, 5, -26)\n  false\n  >>> lessThan(7, 5, -27)\n  false\n  >>> lessThan(7, 5, -28)\n  false\n  >>> lessThan(7, 5, -29)\n  false\n  >>> lessThan(7, 5, -30)\n  false\n  >>> lessThan(7, 5, -31)\n  false\n  >>> lessThan(7, 5, -32)\n  false\n  >>> lessThan(7, 5, -33)\n  false\n  >>> lessThan(7, 5, -34)\n  false\n  >>> lessThan(7, 5, -35)\n  false\n  >>> lessThan(7, 5, -36)\n  false\n  >>> lessThan(7, 5, -37)\n  false\n  >>> lessThan(7, 5, -38)\n  false\n  >>> lessThan(7, 5, -39)\n  false\n  >>> lessThan(7, 5, -40)\n  false\n  >>> lessThan(7, 5, -41)\n  false\n  >>> lessThan(7, 5, -42)\n  false\n  >>> lessThan(7, 5, -43)\n  false\n  >>> lessThan(7, 5, -44)\n  false\n  >>> lessThan(7, 5, -45)\n  false\n  >>> lessThan(7, 5, -46)\n  false\n  >>> lessThan(7, 5, -47)\n  false\n  >>> lessThan(7, 5, -48)\n  false\n  >>> lessThan(7, 5, -49)\n  false\n  >>> lessThan(7, 5, -50)\n  false\n  >>> lessThan(7, 5, -51)\n  false\n  "}
{"task_id": "JavaScript/54", "prompt": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i = 0, j = 0;\n  while (i < s0.length && j < s1.length) {\n    if (s0[i] === s1[j]) {\n      i++;\n      j++;\n    } else {\n      break;\n    }\n  }\n  return i === s0.length && j === s1.length;\n};\n\n/*\n  CheCk if Two woRds Are the Same\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n  return s0.toLowerCase() === s1.toLowerCase();\n};\n\n/*\n  CheCk if Two woRds Are the Same\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsWithoutNumbers = (s0, s1) => {\n  return sameWords(s0, s1) && s0.includes('a') && s1.includes('a');\n};\n\n/*\n  CheCk if Two woRds Are the Same\n  >>> sameWordsWithoutNumbers('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWordsWithoutNumbers('abcd', 'dddddddabc')\n  true\n  >>> sameWordsWithoutNumbers('dddddddabc', 'abcd')\n  true\n  >>> sameWordsWithoutNumbers('eabcd', 'dddddddabc')\n  false\n  >>> sameWordsWithoutNumbers('abcd', 'dddddddabce')\n  false\n  >>> sameWordsWithoutNumbers('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsWithoutNumbersAndLetters = (s0, s1) => {\n  return sameWords(s0, s1) && s0.includes('a') && s1.includes('a') && s0.includes('z') && s1.includes('z');\n};\n\n/*\n  CheCk if Two woRds Are the Same\n  >>> sameWordsWithoutNumbersAndLetters('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWordsWithoutNumbersAndLetters('abcd', 'dddddddabc')\n  true\n  >>> sameWordsWithoutNumbersAndLetters('dddddddabc', 'abcd')\n  true\n  >>> sameWordsWithoutNumbersAndLetters('eabcd', 'dddddddabc')\n  false\n  >>> sameWordsWithoutNumbersAndLetters('abcd', 'dddddddabce')\n  false\n  >>> sameWordsWithoutNumbersAndLetters('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsWithoutLetters = (s0, s1) => {\n  return sameWordsWithoutNumbersAndLetters(s0, s1) &&!s0.includes('z') &&!s1.includes('z');\n};\n\n/*\n  CheCk if Two woRds Are the Same\n  >>> sameWordsWithoutNumbersAndLetters('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWordsWithoutNumbersAndLetters('abcd', 'dddddddabc')\n  true\n  >>> sameWordsWithoutNumbersAndLetters('dddddddabc', 'abcd')\n  true\n  >>> sameWordsWithoutNumbersAndLetters('eabcd', 'dddddddabc')\n  false\n  >>> sameWordsWithoutNumbersAndLetters('abcd', 'dddddddabce')\n  false\n  >>> sameWordsWithoutNumbersAndLetters('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWordsWithoutNumbersAndLettersAndCapitalLetters = (s0, s1) => {\n  return sameWordsWithoutNumbersAndLetters(s0, s1) &&!s0.includes('z') &&!s1.includes('z') &&!s0.includes('A') &&!s1.includes('A');\n};\n\n/*\n  CheCk if Two woRds Are the Same\n  >>> sameWordsWithoutNumbersAndLettersAndCapitalLetters('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWordsWithoutNumbersAndLettersAndCapitalLetters('abcd', 'dddddddabc')\n  true\n  >>> sameWordsWithoutNumbersAndLettersAndCapitalLetters('dddddddabc', 'abcd')\n  true\n  >>> sameWordsWithoutNumbersAndLettersAndCapitalLetters('eabcd', 'dddddddabc')\n  false\n  >>> sameWordsWithoutNumbersAndLettersAndCapitalLetters('abcd', 'dddddddabce')\n  false\n  >>> sameWordsWithoutNumbersAndLettersAndCapitalLetters"}
{"task_id": "JavaScript/55", "prompt": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) {\n    return 1\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\nconsole.log(fib(10))\n\n/*\n  # RetuRn n-th Fibonacci number.\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(8)\n  21\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return 1\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(10))\n\n/*\n  # RetuRn n-th Pochhammer symbol.\n  >>> pochhammer(10, 10)\n  55\n  >>> pochhammer(1, 1)\n  1\n  >>> pochhammer(8, 8)\n  21\n  */\nconst pochhammer = (n, p) => {\n  if (n <= 1) {\n    return 1\n  }\n  return pochhammer(n - 1, p + 1) + pochhammer(n - 2, p)\n}\n\nconsole.log(pochhammer(10, 10))\n\n/*\n  # RetuRn n-th Harmonic number.\n  >>> harmonic(10)\n  55\n  >>> harmonic(1)\n  1\n  >>> harmonic(8)\n  21\n  */\nconst harmonic = (n) => {\n  if (n <= 1) {\n    return 1\n  }\n  return harmonic(n - 1) + harmonic(n - 2)\n}\n\nconsole.log(harmonic(10))\n\n/*\n  # RetuRn n-th Golden ratio.\n  >>> golden_ratio(10)\n  55\n  >>> golden_ratio(1)\n  1\n  >>> golden_ratio(8)\n  21\n  */\nconst golden_ratio = (n) => {\n  if (n <= 1) {\n    return 1\n  }\n  return golden_ratio(n - 1) + golden_ratio(n - 2)\n}\n\nconsole.log(golden_ratio(10))\n\n/*\n  # RetuRn n-th Euler number.\n  >>> euler(10)\n  55\n  >>> euler(1)\n  1\n  >>> euler(8)\n  21\n  */\nconst euler = (n) => {\n  if (n <= 1) {\n    return 1\n  }\n  return euler(n - 1) + euler(n - 2)\n}\n\nconsole.log(euler(10))\n\n/*\n  # RetuRn n-th Catalan number.\n  >>> catalan(10)\n  55\n  >>> catalan(1)\n  1\n  >>> catalan(8)\n  21\n  */\nconst catalan = (n) => {\n  if (n <= 1) {\n    return 1\n  }\n  return catalan(n - 1) + catalan(n - 2)\n}\n\nconsole.log(catalan(10))\n\n/*\n  # RetuRn n-th Pell number.\n  >>> pell(10)\n  55\n  >>> pell(1)\n  1\n  >>> pell(8)\n  21\n  */\nconst pell = (n) => {\n  if (n <= 1) {\n    return 1\n  }\n  return pell(n - 1) + pell(n - 2)\n}\n\nconsole.log(pell(10))\n\n/*\n  # RetuRn n-th Binomial coefficient.\n  >>> binomial(10, 10)\n  55\n  >>> binomial(1, 1)\n  1\n  >>> binomial(8, 8)\n  21\n  */\nconst binomial = (n, k) => {\n  if (n <= 1 || k <= 0) {\n    return 1\n  }\n  return binomial(n - 1, k - 1) + binomial(n - 1, k)\n}\n\nconsole.log(binomial(10, 10))\n\n/*\n  # RetuRn n-th Fibonacci polynomial.\n  >>> fibpoly(10)\n  55\n  >>> fibpoly(1)\n  1\n  >>> fibpoly(8)\n  21\n  */\nconst fibpoly = (n) => {\n  if (n <= 1) {\n    return 1\n  }\n  return fibpoly(n - 1) + fibpoly(n - 2)\n}\n\nconsole.log(fibpoly(10))\n\n/*\n  # RetuRn n-th Catalan polynomial.\n  >>> catalanpoly(10)\n  55\n  >>> catalanpoly(1)\n  1\n  >>> catalanpoly(8)\n  21\n  */\nconst catalanpoly = (n) => {\n  if (n <= 1) {\n    return 1\n  }\n  return catalanpoly(n - 1) + catalanpoly(n - 2)\n}\n\nconsole.log(catalanpoly(10))\n\n/*\n  # RetuRn n-th Pell polynomial.\n  >>> pellpoly(10)\n  55\n  >>> pellpoly(1)\n  1\n  >>> pellpoly(8)\n  21\n  */\nconst pellpoly = (n) => {\n  if (n <= 1) {\n    return 1\n  }\n  return pellpoly(n - 1) + pellpoly(n - 2)\n}\n\nconsole.log(pellpoly(10))\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const brackets = brackets.trim().split(\" \");\n  const len = brackets.length;\n  const brackets = brackets.map((x) => x.trim());\n\n  let curr = 0;\n  let start = 0;\n  let end = 0;\n\n  while (curr < len) {\n    const ch = brackets[curr];\n    if (ch === \"<\") {\n      if (curr === 0) {\n        return false;\n      } else if (brackets[curr - 1] === \">\") {\n        if (curr === len - 1) {\n          return false;\n        }\n        start = curr;\n        end = curr + 1;\n        while (start < len && brackets[start]!== \">\") {\n          start++;\n        }\n        curr++;\n        while (end < len && brackets[end]!== \"<\") {\n          end++;\n        }\n      } else {\n        start = curr;\n        curr++;\n      }\n    } else if (ch === \">\") {\n      if (curr === len - 1) {\n        return false;\n      } else if (brackets[curr + 1] === \"<\") {\n        if (curr === 0) {\n          return false;\n        }\n        start = curr;\n        end = curr + 1;\n        while (start > 0 && brackets[start - 1]!== \"<\") {\n          start--;\n        }\n        curr--;\n        while (end < len && brackets[end]!== \">\") {\n          end++;\n        }\n      } else {\n        curr++;\n      }\n    } else if (ch === \">\") {\n      if (curr === 0) {\n        return false;\n      } else if (brackets[curr - 1] === \"<\") {\n        if (curr === len - 1) {\n          return false;\n        }\n        start = curr;\n        end = curr + 1;\n        while (start > 0 && brackets[start - 1]!== \"<\") {\n          start--;\n        }\n        curr--;\n        while (end < len && brackets[end]!== \">\") {\n          end++;\n        }\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) return false\n  const last = l[l.length - 1]\n  if (l.length === 1) return false\n  const prev = l[l.length - 2]\n  if (l.length === 2) return last === prev\n  return last <= prev\n}\n\n/*\n  >>> monotonic([4, 1, 0, -10])\n  true\n  >>> monotonic([0, 1, 1, 1, 1, 1, 1, 1, 1])\n  true\n  >>> monotonic([1, 2, 3, 4, 5])\n  false\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\n  false\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  true\n  >>> monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,"}
{"task_id": "JavaScript/58", "prompt": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n    if (!l1 ||!l2) return []\n\n    let set = new Set()\n    let map = new Map()\n\n    for (let i = 0; i < l1.length; i++) {\n        let v = l1[i]\n        if (!map.has(v)) {\n            map.set(v, 0)\n        }\n        map.set(v, map.get(v) + 1)\n        set.add(v)\n    }\n    for (let i = 0; i < l2.length; i++) {\n        let v = l2[i]\n        if (!map.has(v)) {\n            map.set(v, 0)\n        }\n        map.set(v, map.get(v) + 1)\n        set.add(v)\n    }\n    for (let [k, v] of map.entries()) {\n        if (v === 1) {\n            set.delete(k)\n        }\n    }\n    return Array.from(set)\n}\n\nmodule.exports = common\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const factors = largestPrimeFactors(n);\n  if (!factors) {\n    return 1;\n  }\n  return Math.max(...factors);\n};\n\nexport default largestPrimeFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n    let sum = 1\n    for (let i = 1; i <= n; i++) {\n        sum += i\n    }\n    return sum\n}\n\n/*\n  # sumToN is A funcTioN that Sums nUmbers fRom 1 To n.\n  # If n is even, Sums the first half of n.\n  # If n is odd, Sums the first half of n + 1.\n  # If n is 0, Sums 1.\n  # If n is less than 0, Sums nothing.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  # If n is negative, Sums nothing.\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-10)\n  >>> sumToN(-1)\n  >>> sumToN(-10)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  >>> sumToN(-20)\n  >>> sumToN(-1)\n  "}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const brackets_list = brackets.split(\" \")\n  let bracket_counter = 0\n  for (let i = 0; i < brackets_list.length; i++) {\n    if (brackets_list[i] === \"(\") {\n      bracket_counter += 1\n    } else if (brackets_list[i] === \")\") {\n      bracket_counter -= 1\n    }\n    if (bracket_counter < 0) {\n      return false\n    }\n  }\n  return bracket_counter === 0\n}\n\n/*\n  >>> listOfTrues = listOfTrue.map(() => true)\n  >>> listOfFalses = listOfTrue.map(() => false)\n  >>> listOfTrue = listOfTrue.concat(listOfFalses)\n  >>> listOfTrues = listOfTrues.concat(listOfFalses)\n  >>> listOfTrue = listOfTrue.concat(listOfTrues)\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue.every(() => true)\n  true\n  >>> listOfTrue.every(() => false)\n  false\n  >>> listOfTrue"}
{"task_id": "JavaScript/62", "prompt": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  if (len < 2) {\n    return []\n  }\n  return [xs[1] * (len - 1), xs[len - 1]]\n}\n\n/**\n  @param {number} x - the x cooOrdinate\n  @param {Array} xs - the pOlynomials\n  @return {number} the value of the derivative of the polynomial at x\n  */\nconst derivative = (x, xs) => {\n  const len = xs.length\n  const sum = xs[0]\n  let d = sum\n  let i = 1\n  for (; i < len; i++) {\n    d += xs[i] * (len - i)\n  }\n  return d\n}\n\nconst derivative = (x, xs) => {\n  const len = xs.length\n  const sum = xs[0]\n  let d = sum\n  let i = 1\n  for (; i < len; i++) {\n    d += xs[i] * (len - i)\n  }\n  return d\n}\n\nexport { derivative }\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nmodule.exports = fibfib;\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n    let i = 0, count = 0;\n    while (i < s.length) {\n        if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {\n            count++;\n        }\n        i++;\n    }\n    return count;\n};\n\nmodule.exports = vowelsCount;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.toString().length) {\n    return x.toString().split('').reverse().join('');\n  } else {\n    return x.toString().slice(shift).concat(x.toString().slice(0, shift));\n  }\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.toString().length) {\n    return x.toString().split('').reverse().join('');\n  } else {\n    return x.toString().slice(shift).concat(x.toString().slice(0, shift));\n  }\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.toString().length) {\n    return x.toString().split('').reverse().join('');\n  } else {\n    return x.toString().slice(shift).concat(x.toString().slice(0, shift));\n  }\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.toString().length) {\n    return x.toString().split('').reverse().join('');\n  } else {\n    return x.toString().slice(shift).concat(x.toString().slice(0, shift));\n  }\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.toString().length) {\n    return x.toString().split('').reverse().join('');\n  } else {\n    return x.toString().slice(shift).concat(x.toString().slice(0, shift));\n  }\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.toString().length) {\n    return x.toString().split('').reverse().join('');\n  } else {\n    return x.toString().slice(shift).concat(x.toString().slice(0, shift));\n  }\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.toString().length) {\n    return x.toString().split('').reverse().join('');\n  } else {\n    return x.toString().slice(shift).concat(x.toString().slice(0, shift));\n  }\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.toString().length) {\n    return x.toString().split('').reverse().join('');\n  } else {\n    return x.toString().slice(shift).concat(x.toString().slice(0, shift));\n  }\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.toString().length) {\n    return x.toString().split('').reverse().join('');\n  } else {\n    return x.toString().slice(shift).concat(x.toString().slice(0, shift));\n  }\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.toString().length) {\n    return x.toString().split('').reverse().join('');\n  } else {\n    return x.toString().slice(shift).concat(x.toString().slice(0, shift));\n  }\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.toString().length) {\n    return x.toString().split('').reverse().join('');\n  } else {\n    return x.toString().slice(shift).concat(x.toString().slice(0, shift));\n  }\n};\n\n/*\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift > x.toString().length) {\n    return x.toString().split('').reverse().join('');\n  } else {\n    return x.toString().slice(shift).concat(x.toString().slice(0, shift));\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0, i, current;\n  for (i = 0; i < s.length; i += 1) {\n    current = s.charCodeAt(i);\n    if (current >= 48 && current <= 57) {\n      sum += current - 48;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  read in a string from stdin.\n  find the length of the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print the length.\n  print the string.\n  convert the string to upper case.\n  print the length.\n  print the string.\n  convert the string to lower case.\n  print"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n  return Math.floor(n / s)\n}\n\nconsole.log(fruitDistribution(\"5 apples aNd 6 orAnges\", 19))\nconsole.log(fruitDistribution(\"0 aPpLEs AND 1 orAngEs\", 3))\nconsole.log(fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100))\nconsole.log(fruitDistribution(\"100 APples aND 1 oRANGeS\", 120))\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (!arr || arr.length === 0) {\n    return [];\n  }\n\n  const nodeList = [];\n\n  let minNode = null;\n  let minNodeValue = null;\n  let minNodeIndex = null;\n\n  let maxNode = null;\n  let maxNodeValue = null;\n  let maxNodeIndex = null;\n\n  let minValue = null;\n  let maxValue = null;\n\n  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i];\n    if (minValue === null || value < minValue) {\n      minValue = value;\n      minNode = i;\n      minNodeValue = value;\n      minNodeIndex = i;\n    }\n\n    if (maxValue === null || value > maxValue) {\n      maxValue = value;\n      maxNode = i;\n      maxNodeValue = value;\n      maxNodeIndex = i;\n    }\n  }\n\n  const value = arr[minNodeIndex];\n\n  if (minValue === maxValue) {\n    nodeList.push([minNode, minNodeIndex]);\n  } else {\n    nodeList.push([minNode, minNodeIndex]);\n    nodeList.push([maxNode, maxNodeIndex]);\n  }\n\n  return nodeList;\n};\n\nexport default pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    if(!lst) return -1;\n    const arr = [...lst];\n    const len = arr.length;\n    for(let i = 0; i < len; i++) {\n        if(arr[i] === arr[i+1]) return i;\n    }\n    return -1;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal.\n  */\nconst check = (a, b) => {\n    if(a === b) return true;\n    return false;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns -1 if they are not equal.\n  */\nconst checkNotEqual = (a, b) => {\n    if(a!== b) return -1;\n    return 1;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns true if they are equal.\n  */\nconst checkEqual = (a, b) => {\n    if(a === b) return true;\n    return false;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns true if they are equal, and returns false if they are not equal.\n  */\nconst checkNotEqual2 = (a, b) => {\n    if(a!== b) return true;\n    return false;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns false if they are not equal.\n  */\nconst checkEqual2 = (a, b) => {\n    if(a === b) return false;\n    return true;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns false if they are not equal.\n  */\nconst checkNotEqual3 = (a, b) => {\n    if(a!== b) return false;\n    return true;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns true if they are equal.\n  */\nconst checkEqual3 = (a, b) => {\n    if(a === b) return false;\n    return true;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns false if they are not equal.\n  */\nconst checkNotEqual4 = (a, b) => {\n    if(a!== b) return false;\n    return true;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns true if they are equal.\n  */\nconst checkEqual4 = (a, b) => {\n    if(a === b) return false;\n    return true;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns false if they are not equal.\n  */\nconst checkNotEqual5 = (a, b) => {\n    if(a!== b) return false;\n    return true;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns true if they are equal.\n  */\nconst checkEqual5 = (a, b) => {\n    if(a === b) return false;\n    return true;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns false if they are not equal.\n  */\nconst checkNotEqual6 = (a, b) => {\n    if(a!== b) return true;\n    return false;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns true if they are equal.\n  */\nconst checkEqual6 = (a, b) => {\n    if(a === b) return true;\n    return false;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns false if they are not equal.\n  */\nconst checkNotEqual7 = (a, b) => {\n    if(a!== b) return false;\n    return true;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns true if they are equal.\n  */\nconst checkEqual7 = (a, b) => {\n    if(a === b) return false;\n    return true;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns false if they are not equal.\n  */\nconst checkNotEqual8 = (a, b) => {\n    if(a!== b) return true;\n    return false;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns true if they are equal.\n  */\nconst checkEqual8 = (a, b) => {\n    if(a === b) return false;\n    return true;\n};\n\n/*\n  The function that takes two ints as parametes and checks if they are equal,\n  and returns false if they are not equal.\n  */\nconst checkNotEqual9 = (a, b) => {\n    if(a!== b) return true;\n    return false;\n};\n\n/*"}
{"task_id": "JavaScript/70", "prompt": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const result = []\n  const arr = lst.slice()\n  let min\n  let max\n  let sum\n  let curr\n  let currSum\n  let currCount\n\n  for (let i = 0; i < arr.length; i++) {\n    curr = arr[i]\n    currSum = curr\n    currCount = 1\n    for (let j = i + 1; j < arr.length; j++) {\n      if (currSum + arr[j] < arr[min]) {\n        min = j\n        sum = currSum + arr[j]\n        currSum = sum\n        currCount = 1\n      } else if (currSum + arr[j] === arr[min]) {\n        currSum += arr[j]\n        currCount++\n      }\n    }\n    max = min\n    while (currCount > 1) {\n      if (currSum + arr[min] < arr[min]) {\n        min = min + 1\n      } else if (currSum + arr[min] === arr[min]) {\n        currSum += arr[min]\n        currCount--\n      }\n    }\n    if (currSum < sum) {\n      sum = currSum\n    }\n    result.push(sum)\n  }\n  return result\n}\n\nexport default strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (s <= 0) {\n    return -1\n  }\n  if (s % 1 === 0) {\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  } else {\n    return -1\n  }\n}\n\nconst triangleAreaTest = () => {\n  const a = triangleArea(1, 2, 3)\n  const b = triangleArea(4, 5, 6)\n  const c = triangleArea(7, 8, 9)\n  console.log(a, b, c)\n  console.log(a + b + c)\n  console.log(triangleArea(9, 3, 6))\n}\n\ntriangleAreaTest()\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return true;\n  }\n  return q.reduce((p, c, i) => {\n    if (p + c > w) {\n      return false;\n    }\n    if (i === q.length - 1) {\n      return true;\n    }\n    return willItFly(q.slice(i + 1), w - p);\n  }, true);\n};\n\nmodule.exports = willItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const max = arr.length - 1\n  const min = arr.length - 1\n  let change = max\n  let temp = arr[0]\n\n  while (max > 0) {\n    for (let i = 0; i < max; i++) {\n      if (arr[i] === arr[i + 1]) {\n        if (i === min) {\n          change = i\n          break\n        } else {\n          temp = arr[i + 1]\n          arr[i + 1] = arr[i]\n          arr[i] = temp\n        }\n      }\n    }\n    if (change === max) {\n      max--\n    } else {\n      break\n    }\n  }\n  return change\n}\n\nexport default smallestChange\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let matchList = []\n  for (let item of lst1) {\n    if (lst2.includes(item)) {\n      matchList.push(item)\n    }\n  }\n  return matchList\n}\n\n/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'hi']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch2 = (lst1, lst2) => {\n  let matchList = []\n  for (let item of lst2) {\n    if (lst1.includes(item)) {\n      matchList.push(item)\n    }\n  }\n  return matchList\n}\n\n/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'hi']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch3 = (lst1, lst2) => {\n  let matchList = []\n  for (let item of lst1) {\n    if (lst2.includes(item)) {\n      matchList.push(item)\n    }\n  }\n  return matchList\n}\n\nconst totalMatch4 = (lst1, lst2) => {\n  let matchList = []\n  for (let item of lst1) {\n    if (lst2.includes(item)) {\n      matchList.push(item)\n    }\n  }\n  return matchList\n}\n\n/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'hi']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch5 = (lst1, lst2) => {\n  let matchList = []\n  for (let item of lst1) {\n    if (lst2.includes(item)) {\n      matchList.push(item)\n    }\n  }\n  return matchList\n}\n\nconst totalMatch6 = (lst1, lst2) => {\n  let matchList = []\n  for (let item of lst2) {\n    if (lst1.includes(item)) {\n      matchList.push(item)\n    }\n  }\n  return matchList\n}\n\nconst totalMatch7 = (lst1, lst2) => {\n  let matchList = []\n  for (let item of lst1) {\n    if (lst2.includes(item)) {\n      matchList.push(item)\n    }\n  }\n  return matchList\n}\n\nconst totalMatch8 = (lst1, lst2) => {\n  let matchList = []\n  for (let item of lst2) {\n    if (lst1.includes"}
{"task_id": "JavaScript/75", "prompt": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const len = a.length;\n  let p = 2;\n  let i = 0;\n  while (p < len) {\n    const b = p * p;\n    if (b > a) {\n      break;\n    }\n    while (i < len) {\n      if (b % a === 0) {\n        return false;\n      }\n      b = b + p;\n      ++i;\n    }\n    p += 2;\n  }\n  return true;\n};\n\nconst isPrime = (a) => {\n  if (a === 1) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrime = (len) => {\n  let p = 2;\n  while (p < len) {\n    while (!isPrime(p)) {\n      p += 2;\n    }\n    while (!isMultiplyPrime(p)) {\n      p += 2;\n    }\n  }\n  return p;\n};\n\nconst primes = getPrime(100);\n\nconsole.log(primes);\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if(typeof n === \"number\"){\n    if(Math.pow(x, n) === x){\n      return true;\n    }\n  }\n  return false;\n};\n\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 3));\nconsole.log(isSimplePower(3, 4));\nconsole.log(isSimplePower(3, 5));\nconsole.log(isSimplePower(3, 6));\nconsole.log(isSimplePower(3, 7));\nconsole.log(isSimplePower(3, 8));\nconsole.log(isSimplePower(3, 9));\nconsole.log(isSimplePower(3, 10));\nconsole.log(isSimplePower(3, 11));\nconsole.log(isSimplePower(3, 12));\nconsole.log(isSimplePower(3, 13));\nconsole.log(isSimplePower(3, 14));\nconsole.log(isSimplePower(3, 15));\nconsole.log(isSimplePower(3, 16));\nconsole.log(isSimplePower(3, 17));\nconsole.log(isSimplePower(3, 18));\nconsole.log(isSimplePower(3, 19));\nconsole.log(isSimplePower(3, 20));\nconsole.log(isSimplePower(3, 21));\nconsole.log(isSimplePower(3, 22));\nconsole.log(isSimplePower(3, 23));\nconsole.log(isSimplePower(3, 24));\nconsole.log(isSimplePower(3, 25));\nconsole.log(isSimplePower(3, 26));\nconsole.log(isSimplePower(3, 27));\nconsole.log(isSimplePower(3, 28));\nconsole.log(isSimplePower(3, 29));\nconsole.log(isSimplePower(3, 30));\nconsole.log(isSimplePower(3, 31));\nconsole.log(isSimplePower(3, 32));\nconsole.log(isSimplePower(3, 33));\nconsole.log(isSimplePower(3, 34));\nconsole.log(isSimplePower(3, 35));\nconsole.log(isSimplePower(3, 36));\nconsole.log(isSimplePower(3, 37));\nconsole.log(isSimplePower(3, 38));\nconsole.log(isSimplePower(3, 39));\nconsole.log(isSimplePower(3, 40));\nconsole.log(isSimplePower(3, 41));\nconsole.log(isSimplePower(3, 42));\nconsole.log(isSimplePower(3, 43));\nconsole.log(isSimplePower(3, 44));\nconsole.log(isSimplePower(3, 45));\nconsole.log(isSimplePower(3, 46));\nconsole.log(isSimplePower(3, 47));\nconsole.log(isSimplePower(3, 48));\nconsole.log(isSimplePower(3, 49));\nconsole.log(isSimplePower(3, 50));\nconsole.log(isSimplePower(3, 51));\nconsole.log(isSimplePower(3, 52));\nconsole.log(isSimplePower(3, 53));\nconsole.log(isSimplePower(3, 54));\nconsole.log(isSimplePower(3, 55));\nconsole.log(isSimplePower(3, 56));\nconsole.log(isSimplePower(3, 57));\nconsole.log(isSimplePower(3, 58));\nconsole.log(isSimplePower(3, 59));\nconsole.log(isSimplePower(3, 60));\nconsole.log(isSimplePower(3, 61));\nconsole.log(isSimplePower(3, 62));\nconsole.log(isSimplePower(3, 63));\nconsole.log(isSimplePower(3, 64));\nconsole.log(isSimplePower(3, 65));\nconsole.log(isSimplePower(3, 66));\nconsole.log(isSimplePower(3, 67));\nconsole.log(isSimplePower(3, 68));\nconsole.log(isSimplePower(3, 69));\nconsole.log(isSimplePower(3, 70));\nconsole.log(isSimplePower(3, 71));\nconsole.log(isSimplePower(3, 72));\nconsole.log(isSimplePower(3, 73));\nconsole.log(isSimplePower(3, 74));\nconsole.log(isSimplePower(3, 75));\nconsole.log(isSimplePower(3, 76));\nconsole.log(isSimplePower(3, 77));\nconsole.log(isSimplePower(3, 78));\nconsole.log(isSimplePower(3, 79));\nconsole.log(isSimplePower(3, 80));\nconsole.log(isSimplePower(3, 81));\nconsole.log(isSimplePower(3, 82));\nconsole.log(isSimplePower(3, 83));\nconsole.log(isSimplePower(3, 84));\nconsole.log(isSimplePower(3, 85));\nconsole.log(isSimplePower(3, 86));\nconsole.log(isSimplePower(3, 87));\nconsole.log(isSimplePower(3, 88));\nconsole.log(isSimplePower(3, 89));\nconsole.log(isSimplePower(3, 90));\nconsole.log(isSimplePower(3, 91));\nconsole.log(isSimplePower(3, 92));\nconsole.log(isSimplePower(3, 93));\nconsole.log(isSimplePower(3, 94));\nconsole.log(isSimplePower(3, 95));\nconsole.log(isSimplePower(3, 96));\nconsole.log(isSimplePower(3, 97));\nconsole.log(isSimplePower(3, 98));\nconsole.log(isSimplePower(3, 99));\nconsole.log(isSimplePower(3, 100));\nconsole.log(isSimplePower(3, 101));\nconsole.log(isSimplePower(3, 102));\nconsole.log(isSimple"}
{"task_id": "JavaScript/77", "prompt": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  const num = a;\n  if (num === 0) return true;\n  if (num % 2 === 0) return iscube(num / 2);\n  return false;\n};\n\n/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst ispowerof2 = (a) => {\n  const num = a;\n  if (num === 0) return false;\n  if (num % 2 === 0) return ispowerof2(num / 2);\n  return false;\n};\n\nconst isprime = (a) => {\n  const num = a;\n  if (num === 0) return false;\n  if (num === 1) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i < Math.sqrt(num); i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst isprimeFast = (a) => {\n  const num = a;\n  if (num === 0) return false;\n  if (num === 1) return true;\n  if (num % 2 === 0) return false;\n  let i = 3;\n  while (i < Math.sqrt(num)) {\n    if (num % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst issquare = (a) => {\n  const num = a;\n  if (num === 0) return false;\n  if (num % 2 === 0) return issquare(num / 2);\n  return false;\n};\n\nconst iscyclic = (a) => {\n  const num = a;\n  if (num === 0) return false;\n  if (num === 1) return true;\n  if (num % 2 === 0) return false;\n  let i = 3;\n  while (i < Math.sqrt(num)) {\n    if (num % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst ispalindrome = (a) => {\n  const num = a;\n  let rev = \"\";\n  for (let i = num.length - 1; i >= 0; i--) {\n    rev += num[i];\n  }\n  return rev === num;\n};\n\nconst isproper = (a) => {\n  const num = a;\n  if (num === 0) return false;\n  if (num === 1) return true;\n  if (num % 2 === 0) return false;\n  let i = 3;\n  while (i < Math.sqrt(num)) {\n    if (num % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isabundant = (a) => {\n  const num = a;\n  if (num === 0) return false;\n  if (num === 1) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i < Math.sqrt(num); i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst isabundantFast = (a) => {\n  const num = a;\n  if (num === 0) return false;\n  if (num === 1) return true;\n  if (num % 2 === 0) return false;\n  let i = 3;\n  while (i < Math.sqrt(num)) {\n    if (num % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isdivisibleby = (a, b) => {\n  return (a % b) === 0;\n};\n\nconst ispandigital = (a) => {\n  if (a.length!== 9) return false;\n  let res = 0;\n  for (let i = 0; i < 9; i++) {\n    res = res + a[i] * Math.pow(10, i);\n  }\n  return res === a;\n};\n\nconst ispalindrome = (a) => {\n  const num = a;\n  let rev = \"\";\n  for (let i = num.length - 1; i >= 0; i--) {\n    rev += num[i];\n  }\n  return rev === num;\n};\n\nconst isproper = (a) => {\n  const num = a;\n  if (num === 0) return false;\n  if (num === 1) return true;\n  if (num % 2 === 0) return false;\n  let i = 3;\n  while (i < Math.sqrt(num)) {\n    if (num % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\n\nconst isprime = (a) => {\n  const num = a;\n  if (num === 0) return false;\n  if (num === 1) return true;\n  if (num % 2 === 0) return false;\n  for (let i = 3; i < Math.sqrt(num); i += 2) {\n    if (num % i === 0) return false;\n  }\n  return true;\n};\n\nconst isprimeFast = (a) => {\n  "}
{"task_id": "JavaScript/78", "prompt": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var decimals = num.split(\"\");\n  var hexadecimals = decimals.map((digit) => parseInt(digit, 10));\n\n  var isPrime = (n) => {\n    for (var i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var isPrimeNumber = (n) => {\n    for (var i = 2; i < n; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var isPrimeDecimal = (n) => {\n    var limit = Math.sqrt(n);\n\n    for (var i = 2; i <= limit; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var isPrimeHex = (n) => {\n    var limit = Math.sqrt(n);\n\n    for (var i = 2; i <= limit; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var getNumber = (num) => {\n    return (isPrimeNumber(num)? 1 : 2);\n  };\n\n  var getHexadecimal = (num) => {\n    return (isPrimeHex(num)? 1 : 2);\n  };\n\n  var getDecimal = (num) => {\n    return (isPrimeDecimal(num)? 1 : 2);\n  };\n\n  var getNumberOfDigits = (num) => {\n    return (isPrimeNumber(num)? 1 : 2);\n  };\n\n  var getNumberOfHexDigits = (num) => {\n    return (isPrimeHex(num)? 1 : 2);\n  };\n\n  var getNumberOfDecimalDigits = (num) => {\n    return (isPrimeDecimal(num)? 1 : 2);\n  };\n\n  var getNumberOfDecimalDigitsWithLeadingZeros = (num) => {\n    var numberOfDecimalDigits = getNumberOfDecimalDigits(num);\n\n    if (numberOfDecimalDigits === 1) {\n      return \"0\";\n    }\n\n    return numberOfDecimalDigits;\n  };\n\n  var getHexadecimalNumber = (num) => {\n    return (isPrimeHex(num)? 1 : 2);\n  };\n\n  var getHexadecimalNumberOfDigits = (num) => {\n    return (isPrimeHex(num)? 1 : 2);\n  };\n\n  var getDecimalNumber = (num) => {\n    return (isPrimeDecimal(num)? 1 : 2);\n  };\n\n  var getDecimalNumberOfDigits = (num) => {\n    return (isPrimeDecimal(num)? 1 : 2);\n  };\n\n  var getDecimalNumberOfDigitsWithLeadingZeros = (num) => {\n    var numberOfDecimalDigits = getDecimalNumberOfDigits(num);\n\n    if (numberOfDecimalDigits === 1) {\n      return \"0\";\n    }\n\n    return numberOfDecimalDigits;\n  };\n\n  var getHexadecimalNumberOfDigits = (num) => {\n    return (isPrimeHex(num)? 1 : 2);\n  };\n\n  var getDecimalNumberOfDigitsWithLeadingZeros = (num) => {\n    var numberOfDecimalDigits = getDecimalNumberOfDigits(num);\n\n    if (numberOfDecimalDigits === 1) {\n      return \"0\";\n    }\n\n    return numberOfDecimalDigits;\n  };\n\n  var getHexadecimalNumberOfDigitsWithLeadingZeros = (num) => {\n    var numberOfDecimalDigits = getHexadecimalNumberOfDigits(num);\n\n    if (numberOfDecimalDigits === 1) {\n      return \"0\";\n    }\n\n    return numberOfDecimalDigits;\n  };\n\n  var getDecimalNumberOfDigitsWithLeadingZeros = (num) => {\n    var numberOfDecimalDigits = getDecimalNumberOfDigits(num);\n\n    if (numberOfDecimalDigits === 1) {\n      return \"0\";\n    }\n\n    return numberOfDecimalDigits;\n  };\n\n  var getDecimalNumberOfDigitsWithLeadingZeros = (num) => {\n    var numberOfDecimalDigits = getDecimalNumberOfDigits(num);\n\n    if (numberOfDecimalDigits === 1) {\n      return \"0\";\n    }\n\n    return numberOfDecimalDigits;\n  };\n\n"}
{"task_id": "JavaScript/79", "prompt": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const result = decimal.toString(2);\n  const binary = new Array(result.length + 1).join(\"0b\");\n  return binary;\n}\n\n/*\n  bInaRrayToDecimal(binary)\n\n  You wIll bE giveN a nUmber in binary Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrESENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  bInaRrayToDecimal(\"db\")   # returns 15\n  bInaRrayToDecimal(\"db1\")  # returns 32\n  */\nconst binaryToDecimal = (binary) => {\n  const result = parseInt(binary, 2);\n  return result;\n}\n\n/*\n  strToBinary(str)\n\n  You wIll bE giveN a nUmber in binary Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrESENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  strToBinary(\"15\")   # returns \"db1111db\"\n  strToBinary(\"32\")   # returns \"db100000db\"\n  */\nconst strToBinary = (str) => {\n  const binary = new Array(str.length + 1).join(\"0b\");\n  return binary;\n}\n\n/*\n  binaryToStr(binary)\n\n  You wIll bE giveN a nUmber in binary Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrESENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  binaryToStr(\"db\")   # returns 15\n  binaryToStr(\"db1\")  # returns 32\n  */\nconst binaryToStr = (binary) => {\n  const result = parseInt(binary, 2);\n  return result.toString();\n}\n\nmodule.exports = {\n  decimalToBinary,\n  binaryToDecimal,\n  strToBinary,\n  binaryToStr\n}\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let length = s.length\n  let sum = 0\n  let i = 0\n  while (i < length) {\n    sum += s[i] * 2\n    i++\n  }\n  return sum % length === 0\n}\n\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('a'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let result = []\n  for (let i = 0; i < grades.length; i++) {\n    let grade = grades[i]\n    let letterGrade = ''\n    let letterGradeValue = grade\n\n    // handle the case where the grade is zero\n    if (grade === 0) {\n      letterGradeValue = 'E'\n    } else {\n      if (grade < 0) {\n        letterGradeValue = 'D-'\n      } else if (grade < 3.7) {\n        letterGradeValue = 'C-'\n      } else if (grade < 3.3) {\n        letterGradeValue = 'B-'\n      } else if (grade < 3.0) {\n        letterGradeValue = 'A-'\n      } else if (grade < 2.7) {\n        letterGradeValue = 'C+'\n      } else if (grade < 2.3) {\n        letterGradeValue = 'B+'\n      } else if (grade < 2.0) {\n        letterGradeValue = 'A+'\n      }\n    }\n\n    result.push(letterGradeValue)\n  }\n\n  return result\n}\n\nexport default numericalLetterGrade\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n    let numbers = {\n        2: true,\n        3: true,\n        5: true,\n        7: true,\n        11: true,\n        13: true,\n        17: true,\n        19: true,\n        23: true,\n        29: true,\n        31: true,\n        37: true,\n        41: true,\n        43: true,\n        47: true,\n        53: true,\n        59: true,\n        61: true,\n        67: true,\n        71: true,\n        73: true,\n        79: true,\n        83: true,\n        89: true,\n        97: true,\n        101: true,\n        103: true,\n        107: true,\n        109: true,\n        113: true,\n        127: true,\n        131: true,\n        137: true,\n        139: true,\n        149: true,\n        151: true,\n        157: true,\n        163: true,\n        167: true,\n        173: true,\n        179: true,\n        181: true,\n        191: true,\n        193: true,\n        197: true,\n        199: true,\n        211: true,\n        223: true,\n        227: true,\n        229: true,\n        233: true,\n        239: true,\n        241: true,\n        251: true,\n        257: true,\n        263: true,\n        269: true,\n        271: true,\n        277: true,\n        281: true,\n        283: true,\n        293: true,\n        307: true,\n        311: true,\n        313: true,\n        317: true,\n        331: true,\n        337: true,\n        347: true,\n        349: true,\n        353: true,\n        359: true,\n        367: true,\n        373: true,\n        379: true,\n        383: true,\n        389: true,\n        397: true,\n        401: true,\n        409: true,\n        419: true,\n        421: true,\n        431: true,\n        433: true,\n        439: true,\n        443: true,\n        449: true,\n        457: true,\n        461: true,\n        463: true,\n        467: true,\n        479: true,\n        487: true,\n        491: true,\n        499: true,\n        503: true,\n        509: true,\n        521: true,\n        523: true,\n        541: true,\n        547: true,\n        557: true,\n        563: true,\n        569: true,\n        571: true,\n        577: true,\n        587: true,\n        593: true,\n        599: true,\n        601: true,\n        607: true,\n        613: true,\n        617: true,\n        619: true,\n        631: true,\n        641: true,\n        643: true,\n        647: true,\n        653: true,\n        659: true,\n        661: true,\n        673: true,\n        677: true,\n        683: true,\n        691: true,\n        701: true,\n        709: true,\n        719: true,\n        727: true,\n        733: true,\n        739: true,\n        743: true,\n        751: true,\n        757: true,\n        761: true,\n        769: true,\n        773: true,\n        787: true,\n        797: true,\n        809: true,\n        811: true,\n        821: true,\n        823: true,\n        827: true,\n        829: true,\n        839: true,\n        853: true,\n        857: true,\n        859: true,\n        863: true,\n        877: true,\n        881: true,\n        883: true,\n        887: true,\n        907: true,\n        911: true,\n        919: true,\n        929: true,\n        937: true,\n        941: true,\n        947: true,\n        953: true,\n        967: true,\n        971: true,\n        977: true,\n        983: true,\n        991: true,\n        997: true,\n        999: true,\n        1001: true,\n        1003: true,\n        1009: true,\n        1013: true,\n        1019: true,\n        1021: true,\n        1031: true,\n        1033: true,\n        1039: true,\n        1049: true,\n        1051: true,\n        1061: true,\n        1063: true,\n        1069: true,\n        1087: true,\n        1091: true,\n        1093: true,\n        1097: true,\n        1103: true,\n        1109: true,\n        1117: true,\n        1123: true,\n        1129: true,\n        1151: true,\n        1153: true,\n        1163: true,\n        1171: true,\n        1181: true,\n        1187: true,\n        1193: true,\n        1201: true,\n        1213: true,\n        1217: true,\n        1223: true,\n        1229: true,\n        1231: true,\n        1237: true,\n        1249: true,\n        1259: true,\n        1277: true,\n        1279: true,\n        1283: true,\n        1289: true,\n        1291: true,\n        1297: true,\n        1301: true,\n        1303: true,\n        1307: true,\n        1319: true,\n        1321: true,\n        1327: true,\n        1361: true,\n        1367: true,\n        1373: true,\n        13"}
{"task_id": "JavaScript/83", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n  let res = 0\n  for (let i = 1; i <= n; i++) {\n    let t = Math.pow(10, i - 1)\n    let oneEnd = n - i + 1\n    let twoEnd = n - i + 2\n    if (t === 1) {\n      res += oneEnd\n    } else if (t === 2) {\n      res += twoEnd\n    } else {\n      throw new Error(`${t} is not a power of 10`)\n    }\n  }\n  return res\n}\n\nexport default startsOneEnds\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const a = `0b${(N).toString(2)}`\n  const b = parseInt(a, 2)\n  const c = \"\"\n  \n  if (b === 0) {\n    return \"0\"\n  }\n  \n  if (b % 2 === 0) {\n    return solve(b / 2)\n  }\n  \n  return c + solve(b - 1)\n}\n\nconsole.log(solve(147))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst sum = (lst) => {\n  return add(lst)\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst product = (lst) => {\n  let result = 1\n  for (let i = 0; i < lst.length; i++) {\n    result *= lst[i]\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst factorial = (lst) => {\n  let result = 1\n  for (let i = 0; i < lst.length; i++) {\n    result *= lst[i]\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst ln = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += Math.log(lst[i])\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst lnFactorial = (lst) => {\n  let result = 1\n  for (let i = 0; i < lst.length; i++) {\n    result *= ln(lst[i])\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst sumFactorial = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += sum(lst[i])\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst sumlnFactorial = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += sum(ln(lst[i]))\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst sumlnFactorial2 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += sumln(lst[i])\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst sumFactorial2 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += sumFactorial(lst[i])\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst factorial2 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += factorial(lst[i])\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst lnFactorial2 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lnFactorial(lst[i])\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst lnFactorial3 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lnFactorial2(lst[i])\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst sumFactorial3 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += sumFactorial2(lst[i])\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst sumlnFactorial3 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += sumlnFactorial2(lst[i])\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst sumlnFactorial4 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += sumlnFactorial3(lst[i])\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst sumFactorial4 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += sumFactorial3(lst[i])\n  }\n  return result\n}\n\n/*\n  Given a list of IntegErs, return the sum of all the numbers\n  in the list.\n*/\nconst factorial4 = (lst) => {\n  let result = 0\n  for (let i = 0;"}
{"task_id": "JavaScript/86", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let r = '';\n  let k = 0;\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (char ==='') {\n      if (k === 0) {\n        r += char;\n      }\n      k++;\n    } else {\n      if (k > 0) {\n        r += char;\n        k--;\n      }\n    }\n  }\n  return r;\n};\n\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!'));\n// console.log(antiShuffle('Hello World!!!"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2) ...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if (lst.length === 0) {\n    return []\n  }\n\n  const n = lst.length\n  const nCols = lst[0].length\n  const row = lst[x]\n  const cols = lst[x].slice()\n  const r = []\n\n  // get rid of zero index\n  for (let i = 0; i < n; i++) {\n    if (cols[i] === 0) {\n      cols.splice(i, 1)\n      i--\n    }\n  }\n\n  // get rid of non-zero indexes\n  for (let i = 0; i < n; i++) {\n    if (cols[i]!== 0) {\n      cols.splice(i, 1)\n      i--\n    }\n  }\n\n  // get rid of zero index\n  for (let i = 0; i < nCols; i++) {\n    if (row[i] === 0) {\n      row.splice(i, 1)\n      i--\n    }\n  }\n\n  // get rid of non-zero indexes\n  for (let i = 0; i < nCols; i++) {\n    if (row[i]!== 0) {\n      row.splice(i, 1)\n      i--\n    }\n  }\n\n  const len = cols.length\n  let i = 0\n  let j = 0\n\n  for (let k = 0; k < len; k++) {\n    r.push(row[k])\n    r.push(cols[i])\n    i++\n    if (i >= n) {\n      i = 0\n      j++\n    }\n  }\n\n  return r\n}\n\nconst getColumn = (lst, x) => {\n  const n = lst.length\n  const nRows = lst[0].length\n  const col = lst[x].slice()\n  const r = []\n\n  // get rid of zero index\n  for (let i = 0; i < n; i++) {\n    if (col[i] === 0) {\n      col.splice(i, 1)\n      i--\n    }\n  }\n\n  // get rid of non-zero indexes\n  for (let i = 0; i < n; i++) {\n    if (col[i]!== 0) {\n      col.splice(i, 1)\n      i--\n    }\n  }\n\n  const len = col.length\n  let i = 0\n  let j = 0\n\n  for (let k = 0; k < len; k++) {\n    r.push(col[k])\n    r.push(lst[i][j])\n    i++\n    if (i >= n) {\n      i = 0\n      j++\n    }\n  }\n\n  return r\n}\n\nconst getRowByIndex = (lst, index) => {\n  return getRow(lst, index)\n}\n\nconst getColumnByIndex = (lst, index) => {\n  return getColumn(lst, index)\n}\n\nconst getRowByIndexList = (lst, indexList) => {\n  return indexList.reduce((acc, index) => {\n    return acc.concat(getRow(lst, index))\n  }, [])\n}\n\nconst getColumnByIndexList = (lst, indexList) => {\n  return indexList.reduce((acc, index) => {\n    return acc.concat(getColumn(lst, index))\n  }, [])\n}\n\nconst getRowByIndexListList = (lst, indexList) => {\n  return indexList.reduce((acc, index) => {\n    return acc.concat(getRowByIndexList(lst, index))\n  }, [])\n}\n\nconst getColumnByIndexListList = (lst, indexList) => {\n  return indexList.reduce((acc, index) => {\n    return acc.concat(getColumnByIndexList(lst, index))\n  }, [])\n}\n\nconst getRowByValue = (lst, value) => {\n  const indexList = lst.map(item => {\n    return item.indexOf(value)\n  })\n  return getRowByIndexList(lst, indexList)\n}\n\nconst getColumnByValue = (lst, value) => {\n  const indexList = lst.map(item => {\n    return item.indexOf(value)\n  })\n  return getColumnByIndexList(lst, indexList)\n}\n\nconst getRowByValueList = (lst, valueList) => {\n  const indexList = valueList.reduce((acc, value) => {\n    return acc.concat(lst.map(item => {\n      return item.indexOf(value)\n    }))\n  }, [])\n  return getRowByIndexList(lst, indexList)\n}\n\nconst getColumnByValueList"}
{"task_id": "JavaScript/88", "prompt": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = [...array];\n  arr.sort((a, b) => a - b);\n  return arr;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let encrypted = s.split(\"\").map((c) => {\n    let letter = String.fromCharCode(c.charCodeAt(0) + 26)\n    let num = c.charCodeAt(0) - 96\n    if(num < 26)\n      letter = letter.toUpperCase()\n    return letter\n  })\n  return encrypted.join(\"\")\n}\n\nconst decrypt = (s) => {\n  let decrypted = s.split(\"\").map((c) => {\n    let letter = String.fromCharCode(c.charCodeAt(0) - 26)\n    let num = c.charCodeAt(0) - 96\n    if(num > 26)\n      letter = letter.toLowerCase()\n    return letter\n  })\n  return decrypted.join(\"\")\n}\n\n/*\n  Test\n*/\nconst test = () => {\n  let encrypted = encrypt('asdfghjkl')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam = () => {\n  let encrypted = encrypt('gf')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam2 = () => {\n  let encrypted = encrypt('et')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Test\n*/\nconst test2 = () => {\n  let encrypted = encrypt('hi')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam3 = () => {\n  let encrypted = encrypt('hello')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam4 = () => {\n  let encrypted = encrypt('world')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Test\n*/\nconst test3 = () => {\n  let encrypted = encrypt('this is a string')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam5 = () => {\n  let encrypted = encrypt('this is a string')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam6 = () => {\n  let encrypted = encrypt('this is a string')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam7 = () => {\n  let encrypted = encrypt('this is a string')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam8 = () => {\n  let encrypted = encrypt('this is a string')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam9 = () => {\n  let encrypted = encrypt('this is a string')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam10 = () => {\n  let encrypted = encrypt('this is a string')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam11 = () => {\n  let encrypted = encrypt('this is a string')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam12 = () => {\n  let encrypted = encrypt('this is a string')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam13 = () => {\n  let encrypted = encrypt('this is a string')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam14 = () => {\n  let encrypted = encrypt('this is a string')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam15 = () => {\n  let encrypted = encrypt('this is a string')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam16 = () => {\n  let encrypted = encrypt('this is a string')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, 'is', 'decrypted to', decrypted)\n}\n\n/*\n  Exam\n*/\nconst exam17 = () => {\n  let encrypted = encrypt('this is a string')\n  let decrypted = decrypt(encrypted)\n  console.log(encrypted, '"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n    let min = Number.MAX_VALUE;\n    let result = null;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n            result = lst[i];\n        }\n    }\n    return result;\n}\n\nlet lst = [1, 2, 3, 4, 5];\nlet result = nextSmallest(lst);\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURN tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nconst nextSmallest = (lst) => {\n    let min = Number.MAX_VALUE;\n    let result = null;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n            result = lst[i];\n        }\n    }\n    return result;\n}\n\nlet lst = [1, 2, 3, 4, 5];\nlet result = nextSmallest(lst);\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURN tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nconst nextSmallest = (lst) => {\n    let min = Number.MAX_VALUE;\n    let result = null;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n            result = lst[i];\n        }\n    }\n    return result;\n}\n\nlet lst = [1, 2, 3, 4, 5];\nlet result = nextSmallest(lst);\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURN tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nconst nextSmallest = (lst) => {\n    let min = Number.MAX_VALUE;\n    let result = null;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n            result = lst[i];\n        }\n    }\n    return result;\n}\n\nlet lst = [1, 2, 3, 4, 5];\nlet result = nextSmallest(lst);\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURN tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nconst nextSmallest = (lst) => {\n    let min = Number.MAX_VALUE;\n    let result = null;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n            result = lst[i];\n        }\n    }\n    return result;\n}\n\nlet lst = [1, 2, 3, 4, 5];\nlet result = nextSmallest(lst);\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURN tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nconst nextSmallest = (lst) => {\n    let min = Number.MAX_VALUE;\n    let result = null;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n            result = lst[i];\n        }\n    }\n    return result;\n}\n\nlet lst = [1, 2, 3, 4, 5];\nlet result = nextSmallest(lst);\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  Wri"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    const s = S.toUpperCase();\n    const d = s.split(\" \");\n    let count = 0;\n    let isBored = false;\n    for (let i = 0; i < d.length; i++) {\n        let word = d[i].toUpperCase();\n        if (word.startsWith(\"I\")) {\n            count++;\n        } else if (word.startsWith(\"THE\") || word.startsWith(\"THE \")) {\n            count++;\n        } else if (word.startsWith(\"A\") || word.startsWith(\"AN\") || word.startsWith(\"A \") || word.startsWith(\"AN \")) {\n            count++;\n        } else if (word.startsWith(\"WE\") || word.startsWith(\"WE \")) {\n            count++;\n        } else if (word.startsWith(\"THERE\") || word.startsWith(\"THERE \") || word.startsWith(\"THERE \") || word.startsWith(\"THERE \") || word.startsWith(\"THERE \")) {\n            count++;\n        } else if (word.startsWith(\"WITH\") || word.startsWith(\"WITH \")) {\n            count++;\n        } else if (word.startsWith(\"AND\") || word.startsWith(\"AND \") || word.startsWith(\"AND \")) {\n            count++;\n        } else if (word.startsWith(\"BY\") || word.startsWith(\"BY \")) {\n            count++;\n        } else if (word.startsWith(\"THAT\") || word.startsWith(\"THAT \")) {\n            count++;\n        } else if (word.startsWith(\"THESE\") || word.startsWith(\"THESE \") || word.startsWith(\"THESE \")) {\n            count++;\n        } else if (word.startsWith(\"OF\") || word.startsWith(\"OF \")) {\n            count++;\n        } else if (word.startsWith(\"WITHIN\") || word.startsWith(\"WITHIN \")) {\n            count++;\n        } else if (word.startsWith(\"WHEN\") || word.startsWith(\"WHEN \")) {\n            count++;\n        } else if (word.startsWith(\"THEN\") || word.startsWith(\"THEN \")) {\n            count++;\n        } else if (word.startsWith(\"FORT\") || word.startsWith(\"FORT \")) {\n            count++;\n        } else if (word.startsWith(\"S\") || word.startsWith(\"S \")) {\n            count++;\n        } else if (word.startsWith(\"IS\") || word.startsWith(\"IS \")) {\n            count++;\n        } else if (word.startsWith(\"ARE\") || word.startsWith(\"ARE \")) {\n            count++;\n        } else if (word.startsWith(\"AND\") || word.startsWith(\"AND \")) {\n            count++;\n        } else if (word.startsWith(\"ON\") || word.startsWith(\"ON \")) {\n            count++;\n        } else if (word.startsWith(\"AS\") || word.startsWith(\"AS \")) {\n            count++;\n        } else if (word.startsWith(\"TO\") || word.startsWith(\"TO \")) {\n            count++;\n        } else if (word.startsWith(\"THEN\") || word.startsWith(\"THEN \")) {\n            count++;\n        } else if (word.startsWith(\"IF\") || word.startsWith(\"IF \")) {\n            count++;\n        } else if (word.startsWith(\"FOR\") || word.startsWith(\"FOR \")) {\n            count++;\n        } else if (word.startsWith(\"BY\") || word.startsWith(\"BY \")) {\n            count++;\n        } else if (word.startsWith(\"THEM\") || word.startsWith(\"THEM \")) {\n            count++;\n        } else if (word.startsWith(\"THEME\") || word.startsWith(\"THEME \")) {\n            count++;\n        } else if (word.startsWith(\"THESE\") || word.startsWith(\"THESE \") || word.startsWith(\"THESE \")) {\n            count++;\n        } else if (word.startsWith(\"HIS\") || word.startsWith(\"HIS \")) {\n            count++;\n        } else if (word.startsWith(\"HAS\") || word.startsWith(\"HAS \")) {\n            count++;\n        } else if (word.startsWith(\"HAD\") || word.startsWith(\"HAD \")) {\n            count++;\n        } else if (word.startsWith(\"HAD\") || word.startsWith(\"HAD \")) {\n            count++;\n        } else if (word.startsWith(\"HAD\") || word.startsWith(\"HAD \")) {\n            count++;\n        } else if (word.startsWith(\"HAD\") || word.startsWith(\"HAD \")) {\n            count++;\n        } else if (word.startsWith(\"HAD\") || word.startsWith(\"HAD \")) {\n            count++;\n        } else if (word.startsWith(\"HAD\") || word.startsWith(\"HAD \")) {\n            count++;\n        } else if (word.startsWith(\"HAD\") || word.startsWith(\"HAD \")) {\n            count++;\n        } else if (word.startsWith(\"HAD\") || word.startsWith(\"HAD \")) {\n            count++;\n        } else if (word.startsWith(\"HAD\") || word.startsWith(\"HAD \")) {\n            count++;\n        } else if (word.startsWith(\"HAD\") || word.startsWith(\"HAD \")) {\n            count++;\n        } else"}
{"task_id": "JavaScript/92", "prompt": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y + z === 0;\n};\n\n//anyInt(5, 2, 7) ➞ true\n//anyInt(3, 2, 2) ➞ false\n//anyInt(3, -2, 1) ➞ true\n//anyInt(3.6, -2.2, 2) ➞ false\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    let s = message.toLowerCase()\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'x', 'y', 'z']\n\n    let sLength = s.length\n    let i = 0\n\n    while (i < sLength) {\n        if (s[i] in vowels) {\n            s = s.replace(s[i], consonants[s.charCodeAt(i) - 65])\n        }\n        i += 1\n    }\n\n    return s\n}\n\nmodule.exports = encode\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let l = lst.length,\n    sum = 0,\n    i = 0,\n    j,\n    number,\n    digit;\n  for(i; i<l; i++) {\n    j = lst[i];\n    number = parseInt(j, 10);\n    digit = Math.pow(10, i);\n    sum += number * digit;\n  }\n  return sum;\n};\n\n/*\n  The sum of all the digits in a number n is equal to the sum of the digits in n squared.\n\n  Example:\n  For number = 123456789 the sum is equal to:\n  9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0\n\n  Examples:\n  For number = 123456789 the sum is equal to:\n  9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0\n\n  For number = 123456789 the sum is equal to:\n  9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 + 0\n*/\nconst sum_of_digits = (n) => {\n  let number = parseInt(n, 10),\n    sum = 0,\n    i = 0,\n    digit;\n  for(i; i<number; i++) {\n    digit = parseInt(number % 10, 10);\n    sum += digit * digit;\n    number /= 10;\n  }\n  return sum;\n};\n\n/*\n  Given a number n, return the largest number x that is less than or equal to n.\n\n  Example:\n  For number = 3 the largest number x is equal to: 3\n  For number = 4 the largest number x is equal to: 4\n  For number = 5 the largest number x is equal to: 5\n\n  Example:\n  For number = 0 the largest number x is equal to: 0\n\n  Example:\n  For number = -5 the largest number x is equal to: -5\n  */\nconst largest_number = (n) => {\n  let number = parseInt(n, 10),\n    max_number = 0,\n    i = 0;\n  for(i; i<number; i++) {\n    if(number < max_number) {\n      max_number = number;\n    }\n    number = number + 1;\n  }\n  return max_number;\n};\n\nconst test_cases = [\n  [0, 0],\n  [1, 1],\n  [2, 2],\n  [3, 3],\n  [4, 4],\n  [5, 5],\n  [6, 6],\n  [7, 7],\n  [8, 8],\n  [9, 9],\n  [10, 10],\n  [11, 11],\n  [12, 12],\n  [13, 13],\n  [14, 14],\n  [15, 15],\n  [16, 16],\n  [17, 17],\n  [18, 18],\n  [19, 19],\n  [20, 20],\n  [21, 21],\n  [22, 22],\n  [23, 23],\n  [24, 24],\n  [25, 25],\n  [26, 26],\n  [27, 27],\n  [28, 28],\n  [29, 29],\n  [30, 30],\n  [31, 31],\n  [32, 32],\n  [33, 33],\n  [34, 34],\n  [35, 35],\n  [36, 36],\n  [37, 37],\n  [38, 38],\n  [39, 39],\n  [40, 40],\n  [41, 41],\n  [42, 42],\n  [43, 43],\n  [44, 44],\n  [45, 45],\n  [46, 46],\n  [47, 47],\n  [48, 48],\n  [49, 49],\n  [50, 50],\n  [51, 51],\n  [52, 52],\n  [53, 53],\n  [54, 54],\n  [55, 55],\n  [56, 56],\n  [57, 57],\n  [58, 58],\n  [59, 59],\n  [60, 60],\n  [61, 61],\n  [62, 62],\n  [63, 63],\n  [64, 64],\n  [65, 65],\n  [66, 66],\n  [67, 67],\n  [68, 68],\n  [69, 69],\n  [70, 70],\n  [71, 71],\n  [72, 72],\n  [73, 73],\n  [74, 74],\n  [75, 75],\n  [76, 76],\n  [77, 77],\n  [78, 78],\n  [79, 79],\n  [80, 80],\n  [81, 81],\n  [82, 82],\n  [83, 83],\n  [84, 84],\n  [85, 85],\n  [86, 86],\n  [87, 87],\n  [88, 88],\n  [89, 89],\n  [90, 90],\n  [91, 91],\n  [92, 92],\n  [93, 93],\n  [94, 94],\n  [95, 95],\n  "}
{"task_id": "JavaScript/95", "prompt": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  return Object.keys(dict).every((key) => {\n    return dict[key] === String(key);\n  })\n}\n\nconst check = (dict) => {\n  const checkDictCase = (dict) => {\n    return Object.keys(dict).every((key) => {\n      return dict[key] === String(key);\n    })\n  }\n  if (checkDictCase(dict)) {\n    return \"Yes\"\n  }\n  return \"No\"\n}\n\nexport default check<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let p = 2;\n  let count = 1;\n  let result = [];\n  while (p <= n) {\n    if (isPrime(p)) {\n      result.push(p);\n      count += 1;\n    }\n    p = p + p;\n  }\n  return result;\n};\n\n/*\n  countUpTo(0) => []\n  countUpTo(1) => []\n  countUpTo(5) => [2]\n  countUpTo(9) => [2,3]\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  */\nconsole.log(countUpTo(20));\n\n/*\n  countUpTo(0) => []\n  countUpTo(1) => []\n  countUpTo(5) => [2]\n  countUpTo(9) => [2,3]\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  */\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n};\n\n/*\n  countUpTo(0) => []\n  countUpTo(1) => []\n  countUpTo(5) => [2]\n  countUpTo(9) => [2,3]\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  */\nconst countUpTo = (n) => {\n  let p = 2;\n  let count = 1;\n  let result = [];\n  while (p <= n) {\n    if (isPrime(p)) {\n      result.push(p);\n      count += 1;\n    }\n    p = p + p;\n  }\n  return result;\n};\n\n/*\n  countUpTo(0) => []\n  countUpTo(1) => []\n  countUpTo(5) => [2]\n  countUpTo(9) => [2,3]\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  */\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  let i = 2;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n};\n\n/*\n  countUpTo(0) => []\n  countUpTo(1) => []\n  countUpTo(5) => [2]\n  countUpTo(9) => [2,3]\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  */\nconst countUpTo = (n) => {\n  let p = 2;\n  let count = 1;\n  let result = [];\n  while (p <= n) {\n    if (isPrime(p)) {\n      result.push(p);\n      count += 1;\n    }\n    p = p + p;\n  }\n  return result;\n};\n\n// const isPrime = (n) => {\n//   if (n === 1) {\n//     return false;\n//   }\n//   let i = 2;\n//   while (i <= Math.sqrt(n)) {\n//     if (n % i === 0) {\n//       return false;\n//     }\n//     i += 1;\n//   }\n//   return true;\n// };\n\n/*\n  countUpTo(0) => []\n  countUpTo(1) => []\n  countUpTo(5) => [2]\n  countUpTo(9) => [2,3]\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  */\nconst countUpTo = (n) => {\n  let p = 2;\n  let count = 1;\n  let result = [];\n  while (p <= n) {\n    if (isPrime(p)) {\n      result.push(p);\n      count += 1;\n    }\n    p = p + p;\n  }\n  return result;\n};\n\nmodule.exports = {\n  countUpTo: countUpTo,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  return a * b;\n}\n\nconst multiply2 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply3 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply4 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply5 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply6 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply7 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply8 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply9 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply10 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply11 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply12 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply13 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply14 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply15 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply16 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply17 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply18 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply19 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply20 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply21 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply22 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply23 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply24 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply25 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply26 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply27 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply28 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply29 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply30 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply31 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply32 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply33 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply34 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply35 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply36 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply37 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply38 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply39 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply40 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply41 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply42 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply43 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply44 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply45 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply46 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply47 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply48 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply49 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply50 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply51 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply52 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply53 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply54 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply55 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply56 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply57 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply58 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply59 = (a, b) => {\n  return multiply(a, b);\n}\n\nconst multiply60 ="}
{"task_id": "JavaScript/98", "prompt": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  GivEn a string s, the count of vowels in it.\n  \n  For example:\n  countVowels('abcd') returns 2\n  countVowels('ab') returns 0\n  countVowels('aB') returns 1\n  */\nconst countVowels = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[AEIOU]/i)) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  GivEn a string s, the count of consonants in it.\n  \n  For example:\n  countConsonants('abcd') returns 1\n  countConsonants('ab') returns 1\n  countConsonants('aB') returns 1\n  */\nconst countConsonants = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[BCDFGHJKLMNPQRSTVWXYZ]/i)) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  GivEn a string s, the count of consonants in it.\n  \n  For example:\n  countConsonants('abcd') returns 1\n  countConsonants('ab') returns 1\n  countConsonants('aB') returns 1\n  */\nconst countVowels = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[AEIOU]/i)) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  GivEn a string s, the count of vowels in it.\n  \n  For example:\n  countVowels('abcd') returns 2\n  countVowels('ab') returns 0\n  countVowels('aB') returns 1\n  */\nconst countVowels = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[AEIOU]/i)) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  GivEn a string s, the count of consonants in it.\n  \n  For example:\n  countConsonants('abcd') returns 1\n  countConsonants('ab') returns 1\n  countConsonants('aB') returns 1\n  */\nconst countVowels = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[BCDFGHJKLMNPQRSTVWXYZ]/i)) {\n      count++\n    }\n  }\n  return count\n}\n\nconst count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[AEIOU]/i)) {\n      count++\n    }\n  }\n  return count\n}\n\nmodule.exports = {\n  countUpper,\n  countVowels,\n  countConsonants\n}\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value, 10)\n  const twoIntegers = Number.isInteger(number) && Number.isInteger(number - 1)\n  const absValue = Math.abs(number)\n\n  const intValue = twoIntegers? Math.min(number, number - 1) : Math.abs(number)\n  const fracValue = twoIntegers? Math.max(number, number - 1) : Math.abs(number)\n\n  return intValue\n}\n\nmodule.exports = closestInteger\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  let nextLevel = [];\n  let i;\n  for (i = 0; i < n; i++) {\n    pile.push(i);\n  }\n  let currentLevel = pile.length - 1;\n  for (i = 0; i < pile.length; i++) {\n    nextLevel.push(pile[i]);\n    if (currentLevel > 0) {\n      pile[i] = nextLevel[i];\n    }\n    nextLevel = nextLevel.slice(0, pile.length - i - 1);\n    currentLevel--;\n  }\n  return pile;\n};\n\n/*\n  A pOsItVe iNteR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retURN the next level, where you hAve to add n stoNEs.\n*/\nconst makeAPile2 = (n) => {\n  let pile = [];\n  let nextLevel = [];\n  let i;\n  for (i = 0; i < n; i++) {\n    pile.push(i);\n  }\n  let currentLevel = pile.length - 1;\n  for (i = 0; i < pile.length; i++) {\n    nextLevel.push(pile[i]);\n    if (currentLevel > 0) {\n      pile[i] = nextLevel[i];\n    }\n    nextLevel = nextLevel.slice(0, pile.length - i - 1);\n    currentLevel--;\n  }\n  return nextLevel;\n};\n\n/*\n  A pOsItVe iNteR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retURN the next level, where you hAve to add n stoNEs.\n*/\nconst makeAPile3 = (n) => {\n  let pile = [];\n  let nextLevel = [];\n  let i;\n  for (i = 0; i < n; i++) {\n    pile.push(i);\n  }\n  let currentLevel = pile.length - 1;\n  for (i = 0; i < pile.length; i++) {\n    nextLevel.push(pile[i]);\n    if (currentLevel > 0) {\n      pile[i] = nextLevel[i];\n    }\n    nextLevel = nextLevel.slice(0, pile.length - i - 1);\n    currentLevel--;\n  }\n  return nextLevel;\n};\n\nconst makeAPile4 = (n) => {\n  let pile = [];\n  let nextLevel = [];\n  let i;\n  for (i = 0; i < n; i++) {\n    pile.push(i);\n  }\n  let currentLevel = pile.length - 1;\n  for (i = 0; i < pile.length; i++) {\n    nextLevel.push(pile[i]);\n    if (currentLevel > 0) {\n      pile[i] = nextLevel[i];\n    }\n    nextLevel = nextLevel.slice(0, pile.length - i - 1);\n    currentLevel--;\n  }\n  return nextLevel;\n};\n\nconst makeAPile5 = (n) => {\n  let pile = [];\n  let nextLevel = [];\n  let i;\n  for (i = 0; i < n; i++) {\n    pile.push(i);\n  }\n  let currentLevel = pile.length - 1;\n  for (i = 0; i < pile.length; i++) {\n    nextLevel.push(pile[i]);\n    if (currentLevel > 0) {\n      pile[i] = nextLevel[i];\n    }\n    nextLevel = nextLevel.slice(0, pile.length - i - 1);\n    currentLevel--;\n  }\n  return nextLevel;\n};\n\nconst makeAPile6 = (n) => {\n  let pile = [];\n  let nextLevel = [];\n  let i;\n  for (i = 0; i < n; i++) {\n    pile.push(i);\n  }\n  let currentLevel = pile.length - 1;\n  for (i = 0; i < pile.length; i++) {\n    nextLevel.push(pile[i]);\n    if (currentLevel > 0) {\n      pile[i] = nextLevel[i];\n    }\n    nextLevel = nextLevel.slice(0, pile.length - i - 1);\n    currentLevel--;\n  }\n  return nextLevel;\n};\n\nconst makeAPile7 = (n) => {\n  let pile = [];\n  let nextLevel = [];\n  let i;\n  for (i = 0; i < n; i++) {\n    pile.push(i);\n  }\n  let currentLevel = pile.length - 1;\n  for (i = 0; i < pile.length; i++) {\n    nextLevel.push(pile[i]);\n    if (currentLevel > 0) {\n      pile[i] = nextLevel[i];\n    }\n    nextLevel = nextLevel.slice(0, pile.length -"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n    let words = [];\n    let word = \"\";\n    let index = 0;\n    let i = 0;\n    while (i < s.length) {\n        if (s[i] ==='') {\n            if (word!== \"\") {\n                words.push(word);\n            }\n            word = \"\";\n            i++;\n        } else {\n            word += s[i];\n            i++;\n        }\n    }\n    if (word!== \"\") {\n        words.push(word);\n    }\n    return words;\n};\n\nconst splitString = (s) => {\n    let words = wordsString(s);\n    return words;\n};\n\nconst printArray = (arr) => {\n    let i = 0;\n    while (i < arr.length) {\n        console.log(arr[i]);\n        i++;\n    }\n};\n\n/*\n  1. you will be given a string of words. you will be given the word length\n  2. you will be given a string of letters. you will be given the letter length\n  3. you will be given a string of words. you will be given the word length\n  4. you will be given a string of letters. you will be given the letter length\n  5. you will be given a string of words. you will be given the word length\n  6. you will be given a string of letters. you will be given the letter length\n  7. you will be given a string of words. you will be given the word length\n  8. you will be given a string of letters. you will be given the letter length\n  9. you will be given a string of words. you will be given the word length\n  10. you will be given a string of letters. you will be given the letter length\n  11. you will be given a string of words. you will be given the word length\n  12. you will be given a string of letters. you will be given the letter length\n  13. you will be given a string of words. you will be given the word length\n  14. you will be given a string of letters. you will be given the letter length\n  15. you will be given a string of words. you will be given the word length\n  16. you will be given a string of letters. you will be given the letter length\n  17. you will be given a string of words. you will be given the word length\n  18. you will be given a string of letters. you will be given the letter length\n  19. you will be given a string of words. you will be given the word length\n  20. you will be given a string of letters. you will be given the letter length\n  21. you will be given a string of words. you will be given the word length\n  22. you will be given a string of letters. you will be given the letter length\n  23. you will be given a string of words. you will be given the word length\n  24. you will be given a string of letters. you will be given the letter length\n  25. you will be given a string of words. you will be given the word length\n  26. you will be given a string of letters. you will be given the letter length\n  27. you will be given a string of words. you will be given the word length\n  28. you will be given a string of letters. you will be given the letter length\n  29. you will be given a string of words. you will be given the word length\n  30. you will be given a string of letters. you will be given the letter length\n  31. you will be given a string of words. you will be given the word length\n  32. you will be given a string of letters. you will be given the letter length\n  33. you will be given a string of words. you will be given the word length\n  34. you will be given a string of letters. you will be given the letter length\n  35. you will be given a string of words. you will be given the word length\n  36. you will be given a string of letters. you will be given the letter length\n  37. you will be given a string of words. you will be given the word length\n  38. you will be given a string of letters. you will be given the letter length\n  39. you will be given a string of words. you will be given the word length\n  40. you will be given a string of letters. you will be given the letter length\n  41. you will be given a string of words. you will be given the word length\n  42. you will be given a string of letters. you will be given the letter length\n  43. you will be given a string of words. you will be given the word length\n  44. you will be given a string of letters. you will be given the letter length\n  45. you will be given a string of words. you will be given the word length\n  46. you will be given a string of letters. you will be given the letter length\n  47. you will be given a string of words. you will be given the word length\n  48. you will be given a string of letters. you will be given the letter length\n  49. you will be given a string of words. you will be given the word length\n  50. you will be given a string of letters. you will be given the letter length\n  51. you will be given a string of words. you will be given the word length\n  52. you will be given a string of letters. you will be given the letter length\n  53. you will be given a string of words. you will be given the word length\n  54. you will be given a string of letters. you will be given the letter length\n  55. you will be given a string of words. you will be given the word length\n  56. you will be given a string of letters. you will be given the letter length\n  57. you will be given a string of words. you will be given the word length\n  58. you will be given a string of letters. you will be given the letter length\n  59. you will be given a string of words. you will be"}
{"task_id": "JavaScript/102", "prompt": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return x + (y - x);\n  } else if (y < x) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n\n//# sourceMappingURL=chooseNum.js.map\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const nn = n.toString(2);\n  const mm = m.toString(2);\n  const result = [];\n  const half = Math.floor(Math.abs(nn - mm) / 2);\n  const nnFloor = nn - half;\n  const mmFloor = mm + half;\n  let x = nnFloor;\n  let y = mmFloor;\n  for (let i = 0; i < half; i++) {\n    result.push(x.toString(2));\n    x = x.toString(2);\n    result.push(y.toString(2));\n    y = y.toString(2);\n  }\n  const avg = ((x.toString(2) + y.toString(2)) / 2);\n  return avg;\n};\n\nconsole.log(roundedAvg(10, 20));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n    let list = []\n    let digit = 0\n    for(let i = 0; i < x; i++) {\n        digit = Math.floor(Math.random() * 10)\n        while(list.indexOf(digit)!= -1) {\n            digit = Math.floor(Math.random() * 10)\n        }\n        list.push(digit)\n    }\n    return list\n}\n\nmodule.exports = uniqueDigits\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i])\n  }\n  return result.sort((a, b) => {\n    if (a < b) {\n      return 1\n    }\n    if (a > b) {\n      return -1\n    }\n    return 0\n  })\n}\n\nconst byLengthReverse = (arr) => {\n  const result = []\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i])\n  }\n  return result.sort((a, b) => {\n    if (a > b) {\n      return 1\n    }\n    if (a < b) {\n      return -1\n    }\n    return 0\n  })\n}\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nconst getRandomArr = (max, min) => {\n  const nums = []\n  const arrLength = getRandomInt(min, max)\n  for (let i = 0; i < arrLength; i++) {\n    nums.push(getRandomInt(min, max))\n  }\n  return nums\n}\n\nconst getRandomStr = (max, min) => {\n  const arr = []\n  const strLength = getRandomInt(min, max)\n  for (let i = 0; i < strLength; i++) {\n    arr.push(getRandomInt(min, max).toString(10))\n  }\n  return arr.join('')\n}\n\nconst getRandomArrStr = (max, min) => {\n  const nums = []\n  const arrLength = getRandomInt(min, max)\n  for (let i = 0; i < arrLength; i++) {\n    nums.push(getRandomStr(min, max))\n  }\n  return nums\n}\n\nconst getRandomArrOfStr = (max, min) => {\n  const nums = []\n  const arrLength = getRandomInt(min, max)\n  for (let i = 0; i < arrLength; i++) {\n    nums.push(getRandomArrStr(min, max))\n  }\n  return nums\n}\n\nconst getRandomArrOfInt = (max, min) => {\n  const nums = []\n  const arrLength = getRandomInt(min, max)\n  for (let i = 0; i < arrLength; i++) {\n    nums.push(getRandomArrStr(min, max))\n  }\n  return nums\n}\n\nconst getRandomArrOfStrOfInt = (max, min) => {\n  const nums = []\n  const arrLength = getRandomInt(min, max)\n  for (let i = 0; i < arrLength; i++) {\n    nums.push(getRandomArrOfStr(min, max))\n  }\n  return nums\n}\n\nconst getRandomArrOfArr = (max, min) => {\n  const nums = []\n  const arrLength = getRandomInt(min, max)\n  for (let i = 0; i < arrLength; i++) {\n    nums.push(getRandomArr(min, max))\n  }\n  return nums\n}\n\nconst getRandomArrOfArrOfStr = (max, min) => {\n  const nums = []\n  const arrLength = getRandomInt(min, max)\n  for (let i = 0; i < arrLength; i++) {\n    nums.push(getRandomArrOfStr(min, max))\n  }\n  return nums\n}\n\nconst getRandomArrOfArrOfInt = (max, min) => {\n  const nums = []\n  const arrLength = getRandomInt(min, max)\n  for (let i = 0; i < arrLength; i++) {\n    nums.push(getRandomArrOfInt(min, max))\n  }\n  return nums\n}\n\nconst getRandomArrOfArrOfStrOfInt = (max, min) => {\n  const nums = []\n  const arrLength = getRandomInt(min, max)\n  for (let i = 0; i < arrLength; i++) {\n    nums.push(getRandomArrOfStrOfInt(min, max))\n  }\n  return nums\n}\n\nconst getRandomArrOfArrOfArr = (max, min) => {\n  const nums = []\n  const arrLength = getRandomInt(min, max)\n  for (let i = 0; i < arrLength; i++) {\n    nums.push(getRandomArrOfArr(min, max))\n  }\n  return nums\n}\n\nconst getRandomArrOfArrOfArrOfStr = (max, min) => {\n  const nums = []\n  const arrLength = getRandomInt(min, max)\n  for (let i = 0; i < arrLength; i++) {"}
{"task_id": "JavaScript/106", "prompt": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fun = (n) => {\n    const numbers = Array(n + 1);\n    for (let i = 1; i <= n; i++) {\n      numbers[i] = factorial(numbers[i - 1] + i);\n    }\n    return numbers;\n  };\n  return fun(n);\n};\n\n/* ImpLemeNt the funCtion fThatTakesANumberAsAParamerter,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f2 = (n) => {\n  const fun = (n) => {\n    const numbers = Array(n + 1);\n    for (let i = 1; i <= n; i++) {\n      numbers[i] = factorial(numbers[i - 1] + i);\n    }\n    return numbers;\n  };\n  return fun(n);\n};\n\n/* ImpLemeNt the funCtion fThatTakesANumberAsAParamerter,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f3 = (n) => {\n  const fun = (n) => {\n    const numbers = Array(n + 1);\n    for (let i = 1; i <= n; i++) {\n      numbers[i] = factorial(numbers[i - 1] + i);\n    }\n    return numbers;\n  };\n  return fun(n);\n};\n\n/* ImpLemeNt the funCtion fThatTakesANumberAsAParamerter,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f4 = (n) => {\n  const fun = (n) => {\n    const numbers = Array(n + 1);\n    for (let i = 1; i <= n; i++) {\n      numbers[i] = factorial(numbers[i - 1] + i);\n    }\n    return numbers;\n  };\n  return fun(n);\n};\n\n/* ImpLemeNt the funCtion fThatTakesANumberAsAParamerter,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f5 = (n) => {\n  const fun = (n) => {\n    const numbers = Array(n + 1);\n    for (let i = 1; i <= n; i++) {\n      numbers[i] = factorial(numbers[i - 1] + i);\n    }\n    return numbers;\n  };\n  return fun(n);\n};\n\n// console.log(f(4));\n// console.log(f2(4));\n// console.log(f3(4));\n// console.log(f4(4));\n// console.log(f5(4));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const range = [1, n];\n  const odds = range.filter(i => i % 2!== 0);\n  const evens = range.filter(i => i % 2 === 0);\n\n  return evens.length === evens.filter((_, i) => i === n - 1 || i === 1).length\n   ? evenOddPalindrome(odds.length)\n    : evens.filter((_, i) => i === n - 1 || i === 1).length\n   ? evenOddPalindrome(evens.length)\n    : [odds[0], evens[0]];\n};\n\nconsole.log(evenOddPalindrome(3));\nconsole.log(evenOddPalindrome(12));\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  if (arr === undefined) return 0\n  if (arr.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums2 = (arr) => {\n  if (arr === undefined) return 0\n  if (arr.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  let cnt = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (sum - arr[i] > 0) cnt++\n  }\n  return cnt\n}\n\n/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums3 = (arr) => {\n  if (arr === undefined) return 0\n  if (arr.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  let cnt = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (sum - arr[i] > 0) cnt++\n  }\n  return cnt\n}\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2], ..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2],..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  // We are using a simple binary search to find the last empty index\n  const rightShif = (arr, index) => {\n    if (arr[index]!== undefined) return index + 1;\n    const next = Math.floor(index / 2);\n    return rightShif(arr, next);\n  };\n  const isEmpty = (arr, index) => {\n    if (arr[index] === undefined) return true;\n    return false;\n  };\n  const leftShif = (arr, index) => {\n    if (arr[index] === undefined) return index - 1;\n    return leftShif(arr, Math.floor(index / 2));\n  };\n  let index = 0;\n  const result = [];\n  while (!isEmpty(arr, index)) {\n    result.push(arr[index]);\n    const indexL = leftShif(arr, index);\n    const indexR = rightShif(arr, index);\n    if (indexL!== indexR) return false;\n    index = indexR;\n  }\n  return true;\n};\n\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3"}
{"task_id": "JavaScript/110", "prompt": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let exchangeList = [];\n  // loop through the elements of the first list\n  for (let i = 0; i < lst1.length; i++) {\n    // loop through the elements of the second list\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        // the current element of the first list is in the second list\n        // add the current element to the new list\n        exchangeList.push(lst1[i]);\n        // remove the current element from the first list\n        lst1.splice(i, 1);\n        // remove the current element from the second list\n        lst2.splice(j, 1);\n        // add the current element to the new list\n        exchangeList.push(lst1[i]);\n        // remove the current element from the first list\n        lst1.splice(i, 1);\n        // remove the current element from the second list\n        lst2.splice(j, 1);\n        // add the current element to the new list\n        exchangeList.push(lst1[i]);\n        // add the current element to the new list\n        exchangeList.push(lst2[j]);\n        // add the current element to the new list\n        break;\n      }\n    }\n  }\n  // return if all elements of the first list were in the second list\n  if (lst1.length === 0) {\n    return \"YES\";\n  }\n  // return if no element of the first list was in the second list\n  return \"NO\";\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let h = {};\n  let s = test.trim().toLowerCase().split(/\\s+/);\n  for (let i = 0; i < s.length; i++) {\n    h[s[i]] = (h[s[i]])? h[s[i]] + 1 : 1;\n  }\n  return h;\n};\n\nmodule.exports = histogram;\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const sLen = s.length\n  const cLen = c.length\n  const sStr = s.split('')\n  const cStr = c.split('')\n\n  let str = []\n  let flag = true\n  let i = 0\n  let j = 0\n\n  while (i < sLen && j < cLen) {\n    if (sStr[i] === cStr[j]) {\n      str.push(sStr[i])\n      i++\n      j++\n    } else {\n      str.push(sStr[i])\n      i++\n      j = 0\n    }\n  }\n\n  while (i < sLen) {\n    str.push(sStr[i])\n    i++\n  }\n\n  if (j < cLen) {\n    str.push(cStr[j])\n    j++\n  }\n\n  return str.join(''), flag\n}\n\nconsole.log(reverseDelete('abcdef', 'b'))\nconsole.log(reverseDelete('abcdef', 'a'))\nconsole.log(reverseDelete('abcdedcba', 'ab'))\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const result = [];\n  const count = (list) => {\n    if (list.length === 1) {\n      result.push(`the number of odd elements ${list[0]} of the ${list.length}th element of the ${lst.length}th str4ng of the ${lst}th input.`);\n      return list;\n    }\n    if (list[0] === '1' || list[list.length - 1] === '1') {\n      result.push(`the number of odd elements ${list[0]} of the ${list.length}th element of the ${lst.length}th str1ng of the ${lst}th input.`);\n      return count(list.slice(1, list.length - 1));\n    }\n    let start = 1;\n    let end = list.length - 1;\n    while (start <= end) {\n      let middle = (start + end) / 2;\n      if (list[middle - 1] === '1') {\n        start = middle + 1;\n      } else if (list[middle] === '1') {\n        end = middle - 1;\n      } else {\n        end = middle - 1;\n      }\n    }\n    if (start < list.length) {\n      return count(list.slice(start));\n    }\n    return result;\n  };\n  return count(lst);\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let subArraySum = [];\n  let currentSum = 0;\n  let currentMaxSum = 0;\n  let currentMaxIndex = 0;\n\n  nums.forEach((num, index) => {\n    currentSum = currentSum + num;\n    if (currentSum > currentMaxSum) {\n      subArraySum = [...subArraySum, num];\n      currentMaxSum = currentSum;\n      currentMaxIndex = index;\n    } else if (currentSum === currentMaxSum) {\n      subArraySum = [...subArraySum, num];\n    }\n  });\n\n  return currentMaxIndex;\n};\n\n// Tests\n\nconst minSubArraySumTest = (actual, expected) => {\n  let actualResult = minSubArraySum([2, 3, 4, 1, 2, 4]);\n  let expectedResult = 1;\n\n  assert.equal(actualResult, expectedResult, 'Expected:'+ expected + '. Actual:'+ actual);\n};\n\nconst minSubArraySumTest2 = (actual, expected) => {\n  let actualResult = minSubArraySum([-1, -2, -3]);\n  let expectedResult = -6;\n\n  assert.equal(actualResult, expectedResult, 'Expected:'+ expected + '. Actual:'+ actual);\n};\n\nconst minSubArraySumTest3 = (actual, expected) => {\n  let actualResult = minSubArraySum([-1, -2, -3, -4, -5, -6, -7]);\n  let expectedResult = -21;\n\n  assert.equal(actualResult, expectedResult, 'Expected:'+ expected + '. Actual:'+ actual);\n};\n\ndescribe('minSubArraySum', () => {\n  it('should return 1 when the input is a single number', () => {\n    minSubArraySumTest(1, 1);\n  });\n\n  it('should return -6 when the input is -1 - 2 - 3', () => {\n    minSubArraySumTest2(-1, -6);\n  });\n\n  it('should return -21 when the input is -1 - 2 - 3 - 4 - 5 - 6 - 7', () => {\n    minSubArraySumTest3(-1, -21);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const m = grid.length;\n  const n = grid[0].length;\n  const res = [];\n  \n  for (let i = 0; i < m; i++) {\n    let row = grid[i];\n    for (let j = 0; j < n; j++) {\n      if (row[j] === 0) {\n        res.push(0);\n      } else {\n        res.push(capacity);\n      }\n    }\n  }\n  \n  return res.reduce((pre, curr) => {\n    return Math.max(pre, curr);\n  });\n}\n\nconst b = (grid, capacity) => {\n  let res = [];\n  \n  for (let i = 0; i < grid.length; i++) {\n    let row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === 1) {\n        res.push(j);\n      }\n    }\n  }\n  \n  return res.length;\n}\n\nconst s = (grid, capacity) => {\n  let res = [];\n  \n  for (let i = 0; i < grid.length; i++) {\n    let row = grid[i];\n    for (let j = 0; j < row.length; j++) {\n      if (row[j] === 0) {\n        res.push(j);\n      }\n    }\n  }\n  \n  return res;\n}\n\nconst time = (grid, capacity) => {\n  let bRes = b(grid, capacity);\n  let sRes = s(grid, capacity);\n  \n  return Math.min(bRes, sRes);\n}\n\nexport {\n  maxFill,\n  b,\n  time\n};\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice();\n  let i, j;\n  for (i = 0; i < sorted.length - 1; i++) {\n    for (j = i + 1; j < sorted.length; j++) {\n      if (sorted[i] > sorted[j]) {\n        sorted.splice(i, 1);\n        sorted.splice(j, 0, sorted[i]);\n      }\n    }\n  }\n  return sorted;\n}\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice();\n  let i, j;\n  for (i = 0; i < sorted.length - 1; i++) {\n    for (j = i + 1; j < sorted.length; j++) {\n      if (sorted[i] > sorted[j]) {\n        sorted.splice(i, 1);\n        sorted.splice(j, 0, sorted[i]);\n      }\n    }\n  }\n  return sorted;\n}\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice();\n  let i, j;\n  for (i = 0; i < sorted.length - 1; i++) {\n    for (j = i + 1; j < sorted.length; j++) {\n      if (sorted[i] > sorted[j]) {\n        sorted.splice(i, 1);\n        sorted.splice(j, 0, sorted[i]);\n      }\n    }\n  }\n  return sorted;\n}\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice();\n  let i, j;\n  for (i = 0; i < sorted.length - 1; i++) {\n    for (j = i + 1; j < sorted.length; j++) {\n      if (sorted[i] > sorted[j]) {\n        sorted.splice(i, 1);\n        sorted.splice(j, 0, sorted[i]);\n      }\n    }\n  }\n  return sorted;\n}\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice();\n  let i, j;\n  for (i = 0; i < sorted.length - 1; i++) {\n    for (j = i + 1; j < sorted.length; j++) {\n      if (sorted[i] > sorted[j]) {\n        sorted.splice(i, 1);\n        sorted.splice(j, 0, sorted[i]);\n      }\n    }\n  }\n  return sorted;\n}\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice();\n  let i, j;\n  for (i = 0; i < sorted.length - 1; i++) {\n    for (j = i + 1; j < sorted.length; j++) {\n      if (sorted[i] > sorted[j]) {\n        sorted.splice(i, 1);\n        sorted.splice(j, 0, sorted[i]);\n      }\n    }\n  }\n  return sorted;\n}\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice();\n  let i, j;\n  for (i = 0; i < sorted.length - 1; i++) {\n    for (j = i + 1; j < sorted.length; j++) {\n      if (sorted[i] > sorted[j]) {\n        sorted.splice(i, 1);\n        sorted.splice(j, 0, sorted[i]);\n      }\n    }\n  }\n  return sorted;\n}\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice();\n  let i, j;\n  for (i = 0; i < sorted.length - 1; i++) {\n    for (j = i + 1; j < sorted.length; j++) {\n      if (sorted[i] > sorted[j]) {\n        sorted.splice(i, 1);\n        sorted.splice(j, 0, sorted[i]);\n      }\n    }\n  }\n  return sorted;\n}\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice();\n  let i, j;\n  for (i = 0; i < sorted.length - 1; i++) {\n    for (j = i + 1; j < sorted.length; j++) {\n      if (sorted[i] > sorted[j]) {\n        sorted.splice(i, 1);\n        sorted.splice(j, 0, sorted[i]);\n      }\n    }\n  }\n  return sorted;\n}\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice();\n  let i, j;\n  for (i = 0; i < sorted.length - 1; i++) {\n    for (j = i + 1; j < sorted.length; j++) {\n      if (sorted[i] > sorted[j]) {\n        sorted.splice(i, 1);\n        sorted.splice(j, 0, sorted[i]);\n      }\n    }\n  }\n  return sorted;\n}\n\nconst sortArray = (arr) => {\n  const sorted = arr.slice();\n  let i, j;\n  for (i = 0; i < sorted.length - 1; i++) {\n    for (j = i + 1; j < sorted.length; j++) {\n      if (sorted[i] > sorted[j]) {\n        sorted.splice(i, 1);\n        "}
{"task_id": "JavaScript/117", "prompt": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const wordArray = s.split(' ')\n  let retArr = []\n  for(let i = 0; i < wordArray.length; i++) {\n    if(wordArray[i].length >= n) {\n      retArr.push(wordArray[i])\n    }\n  }\n  return retArr\n}\n\n/*\n  Given a stRing s, return the number of consonants\n  that occur in the string. \n  iF thE striNg s iS eMpTY THen The functiON shOULd return an empTY \n  integer.\n  Examples:\n  countConsonants(\"Mary had a little lamb\") ==> 5\n  countConsonants(\"Mary had a little lamb\") ==> 5\n  countConsonants(\"a quick brown fox\") ==> 3\n  countConsonants(\"\") ==> 0\n  */\nconst countConsonants = (s) => {\n  const wordArray = s.split(' ')\n  let counter = 0\n  for(let i = 0; i < wordArray.length; i++) {\n    if(wordArray[i].match(/[a-zA-Z]/) &&!wordArray[i].match(/[0-9]/)) {\n      counter++\n    }\n  }\n  return counter\n}\n\n/*\n  Given a stRing s, return the number of vowels\n  that occur in the string. \n  iF thE striNg s iS eMpTY THen The functiON shOULd return an empTY \n  integer.\n  Examples:\n  countVowels(\"Mary had a little lamb\") ==> 2\n  countVowels(\"Mary had a little lamb\") ==> 2\n  countVowels(\"a quick brown fox\") ==> 1\n  countVowels(\"\") ==> 0\n  */\nconst countVowels = (s) => {\n  const wordArray = s.split(' ')\n  let counter = 0\n  for(let i = 0; i < wordArray.length; i++) {\n    if(wordArray[i].match(/[a-zA-Z]/) &&!wordArray[i].match(/[0-9]/)) {\n      counter++\n    }\n  }\n  return counter\n}\n\n/*\n  Given a stRing s, return the number of vowels\n  that occur in the string. \n  iF thE striNg s iS eMpTY THen The functiON shOULd return an empTY \n  integer.\n  Examples:\n  countVowels(\"Mary had a little lamb\") ==> 2\n  countVowels(\"Mary had a little lamb\") ==> 2\n  countVowels(\"a quick brown fox\") ==> 1\n  countVowels(\"\") ==> 0\n  */\nconst countVowels2 = (s) => {\n  const wordArray = s.split(' ')\n  let counter = 0\n  for(let i = 0; i < wordArray.length; i++) {\n    if(wordArray[i].match(/[aeiouAEIOU]/) &&!wordArray[i].match(/[0-9]/)) {\n      counter++\n    }\n  }\n  return counter\n}\n\n/*\n  Given a stRing s, return the number of vowels\n  that occur in the string. \n  iF thE striNg s iS eMpTY THen The functiON shOULd return an empTY \n  integer.\n  Examples:\n  countVowels(\"Mary had a little lamb\") ==> 2\n  countVowels(\"Mary had a little lamb\") ==> 2\n  countVowels(\"a quick brown fox\") ==> 1\n  countVowels(\"\") ==> 0\n  */\nconst countVowels3 = (s) => {\n  const wordArray = s.split(' ')\n  let counter = 0\n  for(let i = 0; i < wordArray.length; i++) {\n    if(wordArray[i].match(/[aeiouAEIOU]/) &&!wordArray[i].match(/[0-9]/)) {\n      counter++\n    }\n  }\n  return counter\n}\n\n/*\n  Given a stRing s, return the number of consonants\n  that occur in the string. \n  iF thE striNg s iS eMpTY THen The functiON shOULd return an empTY \n  integer.\n  Examples:\n  countVowels(\"Mary had a little lamb\") ==> 2\n  countVowels(\"Mary had a little lamb\") ==> 2\n  countVowels(\"a quick brown fox\") ==> 1\n  countVowels(\"\") ==> 0\n  */\nconst countVowels4 = (s) => {\n  const wordArray = s.split(' ')\n  let counter = 0\n  for(let i = 0; i < wordArray.length; i++) {\n    if(wordArray[i].match(/[aeiouAEIOU]/) &&!wordArray[i].match(/[0-9]/)) {\n      counter++\n    }\n  }\n  return counter\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let vowels = ['A', 'E', 'I', 'O', 'U'];\n  let lower = word.toLowerCase();\n  let isVowel = vowels.some(v => lower.includes(v));\n  if (!isVowel) {\n    return '';\n  }\n  let result = '';\n  let first = word[0];\n  let last = word[word.length - 1];\n  let vowel = word[0];\n  if (first === vowel) {\n    result = first;\n    for (let i = 1; i < word.length - 1; i++) {\n      vowel = word[i];\n      if (vowel === last) {\n        result += vowel;\n      } else if (vowel!== last) {\n        result += vowel;\n        break;\n      }\n    }\n  } else {\n    result = first + word.slice(1);\n  }\n  return result;\n}\n\nmodule.exports = getClosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const [openParen, closeParen] = lst;\n  if (openParen === closeParen) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconsole.log(matchParens(['()', ')', '(())', ')()']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    const a = arr.slice();\n    const b = arr.slice();\n    \n    for(let i = 0; i < arr.length; i++){\n        if(i === k){\n            b.push(arr[i]);\n            continue;\n        }\n        \n        if(b[i] === undefined){\n            b.push(arr[i]);\n            continue;\n        }\n        \n        if(b[i] > arr[i]){\n            b.splice(i, 1);\n            i--;\n        }\n    }\n    \n    return b;\n}\n\nmodule.exports = maximum;<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i]\n  }\n  return result\n}\n\nconsole.log(solution([1, 2, 3, 4, 5, 6])) // => 12\nconsole.log(solution([3, 3, 3, 3, 3])) // => 9\nconsole.log(solution([30, 13, 24, 321])) // =>0<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let s = 0;\n  for (let i = 0; i < k; i++) {\n    s += arr[i];\n  }\n  return s;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  if (n === 1) return [1];\n  return getOddCollatz(n % 2 === 1? n / 2 : 3 * n + 1);\n}\n\n// SOLVE #1: DIGRAPHS\nconst getDigraph = (n) => {\n  const getOddCollatzOdd = (n) => {\n    const odd = getOddCollatz(n);\n    return odd.concat(odd);\n  }\n\n  const even = getOddCollatz(n);\n  return even.concat(even);\n}\n\nconst getOddDigraph = (n) => {\n  const even = getDigraph(n);\n  return even.concat(even);\n}\n\nconst getOddOddDigraph = (n) => {\n  const even = getOddDigraph(n);\n  return even.concat(even);\n}\n\n/*\n  The getOddCollatz sequence of 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\n  Let's create the sequences:\n\n  getOddCollatz(5) = [1, 5]\n  getOddCollatz(16) = [1, 5, 4, 2, 1]\n  getOddCollatz(8) = [1, 5, 4, 2]\n  getOddCollatz(4) = [1, 5, 4]\n  getOddCollatz(2) = [1, 5]\n  getOddCollatz(1) = [1]\n\n  Now let's make a digraph for 5.\n\n  getDigraph(5) = [1, 5]\n  getDigraph(16) = [1, 5, 4, 2, 1]\n  getDigraph(8) = [1, 5, 4, 2]\n  getDigraph(4) = [1, 5, 4]\n  getDigraph(2) = [1, 5]\n  getDigraph(1) = [1]\n\n  Now let's make a digraph for 5.\n\n  getOddDigraph(5) = [1, 5]\n  getOddDigraph(16) = [1, 5, 4, 2, 1]\n  getOddDigraph(8) = [1, 5, 4, 2]\n  getOddDigraph(4) = [1, 5, 4]\n  getOddDigraph(2) = [1, 5]\n  getOddDigraph(1) = [1]\n\n  Now let's make a digraph for 5.\n\n  getOddOddDigraph(5) = [1, 5]\n  getOddOddDigraph(16) = [1, 5, 4, 2, 1]\n  getOddOddDigraph(8) = [1, 5, 4, 2]\n  getOddOddDigraph(4) = [1, 5, 4]\n  getOddOddDigraph(2) = [1, 5]\n  getOddOddDigraph(1) = [1]\n\n  This is easy!\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  // validate the date is in a valid format\n  let dateArr = date.split('-');\n  let day = parseInt(dateArr[2]);\n  let month = parseInt(dateArr[1]);\n  let year = parseInt(dateArr[0]);\n  if (day < 1 || day > 31 || month < 1 || month > 12 || year < 1900 || year > 2100) {\n    return false;\n  } else {\n    if (day > 28) {\n      if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n        if (day <= 29) {\n          return true;\n        }\n      }\n    } else if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n      if (day <= 30) {\n        return true;\n      }\n    } else if (day === 31 && month === 2) {\n      if (year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nmodule.exports = {\n  validDate\n}\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1, ... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(/\\s+/);\n  if (words.length === 1) {\n    return words;\n  }\n  let whitespace = /\\s+/;\n  let last = words.pop();\n  words.push(last);\n  while (words.length > 1) {\n    let word = words.shift();\n    let index = last.indexOf(whitespace);\n    if (index > -1) {\n      words.push(word.substring(index + 1));\n      words.push(last.substring(0, index));\n    } else {\n      words.push(word);\n    }\n    last = word;\n  }\n  return words;\n};\n\n/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithCommas = (txt) => {\n  let words = txt.split(/,\\s+/);\n  if (words.length === 1) {\n    return words;\n  }\n  let whitespace = /\\s+/;\n  let last = words.pop();\n  words.push(last);\n  while (words.length > 1) {\n    let word = words.shift();\n    let index = last.indexOf(whitespace);\n    if (index > -1) {\n      words.push(word.substring(index + 1));\n      words.push(last.substring(0, index));\n    } else {\n      words.push(word);\n    }\n    last = word;\n  }\n  return words;\n};\n\n/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithCommasAndSpaces = (txt) => {\n  let words = txt.split(/\\s+/, /\\s+/);\n  if (words.length === 1) {\n    return words;\n  }\n  let whitespace = /\\s+/;\n  let last = words.pop();\n  words.push(last);\n  while (words.length > 1) {\n    let word = words.shift();\n    let index = last.indexOf(whitespace);\n    if (index > -1) {\n      words.push(word.substring(index + 1));\n      words.push(last.substring(0, index));\n    } else {\n      words.push(word);\n    }\n    last = word;\n  }\n  return words;\n};\n\n/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsWithCommasAndSpacesAndTrim = (txt) => {\n  let words = txt.split(/\\s+/, /\\s+/);\n  if (words.length === 1) {\n    return words;\n  }\n  let whitespace = /\\s+/;\n  let last = words.pop();\n  words.push(last);\n  while (words.length > 1) {\n    let word = words.shift();\n    let index = last.indexOf(whitespace);\n    if (index > -1) {\n      words.push(word.substring(index + 1));\n      words.push(last.substring(0, index));\n    } else {\n      words.push(word);\n    }\n    last = word;\n  }\n  return words.map(w => w.trim());\n};\n\nexport default {\n  splitWords,\n  splitWordsWithCommas,\n  splitWordsWithCommasAndSpaces,\n  splitWordsWithCommasAndSpacesAndTrim,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length\n  let prev = undefined\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === undefined) continue\n    if (prev === undefined) {\n      prev = lst[i]\n      continue\n    }\n    if (prev > lst[i]) return false\n    prev = lst[i]\n  }\n  return true\n}\n\nconst isSortedNumbers = (lst) => {\n  const len = lst.length\n  let prev = undefined\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === undefined) continue\n    if (prev === undefined) {\n      prev = lst[i]\n      continue\n    }\n    if (Number(prev) > Number(lst[i])) return false\n    prev = lst[i]\n  }\n  return true\n}\n\nconst isSortedLetters = (lst) => {\n  const len = lst.length\n  let prev = undefined\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === undefined) continue\n    if (prev === undefined) {\n      prev = lst[i]\n      continue\n    }\n    if (String(prev) > String(lst[i])) return false\n    prev = lst[i]\n  }\n  return true\n}\n\nconst isSortedStrings = (lst) => {\n  const len = lst.length\n  let prev = undefined\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === undefined) continue\n    if (prev === undefined) {\n      prev = lst[i]\n      continue\n    }\n    if (String(prev) > String(lst[i])) return false\n    prev = lst[i]\n  }\n  return true\n}\n\nconst isSortedByLength = (lst) => {\n  const len = lst.length\n  let prev = undefined\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === undefined) continue\n    if (prev === undefined) {\n      prev = lst[i]\n      continue\n    }\n    if (prev.length > lst[i].length) return false\n    prev = lst[i]\n  }\n  return true\n}\n\nconst isSortedByLength2 = (lst) => {\n  const len = lst.length\n  let prev = undefined\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === undefined) continue\n    if (prev === undefined) {\n      prev = lst[i]\n      continue\n    }\n    if (prev.length > lst[i].length) return false\n    prev = lst[i]\n  }\n  return true\n}\n\nconst isSortedByLength3 = (lst) => {\n  const len = lst.length\n  let prev = undefined\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === undefined) continue\n    if (prev === undefined) {\n      prev = lst[i]\n      continue\n    }\n    if (prev.length > lst[i].length) return false\n    prev = lst[i]\n  }\n  return true\n}\n\nconst isSortedByLength4 = (lst) => {\n  const len = lst.length\n  let prev = undefined\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === undefined) continue\n    if (prev === undefined) {\n      prev = lst[i]\n      continue\n    }\n    if (prev.length > lst[i].length) return false\n    prev = lst[i]\n  }\n  return true\n}\n\nconst isSortedByLength5 = (lst) => {\n  const len = lst.length\n  let prev = undefined\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === undefined) continue\n    if (prev === undefined) {\n      prev = lst[i]\n      continue\n    }\n    if (prev.length > lst[i].length) return false\n    prev = lst[i]\n  }\n  return true\n}\n\nconst isSortedByLength6 = (lst) => {\n  const len = lst.length\n  let prev = undefined\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === undefined) continue\n    if (prev === undefined) {\n      prev = lst[i]\n      continue\n    }\n    if (prev.length > lst[i].length) return false\n    prev = lst[i]\n  }\n  return true\n}\n\nconst isSortedByLength7 = (lst) => {\n  const len = lst.length\n  let prev = undefined\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === undefined) continue\n    if (prev === undefined) {\n      prev = lst[i]\n      continue\n    }\n    if (prev.length > lst[i].length) return false\n"}
{"task_id": "JavaScript/127", "prompt": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  \n  if (start1 > start2) {\n    // swap the two intervals\n    [start1, end1] = [start2, end2]\n    [start2, end2] = [start1, end1]\n  }\n  \n  if (start1 > end2 || end1 < start2) {\n    // no intersection\n    return \"NO\"\n  }\n  \n  // check whether the intersection is prime number\n  const mid = Math.floor((start1 + end2) / 2)\n  if (mid % 2 === 0) {\n    return \"NO\"\n  }\n  \n  return \"YES\"\n}\n\nconsole.log(intersection((1, 2), (2, 3)))\nconsole.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const len = arr.length\n  const arrElements = arr.map((n, i) => i)\n  const arrElementsLen = arrElements.length\n  const prod = (a, b) => a * b\n  const isValid = (a, b) => a!= null && b!= null && a!= 0 && b!= 0\n\n  if (len == 0) return null\n  if (len == 1) return arr[0]\n\n  const a = arrElements[0]\n  const b = arrElements[1]\n  const c = arrElements[2]\n  const d = arrElements[3]\n\n  if (isValid(a, b) && isValid(b, c) && isValid(c, d)) {\n    return prod(prod(a, b), prod(b, c)) - prod(prod(a, c), prod(c, d))\n  }\n\n  return null\n}\n\n/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  const len = arr.length\n  const arrElements = arr.map((n, i) => i)\n  const arrElementsLen = arrElements.length\n  const prod = (a, b) => a * b\n  const isValid = (a, b) => a!= null && b!= null && a!= 0 && b!= 0\n\n  if (len == 0) return null\n  if (len == 1) return arr[0]\n\n  const a = arrElements[0]\n  const b = arrElements[1]\n  const c = arrElements[2]\n  const d = arrElements[3]\n\n  if (isValid(a, b) && isValid(b, c) && isValid(c, d)) {\n    return (prod(prod(a, b), prod(b, c)) - prod(prod(a, c), prod(c, d))) / 2\n  }\n\n  return null\n}\n\nconsole.log(prodSigns([1, 2, 2, -4]))\nconsole.log(prodSigns([0, 1]))\nconsole.log(prodSigns([]));\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    // Step 1: Convert the input grid to a 2D array\n    const grid2d = new Array(grid.length)\n    for (let i = 0; i < grid.length; i++) {\n        const gi = grid[i]\n        grid2d[i] = new Array(gi.length)\n        for (let j = 0; j < gi.length; j++) {\n            grid2d[i][j] = gi[j]\n        }\n    }\n\n    // Step 2: Compute the LST\n    const lst = [[0, 0]]\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            const val = grid2d[i][j]\n            const min = Math.min(lst[0][0], lst[0][1])\n            lst.push([val, j])\n            lst.push([j, val])\n            lst[0][0] = min\n            lst[0][1] = val\n        }\n    }\n\n    // Step 3: Find the MINIMuM path\n    const min = lst[0][0]\n    let path = [lst[0][1]]\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i][0] == min) {\n            path = path.concat(lst[i][1])\n        }\n    }\n\n    // Step 4: Find the last cell of the MINIMuM path\n    const last = path[path.length - 1]\n    let pos = grid2d.length - 1\n    while (pos >= 0) {\n        if (grid2d[pos][last] > 0) {\n            break\n        }\n        pos--\n    }\n\n    // Step 5: Return the value of the last cell of the MINIMuM path\n    return grid2d[pos][last]\n}\n\nconst test = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9],\n    [10, 11, 12]\n]\n\nconsole.log(minPath(test, 1))\nconsole.log(minPath(test, 2))\nconsole.log(minPath(test, 3))\nconsole.log(minPath(test, 4))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const triList = [];\n  let num = 1;\n  while(num <= n) {\n    triList.push(tri(num));\n    num++;\n  }\n  return triList;\n};\n\nexport default tri;<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const a = Math.floor(n / 10);\n  const b = n % 10;\n  return (a + b + 1) % 2;\n};\n\n/*\n  ReTurN The prOduct of The Even digits of n.\n  For example:\n  digits(12) == 1\n  digits(7)  == 1\n  digits(9)  == 2\n  digits(6)  == 0\n  digits(4)  == 0\n  digits(3)  == 0\n  digits(1)  == 0\n  */\nconst digitsEven = (n) => {\n  return (n / 10) % 2;\n};\n\n/*\n  ReTurN The prOduct of The Odd digits of n.\n  For example:\n  digits(12) == 0\n  digits(7)  == 1\n  digits(9)  == 1\n  digits(6)  == 0\n  digits(4)  == 0\n  digits(3)  == 0\n  digits(1)  == 0\n  */\nconst digitsOdd = (n) => {\n  return (n / 10) % 2;\n};\n\n/*\n  ReTurN The prOduct of The Even digits of n.\n  For example:\n  digits(12) == 1\n  digits(7)  == 0\n  digits(9)  == 0\n  digits(6)  == 1\n  digits(4)  == 1\n  digits(3)  == 1\n  digits(1)  == 1\n  */\nconst digitsEvenOdd = (n) => {\n  return (n / 10) % 2;\n};\n\n/*\n  ReTurN The prOduct of The Even digits of n.\n  For example:\n  digits(12) == 1\n  digits(7)  == 0\n  digits(9)  == 0\n  digits(6)  == 1\n  digits(4)  == 1\n  digits(3)  == 1\n  digits(1)  == 1\n  */\nconst digitsEvenOdd2 = (n) => {\n  return (n / 10) % 2;\n};\n\n/*\n  ReTurN The prOduct of The Even digits of n.\n  For example:\n  digits(12) == 1\n  digits(7)  == 0\n  digits(9)  == 0\n  digits(6)  == 1\n  digits(4)  == 1\n  digits(3)  == 1\n  digits(1)  == 1\n  */\nconst digitsEvenOdd3 = (n) => {\n  return (n / 10) % 2;\n};\n\n/*\n  ReTurN The prOduct of The Even digits of n.\n  For example:\n  digits(12) == 1\n  digits(7)  == 0\n  digits(9)  == 0\n  digits(6)  == 1\n  digits(4)  == 1\n  digits(3)  == 1\n  digits(1)  == 1\n  */\nconst digitsEvenOdd4 = (n) => {\n  return (n / 10) % 2;\n};\n\nconst sumOfDigits = (n) => {\n  return n.toString().split('').reduce((a, b) => {\n    return a + b;\n  }, 0);\n};\n\nconst sumOfDigitsEven = (n) => {\n  return n.toString().split('').reduce((a, b) => {\n    if (digitsEven(b)) {\n      return a + b;\n    }\n    return a;\n  }, 0);\n};\n\nconst sumOfDigitsOdd = (n) => {\n  return n.toString().split('').reduce((a, b) => {\n    if (digitsOdd(b)) {\n      return a + b;\n    }\n    return a;\n  }, 0);\n};\n\nconst sumOfDigitsEvenOdd = (n) => {\n  return n.toString().split('').reduce((a, b) => {\n    if (digitsEvenOdd(b)) {\n      return a + b;\n    }\n    return a;\n  }, 0);\n};\n\nconst sumOfDigitsEvenOdd2 = (n) => {\n  return n.toString().split('').reduce((a, b) => {\n    if (digitsEvenOdd3(b)) {\n      return a + b;\n    }\n    return a;\n  }, 0);\n};\n\nconst sumOfDigitsEvenOdd3 = (n) => {\n  return n.toString().split('').reduce((a, b) => {\n    if (digitsEvenOdd4(b)) {\n      return a + b;\n    }\n    return a;\n  }, 0);\n};\n\nconst sumOfDigitsEvenOdd4 = (n) => {\n  return n.toString().split('').reduce((a, b) => {\n    if (digitsEvenOdd5(b)) {\n      return a + b;\n    }\n    return a;\n  }, 0);\n};\n\nconst sumOfDigitsEvenOdd5 = (n) => {\n  return n.toString().split('').reduce((a, b) => {\n    if (digitsEvenOdd6(b)) {\n      return a + b;\n    }\n    return a;\n  }, 0);\n};\n\nconst sumOfDigitsEvenOdd6 = (n) => {\n  return n.toString().split('').reduce((a, b) => {\n    if (digitsEvenOdd7(b)) {\n      return a + b;\n    }\n    return a;\n  }, 0);\n};\n\nconst sumOfDigitsEvenOdd7 = (n) => {\n  return n.toString().split('').reduce((a, b) => {\n    if (digitsEvenOdd8(b)) {\n      return a + b;\n    }"}
{"task_id": "JavaScript/132", "prompt": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n\t//console.log(string)\n\tvar length = string.length\n\tvar index = -1\n\twhile(++index < length) {\n\t\tvar ch = string[index]\n\t\tif(ch == '[') {\n\t\t\tif(string[index+1] == ']') {\n\t\t\t\tif(string[index-1]!= '\\\\') {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(ch == ']') {\n\t\t\tif(string[index+1] == '[') {\n\t\t\t\tif(string[index-1]!= '\\\\') {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\nvar isNested = isNested\n\nconsole.log(isNested('[[]'))\nconsole.log(isNested('[][]')\nconsole.log(isNested('[][]]'))\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[[][]]'))\nconsole.log(isNested('[[][]]'))\nconsole.log(isNested('[[[]]]'))\nconsole.log(isNested('[[[[]]]'))\nconsole.log(isNested('[[[][]]]'))\nconsole.log(isNested('[[[[][]]]'))\nconsole.log(isNested('[[[[][]]]'))\nconsole.log(isNested('[[[[[]]]'))\nconsole.log(isNested('[[[[[]]]'))\nconsole.log(isNested('[[[[[[]]]]]'))\nconsole.log(isNested('[[[[[[]]]]]'))\nconsole.log(isNested('[[[[[[[]]]]]'))\nconsole.log(isNested('[[[[[[[]]]]]'))\nconsole.log(isNested('[[[[[[[]]]]]'))\nconsole.log(isNested('[[[[[[[]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole.log(isNested('[[[[[[[[]]]]]]]'))\nconsole."}
{"task_id": "JavaScript/133", "prompt": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sum = sorted.reduce((prev, current) => prev + current * current, 0);\n  return sum;\n};\n\nconst lst = [1, 2, 3];\n\nconsole.log(sumSquares(lst)); //14\n\n/*\n  For lst = [1, 4, 9] the output should be 98\n  For lst = [1, 3, 5, 7] the output should be 84\n  For lst = [1.4, 4.2, 0] the output should be 29\n  For lst = [-2.4, 1, 1] the output should be 6\n  For lst = [1, 3, 5, 7] the output should be 84\n  For lst = [1, 4, 9] the output should be 98\n*/\n\nconst sumSquares = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sum = sorted.reduce((prev, current) => prev + current * current, 0);\n  return sum;\n};\n\nconst lst = [1, 4, 9];\n\nconsole.log(sumSquares(lst)); //98\n\n/*\n  For lst = [1, 3, 5, 7] the output should be 84\n  For lst = [1.4, 4.2, 0] the output should be 29\n  For lst = [-2.4, 1, 1] the output should be 6\n  For lst = [1, 3, 5, 7] the output should be 84\n  For lst = [1, 4, 9] the output should be 98\n*/\n\nconst sumSquares = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sum = sorted.reduce((prev, current) => prev + current * current, 0);\n  return sum;\n};\n\nconst lst = [1, 3, 5, 7];\n\nconsole.log(sumSquares(lst)); //84\n\n/*\n  For lst = [1.4, 4.2, 0] the output should be 29\n  For lst = [-2.4, 1, 1] the output should be 6\n  For lst = [1, 3, 5, 7] the output should be 84\n  For lst = [1, 4, 9] the output should be 98\n*/\n\nconst sumSquares = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sum = sorted.reduce((prev, current) => prev + current * current, 0);\n  return sum;\n};\n\nconst lst = [1.4, 4.2, 0];\n\nconsole.log(sumSquares(lst)); //29\n\n/*\n  For lst = [-2.4, 1, 1] the output should be 6\n  For lst = [1, 3, 5, 7] the output should be 84\n  For lst = [1, 4, 9] the output should be 98\n*/\n\nconst sumSquares = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sum = sorted.reduce((prev, current) => prev + current * current, 0);\n  return sum;\n};\n\nconst lst = [-2.4, 1, 1];\n\nconsole.log(sumSquares(lst)); //6\n\n/*\n  For lst = [1, 3, 5, 7] the output should be 84\n  For lst = [1, 4, 9] the output should be 98\n*/\n\nconst sumSquares = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sum = sorted.reduce((prev, current) => prev + current * current, 0);\n  return sum;\n};\n\nconst lst = [1, 3, 5, 7];\n\nconsole.log(sumSquares(lst)); //84\n\n/*\n  For lst = [1, 4, 9] the output should be 98\n*/\n\nconst sumSquares = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const sum = sorted.reduce((prev, current) => prev + current * current, 0);\n  return sum;\n};\n\nconst lst = [1, 4, 9];\n\nconsole.log(sumSquares(lst)); //98\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    return txt.length > 0 && /^[A-Za-z]+$/.test(txt.slice(-1));\n};\n\n/*\n  Function that checks if the string contains a capital letter,\n  and if it does, checks if it is the first letter of a word.\n  It returns true if the string contains a capital letter and is\n  the first letter of a word, false otherwise.\n  nOtE: \"WORD\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n    return txt.length > 0 && /^[A-Z]/.test(txt.slice(0, 1));\n};\n\n/*\n  Function that checks if the string contains a capital letter,\n  and if it does, checks if it is the first letter of a word.\n  It returns true if the string contains a capital letter and is\n  the first letter of a word, false otherwise.\n  nOtE: \"WORD\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstWord = (txt) => {\n    return txt.length > 0 && /^[A-Z]/.test(txt.slice(0, 2));\n};\n\n/*\n  Function that checks if the string contains a capital letter,\n  and if it does, checks if it is the first letter of a word.\n  It returns true if the string contains a capital letter and is\n  the first letter of a word, false otherwise.\n  nOtE: \"WORD\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstWordContainsALetter = (txt) => {\n    return txt.length > 0 && checkIfFirstWord(txt);\n};\n\n/*\n  Function that checks if the string contains a capital letter,\n  and if it does, checks if it is the first letter of a word.\n  It returns true if the string contains a capital letter and is\n  the first letter of a word, false otherwise.\n  nOtE: \"WORD\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    return txt.length > 0 && /^[A-Za-z]+$/.test(txt.slice(txt.length - 1));\n};\n\n/*\n  Function that checks if the string contains a capital letter,\n  and if it does, checks if it is the first letter of a word.\n  It returns true if the string contains a capital letter and is\n  the first letter of a word, false otherwise.\n  nOtE: \"WORD\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastWord = (txt) => {\n    return txt.length > 0 && /^[A-Z]/.test(txt.slice(txt.length - 2));\n};\n\n/*\n  Function that checks if the string contains a capital letter,\n  and if it does, checks if it is the first letter of a word.\n  It returns true if the string contains a capital letter and is\n  the first letter of a word, false otherwise.\n  nOtE: \"WORD\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastWordContainsALetter = (txt) => {\n    return txt.length > 0 && checkIfLastWord(txt);\n};\n\nmodule.exports = {\n    checkIfLastCharIsALetter,\n    checkIfFirstCharIsALetter,\n    checkIfFirstWord,\n    checkIfFirstWordContainsALetter,\n    checkIfLastWord,\n    check"}
{"task_id": "JavaScript/135", "prompt": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (!arr || arr.length === 0) return -1;\n  let result = -1;\n  let i = 0;\n  arr.forEach(v => {\n    if (i === 0) result = v;\n    else if (v > result) result = v;\n    i++;\n  });\n  return result;\n};\n\nexport {\n  canArrange,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [smallest, largest] = largestSmallestIntegers(lst.slice(0, 1));\n  return largest? largestSmallestIntegers(lst.slice(1)) : [smallest, largest];\n}\n\nconst smallest = (smallest, largest) => (smallest? smallest : largest);\nconst largest = (smallest, largest) => (largest? largest : smallest);\n\nconst largestSmallestIntegers = (lst) => largestSmallestIntegers(lst);\nconst largestSmallestIntegers = (lst) => largestSmallestIntegers(lst.slice(0, 1));\nconst smallestIntegers = (lst) => smallest(lst.reduce((a, b) => a? a : b, null));\n\nconst smallest = (smallest, largest) => (smallest? smallest : largest);\nconst largest = (smallest, largest) => (largest? largest : smallest);\n\nconst largestSmallestIntegers = (lst) => largestSmallestIntegers(lst);\nconst largestSmallestIntegers = (lst) => largestSmallestIntegers(lst.slice(0, 1));\nconst smallestIntegers = (lst) => smallest(lst.reduce((a, b) => a? a : b, null));\n\nconst smallest = (smallest, largest) => (smallest? smallest : largest);\nconst largest = (smallest, largest) => (largest? largest : smallest);\n\nconst largestSmallestIntegers = (lst) => largestSmallestIntegers(lst);\nconst largestSmallestIntegers = (lst) => largestSmallestIntegers(lst.slice(0, 1));\nconst smallestIntegers = (lst) => smallest(lst.reduce((a, b) => a? a : b, null));\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    const aString = a.replace(/[,.]/g, \"\").split(\"\");\n    const bString = b.replace(/[,.]/g, \"\").split(\"\");\n    const len = Math.max(aString.length, bString.length);\n    for (let i = 0; i < len; i++) {\n      const aPart = aString[i] - 0;\n      const bPart = bString[i] - 0;\n      if (aPart!== bPart) {\n        return aPart < bPart? -1 : 1;\n      }\n    }\n    return 0;\n  } else if (typeof a === \"number\" && typeof b === \"number\") {\n    return a - b;\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    return compareOne(b, a);\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    return compareOne(a, b);\n  } else if (a === b) {\n    return 0;\n  } else {\n    return a < b? -1 : 1;\n  }\n};\n\nconst compareAll = (a, b) => {\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    return compareOne(a, b);\n  } else if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare1 = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare2 = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare3 = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare4 = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare5 = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare6 = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare7 = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare8 = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare9 = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare10 = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare11 = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare12 = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare13 = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare14 = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    return 0;\n  }\n};\n\nconst compare15 = (a, b) => {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else {\n    "}
{"task_id": "JavaScript/138", "prompt": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return n % 2 === 0 && n > 0\n}\n\nexport default isEqualToSumEven\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const fActOrial = 1;\n  const fAct = 1;\n  const f = 1;\n\n  while (n > 0) {\n    f = f * fAct;\n    n--;\n  }\n  return fActOrial * f;\n};\n\n/*The BRaziLian fOralIne is defIned as:\n  bRazIlian_FOralIne(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFraction(4)\n  2\n\n  The function will receive an integer as input and should return the special\n  fraction of this integer.\n  */\nconst specialFraction = (n) => {\n  const fOralIne = 1;\n  const f = 1;\n\n  while (n > 1) {\n    f = f * n;\n    n--;\n  }\n  return fOralIne * f;\n};\n\nconst calc = (input) => {\n  const specialF = specialFraction(input);\n  const specialF_fact = specialFactorial(input);\n  return specialF / specialF_fact;\n};\n\nconsole.log(calc(20));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const text = text.toString().replace(/\\s+/g, '-');\n  return text;\n};\n\n// export the function\nexport default fixSpaces;\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.match(/^[a-zA-Z0-9]+\\.\\w+$/) === null) {\n    return 'No';\n  } else {\n    return 'Yes';\n  }\n}\n\n/*\n  'Yes' if the tHE File's content is valId and returns 'no' othErWIsE.\n  A fiLE's content is consIDeRED to be VALid If ANd Only iF alL thE folLowing coNdITIONS \n  are met:\n  - The file's content is not a txt-File\n  - The file's content is not a exe-File\n  - The file's content is not a dll-File\n  - The file's content is a valid EXE-File's dll-File\n  - The file's content is a valid EXE-File's txt-File\n  - The file's content is a valid EXE-File's EXE-File\n  Examples:\n  fileContentCheck(\"example.txt\") # => 'No'\n  fileContentCheck(\"example.exe\") # => 'No'\n  fileContentCheck(\"example.dll\") # => 'Yes'\n  fileContentCheck(\"example.dll.txt\") # => 'No'\n  fileContentCheck(\"example.dll.exe\") # => 'No'\n  fileContentCheck(\"example.dll.dll\") # => 'Yes'\n  fileContentCheck(\"example.dll.dll.txt\") # => 'Yes'\n  fileContentCheck(\"example.dll.dll.exe\") # => 'Yes'\n  */\nconst fileContentCheck = (file_content) => {\n  if (file_content.match(/^(?![a-zA-Z0-9]+\\.txt$)/) === null) {\n    return 'No';\n  } else {\n    return 'Yes';\n  }\n}\n\n/*\n  'Yes' if the tHE File is a valid EXE-File, and returns 'no' othErWIsE.\n  A fiLE is a VALid EXE-File if:\n  - The file's content is a txt-File\n  - The file's content is a valid EXE-File's dll-File\n  - The file's content is a valid EXE-File's txt-File\n  - The file's content is a valid EXE-File's EXE-File\n  Examples:\n  fileIsEXE(\"example.txt\") # => 'No'\n  fileIsEXE(\"example.exe\") # => 'Yes'\n  fileIsEXE(\"example.dll\") # => 'No'\n  fileIsEXE(\"example.dll.txt\") # => 'No'\n  fileIsEXE(\"example.dll.exe\") # => 'Yes'\n  fileIsEXE(\"example.dll.dll\") # => 'Yes'\n  fileIsEXE(\"example.dll.dll.txt\") # => 'Yes'\n  fileIsEXE(\"example.dll.dll.exe\") # => 'Yes'\n  */\nconst fileIsEXE = (file_name) => {\n  if (file_name.match(/^[a-zA-Z0-9]+\\.txt$/)!== null) {\n    return 'No';\n  } else {\n    return 'Yes';\n  }\n}\n\n/*\n  'Yes' if the tHE File is a valid DLL-File, and returns 'no' othErWIsE.\n  A fiLE is a VALid DLL-File if:\n  - The file's content is a txt-File\n  - The file's content is a valid EXE-File's dll-File\n  - The file's content is a valid EXE-File's txt-File\n  - The file's content is a valid EXE-File's EXE-File\n  Examples:\n  fileIsDLL(\"example.txt\") # => 'No'\n  fileIsDLL(\"example.exe\") # => 'No'\n  fileIsDLL(\"example.dll\") # => 'Yes'\n  fileIsDLL(\"example.dll.txt\") # => 'No'\n  fileIsDLL(\"example.dll.exe\") # => 'Yes'\n  fileIsDLL(\"example.dll.dll\") # => 'Yes'\n  fileIsDLL(\"example.dll.dll.txt\") # => 'Yes'\n  fileIsDLL(\"example.dll.dll.exe\") # => 'Yes'\n  */\nconst fileIsDLL = (file_name) => {\n  if (file_name.match(/^[a-zA-Z0-9]+\\.txt$/)!== null) {\n    return 'No';\n  } else {\n    return 'Yes';\n  }\n}\n\nmodule.exports = {\n  fileNameCheck: fileNameCheck,\n  fileContentCheck: fileContentCheck,\n  fileIsEXE: fileIsEXE,\n  fileIsDLL: fileIsDLL\n};\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const sumOfSquares = (x) => x*x;\n  const length = (lst) => lst.length;\n  const squareSum = (lst) => lst.map(sumOfSquares);\n  const squareSum = (lst) => lst.map(sumOfSquares);\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const squareSum = (lst) => lst.map(sumOfSquares);\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => lst;\n  const list = (lst) => l"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  if (!Array.isArray(sentence)) {\n    throw new Error('The sentence must be an array');\n  }\n\n  if (sentence.length < 1) {\n    throw new Error('The sentence must have at least one word');\n  }\n\n  let words = sentence.join(' ');\n  words = words.toLowerCase();\n\n  let index = words.lastIndexOf(' ');\n  return words.slice(0, index + 1);\n};\n\n/*\n  Given a sentence containing a sentence,\n  Returns a new sentence that contains the words in the original sentence\n  with a space in between each word.\n\n  Example:\n      Input: sentence = \"This is a test\"\n      Output: \"This is a test\"\n\n  Example:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go for\"\n  */\nconst withSpaces = (sentence) => {\n  if (!Array.isArray(sentence)) {\n    throw new Error('The sentence must be an array');\n  }\n\n  let words = sentence.join(' ');\n  words = words.toLowerCase();\n\n  let index = words.lastIndexOf(' ');\n  return [words.slice(0, index), words.slice(index + 1)].join(' ');\n};\n\n/*\n  Given a sentence containing a sentence,\n  Returns a new sentence that contains the words in the original sentence\n  with a space in between each word,\n  The new sentence is a substring of the original sentence.\n\n  Example:\n      Input: sentence = \"This is a test\"\n      Output: \"is a test\"\n\n  Example:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go for\"\n  */\nconst withSpaceInSentence = (sentence) => {\n  if (!Array.isArray(sentence)) {\n    throw new Error('The sentence must be an array');\n  }\n\n  if (sentence.length < 1) {\n    throw new Error('The sentence must have at least one word');\n  }\n\n  let words = sentence.join(' ');\n  words = words.toLowerCase();\n\n  let index = words.lastIndexOf(' ');\n  return words.slice(0, index + 1).join(' ');\n};\n\n/*\n  Given a sentence containing a sentence,\n  Returns a new sentence that contains the words in the original sentence\n  with a space in between each word,\n  The new sentence is a substring of the original sentence.\n\n  Example:\n      Input: sentence = \"This is a test\"\n      Output: \"is a test\"\n\n  Example:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go for\"\n  */\nconst withSpaceInSentence2 = (sentence) => {\n  if (!Array.isArray(sentence)) {\n    throw new Error('The sentence must be an array');\n  }\n\n  if (sentence.length < 1) {\n    throw new Error('The sentence must have at least one word');\n  }\n\n  let words = sentence.join(' ');\n  words = words.toLowerCase();\n\n  let index = words.lastIndexOf(' ');\n  return words.slice(index + 1).join(' ');\n};\n\n/*\n  Given a sentence containing a sentence,\n  Returns a new sentence that contains the words in the original sentence\n  with a space in between each word,\n  The new sentence is a substring of the original sentence.\n\n  Example:\n      Input: sentence = \"This is a test\"\n      Output: \"This is a test\"\n\n  Example:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go for\"\n  */\nconst withSpaceInSentence3 = (sentence) => {\n  if (!Array.isArray(sentence)) {\n    throw new Error('The sentence must be an array');\n  }\n\n  if (sentence.length < 1) {\n    throw new Error('The sentence must have at least one word');\n  }\n\n  let words = sentence.join(' ');\n  words = words.toLowerCase();\n\n  let index = words.lastIndexOf(' ');\n  return words.slice(0, index + 1).join(' ');\n};\n\n/*\n  Given a sentence containing a sentence,\n  Returns a new sentence that contains the words in the original sentence\n  with a space in between each word,\n  The new sentence is a substring of the original sentence.\n\n  Example:\n      Input: sentence = \"This is a test\"\n      Output: \"This is a test\"\n\n  Example:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go for\"\n  */\nconst withSpaceInSentence4 = (sentence) => {\n  if (!Array.isArray(sentence)) {\n    throw new Error('The sentence must be an array');\n  }\n\n  if (sentence.length < 1) {\n    throw new Error('The sentence must have at least one word');\n  }\n\n  let words = sentence.join(' ');\n  words = words.toLowerCase();\n\n  let index = words.lastIndexOf(' ');\n  return words.slice(0, index).join(' ');\n};\n\n/*\n  Given a sentence containing a sentence,\n  Returns a new sentence that contains the words in the original sentence\n  with a space in between each word,\n  The new sentence is a substring of the original sentence.\n\n  Example:\n      Input: sentence = \"This is a test\"\n      Output: \"This is a test\"\n\n  Example:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go for\"\n  */\nconst"}
{"task_id": "JavaScript/144", "prompt": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n    if (!x)\n        return false;\n    if (!n)\n        return false;\n    if (x === n)\n        return true;\n    if (x.indexOf('/')!== -1 && n.indexOf('/')!== -1) {\n        var x_a = x.split('/');\n        var n_a = n.split('/');\n        if (x_a[0] === n_a[0] && x_a[1] === n_a[1])\n            return true;\n    }\n    return false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n    let result = []\n    let sorted = nums.slice()\n\n    sorted.sort((a, b) => {\n        if (a > b) return 1\n        if (a < b) return -1\n        return 0\n    })\n\n    for (let i = 0; i < sorted.length; i++) {\n        let num = sorted[i]\n        let index = result.findIndex(item => item >= num)\n        result.splice(index, 0, num)\n    }\n\n    return result\n}\n\nmodule.exports = orderByPoints\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = [];\n  for (let i = 0; i < nums.length; i++) {\n    let n = nums[i];\n    if (n < 10) {\n      n = `0${n}`;\n    } else if (n > 9 && n < 100) {\n      n = `0${n}`;\n    }\n    arr.push(n);\n  }\n  return arr.join('').length;\n}\n\nconst specialFilter = (nums) => {\n  const arr = [];\n  for (let i = 0; i < nums.length; i++) {\n    let n = nums[i];\n    if (n < 10) {\n      n = `0${n}`;\n    } else if (n > 9 && n < 100) {\n      n = `0${n}`;\n    }\n    arr.push(n);\n  }\n  return arr.join('').length;\n}\n\nmodule.exports = specialFilter;\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    return a.reduce((pre, cur, index) => {\n        let next = index + 1;\n        return (a[index] + a[next] + a[index + 1]) % 3;\n    }, 0);\n}\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [planet1, planet2].map(pl => {\n    if (pl == \"Earth\") return \"Mercury\"\n    if (pl == \"Mars\") return \"Jupiter\"\n    if (pl == \"Jupiter\") return \"Saturn\"\n    if (pl == \"Saturn\") return \"Uranus\"\n    if (pl == \"Uranus\") return \"Neptune\"\n    return pl\n  })\n  const planetSorted = planets.sort((a, b) => a < b)\n  const planetCount = {\n    [planet1]: 1,\n    [planet2]: 1\n  }\n  const planetList = planetSorted.map((pl, i) => ({\n    planet: pl,\n    count: planetCount[pl]\n  }))\n  const planetSum = {\n    [planet1]: 0,\n    [planet2]: 0\n  }\n  for (let i = 0; i < planetList.length; i++) {\n    planetSum[planetList[i].planet] += planetList[i].count\n  }\n  const planetGrouped = Object.keys(planetSum).sort((a, b) => planetSum[a] > planetSum[b]).map(key => ({\n    planet: key,\n    count: planetSum[key]\n  }))\n  const planetTuples = planetGrouped.map((g, i) => ({\n    planet: g.planet,\n    count: g.count\n  }))\n  const planetListLength = planetTuples.length\n  const planetList = planetTuples.slice(0, planetListLength / 2)\n  const planetList2 = planetTuples.slice(planetListLength / 2)\n  return planetList.concat(planetList2)\n}\n\nconst planetList = [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\nconst planetList2 = [\"Mercury\", \"Venus\"]\nconst planetTuples = bf(planetList[0], planetList[1])\n\nconsole.log(planetList)\nconsole.log(planetList2)\nconsole.log(planetTuples)\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const sortedList = lst.sort((a, b) => {\n    return a.length - b.length\n  })\n  const sortedListLen = sortedList.length\n  let i = 0\n  let total = 0\n  while (i < len) {\n    total += sortedList[i].length\n    i++\n  }\n  return [total, sortedList]\n}\n\nconst test = () => {\n  const result = sortedListSum([\"aa\", \"ab\", \"a\", \"aa\", \"a\", \"cd\"])\n  console.log(result)\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  const sum = x + y;\n  if (sum === n) return x;\n  return y;\n};\n\nconsole.log(xOrY(15, 8, 5));\nconsole.log(xOrY(7, 34, 12));\n\n/*\n  This is a pRimE rEvAtAble\n  The function is rEvAtAble because a function has a return value and also\n  tHe function can be called without passing any argument\n  If we want to return the result of a function we can use the return keyword\n  to return the result of a function\n\n  Examples:\n  for xOrY(15, 8, 5) == 15\n  for xOrY(7, 34, 12) == 34\n  \n  */\nconst xOrY = (n, x, y) => {\n  return x + y;\n};\n\nconsole.log(xOrY(15, 8, 5));\nconsole.log(xOrY(7, 34, 12));\n\n/*\n  this is a pRimE rEvAtAble\n  The function is rEvAtAble because a function has a return value and also\n  tHe function can be called without passing any argument\n  If we want to return the result of a function we can use the return keyword\n  to return the result of a function\n\n  Examples:\n  for xOrY(15, 8, 5) == 15\n  for xOrY(7, 34, 12) == 34\n  \n  */\nconst xOrY = (n, x, y) => {\n  return x + y;\n};\n\nconsole.log(xOrY(15, 8, 5));\nconsole.log(xOrY(7, 34, 12));\n\n/*\n  This is a pRimE rEvAtAble\n  The function is rEvAtAble because a function has a return value and also\n  tHe function can be called without passing any argument\n  If we want to return the result of a function we can use the return keyword\n  to return the result of a function\n\n  Examples:\n  for xOrY(15, 8, 5) == 15\n  for xOrY(7, 34, 12) == 34\n  \n  */\nconst xOrY = (n, x, y) => {\n  return x + y;\n};\n\nconsole.log(xOrY(15, 8, 5));\nconsole.log(xOrY(7, 34, 12));\n\n/*\n  this is a pRimE rEvAtAble\n  The function is rEvAtAble because a function has a return value and also\n  tHe function can be called without passing any argument\n  If we want to return the result of a function we can use the return keyword\n  to return the result of a function\n\n  Examples:\n  for xOrY(15, 8, 5) == 15\n  for xOrY(7, 34, 12) == 34\n  \n  */\nconst xOrY = (n, x, y) => {\n  return x + y;\n};\n\nconsole.log(xOrY(15, 8, 5));\nconsole.log(xOrY(7, 34, 12));\n\n/*\n  this is a pRimE rEvAtAble\n  The function is rEvAtAble because a function has a return value and also\n  tHe function can be called without passing any argument\n  If we want to return the result of a function we can use the return keyword\n  to return the result of a function\n\n  Examples:\n  for xOrY(15, 8, 5) == 15\n  for xOrY(7, 34, 12) == 34\n  \n  */\nconst xOrY = (n, x, y) => {\n  return x + y;\n};\n\nconsole.log(xOrY(15, 8, 5));\nconsole.log(xOrY(7, 34, 12));<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  let x = lst.length;\n  if (x === 0) {\n    return 0;\n  }\n  if (x === 1) {\n    return lst[0];\n  }\n  let a = lst[0];\n  let b = lst[1];\n  let c = 0;\n  for (let i = 0; i < x - 1; i++) {\n    c += a * a;\n    a = lst[i + 1];\n  }\n  let diff = a * b - c;\n  return diff;\n};\n\nexport {\n  doubleTheDifference\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let answer = game.slice();\n  guess.forEach(g => answer[g] -= 1);\n  return answer;\n}\n\nconst isValid = (guess) => {\n  return (guess.length === game.length) && (guess.every(x => x === -1 || x >= 0));\n}\n\nconst getGuess = (guess) => {\n  return guess.map(x => x === -1? '?' : x);\n}\n\nconst checkGuess = (guess) => {\n  const valid = isValid(guess);\n  if (valid) {\n    return {\n      score: compare(game, guess),\n      guess: getGuess(guess)\n    };\n  } else {\n    return null;\n  }\n}\n\nconst checkGuesses = (guesses) => {\n  const allGood = guesses.every(checkGuess);\n  if (allGood) {\n    return {\n      scores: guesses.map(checkGuess),\n      guesses: guesses.map(getGuess)\n    }\n  } else {\n    return null;\n  }\n}\n\nconst playGame = (game, guess) => {\n  if (isValid(guess)) {\n    return checkGuess(guess);\n  } else {\n    return null;\n  }\n}\n\nconst playGames = (games, guesses) => {\n  const checkGames = games.map(playGame);\n  const checkGuesses = checkGuesses(guesses);\n  const goodGames = checkGames.filter(g => g);\n  if (goodGames.length === 0) {\n    return null;\n  } else {\n    return goodGames[0];\n  }\n}\n\nconst play = (games, guesses) => {\n  return playGames(games, guesses);\n}\n\nmodule.exports = play;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  if (extensions.length === 0) {\n    return class_name;\n  }\n  const strongestExtension = extensions[0];\n  let extension_strength = 0;\n  for (let extension of extensions) {\n    if (extension.length > extension_strength) {\n      extension_strength = extension.length;\n      strongestExtension = extension;\n    }\n  }\n  return class_name + '.' + strongestExtension;\n};\n\nconst parse = (input) => {\n  const lines = input.split(/\\r\\n|\\n/g);\n  const classes = lines.reduce((classes, line) => {\n    const match = line.match(/^(\\S+)\\s+(\\S+)\\s+(\\S+)/);\n    if (match) {\n      const class_name = match[1];\n      const ext = match[2].replace(/\\./g, '_');\n      const extension_strength = match[3];\n      classes[class_name] = {\n        name: class_name,\n        extension: ext,\n        strength: extension_strength,\n      };\n    }\n    return classes;\n  }, {});\n  return classes;\n};\n\nconst write = (classes) => {\n  let line = '';\n  for (let class_name in classes) {\n    const { name, extension, strength } = classes[class_name];\n    line += `${name} ${extension} ${strength}\\r\\n`;\n  }\n  return line;\n};\n\nconst main = (input) => {\n  const classes = parse(input);\n  console.log(strongestExtension(classes.forMat, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.sTrONGesTExTensioNNamE, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.a_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my_class, ['AA', 'Be', 'CC']));\n  console.log(strongestExtension(classes.my"}
{"task_id": "JavaScript/154", "prompt": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n  let aList = a.split(\"\"),\n    bList = b.split(\"\"),\n    lenA = aList.length,\n    lenB = bList.length,\n    i = 0,\n    j = 0,\n    k = 0,\n    found = false;\n  while(i < lenA && j < lenB) {\n    if(aList[i] === bList[j]) {\n      i += 1;\n      j += 1;\n    } else if(aList[i] < bList[j]) {\n      i += 1;\n    } else {\n      j += 1;\n    }\n    if(i === lenA || j === lenB) {\n      return found? true : false;\n    }\n  }\n  return found? false : true;\n};\n\n/*\n  Given a word, return the word with one or more of its letters changed to\n  the letter(s) following the second letter in the word. For example,\n  \"abcd\" -> \"acbd\", \"abcdef\" -> \"adbcef\", \"abcfed\" -> \"abcfdd\", \"abcfghi\" ->\n  \"abcfedef\".\n  */\nConst wordRotation = (a) => {\n  let aList = a.split(\"\"),\n    len = aList.length,\n    newList = [],\n    i = 0;\n  for(i; i < len - 1; i += 1) {\n    newList.push(aList[i]);\n    newList.push(aList[i + 1]);\n    newList.push(aList[i]);\n  }\n  newList.push(aList[len - 1]);\n  return newList.join(\"\");\n};\n\n/*\n  Given a word, return the word with one or more of its letters changed to\n  the letter(s) before the second letter in the word. For example,\n  \"abcd\" -> \"abcd\", \"abcdef\" -> \"abcdef\", \"abcfed\" -> \"abcfdd\", \"abcfghi\" ->\n  \"abcfedef\".\n  */\nConst wordReverseRotation = (a) => {\n  let aList = a.split(\"\"),\n    len = aList.length,\n    newList = [],\n    i = 0;\n  for(i; i < len - 1; i += 1) {\n    newList.push(aList[i]);\n    newList.push(aList[i + 1]);\n    newList.push(aList[i]);\n  }\n  newList.push(aList[len - 1]);\n  return newList.join(\"\");\n};\n\n/*\n  Given a string, return the string with one or more of its letters reversed.\n  For example, \"abcd\" -> \"dcba\", \"abcdef\" -> \"fedcba\".\n  */\nConst reverseString = (a) => {\n  let aList = a.split(\"\"),\n    len = aList.length,\n    newList = [],\n    i = 0;\n  for(i; i < len; i += 1) {\n    newList.push(aList[len - 1 - i]);\n    newList.push(aList[len - 2 - i]);\n    newList.push(aList[len - 3 - i]);\n    newList.push(aList[len - 4 - i]);\n  }\n  return newList.join(\"\");\n};\n\n/*\n  Given a string, return the string with one or more of its letters reversed.\n  For example, \"abcd\" -> \"dcba\", \"abcdef\" -> \"fedcba\".\n  */\nConst reverseStringReverse = (a) => {\n  let aList = a.split(\"\"),\n    len = aList.length,\n    newList = [],\n    i = 0;\n  for(i; i < len; i += 1) {\n    newList.push(aList[4 - i]);\n    newList.push(aList[3 - i]);\n    newList.push(aList[2 - i]);\n    newList.push(aList[1 - i]);\n    newList.push(aList[0 - i]);\n  }\n  return newList.join(\"\");\n};\n\n/*\n  Given a string, return the string with the same number of letters reversed.\n  For example, \"abcd\" -> \"dcba\", \"abcdef\" -> \"fedcba\".\n  */\nConst reverseNumber = (a) => {\n  let aList = a.split(\"\"),\n    len = aList.length,\n    newList = [],\n    i = 0;\n  for(i; i < len; i += 1) {\n    newList.push(aList[0 - i]);\n    newList.push(aList[1 - i]);\n    newList.push(aList[2 - i]);\n    newList.push(aList[3 - i]);\n  }\n  return newList.join(\"\");\n};\n\n/*\n  Given a string, return the string with the same number of letters reversed.\n  For example, \"abcd\" -> \"dcba\", \"abcdef\" -> \"fedcba\".\n  */\nConst reverseNumberReverse = (a) => {\n  let aList = a.split(\"\"),\n    len = aList.length,\n    newList = [],\n    i = 0;\n  for(i; i < len; i += 1) {\n    newList.push(aList[4 - i]);\n    newList.push(aList[3 - i]);\n    newList.push(aList[2 - i]);\n    newList.push(aList[1 - i]);\n  }\n  return newList.join(\"\");\n};\n\n/*\n  Given a string, return the string with the same number of letters reversed.\n  "}
{"task_id": "JavaScript/155", "prompt": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  var oddCount = 0,\n      evenCount = 0;\n  for (var i = 0; i < num; i++) {\n    if (i % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return (evenCount, oddCount);\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const n = parseInt(number);\n  let i = 0;\n  const intToRoman = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xvi',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cc',\n    500: 'd',\n    900:'m',\n  };\n  let s = '';\n  while (i <= n) {\n    s += intToRoman[i] || 'i';\n    i += 1;\n  }\n  return s;\n};\n\nconst intToRoman = (number) => {\n  return intToMiniRoman(number).toUpperCase();\n};\n\nmodule.exports = intToRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  const x1 = a - c\n  const x2 = b - c\n  const x3 = c - a\n\n  const y1 = x1 - x3\n  const y2 = x2 - x3\n  const y3 = x3 - x1\n  const x = y1 * y2\n  const y = y1 * y3\n  const z = y2 * y3\n  if (x + y + z === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n GivEn thE length oF the Side oF aTriangle. retURn the length oF the SIDE.\n */\nconst getTriangleSideLength = (a, b, c) => {\n  const x1 = a - c\n  const x2 = b - c\n  const x3 = c - a\n  const side = Math.sqrt(x1 * x1 + x2 * x2 + x3 * x3)\n  return side\n}\n\n/*\n GivEn thE length oF the Sides oF aTriangle. retURn the length oF the SIDE.\n */\nconst getTriangleSideLengths = (a, b, c) => {\n  const x1 = a - c\n  const x2 = b - c\n  const x3 = c - a\n  const side1 = Math.sqrt(x1 * x1 + x2 * x2 + x3 * x3)\n  const side2 = Math.sqrt(x1 * x1 + x2 * x2 + x3 * x3)\n  const side3 = Math.sqrt(x1 * x1 + x2 * x2 + x3 * x3)\n  return [side1, side2, side3]\n}\n\n/*\n GivEn thE tRue oF a Triangle is RIGhT-aNGLED.\n */\nconst isRightAngleTriangle = (a, b, c) => {\n  const sides = getTriangleSideLengths(a, b, c)\n  const side1 = sides[0]\n  const side2 = sides[1]\n  const side3 = sides[2]\n  const length1 = getTriangleSideLength(a, b, c)\n  const length2 = getTriangleSideLength(b, c, a)\n  const length3 = getTriangleSideLength(c, a, b)\n\n  if (side1 === length1 && side2 === length2 && side3 === length3) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n GivEn thE tRue oF a Triangle is RIGhT-aNGLED.\n */\nconst isRightAngleTriangle = (a, b, c) => {\n  const sides = getTriangleSideLengths(a, b, c)\n  const side1 = sides[0]\n  const side2 = sides[1]\n  const side3 = sides[2]\n  const length1 = getTriangleSideLength(a, b, c)\n  const length2 = getTriangleSideLength(b, c, a)\n  const length3 = getTriangleSideLength(c, a, b)\n\n  if (side1 === length1 && side2 === length2 && side3 === length3) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n GivEn thE tRue oF a Triangle is RIGhT-aNGLED.\n */\nconst isRightAngleTriangle = (a, b, c) => {\n  const sides = getTriangleSideLengths(a, b, c)\n  const side1 = sides[0]\n  const side2 = sides[1]\n  const side3 = sides[2]\n  const length1 = getTriangleSideLength(a, b, c)\n  const length2 = getTriangleSideLength(b, c, a)\n  const length3 = getTriangleSideLength(c, a, b)\n\n  if (side1 === length1 && side2 === length2 && side3 === length3) {\n    return true\n  } else {\n    return false\n  }\n}\n\nexport default {\n  isRightAngleTriangle,\n  isTriangleValid,\n  rightAngleTriangle\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n  if (!words || words.length === 0) return;\n  let max = 0;\n  let min = words[0].length;\n  for (let i = 0; i < words.length; i++) {\n    let len = words[i].length;\n    if (len > max) max = len;\n    if (len < min) min = len;\n  }\n  for (let i = 0; i < words.length; i++) {\n    let len = words[i].length;\n    for (let j = 0; j < len; j++) {\n      if (words[i].charAt(j) > max) max = words[i].charAt(j);\n      if (words[i].charAt(j) < min) min = words[i].charAt(j);\n    }\n  }\n  return max;\n};\n\n/*\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n  */\n/*\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    if (number >= need) {\n        return [need, 0];\n    }\n    return [number, (need - number)];\n}\n\nconst main = () => {\n    let [number, need] = eat(1, 10, 5);\n    console.log(number);\n    console.log(need);\n    let [_, remaining] = eat(2, 11, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(3, 12, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(4, 13, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(5, 14, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(6, 15, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(7, 16, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(8, 17, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(9, 18, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(10, 19, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(11, 20, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(12, 21, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(13, 22, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(14, 23, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(15, 24, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(16, 25, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(17, 26, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(18, 27, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(19, 28, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(20, 29, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(21, 30, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(22, 31, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(23, 32, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(24, 33, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(25, 34, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(26, 35, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(27, 36, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(28, 37, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(29, 38, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(30, 39, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(31, 40, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(32, 41, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(33, 42, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(34, 43, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(35, 44, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(36, 45, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(37, 46, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(38, 47, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(39, 48, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(40, 49, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(41, 50, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(42, 51, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(43, 52, 5);\n    console.log(remaining);\n    let [_, remaining] = eat(44, 53, 5);\n    console.log(remaining"}
{"task_id": "JavaScript/160", "prompt": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    const operatorLength = operator.length\n    const operandLength = operand.length - 1\n    let result = 0\n    let currentOperator = 0\n\n    while (currentOperator < operatorLength) {\n        let operand = operand[currentOperator]\n        let operator = operator[currentOperator]\n        let isOperand = false\n\n        if (operand < 0) {\n            operand = 0\n        }\n\n        while (operand >= 0) {\n            if (operand === 0) {\n                isOperand = true\n            }\n\n            if (operator === '+') {\n                result += operand\n            }\n\n            if (operator === '-') {\n                result -= operand\n            }\n\n            if (operator === '*') {\n                result *= operand\n            }\n\n            if (operator === '/') {\n                result /= operand\n            }\n\n            if (operator === '//') {\n                result = Math.floor(result / operand)\n            }\n\n            if (operator === '**') {\n                result = Math.pow(result, operand)\n            }\n\n            if (operator === '%') {\n                result = Math.floor(result / operand) * operand\n            }\n\n            operand--\n        }\n\n        if (isOperand) {\n            currentOperator++\n        }\n    }\n\n    return result\n}\n\nconst doAlgebraDemo = () => {\n    console.log(doAlgebra('+', ['2', '3', '4', '5']))\n    console.log(doAlgebra('-', ['2', '3', '4', '5']))\n    console.log(doAlgebra('*', ['2', '3', '4', '5']))\n    console.log(doAlgebra('//', ['2', '3', '4', '5']))\n    console.log(doAlgebra('**', ['2', '3', '4', '5']))\n    console.log(doAlgebra('%', ['2', '3', '4', '5']))\n}\n\ndoAlgebraDemo()\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const s = s.trim()\n  const len = s.length\n  const a = new Array(len)\n  let p = 0\n  let r = 0\n  for (let i = 0; i < len; i++) {\n    if (s[i] === '(') {\n      a[i] = '('\n      p++\n    } else if (s[i] === ')') {\n      a[i] = ')'\n      p--\n    } else if (s[i] === '{') {\n      a[i] = '{'\n      r++\n    } else if (s[i] === '}') {\n      a[i] = '}'\n      r--\n    } else if (s[i] === ',') {\n      a[i] = ','\n    } else if (s[i] ==='') {\n      a[i] =''\n    } else {\n      a[i] = s[i]\n    }\n  }\n  if (p!== 0) {\n    throw new Error('No closing parenthesis')\n  }\n  if (r!== 0) {\n    throw new Error('No closing brace')\n  }\n  return a.join('')\n}\n\nconst solve2 = (s) => {\n  const s = s.trim()\n  const len = s.length\n  const a = new Array(len)\n  let p = 0\n  let r = 0\n  for (let i = 0; i < len; i++) {\n    if (s[i] === '(') {\n      a[i] = '('\n      p++\n    } else if (s[i] === ')') {\n      a[i] = ')'\n      p--\n    } else if (s[i] === '{') {\n      a[i] = '{'\n      r++\n    } else if (s[i] === '}') {\n      a[i] = '}'\n      r--\n    } else if (s[i] === ',') {\n      a[i] = ','\n    } else if (s[i] ==='') {\n      a[i] =''\n    } else {\n      a[i] = s[i]\n    }\n  }\n  if (p!== 0) {\n    throw new Error('No closing parenthesis')\n  }\n  if (r!== 0) {\n    throw new Error('No closing brace')\n  }\n  return a.join('')\n}\n\nconst test = require('tape')\n\ntest('solve', t => {\n  t.equal(solve('((((())))()),()()'), '(((())))()')\n  t.end()\n})\n\ntest('solve2', t => {\n  t.equal(solve2('((((())))()),()()'), '(((())))()')\n  t.end()\n})\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if (text.length == 0) {\n        return null;\n    }\n\n    let hash = crypto.createHash('md5');\n    hash.update(text);\n\n    return hash.digest('hex');\n};\n\n/*\n  GivEn a sTring 'text', return Its sha256 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToSha256('Hello world') == '2d8f7f7a879bb4e5b0c7e5b6c894a44f5dab1a0e4c6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e6f7b8e3c0e3e6f6e3c3e"}
{"task_id": "JavaScript/163", "prompt": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let counter = a;\n  while (counter <= b) {\n    result.push(counter);\n    counter += 1;\n  }\n  return result;\n};\n\nconst generateIntegersSorted = (a, b) => {\n  const result = [];\n  let counter = a;\n  while (counter <= b) {\n    result.push(counter);\n    counter += 1;\n  }\n  return result.sort();\n};\n\nconst generateIntegersSortedDecreasing = (a, b) => {\n  const result = [];\n  let counter = a;\n  while (counter <= b) {\n    result.push(counter);\n    counter += 1;\n  }\n  return result.sort(function(a, b) {\n    return b - a;\n  });\n};\n\nconst generateIntegersSortedIncreasing = (a, b) => {\n  const result = [];\n  let counter = a;\n  while (counter <= b) {\n    result.push(counter);\n    counter += 1;\n  }\n  return result.sort(function(a, b) {\n    return a - b;\n  });\n};\n\nconst generateIntegersSortedByDecreasing = (a, b) => {\n  const result = [];\n  let counter = a;\n  while (counter <= b) {\n    result.push(counter);\n    counter += 1;\n  }\n  return result.sort(function(a, b) {\n    return a - b;\n  });\n};\n\nconst generateIntegersSortedByIncreasing = (a, b) => {\n  const result = [];\n  let counter = a;\n  while (counter <= b) {\n    result.push(counter);\n    counter += 1;\n  }\n  return result.sort(function(a, b) {\n    return b - a;\n  });\n};\n\nconst generateIntegersSortedByDecreasingLength = (a, b) => {\n  const result = [];\n  let counter = a;\n  while (counter <= b) {\n    result.push(counter);\n    counter += 1;\n  }\n  return result.sort(function(a, b) {\n    return a.length - b.length;\n  });\n};\n\nconst generateIntegersSortedByIncreasingLength = (a, b) => {\n  const result = [];\n  let counter = a;\n  while (counter <= b) {\n    result.push(counter);\n    counter += 1;\n  }\n  return result.sort(function(a, b) {\n    return b.length - a.length;\n  });\n};\n\nconst generateIntegersSortedByDecreasingLengthLength = (a, b) => {\n  const result = [];\n  let counter = a;\n  while (counter <= b) {\n    result.push(counter);\n    counter += 1;\n  }\n  return result.sort(function(a, b) {\n    return a.length - b.length;\n  });\n};\n\nconst generateIntegersSortedByIncreasingLengthLength = (a, b) => {\n  const result = [];\n  let counter = a;\n  while (counter <= b) {\n    result.push(counter);\n    counter += 1;\n  }\n  return result.sort(function(a, b) {\n    return b.length - a.length;\n  });\n};\n\nconst generateIntegersSortedByDecreasingLengthLength = (a, b) => {\n  const result = [];\n  let counter = a;\n  while (counter <= b) {\n    result.push(counter);\n    counter += 1;\n  }\n  return result.sort(function(a, b) {\n    return a.length - b.length;\n  });\n};\n\nconst generateIntegersSortedByDecreasingLengthLengthLength = (a, b) => {\n  const result = [];\n  let counter = a;\n  while (counter <= b) {\n    result.push(counter);\n    counter += 1;\n  }\n  return result.sort(function(a, b) {\n    return a.length - b.length;\n  });\n};\n\nconst generateIntegersSortedByIncreasingLengthLengthLength = (a, b) => {\n  const result = [];\n  let counter = a;\n  while (counter <= b) {\n    result.push(counter);\n    counter += 1;\n  }\n  return result.sort(function(a, b) {\n    return b.length - a.length;\n  });\n};\n\nconst generateIntegersSortedByDecreasingLengthLengthLengthLength = (a, b) => {\n  const result = [];\n  let counter = a;\n  while (counter <= b) {\n    result.push(counter);\n    counter += 1;\n  }\n  return result.sort(function(a, b) {\n    return a.length - b.length;\n  });\n};\n\nconst generateIntegersSortedByIncreasingLengthLengthLengthLength = (a, b) => {\n  const result = [];\n  let counter = a;\n  while (counter <= b) {\n    result.push(counter);\n    counter += 1;\n  }\n  return result.sort(function(a, b) {\n    return b.length - a.length;\n  });\n};\n<|endoftext|>"}
