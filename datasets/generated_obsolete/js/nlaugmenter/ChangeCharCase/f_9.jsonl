{"task_id": "JavaScript/0", "prompt": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const sorted = numbers.slice().sort();\n  const length = sorted.length;\n  const halfLength = length / 2;\n  for (let i = 0; i < halfLength; i++) {\n    const i1 = sorted[i];\n    const i2 = sorted[i + halfLength];\n    if (Math.abs(i1 - i2) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  // convert paren string to list of parens and their nested strings\n  const parens = paren_string.split(' ')\n  const paren_list = parens.map(paren => paren.replace(/\\(/g,'( ').replace(/\\)/g,') '))\n  // convert paren list into a stack\n  const stack = paren_list.map((paren, index) => {\n    if (paren.slice(0, 2) ==='( ') {\n      // stack item is a paren\n      return [paren.slice(2), index]\n    } else {\n      // stack item is nested paren\n      return [paren.slice(1, -1), index]\n    }\n  })\n  // remove all items from the stack that are not strings\n  stack = stack.filter(stackItem => typeof stackItem ==='string')\n  // add an empty string as the last item to the stack\n  stack.push('')\n  // find the parenthesis group that is the least nested and return its index\n  return stack.reduce((min_stack, stackItem, index) => {\n    // If the stack item is a paren\n    if (stackItem.slice(0, 2) ==='( ') {\n      // find the parenthesis group that is the least nested\n      if (min_stack === undefined || min_stack.length > stackItem.length) {\n        min_stack = stackItem\n      }\n    }\n    // If the stack item is a nested paren\n    else {\n      // find the parenthesis group that is the least nested\n      if (min_stack === undefined || min_stack.length > stackItem.length) {\n        min_stack = stackItem\n      }\n      // remove the current item from the stack\n      stack.splice(index, 1)\n    }\n    return min_stack\n  }, undefined)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number <= 1) {\n    return number;\n  }\n  if (number > 100) {\n    return number % 100;\n  }\n  const numberToDeCimal = Math.ceil(number);\n  const numberToDeCimalInt = numberToDeCimal.toString();\n  const largestInt = numberToDeCimalInt.slice(0, -1);\n  const indexOfDot = numberToDeCimalInt.lastIndexOf(\".\");\n  const deCimalPart = numberToDeCimalInt.slice(indexOfDot + 1);\n  return largestInt + deCimalPart;\n};\n\n/*\n  GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumberWithPrecision = (number, precision) => {\n  if (number <= 1) {\n    return number;\n  }\n  if (number > 100) {\n    return number % 100;\n  }\n  const numberToDeCimal = Math.ceil(number);\n  const numberToDeCimalInt = numberToDeCimal.toString();\n  const largestInt = numberToDeCimalInt.slice(0, -1);\n  const indexOfDot = numberToDeCimalInt.lastIndexOf(\".\");\n  const deCimalPart = numberToDeCimalInt.slice(indexOfDot + 1);\n  return largestInt + deCimalPart;\n};\n\nexport { truncateNumber, truncateNumberWithPrecision };\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    let sum = 0;\n    for (let op of operations) {\n        sum += op;\n    }\n    return sum < 0;\n};\n\nconst belowZero = (operations) => {\n    let sum = 0;\n    for (let op of operations) {\n        sum += op;\n    }\n    return sum < 0;\n};\n\nconst belowZero = (operations) => {\n    let sum = 0;\n    for (let op of operations) {\n        sum += op;\n    }\n    return sum < 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const avg = numbers.reduce((a, b) => a + b) / numbers.length\n  const squareDev = numbers.reduce((a, b) => a + Math.pow(b - avg, 2))\n  return Math.sqrt(squareDev / numbers.length)\n}\n\n/*\n  A givEn list of iNpuT numbers, calcUlate mean SqUaRt of the SquaRE of\n  this dataset.\n  >>> meanSquareDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst meanSquareDeviation = (numbers) => {\n  return numbers.reduce((a, b) => a + Math.pow(b, 2)) / numbers.length\n}\n\n/*\n  A givEn list of iNpuT numbers, calcUlate stdDiaV IOn of the DevIatIOn of\n  this dataset.\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst stdDeviation = (numbers) => {\n  const avg = meanAbsoluteDeviation(numbers)\n  return Math.sqrt(meanSquareDeviation(numbers) - avg * avg)\n}\n\n/*\n  A givEn list of iNpuT numbers, calcUlate stdDiaV IOn of the DevIatIOn of\n  this dataset.\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  return Math.sqrt(meanSquareDeviation(numbers))\n}\n\n/*\n  A givEn list of iNpuT numbers, calcUlate stAnDdIOrM of the deviaTion of\n  this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  return Math.sqrt(meanSquareDeviation(numbers))\n}\n\n/*\n  A givEn list of iNpuT numbers, calcUlate the ZEROn of this dataset.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst zeroDeviation = (numbers) => {\n  return 1.0\n}\n\nexport {\n  meanAbsoluteDeviation,\n  meanSquareDeviation,\n  stdDeviation,\n  standardDeviation,\n  zeroDeviation\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    let num_index = 0,\n        str_index = 0,\n        str_len = numbers.length,\n        str_delimeter = str_len? str_len - 1 : 0,\n        str_delimeter_length = str_delimeter? str_delimeter.length : 0,\n        str_delimeter_index = str_delimeter_length? str_delimeter_length - 1 : 0,\n        str_delimeter_char = str_delimeter_length? str_delimeter.charAt(str_delimeter_index) : '';\n\n    return numbers.reduce((acc, current, index) => {\n        const current_char = current.charAt(0);\n        const next_char = current.charAt(1);\n        if (index === str_delimeter_index) {\n            acc.push(str_delimeter_char);\n            str_index += 2;\n            str_delimeter_index = 0;\n        } else if (str_delimeter_index === 0) {\n            if (str_index === str_len) {\n                acc.push(current_char);\n                str_index += 1;\n            } else {\n                acc.push(current_char);\n            }\n        } else if (str_delimeter_index === 1) {\n            acc.push(current_char);\n            str_index += 1;\n            str_delimeter_index = 0;\n        } else {\n            acc.push(current_char);\n        }\n        return acc;\n    }, []);\n};\n\nexport default intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let curr_paren_level = 0\n  let paren_stack = []\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      curr_paren_level += 1\n    } else if (paren_string[i] === ')') {\n      curr_paren_level -= 1\n    }\n    if (curr_paren_level === 0) {\n      paren_stack.push(i)\n    } else if (curr_paren_level < 0) {\n      throw new Error('Negative paren level')\n    }\n  }\n\n  let parsed_string = []\n  let curr_paren_idx = 0\n  let curr_char_idx = 0\n\n  while (paren_stack.length > 0) {\n    curr_char_idx = paren_stack[curr_paren_idx]\n    parsed_string.push(paren_string.substring(curr_char_idx, paren_stack[curr_paren_idx + 1]))\n    curr_paren_idx++\n    curr_char_idx++\n    while (curr_paren_idx < paren_stack.length && paren_stack[curr_paren_idx] < paren_stack[curr_paren_idx + 1]) {\n      curr_char_idx = paren_stack[curr_paren_idx]\n      parsed_string.push(paren_string.substring(curr_char_idx, paren_stack[curr_paren_idx + 1]))\n      curr_paren_idx++\n      curr_char_idx++\n    }\n    curr_paren_idx--\n  }\n\n  return parsed_string\n}\n\n/**\n  Parse out the string of the form:\n  (()()) ((())) () ((())()())\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  let curr_paren_level = 0\n  let paren_stack = []\n  let paren_stack_last_idx = 0\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      curr_paren_level += 1\n      paren_stack.push(i)\n    } else if (paren_string[i] === ')') {\n      curr_paren_level -= 1\n      paren_stack_last_idx = paren_stack.pop()\n    }\n    if (curr_paren_level === 0) {\n      paren_stack_last_idx = i\n      break\n    }\n  }\n\n  let parsed_string = paren_string.substring(paren_stack_last_idx + 1)\n\n  return parsed_string\n}\n\nmodule.exports = {\n  parseNestedParens,\n  parseNestedParens2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const arr = strings.map((item) => item.toLowerCase());\n  const found = arr.find((str) => str.includes(substring));\n  return (found)? strings.filter((item) => item.includes(substring)) : strings;\n};\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nexport default {\n  filters: {\n    substring: {\n      filterBySubstring,\n      description: 'filterBySubstring'\n    }\n  },\n  description:'string filters'\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = 1\n  const sum = 0\n  let x = 1\n\n  if (numbers.length === 0) {\n    return sum, product\n  }\n\n  for (let i = 0; i < numbers.length; i++) {\n    x = x * numbers[i]\n  }\n\n  return sum + x, product + x\n}\n\n/*\n  THe Sum of the Square of all iNteGers in a list.\n  >>> sumOfSquare([1, 2, 3, 4])\n  25\n  >>> sumOfSquare([1, 2, 3, 4, 5, 6, 7])\n  900\n  */\nconst sumOfSquare = (numbers) => {\n  const sum = 0\n  let x = 0\n\n  for (let i = 0; i < numbers.length; i++) {\n    x = x + Math.pow(numbers[i], 2)\n  }\n\n  return sum\n}\n\n/*\n  THe iNteGer at position i in a list.\n  >>> numberOfInters(['1', '2', '3'])\n  2\n  >>> numberOfInters([1, 2, 3])\n  2\n  >>> numberOfInters([1, 2, 3, 4])\n  3\n  >>> numberOfInters([])\n  0\n  >>> numberOfInters(['1', '2', '3', '4'])\n  4\n  */\nconst numberOfInters = (numbers) => {\n  const inters = []\n  let x = 0\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (i < numbers.length - 1) {\n      for (let j = i + 1; j < numbers.length; j++) {\n        x = x + 1\n      }\n    }\n  }\n\n  return x\n}\n\n/*\n  THe product of all iNteGers in a list.\n  >>> productOfInters(['1', '2', '3', '4'])\n  24\n  >>> productOfInters([1, 2, 3, 4])\n  24\n  >>> productOfInters([1, 2, 3, 4, 5, 6, 7])\n  720\n  */\nconst productOfInters = (numbers) => {\n  const product = 1\n  let x = 1\n\n  for (let i = 0; i < numbers.length; i++) {\n    x = x * numbers[i]\n  }\n\n  return product\n}\n\n/*\n  THe sum of all iNteGers in a list.\n  >>> sumOfInters(['1', '2', '3', '4'])\n  9\n  >>> sumOfInters([1, 2, 3, 4])\n  9\n  >>> sumOfInters([1, 2, 3, 4, 5, 6, 7])\n  42\n  */\nconst sumOfInters = (numbers) => {\n  const sum = 0\n  let x = 0\n\n  for (let i = 0; i < numbers.length; i++) {\n    x = x + numbers[i]\n  }\n\n  return sum\n}\n\n/*\n  The iNteGer at position i in a list.\n  >>> inter(['1', '2', '3'])\n  2\n  >>> inter([1, 2, 3])\n  2\n  >>> inter([1, 2, 3, 4])\n  3\n  >>> inter([])\n  0\n  >>> inter(['1', '2', '3', '4'])\n  4\n  */\nconst inter = (numbers) => {\n  let x = 0\n  let i = 0\n\n  for (i = 0; i < numbers.length; i++) {\n    if (i < numbers.length - 1) {\n      x = x + 1\n    }\n  }\n\n  return x\n}\n\n/*\n  The iNteGer at position i in a list.\n  >>> average(['1', '2', '3'])\n  2.0\n  >>> average([1, 2, 3])\n  2.0\n  >>> average([1, 2, 3, 4])\n  3.0\n  >>> average([])\n  0.0\n  >>> average(['1', '2', '3', '4'])\n  3.0\n  */\nconst average = (numbers) => {\n  let sum = 0\n  let x = 0\n\n  for (let i = 0; i < numbers.length; i++) {\n    x = x + numbers[i]\n    sum = sum + numbers[i]\n  }\n\n  return sum / numbers.length\n}\n\n/*\n  The iNteGer at position i in a list.\n  >>> median(['1', '2', '3'])\n  2.0\n  >>> median([1, 2, 3])\n  2.0\n  >>> median([1, 2, 3, 4])\n  3.0\n  >>> median([])\n  0.0\n  >>> median(['1', '2', '3', '4'])\n  3.0\n  */\nconst median = (numbers) => {\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let p = 0\n  let q = 0\n  let sum = 0\n\n  if (numbers.length === 0) {\n    return 0\n  }\n\n  for (i = 0; i < numbers.length; i++) {\n    for (j = i + 1; j < numbers.length; j++) {\n      for (k = j + 1; k < numbers.length; k++) {\n        for (l = k + 1; l < numbers.length; l++) {\n          for (m = l + 1; m < numbers.length; m++) {\n            for (n = m + 1; n < numbers.length; n++) {\n              for (p = n + 1; p < numbers.length; p++) {"}
{"task_id": "JavaScript/9", "prompt": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    const max = numbers[0];\n    const index = 0;\n\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n            index = i;\n        }\n    }\n\n    return numbers.slice(index);\n}\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const length = string.length;\n  let palindrome = string;\n  for (let i = 0; i < length / 2; i++) {\n    palindrome = palindrome.replace(string[i], string[length - 1 - i]);\n  }\n  return palindrome;\n}\n\n/* Test the palindrome function */\n/* eslint-disable-next-line no-console */\nconsole.log(makePalindrome('cat') === 'catac'? 'Good' : 'BAD');\n\n/* test the isPalindrome function */\nconsole.log(isPalindrome('cat') === true? 'Good' : 'BAD');\nconsole.log(isPalindrome('cat') === false? 'Good' : 'BAD');\nconsole.log(isPalindrome('ca') === false? 'Good' : 'BAD');\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aS = a.split('')\n  const bS = b.split('')\n  const lEN = aS.length\n  const lenDiff = bS.length - lEN\n  let result = ''\n  if (lenDiff > 0) {\n    for (let i = 0; i < lEN; i++) {\n      result += (aS[i] === bS[i])? '0' : '1'\n    }\n    for (let i = lEN; i < bS.length; i++) {\n      result += '1'\n    }\n  } else if (lenDiff < 0) {\n    for (let i = 0; i < lEN; i++) {\n      result += (aS[i] === bS[i])? '0' : '1'\n    }\n  }\n  return result\n}\n\n/*\n  Given a string, this function will return a new string with the first\n  character in upper case.\n  >>> toUpperCase('Hello')\n  'HELLO'\n  */\nconst toUpperCase = s => {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\n/*\n  Given a string, this function will return a new string with the first\n  character in lower case.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toLowerCase = s => {\n  return s.charAt(0).toLowerCase() + s.slice(1)\n}\n\n/*\n  Given a string, this function will return a new string with the first\n  character in uppercase and all other characters in lowercase.\n  >>> upperCaseFirst('hello')\n  'Hello'\n  >>> upperCaseFirst('HELLO')\n  'HELLO'\n  */\nconst upperCaseFirst = s => {\n  return toUpperCase(s)\n}\n\n/*\n  Given a string, this function will return a new string with the first\n  character in lowercase and all other characters in uppercase.\n  >>> lowerCaseFirst('Hello')\n  'hello'\n  >>> lowerCaseFirst('HELLO')\n  'HELLO'\n  */\nconst lowerCaseFirst = s => {\n  return toLowerCase(s)\n}\n\n/*\n  Given a string, this function will return a new string with all characters\n  in uppercase.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toUpperCaseAll = s => {\n  return s.toUpperCase()\n}\n\n/*\n  Given a string, this function will return a new string with all characters\n  in lowercase.\n  >>> toLowerCase('HELLO')\n  'hello'\n  */\nconst toLowerCaseAll = s => {\n  return s.toLowerCase()\n}\n\n/*\n  Given a string, this function will return a new string with all uppercase\n  characters replaced by their lowercase counterparts.\n  >>> replaceUpperCase('HELLO')\n  'hello'\n  >>> replaceUpperCase('HELLO')\n  'hello'\n  */\nconst replaceUpperCase = s => {\n  return s.replace(/[A-Z]/g, l => l.toLowerCase())\n}\n\n/*\n  Given a string, this function will return a new string with all lowercase\n  characters replaced by their uppercase counterparts.\n  >>> replaceLowerCase('hello')\n  'HELLO'\n  >>> replaceLowerCase('hello')\n  'HELLO'\n  */\nconst replaceLowerCase = s => {\n  return s.replace(/[a-z]/g, l => l.toUpperCase())\n}\n\n/*\n  Given a string, this function will return a new string with all uppercase\n  characters and lowercase characters switched.\n  >>> swapCase('Hello')\n  'hELLO'\n  >>> swapCase('Hello')\n  'hELLO'\n  */\nconst swapCase = s => {\n  return s.replace(/[A-Z]/g, l => l.toLowerCase())\n   .replace(/[a-z]/g, l => l.toUpperCase())\n}\n\nmodule.exports = {\n  stringXor,\n  toUpperCase,\n  toLowerCase,\n  upperCaseFirst,\n  lowerCaseFirst,\n  toUpperCaseAll,\n  toLowerCaseAll,\n  replaceUpperCase,\n  replaceLowerCase,\n  swapCase\n}\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let max = 0;\n  strings.forEach(string => {\n    if (string.length > max) max = string.length;\n  })\n  return strings[0][0];\n}\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest([])\n  >>> longest(['a', 'bb', 'ccc', '', 'aaaa'])\n  'aaaa'\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let i = 0;\n  let j = 0;\n  while (a > 0) {\n    if (a === b) {\n      return a;\n    } else if (a > b) {\n      j += 1;\n      a = a % b;\n    } else {\n      i += 1;\n      b = b % a;\n    }\n  }\n  return a > b? a : b;\n};\n\n/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst gcd = (a, b) => {\n  while (b > 0) {\n    a = a % b;\n    if (a === 0) {\n      return b;\n    }\n    b = b % a;\n  }\n  return a;\n};\n\nconst gcd2 = (a, b) => {\n  let result = 0;\n  while (b > 0) {\n    result = a % b;\n    a = b;\n    b = result;\n  }\n  return a;\n};\n\n/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst gcd3 = (a, b) => {\n  while (b > 0) {\n    let tmp = b;\n    b = a % b;\n    a = tmp;\n  }\n  return a;\n};\n\nconst gcd4 = (a, b) => {\n  let aa = a;\n  let bb = b;\n  let tmp = a;\n  let result = b;\n  while (bb > 0) {\n    tmp = aa % bb;\n    result = bb;\n    aa = bb;\n    bb = tmp;\n  }\n  return result;\n};\n\nconst gcd5 = (a, b) => {\n  let c = 0;\n  let d = 0;\n  while (b > 0) {\n    let tmp = a;\n    a = b;\n    b = tmp % b;\n    tmp = c;\n    c = d;\n    d = tmp % b;\n  }\n  return a;\n};\n\n/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst gcd6 = (a, b) => {\n  let aa = a;\n  let bb = b;\n  let tmp = a;\n  let result = b;\n  while (bb > 0) {\n    tmp = aa % bb;\n    result = bb;\n    aa = bb;\n    bb = tmp;\n  }\n  return aa;\n};\n\nconst gcd7 = (a, b) => {\n  let c = 0;\n  let d = 0;\n  while (b > 0) {\n    let tmp = a;\n    a = b;\n    b = tmp % b;\n    tmp = c;\n    c = d;\n    d = tmp % b;\n  }\n  return a;\n};\n\n/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst gcd8 = (a, b) => {\n  let c = 0;\n  let d = 0;\n  while (b > 0) {\n    let tmp = a;\n    a = b;\n    b = tmp % b;\n    tmp = c;\n    c = d;\n    d = tmp % b;\n  }\n  return a;\n};\n\nconst gcd9 = (a, b) => {\n  let c = 0;\n  let d = 0;\n  while (b > 0) {\n    let tmp = a;\n    a = b;\n    b = tmp % b;\n    tmp = c;\n    c = d;\n    d = tmp % b;\n  }\n  return a;\n};\n\nconst gcd10 = (a, b) => {\n  let c = 0;\n  let d = 0;\n  while (b > 0) {\n    let tmp = a;\n    a = b;\n    b = tmp % b;\n    tmp = c;\n    c = d;\n    d = tmp % b;\n  }\n  return a;\n};\n\nconst gcd11 = (a, b) => {\n  let c = 0;\n  let d = 0;\n  while (b > 0) {\n    let tmp = a;\n    a = b;\n    b = tmp % b;\n    tmp = c;\n    c = d;\n    d = tmp % b;\n  }\n  return a;\n};\n\nconst gcd12 = (a, b) => {\n  let c = 0;\n  let d = 0;\n  while (b > 0) {\n    let tmp = a;\n    a = b;\n    b = tmp % b;\n    tmp = c;\n    c = d;\n    d = tmp % b;\n  }\n  return a;\n};\n\nconst gcd13 = (a, b) => {\n  let c = 0;\n  let d = 0;\n  while (b > 0) {\n    let tmp = a;\n    a = b;\n    b = tmp % b;\n    tmp = c;\n    c = d;\n    d = tmp % b;\n  }\n  return a;\n};\n\nconst gcd14 = (a, b) => {\n  let c = 0;\n  let d = 0;\n  while (b > 0) {\n    let tmp = a;\n    a = b;\n    "}
{"task_id": "JavaScript/14", "prompt": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (string.length === 0) {\n    return [];\n  }\n  let prefixes = [string];\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    prefixes = prefixes.concat(allPrefixes(currentPrefix));\n    currentPrefix = currentPrefix.slice(0, -1);\n  }\n  return prefixes;\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('ab')\n  ['a', 'ab', 'ab']\n  >>> allPrefixes('abc')\n  []\n  */\nconst containsAllPrefixes = (string, prefixes) => {\n  if (prefixes.length === 0) {\n    return true;\n  }\n  let currentPrefix = string;\n  while (currentPrefix.length > 0) {\n    if (prefixes.indexOf(currentPrefix) === -1) {\n      return false;\n    }\n    currentPrefix = currentPrefix.slice(0, -1);\n  }\n  return true;\n};\n\nconst isString = (string) => {\n  return typeof string ==='string';\n};\n\nconst isArray = (array) => {\n  return Array.isArray(array);\n};\n\nconst isObject = (object) => {\n  return object && typeof object === 'object';\n};\n\nconst containsPrefix = (prefix, string) => {\n  return string.indexOf(prefix) === 0;\n};\n\nconst containsAnyPrefix = (prefix, string) => {\n  return containsPrefix(prefix, string) || containsPrefix(prefix.toLowerCase(), string.toLowerCase());\n};\n\nconst containsAllPrefixes = (prefixes, string) => {\n  return containsAllPrefixes(string, prefixes);\n};\n\nconst hasPrefix = (string, prefix) => {\n  return containsPrefix(prefix, string);\n};\n\nconst hasAnyPrefix = (string, prefix) => {\n  return containsAnyPrefix(prefix, string);\n};\n\nconst hasAllPrefixes = (string, prefixes) => {\n  return containsAllPrefixes(string, prefixes);\n};\n\nconst trim = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '');\n};\n\nconst isEmpty = (string) => {\n  return string.length === 0;\n};\n\nconst hasLength = (string, length) => {\n  return string.length === length;\n};\n\nconst containsOnly = (string, characters) => {\n  return string.split('').every((character) => {\n    return characters.indexOf(character)!== -1;\n  });\n};\n\nconst isAlphanumeric = (string) => {\n  return containsOnly(string, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz');\n};\n\nconst isAlpha = (string) => {\n  return containsOnly(string, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz');\n};\n\nconst containsDigit = (string) => {\n  return containsOnly(string, '0123456789');\n};\n\nconst containsCapital = (string) => {\n  return containsOnly(string, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');\n};\n\nconst containsLower = (string) => {\n  return containsOnly(string, 'abcdefghijklmnopqrstuvwxyz');\n};\n\nconst containsUpper = (string) => {\n  return containsOnly(string, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz');\n};\n\nconst containsPunctuation = (string) => {\n  return containsOnly(string, '~!@#$%^&*()_+{}[]|:;<,>.?/\\\"');\n};\n\nconst isCapitalized = (string) => {\n  return string.charAt(0).toUpperCase() === string.charAt(0);\n};\n\nconst isNumber = (string) => {\n  return containsOnly(string, '0123456789');\n};\n\nconst isUpperCase = (string) => {\n  return string.charAt(0).toUpperCase() === string.charAt(0);\n};\n\nconst isLowerCase = (string) => {\n  return string.charAt(0).toLowerCase() === string.charAt(0);\n};\n\nconst isMixedCase = (string) => {\n  return isLowerCase(string) || isUpperCase(string);\n};\n\nconst isWord = (string) => {\n  return isCapitalized(string) || isNumber(string);\n};\n\nconst containsOnly = (string, characters) => {\n  return string.split('').every((character) => {\n    return characters.indexOf(character)!== -1;\n  });\n};\n\nconst containsOnlyUppercase = (string) => {\n  return containsOnly(string, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');\n};\n\nconst containsOnlyLowercase = (string) => {\n  return containsOnly(string, 'abcdefghijklmnopqrstuvwxyz');\n};\n\nconst containsOnlyNumbers = (string) => {\n  return containsOnly(string, '0123456789');\n};\n\nconst containsOnlyLetters = (string) => {\n  return containsOnly(string, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz');\n};\n\nconst containsOnlyCapitalizedLetters = (string) => {\n  return containsOnly(string, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz');\n};\n\nconst containsOnlyLettersAndNumbers = (string) => {\n  return containsOnlyLetters("}
{"task_id": "JavaScript/15", "prompt": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const string = '';\n  for (let i = 0; i < n; i++) {\n    string = `${string} ${i + 1}`;\n  }\n  return string;\n};\n\n/* Returns an IntegeR coNtainIng sPace-deliMitEd numBerS StArTing from 0 Upto n exclusive.\n  >>> integerSequence(0)\n  0\n  >>> integerSequence(5)\n  1 2 3 4\n  */\nconst integerSequence = (n) => {\n  const integer = 0;\n  for (let i = 0; i < n; i++) {\n    integer = integer + 1;\n  }\n  return integer;\n};\n\n/*\n  Returns a List of IntegeR coNtainIng sPace-deliMitEd numBerS StArTing from 0 Upto n exclusive.\n  >>> listOfIntegers(0)\n  []\n  >>> listOfIntegers(5)\n  [1, 2, 3, 4, 5]\n  */\nconst listOfIntegers = (n) => {\n  const integerList = [];\n  for (let i = 0; i < n; i++) {\n    integerList.push(integerSequence(i + 1));\n  }\n  return integerList;\n};\n\n/*\n  Returns a List of StrinG coNtainIng spAce-deliMitEd numBerS StArTing from 0 Upto n inclusive.\n  >>> listOfStrings(0)\n  []\n  >>> listOfStrings(5)\n  ['0', '1', '2', '3', '4', '5']\n  */\nconst listOfStrings = (n) => {\n  const stringList = [];\n  for (let i = 0; i < n; i++) {\n    stringList.push(stringSequence(i + 1));\n  }\n  return stringList;\n};\n\n/*\n  Returns a List of Float coNtainIng sPace-deliMitEd numBerS StArTing from 0 Upto n inclusive.\n  >>> listOfFloats(0)\n  []\n  >>> listOfFloats(5)\n  [0.1, 0.2, 0.3, 0.4, 0.5]\n  */\nconst listOfFloats = (n) => {\n  const floatList = [];\n  for (let i = 0; i < n; i++) {\n    floatList.push(floatSequence(i + 1));\n  }\n  return floatList;\n};\n\n/*\n  Returns a List of Booleans coNtainIng sPace-deliMitEd numBerS StArTing from 0 Upto n inclusive.\n  >>> listOfBooleans(0)\n  []\n  >>> listOfBooleans(5)\n  [false, true, true, true, false]\n  */\nconst listOfBooleans = (n) => {\n  const booleanList = [];\n  for (let i = 0; i < n; i++) {\n    booleanList.push(booleanSequence(i + 1));\n  }\n  return booleanList;\n};\n\nmodule.exports = {\n  integerSequence,\n  listOfIntegers,\n  listOfStrings,\n  listOfFloats,\n  listOfBooleans\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n    const chars = string.split('')\n    return chars.reduce((prev, curr) => {\n        if (prev.indexOf(curr) < 0) {\n            prev.push(curr)\n            return prev\n        } else {\n            return prev\n        }\n    }, [])\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music_list = []\n  let c = 0\n  let curr_note = 0\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] == 'o') {\n      curr_note = 0\n    } else if (music_string[i] == 'o|') {\n      curr_note = 2\n    } else if (music_string[i] == 'o|') {\n      curr_note = 1\n    } else if (music_string[i] == '.') {\n      music_list.push(curr_note)\n      curr_note = 0\n    } else {\n      curr_note += music_string[i]\n    }\n  }\n  return music_list\n}\n\n// TODO: finish\nconst playMusic = (music_list) => {\n  let index = 0\n  let current_note = 0\n  let current_note_duration = 0\n  let note_index = 0\n  while (index < music_list.length) {\n    if (music_list[index] === 0) {\n      current_note = 0\n      current_note_duration = 0\n    } else if (music_list[index] === 1) {\n      current_note = 2\n      current_note_duration = 1\n    } else if (music_list[index] === 2) {\n      current_note = 1\n      current_note_duration = 2\n    } else if (music_list[index] === 3) {\n      current_note = 3\n      current_note_duration = 3\n    } else if (music_list[index] === 4) {\n      current_note = 0\n      current_note_duration = 4\n    } else if (music_list[index] === 5) {\n      current_note = 0\n      current_note_duration = 5\n    } else if (music_list[index] === 6) {\n      current_note = 0\n      current_note_duration = 6\n    } else if (music_list[index] === 7) {\n      current_note = 0\n      current_note_duration = 7\n    }\n    index++\n  }\n}\n\n// TODO: finish\nconst playMusic2 = (music_list) => {\n  let index = 0\n  let current_note = 0\n  let current_note_duration = 0\n  let note_index = 0\n  while (index < music_list.length) {\n    if (music_list[index] === 0) {\n      current_note = 0\n      current_note_duration = 0\n    } else if (music_list[index] === 1) {\n      current_note = 2\n      current_note_duration = 1\n    } else if (music_list[index] === 2) {\n      current_note = 1\n      current_note_duration = 2\n    } else if (music_list[index] === 3) {\n      current_note = 3\n      current_note_duration = 3\n    } else if (music_list[index] === 4) {\n      current_note = 0\n      current_note_duration = 4\n    } else if (music_list[index] === 5) {\n      current_note = 0\n      current_note_duration = 5\n    } else if (music_list[index] === 6) {\n      current_note = 0\n      current_note_duration = 6\n    } else if (music_list[index] === 7) {\n      current_note = 0\n      current_note_duration = 7\n    }\n    index++\n  }\n}\n\n/*\n  Parses the music and returns a list of all the notes played in the music.\n  Expected input:\n  o o| o o| o o| o o| o o\n  o| o o o o o o| o o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o o o o o| o\n  o| o o o"}
{"task_id": "JavaScript/18", "prompt": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    return (string.length - substring.length + 1);\n};\n\n/**\n  * @desc Determines the index of the first occurence of the substring in the orIgiNal string.\n  * @param {string} string - String in which to find the subrstring.\n  * @param {string} substr - Substring to find in the string.\n  * @return {number} - index of the first occurence of the substr in the string.\n  * @example\n  * const index = findFirstOccurence('aabbcc', 'bb');\n  * console.log(index); // 2\n  */\nconst findFirstOccurence = (string, substr) => {\n    let index = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.charAt(i) === substr.charAt(0)) {\n            index = i;\n            for (let j = 0; j < substr.length; j++) {\n                if (string.charAt(index + j)!== substr.charAt(j + 1)) {\n                    index = -1;\n                    break;\n                }\n            }\n            if (index!== -1) {\n                return index;\n            }\n        }\n    }\n    return -1;\n};\n\n/**\n  * @desc Determines the index of the last occurence of the substring in the orIgiNal string.\n  * @param {string} string - String in which to find the subrstring.\n  * @param {string} substr - Substring to find in the string.\n  * @return {number} - index of the last occurence of the substr in the string.\n  * @example\n  * const index = findLastOccurence('aabbcc', 'bb');\n  * console.log(index); // -1\n  */\nconst findLastOccurence = (string, substr) => {\n    let index = 0;\n    for (let i = string.length - 1; i >= 0; i--) {\n        if (string.charAt(i) === substr.charAt(0)) {\n            index = i;\n            for (let j = 0; j < substr.length; j++) {\n                if (string.charAt(index + j)!== substr.charAt(j + 1)) {\n                    index = -1;\n                    break;\n                }\n            }\n            if (index!== -1) {\n                return index;\n            }\n        }\n    }\n    return -1;\n};\n\n/**\n  * @desc Checks if the orIgiNal string is a palindrome.\n  * @param {string} string - String in which to find the subrstring.\n  * @return {boolean} - Whether the string is a palindrome.\n  * @example\n  * const isPalindrome = isPalindrome('abbcc');\n  * console.log(isPalindrome); // true\n  * const isPalindrome = isPalindrome('aabcc');\n  * console.log(isPalindrome); // false\n  */\nconst isPalindrome = string => {\n    const length = string.length;\n    let i = 0;\n    let j = length - 1;\n    while (i < j) {\n        if (string.charAt(i)!== string.charAt(j)) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\nmodule.exports = {\n    howManyTimes,\n    findFirstOccurence,\n    findLastOccurence,\n    isPalindrome,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five', 'six', 'seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    return numbers\n       .trim()\n       .toUpperCase()\n       .split(\" \")\n       .map( (n) => n.replace(/[^\\d]/g, ''))\n       .sort((a,b)=>{\n            return a.localeCompare(b);\n        });\n};\n\n/*\n  Let's test it out...\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  // Get the length of the input list\n  const len = numbers.length\n  // Get the length of the sublist (oF 2)\n  const sublistLen = Math.floor(len / 2)\n  // Get the start and end indices of the sublist\n  const start = 0\n  const end = sublistLen - 1\n  // Initialize an array to hold the sublist\n  const sublist = []\n  // Copy the sublist\n  for (let i = start; i <= end; i++) {\n    sublist.push(numbers[i])\n  }\n  // Get the closest pair of numbers\n  const closestPair = getClosestPair(sublist)\n  // Get the smallest number of the pair\n  const smallestNumber = closestPair[0]\n  // Get the largest number of the pair\n  const largestNumber = closestPair[1]\n  // Get the largest number in the list\n  const largestNumberInList = numbers[len - 1]\n  // Return the largest number that is not the largest number in the list\n  return largestNumberInList > largestNumber? largestNumberInList : largestNumber\n}\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const rescaled = [];\n  for (let i = 0; i < numbers.length; i++) {\n    rescaled.push(numbers[i] / (numbers[i] + numbers[i + 1]));\n  }\n  return rescaled;\n};\n\n/**\n  * GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithStep = (numbers, step) => {\n  const rescaled = [];\n  for (let i = 0; i < numbers.length; i++) {\n    rescaled.push(numbers[i] / (numbers[i] + numbers[i + 1]));\n  }\n  return rescaled;\n};\n\n/**\n  * GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithStepAndLargerThan = (numbers, step, largerThan) => {\n  const rescaled = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > largerThan) {\n      rescaled.push(numbers[i] / (numbers[i] + numbers[i + 1]));\n    }\n  }\n  return rescaled;\n};\n\n/**\n  * GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithStepAndLargerThan = (numbers, step, largerThan) => {\n  const rescaled = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > largerThan) {\n      rescaled.push(numbers[i] / (numbers[i] + numbers[i + 1]));\n    }\n  }\n  return rescaled;\n};\n\n/**\n  * GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitWithStepAndLargerThanAndStep = (numbers, step, largerThan, step2) => {\n  const rescaled = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > largerThan) {\n      rescaled.push(numbers[i] / (numbers[i] + numbers[i + 1]));\n    } else if (i < numbers.length - 1) {\n      if (numbers[i + 1] > largerThan) {\n        rescaled.push(numbers[i] / (numbers[i] + numbers[i + 1]));\n      } else {\n        rescaled.push(numbers[i] / (numbers[i] + step));\n      }\n    } else {\n      rescaled.push(numbers[i] / (numbers[i] + step2));\n    }\n  }\n  return rescaled;\n};\n\nmodule.exports = {\n  rescaleToUnit,\n  rescaleToUnitWithStep,\n  rescaleToUnitWithStepAndLargerThan,\n  rescaleToUnitWithStepAndLargerThanAndStep,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const list = values.filter((value) => {\n    if (!(value instanceof Number)) {\n      return false;\n    }\n\n    return value % 1 === 0;\n  });\n\n  return list;\n};\n\nmodule.exports = filterIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    if (typeof string!=='string') {\n        throw new TypeError('argument should be a string');\n    }\n\n    if (string.length === 0) {\n        return 0;\n    }\n\n    let length = 0;\n    for (let i = 0; i < string.length; i++) {\n        length += string.charCodeAt(i) > 127? 2 : 1;\n    }\n\n    return length;\n};\n\nmodule.exports = strlen;\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n === 0) return 1;\n  const arr = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n  let result = 1;\n  for (let i = 0; i < arr.length; i++) {\n    result = largestCommonDivisor(result, arr[i]);\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let fact = [];\n  let divisors = [];\n  let sqrt = Math.sqrt(n);\n  while (sqrt > 1) {\n    let x = Math.floor(sqrt);\n    let n = n - x*x;\n    sqrt = Math.sqrt(n);\n    fact.push(x);\n    divisors.push(n);\n  }\n  let result = [fact, divisors];\n  return result;\n}\n\nconst p = [];\n\nconst prime = (n) => {\n  let result = factorize(n);\n  p = result[0];\n  let i = 0;\n  while (i < p.length) {\n    let num = p[i];\n    if (num > 1) {\n      for (let j = 2; j <= num; j++) {\n        if (n % j === 0) {\n          console.log(n);\n          break;\n        }\n      }\n    }\n    i++;\n  }\n}\n\nprime(1000);\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/\\B(\\S)\\b/g, function (str) {\n    return str.toUpperCase();\n  });\n};\n\nexport default flipCase;\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let str = ''\n  for (let i = 0; i < strings.length; i++) {\n    str += strings[i]\n  }\n  return str\n}\n\n/*\n  ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let str = ''\n  for (let i = 0; i < strings.length; i++) {\n    str += strings[i]\n  }\n  return str\n}\n\n/*\n  ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([['a', 'b', 'c']])\n  'a,b,c'\n  */\nconst concatenate = (strings) => {\n  let str = ''\n  for (let i = 0; i < strings.length; i++) {\n    str += strings[i].join(', ')\n  }\n  return str\n}\n\n/*\n  ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([['a', 'b'], ['c', 'd']])\n  'a,b,c,d'\n  */\nconst concatenate = (strings) => {\n  let str = ''\n  for (let i = 0; i < strings.length; i++) {\n    str += strings[i].join(', ')\n  }\n  return str\n}\n\n/*\n  ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([['a', 'b'], ['c', 'd'], ['e', 'f']])\n  'a,b,c,d,e,f'\n  */\nconst concatenate = (strings) => {\n  let str = ''\n  for (let i = 0; i < strings.length; i++) {\n    str += strings[i].join(', ')\n  }\n  return str\n}\n\n/*\n  ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([['a', 'b'], ['c', 'd'], ['e', 'f'], ['g', 'h']])\n  'a,b,c,d,e,f,g,h'\n  */\nconst concatenate = (strings) => {\n  let str = ''\n  for (let i = 0; i < strings.length; i++) {\n    str += strings[i].join(', ')\n  }\n  return str\n}\n\n/*\n  ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([['a', 'b'], ['c', 'd'], ['e', 'f'], ['g', 'h'], ['i', 'j']])\n  'a,b,c,d,e,f,g,h,i,j'\n  */\nconst concatenate = (strings) => {\n  let str = ''\n  for (let i = 0; i < strings.length; i++) {\n    str += strings[i].join(', ')\n  }\n  return str\n}\n\n/*\n  ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([['a', 'b'], ['c', 'd'], ['e', 'f'], ['g', 'h'], ['i', 'j'], ['k', 'l']])\n  'a,b,c,d,e,f,g,h,i,j,k,l'\n  */\nconst concatenate = (strings) => {\n  let str = ''\n  for (let i = 0; i < strings.length; i++) {\n    str += strings[i].join(', ')\n  }\n  return str\n}\n\n/*\n  ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([['a', 'b'], ['c', 'd'], ['e', 'f'], ['g', 'h'], ['i', 'j'], ['k', 'l'], ['m', 'n']])\n  'a,b,c,d,e,f,g,h,i,j,k,l,m,n'\n  */\nconst concatenate = (strings) => {\n  let str = ''\n  for (let i = 0; i < strings.length; i++) {\n    str += strings[i].join(', ')\n  }\n  return str\n}\n\n/*\n  ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([['a', 'b'], ['c', 'd'], ['e', 'f'], ['g', 'h'], ['i', 'j'], ['k', 'l'], ['m', 'n'], ['o', 'p']])\n  'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p'\n  */\nconst concatenate = (strings) => {\n  let str = ''\n  for (let i = 0; i < strings.length; i++) {\n    str += strings[i].join(', ')\n  }\n  return str\n}\n\n/*\n  ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([['a', 'b'], ['c', 'd'], ['e', 'f'], ['g', 'h'], ['i', 'j'], ['k', 'l'], ['m', 'n'], ['o', 'p'], ['q', 'r']])\n  'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r'\n  */\nconst concatenate = (strings) => {\n  let str = ''\n  for (let i = 0; i < strings"}
{"task_id": "JavaScript/29", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.indexOf(prefix) === 0);\n};\n\n// Filter aN inpuT list of strings Only fOr oneS that stArt With a GivEN suffix.\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(x => x.indexOf(suffix) === (x.length - suffix.length));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix2 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix));\n};\n\n// filterByPrefix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterByPrefix2 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix3 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterByPrefix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix4 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix5 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix6 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterByPrefix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix7 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix8 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix9 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix10 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix11 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix12 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix13 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix14 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix15 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix16 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix17 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix18 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix19 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n\n// filterBySuffix(\"abc\".substr(1), \"c\") -> ['bc']\nconst filterBySuffix20 = (strings, suffix) => {\n  return strings.filter(x => x.endsWith(suffix) || x.startsWith(suffix));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive2 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive3 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive4 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive5 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive6 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive7 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive8 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive9 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive10 = (l) => {\n  let ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      ret."}
{"task_id": "JavaScript/31", "prompt": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n < 4) return true\n  if (n % 2 === 0) return false\n  if (n < 9) return true\n  if (n % 3 === 0) return false\n  if (n < 21) return true\n  if (n % 7 === 0) return false\n  if (n % 11 === 0) return false\n  if (n % 13 === 0) return false\n  if (n % 17 === 0) return false\n  if (n % 19 === 0) return false\n  if (n % 23 === 0) return false\n  if (n % 29 === 0) return false\n  if (n % 31 === 0) return false\n  if (n % 37 === 0) return false\n  if (n % 41 === 0) return false\n  if (n % 43 === 0) return false\n  if (n % 47 === 0) return false\n  if (n % 53 === 0) return false\n  if (n % 59 === 0) return false\n  if (n % 61 === 0) return false\n  if (n % 67 === 0) return false\n  if (n % 71 === 0) return false\n  if (n % 73 === 0) return false\n  if (n % 79 === 0) return false\n  if (n % 83 === 0) return false\n  if (n % 89 === 0) return false\n  if (n % 97 === 0) return false\n  if (n % 101 === 0) return false\n  if (n % 103 === 0) return false\n  if (n % 107 === 0) return false\n  if (n % 109 === 0) return false\n  if (n % 113 === 0) return false\n  if (n % 127 === 0) return false\n  if (n % 131 === 0) return false\n  if (n % 137 === 0) return false\n  if (n % 139 === 0) return false\n  if (n % 149 === 0) return false\n  if (n % 151 === 0) return false\n  if (n % 157 === 0) return false\n  if (n % 163 === 0) return false\n  if (n % 167 === 0) return false\n  if (n % 173 === 0) return false\n  if (n % 179 === 0) return false\n  if (n % 181 === 0) return false\n  if (n % 191 === 0) return false\n  if (n % 193 === 0) return false\n  if (n % 197 === 0) return false\n  if (n % 199 === 0) return false\n  if (n % 211 === 0) return false\n  if (n % 223 === 0) return false\n  if (n % 227 === 0) return false\n  if (n % 229 === 0) return false\n  if (n % 233 === 0) return false\n  if (n % 239 === 0) return false\n  if (n % 241 === 0) return false\n  if (n % 251 === 0) return false\n  if (n % 257 === 0) return false\n  if (n % 263 === 0) return false\n  if (n % 269 === 0) return false\n  if (n % 271 === 0) return false\n  if (n % 277 === 0) return false\n  if (n % 281 === 0) return false\n  if (n % 283 === 0) return false\n  if (n % 293 === 0) return false\n  if (n % 307 === 0) return false\n  if (n % 311 === 0) return false\n  if (n % 313 === 0) return false\n  if (n % 317 === 0) return false\n  if (n % 319 === 0) return false\n  if (n % 331 === 0) return false\n  if (n % 337 === 0) return false\n  if (n % 347 === 0) return false\n  if (n % 349 === 0) return false\n  if (n % 353 === 0) return false\n  if (n % 359 === 0) return false\n  if (n % 367 === 0) return false\n  if (n % 373 === 0) return false\n  if (n % 379 === 0) return false\n  if (n % 383 === 0) return false\n  if (n % 389 === 0) return false\n  if (n % 397 === 0) return false\n  if (n % 401 === 0) return false\n  if (n % 409 === 0) return false\n  if (n % 419 === 0) return false\n  if (n % 421 === 0) return false\n  if (n % 431 === 0) return false\n  if (n % 433 === 0) return false\n  if (n % 439 === 0) return false\n  if (n % 443 === 0) return false\n  if (n % 447 === 0) return false\n  if (n % 457 === 0) return false\n  if (n % 461 === 0) return false\n  if (n % 463 === 0) return false\n  if (n % 467 === 0) return false\n  if (n % 479 === 0) return false\n  if (n % 487 === 0) return false\n  if (n % 491 === 0) return false\n  if (n % 499 === 0) return false\n  if (n % 503 === 0) return false\n  if (n % 509 === 0) return false\n  if (n % 521 === 0) return false\n  if (n % 523 === 0) return false\n  if (n % 541 === 0) return false\n  if (n % 547 === 0) return false\n  if (n % 557 === 0) return false\n  if (n % 563 === 0) return false\n  if (n % 569 === 0) return false\n  if (n % 571 === 0) return false\n  if (n % 577 === 0) return false\n  if (n % 587 === 0) return false\n  if (n % 599 === 0) return false\n  if (n % 601 === 0) return false\n  if (n % 607 === 0) return false\n  if (n % 611 === 0) return false\n  if (n % 617 === 0) return false\n  if (n % 6"}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  return xs.reduce((prev, item, index) => {\n    if (prev === 0) {\n      return item;\n    } else {\n      return (item - prev) / index;\n    }\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a poNyNOMial.\n  returns a list of xs sQuerying thAt poly(x) = 0.\n  >>> poly([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> round(poly([1, 2, 3, 4]), 2)\n  [1.0, 2.0, 3.0, 4.0]\n  >>> poly([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> round(poly([1, 2, 3, 4, 5]), 2)\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  >>> poly([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> round(poly([1, 2, 3, 4, 5, 6]), 2)\n  [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]\n  >>> poly([-6, 11, -6, 1, 1])\n  [-6, 11, -6, 1, 1]\n  >>> round(poly([-6, 11, -6, 1, 1]), 2)\n  [-0.5, 0.5, -0.5, 0.5, 0.5]\n  >>> poly([-6, 11, -6, 1, 1, 2])\n  [-6, 11, -6, 1, 1, 2]\n  >>> round(poly([-6, 11, -6, 1, 1, 2]), 2)\n  [-0.5, 0.5, -0.5, 0.5, 0.5, 2.0]\n  >>> poly([-6, 11, -6, 1, 1, 2, 3])\n  [-6, 11, -6, 1, 1, 2, 3]\n  >>> round(poly([-6, 11, -6, 1, 1, 2, 3]), 2)\n  [-0.5, 0.5, -0.5, 0.5, 0.5, 2.0, 3.0]\n  >>> poly([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> round(poly([1, 2, 3, 4, 5, 6, 7]), 2)\n  [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]\n  >>> poly([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> round(poly([1, 2, 3, 4, 5, 6, 7, 8]), 2)\n  [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]\n  >>> poly([-6, 11, -6, 1, 1, 2, 3, 4, 5])\n  [-6, 11, -6, 1, 1, 2, 3, 4, 5]\n  >>> round(poly([-6, 11, -6, 1, 1, 2, 3, 4, 5]), 2)\n  [-0.5, 0.5, -0.5, 0.5, 0.5, 2.0, 3.0, 4.0, 5.0]\n  >>> poly([-6, 11, -6, 1, 1, 2, 3, 4, 5, 6])\n  [-6, 11, -6, 1, 1, 2, 3, 4, 5, 6]\n  >>> round(poly([-6, 11, -6, 1, 1, 2, 3, 4, 5, 6]), 2)\n  [-0.5, 0.5, -0.5, 0.5, 0.5, 2.0, 3.0, 4.0, 5.0, 6.0]\n  >>> poly([-6, 11, -6, 1, 1, 2, 3, 4, 5, 6, 7])\n  [-6, 11, -6, 1, 1, 2, 3, 4, 5, 6, 7]\n  >>> round(poly([-6, 11, -6, 1, 1, 2, 3, 4, 5, 6, 7]), 2)\n  [-0.5, 0.5, -0.5, 0.5, 0.5, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0]\n  >>> poly([-6, 11, -6, 1, 1, 2, 3, 4, 5, 6, 7, 8])\n  [-6,"}
{"task_id": "JavaScript/33", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l.slice(i, i + 3).every((v) => v % 3 === 0)) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFourth = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l.slice(i, i + 4).every((v) => v % 4 === 0)) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> sortFourth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifth = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l.slice(i, i + 5).every((v) => v % 5 === 0)) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\n/*\n  >>> sortFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSixth = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l.slice(i, i + 6).every((v) => v % 6 === 0)) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\nconst sortSeven = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l.slice(i, i + 7).every((v) => v % 7 === 0)) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\nconst sortEight = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l.slice(i, i + 8).every((v) => v % 8 === 0)) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\nconst sortNine = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l.slice(i, i + 9).every((v) => v % 9 === 0)) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\nconst sortTen = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l.slice(i, i + 10).every((v) => v % 10 === 0)) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\nconst sortEleven = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l.slice(i, i + 11).every((v) => v % 11 === 0)) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\nconst sortTwelve = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l.slice(i, i + 12).every((v) => v % 12 === 0)) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\nconst sortThirteen = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l.slice(i, i + 13).every((v) => v % 13 === 0)) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\nconst sortFourteen = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l.slice(i, i + 14).every((v) => v % 14 === 0)) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\nconst sortFifteen = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l.slice(i, i + 15).every((v) => v % 15 === 0)) {\n      arr.push(l[i]);\n    }\n  }\n  return arr;\n};\n\nconst sortSixteen = (l) => {\n  const arr = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l.slice(i, i + 16).every((v) => v % 16 === 0)) {\n      arr.push(l[i]);"}
{"task_id": "JavaScript/34", "prompt": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return (l.filter(v => l.indexOf(v) === l.lastIndexOf(v))).sort();\n};\n\nexport { unique, uniqueBy };\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max.apply(Math, l);\n}\n\n/**\n  # minElement(l)\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([1, 2, 3, 2, 1, 2, 2])\n  1\n  */\nconst minElement = (l) => {\n  return Math.min.apply(Math, l);\n}\n\n/**\n  # sum(l)\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -15\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 2, 1, 2, 2])\n  4\n  */\nconst sum = (l) => {\n  return l.reduce((acc, x) => acc + x, 0);\n}\n\n/**\n  # median(l)\n  >>> median([1, 2, 3, 4])\n  2\n  >>> median([1, 2, 3, 4, 5])\n  3\n  >>> median([1, 2, 3, 4, 5, 6, 7])\n  4\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8])\n  5\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  6\n  */\nconst median = (l) => {\n  const middle = Math.floor((l.length + 1) / 2);\n  return l[middle];\n}\n\n/**\n  # median_n(n, l)\n  >>> median_n(3, [1, 2, 3, 4])\n  2\n  >>> median_n(3, [1, 2, 3, 4, 5])\n  3\n  >>> median_n(3, [1, 2, 3, 4, 5, 6, 7])\n  4\n  >>> median_n(3, [1, 2, 3, 4, 5, 6, 7, 8])\n  5\n  >>> median_n(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  6\n  */\nconst median_n = (n, l) => {\n  const middle = Math.floor((l.length + 1) / 2);\n  const half_length = middle - (n / 2);\n  const sorted_l = l.slice();\n  sorted_l.sort();\n  return sorted_l[half_length];\n}\n\n/**\n  # mean(l)\n  >>> mean([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  7.5\n  >>> mean([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  8.5\n  >>> mean([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  9.5\n  */\nconst mean = (l) => {\n  const sum = sum(l);\n  return sum / l.length;\n}\n\n/**\n  # mean_n(n, l)\n  >>> mean_n(3, [1, 2, 3, 4])\n  2.0\n  >>> mean_n(3, [1, 2, 3, 4, 5])\n  3.0\n  >>> mean_n(3, [1, 2, 3, 4, 5, 6, 7])\n  4.0\n  >>> mean_n(3, [1, 2, 3, 4, 5, 6, 7, 8])\n  5.0\n  >>> mean_n(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  6.0\n  */\nconst mean_n = (n, l) => {\n  const sum = sum(l);\n  const half_length = Math.floor(l.length / 2);\n  const middle = half_length + (n / 2);\n  return (sum / middle);\n}\n\n/**\n  # stdev(l)\n  >>> stdev([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  2.1213203435596424\n  >>> stdev([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  2.4142135623730951\n  */\nconst stdev = (l) => {\n  const mean_n = mean_n(l.length, l);\n  const mean = mean(l);\n  const diff = sum(l) - (mean * l.length);\n  return Math.sqrt(diff / l.length);\n}\n\n/**\n  # stdev_n(n, l)\n  >>> stdev_n(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  2.0\n  >>> stdev_n(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  2.0\n  >>> stdev_n(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  2.0\n  */\nconst stdev_n = (n, l) => {\n  const mean_n = mean_n(n, l);\n  const mean = mean(l);\n  const diff = sum(l) - (mean * n);\n  return Math.sqrt(diff / n);\n}\n\n/**\n  # median_from_list(l)\n  >>> median_from_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,"}
{"task_id": "JavaScript/36", "prompt": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const fizz = (n) => n % 3 === 0\n  const buzz = (n) => n % 5 === 0\n  const result = fizz(n)\n  if (buzz(n)) result = result + 1\n  return result\n}\n\n//  const fizzBuzz = (n) => {\n//    const fizz = (n) => n % 3 === 0\n//    const buzz = (n) => n % 5 === 0\n//    const result = fizz(n)\n//    if (buzz(n)) result = result + 1\n//    return result\n//  }\n\nconst fizzBuzz = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (fizzBuzz(i) % 3 === 0) {\n      result.push(1)\n    } else if (fizzBuzz(i) % 5 === 0) {\n      result.push(2)\n    } else {\n      result.push(0)\n    }\n  }\n  return result\n}\n\nconst fizzBuzz = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (fizzBuzz(i) === 1) {\n      result.push(1)\n    } else if (fizzBuzz(i) === 2) {\n      result.push(2)\n    } else {\n      result.push(0)\n    }\n  }\n  return result\n}\n\nconst fizzBuzz = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (fizzBuzz(i) % 3 === 0) {\n      result.push(1)\n    } else if (fizzBuzz(i) % 5 === 0) {\n      result.push(2)\n    } else {\n      result.push(0)\n    }\n  }\n  return result\n}\n\nconst fizzBuzz = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (fizzBuzz(i) === 1) {\n      result.push(1)\n    } else if (fizzBuzz(i) === 2) {\n      result.push(2)\n    } else {\n      result.push(0)\n    }\n  }\n  return result\n}\n\nconst fizzBuzz = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (fizzBuzz(i) === 1) {\n      result.push(1)\n    } else if (fizzBuzz(i) === 2) {\n      result.push(2)\n    } else {\n      result.push(0)\n    }\n  }\n  return result\n}\n\nconst fizzBuzz = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (fizzBuzz(i) === 1) {\n      result.push(1)\n    } else if (fizzBuzz(i) === 2) {\n      result.push(2)\n    } else {\n      result.push(0)\n    }\n  }\n  return result\n}\n\nconst fizzBuzz = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (fizzBuzz(i) === 1) {\n      result.push(1)\n    } else if (fizzBuzz(i) === 2) {\n      result.push(2)\n    } else {\n      result.push(0)\n    }\n  }\n  return result\n}\n\nconst fizzBuzz = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (fizzBuzz(i) === 1) {\n      result.push(1)\n    } else if (fizzBuzz(i) === 2) {\n      result.push(2)\n    } else {\n      result.push(0)\n    }\n  }\n  return result\n}\n\nconst fizzBuzz = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (fizzBuzz(i) === 1) {\n      result.push(1)\n    } else if (fizzBuzz(i) === 2) {\n      result.push(2)\n    } else {\n      result.push(0)\n    }\n  }\n  return result\n}\n\nconst fizzBuzz = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (fizzBuzz(i) === 1) {\n      result.push(1)\n    } else if (fizzBuzz(i) === 2) {\n      result.push(2)\n    } else {\n      result.push(0)\n    }\n  }\n  return result\n}\n\nconst fizzBuzz = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (fizzBuzz(i) === 1) {\n      result.push(1)\n    } else if (fizzBuzz(i) === 2) {\n      result.push(2)\n    } else {\n      result.push(0)\n    }\n  }\n  return result\n}\n\nconst fizzBuzz = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (fizzBuzz(i) === 1) {\n      result.push(1)\n    } else if (fizzBuzz(i) === 2) {\n      result.push(2)\n    } else {\n      result.push(0)\n    }\n  }\n  return result\n}\n\nconst fizzBuzz = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if"}
{"task_id": "JavaScript/37", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let r = []\n  for (let i = 0; i < l.length; i += 2) {\n    r.push(l[i])\n  }\n  return r\n}\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  vAR groups = s.split(''), groups2 = [];\n  for (const group oF groups) {\n    IF (groups[0] == '')\n      groups2.push(groups.slice(1));\n    ELSE\n      groups2.push(groups);\n  }\n  return groups2.join('');\n}\n\nexport { encodeCyclic, decodeCyclic };\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    if (n === 1) return 2\n    if (n === 2) return 3\n    if (n === 3) return 5\n    if (n === 4) return 13\n    return (n + primeFib(n - 1) + primeFib(n - 2) + primeFib(n - 3) + primeFib(n - 4))\n}\n\nmodule.exports = primeFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const arr = l.slice()\n    let sum = 0\n    for (let i = 0; i < arr.length; i += 1) {\n        sum += arr[i]\n    }\n    return sum === 0\n}\n\n/*\n  findThreeDistinctElements takEs a list oF inteGerS as an Input.\n  It returNs true if TheRE are atleast threE Distinct elements in THE list\n  that sums to zero, And false otheRwise.\n\n  >>> findThreeDistinctElements([1, 3, 5, 0])\n  false\n  >>> findThreeDistinctElements([1, 3, -2, 1])\n  true\n  >>> findThreeDistinctElements([1, 2, 3, 7])\n  false\n  >>> findThreeDistinctElements([2, 4, -5, 3, 9, 7])\n  true\n  >>> findThreeDistinctElements([1])\n  false\n  */\nconst findThreeDistinctElements = (l) => {\n    const arr = l.slice()\n    let sum = 0\n    for (let i = 0; i < arr.length; i += 1) {\n        sum += arr[i]\n    }\n    return sum === 0\n}\n\n/*\n  findTheSmallestElement takEs a list oF inteGerS as an Input.\n  It returNs true if TheRE are atleast threE Distinct elements in THE list\n  that sums to zero, And false otheRwise.\n\n  >>> findTheSmallestElement([1, 3, 5, 0])\n  false\n  >>> findTheSmallestElement([1, 3, -2, 1])\n  true\n  >>> findTheSmallestElement([1, 2, 3, 7])\n  false\n  >>> findTheSmallestElement([2, 4, -5, 3, 9, 7])\n  true\n  >>> findTheSmallestElement([1])\n  false\n  */\nconst findTheSmallestElement = (l) => {\n    const arr = l.slice()\n    let min = arr[0]\n    for (let i = 0; i < arr.length; i += 1) {\n        if (arr[i] < min) {\n            min = arr[i]\n        }\n    }\n    return arr[0] === min\n}\n\n/*\n  findTheLargestElement takEs a list oF inteGerS as an Input.\n  It returNs true if TheRE are atleast threE Distinct elements in THE list\n  that sums to zero, And false otheRwise.\n\n  >>> findTheLargestElement([1, 3, 5, 0])\n  false\n  >>> findTheLargestElement([1, 3, -2, 1])\n  true\n  >>> findTheLargestElement([1, 2, 3, 7])\n  false\n  >>> findTheLargestElement([2, 4, -5, 3, 9, 7])\n  true\n  >>> findTheLargestElement([1])\n  false\n  */\nconst findTheLargestElement = (l) => {\n    const arr = l.slice()\n    let max = arr[0]\n    for (let i = 0; i < arr.length; i += 1) {\n        if (arr[i] > max) {\n            max = arr[i]\n        }\n    }\n    return arr[0] === max\n}\n\n/*\n  findTheAverageElement takEs a list oF inteGerS as an Input.\n  It returNs true if TheRE are atleast threE Distinct elements in THE list\n  that sums to zero, And false otheRwise.\n\n  >>> findTheAverageElement([1, 3, 5, 0])\n  false\n  >>> findTheAverageElement([1, 3, -2, 1])\n  true\n  >>> findTheAverageElement([1, 2, 3, 7])\n  false\n  >>> findTheAverageElement([2, 4, -5, 3, 9, 7])\n  true\n  >>> findTheAverageElement([1])\n  false\n  */\nconst findTheAverageElement = (l) => {\n    const arr = l.slice()\n    let sum = 0\n    for (let i = 0; i < arr.length; i += 1) {\n        sum += arr[i]\n    }\n    return sum / arr.length\n}\n\n/*\n  findTheSumOfTwoElements takEs a list oF inteGerS as an Input.\n  It returNs true if TheRE are atleast threE Distinct elements in THE list\n  that sums to zero, And false otheRwise.\n\n  >>> findTheSumOfTwoElements([1, 3, 5, 0])\n  false\n  >>> findTheSumOfTwoElements([1, 3, -2, 1])\n  true\n  >>> findTheSumOfTwoElements([1, 2, 3, 7])\n  false\n  >>> findTheSumOfTwoElements([2, 4, -5, 3, 9, 7])\n  true\n  >>> findTheSumOfTwoElements([1])\n  false\n  */\nconst findTheSumOfTwoElements = (l) => {\n    const arr = l.slice()\n    let sum = 0\n    for (let i = 0; i < arr.length; i += 1) {\n        sum += arr[i]\n    }\n    return sum === 0\n}\n\nmodule.exports = {\n    triplesSumToZero,\n    findThreeDistinctElements,\n    findTheSmallestElement,\n    findTheLargestElement,\n    findTheAverageElement,\n    findTheSumOfTwoElements\n}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n  return (car, lane) => {\n    if (car.is_moving_into_lane(lane)) {\n      if (car.is_moving_into_lane(lane.left)) {\n        if (lane.left.left) {\n          if (car.car_pos < lane.left.left.car_pos) {\n            car.lane_collision = lane.left.left;\n            return car.lane_collision;\n          }\n        }\n      }\n      if (car.is_moving_into_lane(lane.left)) {\n        if (lane.left.left) {\n          if (car.car_pos < lane.left.left.car_pos) {\n            car.lane_collision = lane.left.left;\n            return car.lane_collision;\n          }\n        }\n      }\n      if (car.is_moving_into_lane(lane.right)) {\n        if (lane.right.right) {\n          if (car.car_pos < lane.right.right.car_pos) {\n            car.lane_collision = lane.right.right;\n            return car.lane_collision;\n          }\n        }\n      }\n      if (car.is_moving_into_lane(lane.right)) {\n        if (lane.right.right) {\n          if (car.car_pos < lane.right.right.car_pos) {\n            car.lane_collision = lane.right.right;\n            return car.lane_collision;\n          }\n        }\n      }\n    }\n    if (car.is_moving_into_lane(lane.right)) {\n      if (car.is_moving_into_lane(lane.right.left)) {\n        if (lane.right.left.left) {\n          if (car.car_pos < lane.right.left.left.car_pos) {\n            car.lane_collision = lane.right.left.left;\n            return car.lane_collision;\n          }\n        }\n      }\n      if (car.is_moving_into_lane(lane.right.left)) {\n        if (lane.right.left.left) {\n          if (car.car_pos < lane.right.left.left.car_pos) {\n            car.lane_collision = lane.right.left.left;\n            return car.lane_collision;\n          }\n        }\n      }\n      if (car.is_moving_into_lane(lane.right.right)) {\n        if (lane.right.right.right) {\n          if (car.car_pos < lane.right.right.right.car_pos) {\n            car.lane_collision = lane.right.right.right;\n            return car.lane_collision;\n          }\n        }\n      }\n      if (car.is_moving_into_lane(lane.right.right)) {\n        if (lane.right.right.right) {\n          if (car.car_pos < lane.right.right.right.car_pos) {\n            car.lane_collision = lane.right.right.right;\n            return car.lane_collision;\n          }\n        }\n      }\n    }\n    if (car.is_moving_into_lane(lane.left)) {\n      if (car.is_moving_into_lane(lane.left.left)) {\n        if (lane.left.left.left) {\n          if (car.car_pos < lane.left.left.left.car_pos) {\n            car.lane_collision = lane.left.left.left;\n            return car.lane_collision;\n          }\n        }\n      }\n      if (car.is_moving_into_lane(lane.left.left)) {\n        if (lane.left.left.left) {\n          if (car.car_pos < lane.left.left.left.car_pos) {\n            car.lane_collision = lane.left.left.left;\n            return car.lane_collision;\n          }\n        }\n      }\n      if (car.is_moving_into_lane(lane.left.right)) {\n        if (lane.left.right.right) {\n          if (car.car_pos < lane.left.right.right.car_pos) {\n            car.lane_collision = lane.left.right.right;\n            return car.lane_collision;\n          }\n        }\n      }\n      if (car.is_moving_into_lane(lane.left.right)) {\n        if (lane.left.right.right) {\n          if (car.car_pos < lane.left.right.right.car_pos) {\n            car.lane_collision = lane.left.right.right;\n            return car.lane_collision;\n          }\n        }\n      }\n    }\n  };\n};\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const incr = (n, acc) => {\n    return n + 1 > acc? [n + 1, n + 1] : [n + 1, n + 1];\n  };\n  return l.reduce(incr, [1, 1]);\n};\n\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    let pairSumToZero = [];\n    for (let i = 0; i < l.length; i += 2) {\n        let sum = l[i] + l[i + 1];\n        if (sum === 0) {\n            pairSumToZero.push(sum);\n        }\n    }\n    return pairSumToZero.length > 0;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const x_ = x.toString().split('').map((x, i) => i % base? x + base : x);\n  const x_s = x_.join('');\n  return x_s.split('').map(Number);\n};\n\n// calculate all possible combinations of k numbers out of a set of n\nconst getCombinations = (n, k) => {\n  const n_ = n.toString().split('').map((x, i) => i < k? x + 1 : x);\n  const n_s = n_.join('');\n  return n_s.split('').map((x, i) => i < k? i + 1 : i);\n};\n\n// calculate all possible permutations of a string\nconst getPermutations = (str) => {\n  const str_ = str.toString().split('').map((x, i) => i < str.length? x + 1 : x);\n  const str_s = str_.join('');\n  return str_s.split('').map((x, i) => i < str.length? i + 1 : i);\n};\n\nconst getPermutations = (str) => {\n  const str_ = str.toString().split('').map((x, i) => i < str.length? x + 1 : x);\n  const str_s = str_.join('');\n  return str_s.split('').map((x, i) => i < str.length? i + 1 : i);\n};\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst reverse = (x) => {\n  const len = x.toString().length;\n  const reversed = x.toString().split('').reverse().join('');\n  return reversed.length === len;\n};\n\nconst reverse = (x) => {\n  const len = x.toString().length;\n  const reversed = x.toString().split('').reverse().join('');\n  return reversed.length === len;\n};\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst getFactorial = (x) => {\n  const factorial = 1;\n  for (let i = 1; i <= x; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\nconst getFactorial = (x) => {\n  const factorial = 1;\n  for (let i = 1; i <= x; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\nconst getFactorial = (x) => {\n  const factorial = 1;\n  for (let i = 1; i <= x; i++) {\n    factorial *= i;\n  }\n  return factorial;\n};\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\nconst isPalindrome = (x) => x.toString().split('').reverse().join('') === x.toString();\n\n"}
{"task_id": "JavaScript/45", "prompt": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let b = h/2;\n  return (a * b) / 2;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if(n <= 1) {\n    return n\n  }\n  const a = fib4(n - 1)\n  const b = fib4(n - 2)\n  return a + b\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = Array.from(l).sort();\n  if (l.length === 0) {\n    return 0;\n  }\n  if (l.length % 2 === 0) {\n    return (sorted[(l.length / 2) - 1] + sorted[(l.length / 2)]) / 2;\n  }\n  return sorted[(l.length / 2)];\n};\n\n// ## is_empty\n// Check if the list is empty.\nconst is_empty = (l) => l.length === 0;\n\n// ## is_empty\n// Check if the list is not empty.\nconst is_not_empty = (l) =>!is_empty(l);\n\n// ## is_even\n// Check if the number is even.\nconst is_even = (n) => n % 2 === 0;\n\n// ## is_even\n// Check if the number is odd.\nconst is_odd = (n) => n % 2 === 1;\n\n// ## sum\n// Sum of the elements of a list.\nconst sum = (l) => l.reduce((a, b) => a + b, 0);\n\n// ## product\n// Product of the elements of a list.\nconst product = (l) => l.reduce((a, b) => a * b, 1);\n\n// ## max\n// Find the maximum element of a list.\nconst max = (l) => l.reduce((a, b) => Math.max(a, b), 0);\n\n// ## min\n// Find the minimum element of a list.\nconst min = (l) => l.reduce((a, b) => Math.min(a, b), 0);\n\n// ## sum_of_squares\n// Sum of squares of the elements of a list.\nconst sum_of_squares = (l) => l.reduce((a, b) => a + Math.pow(b, 2), 0);\n\n// ## sum_of_cubrads\n// Sum of cubes of the elements of a list.\nconst sum_of_cubrads = (l) => l.reduce((a, b) => a + Math.pow(b, 3), 0);\n\n// ## mean\n// Find the mean of a list.\nconst mean = (l) => sum(l) / l.length;\n\n// ## mean_of_squares\n// Find the mean of squares of the elements of a list.\nconst mean_of_squares = (l) => sum_of_squares(l) / l.length;\n\n// ## mean_of_cubrads\n// Find the mean of cubes of the elements of a list.\nconst mean_of_cubrads = (l) => sum_of_cubrads(l) / l.length;\n\n// ## mean_of_cubrads\n// Find the standard deviation of a list.\nconst standard_deviation = (l) => Math.sqrt(sum_of_squares(l) / (l.length - 1));\n\n// ## variance\n// Find the variance of a list.\nconst variance = (l) => standard_deviation(l) * standard_deviation(l);\n\n// ## variance\n// Find the standard deviation of a list.\nconst standard_deviation = (l) => Math.sqrt(variance(l));\n\n// ## median\n// Find the median of a list.\nconst median = (l) => median(l);\n\n// ## median\n// Find the median of a list.\nconst median_of_cubrads = (l) => median(l);\n\n// ## median_of_squares\n// Find the median of squares of the elements of a list.\nconst median_of_squares = (l) => median(l);\n\n// ## mean_of_cubrads\n// Find the mean of cubes of the elements of a list.\nconst mean_of_cubrads = (l) => mean(l);\n\n// ## median_of_cubrads\n// Find the median of cubes of the elements of a list.\nconst median_of_cubrads = (l) => median(l);\n\n// ## median_of_squares\n// Find the median of squares of the elements of a list.\nconst median_of_squares = (l) => median(l);\n\n// ## variance\n// Find the variance of a list.\nconst variance = (l) => standard_deviation(l) * standard_deviation(l);\n\n// ## variance\n// Find the variance of a list.\nconst variance = (l) => standard_deviation(l) * standard_deviation(l);\n\n// ## variance\n// Find the variance of a list.\nconst variance = (l) => standard_deviation(l) * standard_deviation(l);\n\n// ## variance\n// Find the variance of a list.\nconst variance = (l) => standard_deviation(l) * standard_deviation(l);\n\n// ## variance\n// Find the variance of a list.\nconst variance = (l) => standard_deviation(l) * standard_deviation(l);\n\n// ## variance\n// Find the variance of a list.\nconst variance = (l) => standard_deviation(l) * standard_deviation(l);\n\n// ## variance\n// Find the variance of a list.\nconst variance = (l) => standard_deviation(l) * standard_deviation(l);\n\n// ## variance\n// Find the variance of a list.\nconst variance = (l) => standard_deviation(l) * standard_deviation(l);\n\n// ## variance\n// Find the variance of a list.\nconst variance = (l) => standard_deviation(l) * standard_deviation(l);\n\n// ## variance\n// Find the variance of a list.\nconst variance = (l) => standard_deviation(l) * standard_deviation(l);\n\n// ## variance\n// Find the variance of a list.\nconst variance = (l) => standard_deviation(l) * standard_deviation(l);\n\n// ## variance\n// Find the variance of a list.\nconst variance = (l) => standard_deviation(l) * standard_deviation(l);\n\n// ## variance\n// Find the variance of a list.\n"}
{"task_id": "JavaScript/48", "prompt": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (text === '' || text === undefined) return true;\n\n    return text.split('').reverse().join('') === text;\n};\n\n/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('aba')\n  false\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abbb')\n  true\n  >>> isPalindrome('abcc')\n  false\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  */\nconst isPalindrome2 = (text) => {\n    if (text === '' || text === undefined) return true;\n\n    let tmp = text.split('');\n    let len = tmp.length;\n    let middle = len / 2;\n    let reverse = text.split('').reverse().join('');\n\n    if (reverse === text) {\n        return true;\n    }\n\n    if (text.length === 1) {\n        return true;\n    }\n\n    for (let i = 0; i < middle; i++) {\n        if (tmp[i]!== tmp[len - 1 - i]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nexport default {\n    isPalindrome,\n    isPalindrome2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return n % p\n}\n\n//Reverse Integer\n//reverse(n)\n//Converts a number n to the reverse of the number n.\n//>>> reverse(100)\n//99\n//>>> reverse(11)\n//10\n//>>> reverse(10)\n//10\n//>>> reverse(1)\n//1\n//>>> reverse(0)\n//0\n//>>> reverse(-1)\n//-1\n//>>> reverse(-10)\n//-10\n//>>> reverse(-100)\n//-99\n//>>> reverse(-101)\n//-101\n//>>> reverse(-1101)\n//-1101\n//>>> reverse(10.01)\n//9.99\n//>>> reverse(10.5)\n//9.5\n//>>> reverse(1.5)\n//1.5\n//>>> reverse(0.5)\n//0.5\n//>>> reverse(-1.5)\n//-1.5\n//>>> reverse(-0.5)\n//-0.5\n//>>> reverse(1)\n//1\n//>>> reverse(2)\n//2\n//>>> reverse(3)\n//3\n//>>> reverse(4)\n//4\n//>>> reverse(5)\n//5\n//>>> reverse(6)\n//6\n//>>> reverse(7)\n//7\n//>>> reverse(8)\n//8\n//>>> reverse(9)\n//9\n//>>> reverse(10)\n//10\n//>>> reverse(11)\n//11\n//>>> reverse(12)\n//12\n//>>> reverse(13)\n//13\n//>>> reverse(14)\n//14\n//>>> reverse(15)\n//15\n//>>> reverse(16)\n//16\n//>>> reverse(17)\n//17\n//>>> reverse(18)\n//18\n//>>> reverse(19)\n//19\n//>>> reverse(20)\n//20\n//>>> reverse(21)\n//21\n//>>> reverse(22)\n//22\n//>>> reverse(23)\n//23\n//>>> reverse(24)\n//24\n//>>> reverse(25)\n//25\n//>>> reverse(26)\n//26\n//>>> reverse(27)\n//27\n//>>> reverse(28)\n//28\n//>>> reverse(29)\n//29\n//>>> reverse(30)\n//30\n//>>> reverse(31)\n//31\n//>>> reverse(32)\n//32\n//>>> reverse(33)\n//33\n//>>> reverse(34)\n//34\n//>>> reverse(35)\n//35\n//>>> reverse(36)\n//36\n//>>> reverse(37)\n//37\n//>>> reverse(38)\n//38\n//>>> reverse(39)\n//39\n//>>> reverse(40)\n//40\n//>>> reverse(41)\n//41\n//>>> reverse(42)\n//42\n//>>> reverse(43)\n//43\n//>>> reverse(44)\n//44\n//>>> reverse(45)\n//45\n//>>> reverse(46)\n//46\n//>>> reverse(47)\n//47\n//>>> reverse(48)\n//48\n//>>> reverse(49)\n//49\n//>>> reverse(50)\n//50\n//>>> reverse(51)\n//51\n//>>> reverse(52)\n//52\n//>>> reverse(53)\n//53\n//>>> reverse(54)\n//54\n//>>> reverse(55)\n//55\n//>>> reverse(56)\n//56\n//>>> reverse(57)\n//57\n//>>> reverse(58)\n//58\n//>>> reverse(59)\n//59\n//>>> reverse(60)\n//60\n//>>> reverse(61)\n//61\n//>>> reverse(62)\n//62\n//>>> reverse(63)\n//63\n//>>> reverse(64)\n//64\n//>>> reverse(65)\n//65\n//>>> reverse(66)\n//66\n//>>> reverse(67)\n//67\n//>>> reverse(68)\n//68\n//>>> reverse(69)\n//69\n//>>> reverse(70)\n//70\n//>>> reverse(71)\n//71\n//>>> reverse(72)\n//72\n//>>> reverse(73)\n//73\n//>>> reverse(74)\n//74\n//>>> reverse(75)\n//75\n//>>> reverse(76)\n//76\n//>>> reverse(77)\n//77\n//>>> reverse(78)\n//78\n//>>> reverse(79)\n//79\n//>>> reverse(80)\n//80\n//>>> reverse(81)\n//81\n//>>> reverse(82)\n//82\n//>>> reverse(83)\n//83\n//>>> reverse(84)\n//84\n//>>> reverse(85)\n//85\n//>>> reverse(86)\n//86\n//>>> reverse(87)\n//87\n//>>> reverse(88)\n//88\n//>>> reverse(89)\n//89\n//>>> reverse(90)\n//90\n//>>> reverse(91)\n//91\n//>>> reverse(92)\n//92\n//>>> reverse(93)\n//93\n//>>> reverse(94)\n//94\n//>>> reverse(95)\n//95\n//>>> reverse(96)\n//96\n//>>> reverse(97)\n//97\n//>>> reverse(98)\n//98\n//>>> reverse(99)\n//99\n//>>> reverse(100)\n//100\n//>>> reverse(101)\n//101\n//>>> reverse(102)\n//102\n//>>> reverse(103)\n//103\n//>>> reverse(104)\n//104\n//>>> reverse(105)\n//105\n//>>> reverse(106)\n//106\n//>>> reverse(107)\n//107\n//>>> reverse(108)\n//108\n//>>> reverse(109)\n//109\n//>>> reverse(110)\n//110\n//>>> reverse(111)\n//111\n//>>> reverse(112)\n//112\n//>>> reverse(113)\n//113\n//>>> reverse(114)\n//114\n//>>> reverse(115)\n//115\n//>>> reverse(116)\n//116\n//>>> reverse(117)\n//117\n//>>> reverse(118)\n//118\n//>>> reverse(119)\n//119\n//>>> reverse(120)\n//120\n//"}
{"task_id": "JavaScript/50", "prompt": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n  const c = s.split(\"\");\n  const c2 = [];\n  c.forEach(c1 => {\n    c2.push(`${String.fromCharCode(((c1.charCodeAt(0) - 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0))}${c1.substr(1)}`);\n  });\n  return c2.join(\"\");\n}\n\nmodule.exports = {\n  encode: encodeShift,\n  decode: decodeShift\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, '')\n}\n\n/**\n  capitalize is a Funciton that tAnks Takes a StrinG and retUrnS striNg\n  and returns the StriNg wIThOuT in CAPITALIZED form.\n  >>> capitalize(\"I like cake\")\n  'I Like Cake'\n  >>> capitalize(\"i like cake\")\n  'I Like Cake'\n  >>> capitalize(\"\")\n  ''\n  >>> capitalize(\"aaBAA\")\n  'AABAA'\n  >>> capitalize(\"abcd\")\n  'ABCD'\n  */\nconst capitalize = (text) => {\n  return text.toUpperCase()\n}\n\n/**\n  getLastNChars is a function that takes in a String and a int and\n  returns the last N chars of the string.\n  >>> getLastNChars('aaBAA', 2)\n  'aaB'\n  >>> getLastNChars('aaBAA', 1)\n  'aa'\n  >>> getLastNChars('aaBAA', 0)\n  ''\n  >>> getLastNChars('aaBAA', 4)\n  'aaBAA'\n  */\nconst getLastNChars = (text, n) => {\n  return text.substring(text.length - n)\n}\n\nmodule.exports = {\n  removeVowels,\n  capitalize,\n  getLastNChars\n}\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  if (l.length === 0) return false\n  if (l.length === 1) return l[0] < t\n  if (l.length === 2) return l[0] < t && l[1] < t\n  if (l.length === 3) return l[0] < t && l[1] < t && l[2] < t\n  return l[0] < t && l[1] < t && l[2] < t && l[3] < t\n}\n\nmodule.exports = {\n  sum,\n  max,\n  min,\n  minIndex,\n  maxIndex,\n  average,\n  mean,\n  median,\n  mode,\n  stdDev,\n  variance,\n  varianceP,\n  varianceN,\n  modeBy,\n  modeByIndex,\n  varianceBy,\n  varianceByIndex,\n  stdDevBy,\n  stdDevByIndex,\n  meanBy,\n  meanByIndex,\n  sumBy,\n  sumByIndex,\n  minBy,\n  minByIndex,\n  averageBy,\n  averageByIndex,\n  meanBy,\n  meanByIndex,\n  belowThreshold\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  >>> add(1, 1)\n  2\n  >>> add(3, 4)\n  9\n  */\nconst sub = (x, y) => {\n  return x - y;\n};\n\n/*\n  >>> sub(1, 1)\n  0\n  >>> sub(3, 4)\n  -1\n  */\nconst mul = (x, y) => {\n  return x * y;\n};\n\n/*\n  >>> mul(1, 1)\n  1\n  >>> mul(3, 4)\n  12\n  */\nconst div = (x, y) => {\n  return x / y;\n};\n\n/*\n  >>> div(6, 2)\n  3\n  >>> div(4, 2)\n  2\n  >>> div(9, 3)\n  3\n  */\nconst mod = (x, y) => {\n  return x % y;\n};\n\n/*\n  >>> mod(5, 3)\n  2\n  >>> mod(9, 3)\n  0\n  >>> mod(9, 2)\n  1\n  */\n\nconst negate = x => {\n  return -x;\n};\n\n/*\n  >>> negate(2)\n  -2\n  >>> negate(4)\n  -4\n  >>> negate(-2)\n  2\n  >>> negate(-4)\n  4\n  */\n\nconst lessThan = (x, y) => {\n  return x < y;\n};\n\n/*\n  >>> lessThan(1, 2)\n  true\n  >>> lessThan(2, 1)\n  false\n  >>> lessThan(2, 2)\n  false\n  >>> lessThan(1, 1)\n  false\n  >>> lessThan(3, 2)\n  true\n  */\n\nconst lessThanOrEqualTo = (x, y) => {\n  return x <= y;\n};\n\n/*\n  >>> lessThanOrEqualTo(1, 2)\n  true\n  >>> lessThanOrEqualTo(2, 1)\n  true\n  >>> lessThanOrEqualTo(2, 2)\n  true\n  >>> lessThanOrEqualTo(1, 1)\n  true\n  >>> lessThanOrEqualTo(3, 2)\n  true\n  */\n\nconst greaterThan = (x, y) => {\n  return x > y;\n};\n\n/*\n  >>> greaterThan(1, 2)\n  false\n  >>> greaterThan(2, 1)\n  true\n  >>> greaterThan(2, 2)\n  false\n  >>> greaterThan(1, 1)\n  false\n  >>> greaterThan(3, 2)\n  false\n  */\n\nconst greaterThanOrEqualTo = (x, y) => {\n  return x >= y;\n};\n\n/*\n  >>> greaterThanOrEqualTo(1, 2)\n  false\n  >>> greaterThanOrEqualTo(2, 1)\n  true\n  >>> greaterThanOrEqualTo(2, 2)\n  true\n  >>> greaterThanOrEqualTo(1, 1)\n  true\n  >>> greaterThanOrEqualTo(3, 2)\n  false\n  */\n\nconst equalTo = (x, y) => {\n  return x == y;\n};\n\n/*\n  >>> equalTo(1, 1)\n  true\n  >>> equalTo(2, 2)\n  true\n  >>> equalTo(1, 2)\n  false\n  >>> equalTo(3, 2)\n  false\n  */\n\nconst notEqualTo = (x, y) => {\n  return x!= y;\n};\n\n/*\n  >>> notEqualTo(1, 1)\n  false\n  >>> notEqualTo(2, 2)\n  false\n  >>> notEqualTo(1, 2)\n  true\n  >>> notEqualTo(3, 2)\n  true\n  */\n\nconst toString = x => {\n  return `${x}`;\n};\n\nconst toInt = x => {\n  return parseInt(x);\n};\n\nconst toFloat = x => {\n  return parseFloat(x);\n};\n\nconst toBool = x => {\n  return typeof x === 'boolean';\n};\n\nconst toArray = x => {\n  return Array.isArray(x)? x : [x];\n};\n\nconst toObject = x => {\n  return Object.prototype.toString.call(x) === '[object Object]'? x : {};\n};\n\nconst toFunction = x => {\n  return typeof x === 'function';\n};\n\nconst toStringOrArray = x => {\n  return Array.isArray(x)? x.join(', ') : x;\n};\n\nconst toArrayOrObject = x => {\n  return Array.isArray(x)? x : x.toObject();\n};\n\nconst toObjectOrArray = x => {\n  return Array.isArray(x)? x.map(toObject) : x.toObject();\n};\n\nexport { add, sub, mul, div, mod, negate, lessThan, lessThanOrEqualTo, greaterThan, greaterThanOrEqualTo, equalTo, notEqualTo, toString, toInt, toFloat, toBool, toArray, toObject, toFunction, toStringOrArray, toArrayOrObject, toObjectOrArray, toObjectOrArray };\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const length = s0.length > s1.length? s0.length : s1.length\n    let sameChars = true\n    for (let i = 0; i < length; i++) {\n        if (s0[i]!= s1[i]) {\n            sameChars = false\n        }\n    }\n    return sameChars\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    if (n <= 2) {\n        return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n}\n\nconsole.log(fib(5))\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let brackets_count = 0;\n    let brackets_max_size = brackets.length;\n    let brackets_stack = [];\n\n    for (let i = 0; i < brackets.length; i++) {\n        let char = brackets[i];\n        if (char === \">\") {\n            if (brackets_stack.length === 0) {\n                return false;\n            }\n            let last_bracket = brackets_stack[brackets_stack.length - 1];\n            if (last_bracket === \"<\") {\n                brackets_stack.pop();\n                brackets_count--;\n            } else if (last_bracket === \">\") {\n                brackets_stack.pop();\n                brackets_count--;\n            }\n            continue;\n        }\n\n        if (char === \"<\") {\n            brackets_stack.push(char);\n            brackets_count++;\n            if (brackets_stack.length > brackets_max_size) {\n                return false;\n            }\n            continue;\n        }\n\n        if (brackets_stack.length === 0) {\n            return false;\n        }\n\n        let last_bracket = brackets_stack[brackets_stack.length - 1];\n        if (last_bracket === \">\") {\n            brackets_stack.pop();\n            brackets_count--;\n        } else if (last_bracket === \"<\") {\n            brackets_stack.pop();\n            brackets_count--;\n        }\n    }\n\n    return brackets_count === 0;\n}\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  return l.reduce((acc, v) => (acc && (v >= acc || v < 0))? v : acc, true)\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_rev = (l) => {\n  return l.reduce((acc, v) => (acc && (v >= acc || v < 0))? v : acc, true)\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_even = (l) => {\n  return l.reduce((acc, v) => (acc && (v % 2 === 0)? acc : v), true)\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_odd = (l) => {\n  return l.reduce((acc, v) => (acc && (v % 2 === 1)? acc : v), true)\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_all = (l) => {\n  return l.reduce((acc, v) => (acc && (v >= 0)? acc : v), true)\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_min = (l) => {\n  return l.reduce((acc, v) => (acc || (v < acc)? v : acc), true)\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic_max = (l) => {\n  return l.reduce((acc, v) => (acc || (v > acc)? v : acc), true)\n}\n\nconst test = [\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5] ],\n  [ [1, 2, 3, 4, 5], [1, 2,"}
{"task_id": "JavaScript/58", "prompt": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const intersects = {};\n  l1.forEach(a => {\n    l2.forEach(b => {\n      if (a === b) return;\n      if (intersects[a] === undefined) {\n        intersects[a] = [b];\n      } else {\n        intersects[a].push(b);\n      }\n    });\n  });\n  return Object.keys(intersects).reduce((acc, key) => {\n    acc[key] = intersects[key].length;\n    return acc;\n  }, {});\n};\n\n// TEST\n\nconst commonTest = () => {\n  const commonTest = common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]);\n  console.log(commonTest);\n  const commonTest = common([5, 3, 2, 8], [3, 2]);\n  console.log(commonTest);\n};\n\n// RUN\n\ncommonTest();\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n    let sqrt = Math.sqrt(n);\n    let i = 1;\n    while (i < sqrt) {\n        if (n % i === 0) {\n            return i;\n        }\n        i++;\n    }\n    return n;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  if(n <= 1) return n\n  if(n === 2) return 1\n  return (n + sumToN(n-1)) % n\n}\n\n/**\n  * @param {number} n\n  * @returns {number}\n  * @example\n  * //sumOfOdd is A funcTioN that Sums odd numbers From 1 To n.\n  >>> sumOfOdd(10)\n  5\n  >>> sumOfOdd(1)\n  1\n  >>> sumOfOdd(3)\n  1\n  */\nconst sumOfOdd = (n) => {\n  if(n === 1) return 1\n  let result = 0\n  for(let i = 1; i <= n; i++) {\n    if(i % 2 === 1) result += i\n  }\n  return result\n}\n\n/**\n  * @param {number} n\n  * @returns {number}\n  * @example\n  * //sumOfEven is A funcTioN that Sums even numbers From 1 To n.\n  >>> sumOfEven(10)\n  5\n  >>> sumOfEven(1)\n  1\n  >>> sumOfEven(3)\n  1\n  */\nconst sumOfEven = (n) => {\n  if(n === 1) return 1\n  let result = 0\n  for(let i = 1; i <= n; i++) {\n    if(i % 2 === 0) result += i\n  }\n  return result\n}\n\n/**\n  * @param {number} n\n  * @returns {number}\n  * @example\n  * //sumOfPrime is A funcTioN that Sums primes from 1 To n.\n  >>> sumOfPrime(10)\n  3\n  >>> sumOfPrime(1)\n  1\n  >>> sumOfPrime(3)\n  1\n  */\nconst sumOfPrime = (n) => {\n  if(n === 1) return 1\n  let result = 0\n  for(let i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) result += i\n  }\n  return result\n}\n\n/**\n  * @param {number} n\n  * @returns {number}\n  * @example\n  * //sumOfPrimes is A funcTioN that Sums primes from n To 1.\n  >>> sumOfPrimes(10)\n  3\n  >>> sumOfPrimes(1)\n  1\n  >>> sumOfPrimes(3)\n  1\n  */\nconst sumOfPrimes = (n) => {\n  let result = 0\n  for(let i = 1; i <= n; i++) {\n    if(isPrime(i)) result += i\n  }\n  return result\n}\n\n/**\n  * @param {number} n\n  * @returns {boolean}\n  * @example\n  * //isPrime is A funcTioN that Checks if number is a prime.\n  >>> isPrime(1)\n  false\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  true\n  >>> isPrime(5)\n  true\n  >>> isPrime(7)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(12)\n  false\n  */\nconst isPrime = (n) => {\n  if(n <= 1) return false\n  if(n === 2) return true\n  let isPrime = false\n  for(let i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) return false\n  }\n  return true\n}\n\nconst primes = []\nconst sumOfPrimes = (n) => {\n  const primes = []\n  for(let i = 2; i <= n; i++) {\n    if(isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return sum(primes)\n}\n\nconst sum = (arr) => {\n  let result = 0\n  for(let i = 0; i < arr.length; i++) {\n    result += arr[i]\n  }\n  return result\n}\n\nconst sumOfOdd = (n) => {\n  let result = 0\n  for(let i = 1; i <= n; i++) {\n    if(i % 2 === 1) result += i\n  }\n  return result\n}\n\nconst sumOfEven = (n) => {\n  let result = 0\n  for(let i = 1; i <= n; i++) {\n    if(i % 2 === 0) result += i\n  }\n  return result\n}\n\nconst sumOfPrime = (n) => {\n  let result = 0\n  for(let i = 2; i <= n; i++) {\n    if(n % i === 0) result += i\n  }\n  return result\n}\n\nconst sumOfPrimes = (n) => {\n  let result = 0\n  for(let i = 1; i <= n; i++) {\n    if(isPrime(i)) {\n      result += i\n    }\n  }\n  return result\n}\n\nconst sumOfPrimes = (n) => {\n  let result = 0\n  for(let i = 2; i <= n; i++) {\n    if(isPrime(i)) {\n      result += i\n    }\n  }\n  return result\n}\n\nmodule.exports = {\n  sumToN,\n  sumOfOdd,\n  sumOfEven,\n  sumOfPrime,\n  sumOfPrimes,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let counter = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      counter++;\n    }\n    if (brackets[i] === ')') {\n      counter--;\n    }\n    if (counter < 0) {\n      return false;\n    }\n  }\n  return counter === 0;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1;\n  let f = xs[n];\n  let f1 = xs[n - 1];\n  let f2 = xs[n - 2];\n  let d = [0, 0, 0];\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f - f1 * f2 / (i + 1);\n    f2 = f1;\n    f1 = f;\n  }\n  return d;\n};\n\n/**\n  REturns the derivative of a polynomial in the form of a list of\n  the form [x, x^2, x^3,... ]\n  >>> derivative([1, 2, 3])\n  [1, 4, 9]\n  >>> derivative([1, 2, 3, 4, 5])\n  [1, 4, 12, 20]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1;\n  let f = xs[n];\n  let f1 = xs[n - 1];\n  let f2 = xs[n - 2];\n  let d = [0, 0, 0];\n  for (let i = n - 1; i >= 0; i--) {\n    d[i] = f - f1 * f2 / (i + 1);\n    f2 = f1;\n    f1 = f;\n  }\n  return d;\n};\n\n// Tests\ndescribe(\"Polynomial\", () => {\n  it(\"should evaluate a polynomial\", () => {\n    expect(evaluate([3, 1, 2, 4, 5])).toEqual(10);\n  });\n  it(\"should calculate the derivative of a polynomial\", () => {\n    expect(derivative([3, 1, 2, 4, 5])).toEqual([1, 4, 12, 20]);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let a = 0, b = 1;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fib = (n) => {\n  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\nconst fibb = (n) => {\n  if (n < 2) return n;\n  return fibb(n - 1) + fibb(n - 2);\n};\n\nconst fibc = (n) => {\n  if (n < 2) return n;\n  return fibc(n - 1) + fibc(n - 2);\n};\n\nconst fibd = (n) => {\n  if (n < 2) return n;\n  return fibd(n - 1) + fibd(n - 2);\n};\n\nconst fibe = (n) => {\n  if (n < 2) return n;\n  return fibe(n - 1) + fibe(n - 2);\n};\n\nconst fibf = (n) => {\n  if (n < 2) return n;\n  return fibf(n - 1) + fibf(n - 2);\n};\n\nconst fibg = (n) => {\n  if (n < 2) return n;\n  return fibg(n - 1) + fibg(n - 2);\n};\n\nconst fibh = (n) => {\n  if (n < 2) return n;\n  return fibh(n - 1) + fibh(n - 2);\n};\n\nconst fibi = (n) => {\n  if (n < 2) return n;\n  return fibi(n - 1) + fibi(n - 2);\n};\n\nconst fibj = (n) => {\n  if (n < 2) return n;\n  return fibj(n - 1) + fibj(n - 2);\n};\n\nconst fibk = (n) => {\n  if (n < 2) return n;\n  return fibk(n - 1) + fibk(n - 2);\n};\n\nconst fibl = (n) => {\n  if (n < 2) return n;\n  return fibl(n - 1) + fibl(n - 2);\n};\n\nconst fibm = (n) => {\n  if (n < 2) return n;\n  return fibm(n - 1) + fibm(n - 2);\n};\n\nconst fibn = (n) => {\n  if (n < 2) return n;\n  return fibn(n - 1) + fibn(n - 2);\n};\n\nconst fibo = (n) => {\n  if (n < 2) return n;\n  return fibo(n - 1) + fibo(n - 2);\n};\n\nconst fip = (n) => {\n  if (n < 2) return n;\n  return fip(n - 1) + fip(n - 2);\n};\n\nconst fiq = (n) => {\n  if (n < 2) return n;\n  return fiq(n - 1) + fiq(n - 2);\n};\n\nconst fit = (n) => {\n  if (n < 2) return n;\n  return fit(n - 1) + fit(n - 2);\n};\n\nconst fiu = (n) => {\n  if (n < 2) return n;\n  return fiu(n - 1) + fiu(n - 2);\n};\n\nconst fiv = (n) => {\n  if (n < 2) return n;\n  return fiv(n - 1) + fiv(n - 2);\n};\n\nconst fiw = (n) => {\n  if (n < 2) return n;\n  return fiw(n - 1) + fiw(n - 2);\n};\n\nconst fix = (n) => {\n  if (n < 2) return n;\n  return fix(n - 1) + fix(n - 2);\n};\n\nconst fibr = (n) => {\n  if (n < 2) return n;\n  return fibr(n - 1) + fibr(n - 2);\n};\n\nconst fibs = (n) => {\n  if (n < 2) return n;\n  return fibs(n - 1) + fibs(n - 2);\n};\n\nconst fibt = (n) => {\n  if (n < 2) return n;\n  return fibt(n - 1) + fibt(n - 2);\n};\n\nconst fibu = (n) => {\n  if (n < 2) return n;\n  return fibu(n - 1) + fibu(n - 2);\n};\n\nconst fibv = (n) => {\n  if (n < 2) return n;\n  return fibv(n - 1) + fibv(n - 2);\n};\n\nconst fibw = (n) => {\n  if (n < 2) return n;\n  return fibw(n - 1) + fibw(n - 2);\n};\n\nconst fibx = (n) => {\n  if (n < 2) return n;\n  return fibx(n - 1) + fibx(n - 2);\n};\n\nconst fiy = (n) => {\n  if (n < 2) return n;\n  return fiy(n - 1) + fiy(n - 2);\n};\n\nconst fiz = (n) => {"}
{"task_id": "JavaScript/64", "prompt": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) count += 1\n  }\n  return count\n}\n\n// v0.2\n// const vowelsCount = (s) => {\n//   return s.match(/[aeiouy]+/)\n// }\n\nconsole.log(vowelsCount(\"ACEDY\"))\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let res = x.toString();\n  while(shift--) res = res.substr(1);\n  return res;\n}\n\n/*\n  A rReGuR mAtch of strIngStrinGs.\n  If any of the strings has a \",\" character in it,\n  then we add a \",\" character to the end of the string.\n  If there are no \",\" characters in the strings,\n  then we return an empty string.\n  >>> allStringsWithComma([\"a\",\"b\"])\n  \"a,b\"\n  >>> allStringsWithComma([\"a\"])\n  \"a\"\n  >>> allStringsWithComma([])\n  \"\"\n  */\nconst allStringsWithComma = (arr) => {\n  let commaAdded = [];\n  arr.forEach((s) => {\n    if(s.indexOf(\",\")!== -1) commaAdded.push(s);\n  });\n  if(commaAdded.length === 0) return \"\";\n  return commaAdded.join(\"\");\n}\n\n/*\n  A tWO-DIGIT number.\n  If the number is between 1 and 10,\n  then return \"one\" if the number is 1,\n  or \"two\" if the number is 2.\n  If the number is 11, then return \"one-and-a-half\".\n  Otherwise, return the number.\n  >>> isTwoDigitNumber(11)\n  \"one-and-a-half\"\n  >>> isTwoDigitNumber(12)\n  \"two\"\n  >>> isTwoDigitNumber(999)\n  \"999\"\n  */\nconst isTwoDigitNumber = (num) => {\n  if(num <= 10 && num >= 1) return \"one\";\n  if(num === 11) return \"one-and-a-half\";\n  return num.toString();\n}\n\n/*\n  A fIxed-DIGIT number.\n  If the number is between 1 and 10,\n  then return \"one\" if the number is 1,\n  or \"two\" if the number is 2.\n  If the number is 11, then return \"one-and-a-half\".\n  Otherwise, return the number.\n  >>> isTwoDigitNumber(11)\n  \"one-and-a-half\"\n  >>> isTwoDigitNumber(12)\n  \"two\"\n  >>> isTwoDigitNumber(999)\n  \"999\"\n  */\nconst isFDigitNumber = (num) => {\n  if(num <= 9 && num >= 1) return \"one\";\n  if(num === 10) return \"ten\";\n  if(num === 11) return \"one-and-a-half\";\n  return num.toString();\n}\n\n/*\n  A one-DIGIT number.\n  If the number is between 1 and 10,\n  then return \"one\" if the number is 1,\n  or \"two\" if the number is 2.\n  Otherwise, return the number.\n  >>> isTwoDigitNumber(11)\n  \"two\"\n  >>> isTwoDigitNumber(12)\n  \"two\"\n  >>> isTwoDigitNumber(999)\n  \"999\"\n  */\nconst isOneDigitNumber = (num) => {\n  if(num <= 9 && num >= 1) return \"one\";\n  if(num === 10) return \"ten\";\n  return num.toString();\n}\n\n/*\n  A lONg-DIGIT number.\n  If the number is between 1 and 10,\n  then return \"one\" if the number is 1,\n  or \"two\" if the number is 2.\n  Otherwise, return the number.\n  >>> isTwoDigitNumber(11)\n  \"two\"\n  >>> isTwoDigitNumber(12)\n  \"two\"\n  >>> isTwoDigitNumber(999)\n  \"999\"\n  */\nconst isLongDigitNumber = (num) => {\n  if(num <= 9 && num >= 1) return \"one\";\n  if(num === 10) return \"ten\";\n  if(num === 11) return \"one-and-a-half\";\n  return num.toString();\n}\n\n/*\n  A fIxed-LONG number.\n  If the number is between 1 and 10,\n  then return \"one\" if the number is 1,\n  or \"two\" if the number is 2.\n  Otherwise, return the number.\n  >>> isTwoDigitNumber(11)\n  \"two\"\n  >>> isTwoDigitNumber(12)\n  \"two\"\n  >>> isTwoDigitNumber(999)\n  \"999\"\n  */\nconst isFLongDigitNumber = (num) => {\n  if(num <= 9 && num >= 1) return \"one\";\n  if(num === 10) return \"ten\";\n  if(num === 11) return \"one-and-a-half\";\n  return num.toString();\n}\n\n/*\n  Return a string representation of num.\n  If num is a two-digit number,\n  then return \"one-and-a-half\"\n  if num is a one-digit number,\n  then return \"one\" if num is 1,\n  or \"two\" if num is 2.\n  Otherwise, return num.\n  >>> toString(123)\n  \"123\"\n  >>> toString(123)\n  \"123\"\n  >>> toString(11)\n  \"11\"\n  >>> toString(11)\n  \"11\"\n  >>> toString(999)\n  \"999\"\n  >>> toString(999)\n  \"999\"\n  >>> toString(10)\n  \"ten\"\n  >>> toString(10)\n  \"ten\"\n  >>> toString(1)\n  \"one\"\n  >>> toString(1)\n  \"one\"\n  >>> toString(2)\n  \"two\"\n  >>> toString(2)\n  \"two\"\n  >>> toString(999)\n  \"999\"\n  >>> toString(999)\n  \"999\"\n  >>>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let res = 0,\n    a = new Array(s.length + 1),\n    i,\n    c;\n\n  for (i = 0; i <= s.length; i += 1) {\n    c = s.charCodeAt(i);\n    if (c >= 0 && c <= 57) {\n      a[i + 1] = parseInt(s.charAt(i)) + parseInt(s.charAt(i + 1));\n    } else if (c >= 97 && c <= 122) {\n      a[i + 1] = parseInt(s.charAt(i));\n    }\n  }\n\n  for (i = 1; i <= s.length; i += 1) {\n    res += a[i];\n  }\n\n  return res;\n};\n\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n  if (s.length === 0) return 0\n  if (n === 0) return 1\n  var numFruits = n\n  var numApples = 0\n  var numOranges = 0\n  var appleS = 0\n  var orangeS = 0\n  var start = 0\n  while (start < s.length) {\n    var currentChar = s[start]\n    if (currentChar === 'a') {\n      numApples++\n      appleS += 1\n    } else if (currentChar === 'o') {\n      numOranges++\n      orangeS += 1\n    }\n    start++\n  }\n  return fruitDistribution(numApples + fruitDistribution(numOranges, numFruits - numApples - 1), n)\n}\n\nvar result = fruitDistribution(\"5 apples aNd 6 orAnges\", 19)\nconsole.log(result)\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const [ smalles, index ] = pluck(arr, 0)\n  if (!smalles) return []\n  const [ smallesValue, index ] = pluck(arr, index)\n  return [ smallesValue, index ]\n}\n\nconst pluck = (arr, i) => {\n  if (!arr || i >= arr.length) return [0, 0]\n  const [ smalles, index ] = pluck(arr, i+1)\n  if (smalles) return [smalles, index]\n  return [arr[i], i]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index) => {\n  if (!arr || index >= arr.length) return [0, 0]\n  return [arr[index], index]\n}\n\nconst pluck = (arr, index)"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let list = lst;\n  let index = -1;\n  let count = 0;\n\n  while (index < list.length - 1) {\n    index++;\n    if (list[index] >= list[index + 1]) {\n      count++;\n    }\n  }\n\n  if (count > 0) {\n    return count;\n  }\n\n  return -1;\n}\n\nmodule.exports = search;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const lstLen = lst.length\n  if (lstLen === 0) {\n    return []\n  } else {\n    let min = 0\n    let max = lstLen - 1\n    let minValue = lst[0]\n    let maxValue = lst[lstLen - 1]\n    let minIndex = 0\n    let maxIndex = lstLen - 1\n\n    while (min < max) {\n      while (lst[min] <= minValue) {\n        min++\n      }\n      while (lst[max] >= maxValue) {\n        max--\n      }\n      if (lst[min] > lst[max]) {\n        const tmp = lst[min]\n        lst[min] = lst[max]\n        lst[max] = tmp\n        minIndex = min\n        maxIndex = max\n      }\n    }\n    return lst.slice(minIndex, maxIndex + 1)\n  }\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if ((s > 0) && (s < 9)) {\n    return Math.sqrt(s * (s - a) * (s - b) * (s - c))\n  } else {\n    return -1\n  }\n}\n\n/*\n  GivEn thE lengThs Of The Three Sides of a TriANGLE. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGLE wheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea2 = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if ((s > 0) && (s < 9)) {\n    return Math.sqrt((a * b) / 2 + (b * c) / 2 + (c * a) / 2)\n  } else {\n    return -1\n  }\n}\n\n/*\n  GivEn thE lengThs Of The Three Sides of a TRIANGLE. retURn thE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGLE wheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea3 = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if ((s > 0) && (s < 9)) {\n    return Math.sqrt(Math.pow((a * b) / 2 + (b * c) / 2 + (c * a) / 2, 2) / 6)\n  } else {\n    return -1\n  }\n}\n\nexport { triangleArea, triangleArea2, triangleArea3 }\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  // check if the weight is less than the maximum weight\n  if (q.length < w) {\n    // check if the list is not balanced\n    if (q.length === 1 || q.reduce((acc, x) => acc + x, 0)!== w) {\n      return false;\n    }\n    // check if all elements in the list are equal\n    return q.every(x => x === q[0]);\n  }\n  // else the weight is greater than the maximum weight\n  return true;\n}\n\n/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly2 = (q, w) => {\n  // check if the weight is less than the maximum weight\n  if (q.length < w) {\n    // check if the list is not balanced\n    if (q.length === 1 || q.reduce((acc, x) => acc + x, 0)!== w) {\n      return false;\n    }\n    // check if all elements in the list are equal\n    return q.every(x => x === q[0]);\n  }\n  // else the weight is greater than the maximum weight\n  return true;\n}\n\n/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly3 = (q, w) => {\n  // check if the weight is less than the maximum weight\n  if (q.length < w) {\n    // check if the list is not balanced\n    if (q.length === 1 || q.reduce((acc, x) => acc + x, 0)!== w) {\n      return false;\n    }\n    // check if all elements in the list are equal\n    return q.every(x => x === q[0]);\n  }\n  // else the weight is greater than the maximum weight\n  return true;\n}\n\n/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly4 = (q, w) => {\n  // check if the weight is less than the maximum weight\n  if (q.length < w) {\n    // check if the list is not balanced\n    if (q.length === 1 || q.reduce((acc, x) => acc + x, 0)!"}
{"task_id": "JavaScript/73", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let start = arr.length - 1;\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      start = i;\n    }\n  }\n  for (let i = start; i < arr.length - 1; i++) {\n    if (arr[i]!= arr[i + 1]) {\n      arr[i] = arr[i + 1];\n      arr[i + 1] = min;\n      min = arr[i];\n    }\n  }\n  return arr;\n};\n\nconsole.log(smallestChange([1,2,3,4,5,6,7,9,8,7,9,6,5,4,3,2,1]));<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if(!lst1 ||!lst2) return [];\n  let total = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] === lst2[i]) {\n      total++;\n    }\n  }\n  return lst1.filter(l => lst2.indexOf(l) >= 0);\n};\n\n/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ []\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n*/\nconst totalMatch2 = (lst1, lst2) => {\n  if(!lst1 ||!lst2) return [];\n  let total = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] === lst2[i]) {\n      total++;\n    }\n  }\n  return lst1.filter(l => lst2.indexOf(l) >= 0);\n};\n\nconst totalMatch3 = (lst1, lst2) => {\n  if(!lst1 ||!lst2) return [];\n  let total = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] === lst2[i]) {\n      total++;\n    }\n  }\n  return lst1.filter(l => lst2.indexOf(l) >= 0);\n};\n\n/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ []\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n*/\nconst totalMatch4 = (lst1, lst2) => {\n  if(!lst1 ||!lst2) return [];\n  let total = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] === lst2[i]) {\n      total++;\n    }\n  }\n  return lst1.filter(l => lst2.indexOf(l) >= 0);\n};\n\nmodule.exports = {\n  totalMatch,\n  totalMatch2,\n  totalMatch3,\n  totalMatch4\n};<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let prime = new Array(100)\n  prime[0] = 1\n  prime[1] = 2\n  for (let i = 2; i < prime.length; i++) {\n    if (prime[i] === 1) {\n      for (let j = 2; j < prime[i]; j++) {\n        if (a % j === 0) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\n// This is the main function that runs the program\nfunction main() {\n  const a = parseInt(process.argv[2])\n  const b = parseInt(process.argv[3])\n  const c = parseInt(process.argv[4])\n  if (isMultiplyPrime(a) && isMultiplyPrime(b) && isMultiplyPrime(c)) {\n    console.log('Yes')\n  } else {\n    console.log('No')\n  }\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === n) return true;\n  return n % x === 0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return a >= 0 && a <= 63\n}\n\nconst cube = (a) => {\n  if(iscube(a)) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst cube_sum = (a, b) => {\n  return cube(a) + cube(b)\n}\n\nconst ispandigital = (n) => {\n  return n >= 0 && n <= 9 && n % 2 === 0\n}\n\nconst panda = (n) => {\n  if(ispandigital(n)) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst panda_sum = (a, b) => {\n  return panda(a) + panda(b)\n}\n\nconst ispentagonal = (n) => {\n  return n >= 0 && n <= 81 && n % 6 === 0\n}\n\nconst pentagonal = (n) => {\n  if(ispentagonal(n)) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst pentagonal_sum = (a, b) => {\n  return pentagonal(a) + pentagonal(b)\n}\n\nconst ishexagonal = (n) => {\n  return n >= 0 && n <= 27 and n % 4 === 0\n}\n\nconst hexagonal = (n) => {\n  if(ishexagonal(n)) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst hexagonal_sum = (a, b) => {\n  return hexagonal(a) + hexagonal(b)\n}\n\nconst isheptagonal = (n) => {\n  return n >= 0 && n <= 63 && n % 8 === 0\n}\n\nconst heptagonal = (n) => {\n  if(isheptagonal(n)) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst heptagonal_sum = (a, b) => {\n  return heptagonal(a) + heptagonal(b)\n}\n\nconst istriangular = (n) => {\n  return n >= 0 && n <= 27 and n % 3 === 0\n}\n\nconst triangular = (n) => {\n  if(istriangular(n)) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst triangular_sum = (a, b) => {\n  return triangular(a) + triangular(b)\n}\n\nconst issquare = (n) => {\n  return n >= 0 && n <= 9\n}\n\nconst square = (n) => {\n  if(issquare(n)) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst square_sum = (a, b) => {\n  return square(a) + square(b)\n}\n\nconst ishappy = (n) => {\n  return n >= 0 && n <= 1000 && n % 3 === 0 && n % 5 === 0\n}\n\nconst happy = (n) => {\n  if(ishappy(n)) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst happy_sum = (a, b) => {\n  return happy(a) + happy(b)\n}\n\nconst ishappy2 = (n) => {\n  return n >= 0 && n <= 1000000\n}\n\nconst happy2 = (n) => {\n  if(ishappy2(n)) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst happy2_sum = (a, b) => {\n  return happy2(a) + happy2(b)\n}\n\nconst ishappy3 = (n) => {\n  return n >= 0 && n <= 1000000000\n}\n\nconst happy3 = (n) => {\n  if(ishappy3(n)) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst happy3_sum = (a, b) => {\n  return happy3(a) + happy3(b)\n}\n\nconst ishappy4 = (n) => {\n  return n >= 0 && n <= 1000000000000\n}\n\nconst happy4 = (n) => {\n  if(ishappy4(n)) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst happy4_sum = (a, b) => {\n  return happy4(a) + happy4(b)\n}\n\nconst happy5 = (n) => {\n  if(ishappy5(n)) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst happy5_sum = (a, b) => {\n  return happy5(a) + happy5(b)\n}\n\nconst ishappy6 = (n) => {\n  return n >= 0 && n <= 1000000000000000\n}\n\nconst happy6 = (n) => {\n  if(ishappy6(n)) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst happy6_sum = (a, b) => {\n  return happy6(a) + happy6(b)\n}\n\nconst ishappy7 = (n) => {\n  return n >= 0 && n <= 10000000000000000\n}\n\nconst happy7 = (n) => {\n  if(ishappy7(n)) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nconst happy7_sum = (a, b) => {\n  return happy7(a) + happy7(b)\n}\n\nconst ishappy8 = (n) => {\n  return n >= 0 && n <= 100000000000000000\n}\n\nconst happy8 = (n) => {\n  if(ishappy8(n)) {\n    "}
{"task_id": "JavaScript/78", "prompt": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  if (num.length <= 1) return num;\n  for (let i = 0; i < num.length; i++) {\n    result += parseInt(num[i]);\n  }\n  return result;\n};\nconst isPrime = (num) => {\n  if (num <= 1) return false;\n  if (num % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= num) {\n    if (num % i === 0) return false;\n    i += 2;\n  }\n  return true;\n};\nconst isPrime2 = (num) => {\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) return false;\n    i++;\n  }\n  return true;\n};\nconst hexToDecimal = (hex) => {\n  let result = 0;\n  for (let i = 0; i < hex.length; i++) {\n    result += parseInt(hex[i]);\n  }\n  return result;\n};\nconst getNumberOfDivisors = (num) => {\n  if (num === 1) return 1;\n  let count = 0;\n  for (let i = 1; i <= num / 2; i++) {\n    if (num % i === 0) count++;\n  }\n  return count + 1;\n};\nconst getPrimeFactors = (num) => {\n  let factors = [];\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      factors.push(i);\n      num = num / i;\n    }\n    if (num === 1) break;\n    i++;\n  }\n  return factors;\n};\nconst getPrimeFactors2 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      factors.push(i);\n      num = num / i;\n    }\n    if (num === 1) break;\n    i++;\n  }\n  return factors;\n};\nconst getPrimeFactors3 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      factors.push(i);\n      num = num / i;\n    }\n    if (num === 1) break;\n    i++;\n  }\n  return factors;\n};\nconst getPrimeFactors4 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      factors.push(i);\n      num = num / i;\n    }\n    if (num === 1) break;\n    i++;\n  }\n  return factors;\n};\nconst getPrimeFactors5 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      factors.push(i);\n      num = num / i;\n    }\n    if (num === 1) break;\n    i++;\n  }\n  return factors;\n};\nconst getPrimeFactors6 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      factors.push(i);\n      num = num / i;\n    }\n    if (num === 1) break;\n    i++;\n  }\n  return factors;\n};\nconst getPrimeFactors7 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      factors.push(i);\n      num = num / i;\n    }\n    if (num === 1) break;\n    i++;\n  }\n  return factors;\n};\nconst getPrimeFactors8 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      factors.push(i);\n      num = num / i;\n    }\n    if (num === 1) break;\n    i++;\n  }\n  return factors;\n};\nconst getPrimeFactors9 = (num) => {\n  let factors = [];\n  let i = 2;\n  while (i <= num) {\n    if (num % i === 0) {\n      factors.push(i);\n      num = num / i;\n    }\n    if (num === 1) break;\n    i++;\n  }\n  return factors;\n};\nconst getPrimeFactors10"}
{"task_id": "JavaScript/79", "prompt": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const num = parseInt(decimal, 10);\n  const bin = (num === 0)? '0' : '1';\n  return num.toString(2).split('').map((n) => {\n    return n + bin;\n  }).join('');\n};\n\n/*\n  ExAMPLE:\n  //This is the EXAMPLE of the Binary to Decimal conversion.\n  decimalToBinary(15)  # returns \"db1111db\"\n  decimalToBinary(32)  # returns \"db100000db\"\n  */\nconst decimalToDecimal = (binary) => {\n  const binaryToDecimal = binary.split('').map((n) => {\n    return n.charCodeAt(0) - 48;\n  });\n  return binaryToDecimal.join('');\n};\n\n/*\n  The binary to decimal and decimal to binary function is used to convert the number to binary\n  and the number to decimal, and vice-versa.\n  THere are two different functions:\n  decimalToBinary(decimal) and binaryToDecimal(binary)\n\n  THE FOLLOWING EXAMPLE IS FROM THE EXAMPLE FROM THE WEBSITE:\n  https://www.quora.com/How-can-I-convert-a-number-to-binary-and-back-again-in-javascript\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  binaryToDecimal(\"db1111db\")  # returns 15\n  binaryToDecimal(\"db100000db\")  # returns 32\n\n  */\nconst binaryToDecimal = (binary) => {\n  return parseInt(binary, 2);\n};\n\n/*\n  BINARY to DECIMAL conversion example:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  binaryToDecimal(\"db1111db\")  # returns 15\n  binaryToDecimal(\"db100000db\")  # returns 32\n  */\nconst decimalToBinary = (decimal) => {\n  return decimalToBinary(decimalToDecimal(decimal));\n};\n\n/*\n  The function to convert a binary number to decimal.\n  */\nconst binaryToDecimal = (binary) => {\n  return parseInt(binary, 2);\n};\n\n/*\n  The function to convert a decimal number to binary.\n  */\nconst decimalToBinary = (decimal) => {\n  return decimalToBinary(decimalToDecimal(decimal));\n};\n\nconst decimalToDecimal = (decimal) => {\n  return parseInt(decimal, 10);\n};\n\nconst binaryToBinary = (binary) => {\n  return binary.split('').map((n) => {\n    return n.charCodeAt(0) - 48;\n  }).join('');\n};\n\nconst binaryToDecimal = (binary) => {\n  return parseInt(binary, 2);\n};\n\nconst binaryToDecimal = (binary) => {\n  return binary.split('').map((n) => {\n    return n.charCodeAt(0) - 48;\n  }).join('');\n};\n\nconst decimalToBinary = (decimal) => {\n  return decimalToBinary(decimalToDecimal(decimal));\n};\n\nconst decimalToBinary = (decimal) => {\n  return decimalToBinary(decimalToDecimal(decimal));\n};\n\nconst binaryToDecimal = (binary) => {\n  return binaryToDecimal(binary);\n};\n\nconst decimalToBinary = (decimal) => {\n  return decimalToBinary(decimalToDecimal(decimal));\n};\n\nconst binaryToDecimal = (binary) => {\n  return binaryToDecimal(binary);\n};\n\nconst decimalToBinary = (decimal) => {\n  return decimalToBinary(decimalToDecimal(decimal));\n};\n\nconst binaryToDecimal = (binary) => {\n  return decimalToBinary(binaryToDecimal(binary));\n};\n\nconst decimalToBinary = (decimal) => {\n  return decimalToBinary(binaryToDecimal(decimal));\n};\n\nconst decimalToBinary = (decimal) => {\n  return decimalToBinary(binaryToDecimal(decimal));\n};\n\nconst binaryToDecimal = (binary) => {\n  return binaryToDecimal(decimalToBinary(binary));\n};\n\nconst binaryToDecimal = (binary) => {\n  return binaryToDecimal(decimalToBinary(binary));\n};\n\nconst decimalToBinary = (decimal) => {\n  return binaryToDecimal(decimalToBinary(decimal));\n};\n\nconst decimalToBinary = (decimal) => {\n  return binaryToDecimal(decimalToBinary(decimal));\n};\n\nconst binaryToDecimal = (binary) => {\n  return decimalToBinary(binaryToDecimal(binary));\n};\n\nconst decimalToBinary = (decimal) => {\n  return binaryToDecimal(decimalToBinary(decimal));\n};\n\nconst binaryToDecimal = (binary) => {\n  return decimalToBinary(binaryToDecimal(binary));\n};\n\nconst decimalToBinary = (decimal) => {\n  return binaryToDecimal(decimalToBinary(decimal));\n};"}
{"task_id": "JavaScript/80", "prompt": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  const res = []\n  const i = 1\n  let sum = 0\n  for (; i < len; i++) {\n    sum = 0\n    for (let j = i * 2; j < len; j += i) {\n      sum += s[j]\n    }\n    if (sum == 0) {\n      return true\n    }\n  }\n  return false\n}\n\nconsole.log(isHappy(a))\nconsole.log(isHappy(aa))\nconsole.log(isHappy(abcd))\nconsole.log(isHappy(aabb))\nconsole.log(isHappy(adb))\nconsole.log(isHappy(xyy))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradesArray = Array.from(grades);\n  let grade = gradesArray.reduce(function (result, current) {\n    if (result.length === 0) {\n      return current;\n    }\n    const currentValue = current.toFixed(2);\n    let currentGrade = result[result.length - 1];\n    if (currentValue > currentGrade) {\n      return [...result, current];\n    }\n    return result;\n  }, [])\n  return grade;\n};\n\nexport default numericalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let result = 0,\n    i,\n    j;\n\n  if (string.length === 0) return false;\n\n  for (i = 0; i < string.length; i += 1) {\n    for (j = i + 1; j < string.length; j += 1) {\n      if (string[i] === string[j]) return false;\n    }\n  }\n\n  for (i = 2; i < string.length; i += 1) {\n    if (string.indexOf(string[i])!== -1) return false;\n  }\n\n  return true;\n};\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrime = (string) => {\n  let result = false,\n    i,\n    j;\n\n  if (string.length === 0) return false;\n\n  for (i = 2; i < string.length; i += 1) {\n    if (string.indexOf(string[i])!== -1) return false;\n  }\n\n  return true;\n};\n\nmodule.exports = {\n  primeLength,\n  isPrime\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += i;\n  }\n  return result;\n};\n\nconst startsOneEndsOne = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += i;\n    result += n;\n  }\n  return result;\n};\n\nconst startsOneEndsThree = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += i;\n    result += n;\n    result += n;\n  }\n  return result;\n};\n\nconst startsOneEndsFive = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += i;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n  }\n  return result;\n};\n\nconst startsOneEndsNine = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += i;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n  }\n  return result;\n};\n\nconst startsOneEndsThreeNine = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += i;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n  }\n  return result;\n};\n\nconst startsOneEndsFiveNine = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += i;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n  }\n  return result;\n};\n\nconst startsOneEndsNinetyNine = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += i;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n  }\n  return result;\n};\n\nconst startsOneEndsSixtyNine = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += i;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n  }\n  return result;\n};\n\nconst startsOneEndsSeventyNine = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += i;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n  }\n  return result;\n};\n\nconst startsOneEndsOneNine = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += i;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n  }\n  return result;\n};\n\nconst startsOneEndsOneNineOne = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += i;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n  }\n  return result;\n};\n\nconst startsOneEndsOneNineThree = (n) => {\n  let result = 0;\n  for (let i = n; i > 0; i--) {\n    result += i;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n    result += n;\n  }\n  return result;\n};\n\nconst startsOneEndsOneNineFive = (n) => {\n  let"}
{"task_id": "JavaScript/84", "prompt": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    const digits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"}
{"task_id": "JavaScript/85", "prompt": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\nExample:\n  add([1, 3, 4, 5, 6, 7]) ==> 2\n  add([4, 2, 6, 7]) ==> 6\n*/\nconst add2 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\nExample:\n  add([1, 3, 4, 5, 6, 7]) ==> 2\n  add([4, 2, 6, 7]) ==> 6\n*/\nconst add3 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 3) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\nExample:\n  add([1, 3, 4, 5, 6, 7]) ==> 2\n  add([4, 2, 6, 7]) ==> 6\n*/\nconst add4 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 4) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\nExample:\n  add([1, 3, 4, 5, 6, 7]) ==> 2\n  add([4, 2, 6, 7]) ==> 6\n*/\nconst add5 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 5) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\nExample:\n  add([1, 3, 4, 5, 6, 7]) ==> 2\n  add([4, 2, 6, 7]) ==> 6\n*/\nconst add6 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 6) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\nExample:\n  add([1, 3, 4, 5, 6, 7]) ==> 2\n  add([4, 2, 6, 7]) ==> 6\n*/\nconst add7 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 7) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\nExample:\n  add([1, 3, 4, 5, 6, 7]) ==> 2\n  add([4, 2, 6, 7]) ==> 6\n*/\nconst add8 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 8) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\nExample:\n  add([1, 3, 4, 5, 6, 7]) ==> 2\n  add([4, 2, 6, 7]) ==> 6\n*/\nconst add9 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 9) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\nExample:\n  add([1, 3, 4, 5, 6, 7]) ==> 2\n  add([4, 2, 6, 7]) ==> 6\n*/\nconst add10 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 10) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\n/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\nExample:\n  add([1, 3, 4, 5, 6, 7]) ==> 2\n  add([4, 2, 6, 7]) ==> 6\n*/\nconst add11 = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 11) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\n/*GiveN a noN-emptY list of IntegErs l"}
{"task_id": "JavaScript/86", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n    let char_c = s.charCodeAt(0)\n    let shuffled = ''\n    let index = 0\n\n    while (char_c) {\n        while (char_c >= 0x61 && char_c <= 0x7A) {\n            shuffled += (s.charAt(index))\n            index++\n        }\n        char_c = s.charCodeAt(index)\n        index++\n    }\n\n    return shuffled\n}\n\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2) ...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let n = lst.length\n  let m = lst[0].length\n  if (x > n || x < 1) {\n    throw new Error('Row index out of range')\n  }\n  let res = []\n  for (let i = 0; i < m; i++) {\n    res.push([])\n  }\n  for (let i = 0; i < n; i++) {\n    res[x - 1].push(lst[i][x - 1])\n  }\n  return res\n}\n\nmodule.exports = {\n  getRow\n}\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length\n  let sortedArray = []\n  let i = 0\n  let j = 0\n\n  while (i < len) {\n    const sum = array[i] + array[i + 1]\n    if (sum % 2 === 0) {\n      sortedArray.push(sum)\n      i += 2\n    } else {\n      sortedArray.push(array[i])\n      i += 1\n    }\n  }\n\n  return sortedArray\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  const len = alphabet.length\n\n  let result = ''\n  for (let i = 0; i < len; i++) {\n    const key = alphabet.charAt(i)\n    const pos = s.indexOf(key)\n    if (pos > -1) {\n      result += alphabet[(pos + len - 1) % len]\n    }\n  }\n  return result\n}\n\n// const decrypt = (s) => {\n//   const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n//   const len = alphabet.length\n\n//   let result = ''\n//   for (let i = 0; i < len; i++) {\n//     const key = alphabet.charAt(i)\n//     const pos = s.indexOf(key)\n//     if (pos > -1) {\n//       result += alphabet[(pos + len - 1) % len]\n//     }\n//   }\n//   return result\n// }\n\n/*\n  SOLVED\n  \n  \n  const encrypt = (s) => {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    const len = alphabet.length\n\n    let result = ''\n    for (let i = 0; i < len; i++) {\n      const key = alphabet.charAt(i)\n      const pos = s.indexOf(key)\n      if (pos > -1) {\n        result += alphabet[(pos + len - 1) % len]\n      }\n    }\n    return result\n  }\n\n  const decrypt = (s) => {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    const len = alphabet.length\n\n    let result = ''\n    for (let i = 0; i < len; i++) {\n      const key = alphabet.charAt(i)\n      const pos = s.indexOf(key)\n      if (pos > -1) {\n        result += alphabet[(pos + len - 1) % len]\n      }\n    }\n    return result\n  }\n*/\n\n/*\n  NOT SOLVED\n  \n  let result = ''\n  for (let i = 0; i < len; i++) {\n    const key = alphabet.charAt(i)\n    const pos = s.indexOf(key)\n    if (pos > -1) {\n      result += alphabet[(pos + len - 1) % len]\n    }\n  }\n  return result\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  var smallest = lst[0];\n  for (var i = 1; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n  }\n  return smallest;\n};\n\n// test: node\n// var list = [1, 2, 3, 4, 5];\n// list.push(6);\n// list.push(7);\n// list.push(8);\n// console.log(nextSmallest(list));\n\n// test: console\n// console.log(nextSmallest([1, 2, 3, 4, 5]));\n// console.log(nextSmallest([5, 1, 4, 3, 2]));\n// console.log(nextSmallest([]));\n// console.log(nextSmallest([1, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    return S.match(/[^A-Za-z]+/).length === 1\n}\n\n// isBored(\"Hello world\")\n// isBored(\"The sky is blue. The sun is shining. I love this weather\")\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  let zeroes = 0\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] === 0) {\n      zeroes++\n    }\n  }\n  let total = 0\n  for (let i = 0; i < y.length; i++) {\n    total += y[i]\n  }\n  if (total === x.length + zeroes) {\n    return true\n  }\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const letters = []\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let result = []\n  let current = []\n  let index = 0\n  \n  for (let i = 0; i < message.length; i++) {\n    if (message[i].match(/[aeiou]/i)) {\n      current = []\n      if (index < message.length - 1) {\n        current.push(message[index])\n        current.push(message[index + 1])\n        index += 2\n      } else {\n        current.push(message[index])\n      }\n      letters.push(current)\n      current = []\n    } else {\n      current.push(message[i])\n    }\n  }\n  \n  for (let i = 0; i < letters.length; i++) {\n    let current = []\n    \n    for (let j = 0; j < letters[i].length; j++) {\n      let vowel = false\n      let nextLetter = ''\n      \n      if (j + 1 < letters[i].length) {\n        nextLetter = letters[i][j + 1]\n      }\n      \n      for (let k = 0; k < vowels.length; k++) {\n        if (nextLetter === vowels[k]) {\n          vowel = true\n        }\n      }\n      \n      if (!vowel) {\n        current.push(letters[i][j])\n      }\n    }\n    \n    result.push(current.join(''))\n  }\n  \n  return result.join('')\n}\n\nconst decode = (message) => {\n  const letters = []\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let current = []\n  let index = 0\n  \n  for (let i = 0; i < message.length; i++) {\n    if (message[i].match(/[aeiou]/i)) {\n      if (index < message.length - 2) {\n        current = []\n        current.push(message[index])\n        current.push(message[index + 1])\n        index += 2\n      } else {\n        current.push(message[index])\n      }\n      letters.push(current)\n      current = []\n    } else {\n      current.push(message[i])\n    }\n  }\n  \n  for (let i = 0; i < letters.length; i++) {\n    let current = []\n    \n    for (let j = 0; j < letters[i].length; j++) {\n      let vowel = false\n      let nextLetter = ''\n      \n      if (j + 1 < letters[i].length) {\n        nextLetter = letters[i][j + 1]\n      }\n      \n      for (let k = 0; k < vowels.length; k++) {\n        if (nextLetter === vowels[k]) {\n          vowel = true\n        }\n      }\n      \n      if (!vowel) {\n        current.push(letters[i][j])\n      }\n    }\n    \n    if (current.length) {\n      if (current.length === 2) {\n        if (current[0] === current[1]) {\n          current = current.slice(1)\n          current.push(current[0])\n          current.shift()\n          current.shift()\n        }\n      }\n      \n      if (current.length === 3) {\n        if (current[0] === current[1] && current[2] === current[0]) {\n          current = current.slice(1)\n          current.shift()\n          current.shift()\n        }\n      }\n    }\n    \n    if (current.length) {\n      for (let j = 0; j < current.length; j++) {\n        if (current[j].match(/[aeiou]/i)) {\n          current[j] = current[j].toUpperCase()\n        }\n      }\n    }\n    \n    if (current.length) {\n      return current.join('')\n    }\n  }\n}\n\nconst main = () => {\n  console.log(encode('This is a message'))\n  console.log(decode('This is a message'))\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      res += lst[i];\n    }\n  }\n  return res;\n};\n\nexport default skjkasdkd;\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (var key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkDict = (dict) => {\n  for (var key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst checkEmpty = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArray = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n\nconst checkEmptyArrayObject = (obj) => {\n  for (var key in obj) {\n    return false;\n  }\n  return true;\n};\n"}
{"task_id": "JavaScript/96", "prompt": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primeNumbers = [];\n  let n = n;\n  while (n > 1) {\n    if (isPrime(n)) {\n      primeNumbers.push(n);\n    }\n    n = Math.floor(n / 2);\n  }\n  return primeNumbers;\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  let i = 3;\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\nexport default countUpTo;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  // console.log('Multiply', a, b);\n  if (a === 0 || b === 0) return 0;\n  if (a < 0) {\n    return multiply(-1 * a, b);\n  }\n  if (b < 0) {\n    return multiply(a, -1 * b);\n  }\n  let aInt = a.toString(10);\n  let bInt = b.toString(10);\n  let result = parseInt(aInt + bInt);\n  // console.log('result', result);\n  if (result > 0) return result;\n  return multiply(Math.abs(a), Math.abs(b));\n};\n\nexport default multiply;\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let upper = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i).toUpperCase() === s.charAt(i)) {\n            upper++;\n        }\n    }\n    return upper;\n}\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of lOWER caSEs in EVeN iNdicES.\n  \n  For example:\n  countLower('ABCdEf') returns 1\n  countLower('aBCdEf') returns 1\n  countLower('Abcdef') returns 0\n  */\nconst countLower = (s) => {\n    let lower = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i).toLowerCase() === s.charAt(i)) {\n            lower++;\n        }\n    }\n    return lower;\n}\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of lOWER caSEs in iNdicE.\n  \n  For example:\n  countCamel('abcdef') returns 0\n  countCamel('abcdefg') returns 1\n  countCamel('Abcdef') returns 1\n  */\nconst countCamel = (s) => {\n    let camel = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i).toUpperCase() === s.charAt(i).toLowerCase()) {\n            camel++;\n        }\n    }\n    return camel;\n}\n\nconst count = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countCamel(s.charAt(i));\n    }\n    return total;\n}\n\nconst countCapital = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countUpper(s.charAt(i));\n    }\n    return total;\n}\n\nconst countLower = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countLower(s.charAt(i));\n    }\n    return total;\n}\n\nconst countNumbers = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countNumbers(s.charAt(i));\n    }\n    return total;\n}\n\nconst countUpper = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countUpper(s.charAt(i));\n    }\n    return total;\n}\n\nconst countWords = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countWords(s.charAt(i));\n    }\n    return total;\n}\n\nconst countSymbols = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countSymbols(s.charAt(i));\n    }\n    return total;\n}\n\nconst countSymbols2 = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countSymbols2(s.charAt(i));\n    }\n    return total;\n}\n\nconst countSymbols3 = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countSymbols3(s.charAt(i));\n    }\n    return total;\n}\n\nconst countSymbols4 = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countSymbols4(s.charAt(i));\n    }\n    return total;\n}\n\nconst countSymbols5 = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countSymbols5(s.charAt(i));\n    }\n    return total;\n}\n\nconst countSymbols6 = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countSymbols6(s.charAt(i));\n    }\n    return total;\n}\n\nconst countSymbols7 = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countSymbols7(s.charAt(i));\n    }\n    return total;\n}\n\nconst countSymbols8 = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countSymbols8(s.charAt(i));\n    }\n    return total;\n}\n\nconst countSymbols9 = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countSymbols9(s.charAt(i));\n    }\n    return total;\n}\n\nconst countSymbols10 = (s) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        total += countSymbols10(s.charAt(i));\n    }\n    return total;\n}\n\nconst countSymbols11 = (s) => {\n    let total = 0;\n    for (let i = 0; i <"}
{"task_id": "JavaScript/99", "prompt": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let integer = parseInt(value)\n  let n = parseInt(value.substring(value.length - 1))\n\n  let diff = n - integer\n\n  let diffAbs = Math.abs(diff)\n\n  let num1 = Math.floor(integer - diff)\n  let num2 = Math.ceil(integer + diff)\n\n  if (diffAbs < 2) {\n    return integer\n  } else if (diffAbs === 2) {\n    if (integer === num1) {\n      return integer\n    } else {\n      return num2\n    }\n  } else {\n    if (diff > 0) {\n      return num2\n    } else {\n      return num1\n    }\n  }\n}\n\nmodule.exports = closestInteger\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  var pile = [];\n  for (let i = 1; i < n; i++) {\n    pile.push(i);\n  }\n  return pile;\n}\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst getNextLevel = (n, pile) => {\n  var nextLevel = [];\n  for (let i = 0; i < pile.length; i++) {\n    nextLevel.push(pile[i]);\n  }\n  return nextLevel;\n}\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst getPileSize = (n, pile) => {\n  return pile.length;\n}\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst getPileSum = (n, pile) => {\n  return pile.reduce((pileSum, pileItem) => pileSum + pileItem, 0);\n}\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst getSumOfStones = (n, pile) => {\n  return pile.reduce((sumOfStones, pileItem) => sumOfStones + pileItem, 0);\n}\n\nmodule.exports = {\n  makeAPile,\n  getNextLevel,\n  getPileSize,\n  getPileSum,\n  getSumOfStones\n}\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let wordArray = [];\n  let words = s.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    wordArray.push(words[i]);\n  }\n  return wordArray;\n}\n\nconst is_even = (n) => (n % 2 === 0);\n\nconst sum = (a, b) => (a + b);\n\nconst average = (a, b) => ((a + b) / 2);\n\nconst difference = (a, b) => (a - b);\n\nconst multiply = (a, b) => (a * b);\n\nconst subtract = (a, b) => (a - b);\n\nconst get_average = (a, b) => (average(a, b));\n\nconst is_greater_than_5 = (a) => (a > 5);\n\nconst is_greater_than_10 = (a) => (a > 10);\n\nconst is_greater_than_20 = (a) => (a > 20);\n\nconst is_greater_than_30 = (a) => (a > 30);\n\nconst is_greater_than_40 = (a) => (a > 40);\n\nconst is_greater_than_50 = (a) => (a > 50);\n\nconst is_greater_than_60 = (a) => (a > 60);\n\nconst is_greater_than_70 = (a) => (a > 70);\n\nconst is_greater_than_80 = (a) => (a > 80);\n\nconst is_greater_than_90 = (a) => (a > 90);\n\nconst is_greater_than_100 = (a) => (a > 100);\n\nconst is_greater_than_110 = (a) => (a > 110);\n\nconst is_greater_than_120 = (a) => (a > 120);\n\nconst is_greater_than_130 = (a) => (a > 130);\n\nconst is_greater_than_140 = (a) => (a > 140);\n\nconst is_greater_than_150 = (a) => (a > 150);\n\nconst is_greater_than_160 = (a) => (a > 160);\n\nconst is_greater_than_170 = (a) => (a > 170);\n\nconst is_greater_than_180 = (a) => (a > 180);\n\nconst is_greater_than_190 = (a) => (a > 190);\n\nconst is_greater_than_200 = (a) => (a > 200);\n\nconst is_greater_than_210 = (a) => (a > 210);\n\nconst is_greater_than_220 = (a) => (a > 220);\n\nconst is_greater_than_230 = (a) => (a > 230);\n\nconst is_greater_than_240 = (a) => (a > 240);\n\nconst is_greater_than_250 = (a) => (a > 250);\n\nconst is_greater_than_260 = (a) => (a > 260);\n\nconst is_greater_than_270 = (a) => (a > 270);\n\nconst is_greater_than_280 = (a) => (a > 280);\n\nconst is_greater_than_290 = (a) => (a > 290);\n\nconst is_greater_than_300 = (a) => (a > 300);\n\nconst is_greater_than_310 = (a) => (a > 310);\n\nconst is_greater_than_320 = (a) => (a > 320);\n\nconst is_greater_than_330 = (a) => (a > 330);\n\nconst is_greater_than_340 = (a) => (a > 340);\n\nconst is_greater_than_350 = (a) => (a > 350);\n\nconst is_greater_than_360 = (a) => (a > 360);\n\nconst is_greater_than_370 = (a) => (a > 370);\n\nconst is_greater_than_380 = (a) => (a > 380);\n\nconst is_greater_than_390 = (a) => (a > 390);\n\nconst is_greater_than_400 = (a) => (a > 400);\n\nconst is_greater_than_410 = (a) => (a > 410);\n\nconst is_greater_than_420 = (a) => (a > 420);\n\nconst is_greater_than_430 = (a) => (a > 430);\n\nconst is_greater_than_440 = (a) => (a > 440);\n\nconst is_greater_than_450 = (a) => (a > 450);\n\nconst is_greater_than_460 = (a) => (a > 460);\n\nconst is_greater_than_470 = (a) => (a > 470);\n\nconst is_greater_than_480 = (a) => (a > 480);\n\nconst is_greater_than_490 = (a) => (a > 490);\n\nconst is_greater_than_500 = (a) => (a > 500);\n\nconst is_greater_than_510 = (a) => (a > 510);\n\nconst is_greater_than_520 = (a) => (a > 520);\n\nconst is_greater_than_530 = (a) => (a > 530);\n\nconst is_greater_than_540 = (a) => (a > 540);\n\nconst is_greater_than_550 = (a) => (a > 550);\n\nconst is_greater_than_560 = (a) => (a > 560);\n\nconst is_greater_"}
{"task_id": "JavaScript/102", "prompt": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x <= 0) {\n    return -1\n  }\n  if (y <= 0) {\n    return -1\n  }\n  if (x > y) {\n    return -1\n  }\n  var r = x - 1\n  var c = y - 1\n  var result = 0\n  while (r > 0) {\n    if (r % 2 === 0) {\n      result = result + 2 * c\n      c = c - 1\n    }\n    r = r / 2\n  }\n  return result\n}\n\nexport default chooseNum\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  // Get the sum of all the numbers in the array\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  // Check if sum is even\n  if (sum % 2 === 1) {\n    return -1;\n  }\n  // Divide sum by 2 and return the number\n  return sum / 2;\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let i = 1;\n  return x.filter((_, i) => i === x.indexOf(i))\n   .sort()\n   .reduce((result, num) => {\n      if (num === result.length) return [...result, num];\n      else return [...result,...uniqueDigits(num)];\n    }, []);\n}\n\n/*Given a positive integer, return its sum of digits.\n\nExample:\n\nInput: 27\nOutput: 7\n\nGiven: 7\nOutput: 7\n\nGiven: 27\nOutput: 27\n\nGiven: 9999\nOutput: 4\n\nGiven: 1234\nOutput: 9\n\nGiven: 0\nOutput: 0\n\nGiven: -1\nOutput: -1\n\nGiven: -2\nOutput: -2\n\nGiven: -3\nOutput: -3\n\nGiven: -9\nOutput: -9\n\nGiven: -999\nOutput: -999\n\nGiven: -10000\nOutput: -4\n\nGiven: -1000\nOutput: -3\n\nGiven: -9000\nOutput: -9\n\nGiven: -900\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven: -999\nOutput: -9\n\nGiven: -9000\nOutput: -9\n\nGiven"}
{"task_id": "JavaScript/105", "prompt": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const result = []\n  arr.forEach(v => {\n    const length = v.length\n    const index = Math.floor(Math.random() * length)\n    result.push(v.slice(index, length))\n  })\n  return result\n}\n\nconst reverse = (arr) => {\n  const result = []\n  arr.forEach((v, i) => {\n    result.push(v.reverse())\n  })\n  return result\n}\n\nconst generateArray = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nconst randomArray = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(Math.floor(Math.random() * length))\n  }\n  return arr\n}\n\nconst shuffleArray = (arr) => {\n  const len = arr.length\n  let result = []\n  let tmp = []\n  let index = Math.floor(Math.random() * len)\n  for (let i = 0; i < len; i++) {\n    tmp.push(arr[i])\n  }\n  for (let i = 0; i < len; i++) {\n    result.push(tmp[index])\n    index = index === len - 1? 0 : index + 1\n  }\n  return result\n}\n\nconst randomArray = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(Math.floor(Math.random() * length))\n  }\n  return arr\n}\n\nconst randomArrayByLength = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(Math.floor(Math.random() * length))\n  }\n  return arr\n}\n\nconst randomArrayByLength = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(Math.floor(Math.random() * length))\n  }\n  return arr\n}\n\nconst randomArrayByLength = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(Math.floor(Math.random() * length))\n  }\n  return arr\n}\n\nconst randomArrayByLength = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(Math.floor(Math.random() * length))\n  }\n  return arr\n}\n\nconst randomArrayByLength = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(Math.floor(Math.random() * length))\n  }\n  return arr\n}\n\nconst randomArrayByLength = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(Math.floor(Math.random() * length))\n  }\n  return arr\n}\n\nconst randomArrayByLength = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(Math.floor(Math.random() * length))\n  }\n  return arr\n}\n\nconst randomArrayByLength = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(Math.floor(Math.random() * length))\n  }\n  return arr\n}\n\nconst randomArrayByLength = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(Math.floor(Math.random() * length))\n  }\n  return arr\n}\n\nconst randomArrayByLength = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(Math.floor(Math.random() * length))\n  }\n  return arr\n}\n\nconst randomArrayByLength = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(Math.floor(Math.random() * length))\n  }\n  return arr\n}\n\nconst randomArrayByLength = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(Math.floor(Math.random() * length))\n  }\n  return arr\n}\n\nconst randomArrayByLength = (length) => {\n  const arr = []\n  for (let i = 0; i < length; i++) {\n    arr.push(Math.floor(Math.random() * length))\n  }\n  return arr\n}\n\nconst randomArrayByLength = (length) => {\n  const arr = []\n"}
{"task_id": "JavaScript/106", "prompt": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const num = 1\n  const mult = n\n  const factor = 1\n  const ret = []\n\n  while (num <= n) {\n    ret.push(factor)\n    factor *= mult\n    num++\n  }\n  return ret\n}\n\n/*\n  iF the function f tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const num = 1\n  const mult = n\n  const factor = 1\n  const ret = []\n\n  while (num <= n) {\n    ret.push(factor)\n    factor *= mult\n    num++\n  }\n  return ret\n}\n\n/*\n  iF the function f tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const num = 1\n  const mult = n\n  const factor = 1\n  const ret = []\n\n  while (num <= n) {\n    ret.push(factor)\n    factor *= mult\n    num++\n  }\n  return ret\n}\n\n/*\n  iF the function f tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const num = 1\n  const mult = n\n  const factor = 1\n  const ret = []\n\n  while (num <= n) {\n    ret.push(factor)\n    factor *= mult\n    num++\n  }\n  return ret\n}\n\n/*\n  iF the function f tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const num = 1\n  const mult = n\n  const factor = 1\n  const ret = []\n\n  while (num <= n) {\n    ret.push(factor)\n    factor *= mult\n    num++\n  }\n  return ret\n}\n\n/*\n  iF the function f tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const num = 1\n  const mult = n\n  const factor = 1\n  const ret = []\n\n  while (num <= n) {\n    ret.push(factor)\n    factor *= mult\n    num++\n  }\n  return ret\n}\n\n/*\n  iF the function f tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *..."}
{"task_id": "JavaScript/107", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  var odd = 0;\n  var even = 0;\n  for (var i = 1; i <= n; i++) {\n    var num = parseInt(i);\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [odd, even];\n}\n\n// TESTS\ntests.forEach(test => {\n  var testName = test.title;\n  var n = test.n;\n  var output = test.output;\n  var result = evenOddPalindrome(n);\n  console.log(`${testName}:\\t${output.join(', ')}\\t->\\t${result.join(', ')}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const res = []\n  let num = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      num++\n    }\n    if (num > 0) {\n      res.push(num)\n      num = 0\n    }\n  }\n  return res\n}\n\n/*\n  >>> countNums([])\n  []\n  >>> countNums([-1, 11, -11])\n  [1]\n  >>> countNums([1, 1, 2])\n  [1, 2, 2]\n  */\nexport default countNums\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2], ..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2],..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    let max = 0;\n    let start = 0;\n    let result = false;\n    let len = arr.length;\n    for (let i = 0; i < len; i++) {\n        if (arr[i] > arr[max]) {\n            max = i;\n            start = i;\n        }\n    }\n    for (let i = start; i < len - 1; i++) {\n        if (arr[i] >= arr[i + 1]) {\n            let temp = arr[i];\n            arr[i] = arr[i + 1];\n            arr[i + 1] = temp;\n            result = true;\n        }\n    }\n    return result;\n}\n\nconst moveOneBall2 = (arr) => {\n    let max = 0;\n    let start = 0;\n    let result = false;\n    let len = arr.length;\n    for (let i = 0; i < len; i++) {\n        if (arr[i] > arr[max]) {\n            max = i;\n            start = i;\n        }\n    }\n    for (let i = start; i < len - 1; i++) {\n        if (arr[i] > arr[i + 1]) {\n            if (arr[i] <= arr[i + 1]) {\n                let temp = arr[i];\n                arr[i] = arr[i + 1];\n                arr[i + 1] = temp;\n                result = true;\n            }\n        }\n    }\n    return result;\n}\n\nmoveOneBall2([1, 2, 3, 4, 5]);\nmoveOneBall2([1, 2, 3, 4, 5, 6]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]);\nmoveOneBall2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,"}
{"task_id": "JavaScript/110", "prompt": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n    if (lst1.length === 0 || lst2.length === 0) return \"NO\";\n    const lst1copy = lst1.slice();\n    const lst2copy = lst2.slice();\n    const len = lst1.length;\n    const start = lst2.length - len;\n    let i = start;\n    while (i < lst2.length) {\n        const temp = lst1copy.shift();\n        lst1copy.push(lst2copy.shift());\n        lst2copy.push(temp);\n        i++;\n    }\n    return \"YES\";\n};\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4]);\nexchange([1, 2, 3, 4], [1, 5, 3, 4]);\nexchange([1, 2, 3, 4], [1, 2, 3, 5]);\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5]);\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]);\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  if (!test) return {}\n  let counts = {}\n  for (let char of test) {\n    counts[char] = (counts[char] || 0) + 1\n  }\n  let sortedCounts = Object.values(counts).sort((a, b) => b - a)\n  let maxCount = sortedCounts[sortedCounts.length - 1]\n  return counts\n}\n\n/*\n  The number of elements in the given array is N.\n  Find the number of elements in the array that are divisible by one and two.\n  \n  Example:\n  divisors(3) == 1\n  divisors(14) == 3\n  divisors(18) == 2\n  divisors(23) == 2\n  divisors(26) == 2\n  divisors(29) == 0\n  divisors(31) == 2\n  divisors(100) == 23\n  \n  */\nconst divisors = (n) => {\n  let divisors = 0\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 2\n    }\n  }\n  return divisors\n}\n\n/*\n  The number of elements in the given array is N.\n  Find the number of elements in the array that are divisible by one and three.\n  \n  Example:\n  divisors(3) == 1\n  divisors(14) == 1\n  divisors(18) == 0\n  divisors(23) == 1\n  divisors(26) == 1\n  divisors(29) == 0\n  divisors(31) == 1\n  divisors(100) == 46\n  \n  */\nconst divisors3 = (n) => {\n  let divisors = 0\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 1\n    }\n  }\n  return divisors\n}\n\n/*\n  The number of elements in the given array is N.\n  Find the number of elements in the array that are divisible by one and four.\n  \n  Example:\n  divisors(3) == 1\n  divisors(14) == 0\n  divisors(18) == 0\n  divisors(23) == 1\n  divisors(26) == 1\n  divisors(29) == 0\n  divisors(31) == 1\n  divisors(100) == 52\n  \n  */\nconst divisors4 = (n) => {\n  let divisors = 0\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 1\n    }\n  }\n  return divisors\n}\n\n/*\n  The number of elements in the given array is N.\n  Find the number of elements in the array that are divisible by two and three.\n  \n  Example:\n  divisors(3) == 0\n  divisors(14) == 0\n  divisors(18) == 0\n  divisors(23) == 1\n  divisors(26) == 1\n  divisors(29) == 0\n  divisors(31) == 1\n  divisors(100) == 50\n  \n  */\nconst divisors23 = (n) => {\n  let divisors = 0\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 1\n    }\n  }\n  return divisors\n}\n\n/*\n  The number of elements in the given array is N.\n  Find the number of elements in the array that are divisible by two and five.\n  \n  Example:\n  divisors(3) == 0\n  divisors(14) == 0\n  divisors(18) == 0\n  divisors(23) == 0\n  divisors(26) == 1\n  divisors(29) == 0\n  divisors(31) == 1\n  divisors(100) == 51\n  \n  */\nconst divisors25 = (n) => {\n  let divisors = 0\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 1\n    }\n  }\n  return divisors\n}\n\n/*\n  The number of elements in the given array is N.\n  Find the number of elements in the array that are divisible by two, three, and five.\n  \n  Example:\n  divisors(3) == 0\n  divisors(14) == 0\n  divisors(18) == 0\n  divisors(23) == 0\n  divisors(26) == 0\n  divisors(29) == 0\n  divisors(31) == 1\n  divisors(100) == 51\n  \n  */\nconst divisors35 = (n) => {\n  let divisors = 0\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors += 1\n    }\n  }\n  return divisors\n}\n\n/*\n  The number of elements in the given array is N.\n  Find the number of elements in the array that are divisible by one and two, three, and four.\n  \n  Example:\n  divisors"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  if(s.length === 0) return ['']\n  let i = 0\n  let result = []\n  while (i < s.length) {\n    if (s[i] === c) {\n      if (i === s.length - 1) {\n        result.push(s.substring(0, i))\n        return result\n      } else if (s[i + 1]!== c) {\n        result.push(s.substring(0, i) + s.substring(i + 1, s.length))\n        i = i + 1\n      }\n    }\n    i++\n  }\n}\n\n//------------------------------------------------------------------------------\n// TEST\n//------------------------------------------------------------------------------\n\nconst test_cases = [\n  [\"a\", \"b\", [\"a\"]],\n  [\"\", \"\", []],\n  [\"a\", \"\", [\"a\"]],\n  [\"abcdef\", \"\", [\"abcdef\"]],\n  [\"\", \"abcdef\", [\"abcdef\"]],\n  [\"a\", \"abcdef\", [\"abcdef\"]],\n  [\"ab\", \"cd\", [\"cd\"]],\n  [\"ab\", \"ab\", []],\n  [\"ab\", \"\", [\"ab\"]],\n  [\"abcdef\", \"ab\", [\"abcdef\"]],\n  [\"abcd\", \"\", [\"\"]],\n  [\"abcd\", \"b\", [\"bc\"]],\n  [\"abcd\", \"abcd\", [\"abcd\"]],\n  [\"abcd\", \"c\", [\"ab\"]],\n  [\"abcd\", \"abcdef\", [\"bcdef\"]],\n  [\"abcd\", \"\", [\"abcd\"]],\n  [\"abcd\", \"bcd\", [\"bc\"]],\n  [\"abcd\", \"abcd\", [\"abcd\"]],\n  [\"abcd\", \"bcdef\", [\"ab\"]],\n  [\"abcd\", \"abcdef\", [\"\"]],\n  [\"abcdef\", \"\", [\"abcdef\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"cdef\", [\"cdef\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcdef\", [\"bcdef\"]],\n  [\"abcdef\", \"abcdef\", [\"abcdef\"]],\n  [\"abcdef\", \"\", [\"\"]],\n  [\"abcdef\", \"bcdef\", [\"bcdef\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcd\", [\"bcd\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcdef\", [\"bcd\"]],\n  [\"abcdef\", \"abcdef\", [\"abcdef\"]],\n  [\"abcdef\", \"\", [\"abcdef\"]],\n  [\"abcdef\", \"bcdef\", [\"bcdef\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcd\", [\"bcd\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcdef\", [\"bcdef\"]],\n  [\"abcdef\", \"abcdef\", [\"abcdef\"]],\n  [\"abcdef\", \"\", [\"\"]],\n  [\"abcdef\", \"bcdef\", [\"bcdef\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcd\", [\"bcd\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcdef\", [\"bcdef\"]],\n  [\"abcdef\", \"abcdef\", [\"abcdef\"]],\n  [\"abcdef\", \"\", [\"\"]],\n  [\"abcdef\", \"bcdef\", [\"bcdef\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcd\", [\"bcd\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcdef\", [\"bcdef\"]],\n  [\"abcdef\", \"abcdef\", [\"abcdef\"]],\n  [\"abcdef\", \"\", [\"\"]],\n  [\"abcdef\", \"bcdef\", [\"bcdef\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcd\", [\"bcd\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcdef\", [\"bcdef\"]],\n  [\"abcdef\", \"abcdef\", [\"abcdef\"]],\n  [\"abcdef\", \"\", [\"\"]],\n  [\"abcdef\", \"bcdef\", [\"bcdef\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcd\", [\"bcd\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcdef\", [\"bcdef\"]],\n  [\"abcdef\", \"abcdef\", [\"abcdef\"]],\n  [\"abcdef\", \"\", [\"\"]],\n  [\"abcdef\", \"bcdef\", [\"bcdef\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcd\", [\"bcd\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcdef\", [\"bcdef\"]],\n  [\"abcdef\", \"abcdef\", [\"abcdef\"]],\n  [\"abcdef\", \"\", [\"\"]],\n  [\"abcdef\", \"bcdef\", [\"bcdef\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcd\", [\"bcd\"]],\n  [\"abcdef\", \"abcd\", [\"abcd\"]],\n  [\"abcdef\", \"bcdef\", [\"bc"}
{"task_id": "JavaScript/113", "prompt": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  return lst.filter((el) => {\n    return el.length % 2 === 1\n  })\n}\n\nexport {\n  oddCount\n}\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n    let minSum = 0;\n    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        sum = 0;\n        for (let j = i; j < nums.length; j++) {\n            sum += nums[j];\n            if (sum > minSum) {\n                minSum = sum;\n            }\n            if (sum < 0) {\n                break;\n            }\n        }\n    }\n    return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const len = grid.length\n    const numBucket = grid[0].length\n    const buckets = Array(numBucket)\n    for (let i = 0; i < numBucket; i++) {\n        buckets[i] = 0\n    }\n    for (let i = 0; i < len; i++) {\n        for (let j = 0; j < numBucket; j++) {\n            buckets[j] = Math.max(buckets[j], grid[i][j])\n        }\n    }\n    const count = 0\n    for (let i = 0; i < numBucket; i++) {\n        count += Math.min(buckets[i], capacity)\n    }\n    return count\n}\n\nconsole.log(maxFill([\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n], 1))\nconsole.log(maxFill([\n    [0, 0, 0],\n    [0, 0, 0]\n], 5))\nconsole.log(maxFill([\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n], 5))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    let sortedArray = arr.slice().sort();\n    let reverseArray = sortedArray.slice().reverse();\n    let mergedArray = sortedArray.concat(reverseArray);\n    return mergedArray;\n};\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));\nconsole.log(sortArray([1, 0, 2, 3, 4])[0, 1, 2, 3, 4]);\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const l = s.split('')\n  const result = []\n  const last = l.length - 1\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * last)\n    result.push(l[index])\n    l.splice(index, 1)\n  }\n  return result\n}\n\nconst words = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n\n// console.log(selectWords(words, 3))\n// console.log(selectWords(words, 4))\n// console.log(selectWords(words, 5))\n\nconst char = {\n  'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1,\n  'A': 1, 'B': 1, 'C': 1, 'D': 1, 'E': 1, 'F': 1, 'G': 1, 'H': 1, 'I': 1, 'J': 1, 'K': 1, 'L': 1, 'M': 1, 'N': 1, 'O': 1, 'P': 1, 'Q': 1, 'R': 1, 'S': 1, 'T': 1, 'U': 1, 'V': 1, 'W': 1, 'X': 1, 'Y': 1, 'Z': 1,\n  '1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1, '0': 1\n}\n\nconst selectWords = (s, n) => {\n  const l = s.split('')\n  const result = []\n  const last = l.length - 1\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * last)\n    result.push(l[index])\n    l.splice(index, 1)\n  }\n  return result\n}\n\nconst words = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n\nconst selectWords = (s, n) => {\n  const l = s.split('')\n  const result = []\n  const last = l.length - 1\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * last)\n    result.push(l[index])\n    l.splice(index, 1)\n  }\n  return result\n}\n\nconst words = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n\nconst selectWords = (s, n) => {\n  const l = s.split('')\n  const result = []\n  const last = l.length - 1\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * last)\n    result.push(l[index])\n    l.splice(index, 1)\n  }\n  return result\n}\n\nconst words = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n\nconst selectWords = (s, n) => {\n  const l = s.split('')\n  const result = []\n  const last = l.length - 1\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * last)\n    result.push(l[index])\n    l.splice(index, 1)\n  }\n  return result\n}\n\nconst words = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n\nconst selectWords = (s, n) => {\n  const l = s.split('')\n  const result = []\n  const last = l.length - 1\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * last)\n    result.push(l[index])\n    l.splice(index, 1)\n  }\n  return result\n}\n\nconst words = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n\nconst selectWords = (s, n) => {\n  const l = s.split('')\n  const result = []\n  const last = l.length - 1\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math.random() * last)\n    result.push(l[index])\n    l.splice(index, 1)\n  }\n  return result\n}\n\nconst words = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n\nconst selectWords = (s, n) => {\n  const l = s.split('')\n  const result = []\n  const last = l.length - 1\n  for (let i = 0; i < n; i++) {\n    const index = Math.floor(Math."}
{"task_id": "JavaScript/118", "prompt": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let word = word.toUpperCase();\n  let vowel = '';\n  let vowelLen = 0;\n  \n  for (let i = 0; i < word.length; i++) {\n    let char = word[i];\n    if (char.match(/[A-Z]/)) {\n      if (char.length > vowelLen) {\n        vowel = char;\n        vowelLen = char.length;\n      }\n    }\n  }\n  \n  return vowel;\n}\n\nconst getClosestVowel2 = (word) => {\n  let word = word.toUpperCase();\n  let vowel = '';\n  let vowelLen = 0;\n  \n  for (let i = 0; i < word.length; i++) {\n    let char = word[i];\n    if (char.match(/[A-Z]/)) {\n      if (char.length > vowelLen) {\n        vowel = char;\n        vowelLen = char.length;\n      }\n    }\n  }\n  \n  return vowel;\n}\n\nconsole.log(getClosestVowel(\"yogurt\"));\nconsole.log(getClosestVowel(\"FULL\"));\nconsole.log(getClosestVowel(\"quick\"));\nconsole.log(getClosestVowel(\"ab\"));\nconsole.log(getClosestVowel2(\"yogurt\"));\nconsole.log(getClosestVowel2(\"FULL\"));\nconsole.log(getClosestVowel2(\"quick\"));\nconsole.log(getClosestVowel2(\"ab\"));\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  if (lst.length === 0) {\n    return 'No'\n  }\n  let res = []\n  lst.forEach((s, i) => {\n    if (s === '(') {\n      res.push(lst[i + 1])\n    } else if (s === ')') {\n      res.push(lst[i - 1])\n      if (res.length === 2) {\n        return 'Yes'\n      }\n    }\n  })\n  return 'No'\n}\n\n/*\n  Given a list of strIngs, return 'Yes' if any of them is a palindrome,\n  and return 'No' otherwise.\n  If no strIngs are given, return 'No'.\n  Examples:\n  isPalindrome(['H', 'e', 'l', 'l', 'o','', 'W', 'o', 'r', 'l', 'd'])\n  isPalindrome([])\n  isPalindrome(['a', 'a'])\n  isPalindrome(['a', 'A'])\n  isPalindrome(['Hello', 'World'])\n  isPalindrome(['Hello', 'World', '!'])\n  */\nconst isPalindrome = (lst) => {\n  if (lst.length === 0) {\n    return 'No'\n  }\n  let res = []\n  lst.forEach((s, i) => {\n    if (s ==='') {\n      return\n    }\n    if (s.length!== 2) {\n      return\n    }\n    res.push(s[0] + s[1])\n  })\n  return res.some((s, i) => {\n    return s === s.toLowerCase()\n  })\n}\n\n/*\n  Given a list of strIngs, return 'Yes' if any of them is a anagram of each\n  other, and return 'No' otherwise.\n  If no strIngs are given, return 'No'.\n  Examples:\n  isAnagram(['H', 'e', 'l', 'l', 'o','', 'W', 'o', 'r', 'l', 'd'])\n  isAnagram([])\n  isAnagram(['a', 'a'])\n  isAnagram(['a', 'A'])\n  isAnagram(['Hello', 'World'])\n  isAnagram(['Hello', 'World', '!'])\n  */\nconst isAnagram = (lst) => {\n  if (lst.length === 0) {\n    return 'No'\n  }\n  let res = []\n  lst.forEach((s, i) => {\n    if (s ==='') {\n      return\n    }\n    if (s.length!== 2) {\n      return\n    }\n    res.push(s[0] + s[1])\n  })\n  return res.every((s, i) => {\n    return s === s.toLowerCase()\n  })\n}\n\n/*\n  Given a list of strIngs, return 'Yes' if any of them is a palindrome, and\n  return 'No' otherwise.\n  If no strIngs are given, return 'No'.\n  Examples:\n  isPalindrome(['H', 'e', 'l', 'l', 'o','', 'W', 'o', 'r', 'l', 'd'])\n  isPalindrome([])\n  isPalindrome(['a', 'a'])\n  isPalindrome(['a', 'A'])\n  isPalindrome(['Hello', 'World'])\n  isPalindrome(['Hello', 'World', '!'])\n  */\nconst isPalindrome2 = (lst) => {\n  if (lst.length === 0) {\n    return 'No'\n  }\n  let res = []\n  lst.forEach((s, i) => {\n    if (s ==='') {\n      return\n    }\n    if (s.length!== 2) {\n      return\n    }\n    res.push(s[0] + s[1])\n    res.push(s[1] + s[0])\n  })\n  return res.every((s, i) => {\n    return s === s.toLowerCase()\n  })\n}\n\nconst test = [\n  '(())()',\n  '()()()',\n  '()()()',\n  '())()',\n  '()(())',\n  '(())()()',\n  '()()()()',\n  '()()()()',\n  '(())()()',\n  '()(())()',\n  '(())()()',\n  '())()()',\n  '()())()',\n  '()()()()',\n  '()()()()',\n  '(())()()',\n  '()())()',\n  '())()()',\n  '())()()',\n  '(())()()',\n  '(())()()',\n  '(())()()',\n  '()()()()',\n  '()()()()',\n  '()()()()',\n  '(())()()',\n  '()())()',\n  '())()()',\n  '(())()()',\n  '())()()',\n  '())()()',\n  '(())()()',\n  '()())()',\n  '("}
{"task_id": "JavaScript/120", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    let result = [];\n    let left = 0, right = 0;\n    let count = 0;\n    while (left <= right) {\n        const middle = (left + right) >> 1;\n        if (count + arr[middle] >= k) {\n            right = middle - 1;\n        } else {\n            left = middle + 1;\n        }\n        count += arr[middle];\n    }\n    return result;\n};\n\nconst test = (arr, k) => {\n    console.log(\n        Array.from(\n            arr\n               .sort((a, b) => b - a)\n               .slice(0, k)\n               .reverse()\n        )\n    );\n};\n\ntest([-3, -4, 5], 3);\ntest([4, -4, 4], 2);\ntest([-3, 2, 1, 2, -1, -2, 1], 1);\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\nconsole.log(solution([3, 3, 3, 3, 3]));\n\n/*\n  Given a positive integer n, return the number of trailing zeroes in n!.\n  For example,\n  numberOfTrailingZeros(1) ==> 0\n  numberOfTrailingZeros(8) ==> 3\n  numberOfTrailingZeros(2) ==> 0\n  numberOfTrailingZeros(10) ==> 2\n  numberOfTrailingZeros(18) ==> 4\n  numberOfTrailingZeros(24) ==> 2\n  numberOfTrailingZeros(100) ==> 6\n  numberOfTrailingZeros(120) ==> 5\n  numberOfTrailingZeros(999) ==> 9\n  */\nconst numberOfTrailingZeros = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            count += i;\n        }\n    }\n    return count;\n}\n\nconsole.log(numberOfTrailingZeros(999));\n\n/*\n  Given a positive integer n, return the number of trailing zeroes in n!.\n  For example,\n  numberOfTrailingZeros(1) ==> 0\n  numberOfTrailingZeros(8) ==> 3\n  numberOfTrailingZeros(2) ==> 0\n  numberOfTrailingZeros(10) ==> 2\n  numberOfTrailingZeros(18) ==> 4\n  numberOfTrailingZeros(24) ==> 2\n  numberOfTrailingZeros(100) ==> 6\n  numberOfTrailingZeros(120) ==> 5\n  numberOfTrailingZeros(999) ==> 9\n  */\nconst numberOfTrailingZeros2 = (n) => {\n    let count = 0;\n    let i = 1;\n    while (i <= n) {\n        if (n % i === 0) {\n            count++;\n            i++;\n        }\n    }\n    return count;\n}\n\nconsole.log(numberOfTrailingZeros2(999));\n\n/*\n  Given a positive integer n, return the number of trailing zeroes in n!.\n  For example,\n  numberOfTrailingZeros(1) ==> 0\n  numberOfTrailingZeros(8) ==> 3\n  numberOfTrailingZeros(2) ==> 0\n  numberOfTrailingZeros(10) ==> 2\n  numberOfTrailingZeros(18) ==> 4\n  numberOfTrailingZeros(24) ==> 2\n  numberOfTrailingZeros(100) ==> 6\n  numberOfTrailingZeros(120) ==> 5\n  numberOfTrailingZeros(999) ==> 9\n  */\nconst numberOfTrailingZeros3 = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(numberOfTrailingZeros3(999));\n\n/*\n  Given two positive integers a and b, return the largest integer smaller than\n  both of them.\n  For example,\n  gcd(4, 8) ==> 4\n  gcd(2, 7) ==> 2\n  gcd(1, 2) ==> 1\n  gcd(5, 10) ==> 5\n  gcd(7, 15) ==> 7\n  gcd(10, 20) ==> 10\n  gcd(18, 27) ==> 18\n  gcd(17, 23) ==> 17\n  gcd(12, 13) ==> 12\n  gcd(7, 5) ==> 7\n  gcd(9, 10) ==> 9\n  */\nconst gcd = (a, b) => {\n    while (b!== 0) {\n        let tmp = b;\n        b = a % b;\n        a = tmp;\n    }\n    return a;\n}\n\nconsole.log(gcd(4, 8));\n\n/*\n  Given two positive integers a and b, return the largest integer smaller than\n  both of them.\n  For example,\n  gcd(4, 8) ==> 4\n  gcd(2, 7) ==> 2\n  gcd(1, 2) ==> 1\n  gcd(5, 10) ==> 5\n  gcd(7, 15) ==> 7\n  gcd(10, 20) ==> 10\n  gcd(18, 27) ==> 18\n  gcd(17, 23) ==> 17\n  gcd(12, 13) ==> 12\n  gcd(7, 5) ==> 7\n  gcd(9, 10) ==> 9\n  */\nconst gcd2 = (a, b) => {\n    while (b!== 0) {\n        let tmp = a;\n        a = b;\n        b = tmp % b;\n    }\n    return a;\n}\n\nconsole.log(gcd2(4, 8));\n\n/*\n  Given a positive integer n, return the number of trailing zeroes in n!.\n  For example,\n  numberOfTrailingZeros(1) ==> 0\n  numberOfTrailingZeros(8) ==> 3\n  numberOfTrailingZeros(2) ==> 0\n  numberOfTrailingZeros(10) ==> 2\n  numberOfTrailingZeros(18) ==> 4\n  numberOfTrailingZeros(24) ==> 2\n  numberOfTrailingZeros(100) ==> 6\n  numberOfTrailingZeros(120) ==> 5\n  numberOfTrailingZeros(999) ==> 9\n  */\nconst numberOfTrailingZeros4 = (n) => {\n    let count = 0;"}
{"task_id": "JavaScript/122", "prompt": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nexport default addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  if (n === 1) return [1]\n  else if (n === 2) return [1, 2]\n  else if (n === 3) return [3, 1, 2]\n  else if (n === 4) return [1, 3, 2, 1]\n  else if (n === 5) return [1, 5, 2, 3, 1]\n  else if (n === 6) return [1, 3, 5, 2, 3, 1]\n  else if (n === 7) return [3, 7, 5, 3, 2, 1, 1]\n  else if (n === 8) return [1, 3, 7, 5, 3, 2, 1, 1]\n  else if (n === 9) return [1, 3, 5, 7, 3, 2, 1, 3, 1]\n  else if (n === 10) return [1, 3, 7, 9, 5, 3, 2, 1, 3, 1]\n  else if (n === 11) return [1, 3, 5, 7, 3, 9, 5, 3, 2, 1, 1]\n  else if (n === 12) return [1, 3, 7, 9, 5, 3, 2, 1, 3, 5, 3, 1]\n  else if (n === 13) return [1, 3, 5, 7, 9, 5, 3, 2, 1, 3, 7, 5, 3, 1]\n  else if (n === 14) return [1, 3, 7, 9, 5, 3, 2, 1, 3, 5, 7, 9, 5, 3, 1]\n  else if (n === 15) return [1, 3, 5, 7, 9, 5, 3, 2, 1, 3, 7, 9, 5, 3, 1, 5]\n  else if (n === 16) return [1, 3, 5, 7, 9, 5, 3, 2, 1, 3, 7, 9, 5, 3, 1, 3, 1]\n  else if (n === 17) return [1, 3, 5, 7, 9, 5, 3, 2, 1, 3, 7, 9, 5, 3, 1, 5, 3, 1]\n  else if (n === 18) return [1, 3, 5, 7, 9, 5, 3, 2, 1, 3, 7, 9, 5, 3, 1, 3, 5, 3, 1]\n  else if (n === 19) return [1, 3, 5, 7, 9, 5, 3, 2, 1, 3, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1]\n  else if (n === 20) return [1, 3, 5, 7, 9, 5, 3, 2, 1, 3, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1]\n  else if (n === 21) return [1, 3, 5, 7, 9, 5, 3, 2, 1, 3, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1, 3, 5, 7, 9, 5, 3, 1,"}
{"task_id": "JavaScript/124", "prompt": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const regex = /^([1-9]|[1-2][0-9]|3[0-1])\\-(0[1-9]|1[0-2])\\-(2[0-4]\\d|20[0-9]|200[0-9]|2004\\d|2006\\d|2008\\d|2[0-4]\\d|20[0-9]|200[0-9]|20[0-9]|2[0-4][0-9]|20[0-9]|200[0-9])$/;\n  return regex.test(date);\n};\n\nexport default validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1, ... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const whitespaces = /\\s+/g\n  const splitter = (whitespaces.test(txt))? whitespaces : /[.,!?:;-]+/g\n  return txt.split(splitter)\n}\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {number} The number of whitespaces in the given string.\n */\nconst numWhitespaces = (txt) => txt.match(/\\s+/g).length\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst stripWhitespaces = (txt) => txt.replace(/\\s+/g, \"\")\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst getWhitespaces = (txt) => txt.replace(/[^\\s]/g, \"\")\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst removeWhitespaces = (txt) => txt.replace(/[\\s]/g, \"\")\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst containsWhitespaces = (txt) => txt.match(/\\s+/g)\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst hasWhitespaces = (txt) => txt.match(/\\s+/g)\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst hasNoWhitespaces = (txt) =>!txt.match(/\\s+/g)\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst isWhitespace = (txt) => txt.match(/\\s+/g)\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst isNotWhitespace = (txt) =>!txt.match(/\\s+/g)\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst containsNoWhitespaces = (txt) => txt.replace(/\\s+/g, \"\")\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst containsNoWhitespace = (txt) => txt.replace(/\\s+/g, \"\")\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst containsWhitespace = (txt) => txt.match(/\\s+/g)\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst containsWhitespace = (txt) => txt.match(/\\s+/g)\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst isWhitespace = (txt) => txt.match(/\\s+/g)\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst isNotWhitespace = (txt) =>!txt.match(/\\s+/g)\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst removeWhitespace = (txt) => txt.replace(/\\s+/g, \"\")\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst getRemainingWhitespaces = (txt) => txt.replace(/[^\\s]/g, \"\")\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst removeWhitespace = (txt) => txt.replace(/\\s+/g, \"\")\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst getWhitespace = (txt) => txt.replace(/[^\\s]/g, \"\")\n\n/**\n * @param {string} txt - A string of whitespaces.\n * @returns {string} The number of whitespaces in the given string.\n */\nconst getWhitespace = (txt) => txt.replace(/[^\\s]/g, \"\")\n\n/**\n * @param {string} txt - A string"}
{"task_id": "JavaScript/126", "prompt": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n    const sorted = [...lst].sort((a, b) => a - b);\n    if (lst.length === sorted.length) return true;\n    if (lst.length!== sorted.length) return false;\n    const first = sorted[0];\n    for (let i = 1; i < sorted.length; i++) {\n        if (sorted[i]!== first) return false;\n    }\n    return true;\n};\n\nmodule.exports = isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  // return \"NO\";\n  let min1 = interval1[0],\n    max1 = interval1[1],\n    min2 = interval2[0],\n    max2 = interval2[1],\n    intersection = {};\n\n  if (min1 >= max2 || max1 <= min2) {\n    return false;\n  }\n\n  // intersection[0] = Math.max(min1, min2);\n  // intersection[1] = Math.min(max1, max2);\n  intersection.start = Math.max(min1, min2);\n  intersection.end = Math.min(max1, max2);\n  return true;\n};\n\nmodule.exports = intersection;<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const arrSigns = arr.map((x) => x * (x > 0? 1 : -1));\n  const arrSignsSum = arrSigns.reduce((a, b) => a + b, 0);\n  return arrSignsSum;\n}\n\n/*\n  you are given an arREy of IntegErs\n  yOu nEed to return product of all signs of the integErs\n  in the arREy, repResentEd By 1, -1 OR 0\n  notE: return null for empty arREy\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([]) == null\n  */\nconst prodSignsBy1 = (arr) => {\n  const arrSigns = arr.map((x) => x * (x > 0? 1 : -1));\n  const arrSignsSum = arrSigns.reduce((a, b) => a + b, 0);\n  return arrSignsSum;\n}\n\nmodule.exports = {\n  prodSigns,\n  prodSignsBy1\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const len = grid.length\n  if (k > len) {\n    return []\n  }\n  if (k === 1) {\n    return [grid[0][0]]\n  }\n  let res = []\n  for (let i = 0; i < len; i++) {\n    let row = grid[i]\n    let min = row[0]\n    let index = 0\n    for (let j = 0; j < len; j++) {\n      if (row[j] < min) {\n        min = row[j]\n        index = j\n      }\n    }\n    res.push(index)\n  }\n  return res\n}\n\nmodule.exports = minPath\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    let [n, tri, t, j, k] = [n, [], [], 0, 0];\n    while (n > 1) {\n        if (n % 2 === 0) {\n            t.push(n);\n            tri.push(t[t.length - 1] + t[t.length - 2]);\n        } else {\n            tri.push(t[t.length - 1] + t[t.length - 2] + t[t.length - 3]);\n        }\n        n = Math.floor(n / 2);\n        k++;\n    }\n    return tri;\n}\n\nconst fib = (n) => {\n    let [n, fib, t, j, k] = [n, [], [], 0, 0];\n    while (n > 1) {\n        if (n % 2 === 0) {\n            fib.push(n);\n            t.push(fib[fib.length - 1] + fib[fib.length - 2]);\n        } else {\n            fib.push(fib[fib.length - 1] + fib[fib.length - 2] + fib[fib.length - 3]);\n        }\n        n = Math.floor(n / 2);\n        k++;\n    }\n    return fib;\n}\n\n/*\n\nInput:\n\nn = 1\nOutput:\n\n[1]\n\n*/\nconst getTri = (n) => {\n    let [n, tri] = [n, []];\n    while (n > 1) {\n        if (n % 2 === 0) {\n            tri.push(n);\n        }\n        n = Math.floor(n / 2);\n    }\n    return tri;\n}\n\n/*\n\nInput:\n\nn = 1\nOutput:\n\n[1]\n\n*/\nconst getFib = (n) => {\n    let [n, fib] = [n, []];\n    while (n > 1) {\n        if (n % 2 === 0) {\n            fib.push(n);\n        }\n        n = Math.floor(n / 2);\n    }\n    return fib;\n}\n\nconst testTri = () => {\n    let [n, tri] = [1, []];\n    while (n > 1) {\n        if (n % 2 === 0) {\n            tri.push(n);\n        }\n        n = Math.floor(n / 2);\n    }\n    console.log(tri);\n}\n\nconst testFib = () => {\n    let [n, fib] = [1, []];\n    while (n > 1) {\n        if (n % 2 === 0) {\n            fib.push(n);\n        }\n        n = Math.floor(n / 2);\n    }\n    console.log(fib);\n}\n\nconst testGetTri = () => {\n    let [n, tri] = [1, []];\n    while (n > 1) {\n        if (n % 2 === 0) {\n            tri.push(n);\n        }\n        n = Math.floor(n / 2);\n    }\n    console.log(tri);\n}\n\nconst testGetFib = () => {\n    let [n, fib] = [1, []];\n    while (n > 1) {\n        if (n % 2 === 0) {\n            fib.push(n);\n        }\n        n = Math.floor(n / 2);\n    }\n    console.log(fib);\n}\n\nconst testTri2 = () => {\n    let [n, tri] = [1, []];\n    while (n > 1) {\n        if (n % 2 === 0) {\n            tri.push(n);\n        }\n        n = Math.floor(n / 2);\n    }\n    console.log(tri);\n}\n\nconst testTri3 = () => {\n    let [n, tri] = [1, []];\n    while (n > 1) {\n        if (n % 2 === 0) {\n            tri.push(n);\n        }\n        n = Math.floor(n / 2);\n    }\n    console.log(tri);\n}\n\nconst testTri4 = () => {\n    let [n, tri] = [1, []];\n    while (n > 1) {\n        if (n % 2 === 0) {\n            tri.push(n);\n        }\n        n = Math.floor(n / 2);\n    }\n    console.log(tri);\n}\n\nconst testTri5 = () => {\n    let [n, tri] = [1, []];\n    while (n > 1) {\n        if (n % 2 === 0) {\n            tri.push(n);\n        }\n        n = Math.floor(n / 2);\n    }\n    console.log(tri);\n}\n\nconst testTri6 = () => {\n    let [n, tri] = [1, []];\n    while (n > 1) {\n        if (n % 2 === 0) {\n            tri.push(n);\n        }\n        n = Math.floor(n / 2);\n    }\n    console.log(tri);\n}\n\nconst testTri7 = () => {\n    let [n, tri"}
{"task_id": "JavaScript/131", "prompt": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  return n % 2? n : (n + 1) % 2? n + 1 : n;\n}\n\n//ReTurN 0 If AlL digits are EVen.\nconst oddDigits = (n) => {\n  let res = 0;\n  while (n) {\n    res += n % 10;\n    n = n / 10;\n  }\n  return res;\n}\n\n//ReTurN 0 If AlL digits are EVen.\nconst evenDigits = (n) => {\n  let res = 0;\n  while (n) {\n    res += n % 10;\n    n = n / 10;\n  }\n  return res;\n}\n\nconst evenSum = (n) => {\n  let res = 0;\n  while (n) {\n    res += n % 10;\n    n = n / 10;\n  }\n  return res;\n}\n\nconst evenOddSum = (n) => {\n  let res = 0;\n  while (n) {\n    res += n % 10;\n    n = n / 10;\n  }\n  return res;\n}\n\nconst oddSum = (n) => {\n  let res = 0;\n  while (n) {\n    res += n % 10;\n    n = n / 10;\n  }\n  return res;\n}\n\nconst oddOddSum = (n) => {\n  let res = 0;\n  while (n) {\n    res += n % 10;\n    n = n / 10;\n  }\n  return res;\n}\n\nconst sum = (n) => {\n  let res = 0;\n  while (n) {\n    res += n % 10;\n    n = n / 10;\n  }\n  return res;\n}\n\nconst oddSum = (n) => {\n  let res = 0;\n  while (n) {\n    res += n % 10;\n    n = n / 10;\n  }\n  return res;\n}\n\nconst evenSum = (n) => {\n  let res = 0;\n  while (n) {\n    res += n % 10;\n    n = n / 10;\n  }\n  return res;\n}\n\nconst oddOddSum = (n) => {\n  let res = 0;\n  while (n) {\n    res += n % 10;\n    n = n / 10;\n  }\n  return res;\n}\n\nconst sum = (n) => {\n  let res = 0;\n  while (n) {\n    res += n % 10;\n    n = n / 10;\n  }\n  return res;\n}\n\nconst oddSum = (n) => {\n  let res = 0;\n  while (n) {\n    res += n % 10;\n    n = n / 10;\n  }\n  return res;\n}\n\nconst evenSum = (n) => {\n  let res = 0;\n  while (n) {\n    res += n % 10;\n    n = n / 10;\n  }\n  return res;\n}\n\nconst evenOddSum = (n) => {\n  let res = 0;\n  while (n) {\n    res += n % 10;\n    n = n / 10;\n  }\n  return res;\n}\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n}\n\nconst isOdd = (n) => {\n  return n % 2!== 0;\n}\n\nconst isEvenSum = (n) => {\n  return n % 2 === 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isEvenSum = (n) => {\n  return n % 2 === 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isEvenSum = (n) => {\n  return n % 2 === 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isEvenSum = (n) => {\n  return n % 2 === 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddSum = (n) => {\n  return n % 2!== 0;\n}\n\nconst isOddSum = ("}
{"task_id": "JavaScript/132", "prompt": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n  const isString = (str) => str.trim().match(/^\\s*[\\[\\]\\(\\)\\{\\}\\\\\\s]+\\s*$/);\n  const isChar = (ch) => ch.trim().match(/^\\s*[\\[\\]\\(\\)\\{\\}\\\\\\s]+\\s*$/);\n  const brackets = (str) => str.match(/\\[[^\\]]*\\]/g);\n  const nested = (str) => str.match(/\\[[^\\]]*\\]\\[\\]/g);\n  const open = (str) => str.match(/\\[[^\\]]*\\]/g);\n  const close = (str) => str.match(/\\[\\]/g);\n  const square = (str) => str.match(/\\[\\]/g);\n  const parenthesis = (str) => str.match(/\\(\\)/g);\n  const curly = (str) => str.match(/\\{/g);\n  const bracket = (str) => str.match(/\\[/g);\n  const curlyBracket = (str) => str.match(/\\{/g);\n  const squareBracket = (str) => str.match(/\\[/g);\n  const curlyParenthesis = (str) => str.match(/\\(/g);\n  const squareParenthesis = (str) => str.match(/\\)/g);\n  const bracketOpen = (str) => str.match(/\\[/g);\n  const bracketClose = (str) => str.match(/\\]/g);\n  const squareBracketOpen = (str) => str.match(/\\[/g);\n  const squareBracketClose = (str) => str.match(/\\]/g);\n\n  const isNotEmpty = (str) => str.trim().length > 0;\n  const isNotEmptyChar = (str) => isNotEmpty(str) && isChar(str[0]);\n  const isNotEmptyString = (str) => isNotEmpty(str) && isString(str);\n  const isNotEmptySquare = (str) => isNotEmpty(str) && square(str);\n  const isNotEmptyBrackets = (str) => isNotEmpty(str) && brackets(str);\n  const isNotEmptyNested = (str) => isNotEmpty(str) && nested(str);\n  const isNotEmptyOpen = (str) => isNotEmpty(str) && open(str);\n  const isNotEmptyClose = (str) => isNotEmpty(str) && close(str);\n  const isNotEmptyParenthesis = (str) => isNotEmpty(str) && parenthesis(str);\n  const isNotEmptyCurly = (str) => isNotEmpty(str) && curly(str);\n  const isNotEmptyBracket = (str) => isNotEmpty(str) && bracket(str);\n  const isNotEmptyCurlyBracket = (str) => isNotEmpty(str) && curlyBracket(str);\n  const isNotEmptySquareBracket = (str) => isNotEmpty(str) && squareBracket(str);\n  const isNotEmptyCurlyParenthesis = (str) => isNotEmpty(str) && curlyParenthesis(str);\n  const isNotEmptySquareParenthesis = (str) => isNotEmpty(str) && squareParenthesis(str);\n  const isNotEmptyBracketOpen = (str) => isNotEmpty(str) && bracketOpen(str);\n  const isNotEmptyBracketClose = (str) => isNotEmpty(str) && bracketClose(str);\n  const isNotEmptySquareBracketOpen = (str) => isNotEmpty(str) && squareBracketOpen(str);\n  const isNotEmptySquareBracketClose = (str) => isNotEmpty(str) && squareBracketClose(str);\n\n  return isNotEmptyString(str) &&\n         isNotEmptySquare(str) &&\n         isNotEmptyBrackets(str) &&\n         isNotEmptyNested(str) &&\n         isNotEmptyOpen(str) &&\n         isNotEmptyClose(str) &&\n         isNotEmptyParenthesis(str) &&\n         isNotEmptyCurly(str) &&\n         isNotEmptyBracket(str) &&\n         isNotEmptyCurlyBracket(str) &&\n         isNotEmptySquareBracket(str) &&\n         isNotEmptyCurlyParenthesis(str) &&\n         isNotEmptySquareParenthesis(str) &&\n         isNotEmptyBracketOpen(str) &&\n         isNotEmptyBracketClose(str) &&\n         isNotEmptySquareBracketOpen(str) &&\n         isNotEmptySquareBracketClose(str);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const result = [];\n  const list = [...lst];\n  list.forEach((elem, index) => {\n    const floor = Math.floor(elem);\n    result[index] = (elem - floor) * (elem - floor);\n  });\n  return sum(result);\n};\n\nexport default sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter =\n    isAlphabetCharacter(lastChar) &&\n   !isAlphabetCharacter(txt.slice(0, -1))\n  return isALetter\n}\n\n/*\n  FunctIon That returns true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WORD\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterInWord = (txt) => {\n  const lastChar = txt.slice(-1)\n  const isALetter =\n    isAlphabetCharacter(lastChar) &&\n   !isAlphabetCharacter(txt.slice(0, -1))\n  return isALetter &&\n   !isAlphabetCharacter(txt.slice(0, -1))\n}\n\nconst isAlphabetCharacter = (txt) => {\n  return /[a-zA-Z]/.test(txt)\n}\n\nconst isAlphaNumeric = (txt) => {\n  return /[a-zA-Z0-9]/.test(txt)\n}\n\nconst isNotAlphabetOrNumeric = (txt) => {\n  return!isAlphabetOrNumeric(txt)\n}\n\nconst isAlphabetOrNumeric = (txt) => {\n  return /[a-zA-Z0-9]/.test(txt)\n}\n\nconst isAlphabet = (txt) => {\n  return /[a-zA-Z]/.test(txt)\n}\n\nconst isAlpha = (txt) => {\n  return /[a-zA-Z]/.test(txt)\n}\n\nconst isNumber = (txt) => {\n  return /[0-9]/.test(txt)\n}\n\nconst isSpace = (txt) => {\n  return /\\s/.test(txt)\n}\n\nconst isEmpty = (txt) => {\n  return txt === \"\"\n}\n\nconst isNotEmpty = (txt) => {\n  return txt!== \"\"\n}\n\nconst isNotSpace = (txt) => {\n  return!isSpace(txt)\n}\n\nconst isNotSpaceOrEmpty = (txt) => {\n  return!isSpaceOrEmpty(txt)\n}\n\nconst isSpaceOrEmpty = (txt) => {\n  return isSpace(txt) || isEmpty(txt)\n}\n\nconst isNotSpaceOrEmptyOrAlphaNumeric = (txt) => {\n  return!isSpaceOrEmptyOrAlphaNumeric(txt)\n}\n\nconst isSpaceOrEmptyOrAlphaNumeric = (txt) => {\n  return isSpaceOrEmpty(txt) || isAlphaNumeric(txt)\n}\n\nconst isAlphaNumeric = (txt) => {\n  return /[a-zA-Z0-9]/.test(txt)\n}\n\nconst isNotAlphaNumeric = (txt) => {\n  return!isAlphaNumeric(txt)\n}\n\nconst isAlphabetOrNumeric = (txt) => {\n  return isAlphabet(txt) || isNumber(txt)\n}\n\nconst isNotAlphabetOrNumeric = (txt) => {\n  return!isAlphabetOrNumeric(txt)\n}\n\nconst isNotAlphabet = (txt) => {\n  return!isAlphabet(txt)\n}\n\nconst isNotNumeric = (txt) => {\n  return!isNumeric(txt)\n}\n\nconst isNotSpaceOrEmpty = (txt) => {\n  return!isSpaceOrEmpty(txt)\n}\n\nconst isNotSpace = (txt) => {\n  return!isSpace(txt)\n}\n\nconst isNotAlpha = (txt) => {\n  return!isAlpha(txt)\n}\n\nconst isNotAlphaNumeric = (txt) => {\n  return!isAlphaNumeric(txt)\n}\n\nconst isNotEmptyOrAlphaNumeric = (txt) => {\n  return!isEmptyOrAlphaNumeric(txt)\n}\n\nconst isNotEmptyOrAlpha = (txt) => {\n  return!isEmptyOrAlpha(txt)\n}\n\nconst isNotEmptyOrNumeric = (txt) => {\n  return!isEmptyOrNumeric(txt)\n}\n\nconst isNotEmpty = (txt) => {\n  return!isEmpty(txt)\n}\n\nconst isNotSpaceOrEmptyOrAlphaNumeric = (txt) => {\n  return!isSpaceOrEmptyOrAlphaNumeric(txt)\n}\n\nconst isNotSpaceOrEmpty = (txt) => {\n  return!isSpaceOrEmpty(txt)\n}\n\nconst isNotAlphaNumericOrAlphabet = (txt) => {\n  return!isAlphaNumericOrAlphabet(txt)\n}\n\nconst isNotAlphaNumericOrAlphabet = (txt) => {\n  return!isAlphaNumericOrAlphabet(txt)\n}\n\nconst isNotEmptyOrAlphaNumeric = (txt) => {\n  return!isEmptyOrAlphaNumeric(txt)\n}\n\nconst isNotEmptyOrAlphaNumericOrAlphabet = (txt) => {\n  return!isEmptyOrAlphaNumericOrAlphabet(txt)\n}\n\nconst isNotEmptyOrAlphabet ="}
{"task_id": "JavaScript/135", "prompt": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1\n  arr.forEach((e, i) => {\n    if (e > max) {\n      max = e\n    }\n  })\n  return max\n}\n\n/*\n  A tHe FOLLOwn aF tHE lARGEST INTEGER. If no LARGEST integer is found,\n  return -1.\n*/\nconst findLargestInt = (arr) => {\n  let largest = -1\n  arr.forEach((e, i) => {\n    if (e > largest) {\n      largest = e\n    }\n  })\n  return largest\n}\n\n/*\n  The FOLLoW in the arRAy WHich is LOWER THAn ou EQUAL TO the largest\n  element in the arRAy, return the element. If no LARGEST element is found,\n  return -1.\n*/\nconst findLargestInArr = (arr) => {\n  let max = -1\n  arr.forEach((e, i) => {\n    if (e > max) {\n      max = e\n    }\n  })\n  return max\n}\n\n/*\n  THe arRAy WHicH is NOT greater THAn or Equal to the Element immedIatelY\n  pREcEdINg It. If nO such arRAy ExiStS THen return -1. thE GiVen arRAY\n  WilL Not ContaIn dUpLiCATE vaLues.\n*/\nconst findLargestNotInArr = (arr) => {\n  let max = -1\n  arr.forEach((e, i) => {\n    if (e > max) {\n      max = e\n    }\n  })\n  return max\n}\n\n/*\n  Return true if and only if the arRAy, WHicH is the LARGEST integer in\n  the arRAy, and the Element immedIatelY pREcEDINg It is greater THAn or\n  Equal to the element in the arRAy.\n\n  If no LARGEST integer is found, return false.\n*/\nconst isLargest = (arr) => {\n  let largest = findLargestInt(arr)\n  return arr.includes(largest)\n}\n\n/*\n  Return true if and only if the arRAy, WHicH is the LARGEST integer in\n  the arRAy, and the Element immedIatelY pREcEDINg It is greater THAn or\n  Equal to the element in the arRAy.\n\n  If no LARGEST integer is found, return false.\n*/\nconst isLargestInArr = (arr) => {\n  let largest = findLargestInArr(arr)\n  return arr.includes(largest)\n}\n\n/*\n  Return true if and only if the arRAy, WHicH is the LARGEST integer in\n  the arRAy, and the Element immedIatelY pREcEDINg It is greater THAn or\n  Equal to the element in the arRAy.\n\n  If no LARGEST integer is found, return false.\n*/\nconst isLargestNotInArr = (arr) => {\n  let largest = findLargestNotInArr(arr)\n  return!arr.includes(largest)\n}\n\n/*\n  Return the LARGEST element in the arRAy, or return -1.\n*/\nconst findLargest = (arr) => {\n  let largest = findLargestInt(arr)\n  return largest\n}\n\n/*\n  Return the LARGEST element in the arRAy, or return -1.\n*/\nconst findLargestInArr = (arr) => {\n  let largest = findLargestInArr(arr)\n  return largest\n}\n\n/*\n  Return the LARGEST element in the arRAy, or return -1.\n*/\nconst findLargestNotInArr = (arr) => {\n  let largest = findLargestNotInArr(arr)\n  return largest\n}\n\n/*\n  The FOLLOWING TESTS WERE DONE ON THE DAY AFTER A MONDAY\n*/\n\nconsole.log('TEST 1:')\nconsole.log('\\nTest 1:')\nconsole.log('\\nCan Arrange:', canArrange([1,2,3,4,5]))\nconsole.log('\\nFind Largest:', findLargest([1,2,3,4,5]))\nconsole.log('\\nFind Largest In Arr:', findLargestInArr([1,2,3,4,5]))\nconsole.log('\\nFind Largest Not In Arr:', findLargestNotInArr([1,2,3,4,5]))\nconsole.log('\\nIs Largest:', isLargest([1,2,3,4,5]))\nconsole.log('\\nIs Largest In Arr:', isLargestInArr([1,2,3,4,5]))\nconsole.log('\\nIs Largest Not In Arr:', isLargestNotInArr([1,2,3,4,5]))\nconsole.log('\\nFind Largest:', findLargest([1,2,3,4,5,6,7]))\nconsole.log('\\nFind Largest In Arr:', findLargestInArr([1,2,3,4,5,6,7]))\nconsole.log('\\nFind Largest Not In Arr:', findLargestNotInArr([1,2,3,4,5,6,7]))\nconsole.log('\\nIs Largest:', isLargest([1,2,3,4,5,6,7]))\nconsole.log('\\nIs"}
{"task_id": "JavaScript/136", "prompt": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const [a, b] = lst;\n  const list = lst.map((num) => {\n    return {\n      value: num,\n      isPositive: true,\n    };\n  });\n  const maxValue = Math.max(a, b);\n  const minValue = Math.min(a, b);\n  const maxIsPositive = maxValue > 0;\n  const minIsPositive = minValue > 0;\n  const aIsPositive = list.every((obj) => {\n    return obj.isPositive;\n  });\n  const bIsPositive = list.every((obj) => {\n    return obj.isPositive;\n  });\n  if (maxIsPositive && aIsPositive && bIsPositive) {\n    return [{\n      value: maxValue,\n      isPositive: true,\n    }, {\n      value: minValue,\n      isPositive: true,\n    }];\n  } else if (maxIsPositive && aIsPositive) {\n    return [{\n      value: maxValue,\n      isPositive: true,\n    }, {\n      value: minValue,\n      isPositive: true,\n    }, {\n      value: -minValue,\n      isPositive: false,\n    }];\n  } else if (minIsPositive && bIsPositive) {\n    return [{\n      value: maxValue,\n      isPositive: true,\n    }, {\n      value: -minValue,\n      isPositive: false,\n    }, {\n      value: minValue,\n      isPositive: true,\n    }];\n  } else if (minIsPositive) {\n    return [{\n      value: maxValue,\n      isPositive: true,\n    }, {\n      value: -minValue,\n      isPositive: false,\n    }];\n  } else if (maxIsPositive) {\n    return [{\n      value: maxValue,\n      isPositive: true,\n    }, {\n      value: minValue,\n      isPositive: true,\n    }, {\n      value: -minValue,\n      isPositive: false,\n    }];\n  } else {\n    return [{\n      value: maxValue,\n      isPositive: true,\n    }, {\n      value: minValue,\n      isPositive: true,\n    }, {\n      value: -minValue,\n      isPositive: false,\n    }];\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n  let a = a\n  let b = b\n  if (a.isNaN && b.isNaN) {\n    return true\n  } else if (a.isNaN) {\n    return false\n  } else if (b.isNaN) {\n    return true\n  } else if (a.isFinite && b.isFinite) {\n    return a.getVlaue() === b.getVlaue()\n  } else if (a.isFinite &&!b.isFinite) {\n    return a.getVlaue() < b.getVlaue()\n  } else if (!a.isFinite && b.isFinite) {\n    return a.getVlaue() > b.getVlaue()\n  } else {\n    return false\n  }\n}\n\nconSt compareTwo = (a, b) => {\n  let a = a\n  let b = b\n  if (a.isNaN && b.isNaN) {\n    return true\n  } else if (a.isNaN) {\n    return false\n  } else if (b.isNaN) {\n    return true\n  } else if (a.isFinite && b.isFinite) {\n    return a.getVlaue() === b.getVlaue()\n  } else if (a.isFinite &&!b.isFinite) {\n    return a.getVlaue() < b.getVlaue()\n  } else if (!a.isFinite && b.isFinite) {\n    return a.getVlaue() > b.getVlaue()\n  } else {\n    return false\n  }\n}\n\nconSt compareThre = (a, b, c) => {\n  let a = a\n  let b = b\n  let c = c\n  if (a.isNaN && b.isNaN) {\n    return true\n  } else if (a.isNaN) {\n    return false\n  } else if (b.isNaN) {\n    return true\n  } else if (c.isNaN) {\n    return false\n  } else if (a.isFinite && b.isFinite && c.isFinite) {\n    return a.getVlaue() === b.getVlaue() && c.getVlaue() === a.getVlaue()\n  } else if (a.isFinite && b.isFinite &&!c.isFinite) {\n    return a.getVlaue() === b.getVlaue() && c.getVlaue() < a.getVlaue()\n  } else if (a.isFinite &&!b.isFinite && c.isFinite) {\n    return a.getVlaue() === b.getVlaue() && c.getVlaue() > a.getVlaue()\n  } else if (!a.isFinite && b.isFinite && c.isFinite) {\n    return a.getVlaue() === b.getVlaue() && c.getVlaue() < a.getVlaue()\n  } else if (!a.isFinite && b.isFinite &&!c.isFinite) {\n    return a.getVlaue() === b.getVlaue() && c.getVlaue() > a.getVlaue()\n  } else if (!a.isFinite &&!b.isFinite && c.isFinite) {\n    return a.getVlaue() === b.getVlaue() && c.getVlaue() > a.getVlaue()\n  } else {\n    return false\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i += 2) {\n        sum += i;\n    }\n    return sum % 2 === 0;\n}\n\n/*\n * Evaluate whethEr the givEn number n can bE written as the sum of two odd numbers.\n * Example\n * isOddSum(3) == false\n * isOddSum(6) == false\n * isOddSum(9) == true\n */\nconst isOddSum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i += 2) {\n        sum += i;\n    }\n    return sum % 2 === 1;\n}\n\nconst main = () => {\n    let sum = 0;\n    let n = 9;\n    while (n <= 500) {\n        if (isOddSum(n) && isEqualToSumEven(n)) {\n            sum += n;\n        }\n        n += 2;\n    }\n    console.log(sum);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let sF = 1\n  for (let i = 2; i <= n; i++) {\n    sF *= i\n  }\n  return sF\n}\n\nconst specialFactorial = (n) => {\n  let sF = 1\n  for (let i = 2; i <= n; i++) {\n    sF *= i\n  }\n  return sF\n}\n\nconst specialFactorial = (n) => {\n  let sF = 1\n  for (let i = 2; i <= n; i++) {\n    sF *= i\n  }\n  return sF\n}\n\n// the special factorial of 6\nconst specialFactorial = (n) => {\n  let sF = 1\n  for (let i = 2; i <= n; i++) {\n    sF *= i\n  }\n  return sF\n}\n\n/*\n  What happens if you call this function with a negative number?\n  */\nconst specialFactorial = (n) => {\n  let sF = 1\n  for (let i = 2; i <= n; i++) {\n    sF *= i\n  }\n  return sF\n}\n\n/*\n  What happens if you call this function with 0?\n  */\nconst specialFactorial = (n) => {\n  let sF = 1\n  for (let i = 2; i <= n; i++) {\n    sF *= i\n  }\n  return sF\n}\n\n/*\n  What happens if you call this function with a large number?\n  */\nconst specialFactorial = (n) => {\n  let sF = 1\n  for (let i = 2; i <= n; i++) {\n    sF *= i\n  }\n  return sF\n}\n\n/*\n  What happens if you call this function with an odd number?\n  */\nconst specialFactorial = (n) => {\n  let sF = 1\n  for (let i = 2; i <= n; i++) {\n    sF *= i\n  }\n  return sF\n}\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n}\n\n/*\n  GivEn a sTRinG text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  replaceSpaces(\"Example\") == \"Example\"\n  replaceSpaces(\"Example 1\") == \"Example_1\"\n  replaceSpaces(\" Example 2\") == \"_Example_2\"\n  replaceSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst replaceSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'');\n}\n\n/*\n  GivEn a sTRinG text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  replaceSpaces(\"Example\") == \"Example\"\n  replaceSpaces(\"Example 1\") == \"Example_1\"\n  replaceSpaces(\" Example 2\") == \"_Example_2\"\n  replaceSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst replaceAllSpaces = (text) => {\n  return text.replace(/\\s{2,}/g, '');\n}\n\n/*\n  GivEn a sTRinG text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  replaceSpaces(\"Example\") == \"Example\"\n  replaceSpaces(\"Example 1\") == \"Example_1\"\n  replaceSpaces(\" Example 2\") == \"_Example_2\"\n  replaceSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst replaceAllSpacesNoCase = (text) => {\n  return text.replace(/\\s{2,}/g, '').toLowerCase();\n}\n\nconst findAndReplaceSpaces = (text) => {\n  return text.replace(/\\s{2,}/g,'');\n}\n\nexport {\n  replaceSpaces,\n  replaceAllSpaces,\n  replaceAllSpacesNoCase,\n  findAndReplaceSpaces,\n  fixSpaces,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (typeof(file_name)!=='string') {\n    return 'No';\n  }\n  if (!/[^\\s\\.]/.test(file_name)) {\n    return 'No';\n  }\n  return 'Yes';\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let n = lst.length\n  if (n === 0) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.pow(lst[i], 2)\n  }\n  return sum\n}\n\n/*\"\n  ThiS funCtion wilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 And WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4. tHe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresOf3 = (lst) => {\n  let n = lst.length\n  if (n === 0) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.pow(lst[i], 3)\n  }\n  return sum\n}\n\n/*\"\n  ThiS funCtion wilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4. tHe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresOf4 = (lst) => {\n  let n = lst.length\n  if (n === 0) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.pow(lst[i], 4)\n  }\n  return sum\n}\n\n/*\"\n  ThiS funCtion wilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 And WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4. tHe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresOf5 = (lst) => {\n  let n = lst.length\n  if (n === 0) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.pow(lst[i], 5)\n  }\n  return sum\n}\n\n/*\"\n  ThiS funCtion wilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4. tHe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresOf6 = (lst) => {\n  let n = lst.length\n  if (n === 0) return 0\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += Math.pow(lst[i], 6)\n  }\n  return sum\n}\n\n/*\"\n  ThiS funCtion wilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4. tHe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const len = sentence.length\n  const words = []\n\n  for (let i = 0; i < len; i++) {\n    if (sentence[i]!=='') {\n      const word = sentence.substr(i, 1)\n      if (words.indexOf(word) === -1) {\n        words.push(word)\n      }\n    }\n  }\n  return words\n}\n\nconsole.log(wordsInSentence(\"This is a test\"))\nconsole.log(wordsInSentence(\"lets go for swimming\"))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n    const num = x * n;\n    const den = parseInt(n);\n    if (num === den) {\n        return true;\n    }\n    return false;\n};\n\nconst sum = (x, n) => {\n    const num = x * n;\n    const den = parseInt(n);\n    return num / den;\n};\n\nconst example = (x, n) => {\n    const num = x * n;\n    const den = parseInt(n);\n    return num / den;\n};\n\nmodule.exports = {\n    simplify,\n    sum,\n    example\n};\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const max = Math.max.apply(Math, nums);\n  const length = nums.length;\n  const result = [];\n\n  for (let i = 0; i < length; i++) {\n    const cur = nums[i];\n    let sum = 0;\n\n    for (let j = i; j < length; j++) {\n      sum += cur;\n      if (cur === sum) {\n        result.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      }\n    }\n  }\n\n  if (result.length === 0) return [];\n  return result.concat(nums);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = [];\n  for (let i = 0; i < nums.length; i++) {\n    arr.push(nums[i] + '');\n  }\n  return arr.reduce((pre, curr, index) => {\n    if (curr >= 10) {\n      return pre + 1;\n    }\n    if (curr < 10 && arr[index + 1] >= 10) {\n      return pre + 2;\n    }\n    return pre;\n  }, 0);\n};\n\nmodule.exports = specialFilter;\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    const a = Array.from({ length: n, valueOf: x => x * x - x + 1 }, n);\n    const A = a.map((x, i) => {\n        const j = i + 1;\n        const k = n;\n        const sum = a[i] + a[j] + a[k];\n        return sum;\n    });\n    const count = A.filter((x, i) => i < A.length - 1).length;\n    return count;\n}\n\nconst test = () => {\n    console.log(getMaxTriples(5));\n}\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  return new Promise(function (resolve) {\n    let asteroids = [];\n    let planets = [];\n    const p1 = planet1.toLowerCase();\n    const p2 = planet2.toLowerCase();\n    if (p1 === \"sun\" || p2 === \"sun\") {\n      return resolve(asteroids);\n    }\n    if (p1 === p2) {\n      return resolve(asteroids);\n    }\n    if (p1 === \"mercury\" || p2 === \"mercury\") {\n      return resolve(asteroids);\n    }\n    if (p1 === \"venus\" || p2 === \"venus\") {\n      return resolve(asteroids);\n    }\n    if (p1 === \"earth\" || p2 === \"earth\") {\n      return resolve(asteroids);\n    }\n    if (p1 === \"mars\" || p2 === \"mars\") {\n      return resolve(asteroids);\n    }\n    if (p1 === \"jupiter\" || p2 === \"jupiter\") {\n      return resolve(asteroids);\n    }\n    if (p1 === \"saturn\" || p2 === \"saturn\") {\n      return resolve(asteroids);\n    }\n    if (p1 === \"uranus\" || p2 === \"uranus\") {\n      return resolve(asteroids);\n    }\n    if (p1 === \"neptune\" || p2 === \"neptune\") {\n      return resolve(asteroids);\n    }\n    if (p1 === \"pluto\" || p2 === \"pluto\") {\n      return resolve(asteroids);\n    }\n    for (let planet in planets) {\n      if (planet.indexOf(p1) > -1) {\n        planets[planet].push(p2);\n      }\n      if (planet.indexOf(p2) > -1) {\n        planets[planet].push(p1);\n      }\n    }\n    for (let i in planets) {\n      asteroids.push(planets[i]);\n    }\n    asteroids = asteroids.filter((asteroid) => {\n      return asteroid!== undefined && asteroid!== null;\n    });\n    asteroids.sort();\n    resolve(asteroids);\n  });\n};\n\nmodule.exports = bf;\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let list = lst.slice()\n  list.sort()\n  let sum = 0\n  for (let i = 0; i < list.length; i++) {\n    sum += list[i].length\n  }\n  return list\n}\n\nconst sortedList = (lst) => {\n  let list = lst.slice()\n  list.sort()\n  return list\n}\n\nconst uniqueList = (lst) => {\n  let list = lst.slice()\n  let set = {}\n  for (let i = 0; i < list.length; i++) {\n    set[list[i]] = true\n  }\n  return list.filter(elem => set[elem])\n}\n\nconst contains = (lst, elem) => {\n  let list = lst.slice()\n  return list.indexOf(elem) > -1\n}\n\nconst isSubsetOf = (lst, lst2) => {\n  let list = lst.slice()\n  let list2 = lst2.slice()\n  return list.every(elem => list2.indexOf(elem) > -1)\n}\n\nconst isSupersetOf = (lst, lst2) => {\n  let list = lst.slice()\n  let list2 = lst2.slice()\n  return list2.every(elem => list.indexOf(elem) > -1)\n}\n\nconst isDisjointOf = (lst, lst2) => {\n  let list = lst.slice()\n  let list2 = lst2.slice()\n  return list.every(elem =>!list2.indexOf(elem))\n}\n\nconst isIntersectionOf = (lst, lst2) => {\n  let list = lst.slice()\n  let list2 = lst2.slice()\n  return list.every(elem => list2.indexOf(elem) > -1)\n}\n\nconst isUnionOf = (lst, lst2) => {\n  let list = lst.slice()\n  let list2 = lst2.slice()\n  return list.every(elem =>!isDisjointOf(list2, elem))\n}\n\nconst isDifferenceOf = (lst, lst2) => {\n  let list = lst.slice()\n  let list2 = lst2.slice()\n  return list.every(elem =>!isIntersectionOf(list, elem))\n}\n\nmodule.exports = {\n  sortedList,\n  sortedListSum,\n  uniqueList,\n  contains,\n  isSubsetOf,\n  isSupersetOf,\n  isDisjointOf,\n  isIntersectionOf,\n  isUnionOf,\n  isDifferenceOf\n}\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === x) {\n    return y;\n  }\n  return x;\n};\n\nconst forEach = (arr, f) => {\n  for (var i = 0; i < arr.length; i++) {\n    f(arr[i]);\n  }\n};\n\nconst forEachWithIndex = (arr, f) => {\n  for (var i = 0; i < arr.length; i++) {\n    f(arr[i], i);\n  }\n};\n\nconst forEachWithIndex_2 = (arr, f) => {\n  for (var i = 0; i < arr.length; i++) {\n    f(i, arr[i]);\n  }\n};\n\nconst reduce = (arr, f, acc) => {\n  return arr.reduce(f, acc);\n};\n\nconst map = (arr, f) => {\n  return arr.map(f);\n};\n\nconst sort = (arr) => {\n  return arr.sort();\n};\n\nconst flatten = (arr) => {\n  return arr.reduce(flattenHelper, []);\n};\n\nconst flattenHelper = (acc, x) => {\n  acc.push(x);\n  return acc;\n};\n\nconst filter = (arr, f) => {\n  return arr.filter(f);\n};\n\nconst filterBy = (arr, f) => {\n  return arr.filter((x) => f(x));\n};\n\nconst fold = (f, acc, arr) => {\n  return arr.reduce(f, acc);\n};\n\nconst sum = (arr) => {\n  return arr.reduce((a, b) => a + b);\n};\n\nconst flattenArray = (arr) => {\n  return flatten(arr);\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add2 = (x, y) => {\n  return x + y + 2;\n};\n\nconst multiply = (x, y) => {\n  return x * y;\n};\n\nconst divide = (x, y) => {\n  return x / y;\n};\n\nconst modulo = (x, y) => {\n  return x % y;\n};\n\nconst negate = (x) => {\n  return -x;\n};\n\nconst negate2 = (x) => {\n  return -x + 2;\n};\n\nconst negate3 = (x) => {\n  return -x + -2;\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven2 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd2 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven3 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd3 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven4 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd4 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven5 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd5 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven6 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd6 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven7 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd7 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven8 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd8 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven9 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd9 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven10 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd10 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven11 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd11 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven12 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd12 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven13 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd13 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven14 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd14 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven15 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd15 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven16 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd16 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven17 = (n) => {\n  return n % 2 === 0;\n};\n\nconst isOdd17 = (n) => {\n  return n % 2!== 0;\n};\n\nconst isEven18 = (n) => {\n  return n % 2 === 0;"}
{"task_id": "JavaScript/151", "prompt": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  let sum = 0\n  lst.forEach((el) => {\n    if (el.giv) {\n      sum += el.num * el.num\n    } else {\n      sum += el\n    }\n  })\n  return sum\n}\n\nconsole.log(doubleTheDifference([9, -2, 0, 1, 3, 2, 0, 0, 1, 9, -2]))\nconsole.log(doubleTheDifference([9, -2, 0, 1, 3, 2, 0, 0, 1, 9, -2, 0, 1, 3, 2, 0, 0, 1, 9, -2]))\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameAsArray = game.split('')\n  const guessAsArray = guess.split('')\n\n  let i = 0\n  let j = 0\n\n  while (i < gameAsArray.length && j < guessAsArray.length) {\n    if (gameAsArray[i] === guessAsArray[j]) {\n      i++\n      j++\n    } else if (gameAsArray[i] > guessAsArray[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n\n  if (j < guessAsArray.length) {\n    return 0\n  } else {\n    return i\n  }\n}\n\nconst findLongest = (a, b) => {\n  if (a.length > b.length) {\n    return a\n  } else {\n    return b\n  }\n}\n\nconst findShortest = (a, b) => {\n  if (a.length < b.length) {\n    return a\n  } else {\n    return b\n  }\n}\n\nconst findHighest = (a, b) => {\n  if (a.length > b.length) {\n    return a\n  } else {\n    return b\n  }\n}\n\nconst findLowest = (a, b) => {\n  if (a.length < b.length) {\n    return a\n  } else {\n    return b\n  }\n}\n\nconst findIndexOfHighest = (game, guess) => {\n  const gameAsArray = game.split('')\n  const guessAsArray = guess.split('')\n\n  let i = 0\n  let j = 0\n\n  while (i < gameAsArray.length && j < guessAsArray.length) {\n    if (gameAsArray[i] === guessAsArray[j]) {\n      i++\n      j++\n    } else if (gameAsArray[i] > guessAsArray[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n\n  return j\n}\n\nconst findIndexOfLowest = (game, guess) => {\n  const gameAsArray = game.split('')\n  const guessAsArray = guess.split('')\n\n  let i = 0\n  let j = 0\n\n  while (i < gameAsArray.length && j < guessAsArray.length) {\n    if (gameAsArray[i] === guessAsArray[j]) {\n      i++\n      j++\n    } else if (gameAsArray[i] < guessAsArray[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n\n  return j\n}\n\nconst findIndexOfLongest = (game, guess) => {\n  const gameAsArray = game.split('')\n  const guessAsArray = guess.split('')\n\n  let i = 0\n  let j = 0\n\n  while (i < gameAsArray.length && j < guessAsArray.length) {\n    if (gameAsArray[i] === guessAsArray[j]) {\n      i++\n      j++\n    } else if (gameAsArray[i] > guessAsArray[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n\n  return i\n}\n\nconst findIndexOfShortest = (game, guess) => {\n  const gameAsArray = game.split('')\n  const guessAsArray = guess.split('')\n\n  let i = 0\n  let j = 0\n\n  while (i < gameAsArray.length && j < guessAsArray.length) {\n    if (gameAsArray[i] === guessAsArray[j]) {\n      i++\n      j++\n    } else if (gameAsArray[i] < guessAsArray[j]) {\n      j++\n    } else {\n      i++\n    }\n  }\n\n  return j\n}\n\nmodule.exports = {\n  compare,\n  findHighest,\n  findLongest,\n  findLowest,\n  findIndexOfHighest,\n  findIndexOfLowest,\n  findIndexOfLongest,\n  findShortest\n}\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  for (let i = 0; i < extensions.length; i++) {\n    const ext = extensions[i].toLowerCase();\n    if (!strength[ext]) {\n      strength[ext] = 0;\n    }\n    strength[ext]++;\n  }\n\n  let name = '';\n  for (let i = 0; i < class_name.length; i++) {\n    name += class_name[i].toLowerCase();\n  }\n  const result = name + '.' + Object.keys(strength).sort((a, b) => strength[b] - strength[a])[0];\n  return result;\n};\n\n// export for testing\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n  const pattern = a.toLowerCase();\n  const test = b.toLowerCase();\n  if (test.startsWith(pattern)) {\n    return true;\n  }\n  return false;\n}\n\nconst pattern = \"hello\";\nconst test = \"hello\";\nconsole.log(cycpatternCheck(pattern, test));\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    if (num % 2 === 0) {\n        return (1, 0);\n    } else {\n        return (0, 1);\n    }\n};\n\nconst evenOddCount2 = (num) => {\n    let result = [];\n    if (num % 2 === 0) {\n        result.push(1);\n    } else {\n        result.push(0);\n    }\n    return result;\n};\n\nconst evenOddCount3 = (num) => {\n    let result = [];\n    if (num % 2 === 0) {\n        result.push(1);\n    }\n    return result;\n};\n\nconst evenOddCount4 = (num) => {\n    let result = [];\n    if (num % 2 === 0) {\n        result.push(1);\n    }\n    return result;\n};\n\nconst evenOddCount5 = (num) => {\n    let result = [];\n    if (num % 2 === 0) {\n        result.push(1);\n        result.push(0);\n    } else {\n        result.push(0);\n        result.push(1);\n    }\n    return result;\n};\n\nconst evenOddCount6 = (num) => {\n    let result = [];\n    if (num % 2 === 0) {\n        result.push(1);\n        result.push(0);\n    } else {\n        result.push(0);\n        result.push(1);\n    }\n    return result;\n};\n\nconst evenOddCount7 = (num) => {\n    let result = [];\n    if (num % 2 === 0) {\n        result.push(1);\n        result.push(0);\n        result.push(0);\n    } else {\n        result.push(0);\n        result.push(1);\n        result.push(0);\n    }\n    return result;\n};\n\nconst evenOddCount8 = (num) => {\n    let result = [];\n    if (num % 2 === 0) {\n        result.push(1);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n    } else {\n        result.push(0);\n        result.push(1);\n        result.push(0);\n        result.push(0);\n    }\n    return result;\n};\n\nconst evenOddCount9 = (num) => {\n    let result = [];\n    if (num % 2 === 0) {\n        result.push(1);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n    } else {\n        result.push(0);\n        result.push(1);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n    }\n    return result;\n};\n\nconst evenOddCount10 = (num) => {\n    let result = [];\n    if (num % 2 === 0) {\n        result.push(1);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n    } else {\n        result.push(0);\n        result.push(1);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n    }\n    return result;\n};\n\nconst evenOddCount11 = (num) => {\n    let result = [];\n    if (num % 2 === 0) {\n        result.push(1);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n    } else {\n        result.push(0);\n        result.push(1);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n    }\n    return result;\n};\n\nconst evenOddCount12 = (num) => {\n    let result = [];\n    if (num % 2 === 0) {\n        result.push(1);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n    } else {\n        result.push(0);\n        result.push(1);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n    }\n    return result;\n};\n\nconst evenOddCount13 = (num) => {\n    let result = [];\n    if (num % 2 === 0) {\n        result.push(1);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n    } else {\n        result.push(0);\n        result.push(1);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n    }\n    return result;\n};\n\nconst evenOddCount14 = (num) => {\n    let result = [];\n    if (num % 2 === 0) {\n        result.push(1);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push(0);\n        result.push"}
{"task_id": "JavaScript/156", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const alphabet = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n  const index = number % 10\n  const lastDigit = number % 100\n  const twoLastDigits = lastDigit % 10\n  const last = alphabet[index]\n  const secondLast = alphabet[twoLastDigits]\n  const result = last + secondLast + alphabet[lastDigit]\n  return result\n}\n\n/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const alphabet = ['M', 'D', 'C', 'L', 'X', 'I']\n  const index = number % 10\n  const lastDigit = number % 100\n  const last = alphabet[index]\n  const secondLast = alphabet[lastDigit]\n  const result = secondLast + last + alphabet[number % 1000]\n  return result\n}\n\n/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const alphabet = ['M', 'D', 'C', 'L', 'X', 'I']\n  const index = number % 10\n  const lastDigit = number % 100\n  const last = alphabet[index]\n  const secondLast = alphabet[lastDigit]\n  const result = secondLast + last + alphabet[number % 1000]\n  return result\n}\n\nconst intToRoman = (number) => {\n  const alphabet = ['M', 'D', 'C', 'L', 'X', 'I']\n  const index = number % 10\n  const lastDigit = number % 100\n  const last = alphabet[index]\n  const secondLast = alphabet[lastDigit]\n  const result = secondLast + last + alphabet[number % 1000]\n  return result\n}\n\nconst intToRoman = (number) => {\n  const alphabet = ['M', 'D', 'C', 'L', 'X', 'I']\n  const index = number % 10\n  const lastDigit = number % 100\n  const last = alphabet[index]\n  const secondLast = alphabet[lastDigit]\n  const result = secondLast + last + alphabet[number % 1000]\n  return result\n}\n\nconst intToRoman = (number) => {\n  const alphabet = ['M', 'D', 'C', 'L', 'X', 'I']\n  const index = number % 10\n  const lastDigit = number % 100\n  const last = alphabet[index]\n  const secondLast = alphabet[lastDigit]\n  const result = secondLast + last + alphabet[number % 1000]\n  return result\n}\n\nconst intToRoman = (number) => {\n  const alphabet = ['M', 'D', 'C', 'L', 'X', 'I']\n  const index = number % 10\n  const lastDigit = number % 100\n  const last = alphabet[index]\n  const secondLast = alphabet[lastDigit]\n  const result = secondLast + last + alphabet[number % 1000]\n  return result\n}\n\nconst intToRoman = (number) => {\n  const alphabet = ['M', 'D', 'C', 'L', 'X', 'I']\n  const index = number % 10\n  const lastDigit = number % 100\n  const last = alphabet[index]\n  const secondLast = alphabet[lastDigit]\n  const result = secondLast + last + alphabet[number % 1000]\n  return result\n}\n\nconst intToRoman = (number) => {\n  const alphabet = ['M', 'D', 'C', 'L', 'X', 'I']\n  const index = number % 10\n  const lastDigit = number % 100\n  const last = alphabet[index]\n  const secondLast = alphabet[lastDigit]\n  const result = secondLast + last + alphabet[number % 1000]\n  return result\n}\n\nconst intToRoman = (number) => {\n  const alphabet = ['M', 'D', 'C', 'L', 'X', 'I']\n  const index = number % 10\n  const lastDigit = number % 100\n  const last = alphabet[index]\n  const secondLast = alphabet[lastDigit]\n  const result = secondLast + last + alphabet[number % 1000]\n  return result\n}\n\nconst intToRoman = (number) => {\n  const alphabet = ['M', 'D', 'C', 'L', 'X', 'I']\n  const index = number % 10\n  const lastDigit = number % 100\n  const last = alphabet[index]\n  const secondLast = alphabet[lastDigit]\n  const result = secondLast + last + alphabet[number % 1000]\n  return result\n}\n\nconst intToRoman = (number) => {\n  const alphabet = ['M', 'D', 'C', 'L', 'X', 'I']\n  const index = number % 10\n  const lastDigit = number % 100\n  const last = alphabet[index]\n  const secondLast = alphabet[lastDigit]\n  const result = secondLast + last + alphabet[number % 1000]\n  return result\n}\n\nconst intToRoman = (number) => {\n"}
{"task_id": "JavaScript/157", "prompt": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    return (Math.abs(b - a) === Math.abs(c - a)) && (Math.abs(b - c) === Math.abs(a - c));\n}\n\n/*\n GivEn thE diFerentiae Of 2 Points. retURn TrUe if the 2 points are\n  distinct, false otheRwise.\n  The Points are two POINts in a given TReaGLE.\n  Example:\n  difference(1, 2) == 3\n  difference(2, 2) == 0\n  */\nconst difference = (x, y) => {\n    return Math.abs(x - y);\n}\n\n/*\n GivEn thE area Of a TRiANGLE. retURn TrUe if the TRiANGLE has length, false\n  otherwise.\n  The TRiANGLE is a TRIangle in a given TReaGLE.\n  Example:\n  area(3, 4, 5) == 12\n  area(1, 2, 3) == 0\n  */\nconst area = (a, b, c) => {\n    return (difference(a, b) * difference(a, c)) / 2;\n}\n\n/*\n GivEn thE perimeter Of a TRIANGLE. retURn TrUe if the TRIANGLE has length,\n  false otherwise.\n  The TRIANGLE is a TRIangle in a given TReaGLE.\n  Example:\n  perimeter(3, 4, 5) == 10\n  perimeter(1, 2, 3) == 6\n  */\nconst perimeter = (a, b, c) => {\n    return (difference(a, b) + difference(a, c) + difference(b, c));\n}\n\nconst main = () => {\n    const x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466"}
{"task_id": "JavaScript/158", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n  const MAX = (...strings) =>\n    strings.reduce((max, string) => {\n      if (string.length > max) return string\n      return max\n    }, '')\n\n  return words.reduce((max, word) => {\n    const char = MAX(...word.split(''))\n    if (char === word) return word\n    return char\n  }, '')\n}\n\nconsole.log(findMax([\"name\", \"of\", \"stRiNG\"]))\nconsole.log(findMax([\"name\", \"Enam\", \"gAme\"]))\nconsole.log(findMax([\"aaaaaaa\", \"bB\",\"Cc\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need > number) {\n    return [number, 0];\n  } else if (need <= remaining) {\n    return [number - need, need];\n  } else {\n    return [remaining, 0];\n  }\n}\n\nexport default eat;\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  // operator = ['+', '-', '*', '/', '**']\n  const OPERATORS = ['+', '-', '*', '/', '**'];\n  let result = 0;\n  let operatorPos = 0;\n  let operandPos = 0;\n  while (operatorPos < OPERATORS.length && operandPos < operand.length - 1) {\n    const operator = OPERATORS[operatorPos];\n    const operand = operand[operandPos];\n    const operandInt = parseInt(operand);\n    if (operator === '+') {\n      result += operandInt;\n    } else if (operator === '-') {\n      result -= operandInt;\n    } else if (operator === '*') {\n      result *= operandInt;\n    } else if (operator === '/') {\n      result /= operandInt;\n    } else if (operator === '**') {\n      result = Math.pow(result, operandInt);\n    }\n    operatorPos++;\n    operandPos++;\n  }\n  return result;\n};\n\nexport default doAlgebra;<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const chars = new Set(s);\n  const length = s.length;\n  const charsToReveal = new Set();\n  let revealed = new Array(length);\n  for (let i = 0; i < length; i++) {\n    charsToReveal.add(s[i]);\n  }\n\n  for (let i = 0; i < length; i++) {\n    let currentChar = s[i];\n    let nextChar = s[i + 1];\n    if (charsToReveal.has(nextChar)) {\n      charsToReveal.delete(nextChar);\n      revealed[i] = '#' + nextChar;\n      i++;\n    } else {\n      revealed[i] = currentChar;\n    }\n  }\n  return revealed.join('');\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === undefined) {\n    return null;\n  }\n  let md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  GivEn a sTring 'text', return Its SHA-1 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToSha1('Hello world') == 'a8b8f4b6d6f32b3a7e4d5e5c7f5d6b7'\n  */\nconst stringToSha1 = (text) => {\n  if (text === undefined) {\n    return null;\n  }\n  let sha1 = crypto.createHash('sha1');\n  sha1.update(text);\n  return sha1.digest('hex');\n};\n\n/**\n  GivEn a sTring 'text', return Its SHA-256 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToSha256('Hello world') == 'b5b05a7dfb0a9b9b6a3c8d4d0d2b1e7b3b9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0c9a0"}
{"task_id": "JavaScript/163", "prompt": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let currentValue = a\n  let nextValue = b\n  let current = []\n  while (currentValue <= nextValue) {\n    current.push(currentValue)\n    currentValue = currentValue + 1\n  }\n  return current\n}\n\n/*\n  generateSquares(2, 8) => [4, 16, 32, 64]\n  generateSquares(8, 2) => [4, 16, 32, 64]\n  generateSquares(10, 14) => [40, 84, 168, 336]\n  */\nconst generateSquares = (a, b) => {\n  let currentValue = a\n  let nextValue = b\n  let current = []\n  while (currentValue <= nextValue) {\n    current.push(currentValue * currentValue)\n    currentValue = currentValue + 1\n  }\n  return current\n}\n\n/*\n  generateTriples(2, 8) => [6, 12, 18, 24]\n  generateTriples(8, 2) => [6, 12, 18, 24]\n  generateTriples(10, 14) => [66, 132, 198, 288]\n  */\nconst generateTriples = (a, b) => {\n  let currentValue = a\n  let nextValue = b\n  let current = []\n  while (currentValue <= nextValue) {\n    current.push(currentValue * currentValue * currentValue)\n    currentValue = currentValue + 1\n  }\n  return current\n}\n\n/*\n  generateCubes(2, 8) => [8, 32, 64, 128]\n  generateCubes(8, 2) => [8, 32, 64, 128]\n  generateCubes(10, 14) => [196, 464, 984, 1792]\n  */\nconst generateCubes = (a, b) => {\n  let currentValue = a\n  let nextValue = b\n  let current = []\n  while (currentValue <= nextValue) {\n    current.push(currentValue * currentValue * currentValue * currentValue)\n    currentValue = currentValue + 1\n  }\n  return current\n}\n\n/*\n  generatePythagoreanTriples(2, 8) => [4, 16, 32, 64, 128, 256, 512, 1024]\n  generatePythagoreanTriples(8, 2) => [4, 16, 32, 64, 128, 256, 512, 1024]\n  generatePythagoreanTriples(10, 14) => [40, 84, 168, 336, 576, 960, 1408, 1728]\n  */\nconst generatePythagoreanTriples = (a, b) => {\n  let currentValue = a\n  let nextValue = b\n  let current = []\n  while (currentValue <= nextValue) {\n    let pythagoreanTriple = Math.pow(currentValue, 2) + Math.pow(currentValue, 3)\n    if (pythagoreanTriple > 2 * currentValue) {\n      current.push(pythagoreanTriple)\n    }\n    currentValue = currentValue + 1\n  }\n  return current\n}\n\n/*\n  generatePandigonalTriples(2, 8) => [4, 16, 32, 64, 128, 256, 512, 1024]\n  generatePandigonalTriples(8, 2) => [4, 16, 32, 64, 128, 256, 512, 1024]\n  generatePandigonalTriples(10, 14) => [40, 84, 168, 336, 576, 960, 1408, 1728]\n  */\nconst generatePandigonalTriples = (a, b) => {\n  let currentValue = a\n  let nextValue = b\n  let current = []\n  while (currentValue <= nextValue) {\n    let pandigonalTriple = Math.pow(currentValue, 3) + Math.pow(currentValue, 2)\n    if (pandigonalTriple > 2 * currentValue) {\n      current.push(pandigonalTriple)\n    }\n    currentValue = currentValue + 1\n  }\n  return current\n}\n\n/*\n  generateSquareForthPythagoreanTriples(2, 8) => [4, 16, 32, 64, 128, 256, 512, 1024]\n  generateSquareForthPythagoreanTriples(8, 2) => [4, 16, 32, 64, 128, 256, 512, 1024]\n  generateSquareForthPythagoreanTriples(10, 14) => [40, 84, 168, 336, 576, 960, 1408, 1728]\n  */\nconst generateSquareForthPythagoreanTriples = (a, b) => {\n  let currentValue = a\n  let nextValue = b\n  let current = []\n  while (currentValue <= nextValue) {\n    let squareForthPythagoreanTriple = Math.pow(currentValue, 4) + Math.pow(currentValue, 3)\n    if (squareForthPythagoreanTriple > 2 * currentValue) {\n      current.push(squareForthPythagoreanTriple)\n    }\n    currentValue = currentValue + 1\n  }\n  return current\n}\n\n/*\n  generateSquareForthPandigonalTriples(2, 8) => [4, 16, 32, 64, 128, 256, 512, 1024]\n  generateSquareForthPandigonalTriples(8, 2) => [4, 16, 32, 64, 128, 256, 512, 1024]\n  generateSquareForthPandigonalTriples(10, 14) => [40, 84, 168, 336, 576, 960, 1408, 1728]\n  */\nconst generateSquareForthPandigonalTriples = (a, b) => {\n  let currentValue = a\n  let nextValue = b\n  let current = []\n  while (currentValue <= nextValue) {\n    let squareForthPandigonalTriple = Math.pow("}
