{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    depth+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    depth-=1;\n    if (depth < 0)\n    return false;\n    }\n  return depth == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    depth+=1;\n    else\n   \n    if (b == \">\")\n    depth-=1;\n    else\n      return false;\n  }\n  return depth == 0;\n};\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(l) => {\n  return Math.max(... l);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(l) => {\n  return Math.max(... l);\n \n};\n\n//\n// ## Min Element\n//\n// *Returns the minimum element in the list.\n// *\n// ```javascript\n// minElement([3, 2, 1])\n// // -> 1\n// ```\n// *\n// ```javascript\n// minElement([1, 2, 3])\n// // -> 1\n// ```\n// *\n// ```javascript\n// minElement([3, 1, -2, 2, -3, 3, 9, 0, 123, 1, -10])\n// // -> -10\n// ```\nconst minElement =(l) => {\n  return Math.min(... l);\n};\n\n//\n// ## Sum\n//\n// *Returns sum of all elements in the list.\n// *\n// ```javascript\n// sum([1, 2, 3])\n// // -> 6\n// ```\n// *\n// ```javascript\n// sum([1, 2, 3, 4, 5, 6])\n// // -> 21\n// ```\n// *\n// ```javascript\n// sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n// // -> 61\n// ```\nconst sum =(l) => {\n  return l.reduce((s,e) => {\n    return s + e;\n  });\n};\n\n//\n// ## Sort\n//\n// *Returns a sorted list.\n// *\n// ```javascript\n// sort([9, 6, 3, 1, 4, 7, 2, 8])\n// // -> [1, 2, 3, 4, 6, 7, 8, 9]\n// ```\n// *\n// ```javascript\n// sort([9, 6, 3, 1, 4, 7, 2, 8])\n// // -> [1, 2, 3, 4, 6, 7, 8, 9]\n// ```\n// *\n// ```javascript\n// sort([9, 6, 3, 1, 4, 7, 2, 8], (a,b) => {\n//   if (a < b) {\n//     return -1;\n//   }\n//   if (a > b) {\n//     return 1;\n//   }\n//   return 0;\n// })\n// // -> [1, 2, 3, 4, 6, 7, 8, 9]\n// ```\nconst sort =(l,cmp = (a,b) => {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}) => {\n  return l.sort((a,b) => {\n    return cmp(a,b);\n  });\n};\n\n//\n// ## Lazy\n//\n// *Returns a function that returns an element of the list.\n// *\n// ```javascript\n// lazy([1, 2, 3])\n// // -> 1\n// ```\n// *\n// ```javascript\n// lazy([1, 2, 3])\n// // -> 1\n// ```\n// *\n// ```javascript\n// lazy([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n// // -> 1\n// ```\nconst lazy =(l) => {\n  return l.slice(1);\n};\n\n//\n// ## Exports\n//\nexport {\n  maxElement,\n  minElement,\n  sum,\n  sort,\n  lazy\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let t = '' let p = [ ]\n  let k = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == ' ' || s [ i ] == ',') {\n        if (k == 0) {\n          k = 1;\n          p.push(t);\n          t = '';\n          }\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      else {\n        k = 0;\n        t+=s [ i ]\n        }\n      }\n    i++;}\n  if (t != '') {\n    p.push(t);\n    }\n  return p\n  }\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let t = '' let p = [ ]\n  let k = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] =='' || s [ i ] == ',') {\n        if (k == 0) {\n          k = 1;\n          p.push(t);\n          t = '';\n          }\n       \n        } else {\n          t += s [ i ];\n        }\n      }\n      i++;\n    }\n    if (t!= '') {\n      p.push(t);\n    }\n    return p;\n}\n\n/*\n  You will be given an array of words. Your task is to remove the words that contain\n  the letter 'y' and the words that contain the letter 'a'.\n  \n  For example:\n  words(\"Hi, my name is John, and I am a student\")\n  returns [\"Hi\", \"my name is John\"]\n  */\nconst words =(s) => {\n  let i = 0;\n  let t = ''\n  while (i < s.length) {\n    if (s[i].search('y') == -1 && s[i].search('a') == -1) {\n      t += s[i];\n    } else {\n      i++;\n    }\n  }\n  return t;\n}\n\n/*\n  You will be given an array of words. Your task is to return an array of the words\n  that do not contain the letter 'y' and the words that do not contain the letter 'a'.\n  \n  For example:\n  words(\"Hi, my name is John, and I am a student\")\n  returns [\"Hi\", \"my name is John\"]\n  */\nconst wordsNot =(s) => {\n  let t = ''\n  let i = 0\n  while (i < s.length) {\n    if (s[i].search('y') == -1 && s[i].search('a') == -1) {\n      t += s[i];\n    } else {\n      i++;\n    }\n  }\n  return t;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is to\n  split the string into words and return an array of the words that do not contain\n  the letter 'y' and the words that do not contain the letter 'a'.\n  \n  For example:\n  wordsNot(\"Hi, my name is John, and I am a student\")\n  returns [\"Hi\", \"my name is John\"]\n  */\nconst wordsNotString =(s) => {\n  let t = ''\n  let p = wordsString(s)\n  let i = 0;\n  while (i < p.length) {\n    if (p [ i ].search('y') == -1 && p [ i ].search('a') == -1) {\n      t += p [ i ];\n    } else {\n      i++;\n    }\n  }\n  return t;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is to\n  split the string into words and return an array of the words that do not contain\n  the letter 'y' and the words that do not contain the letter 'a'.\n  \n  For example:\n  wordsNot(\"Hi, my name is John, and I am a student\")\n  returns [\"Hi\", \"my name is John\"]\n  */\nconst wordsNotString2 =(s) => {\n  let t = ''\n  let p = wordsString(s)\n  let i = 0;\n  while (i < p.length) {\n    if (p [ i ].search('y')!= -1 || p [ i ].search('a')!= -1) {\n      t += p [ i ];\n    } else {\n      i++;\n    }\n  }\n  return t;\n}\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is to\n  split the string into words and return an array of the words that do not contain\n  the letter 'y' and the words that do not contain the letter 'a'.\n  \n  For example:\n  wordsNot(\"Hi, my name is John, and I am a student\")\n  returns [\"Hi\", \"my name is John\"]\n  */\nconst wordsNotString3 =(s) => {\n  let t = ''\n  let p = wordsString(s)\n  let i = 0;\n  while (i < p.length) {\n    if (p [ i ].search('y') == -1 && p [ i ].search('a') == -1) {\n      t += p [ i ];\n    } else {\n      i++;\n    }\n  }\n  return t;\n}\n\nconst wordsNotString4 =(s) => {\n  let t = ''\n  let p = wordsString(s)\n  let i = 0;\n  while (i < p.length) {\n    if (p [ i ].search('y')!= -1 && p [ i ].search('a')!= -1) {\n      t += p [ i ];\n    } else {\n      i++;\n    }\n  }\n  return t;\n}\n\nconst wordsNotString5 =(s) => {\n  let t = ''\n  let p = wordsString(s)\n  let i = 0;\n  while (i < p.length) {\n    if (p [ i ].search('y')!= -1) {\n      t += p [ i ];\n    } else {\n      i++;\n    }\n  }\n  return t;\n}\n\nconst wordsNotString6 =(s) => {\n  let t = ''\n  let p = wordsString(s)\n  let i = 0;\n  while (i < p.length) {\n    if (p [ i ].search('a')!= -1) {\n      t += p [ i ];\n    } else {\n      i++;\n    }\n  }\n  return t;\n}\n\nconst words"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(x, base) => {\n  var ret = \"\";\n  \n  for (; x > 0;) {\n     {\n      ret =(x % base).toString() + ret;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      x = Math.floor(x / base);\n      }\n    }\n  return ret;\n  }\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(x, base) => {\n  var ret = \"\";\n  \n  for (; x > 0;) {\n     {\n      ret =(x % base).toString() + ret;\n     \n      x = Math.floor(x / base);\n     }\n  }\n  \n  return ret;\n}\n\n//Test cases\nconst testChangeBase = [\n    [8, 3],\n    [8, 2],\n    [7, 2],\n    [12, 2],\n    [-1, 2],\n    [10, 2],\n    [1, 2],\n    [2, 2]\n];\n\nconsole.log(changeBase(testChangeBase[0][0], testChangeBase[0][1]));\nconsole.log(changeBase(testChangeBase[1][0], testChangeBase[1][1]));\nconsole.log(changeBase(testChangeBase[2][0], testChangeBase[2][1]));\nconsole.log(changeBase(testChangeBase[3][0], testChangeBase[3][1]));\nconsole.log(changeBase(testChangeBase[4][0], testChangeBase[4][1]));\nconsole.log(changeBase(testChangeBase[5][0], testChangeBase[5][1]));\nconsole.log(changeBase(testChangeBase[6][0], testChangeBase[6][1]));\nconsole.log(changeBase(testChangeBase[7][0], testChangeBase[7][1]));\nconsole.log(changeBase(testChangeBase[8][0], testChangeBase[8][1]));\nconsole.log(changeBase(testChangeBase[9][0], testChangeBase[9][1]));\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(string) => {\n  return(new Set(string.toLowerCase())).size;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  }\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(string) => {\n  return(new Set(string.toLowerCase())).size;\n \n};\n\n/* Given a string, find out the longest string consisting of letters\n  >>> findLongestString('xyzXYZ')\n  'xyzXYZ'\n  >>> findLongestString('abcABC')\n  'ABC'\n  >>> findLongestString('abc123')\n  'abc123'\n  */\nconst findLongestString =(string) => {\n  return(new Set(string.split('').map((element) => {\n    return(element.toLowerCase());\n  })).values().sort().slice(-1)[0]);\n};\n\n/* Given a string, find out the shortest string consisting of letters\n  >>> findShortestString('xyzXYZ')\n  'xyz'\n  >>> findShortestString('abcABC')\n  'abc'\n  >>> findShortestString('abc123')\n  'abc'\n  */\nconst findShortestString =(string) => {\n  return(new Set(string.split('').map((element) => {\n    return(element.toLowerCase());\n  })).values().sort().slice(0, -1)[0]);\n};\n\n/* Given a string, find out the number of consonants\n  >>> countConsonants('xyzXYZ')\n  2\n  >>> countConsonants('abcABC')\n  1\n  >>> countConsonants('abc123')\n  3\n  */\nconst countConsonants =(string) => {\n  const consonants = new Set(['a','e','i','o','u']);\n  const vowel = new Set(['a','e','i','o','u','A','E','I','O','U']);\n  let count = 0;\n  for(let element of string){\n    if(consonants.has(element.toLowerCase())){\n      count++;\n    }\n    else if(vowel.has(element.toLowerCase())){\n      count--;\n    }\n  }\n  return(count);\n};\n\n/* Given a string, find out the number of vowels\n  >>> countVowels('xyzXYZ')\n  3\n  >>> countVowels('abcABC')\n  3\n  >>> countVowels('abc123')\n  1\n  */\nconst countVowels =(string) => {\n  const consonants = new Set(['a','e','i','o','u']);\n  const vowel = new Set(['a','e','i','o','u','A','E','I','O','U']);\n  let count = 0;\n  for(let element of string){\n    if(consonants.has(element.toLowerCase())){\n      count++;\n    }\n    else if(vowel.has(element.toLowerCase())){\n      count++;\n    }\n  }\n  return(count);\n};\n\n/* Given a string, find out the number of consonants and vowels\n  >>> countVowelsAndConsonants('xyzXYZ')\n  2\n  >>> countVowelsAndConsonants('abcABC')\n  3\n  >>> countVowelsAndConsonants('abc123')\n  3\n  */\nconst countVowelsAndConsonants =(string) => {\n  const consonants = new Set(['a','e','i','o','u']);\n  const vowel = new Set(['a','e','i','o','u','A','E','I','O','U']);\n  let count = 0;\n  for(let element of string){\n    if(consonants.has(element.toLowerCase())){\n      count++;\n    }\n    else if(vowel.has(element.toLowerCase())){\n      count++;\n    }\n  }\n  return(count);\n};\n\n/* Given a string, find out the number of consonants and vowels, ignoring the case\n  >>> countVowelsAndConsonantsCaseInsensitive('xyzXYZ')\n  2\n  >>> countVowelsAndConsonantsCaseInsensitive('abcABC')\n  3\n  >>> countVowelsAndConsonantsCaseInsensitive('abc123')\n  3\n  */\nconst countVowelsAndConsonantsCaseInsensitive =(string) => {\n  const consonants = new Set(['a','e','i','o','u']);\n  const vowel = new Set(['a','e','i','o','u','A','E','I','O','U']);\n  let count = 0;\n  for(let element of string){\n    if(consonants.has(element.toLowerCase())){\n      count++;\n    }\n    else if(vowel.has(element.toLowerCase())){\n      count++;\n    }\n  }\n  return(count);\n};\n\n/* Given a string, find out the number of consonants, vowels, and other letters\n  >>> countOtherLetters('xyzXYZ')\n  3\n  >>> countOtherLetters('abcABC')\n  3\n  >>> countOtherLetters('abc123')\n  4\n  */\nconst countOtherLetters =(string) => {\n  const consonants = new Set(['a','e','i','o','u']);\n  const vowel = new Set(['a','e','i','o','u','A','E','I','O','U']);\n  const other = new Set(['0','1','2','3','4','5','6','7','8','9','+','-']);\n  let count = 0;\n  for(let element of string){\n    if(consonants.has(element.toLowerCase())){\n      count++;\n    }\n    else if(vowel.has(element.toLowerCase())){\n      count++;\n    }\n    else if(other.has(element.toLowerCase())){\n      count++;\n    }\n  }\n  return(count);\n};\n\n/* Given a string, find out the number of consonants, vowels, and other letters, ignoring the case\n  >>> countOtherLettersCaseInsensitive('xyzXYZ')\n  3\n  >>> countOtherLettersCaseInsensitive('abcABC')\n  3\n  >>>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let t = date.split( / - /)\n  if (t.length != 3) {\n    return false}\n  if (t [ 0 ] < 1 || t [ 0 ] > 12 || t [ 1 ] < 1) {\n    return false}\n  if (t [ 0 ] == 2 && t [ 1 ] > 29) {\n    return false}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if ((t [ 0 ] == 1 || t [ 0 ] == 3 || t [ 0 ] == 5 || t [ 0 ] == 7 || t [ 0 ] == 8 || t [ 0 ] == 10 || t [ 0 ] == 12) && t [ 1 ] > 31) {\n    return false}\n  if ((t [ 0 ] == 4 || t [ 0 ] == 6 || t [ 0 ] == 9 || t [ 0 ] == 11) && t [ 1 ] > 30) {\n    return false}\n  return true\n  }\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let t = date.split( / - /)\n  if (t.length!= 3) {\n    return false}\n  if (t [ 0 ] < 1 || t [ 0 ] > 12 || t [ 1 ] < 1) {\n    return false}\n  if (t [ 0 ] == 2 && t [ 1 ] > 29) {\n    return false}\n \n  if (t [ 1 ] == 2 && t [ 2 ] > 30) {\n    return false}\n\n  if (t [ 0 ] == 4 || t [ 0 ] == 6 || t [ 0 ] == 9 || t [ 0 ] == 11) {\n    if (t [ 1 ] > 12) {\n      return false}\n  }\n\n  return true\n}\n\nconst date = process.argv[2]\n\nconsole.log(validDate(date))<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance+=op;\n    if (balance < 0) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      return true;\n      }\n    }\n  return false;\n  }\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance+=op;\n    if (balance < 0) {\n     \n      return true;\n    }\n  }\n  return false;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict [ num ]+=1;\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      dict [ num ] = 1;\n      }\n    }\n  return numbers.filter(x => dict [ x ] <= 1);\n  }\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict [ num ]+=1;\n      }\n    else {\n     \n      dict[num]=1;\n    }\n    }\n  return [...new Set(Object.keys(dict))];\n}\n\n/*\n  From a list of integers, find the largest one.\n  >>> largestNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  10\n  */\nconst largestNumber =(numbers) => {\n  return numbers.sort((a,b)=>{\n    return b-a;\n  })[0];\n}\n\n/*\n  From a list of strings, find the largest one.\n  >>> largestNumber([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"])\n  nine\n  */\nconst largestNumber =(strings) => {\n  return strings.sort((a,b)=>{\n    return b.length - a.length;\n  })[0];\n}\n\n/*\n  From a list of strings, find the smallest one.\n  >>> largestNumber([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"])\n  one\n  */\nconst largestNumber =(strings) => {\n  return strings.sort((a,b)=>{\n    return a.length - b.length;\n  })[0];\n}\n\n/*\n  Find the difference of two numbers\n  >>> difference(2, 4)\n  2\n  */\nconst difference =(a, b) => {\n  return a - b;\n}\n\n/*\n  Given a list of integers, find the sum of the ones.\n  >>> sumOfOnes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  45\n  */\nconst sumOfOnes =(numbers) => {\n  var sum = 0;\n  for (const num of numbers) {\n    if (num % 1 === 0) {\n      sum+=num;\n    }\n  }\n  return sum;\n}\n\n/*\n  Given a list of integers, find the product of the ones.\n  >>> productOfOnes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  3628800\n  */\nconst productOfOnes =(numbers) => {\n  var product = 1;\n  for (const num of numbers) {\n    product *= num;\n  }\n  return product;\n}\n\n/*\n  Given a list of strings, find the longest string\n  >>> longestString([ \"one\", \"two\", \"three\", \"four\", \"five\" ])\n  five\n  */\nconst longestString =(strings) => {\n  return strings.sort((a,b)=>{\n    return b.length - a.length;\n  })[0];\n}\n\n/*\n  Given a list of strings, find the shortest string\n  >>> shortestString([ \"one\", \"two\", \"three\", \"four\", \"five\" ])\n  one\n  */\nconst shortestString =(strings) => {\n  return strings.sort((a,b)=>{\n    return a.length - b.length;\n  })[0];\n}\n\n/*\n  Given a list of strings, find the average length of the strings\n  >>> averageLength([ \"one\", \"two\", \"three\", \"four\", \"five\" ])\n  3.0\n  */\nconst averageLength =(strings) => {\n  return sumOfOnes(strings) / strings.length;\n}\n\n/*\n  Given a list of strings, find the average of the strings\n  >>> average([ \"one\", \"two\", \"three\", \"four\", \"five\" ])\n  3.0\n  */\nconst average =(strings) => {\n  return sumOfOnes(strings) / strings.length;\n}\n\n/*\n  Given a list of strings, find the average of the lengths of the strings\n  >>> averageLengthOfLength([ \"one\", \"two\", \"three\", \"four\", \"five\" ])\n  3.0\n  */\nconst averageLengthOfLength =(strings) => {\n  return sumOfOnes(strings) / strings.length;\n}\n\n/*\n  Given a list of strings, find the number of strings that contain the largest number.\n  >>> numberOfLargest([ \"one\", \"two\", \"three\", \"four\", \"five\" ])\n  1\n  */\nconst numberOfLargest =(strings) => {\n  return strings.filter((str)=>{\n    return largestNumber(str) in strings;\n  }).length;\n}\n\n/*\n  Given a list of strings, find the number of strings that contain the smallest number.\n  >>> numberOfSmallest([ \"one\", \"two\", \"three\", \"four\", \"five\" ])\n  1\n  */\nconst numberOfSmallest =(strings) => {\n  return strings.filter((str)=>{\n    return smallestNumber(str) in strings;\n  }).length;\n}\n\n/*\n  Given a list of strings, find the number of strings that contain the largest number in the middle of the string.\n  >>> numberOfLargestInMiddle([ \"one\", \"two\", \"three\", \"four\", \"five\" ])\n  1\n  */\nconst numberOfLargestInMiddle =(strings) => {\n  return strings.filter((str)=>{\n    return largestNumber(str) in strings;\n  }).length;\n}\n\n/*\n  Given a list of strings, find the number of strings that contain the smallest number in the middle of the string.\n  >>> numberOfSmallestInMiddle([ \"one\", \"two\", \"three\", \"four\", \"five\" ])\n  1\n  */\nconst numberOfSmallestInMiddle =(strings) => {\n  return strings.filter((str)=>{\n    return smallestNumber(str) in strings;\n  }).length;\n}\n\n/*\n  Given a list of strings, find the number of strings that contain the largest number in the middle of the string.\n  >>> numberOfLargestInMiddleOfLength([ \"one\", \"two\","}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(string) => {\n  if (string == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  for (; !isPalindrome(string.slice(beginning_of_suffix));) {\n    beginning_of_suffix+=1;\n    }\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n  }\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(string) => {\n  if (string == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n  // Find the longest postfix of supplied string that is a palindrome.\n  // We are going to find the longest postfix of string that\n  // can be reversed to make it a palindrome.\n  while (beginning_of_suffix < string.length &&!isPalindrome(string.substring(beginning_of_suffix, string.length))) {\n    beginning_of_suffix++;\n  }\n  // Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  var result = string.substring(0, beginning_of_suffix) + string.substring(string.length - beginning_of_suffix, string.length);\n  return result;\n}\n\n/* Find the longest palindrome in a string\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makeLongestPalindrome = (string) => {\n  var result = makePalindrome(string);\n  if (result.length == string.length)\n  return result;\n  return result + makeLongestPalindrome(string.substring(result.length, string.length));\n}\n\n/*\n  Find the longest palindrome in a string\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('catt')\n  'catac'\n  */\nconst makeLongestPalindrome = (string) => {\n  var result = makePalindrome(string);\n  if (result.length == string.length)\n  return result;\n  return result + makeLongestPalindrome(string.substring(result.length, string.length));\n}\n\n/*\n  Find the longest palindrome in a string\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('catt')\n  'catac'\n  */\nconst makeLongestPalindrome = (string) => {\n  var result = makePalindrome(string);\n  if (result.length == string.length)\n  return result;\n  return result + makeLongestPalindrome(string.substring(result.length, string.length));\n}\n\n/*\n  Find the longest palindrome in a string\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('catt')\n  'catac'\n  */\nconst makeLongestPalindrome = (string) => {\n  var result = makePalindrome(string);\n  if (result.length == string.length)\n  return result;\n  return result + makeLongestPalindrome(string.substring(result.length, string.length));\n}\n\n/*\n  Find the longest palindrome in a string\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('catt')\n  'catac'\n  */\nconst makeLongestPalindrome = (string) => {\n  var result = makePalindrome(string);\n  if (result.length == string.length)\n  return result;\n  return result + makeLongestPalindrome(string.substring(result.length, string.length));\n}\n\n/*\n  Find the longest palindrome in a string\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('catt')\n  'catac'\n  */\nconst makeLongestPalindrome = (string) => {\n  var result = makePalindrome(string);\n  if (result.length == string.length)\n  return result;\n  return result + makeLongestPalindrome(string.substring(result.length, string.length));\n}\n\n/*\n  Find the longest palindrome in a string\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(n) => {\n  var fact = [ ], i = 2;\n  \n  for (; i <= Math.sqrt(n) + 1;) {\n     {\n      if (n % i == 0) {\n        fact.push(i);\n        n = n / i;\n        }\n      else {\n        i+=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    \n    }\n  if (n > 1)\n  fact.push(n);\n  return fact;\n  }\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(n) => {\n  var fact = [ ], i = 2;\n  \n  for (; i <= Math.sqrt(n) + 1;) {\n     {\n      if (n % i == 0) {\n        fact.push(i);\n        n = n / i;\n        }\n      else {\n        i+=1;\n       \n      }\n      }\n    }\n    \n    if (n!= 1) {\n    fact.push(n);\n  }\n  \n  return fact;\n}\n\nconsole.log(factorize(8));<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(N) => {\n  let t = 0\n  \n  for (; N > 0;) {\n     {\n      t+=N % 10\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      N =(N - N % 10) / 10\n      }\n    }\n  return t.toString(2)\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(N) => {\n  let t = 0\n  \n  for (; N > 0;) {\n     {\n      t+=N % 10\n     \n      N = N/10\n    }\n  }\n  return t.toString(2)\n}\n\nconsole.log(solve(999))\nconsole.log(solve(1000))\nconsole.log(solve(150))\nconsole.log(solve(147))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l [ Math.floor(len / 2) ];\n  else\n  return(l [ len / 2 - 1 ] + l [ len / 2 ]) / 2.0;\n  }\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n \n  if (len % 2 == 0) {\n    return (l[(len - 1) / 2] + l[len / 2]) / 2;\n  } else {\n    return l[(len - 1) / 2];\n  }\n}\n\n\n\n/**\n  * Return average of elements in the list l.\n  * @param {Array} l list\n  * @returns {Number}\n  * @example\n  *  >>> average([3, 1, 2, 4, 5])\n  *  3.75\n  *  >>> average([-10, 4, 6, 1000, 10, 20])\n  *  8.25\n  */\nconst average =(l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum / l.length;\n}\n\nconst main = (l) => {\n  const average = average(l);\n  console.log(`${average}`)\n}\n\nmain(l)<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var ret = 1;\n  let i = 0;\n  while (i < n) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  ret =(2 * ret) % p;\n  return ret;\n  }\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var ret = 1;\n  let i = 0;\n  while (i < n) {\n   \n   ret = ret * 2 % p;\n   i++;\n  }\n  return ret;\n}\n\n/*\n  Find x such that gcd(x, p) = 1 and gcd(x, p) = gcd(x, q)\n  >>> modp(3, 11)\n  2\n  >>> modp(3, 11)\n  3\n  >>> modp(3, 2)\n  1\n  >>> modp(3, 2)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 5)\n  1\n  >>> modp(3, 5)\n  3\n  >>> modp(3, 4)\n  1\n  >>> modp(3, 4)\n  3\n  >>> modp(3, 3)\n  1\n  >>> modp(3, 3)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 5)\n  1\n  >>> modp(3, 5)\n  3\n  >>> modp(3, 4)\n  1\n  >>> modp(3, 4)\n  3\n  >>> modp(3, 3)\n  1\n  >>> modp(3, 3)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 5)\n  1\n  >>> modp(3, 5)\n  3\n  >>> modp(3, 4)\n  1\n  >>> modp(3, 4)\n  3\n  >>> modp(3, 3)\n  1\n  >>> modp(3, 3)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 5)\n  1\n  >>> modp(3, 5)\n  3\n  >>> modp(3, 4)\n  1\n  >>> modp(3, 4)\n  3\n  >>> modp(3, 3)\n  1\n  >>> modp(3, 3)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 5)\n  1\n  >>> modp(3, 5)\n  3\n  >>> modp(3, 4)\n  1\n  >>> modp(3, 4)\n  3\n  >>> modp(3, 3)\n  1\n  >>> modp(3, 3)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 5)\n  1\n  >>> modp(3, 5)\n  3\n  >>> modp(3, 4)\n  1\n  >>> modp(3, 4)\n  3\n  >>> modp(3, 3)\n  1\n  >>> modp(3, 3)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 5)\n  1\n  >>> modp(3, 5)\n  3\n  >>> modp(3, 4)\n  1\n  >>> modp(3, 4)\n  3\n  >>> modp(3, 3)\n  1\n  >>> modp(3, 3)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 5)\n  1\n  >>> modp(3, 5)\n  3\n  >>> modp(3, 4)\n  1\n  >>> modp(3, 4)\n  3\n  >>> modp(3, 3)\n  1\n  >>> modp(3, 3)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 5)\n  1\n  >>> modp(3, 5)\n  3\n  >>> modp(3, 4)\n  1\n  >>> modp(3, 4)\n  3\n  >>> modp(3, 3)\n  1\n  >>> modp(3, 3)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 7)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 6)\n  3\n  >>> modp(3, 5)\n  1\n  >>> modp(3, 5)\n  3\n  >>> modp(3, 4)\n  1\n  >>> modp"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(num) => {\n      let o = 0\n      let e = 0\n      if (num < 0) {\n            num = - num}\n      \n      for (; num > 0;) {\n             {\n                  if (num % 2 == 0) {\n                        e++}\n                 \n", "canonical_solution": "# print('@@this is the line to split##')\n                  else {\n                        o++}\n                  num =(num - num % 10) / 10\n                  }\n            }\n      return(e, o)\n      }\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(num) => {\n      let o = 0\n      let e = 0\n      if (num < 0) {\n            num = - num}\n      \n      for (; num > 0;) {\n             {\n                  if (num % 2 == 0) {\n                        e++}\n                 \n                  else {\n                        o++\n                  }\n                  num = num / 2\n             }\n      }\n      return (e, o)\n}\n\n/*\n   Given an integer. return a tuple that has the number of digits in the given integer.\n   \n   Example:\n      digitCount(-12) ==> (2, 1)\n      digitCount(123) ==> (3, 2)\n*/\nconst digitCount = (num) => {\n      let count = 0\n      \n      for (; num > 0;) {\n              count++\n              num = num / 10\n      }\n      return (count, num)\n}\n\n/*\n   Given a string. return a tuple that has the number of vowel in the given string.\n   \n   Example:\n      vowelCount(\"Ace\") ==> 1\n      vowelCount(\"Eve\") ==> 0\n      vowelCount(\"Aa\") ==> 1\n*/\nconst vowelCount = (str) => {\n      let count = 0\n      let vowel = \"AEIOU\"\n      \n      for (; str.length > 0;) {\n            {\n                  if (vowel.indexOf(str.charAt(count)) > -1) {\n                        count++}\n            }\n            str = str.substr(1)\n      }\n      return (count, str)\n}\n\n/*\n   Given a string. return a tuple that has the number of consonant in the given string.\n   \n   Example:\n      consonantCount(\"Ace\") ==> 0\n      consonantCount(\"Eve\") ==> 1\n      consonantCount(\"Aa\") ==> 1\n*/\nconst consonantCount = (str) => {\n      let count = 0\n      let consonant = \"BCDFGHJKLMNPQRSTVWXYZ\"\n      \n      for (; str.length > 0;) {\n            {\n                  if (consonant.indexOf(str.charAt(count)) < 0) {\n                        count++}\n            }\n            str = str.substr(1)\n      }\n      return (count, str)\n}\n\n/*\n   Given a string. return a tuple that has the number of digit in the given string.\n   \n   Example:\n      digitCount(\"Ace\") ==> 1\n      digitCount(\"Eve\") ==> 0\n      digitCount(\"Aa\") ==> 1\n*/\nconst digitCount = (str) => {\n      let count = 0\n      \n      for (; str.length > 0;) {\n            {\n                  if (!isNaN(Number(str.charAt(count)))) {\n                        count++}\n            }\n            str = str.substr(1)\n      }\n      return (count, str)\n}\n\n/*\n   Given a string. return a tuple that has the number of vowel in the given string.\n   \n   Example:\n      vowelCount(\"Ace\") ==> 1\n      vowelCount(\"Eve\") ==> 0\n      vowelCount(\"Aa\") ==> 1\n*/\nconst vowelCount = (str) => {\n      let count = 0\n      let vowel = \"AEIOU\"\n      \n      for (; str.length > 0;) {\n            {\n                  if (vowel.indexOf(str.charAt(count)) > -1) {\n                        count++}\n            }\n            str = str.substr(1)\n      }\n      return (count, str)\n}\n\n/*\n   Given a string. return a tuple that has the number of consonant in the given string.\n   \n   Example:\n      consonantCount(\"Ace\") ==> 0\n      consonantCount(\"Eve\") ==> 1\n      consonantCount(\"Aa\") ==> 1\n*/\nconst consonantCount = (str) => {\n      let count = 0\n      let consonant = \"BCDFGHJKLMNPQRSTVWXYZ\"\n      \n      for (; str.length > 0;) {\n            {\n                  if (consonant.indexOf(str.charAt(count)) < 0) {\n                        count++}\n            }\n            str = str.substr(1)\n      }\n      return (count, str)\n}\n\n/*\n   Given a string. return a tuple that has the number of digit in the given string.\n   \n   Example:\n      digitCount(\"Ace\") ==> 1\n      digitCount(\"Eve\") ==> 0\n      digitCount(\"Aa\") ==> 1\n*/\nconst digitCount = (str) => {\n      let count = 0\n      \n      for (; str.length > 0;) {\n            {\n                  if (!isNaN(Number(str.charAt(count)))) {\n                        count++}\n            }\n            str = str.substr(1)\n      }\n      return (count, str)\n}\n\n/*\n   Given a string. return a tuple that has the number of vowel in the given string.\n   \n   Example:\n      vowelCount(\"Ace\") ==> 1\n      vowelCount(\"Eve\") ==> 0\n      vowelCount(\"Aa\") ==> 1\n*/\nconst vowelCount = (str) => {\n      let count = 0\n      let vowel = \"AEIOU\"\n      \n      for (; str.length > 0;) {\n            {\n                  if (vowel.indexOf(str.charAt(count)) > -1) {\n                        count++}\n            }\n            str = str.substr(1)\n      }\n      return (count, str)\n}\n\n/*\n   Given a string. return a tuple that has the number of consonant in the given string.\n   \n   Example:\n      consonantCount(\"Ace\") ==> 0\n      consonantCount(\"Eve\") ==> 1\n      consonantCount(\"Aa\") ==> 1\n*/\nconst consonantCount = (str) => {\n      let count = 0\n      let consonant"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var begin = - 1.0, end = 1.0;\n  \n  for (; poly(xs, begin) * poly(xs, end) > 0;) {\n     {\n      begin *= 2.0;\n      end *= 2.0;\n      }\n    }\n  while (end - begin > 1e-10) {\n    let center =(begin + end) / 2.0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n    begin = center;\n    else\n    end = center;\n    }\n  return begin;\n  }\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var begin = - 1.0, end = 1.0;\n  \n  for (; poly(xs, begin) * poly(xs, end) > 0;) {\n     {\n      begin *= 2.0;\n      end *= 2.0;\n      }\n    }\n  while (end - begin > 1e-10) {\n    let center =(begin + end) / 2.0;\n   \n    if (poly(xs, center) == 0) {\n      return center;\n    } else {\n      if (poly(xs, begin) * poly(xs, center) > 0) {\n        begin = center;\n      } else {\n        end = center;\n      }\n    }\n  }\n  return 0;\n}\n\n/*\n  findAllZeros finds all zero points for the polynomial with coefficients xs.\n  */\nconst findAllZeros = (xs) => {\n  var result = [];\n  for (let x = -1.0; x <= 1.0; x += 0.1) {\n    if (poly(xs, x) == 0) {\n      result.push(x);\n    }\n  }\n  return result;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findAllZeros([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findAllZeros([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findAllZeros =(xs) => {\n  var begin = - 1.0, end = 1.0;\n  \n  for (; poly(xs, begin) * poly(xs, end) > 0;) {\n     {\n      begin *= 2.0;\n      end *= 2.0;\n      }\n    }\n  while (end - begin > 1e-10) {\n    let center =(begin + end) / 2.0;\n   \n    if (poly(xs, center) == 0) {\n      return center;\n    } else {\n      if (poly(xs, begin) * poly(xs, center) > 0) {\n        begin = center;\n      } else {\n        end = center;\n      }\n    }\n  }\n  return 0;\n}\n\nconsole.log(findZero([1, 2]));\nconsole.log(findAllZeros([1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n     {\n      result.push(string.slice(0, i + 1));\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  return result;\n  }\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n     {\n      result.push(string.slice(0, i + 1));\n     \n     }\n    i++;\n  }\n  return result;\n}\n\n\n//Return list of all suffixes from shortest to longest of the input string\n/*\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixes = (string) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n     {\n      result.push(string.slice(i + 1));\n     \n     }\n    i++;\n  }\n  return result;\n}\n\n//Return list of all suffixes that are shorter than the input string\n/*\n  >>> allShortSuffixes('abc')\n  ['b', 'c']\n  */\nconst allShortSuffixes = (string) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n     {\n      result.push(string.slice(i));\n     \n     }\n    i++;\n  }\n  return result;\n}\n\n\n//Return list of all prefixes that are shorter than the input string\n/*\n  >>> allShortPrefixes('abc')\n  ['a', 'ab']\n  */\nconst allShortPrefixes = (string) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n     {\n      result.push(string.slice(0, i));\n     \n     }\n    i++;\n  }\n  return result;\n}\n\n\n\n\n\n\n\n//Given a string, find the longest common prefix of all words\n/*\n  >>> longestCommonPrefix('abc bcd cde')\n  'ab'\n  */\nconst longestCommonPrefix = (string) => {\n  let result = string.slice(0,1);\n  let i = 1;\n  while (i < string.length) {\n    if (string.indexOf(string[i],0)!= -1) {\n      result = string.slice(0, i);\n    }\n    i++;\n  }\n  return result;\n}\n\n//Given a string, find the longest common suffix of all words\n/*\n  >>> longestCommonSuffix('abc bcd cde')\n  'cde'\n  */\nconst longestCommonSuffix = (string) => {\n  let result = string.slice(string.length - 1, string.length);\n  let i = string.length - 1;\n  while (i > 0) {\n    if (string.indexOf(string[i],0)!= -1) {\n      result = string.slice(i, string.length);\n    }\n    i--;\n  }\n  return result;\n}\n\n\n//Given a string, find the longest common substring of all words\n/*\n  >>> longestCommonSubstring('abc bcd cde')\n  'bcd'\n  */\nconst longestCommonSubstring = (string) => {\n  var result = string.slice(0,1);\n  let i = 1;\n  while (i < string.length) {\n    if (string.indexOf(string[i],0)!= -1) {\n      result = string.slice(0, i);\n    }\n    i++;\n  }\n  return result;\n}\n\n\n\n\n\n//Given a string, find the number of characters that are common to all words\n/*\n  >>> numberOfCommonChars('abc bcd cde')\n  5\n  */\nconst numberOfCommonChars = (string) => {\n  var count = 0;\n  let i = 1;\n  while (i < string.length) {\n    if (string.indexOf(string[i],0)!= -1) {\n      count += 1;\n    }\n    i++;\n  }\n  return count;\n}\n\n//Given a string, return all the words in the string\n/*\n  >>> splitWords('a b c d e')\n  ['a', 'b', 'c', 'd', 'e']\n  */\nconst splitWords = (string) => {\n  var words = string.split(/\\s/);\n  return words;\n}\n\n//Given two strings, return their concatenation\n/*\n  >>> concat('a', 'b')\n  'ab'\n  */\nconst concat = (string1, string2) => {\n  return string1 + string2;\n}\n\n//Given two strings, return their overlap\n/*\n  >>> overlap('a b', 'a b c')\n  2\n  */\nconst overlap = (string1, string2) => {\n  return string1.indexOf(string2,0)\n}\n\n//Given a string, return the number of times a word occurs in the string\n/*\n  >>> numberOfWords('a b c d e')\n  4\n  */\nconst numberOfWords = (string) => {\n  var count = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string.indexOf(string[i],0)!= -1) {\n      count += 1;\n    }\n    i++;\n  }\n  return count;\n}\n\n\n\n\n\n//Given a string, return the number of times a word occurs in the string\n/*\n  >>> numberOfWords('a b c d e')\n  4\n  */\nconst numberOfWords = (string) => {\n  var count = 0;\n  let i = 0;\n  while (i < string.length) {\n    if (string.indexOf(string[i],0)!= -1) {\n      count += 1;\n    }\n    i++;\n  }\n  return count;\n}\n\n//Given two strings, return their length of overlap\n/*\n  >>> overlap('a b', 'a b c')\n  2\n  */\nconst overlap = (string1, string2) => {\n  return string1.indexOf(string2,0)\n}\n\n//Given two strings, return their length of overlap\n/*\n  >>> overlap('a b', 'a b c')\n  2\n  */\nconst overlap ="}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  \n  for (; 1;) {\n     {\n      let u = 0\n      for (let i = 0; i < p.length; i++) {\n        if (t == p [ i ]) {\n          u = 1\n          break;\n          }\n        }\n      if (u == 1) {\n        break}\n      if (t % 2 == 1) {\n        p.push(t); t = 3 * t + 1}\n      else {\n        t = t / 2}\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] < p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  return p\n  }\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  \n  for (; 1;) {\n     {\n      let u = 0\n      for (let i = 0; i < p.length; i++) {\n        if (t == p [ i ]) {\n          u = 1\n          break;\n          }\n        }\n      if (u == 1) {\n        break}\n      if (t % 2 == 1) {\n        p.push(t); t = 3 * t + 1}\n      else {\n        t = t / 2}\n      }\n    }\n \n  return p\n  }\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(n) => {\n  return Math.pow(n, 2);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(n) => {\n  return Math.pow(n, 2);\n \n}\n\nconst carRace =(n) => {\n  let collisions = 0;\n  for(let i=1;i<=n;i++){\n    for(let j=1;j<=n;j++){\n      if(i>j){\n        collisions += carRaceCollision(i) + carRaceCollision(j);\n      }\n    }\n  }\n  return collisions;\n}\n\n//  Expected:  0\n//  Actual:    0\nconst carRaceExpected = 0;\n\nconsole.log(carRace(3));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let i = 0; i < lst.length; i++) {\n        let j = lst [ i ].length - 1;\n        while (j >= 0) {\n             {\n                if (lst [ i ] [ j ] == x) {\n                    t.push((i, j))\n                   \n", "canonical_solution": "# print('@@this is the line to split##')\n                    }\n                }\n            j--;}\n        }\n    return t\n    }\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let i = 0; i < lst.length; i++) {\n        let j = lst [ i ].length - 1;\n        while (j >= 0) {\n             {\n                if (lst [ i ] [ j ] == x) {\n                    t.push((i, j))\n                   \n                }\n            }\n            j--\n        }\n    }\n    return t.sort((a, b) => {\n        if (a[0] > b[0]) {\n            return 1\n        } else if (a[0] < b[0]) {\n            return -1\n        } else {\n            return a[1] - b[1]\n        }\n    })\n}\n\n\nconst lst = [\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n]\nconsole.log(getRow(lst, 1))\nconsole.log(getRow(lst, 3))<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let p = [ ]\n  let i = 0;\n  while (i < x.length) {\n     {\n      let h = x [ i ]\n      let boo = 1\n      while (h > 0) {\n        let r = h % 10\n        if (r % 2 == 0) {\n          boo = 0;\n          i++; break;\n          }\n        h =(h - r) / 10\n        }\n      if (boo) {\n        p.push(x [ i ])\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] < p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  return p\n  }\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let p = [ ]\n  let i = 0;\n  while (i < x.length) {\n     {\n      let h = x [ i ]\n      let boo = 1\n      while (h > 0) {\n        let r = h % 10\n        if (r % 2 == 0) {\n          boo = 0;\n          i++; break;\n          }\n        h =(h - r) / 10\n        }\n      if (boo) {\n        p.push(x [ i ])\n        }\n     \n      }\n    }\n  return p;\n  }\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let k =(n + m) / 2\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (k % 1 != 0) {\n    k =(n + m + 1) / 2}\n  return '0b' + k.toString(2)\n  }\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let k =(n + m) / 2\n \n  let bits = n\n  while (bits < m) {\n    bits = (bits + 1) * 2\n  }\n  \n  return (bits - k) / 2\n}\n\n/*\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let d = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in d) {\n      d [ t [ m ] ]++\n      }\n    else {\n      d [ t [ m ] ] = 1\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  s = Object.keys(d).sort(function(a, b) {\n    return - d [ a ] + d [ b ];}\n  );\n  if (s.length == 0) {\n    return {\n      }\n    }\n  let g = d [ s [ 0 ] ]\n  let l = {\n    }\n  let ss = 0;\n  while (ss < s.length) {\n     {\n      if (d [ s [ ss ] ] == g) {\n        l [ s [ ss ] ] = d [ s [ ss ] ]\n        }\n      }\n    ss++;}\n  return l\n  }\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let d = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in d) {\n      d [ t [ m ] ]++\n      }\n    else {\n      d [ t [ m ] ] = 1\n      }\n    }\n \n  return d\n  }\n\n\n\nconst max =(a, b) => {\n  return (a > b)? a : b}\n\nconst min =(a, b) => {\n  return (a < b)? a : b}\n\n\n\nconst test = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 0) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\nconst test2 = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 1) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\nconst test3 = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 2) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\n\nconst test4 = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 3) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\n\nconst test5 = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 4) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\n\n\nconst test6 = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 5) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\n\nconst test7 = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 6) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\n\nconst test8 = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 7) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\n\nconst test9 = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 8) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\n\nconst test10 = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 9) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\n\nconst test11 = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 10) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\n\nconst test12 = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 11) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\n\nconst test13 = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 12) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\n\nconst test14 = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 13) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\n\nconst test15 = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 14) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\n\nconst test16 = (test) => {\n  var histogram = histogram(test)\n  var d = {}\n  for (m in histogram) {\n    if (histogram [ m ] > 15) {\n      d [ m ] = histogram [ m ]\n      }\n    }\n  return d\n}\n\n\nconst test17 = (test) => {\n  var histogram = histogram("}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = '' let i = 0;\n  while (i < s.length) {\n     {\n      let p = s [ i ].charCodeAt() + 4\n      if (p > 122) {\n        p-=26}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t+=String.fromCharCode(p)\n      }\n    i++;}\n  return t\n  }\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = '' let i = 0;\n  while (i < s.length) {\n     {\n      let p = s [ i ].charCodeAt() + 4\n      if (p > 122) {\n        p-=26}\n     \n      t+=String.fromCharCode(p)\n    }\n  }\n  return t\n}\n\nconsole.log(encrypt('asdfghjkl'))\nconsole.log(encrypt('gf'))\nconsole.log(encrypt('et'))\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122)) {\n      return true}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false\n    }\n  if (txt [ len - 2 ] == ' ' &&((y >= 65 && y <= 90) ||(y >= 97 && y <= 122))) {\n    return true}\n  return false\n  }\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122)) {\n      return true}\n   \n  } else if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122) || (y >= 48 && y <= 57)) {\n    return false}\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a letter, digit or whitespace and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsAWord =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122) || (y >= 48 && y <= 57) || (y == 32)) {\n    return true}\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a letter, digit or apostrophe and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsAnApostrophe =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122) || (y >= 48 && y <= 57) || (y == 39)) {\n    return true}\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a letter, digit or apostrophe and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsAnAcronym =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122) || (y >= 48 && y <= 57) || (y == 39)) {\n    return true}\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a letter, digit or apostrophe and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122) || (y >= 48 && y <= 57) || (y == 45)) {\n    return true}\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a letter, digit or apostrophe and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsASymbol =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122) || (y >= 48 && y <= 57) || (y == 45) || (y == 95) || (y == 46)) {\n    return true}\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a letter, digit or apostrophe and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastChar"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  let i = word.length - 2;\n  while (i > 0) {\n     {\n      if (\n       !(word [ i ] != 'a' && word [ i ] != 'e' && word [ i ] != 'i' && word [ i ] != 'o' && word [ i ] != 'u' && word [ i ] != 'A' &&\n      word [ i ] != 'U' && word [ i ] != 'O' && word [ i ] != 'I' && word [ i ] != 'E')\n       &&\n      (word [ i + 1 ] != 'a' && word [ i + 1 ] != 'e' && word [ i + 1 ] != 'i' && word [ i + 1 ] != 'o' && word [ i + 1 ] != 'u' && word [ i + 1 ] != 'A' &&\n      word [ i + 1 ] != 'U' && word [ i + 1 ] != 'O' && word [ i + 1 ] != 'I' && word [ i + 1 ] != 'E')\n       &&\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      (word [ i - 1 ] != 'a' && word [ i - 1 ] != 'e' && word [ i - 1 ] != 'i' && word [ i - 1 ] != 'o' && word [ i - 1 ] != 'u' && word [ i - 1 ] != 'A' &&\n      word [ i - 1 ] != 'U' && word [ i - 1 ] != 'O' && word [ i - 1 ] != 'I' && word [ i - 1 ] != 'E')\n      ) {\n        i--; return word [ i ]\n        }\n      }\n    i--;}\n  return ' '}\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  let i = word.length - 2;\n  while (i > 0) {\n     {\n      if (\n      !(word [ i ]!= 'a' && word [ i ]!= 'e' && word [ i ]!= 'i' && word [ i ]!= 'o' && word [ i ]!= 'u' && word [ i ]!= 'A' &&\n      word [ i ]!= 'U' && word [ i ]!= 'O' && word [ i ]!= 'I' && word [ i ]!= 'E')\n       &&\n      (word [ i + 1 ]!= 'a' && word [ i + 1 ]!= 'e' && word [ i + 1 ]!= 'i' && word [ i + 1 ]!= 'o' && word [ i + 1 ]!= 'u' && word [ i + 1 ]!= 'A' &&\n      word [ i + 1 ]!= 'U' && word [ i + 1 ]!= 'O' && word [ i + 1 ]!= 'I' && word [ i + 1 ]!= 'E')\n       &&\n     \n      (\n        (word [ i ]!= 'a' && word [ i ]!= 'e' && word [ i ]!= 'i' && word [ i ]!= 'o' && word [ i ]!= 'u' && word [ i ]!= 'A' &&\n      word [ i ]!= 'U' && word [ i ]!= 'O' && word [ i ]!= 'I' && word [ i ]!= 'E')\n       ||\n       (word [ i + 1 ]!= 'a' && word [ i + 1 ]!= 'e' && word [ i + 1 ]!= 'i' && word [ i + 1 ]!= 'o' && word [ i + 1 ]!= 'u' && word [ i + 1 ]!= 'A' &&\n      word [ i + 1 ]!= 'U' && word [ i + 1 ]!= 'O' && word [ i + 1 ]!= 'I' && word [ i + 1 ]!= 'E')\n       )\n       )\n      return word [ i ];\n     }\n     i--;\n  }\n  return \"\";\n};\n\nconsole.log(getClosestVowel(\"yogurt\")); //u\nconsole.log(getClosestVowel(\"FULL\")); //U\nconsole.log(getClosestVowel(\"quick\")); //\nconsole.log(getClosestVowel(\"ab\")); //\nconsole.log(getClosestVowel(\"\")); //\nconsole.log(getClosestVowel(\"\")); //\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n        p++}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i+=2;}\n  return p\n  }\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n        p++}\n     \n      }\n     \n      i++\n    }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U' || s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u') {\n        p++}\n     \n      }\n     \n      i++\n    }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of upper case vowels in even indices.\n  \n  For example:\n  countUpperVowels('aBCdEf') returns 1\n  countUpperVowels('abcdefg') returns 0\n  countUpperVowels('dBBE') returns 0\n  */\nconst countUpperVowels =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U' || s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u') {\n        p++}\n     \n      }\n     \n      i++\n    }\n  }\n  return p\n}\n\nconst countLowerVowels =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u') {\n        p++}\n     \n      }\n     \n      i++\n    }\n  }\n  return p\n}\n\nconst countVowels =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U' || s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u') {\n        p++}\n     \n      }\n     \n      i++\n    }\n  }\n  return p\n}\n\nconst countUpperVowels =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U' || s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u') {\n        p++}\n     \n      }\n     \n      i++\n    }\n  }\n  return p\n}\n\nconst countLower =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u') {\n        p++}\n     \n      }\n     \n      i++\n    }\n  }\n  return p\n}\n\nconst countVowels =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U' || s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u') {\n        p++}\n     \n      }\n     \n      i++\n    }\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of upper case vowels in even indices.\n  \n  For example:\n  countUpperVowels('aBCdEf') returns 1\n  countUpperVowels('abcdefg') returns 0\n  countUpperVowels('dBBE') returns 0\n  */\nconst countLowerVowels =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s ["}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(nums) => {\n  let min = nums [ 0 ]\n  let i = 0;\n  while (i < nums.length) {\n     {\n      for (let j = i + 1; j <= nums.length; j++) {\n        let s = 0;\n        for (let k = i; k < j; k++) {\n          s+=nums [ k ]\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        if (s < min) {\n          min = s}\n        }\n      }\n    i++;}\n  return min\n  }\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(nums) => {\n  let min = nums [ 0 ]\n  let i = 0;\n  while (i < nums.length) {\n     {\n      for (let j = i + 1; j <= nums.length; j++) {\n        let s = 0;\n        for (let k = i; k < j; k++) {\n          s+=nums [ k ]\n         \n        }\n        if (s < min) {\n          min = s\n        }\n      }\n    }\n    i++\n  }\n  return min\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, b, c) => {\n  return(a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, b, c) => {\n  return(a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n \n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, y) => {\n  return x + y;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, y) => {\n  return x + y;\n \n}\n\n/*Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract =(x, y) => {\n  return x - y;\n}\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply =(x, y) => {\n  return x * y;\n}\n\n/*Divide two numbers x and y\n  >>> divide(2, 3)\n  1\n  >>> divide(5, 7)\n  2\n  */\nconst divide =(x, y) => {\n  return x / y;\n}\n\n/*Test if two numbers x and y are equal\n  >>> equal(2, 2)\n  True\n  >>> equal(5, 7)\n  False\n  */\nconst equal =(x, y) => {\n  return x === y;\n}\n\n/*Test if two numbers x and y are not equal\n  >>> not_equal(2, 2)\n  False\n  >>> not_equal(5, 7)\n  True\n  */\nconst not_equal =(x, y) => {\n  return x!== y;\n}\n\n/*Test if two numbers x and y are less than\n  >>> less(2, 3)\n  True\n  >>> less(5, 7)\n  False\n  */\nconst less =(x, y) => {\n  return x < y;\n}\n\n/*Test if two numbers x and y are less than or equal\n  >>> less_equal(2, 3)\n  True\n  >>> less_equal(5, 7)\n  True\n  */\nconst less_equal =(x, y) => {\n  return x <= y;\n}\n\n/*Test if two numbers x and y are greater than\n  >>> greater(2, 3)\n  False\n  >>> greater(5, 7)\n  True\n  */\nconst greater =(x, y) => {\n  return x > y;\n}\n\n/*Test if two numbers x and y are greater than or equal\n  >>> greater_equal(2, 3)\n  False\n  >>> greater_equal(5, 7)\n  True\n  */\nconst greater_equal =(x, y) => {\n  return x >= y;\n}\n\nmodule.exports = {\n  add, subtract, multiply, divide, equal, not_equal, less, less_equal, greater, greater_equal\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n  .map(x =>(x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  .join('');\n  }\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n .map(x =>(x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n \n .join('');\n}\n\n/*\n  Given a string, return a new string with only the first letter in upper case.\n  \n  >>> upperCaseFirst('hello')\n  'Hello'\n  \n  >>> upperCaseFirst('hello')\n  'Hello'\n  \n  >>> upperCaseFirst('hello')\n  'Hello'\n  */\nconst upperCaseFirst =(string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/*\n  Given a string, return a new string with only the first letter in lower case.\n  \n  >>> lowerCaseFirst('hello')\n  'hello'\n  \n  >>> lowerCaseFirst('Hello')\n  'hello'\n  \n  >>> lowerCaseFirst('HEllo')\n  'hello'\n  */\nconst lowerCaseFirst =(string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n}\n\n/*\n  Given a string, return a new string with the first letter in upper case.\n  \n  >>> toUpperCaseFirst('hello')\n  'Hello'\n  \n  >>> toUpperCaseFirst('hello')\n  'Hello'\n  \n  >>> toUpperCaseFirst('hello')\n  'Hello'\n  */\nconst toUpperCaseFirst =(string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/*\n  Given a string, return a new string with the first letter in lower case.\n  \n  >>> toLowerCaseFirst('Hello')\n  'hello'\n  \n  >>> toLowerCaseFirst('HEllo')\n  'hello'\n  \n  >>> toLowerCaseFirst('hello')\n  'hello'\n  */\nconst toLowerCaseFirst =(string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n}\n\n/*\n  Given a string, return a new string with all lowercase characters replaced by upper case.\n  \n  >>> flipCase('hello')\n  'hello'\n  \n  >>> flipCase('HEllo')\n  'HEllo'\n  \n  >>> flipCase('hello')\n  'hello'\n  */\nconst flipCaseAll =(string) => {\n  return string.replace(/[a-z]/g, x => x.toUpperCase());\n}\n\n/*\n  Given a string, return a new string with the first letter in upper case.\n  \n  >>> upperCaseFirst('hello')\n  'Hello'\n  \n  >>> upperCaseFirst('hello')\n  'Hello'\n  \n  >>> upperCaseFirst('hello')\n  'Hello'\n  */\nconst upperCaseAll =(string) => {\n  return string.replace(/[a-z]/g, x => x.toUpperCase());\n}\n\n/*\n  Given a string, return a new string with the first letter in lower case.\n  \n  >>> lowerCaseFirst('hello')\n  'hello'\n  \n  >>> lowerCaseFirst('Hello')\n  'hello'\n  \n  >>> lowerCaseFirst('HEllo')\n  'hello'\n  */\nconst lowerCaseAll =(string) => {\n  return string.replace(/[a-z]/g, x => x.toLowerCase());\n}\n\n/*\n  Given a string, return a new string with the first letter in upper case.\n  \n  >>> toUpperCaseFirst('hello')\n  'Hello'\n  \n  >>> toUpperCaseFirst('hello')\n  'Hello'\n  \n  >>> toUpperCaseFirst('hello')\n  'Hello'\n  */\nconst toUpperCaseAll =(string) => {\n  return string.replace(/[a-z]/g, x => x.toUpperCase());\n}\n\n/*\n  Given a string, return a new string with the first letter in lower case.\n  \n  >>> toLowerCaseFirst('Hello')\n  'hello'\n  \n  >>> toLowerCaseFirst('HEllo')\n  'hello'\n  \n  >>> toLowerCaseFirst('hello')\n  'hello'\n  */\nconst toLowerCaseAll =(string) => {\n  return string.replace(/[a-z]/g, x => x.toLowerCase());\n}\n\nmodule.exports = {\n  flipCase,\n  flipCaseAll,\n  upperCaseFirst,\n  upperCaseAll,\n  lowerCaseFirst,\n  lowerCaseAll,\n  toUpperCaseFirst,\n  toUpperCaseAll,\n  toLowerCaseFirst,\n  toLowerCaseAll\n};\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  let i = 0;\n  while (i < string.length) {\n     {\n      if (string [ i ] == '[') {\n        opening_bracket_index.push(i)\n        }\n      else {\n        closing_bracket_index1.push(i)\n        }\n      }\n    i++;}\n  let closing_bracket_index = [ ]\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1 [ closing_bracket_index1.length - i - 1 ])\n    }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index [ k ] < closing_bracket_index [ i ]) {\n      cnt+=1;\n      i+=1;\n      }\n    }\n  return cnt >= 2\n  }\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  let i = 0;\n  while (i < string.length) {\n     {\n      if (string [ i ] == '[') {\n        opening_bracket_index.push(i)\n        }\n      else {\n        closing_bracket_index1.push(i)\n        }\n      }\n    i++;}\n  let closing_bracket_index = [ ]\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n   \n    let j = i + 1\n    while (j < closing_bracket_index1.length) {\n      if (string [closing_bracket_index1 [ j ]] == '[') {\n        closing_bracket_index.push(closing_bracket_index1 [ j ])\n        }\n      else {\n        break;\n        }\n      j++;}\n    if (j == closing_bracket_index1.length) {\n      return true;\n      }\n    }\n  return false;\n  }\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = s [ i ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    p+=String.fromCharCode(y)\n    }\n  if (t == 1) {\n    return p}\n  let u = '' let i = 0;\n  while (i < p.length) {\n     {\n      u+=p [ p.length - i - 1 ]\n      }\n    i++;}\n  return u\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = s [ i ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n    }\n    p = y + p\n    }\n  return p\n  }\n\nconsole.log(solve(\"1234\"))\nconsole.log(solve(\"ab\"))\nconsole.log(solve(\"#a@C\"))\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const e of l)\n  if (e >= t)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const e of l)\n  if (e >= t)\n \n  return false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  let i = 1;\n  while (i <= n) {\n     {\n      let k = i.toString()\n      let p = 1\n      for (let j = 0; j < k.length; j++) {\n        if (k [ j ] != k [ k.length - j - 1 ]) {\n          p = 0;\n          i++; break;\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        }\n      if (p == 1) {\n        if (k % 2 == 0) {\n          e++}\n        else {\n          o++}\n        }\n      }\n    i++;}\n  return(e, o)\n  }\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  let i = 1;\n  while (i <= n) {\n     {\n      let k = i.toString()\n      let p = 1\n      for (let j = 0; j < k.length; j++) {\n        if (k [ j ]!= k [ k.length - j - 1 ]) {\n          p = 0;\n          i++; break;\n         \n        }\n      }\n      if (p) e++\n      i++;\n     }\n     {\n      let k = i.toString()\n      let p = 1\n      for (let j = 0; j < k.length; j++) {\n        if (k [ j ]!= k [ k.length - j - 1 ]) {\n          p = 0;\n          i++; break;\n         \n        }\n      }\n      if (p) o++\n      i++;\n     }\n  }\n  return [e, o]\n}\n\nmodule.exports = evenOddPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i--;}\n  return i;\n  }\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n// for a given number n, find the largest number that divides n evenly, larger than n\n\nconst largestDivisor2 =(n) => {\n  let i = n + 1;\n  while (i <= n) {\n    if (n % i == 0)\n   \n      return i;\n    i++;\n  }\n};\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largestDivisor2(15)\n  7\n  */\nconst largestDivisor2 =(n) => {\n  let i = n + 1;\n  while (i <= n) {\n    if (n % i == 0)\n   \n      return i;\n    i++;\n  }\n};\n\n\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n\n// given a number n, find the largest number that divides n evenly, larger than n\n\nconst largestDivisor3 =(n) => {\n  let i = n - 1;\n  while (i <= n) {\n    if (n % i == 0)\n   \n      return i;\n    i++;\n  }\n};\n\n// find the largest number that divides n evenly, larger than n\n\nconst largestDivisor3 =(n) => {\n  let i = n + 1;\n  while (i <= n) {\n    if (n % i == 0)\n   \n      return i;\n    i++;\n  }\n};\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n// given a number n, find the largest number that divides n evenly, smaller than n\n\nconst largestDivisor4 =(n) => {\n  let i = n + 1;\n  while (i <= n) {\n    if (n % i == 0)\n   \n      return i;\n    i++;\n  }\n};\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\n// given a number n, find the largest number that divides n evenly, larger than n\n\nconst largestDivisor5 =(n) => {\n  let i = n + 1;\n  while (i <= n) {\n    if (n % i == 0)\n   \n      return i;\n    i++;\n  }\n};\n\nconst largestDivisor5 =(n) => {\n  let i = n + 1;\n  while (i <= n) {\n    if (n % i == 0)\n   \n      return i;\n    i++;\n  }\n};\n\nconst largestDivisor5 =(n) => {\n  let i = n + 1;\n  while (i <= n) {\n    if (n % i == 0)\n   \n      return i;\n    i++;\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let j = 2; j < n; j++)\n    if (n % j == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if ( !isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if ( !isPrime(j)) continue;\n      let k = 2;\n      while (k < 101) {\n         {\n          if ( !isPrime(k)) k++; continue;\n          if (i * j * k == a)\n          k++; return true;\n          }\n        k++;}\n      }\n    }\n  return false;\n  }\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let j = 2; j < n; j++)\n    if (n % j == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n     \n      if (!isPrime(j)) continue;\n      if (i * j == a)\n      return true;\n    }\n  }\n  return false;\n}\n\nconsole.log(isMultiplyPrime(100));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n  , 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (s.at( - 1) == 'y' || s.at( - 1) == 'Y')\n  n_vowels+=1;\n  return n_vowels;\n  }\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n , 0);\n \n  return n_vowels;\n}\n\n// \nconsole.log(vowelsCount(\"abcde\")); // 2\nconsole.log(vowelsCount(\"ACEDY\")); // 3\nconsole.log(vowelsCount(\"AEIOUYAEIOUAEIOU\")); // 11\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1) {\n      lo = i}\n    }\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet2) {\n      hi = i}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (lo == - 1 || hi == - 1 || lo == hi) {\n    return [ ]}\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n    }\n  let i = lo + 1;\n  while (i < hi) {\n     {\n      u.push(y [ i ])\n      }\n    i++;}\n  return u\n  }\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1) {\n      lo = i}\n    }\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet2) {\n      hi = i}\n    }\n \n  let p = 0\n  while (p <= hi) {\n    u[p] = y[p]\n    p++\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1 && (hi + 1)!= i) {\n      if (y[i + 1]!= y [ i ]) {\n        u[p] = y [ i + 1]\n        p++\n      }\n    }\n  }\n  return (u)\n}\n\nconst bf =(planet1, planet2) => {\n  let u = [ ]\n  let p = 0\n  while (p < 8) {\n    if (y [ p ] == planet1) {\n      u[p] = planet2\n      p++\n    }\n  }\n  return (u)\n}\n\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let p = 0\n  while (p < 8) {\n    if (y [ p ] == planet1) {\n      u[p] = planet2\n      p++\n    }\n  }\n  return (u)\n}\n\nconst bf =(planet1, planet2) => {\n  let u = [ ]\n  let p = 0\n  while (p < 8) {\n    if (y [ p ] == planet1) {\n      u[p] = planet2\n      p++\n    }\n  }\n  return (u)\n}\n\nconst bf =(planet1, planet2) => {\n  let u = [ ]\n  let p = 0\n  while (p < 8) {\n    if (y [ p ] == planet1) {\n      u[p] = planet2\n      p++\n    }\n  }\n  return (u)\n}\n\nconst bf =(planet1, planet2) => {\n  let u = [ ]\n  let p = 0\n  while (p < 8) {\n    if (y [ p ] == planet1) {\n      u[p] = planet2\n      p++\n    }\n  }\n  return (u)\n}\n\nconst bf =(planet1, planet2) => {\n  let u = [ ]\n  let p = 0\n  while (p < 8) {\n    if (y [ p ] == planet1) {\n      u[p] = planet2\n      p++\n    }\n  }\n  return (u)\n}\n\nconst bf =(planet1, planet2) => {\n  let u = [ ]\n  let p = 0\n  while (p < 8) {\n    if (y [ p ] == planet1) {\n      u[p] = planet2\n      p++\n    }\n  }\n  return (u)\n}\n\nconst bf =(planet1, planet2) => {\n  let u = [ ]\n  let p = 0\n  while (p < 8) {\n    if (y [ p ] == planet1) {\n      u[p] = planet2\n      p++\n    }\n  }\n  return (u)\n}\n\nconst bf =(planet1, planet2) => {\n  let u = [ ]\n  let p = 0\n  while (p < 8) {\n    if (y [ p ] == planet1) {\n      u[p] = planet2\n      p++\n    }\n  }\n  return (u)\n}\n\nconst bf =(planet1, planet2) => {\n  let u = [ ]\n  let p = 0\n  while (p < 8) {\n    if (y [ p ] == planet1) {\n      u[p] = planet2\n      p++\n    }\n  }\n  return (u)\n}\n\nconst bf =(planet1, planet2) => {\n  let u = [ ]\n  let p = 0\n  while (p < 8) {\n    if (y [ p ] == planet1) {\n      u[p] = planet2\n      p++\n    }\n  }\n  return (u)\n}\n\nconst bf =(planet1, planet2) => {\n  let u = [ ]\n  let p = 0\n  while (p < 8) {\n    if (y [ p ] == planet1) {\n      u[p] = planet2\n      p++\n    }\n  }\n  return (u)\n}\n\nconst bf =(planet1, planet2) => {\n  let u = [ ]\n  let p = 0\n  while (p < 8) {\n    if (y [ p ] == planet1) {\n      u[p] = planet2\n      p++\n    }\n  }\n  return (u)\n}\n\nconst bf =(planet1, planet2) => {\n  let u = ["}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a, b) => {\n  if (a < 0) {\n    a = - a}\n  if (b < 0) {\n    b = - b}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(a % 10) *(b % 10)\n  }\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a, b) => {\n  if (a < 0) {\n    a = - a}\n  if (b < 0) {\n    b = - b}\n \n  let arr = []\n  let i = 0\n  let j = 0\n  while (a) {\n    if (a % 10 === 0) {\n      arr.push(b)\n      b = 0\n    } else {\n      arr.push(a % 10)\n      a = a / 10\n    }\n  }\n  while (b) {\n    if (b % 10 === 0) {\n      arr.push(a)\n      a = 0\n    } else {\n      arr.push(b % 10)\n      b = b / 10\n    }\n  }\n  return arr.reduce((x, y) => x * y)\n}\n\nconsole.log(multiply(148,412))\nconsole.log(multiply(19,28))\nconsole.log(multiply(2020,1851))\nconsole.log(multiply(14,-15))\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(a) => {\n  a = Math.abs(a);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n  }\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(a) => {\n  a = Math.abs(a);\n \n  let i,j;\n  for(i=1;i<=a;i++){\n    for(j=1;j<=a;j++){\n      if(a*a!=i*j){\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nconsole.log(iscube(4));\nconsole.log(iscube(9));\nconsole.log(iscube(0));\nconsole.log(iscube(9*9*9*9));\nconsole.log(iscube(180));\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n    'six' : 6,\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n    }\n  ;\n  return numbers.split(' ')\n  .filter(x => x != '')\n  .sort((a, b) => value_map [ a ] - value_map [ b ])\n  .join(' ');\n  }\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  return numbers.split(' ').map(v => value_map[v]).sort().join(' ')\n}\n\n/*\n  * @description\n  * Return the string with the numbers sorted from smallest to largest\n  * @param {string} numbers - The number string\n  * @return {string}\n  */\nconst sortNumbers2 =(numbers) => {\n  return numbers.split('').sort().join('')\n}\n\n/*\n  * @description\n  * Return the string with the numbers sorted from largest to smallest\n  * @param {string} numbers - The number string\n  * @return {string}\n  */\nconst sortNumbers3 =(numbers) => {\n  return numbers.split('').reverse().join('')\n}\n\n/*\n  * @description\n  * Return the string with the numbers sorted from largest to smallest\n  * @param {string} numbers - The number string\n  * @return {string}\n  */\nconst sortNumbers4 =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  return numbers.split('').reverse().map(v => value_map[v]).join('')\n}\n\n/*\n  * @description\n  * Return the string with the numbers sorted from smallest to largest\n  * @param {string} numbers - The number string\n  * @return {string}\n  */\nconst sortNumbers5 =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  return numbers.split('').map(v => value_map[v]).sort().join('')\n}\n\n/*\n  * @description\n  * Return the string with the numbers sorted from largest to smallest\n  * @param {string} numbers - The number string\n  * @return {string}\n  */\nconst sortNumbers6 =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  return numbers.split('').reverse().map(v => value_map[v]).sort().join('')\n}\n\n/*\n  * @description\n  * Return the string with the numbers sorted from smallest to largest\n  * @param {string} numbers - The number string\n  * @return {string}\n  */\nconst sortNumbers7 =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  return numbers.split('').map(v => value_map[v]).sort().join('')\n}\n\n/*\n  * @description\n  * Return the string with the numbers sorted from smallest to largest\n  * @param {string} numbers - The number string\n  * @return {string}\n  */\nconst sortNumbers8 =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  return numbers.split('').reverse().map(v => value_map[v]).join('')\n}\n\n/*\n  * @description\n  * Return the string with the numbers sorted from largest to smallest\n  * @param {string} numbers - The number string\n  * @return {string}\n  */\nconst sortNumbers9 =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n\n  return numbers.split('').reverse().map(v => value_map[v]).join('')\n}\n\n/*\n  * @description\n  * Return the string with the numbers sorted from largest to smallest\n  * @param {string} numbers - The number string\n  * @return {string}\n  */\nconst sortNumbers10 =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, index) =>(index % 2 == 0 ? even [ index / 2 ] : item));\n  }\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n  return even;\n};\n\nexport default sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  let i = n;\n  while (i < n * 3) {\n     {\n      t.push(i)\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i+=2;}\n  return t\n  }\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  let i = n;\n  while (i < n * 3) {\n     {\n      t.push(i)\n     \n      if (i % 2) {\n        i = i + 1\n      } else {\n        i = i + 2\n      }\n    }\n  }\n  return t\n}\n\nconsole.log(makeAPile(3))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let letter_grade = [ ]\n  let i = 0, len = grades.length;\n  while (i < len) {\n     {\n      let gpa = grades [ i ]\n      if (gpa == 4.0) {\n        letter_grade.push('A+')\n        }\n      else\nif (gpa > 3.7) {\n        letter_grade.push('A')\n        }\n      else\nif (gpa > 3.3) {\n        letter_grade.push('A-')\n        }\n      else\nif (gpa > 3.0) {\n        letter_grade.push('B+')\n        }\n      else\nif (gpa > 2.7) {\n        letter_grade.push('B')\n        }\n      else\nif (gpa > 2.3) {\n        letter_grade.push('B-')\n        }\n      else\nif (gpa > 2.0) {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        letter_grade.push('C+')\n        }\n      else\nif (gpa > 1.7) {\n        letter_grade.push('C')\n        }\n      else\nif (gpa > 1.3) {\n        letter_grade.push('C-')\n        }\n      else\nif (gpa > 1.0) {\n        letter_grade.push('D+')\n        }\n      else\nif (gpa > 0.7) {\n        letter_grade.push('D')\n        }\n      else\nif (gpa > 0.0) {\n        letter_grade.push('D-')\n        }\n      else {\n        letter_grade.push('E')\n        }\n      }\n    i++;}\n  return letter_grade\n  }\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let letter_grade = [ ]\n  let i = 0, len = grades.length;\n  while (i < len) {\n     {\n      let gpa = grades [ i ]\n      if (gpa == 4.0) {\n        letter_grade.push('A+')\n        }\n      else\nif (gpa > 3.7) {\n        letter_grade.push('A')\n        }\n      else\nif (gpa > 3.3) {\n        letter_grade.push('A-')\n        }\n      else\nif (gpa > 3.0) {\n        letter_grade.push('B+')\n        }\n      else\nif (gpa > 2.7) {\n        letter_grade.push('B')\n        }\n      else\nif (gpa > 2.3) {\n        letter_grade.push('B-')\n        }\n      else\nif (gpa > 2.0) {\n       \n        letter_grade.push('C+')\n        }\n      else\nif (gpa > 1.7) {\n        letter_grade.push('C')\n        }\n      else\nif (gpa > 1.3) {\n        letter_grade.push('C-')\n        }\n      else\nif (gpa > 1.0) {\n        letter_grade.push('D+')\n        }\n      else\nif (gpa > 0.7) {\n        letter_grade.push('D')\n        }\n      else\nif (gpa > 0.0) {\n        letter_grade.push('D-')\n        }\n      else {\n        letter_grade.push('E')\n        }\n      i++\n      }\n    }\n  return letter_grade\n}\n\nconst main = (grades) => {\n  console.log(numericalLetterGrade(grades))\n}\n\nmain([4.0, 3, 1.7, 2, 3.5])\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var power = 1;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  for (; power < x;) {\n    power = power * n;\n    }\n  return(power == x);\n  }\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var power = 1;\n \n  for (var i = 2; i <= n; i++) {\n    power *= x;\n  }\n  if (power == x) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a perfect\n  number and false in other cases.\n  Perfect number is a number which is the sum of all its positive divisors.\n  For example:\n  isPerfectNumber(12) => false\n  isPerfectNumber(20) => true\n  isPerfectNumber(6) => false\n  isPerfectNumber(18) => true\n  isPerfectNumber(6) => false\n  */\nconst isPerfectNumber = (x) => {\n  var sum = 1;\n  for (var i = 2; i <= x; i++) {\n    if (x % i === 0) {\n      sum += i;\n    }\n  }\n  if (sum === x) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a perfect\n  number and false in other cases.\n  Perfect number is a number which is the sum of all its positive divisors.\n  For example:\n  isPerfectNumber(12) => true\n  isPerfectNumber(20) => false\n  isPerfectNumber(6) => true\n  isPerfectNumber(18) => false\n  isPerfectNumber(6) => true\n  */\nconst isPerfectPower = (x, n) => {\n  var sum = 1;\n  for (var i = 2; i <= n; i++) {\n    if (x % i === 0) {\n      sum += i;\n    }\n  }\n  if (sum === x) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Your task is to write a function that returns true if a number x is a perfect\n  number and false in other cases.\n  Perfect number is a number which is the sum of all its positive divisors.\n  For example:\n  isPerfectNumber(12) => false\n  isPerfectNumber(20) => true\n  isPerfectNumber(6) => false\n  isPerfectNumber(18) => true\n  isPerfectNumber(6) => false\n  */\nconst isPerfectPower = (x, n) => {\n  var sum = 1;\n  for (var i = 2; i <= n; i++) {\n    if (x % i === 0) {\n      sum += i;\n    }\n  }\n  if (sum === x) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = {\n  isSimplePower,\n  isPerfectPower,\n  isPerfectNumber,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(e => e > 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(e => e > 0);\n \n}\n\n/*Return only negative numbers in the list.\n  >>> getNegative([1, 2, 3, 4, -5, 6])\n  [-5, 6]\n  >>> getNegative([-2, -4, -3, 5, 3, -3, 9, 0, 123, 1, -10])\n  [-2, -4, -3, -10, 1, 123]\n  */\nconst getNegative =(l) => {\n  return l.filter(e => e < 0);\n}\n\nconst isInteger =(num) => {\n  return num % 1 === 0;\n}\n\nconst isPositive =(num) => {\n  return num >= 0;\n}\n\nconst isNegative =(num) => {\n  return num < 0;\n}\n\nconst isEven =(num) => {\n  return num % 2 === 0;\n}\n\nconst isOdd =(num) => {\n  return num % 2!== 0;\n}\n\nconst sum =(num) => {\n  return num + num + num + num + num + num + num + num + num + num;\n}\n\nconst product =(num) => {\n  return num * num * num * num * num * num * num * num * num * num;\n}\n\nconst difference =(num) => {\n  return sum(num) - product(num);\n}\n\nconst average =(num) => {\n  return sum(num) / num;\n}\n\nconst max =(num) => {\n  return Math.max(num, num, num, num, num, num, num, num, num, num);\n}\n\nconst min =(num) => {\n  return Math.min(num, num, num, num, num, num, num, num, num, num);\n}\n\nconst pow =(num, n) => {\n  return Math.pow(num, n);\n}\n\nconst square =(num) => {\n  return num * num;\n}\n\nconst cube =(num) => {\n  return num * num * num;\n}\n\nconst pow2 =(num) => {\n  return num * num;\n}\n\nconst pow3 =(num) => {\n  return num * num * num;\n}\n\nconst pow4 =(num) => {\n  return num * num * num * num;\n}\n\nconst pow5 =(num) => {\n  return num * num * num * num * num;\n}\n\nconst pow6 =(num) => {\n  return num * num * num * num * num * num;\n}\n\nconst pow7 =(num) => {\n  return num * num * num * num * num * num * num;\n}\n\nconst pow8 =(num) => {\n  return num * num * num * num * num * num * num * num;\n}\n\nconst pow9 =(num) => {\n  return num * num * num * num * num * num * num * num * num;\n}\n\nconst pow10 =(num) => {\n  return num * num * num * num * num * num * num * num * num * num;\n}\n\nconst factorial =(num) => {\n  return (num > 0)? factorial(num - 1) + 1 : 1;\n}\n\nconst fib =(num) => {\n  if (num === 1 || num === 2) {\n    return 1;\n  } else if (num === 3) {\n    return 2;\n  } else {\n    return fib(num - 1) + fib(num - 2);\n  }\n}\n\nconst fib2 =(num) => {\n  if (num === 0) {\n    return 0;\n  } else if (num === 1) {\n    return 1;\n  } else {\n    return fib2(num - 1) + fib2(num - 2);\n  }\n}\n\nconst fib3 =(num) => {\n  if (num === 0) {\n    return 0;\n  } else if (num === 1) {\n    return 1;\n  } else {\n    return fib3(num - 1) + fib3(num - 2);\n  }\n}\n\nconst fib4 =(num) => {\n  if (num === 0) {\n    return 0;\n  } else if (num === 1) {\n    return 1;\n  } else {\n    return fib4(num - 1) + fib4(num - 2);\n  }\n}\n\nconst fib5 =(num) => {\n  if (num === 0) {\n    return 0;\n  } else if (num === 1) {\n    return 1;\n  } else {\n    return fib5(num - 1) + fib5(num - 2);\n  }\n}\n\nconst fib6 =(num) => {\n  if (num === 0) {\n    return 0;\n  } else if (num === 1) {\n    return 1;\n  } else {\n    return fib6(num - 1) + fib6(num - 2);\n  }\n}\n\nconst fib7 =(num) => {\n  if (num === 0) {\n    return 0;\n  } else if (num === 1) {\n    return 1;\n  } else {\n    return fib7(num - 1) + fib7(num - 2);\n  }\n}\n\nconst fib8 =(num) => {\n  if (num === 0) {\n    return 0;\n  } else if (num === 1) {\n    return 1;\n  } else {\n    return fib8(num - 1) + fib8(num - 2);\n  }\n}\n\nconst fib9 =(num) => {\n  if (num === 0) {\n    return 0;\n  } else if (num === 1) {\n    return 1;\n  } else {\n    return fib9(num - 1) + fib9(num - 2);\n  }\n}\n\nconst fib10 =(num) => {\n  if (num === 0) {"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        y+=lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        y+=lst [ i ] * lst [ i ] * lst [ i ]}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      else {\n        y+=lst [ i ]}\n      }\n    i++;}\n  return y\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        y+=lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        y+=lst [ i ] * lst [ i ] * lst [ i ]}\n     \n      else {\n        y+=lst [ i ]}\n    }\n  }\n  return y;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  let i = 2;\n  while (i <= n) {\n     {\n      if (i % 2 == 0) {\n        p.push(1 + i / 2)\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      else {\n        p.push(p [ i - 2 ] + p [ i - 1 ] + 1 +(i + 1) / 2)\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  let i = 2;\n  while (i <= n) {\n     {\n      if (i % 2 == 0) {\n        p.push(1 + i / 2)\n       \n      } else {\n        p.push(p[i - 1] + p[i - 2] + p[i + 1])\n      }\n    }\n    i += 1;\n  }\n  return p;\n}\n\nconsole.log(tri(3));<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var results = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return results [ n ];\n  let i = 4;\n  while (i < n + 1) {\n     {\n      results.push(results.at( - 1) + results.at( - 2) +\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      results.at( - 3) + results.at( - 4));\n      results.shift();\n      }\n    i++;}\n  return results.pop();\n  }\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var results = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return results [ n ];\n  let i = 4;\n  while (i < n + 1) {\n     {\n      results.push(results.at( - 1) + results.at( - 2) +\n     \n      results.at( - 3) + results.at( - 4));\n      i += 1;\n    }\n  }\n  return results.at( - 1);\n};\n\nconsole.log(fib4(6));<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  let i = y;\n  while (i >= x) {\n     {\n      if (i % 2 == 0) {\n        i--; return i}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i--;}\n  return - 1\n  }\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  let i = y;\n  while (i >= x) {\n     {\n      if (i % 2 == 0) {\n        i--; return i}\n     \n     }\n  }\n}\n\nconst main =() => {\n  let n = chooseNum(1, 3);\n  console.log(n);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1 && lst [ i ] > 0) {\n        p+=lst [ i ] * lst [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1 && lst [ i ] > 0) {\n        p+=lst [ i ] * lst [ i ]\n       \n      } else if (lst [ i ] < 0) {\n        p+=Math.pow(lst [ i ], 2)\n      }\n    }\n    i+=1;\n  }\n  return p;\n}\n\nconst doubleTheDifference2 =(lst) => {\n  let p = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ] % 2 == 1) {\n      p+=lst [ i ] * lst [ i ]\n    }\n  }\n  return p;\n}\n\nmodule.exports = doubleTheDifference2;\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(e => e + 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(e => e + 1);\n \n};\n\n//https://www.hackerrank.com/challenges/sparse-arrays-n-queens\n/*\n  Given a number n, write a function which prints all distinct solutions to the n-queens puzzle.\n\n  Each solution should be printed row by row, like this:\n\n  +----+----+----+\n  |    |    |    |\n  |   A |   B |   C|\n  |    |    |    |\n  +----+----+----+\n  |    |    |    |\n  |   D |   E |   F|\n  |    |    |    |\n  +----+----+----+\n  |    |    |    |\n  |   G |   H |   I|\n  |    |    |    |\n  +----+----+----+\n\n*/\n\nconst printSolution = (board, i) => {\n  console.log(board);\n};\n\nconst printSolutionHelper = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  const cell = [row, col];\n  board[cell].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper2 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper3 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  const cell = [row, col];\n  board[cell].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper4 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper5 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper6 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper7 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper8 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper9 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper10 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper11 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper12 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper13 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper14 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper15 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper16 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper17 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper18 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper19 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);\n  });\n};\n\nconst printSolutionHelper20 = (board, i) => {\n  const row = i % 4;\n  const col = i - row;\n  board[row][col].forEach(row => {\n    console.log(row);"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  let i = 0;\n  while (i < s.length - 2) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  if (s [ i ] == s [ i + 1 ] || s [ i + 1 ] == s [ i + 2 ] || s [ i ] == s [ i + 2 ])\n  return false;\n  return true;\n  }\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  let i = 0;\n  while (i < s.length - 2) {\n   \n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(x => Number.isInteger(x));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(x => Number.isInteger(x));\n \n}\n\n/* Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  []\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats =(values) => {\n  return values.filter(x => Number.isFinite(x));\n \n}\n\n/* Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  []\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings =(values) => {\n  return values.filter(x => typeof x ==='string');\n \n}\n\n/* Filter given list of any python values only for dicts\n  >>> filterDicts(['a', 3.14, 5])\n  []\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  {}\n  */\nconst filterDicts =(values) => {\n  return values.filter(x => typeof x === 'object' && typeof x.keys === 'function' && typeof x.values === 'function');\n \n}\n\n/* Filter given list of any python values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  []\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterArrays =(values) => {\n  return values.filter(x => Array.isArray(x));\n \n}\n\n/* Filter given list of any python values only for list of lists\n  >>> filterLists(['a', 3.14, 5])\n  []\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterLists =(values) => {\n  return values.filter(x => Array.isArray(x) && typeof x[0] === 'number');\n \n}\n\n/* Filter given list of any python values only for lists of dicts\n  >>> filterDicts(['a', 3.14, 5])\n  []\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterListsOfDicts =(values) => {\n  return values.filter(x => Array.isArray(x) && typeof x[0] === 'object' && typeof x[0].keys === 'function' && typeof x[0].values === 'function');\n \n}\n\n/* Filter given list of any python values only for lists of lists\n  >>> filterLists(['a', 3.14, 5])\n  []\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterListsOfLists =(values) => {\n  return values.filter(x => Array.isArray(x) && Array.isArray(x[0]) && typeof x[0][0] === 'number');\n \n}\n\n/* Filter given list of any python values only for list of dicts\n  >>> filterListsOfDicts(['a', 3.14, 5])\n  []\n  >>> filterListsOfDicts([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterListsOfDicts =(values) => {\n  return values.filter(x => Array.isArray(x) && typeof x[0] === 'object' && typeof x[0].keys === 'function' && typeof x[0].values === 'function');\n \n}\n\n/* Filter given list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  []\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjects =(values) => {\n  return values.filter(x => typeof x === 'object' && typeof x.keys === 'function' && typeof x.values === 'function');\n \n}\n\n/* Filter given list of any python values only for objects with keys\n  >>> filterObjectsWithKeys(['a', 3.14, 5])\n  []\n  >>> filterObjectsWithKeys([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjectsWithKeys =(values) => {\n  return values.filter(x => typeof x === 'object' && typeof x.keys === 'function' && typeof x.values === 'function');\n \n}\n\n/* Filter given list of any python values only for objects with values\n  >>> filterObjectsWithValues(['a', 3.14, 5])\n  []\n  >>> filterObjectsWithValues([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjectsWithValues =(values) => {\n  return values.filter(x => typeof x === 'object' && typeof x.keys === 'function' && typeof x.values === 'function');\n \n}\n\n/* Filter given list of any python values only for objects with keys and values\n  >>> filterObjectsWithKeysAndValues(['a', 3.14, 5])\n  []\n  >>> filterObjectsWithKeysAndValues([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjectsWithKeysAndValues =(values) => {\n  return values.filter(x => typeof x === 'object' && typeof x.keys === 'function' && typeof x.values === 'function');\n \n}\n\nmodule.exports = {\n  filterIntegers,\n  filterFloats,\n  filterStrings,\n  filterDicts,\n  filterArrays,\n  filterLists,\n  filterListsOfDicts,\n  filterListsOfLists,\n  filterObjects,\n  filterObjectsWithKeys,\n  filterObjectsWith"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < p.length) {\n       {\n        if (p [ k ] < p [ ind ]) {\n          ind = k\n          }\n        }\n      k++;}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  if (k == 0) {\n    return [ ]}\n  return p.slice( - k)\n  }\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < p.length) {\n       {\n        if (p [ k ] < p [ ind ]) {\n          ind = k\n          }\n        }\n      k++;}\n   \n    if (k > k) {\n      p.splice(ind, 1)\n      }\n    }\n  return p.slice(0, k)\n}\n\nexport default maximum\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n \n}\n\n// derivative([1, 2, 3])\n// [2, 6]\n\n// derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n\n// derivative([1, 2, 3])\n// [2, 6]\n\n// xs = [1, 2, 3]\n// derivative(xs)\n// [2, 6]\n\n// xs = [1, 2, 3]\n// derivative(xs)\n// [2, 6]\n\n// xs = [3, 1, 2, 4, 5]\n// derivative(xs)\n// [1, 4, 12, 20]\n\n// xs = [3, 1, 2, 4, 5]\n// derivative(xs)\n// [1, 4, 12, 20]\n\n// xs = [3, 1, 2, 4, 5]\n// derivative(xs)\n// [1, 4, 12, 20]\n\n// xs = [1, 2, 3, 4, 5]\n// derivative(xs)\n// [2, 6]\n\n// xs = [1, 2, 3, 4, 5]\n// derivative(xs)\n// [2, 6]\n\n// xs = [1, 2, 3, 4, 5]\n// derivative(xs)\n// [2, 6]\n\n// xs = [3, 1, 2, 4, 5, 6]\n// derivative(xs)\n// [1, 4, 12, 20]\n\n// xs = [3, 1, 2, 4, 5, 6]\n// derivative(xs)\n// [1, 4, 12, 20]\n\n// xs = [3, 1, 2, 4, 5, 6]\n// derivative(xs)\n// [1, 4, 12, 20]\n\n// xs = [3, 1, 2, 4, 5, 6, 7]\n// derivative(xs)\n// [2, 6]\n\n// xs = [3, 1, 2, 4, 5, 6, 7]\n// derivative(xs)\n// [2, 6]\n\n// xs = [3, 1, 2, 4, 5, 6, 7, 8]\n// derivative(xs)\n// [3]\n\n// xs = [3, 1, 2, 4, 5, 6, 7, 8]\n// derivative(xs)\n// [3]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8]\n// derivative(xs)\n// [2, 6]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8]\n// derivative(xs)\n// [2, 6]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n// derivative(xs)\n// [3]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n// derivative(xs)\n// [3]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// derivative(xs)\n// [4]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// derivative(xs)\n// [4]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n// derivative(xs)\n// [5]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n// derivative(xs)\n// [6]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n// derivative(xs)\n// [7]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n// derivative(xs)\n// [8]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n// derivative(xs)\n// [9]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n// derivative(xs)\n// [10]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n// derivative(xs)\n// [11]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n// derivative(xs)\n// [12]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n// derivative(xs)\n// [13]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n// derivative(xs)\n// [14]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n// derivative(xs)\n// [15]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n// derivative(xs)\n// [16]\n\n// xs = [1, 2, 3, 4, 5, 6, 7, 8"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(text) => {\n  if (text == '') {\n    return null}\n  var md5 = require('js-md5')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return md5(text)\n  }\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(text) => {\n  if (text == '') {\n    return null}\n  var md5 = require('js-md5')\n \n  return md5(text)\n}\n\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr [ i ].length; j++) {\n      let ind = j\n      let k = j + 1;\n      while (k < arr [ i ].length) {\n         {\n          if (arr [ i ] [ k ].charCodeAt() < arr [ i ] [ ind ].charCodeAt()) {\n            ind = k\n            }\n          }\n        k++;}\n      if (ind > j) {\n        arr [ i ] = arr [ i ].slice(0, j) + arr [ i ] [ ind ] + arr [ i ].slice(j + 1, ind) + arr [ i ] [ j ] + arr [ i ].slice(ind + 1, arr [ i ].length)\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    }\n  let t = ''\nfor (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '}\n    t = t + arr [ i ]\n    }\n  return t\n  }\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr [ i ].length; j++) {\n      let ind = j\n      let k = j + 1;\n      while (k < arr [ i ].length) {\n         {\n          if (arr [ i ] [ k ].charCodeAt() < arr [ i ] [ ind ].charCodeAt()) {\n            ind = k\n            }\n          }\n        k++;}\n      if (ind > j) {\n        arr [ i ] = arr [ i ].slice(0, j) + arr [ i ] [ ind ] + arr [ i ].slice(j + 1, ind) + arr [ i ] [ j ] + arr [ i ].slice(ind + 1, arr [ i ].length)\n       \n        }\n      }\n    }\n  }\n  return arr.join(' ')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\nconsole.log(antiShuffle('hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\nconsole.log(antiShuffle('hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\nconst main = () => {\n  console.log(`\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let arr = lst\n  let j = 0;\n  while (j < arr.length) {\n     {\n      let ind = j\n      for (let k = j + 1; k < arr.length; k++) {\n        if (arr [ k ] < arr [ ind ]) {\n          ind = k\n          }\n        }\n      let tmp = arr [ j ]\n      arr [ j ] = arr [ ind ]\n      arr [ ind ] = tmp\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    j++;}\n  let smallest = arr [ 0 ]\n  let pt = 1\n  while (pt < arr.length) {\n    if (arr [ pt ] > smallest) {\n      return arr [ pt ]\n      }\n    pt++\n    }\n  return null\n  }\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let arr = lst\n  let j = 0;\n  while (j < arr.length) {\n     {\n      let ind = j\n      for (let k = j + 1; k < arr.length; k++) {\n        if (arr [ k ] < arr [ ind ]) {\n          ind = k\n          }\n        }\n      let tmp = arr [ j ]\n      arr [ j ] = arr [ ind ]\n      arr [ ind ] = tmp\n     \n      j = ind + 1\n    }\n  }\n  return arr\n}\n\nnextSmallest([1, 2, 3, 4, 5]) == 2\nnextSmallest([5, 1, 4, 3, 2]) == 2\nnextSmallest([]) == null\nnextSmallest([1, 1]) == null\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = '' let i = 0;\n  while (i < message.length) {\n     {\n      let p = message [ i ].charCodeAt()\n      if (p > 96) {\n        p-=32}\n      else\nif (p != 32 && p < 96) {\n        p+=32}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) {\n        p+=2}\n      t+=String.fromCharCode(p)\n      }\n    i++;}\n  return t\n  }\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = '' let i = 0;\n  while (i < message.length) {\n     {\n      let p = message [ i ].charCodeAt()\n      if (p > 96) {\n        p-=32}\n      else\nif (p!= 32 && p < 96) {\n        p+=32}\n     \n      t += message [ i ].toUpperCase()\n    }\n    i++\n  }\n  return t\n}\n\n/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('This is a message')\n  'This is a message'\n  >>> encode('This is a message')\n  'Tis MESSG'\n  >>> encode('This is a message')\n  'Tis MSNGS'\n  */\nconst decode =(message) => {\n  let t = '' let i = 0;\n  while (i < message.length) {\n     {\n      let p = message [ i ].toUpperCase()\n      if (p > 96) {\n        p-=32}\n      else\nif (p!= 32 && p < 96) {\n        p+=32}\n     \n      t += p\n    }\n    i++\n  }\n  return t\n}\n\nconst test = () => {\n  let a = 'test'\n  let b = encode(a)\n  let c = decode(b)\n  console.log(a, b, c)\n}\n\ntest()<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let y = 0\n  let u = 1\n  let i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == '(') {\n        y++}\n      else {\n        y--}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      y++}\n    else {\n      y--}\n    if (y < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  return 'No'}\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let y = 0\n  let u = 1\n  let i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == '(') {\n        y++}\n      else {\n        y--}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n  let w2 = lst [ 1 ] + lst [ 2 ]\n  y = 0\n  u = 1\n  i = 0;\n  while (i < w2.length) {\n     {\n      if (w2 [ i ] == '(') {\n        y++}\n      else {\n        y--}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  return 'No'\n}\n\nconsole.log(matchParens(['()(', ')']));\nconsole.log(matchParens(['())', ')']));\nconsole.log(matchParens(['())()', '()']));\nconsole.log(matchParens([')', '(']));\nconsole.log(matchParens([')()()', ')(']));\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst [ i ].length\n    let j = 0;\n    while (j < h) {\n       {\n        if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n          p++}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      j++;}\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n    }\n  return d\n  }\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst [ i ].length\n    let j = 0;\n    while (j < h) {\n       {\n        if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n          p++}\n       \n        j++\n      }\n    }\n    d.push(p)\n  }\n  return d\n}\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    let i = 0;\n    while (i < key.length) {\n       {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        if (key [ i ].charCodeAt() < 65 || key [ i ].charCodeAt() > 90) {\n          hi = 0}\n        if (key [ i ].charCodeAt() < 97 || key [ i ].charCodeAt() > 122) {\n          lo = 0}\n        }\n      i++;}\n    }\n  if ((lo == 0 && hi == 0) || c == 0) {\n    return false}\n  return true\n  }\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    let i = 0;\n    while (i < key.length) {\n       {\n       \n        if (key.charCodeAt(i) >= 97 && key.charCodeAt(i) <= 122) {\n          lo = 1;\n        }\n        else if (key.charCodeAt(i) >= 65 && key.charCodeAt(i) <= 90) {\n          hi = 1;\n        }\n        else {\n          return false\n        }\n        i++\n       }\n    }\n  }\n  if (c === 0) {\n    return false;\n  }\n  else if (c === 1 && (lo === 1 || hi === 1)) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n\nmodule.exports = checkDictCase<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let j = 0; j < t.length; j++) {\n    let len = t [ j ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    let i = 2;\n    while (i * i <= len) {\n       {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        if (len % i == 0) {\n          u = 0}\n        }\n      i++;}\n    if (u == 0) {\n      continue}\n    if (p == '') {\n      p+=t [ j ]}\n    else {\n      p = p + ' ' + t [ j ]}\n    }\n  return p\n  }\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let j = 0; j < t.length; j++) {\n    let len = t [ j ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    let i = 2;\n    while (i * i <= len) {\n       {\n       \n       if (i * i == len) {\n          p += t [ j ];\n          break}\n       else {\n          i += 1;\n       }\n       }\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth+=1;\n      current_string.push(c);\n      }\n    else\nif (c == ')') {\n      current_depth-=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [ ];\n        }\n      }\n    }\n  \n  return result;\n  }\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth+=1;\n      current_string.push(c);\n      }\n    else\nif (c == ')') {\n      current_depth-=1;\n     \n      if (current_depth<0) {\n        //Unbalanced bracket\n        var error_string = current_string.join('');\n        console.log('Unbalanced brackets detected:'+ error_string);\n        }\n      else {\n        //New string\n        result.push(current_string.join(''));\n        current_string = [ ];\n        }\n      }\n    else {\n      current_string.push(c);\n      }\n    }\n  return result;\n  }\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(numbers, delimeter) => {\n  if ( !Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of numbers) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    result.push(n, delimeter);\n    }\n  result.pop();\n  return result;\n  }\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of numbers) {\n   \n    for (let i = 0; i < (numbers.length - 1); i++) {\n      result.push(delimeter);\n    }\n    result.push(n);\n  }\n  return result;\n};\n\n/*\n  Given a list of numbers, this function returns a list of the\n  numbers, in reverse order.\n\n  >>> reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> reverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  >>> reverse([])\n  []\n  >>> reverse([])\n  []\n  >>> reverse([1])\n  [1]\n  >>> reverse([1])\n  [1]\n  */\nconst reverse = (numbers) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  var result = [ ];\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\n/*\n  Given a list of numbers, this function returns a list of the\n  numbers, in reverse order.\n\n  >>> reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> reverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  >>> reverse([])\n  []\n  >>> reverse([])\n  []\n  >>> reverse([1])\n  [1]\n  >>> reverse([1])\n  [1]\n  */\nconst sort = (numbers) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  const list = [ ];\n  for (const n of numbers) {\n    list.push(n);\n  }\n  list.sort();\n  return list;\n};\n\n/*\n  This function takes an array of numbers and returns the array\n  of the nth to last elements in the given list.\n\n  >>> last([1, 2, 3, 4, 5, 6])\n  [6, 5, 4, 3, 2, 1]\n  >>> last([1, 2, 3, 4, 5, 6, 7, 8])\n  [8, 7, 6, 5, 4, 3, 2, 1]\n  >>> last([])\n  []\n  >>> last([])\n  []\n  >>> last([1])\n  [1]\n  >>> last([1])\n  [1]\n  */\nconst last = (numbers) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  const result = [ ];\n  for (let i = 0; i < (numbers.length - 1); i++) {\n    result.push(numbers[i]);\n  }\n  result.push(numbers[numbers.length - 1]);\n  return result;\n};\n\n/*\n  This function takes an array of numbers and returns the array\n  of the nth to last elements in the given list.\n\n  >>> last([1, 2, 3, 4, 5, 6])\n  [6, 5, 4, 3, 2, 1]\n  >>> last([1, 2, 3, 4, 5, 6, 7, 8])\n  [8, 7, 6, 5, 4, 3, 2, 1]\n  >>> last([])\n  []\n  >>> last([])\n  []\n  >>> last([1])\n  [1]\n  >>> last([1])\n  [1]\n  */\nconst last2 = (numbers) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  const result = [ ];\n  for (let i = 0; i < (numbers.length - 2); i++) {\n    result.push(numbers[i]);\n  }\n  result.push(numbers[numbers.length - 2]);\n  result.push(numbers[numbers.length - 1]);\n  return result;\n};\n\nmodule.exports = {\n  intersperse,\n  reverse,\n  sort,\n  last,\n  last2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n    }\n  , 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n    }\n  , 0) / numbers.length;\n  \n  }\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n    }\n , 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n   \n    var delta = item - mean;\n    return prev + Math.abs(delta);\n , 0) / numbers.length;\n  };\n};\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr [ i ]\n    if (h > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    h = - h\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    \n    for (; h >= 10;) {\n       {\n        k+=h % 10;\n        h =(h - h % 10) / 10;\n        }\n      }\n    k-=h;\n    if (k > 0) {\n      p++}\n    }\n  return p\n  }\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr [ i ]\n    if (h > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    h = - h\n   \n    while (h > 0) {\n      h = h % 10\n      k++;\n      }\n    if (k > p) {\n      p = k;\n      }\n    }\n  return p\n  }\n\nmodule.exports = countNums;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  let i = 0;\n  while (i < nums.length) {\n     {\n      if (nums [ i ] < 10) {\n        i++; continue}\n      let y = nums [ i ].toString()\n      if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        p++\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  let i = 0;\n  while (i < nums.length) {\n     {\n      if (nums [ i ] < 10) {\n        i++; continue}\n      let y = nums [ i ].toString()\n      if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n       \n        p++\n      }\n      i++\n    }\n  }\n  return p\n}\n\n// console.log(specialFilter([15, -73, 14, -15])); //1\n// console.log(specialFilter([33, -2, -3, 45, 21, 109])); //2\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n     {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i++;}\n  return times;\n  }\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n     {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n        i = i + substring.length;\n      }\n     }\n  }\n  return times;\n}\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  let i = 0;\n  while (i < text.length) {\n    if (text [ i ] != text.at( - i - 1))\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  return false;\n  return true;\n  }\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  let i = 0;\n  while (i < text.length) {\n    if (text [ i ]!= text.at( - i - 1))\n   \n    return false;\n    else\n      i++;\n  }\n  return true;\n};\n\nconst test = isPalindrome(\"aba\");\nconsole.log(test);\n\n/*\n  If text is a palindrome\n  then reverse the order of characters in given string\n  >>> reverse('abbcc')\n  'cccbb'\n  >>> reverse('bbcc')\n  'cccbb'\n  >>> reverse('cccbb')\n  'bbcc'\n  >>> reverse('aa')\n  'aa'\n  */\nconst reverse = (text) => {\n  return text.split('').reverse().join('');\n};\n\nconst test2 = reverse('abbcc');\nconsole.log(test2);\n\n\nconst isPalindrome2 =(text) => {\n  let i = 0;\n  let j = text.length - 1;\n  while (i < j) {\n    if (text.charAt(i)!= text.charAt(j))\n    return false;\n    else\n      i++;\n    j--;\n  }\n  return true;\n};\n\nconst test3 = isPalindrome2(\"aba\");\nconsole.log(test3);\n\n\nconst isPalindrome3 =(text) => {\n  let i = 0;\n  while (i < text.length) {\n    if (text.charAt(i)!= text.charAt(text.length - i - 1))\n    return false;\n    else\n      i++;\n  }\n  return true;\n};\n\nconst test4 = isPalindrome3(\"aba\");\nconsole.log(test4);\n\n\nconst isPalindrome4 =(text) => {\n  let i = 0;\n  let j = text.length - 1;\n  while (i < j) {\n    if (text.charAt(i)!= text.charAt(j))\n    return false;\n    else\n      i++;\n    j--;\n  }\n  return true;\n};\n\nconst test5 = isPalindrome4(\"aba\");\nconsole.log(test5);\n\n/*\n  If text is a palindrome\n  then reverse the order of characters in given string\n  >>> reverse('abbcc')\n  'cccbb'\n  >>> reverse('bbcc')\n  'cccbb'\n  >>> reverse('cccbb')\n  'bbcc'\n  >>> reverse('aa')\n  'aa'\n  */\nconst reverse2 = (text) => {\n  return text.split('').reverse().join('');\n};\n\nconst test6 = reverse2(\"aba\");\nconsole.log(test6);\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(strings) => {\n  if ( !Array.isArray(strings) || strings.length == 0)\n  return null;\n  var maxlen = Math.max(... strings.map(x => x.length));\n  for (const s of strings) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n      }\n    }\n  }\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n  return null;\n  var maxlen = Math.max(... strings.map(x => x.length));\n  for (const s of strings) {\n   \n    if (s.length == maxlen)\n    return s;\n  }\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b'])\n  'a'\n  */\n\n// Tests\nconsole.log(longest([\n  'abc', 'abd', 'cde'\n]));\nconsole.log(longest(['abc', 'abd', 'cde']));\nconsole.log(longest(['a', 'b', 'c']));\nconsole.log(longest(['a', 'b']));\nconsole.log(longest([\n  'abc', 'abd', 'cde', 'abc', 'abd', 'cde'\n]));\nconsole.log(longest(['abc', 'abd', 'cde', 'abc', 'abd', 'cde']));\nconsole.log(longest(['a', 'b', 'c', 'a', 'b', 'c']));\nconsole.log(longest(['a', 'b', 'c', 'a', 'b']));\nconsole.log(longest(['a', 'b', 'c', 'a', 'b', 'c']));\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  let i = extensions.length - 1;\n  while (i >= 0) {\n     {\n      let y = 0\n      for (let j = 0; j < extensions [ i ].length; j++) {\n        let k = extensions [ i ] [ j ].charCodeAt()\n        if (k >= 65 && k <= 90) {\n          y+=1}\n        if (k >= 97 && k <= 122) {\n          y-=1}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (y >= s) {\n        s = y;\n        u = i;\n        }\n      }\n    i--;}\n  return class_name + '.' + extensions [ u ]\n  }\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  let i = extensions.length - 1;\n  while (i >= 0) {\n     {\n      let y = 0\n      for (let j = 0; j < extensions [ i ].length; j++) {\n        let k = extensions [ i ] [ j ].charCodeAt()\n        if (k >= 65 && k <= 90) {\n          y+=1}\n        if (k >= 97 && k <= 122) {\n          y-=1}\n       \n      }\n      if (y > u) {\n        u = y;\n        s = i}\n    }\n    i -= 1}\n  return class_name + '.' + extensions[s].slice(0, -1) + '.' + extensions[s].slice(-1)\n}\n\nexport default strongestExtension<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  let i = 0;\n  while (i < k) {\n     {\n      if (arr [ i ] < 100 && arr [ i ] > - 100) {\n        p+=arr [ i ]}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  return p\n  }\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  let i = 0;\n  while (i < k) {\n     {\n      if (arr [ i ] < 100 && arr [ i ] > - 100) {\n        p+=arr [ i ]}\n     \n      i++\n    }\n  }\n  return p\n}\n\nconst addElements_slow =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    p+=arr[i];\n  }\n  return p;\n}\n\nconst addElements_fast =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_slow_test =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_fast_test =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_slow_test_2 =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_fast_test_2 =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_slow_test_3 =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_fast_test_3 =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_slow_test_4 =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_fast_test_4 =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_slow_test_5 =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_fast_test_5 =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_slow_test_6 =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_fast_test_6 =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_slow_test_7 =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_fast_test_7 =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_slow_test_8 =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return p;\n}\n\nconst addElements_fast_test_8 =(arr, k) => {\n  let p = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > 9) {\n      p+=arr[i]\n    }\n  }\n  return"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let arr = array\n  let tot = arr [ 0 ] + arr [ arr.length - 1 ]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < arr.length) {\n       {\n        if ((tot % 2 == 1 && arr [ k ] < arr [ ind ]) ||(tot % 2 == 0 && arr [ k ] > arr [ ind ])) {\n          ind = k\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        }\n      k++;}\n    let tmp = arr [ j ]\n    arr [ j ] = arr [ ind ]\n    arr [ ind ] = tmp\n    }\n  return arr\n  }\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let arr = array\n  let tot = arr [ 0 ] + arr [ arr.length - 1 ]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < arr.length) {\n       {\n        if ((tot % 2 == 1 && arr [ k ] < arr [ ind ]) ||(tot % 2 == 0 && arr [ k ] > arr [ ind ])) {\n          ind = k\n         \n        }\n        k++\n      }\n    }\n    let tmp = arr [ ind ]\n    arr [ ind ] = arr [ j ]\n    arr [ j ] = tmp\n  }\n  return arr\n}\n\nconsole.log(sortArray([5,4,3,0,1,2,6,7]))\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] == ' ') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        c = 0;\n        }\n      else {\n        t+=text [ i ]\n        }\n      }\n    i++;}\n  if (c == 1) {\n    t+='_'}\n  if (c == 2) {\n    t+='__'}\n  if (c > 2) {\n    t+='-'}\n  return t\n  }\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n        c = 0}\n      } else {\n        t+=text [ i ]\n        c = 0}\n      i++\n    }\n  }\n  return t\n}\n\n// https://codility.com/demo/take-sample-test/string-replace-spaces-with-underscores\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, b) =>(a - b));\n \n};\n\n/*\n  Return the sum of all elements in a list\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  42\n  >>> sum([])\n  0\n  >>> sum(['a', 'b', 'c', 'd'])\n  'abcbd'\n  >>> sum(['a', 'b', 'c', 'd', 'e'])\n  'abcdbe'\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255])\n  '12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(l) => {\n  var sort1 = [ ... l ].sort((a, b) => a - b);\n  var sort2 = [ ... l ].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  JSON.stringify(l) === JSON.stringify(sort2))\n  return true;\n  return false;\n  }\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(l) => {\n  var sort1 = [... l ].sort((a, b) => a - b);\n  var sort2 = [... l ].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n \n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(strings) => {\n  return strings.join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(strings) => {\n  return strings.join('');\n \n}\n\n/*\n  Given a string, return a new string where all non-alphanumeric characters are\n  replaced with spaces.\n  >>> replaceNonAlphaNum('')\n  ''\n  >>> replaceNonAlphaNum('A1B2C3')\n  'A 1 B 2 C 3'\n  >>> replaceNonAlphaNum('A-B_C')\n  'A - B _ C'\n  >>> replaceNonAlphaNum('A1B2C3!')\n  'A 1 B 2 C 3!'\n  */\nconst replaceNonAlphaNum =(string) => {\n  return string.replace(/[^A-Za-z0-9]/g,'');\n}\n\n/*\n  Given two strings, return the concatenation of the two.\n  >>> concatenate2('a', 'b')\n  'ab'\n  >>> concatenate2('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate2 =(string1, string2) => {\n  return concatenate(concatenate(string1, string2));\n}\n\n/*\n  Given a string, return the string in all lowercase letters.\n  >>> toLowercase('')\n  ''\n  >>> toLowercase('a1B2C3')\n  'a1b2c3'\n  >>> toLowercase('A1B2C3')\n  'a1b2c3'\n  >>> toLowercase('A1B2C3!')\n  'a1b2c3!'\n  */\nconst toLowercase =(string) => {\n  return string.toLowerCase();\n}\n\n/*\n  Given a string, return the string in all uppercase letters.\n  >>> toUpperCase('')\n  ''\n  >>> toUpperCase('a1B2C3')\n  'A1B2C3'\n  >>> toUpperCase('a1b2c3')\n  'A1B2C3'\n  >>> toUpperCase('a1b2c3!')\n  'A1B2C3!'\n  */\nconst toUpperCase =(string) => {\n  return string.toUpperCase();\n}\n\n/*\n  Given a string, return the string in all uppercase letters, with\n  all non-alphanumeric characters replaced with spaces.\n  >>> toAlphaNum('')\n  ''\n  >>> toAlphaNum('A1B2C3')\n  'A1B2C3'\n  >>> toAlphaNum('A1B2C3!')\n  'A1B2C3!'\n  */\nconst toAlphaNum =(string) => {\n  return replaceNonAlphaNum(toUpperCase(string));\n}\n\n/*\n  Given a string, return the string in all lowercase letters, with\n  all non-alphanumeric characters replaced with spaces.\n  >>> toAlphaNum('')\n  ''\n  >>> toAlphaNum('A1B2C3')\n  'a1b2c3'\n  >>> toAlphaNum('A1B2C3!')\n  'a1b2c3!'\n  */\nconst toAlphaNum2 =(string) => {\n  return replaceNonAlphaNum(toLowerCase(string));\n}\n\n/*\n  Given a string, return the string in all uppercase letters, with\n  all non-alphanumeric characters replaced with spaces.\n  >>> toAlphaNum('')\n  ''\n  >>> toAlphaNum('A1B2C3')\n  'A1B2C3'\n  >>> toAlphaNum('A1B2C3!')\n  'A1B2C3!'\n  */\nconst toAlphaNum3 =(string) => {\n  return replaceNonAlphaNum(toUpperCase(string));\n}\n\n/*\n  Given a string, return the string in all uppercase letters, with\n  all non-alphanumeric characters replaced with spaces, and\n  the remaining alphanumeric characters are lowercased.\n  >>> toAlphaNum2('')\n  ''\n  >>> toAlphaNum2('A1B2C3')\n  'a1b2c3'\n  >>> toAlphaNum2('A1B2C3!')\n  'a1b2c3!'\n  */\nconst toAlphaNum4 =(string) => {\n  return replaceNonAlphaNum(toLowerCase(toUpperCase(string)));\n}\n\n/*\n  Given a string, return the string in all uppercase letters, with\n  all non-alphanumeric characters replaced with spaces, and\n  the remaining alphanumeric characters are uppercased.\n  >>> toAlphaNum3('')\n  ''\n  >>> toAlphaNum3('A1B2C3')\n  'A1B2C3'\n  >>> toAlphaNum3('A1B2C3!')\n  'A1B2C3!'\n  */\nconst toAlphaNum5 =(string) => {\n  return replaceNonAlphaNum(toUpperCase(toLowerCase(string)));\n}\n\n/*\n  Given a string, return the string in all uppercase letters, with\n  all non-alphanumeric characters replaced with spaces, and\n  the remaining alphanumeric characters are uppercased, and\n  all non-alphanumeric characters are converted to spaces.\n  >>> toAlphaNum4('')\n  ''\n  >>> toAlphaNum4('A1B2C3')\n  'A1 B2 C3'\n  >>> toAlphaNum4('A1B2C3!')\n  'A1 B2 C3!'\n  */\nconst toAlphaNum6 =(string) => {\n  return replaceNonAlphaNum(toUpperCase(toUpperCase(toLowerCase(string))));\n}\n\n/*\n  Given a string, return the string in all uppercase letters, with\n  all non-alphanumeric characters replaced with spaces, and\n  the remaining alphanumeric characters are uppercased, and\n  all non-alphanumeric characters are converted to spaces.\n  >>> toAlphaNum5('')\n  ''\n  >>> toAlphaNum5('A1B2C3')\n  'A1 B2 C3'\n  >>> toAlphaNum5"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1 [ i ] % 2 == 0) {\n      t++}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let i = 0;\n  while (i < lst2.length) {\n     {\n      if (lst2 [ i ] % 2 == 0) {\n        t++}\n      }\n    i++;}\n  if (t >= k) {\n    return 'YES'}\n  return 'NO'}\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1 [ i ] % 2 == 0) {\n      t++}\n    }\n \n  if (t > 0) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst2 [ j ] % 2 == 0) {\n        if (t > 1) {\n          return \"NO\"}\n        t--\n      }\n    }\n    return \"YES\"\n  } else {\n    return \"NO\"\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(string) => {\n  return string.length;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(string) => {\n  return string.length;\n \n}\n\n/* Return reversed string\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abcdef')\n  'defca'\n  */\nconst reverse =(string) => {\n  return string.split('').reverse().join('');\n}\n\n/* Return if string contains given character\n  >>> contains('abc', 'b')\n  True\n  >>> contains('abc', 'z')\n  False\n  >>> contains('abc', 'a')\n  True\n  */\nconst contains =(string, char) => {\n  return string.indexOf(char) > -1;\n}\n\n/* Return if string ends with given character\n  >>> endsWith('abc', 'c')\n  True\n  >>> endsWith('abc', 'z')\n  False\n  */\nconst endsWith =(string, char) => {\n  return string.indexOf(char, string.length - 1) > -1;\n}\n\n/* Return if string starts with given character\n  >>> startsWith('abc', 'a')\n  True\n  >>> startsWith('abc', 'z')\n  False\n  */\nconst startsWith =(string, char) => {\n  return string.indexOf(char) === 0;\n}\n\n/* Return if string contains given characters\n  >>> containsAll('abc', 'ab')\n  True\n  >>> containsAll('abc', 'zz')\n  False\n  >>> containsAll('abc', 'zzz')\n  False\n  */\nconst containsAll =(string, chars) => {\n  return string.split('').every(s => chars.indexOf(s) > -1);\n}\n\n/* Return if string contains given character\n  >>> containsAll('abc', 'ab')\n  True\n  >>> containsAll('abc', 'zz')\n  False\n  >>> containsAll('abc', 'zzz')\n  False\n  */\nconst containsAny =(string, chars) => {\n  return string.split('').some(s => chars.indexOf(s) > -1);\n}\n\n/* Return if string ends with given character\n  >>> endsWith('abc', 'c')\n  True\n  >>> endsWith('abc', 'z')\n  False\n  */\nconst endsWithAny =(string, chars) => {\n  return chars.every(char => endsWith(string, char));\n}\n\n/* Return if string starts with given character\n  >>> startsWith('abc', 'a')\n  True\n  >>> startsWith('abc', 'z')\n  False\n  */\nconst startsWithAny =(string, chars) => {\n  return chars.every(char => startsWith(string, char));\n}\n\n/* Return if string contains given characters\n  >>> containsAll('abc', 'ab')\n  True\n  >>> containsAll('abc', 'zz')\n  False\n  >>> containsAll('abc', 'zzz')\n  False\n  */\nconst containsAtLeast =(string, chars) => {\n  return chars.every(char => contains(string, char));\n}\n\n/* Return if string contains given character\n  >>> containsAll('abc', 'ab')\n  True\n  >>> containsAll('abc', 'zz')\n  False\n  >>> containsAll('abc', 'zzz')\n  False\n  */\nconst containsAllAtLeast =(string, chars) => {\n  return chars.every(char => containsAll(string, char));\n}\n\n/* Return if string contains given character\n  >>> containsAll('abc', 'ab')\n  True\n  >>> containsAll('abc', 'zz')\n  False\n  >>> containsAll('abc', 'zzz')\n  False\n  */\nconst containsAtMost =(string, chars) => {\n  return chars.every(char => contains(string, char));\n}\n\n/* Return if string contains given character\n  >>> containsAll('abc', 'ab')\n  True\n  >>> containsAll('abc', 'zz')\n  False\n  >>> containsAll('abc', 'zzz')\n  False\n  */\nconst containsAllAtMost =(string, chars) => {\n  return chars.every(char => containsAll(string, char));\n}\n\n/* Return if string contains given character\n  >>> containsAll('abc', 'ab')\n  True\n  >>> containsAll('abc', 'zz')\n  False\n  >>> containsAll('abc', 'zzz')\n  False\n  */\nconst containsOnly =(string, chars) => {\n  return string.split('').every(s => chars.indexOf(s) > -1);\n}\n\n/* Return if string contains given character\n  >>> containsAll('abc', 'ab')\n  True\n  >>> containsAll('abc', 'zz')\n  False\n  >>> containsAll('abc', 'zzz')\n  False\n  */\nconst containsNone =(string, chars) => {\n  return string.split('').every(s => chars.indexOf(s) === -1);\n}\n\n/* Return if string contains given character\n  >>> containsAll('abc', 'ab')\n  True\n  >>> containsAll('abc', 'zz')\n  False\n  >>> containsAll('abc', 'zzz')\n  False\n  */\nconst containsNot =(string, chars) => {\n  return!containsAll(string, chars);\n}\n\n/* Return if string contains given character\n  >>> containsAll('abc', 'ab')\n  True\n  >>> containsAll('abc', 'zz')\n  False\n  >>> containsAll('abc', 'zzz')\n  False\n  */\nconst containsNotAll =(string, chars) => {\n  return!containsAll(string, chars);\n}\n\n/* Return if string contains given character\n  >>> containsAll('abc', 'ab')\n  True\n  >>> containsAll('abc', 'zz')\n  False\n  >>> containsAll('abc', 'zzz')\n  False\n  */\nconst containsNoneNot =(string, chars) => {\n  return!containsNone(string, chars);\n}\n\n/* Return if string contains given character\n  >>> containsAll('abc', 'ab')\n  True\n  >>> containsAll('abc', 'zz')\n  False\n  >>> containsAll('abc', 'zzz')\n  False\n  */\nconst containsNotNone =(string, chars) => {\n  return!containsNone(string, chars);\n}\n\n/* Return if string contains given character\n  >>>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  let i = 0;\n  while (i < a.length - l + 1) {\n     {\n      for (let j = 0; j < l + 1; j++) {\n        let y = 1\n        for (let k = 0; k < l; k++) {\n          if (a [ i + k ] != pat [ j + k ]) {\n            y = 0}\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        if (y == 1) {\n          i++; return true\n          }\n        }\n      }\n    i++;}\n  return false\n  }\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  let i = 0;\n  while (i < a.length - l + 1) {\n     {\n      for (let j = 0; j < l + 1; j++) {\n        let y = 1\n        for (let k = 0; k < l; k++) {\n          if (a [ i + k ]!= pat [ j + k ]) {\n            y = 0}\n         \n        }\n        if (y) {\n          return true\n        }\n      }\n    }\n    i += l\n  }\n  return false\n}\n\n/*\nGiven a linked list, determine if it has a cycle in it.\n\nFollow up:\nCan you solve it without using extra space?\n\nTags: Linked List, Two Pointers, Hash Table\n\nThoughts:\n1. Keep two pointers in two locations.\n2. If there is a cycle, the second pointer will point to the first node of the cycle.\n\n*/\n\nconst hasCycle = (head) => {\n  let fast = head\n  let slow = head\n  while (fast!== undefined && fast.next!== undefined) {\n    fast = fast.next.next\n    slow = slow.next\n    if (slow === fast) {\n      return true\n    }\n  }\n  return false\n}\n\nconst solution = hasCycle\n\n/*\nFollow up:\nCan you solve it with constant space complexity?\n\nTags: Linked List, Two Pointers, Hash Table\n\nThoughts:\n1. Keep two pointers in two locations.\n2. If there is a cycle, the second pointer will point to the first node of the cycle.\n3. Keep a hash table with hash value = node value, key = node value.\n4. If the value of hash table is not empty, check if hash table contains the hash value.\n*/\n\nconst hasCycle2 = (head) => {\n  let hashTable = {}\n  let fast = head\n  let slow = head\n  while (fast!== undefined && fast.next!== undefined) {\n    hashTable[fast.val] = fast.next.val\n    fast = fast.next.next\n    slow = slow.next\n    if (slow === fast) {\n      return true\n    }\n  }\n  return false\n}\n\nconst solution2 = hasCycle2\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(number) => {\n  return number % 1.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(number) => {\n  return number % 1.0;\n \n};\n\nconst getPart =(number) => {\n  return number % 1.0;\n};\n\nconst isPositive =(number) => {\n  return number > 0;\n};\n\nconst isNegative =(number) => {\n  return number < 0;\n};\n\nconst isZero =(number) => {\n  return number === 0;\n};\n\nconst isPositiveOrZero =(number) => {\n  return number >= 0;\n};\n\nconst isNegativeOrZero =(number) => {\n  return number <= 0;\n};\n\nconst isOne =(number) => {\n  return number === 1;\n};\n\nconst isNegativeOne =(number) => {\n  return number === -1;\n};\n\nconst isMultiple =(number, multiple) => {\n  return number % multiple === 0;\n};\n\nconst isMultipleOrZero =(number, multiple) => {\n  return number % multiple === 0 || number === 0;\n};\n\nconst isMultipleOf =(number, multiple) => {\n  return number % multiple === 0;\n};\n\nconst isMultipleOfOrZero =(number, multiple) => {\n  return number % multiple === 0 || number === 0;\n};\n\nconst isMultipleOfOrOne =(number, multiple) => {\n  return number % multiple === 0 || number === 1;\n};\n\nconst isMultipleOfOrNegativeOne =(number, multiple) => {\n  return number % multiple === 0 || number === -1;\n};\n\nconst isMultipleOfOrPositiveOne =(number, multiple) => {\n  return number % multiple === 0 || number === 1;\n};\n\nconst isMultipleOfOrNegativeOneOrZero =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 0;\n};\n\nconst isMultipleOfOrPositiveOneOrZero =(number, multiple) => {\n  return number % multiple === 0 || number === 1 || number === 0;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOne =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 1;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOneOrZero =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 1 || number === 0;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOneOrZeroOrOne =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 1 || number === 0 || number === 1;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOneOrZeroOrOne =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 1 || number === 0 || number === 1;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOneOrZeroOrOneOrOne =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 1 || number === 0 || number === 1 || number === 1;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOneOrZeroOrOneOrOne =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 1 || number === 0 || number === 1 || number === 1;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOneOrZeroOrOneOrOne =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 1 || number === 0 || number === 1 || number === 1;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOneOrZeroOrOneOrOneOrTwo =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 1 || number === 0 || number === 1 || number === 1 || number === 2;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOneOrZeroOrOneOrOneOrTwo =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 1 || number === 0 || number === 1 || number === 1 || number === 2;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOneOrZeroOrOneOrOneOrTwo =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 1 || number === 0 || number === 1 || number === 1 || number === 2;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOneOrZeroOrOneOrOneOrTwoOrThree =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 1 || number === 0 || number === 1 || number === 1 || number === 2 || number === 3;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOneOrZeroOrOneOrOneOrTwoOrThree =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 1 || number === 0 || number === 1 || number === 1 || number === 2 || number === 3;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOneOrZeroOrOneOrOneOrTwoOrThree =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 1 || number === 0 || number === 1 || number === 1 || number === 2 || number === 3;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOneOrZeroOrOneOrOneOrTwoOrThree =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 1 || number === 0 || number === 1 || number === 1 || number === 2 || number === 3;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOneOrZeroOrOneOrOneOrTwoOrThree =(number, multiple) => {\n  return number % multiple === 0 || number === -1 || number === 1 || number === 0 || number === 1 || number === 1 || number === 2 || number === 3;\n};\n\nconst isMultipleOfOrNegativeOneOrPositiveOneOrZeroOrOneOrOneOrTwoOrThree =(number, multiple) => {\n  return number % multiple === 0 || number === -1"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(n) => {\n  let p = 1\n  let k = 1\n  \n  for (; n > 0;) {\n     {\n      let y = n % 10\n      if (y % 2 == 1) {\n        p *= y; k = 0;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      n =(n - n % 10) / 10\n      }\n    }\n  if (k == 0) {\n    return p}\n  return 0\n  }\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(n) => {\n  let p = 1\n  let k = 1\n  \n  for (; n > 0;) {\n     {\n      let y = n % 10\n      if (y % 2 == 1) {\n        p *= y; k = 0;\n       \n      }\n      n = n / 10;\n     }\n  }\n  return p * k;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let t = txt.split( / s /)\n  if (t.length > 1) {\n    return t\n    }\n  else {\n    t = txt.split( /, /)\n    if (t.length > 1) {\n      return t\n      }\n    else {\n      let p = 0\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let i = 0;\n      while (i < txt.length) {\n         {\n          let m = txt [ i ].charCodeAt()\n          if (m >= 97 && m <= 122 && m % 2 == 0) {\n            p++\n            }\n          }\n        i++;}\n      return p\n      }\n    }\n  }\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let t = txt.split( / s /)\n  if (t.length > 1) {\n    return t\n    }\n  else {\n    t = txt.split( /, /)\n    if (t.length > 1) {\n      return t\n      }\n    else {\n      let p = 0\n     \n      let o = txt.match( /\\w/g)\n      if (o) {\n        for (let i = 0; i < o.length; i++) {\n          if (o[i] == 'a' || o[i] == 'b' || o[i] == 'c' || o[i] == 'd' || o[i] == 'e' || o[i] == 'f' || o[i] == 'g' || o[i] == 'h' || o[i] == 'i' || o[i] == 'j' || o[i] == 'k' || o[i] == 'l' || o[i] =='m' || o[i] == 'n' || o[i] == 'o' || o[i] == 'p' || o[i] == 'q' || o[i] == 'r' || o[i] =='s' || o[i] == 't' || o[i] == 'u' || o[i] == 'v' || o[i] == 'w' || o[i] == 'x' || o[i] == 'y' || o[i] == 'z' || o[i] == 'A' || o[i] == 'B' || o[i] == 'C' || o[i] == 'D' || o[i] == 'E' || o[i] == 'F' || o[i] == 'G' || o[i] == 'H' || o[i] == 'I' || o[i] == 'J' || o[i] == 'K' || o[i] == 'L' || o[i] == 'M' || o[i] == 'N' || o[i] == 'O' || o[i] == 'P' || o[i] == 'Q' || o[i] == 'R' || o[i] == 'S' || o[i] == 'T' || o[i] == 'U' || o[i] == 'V' || o[i] == 'W' || o[i] == 'X' || o[i] == 'Y' || o[i] == 'Z') {\n            p = p + (ord(o[i]) * (1 - (p % 2)))\n          }\n        }\n      }\n      return [txt, p]\n    }\n  }\n}\n\nconsole.log(splitWords(\"Hello world!\"))\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (e1 == e2)\n  ret.add(e1);\n  return [ ... ret ].sort();\n  }\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n  if (ret.has(e1) === false)\n  {\n    ret.add(e1);\n    ret.add(e2);\n  }\n  return Array.from(ret);\n}\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  let i = 0;\n  while (i < n) {\n    if (i % 11 == 0 || i % 13 == 0)\n    ns.push(i);\n    i++;}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n  ans+=(c == '7');\n  return ans;\n  }\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  let i = 0;\n  while (i < n) {\n    if (i % 11 == 0 || i % 13 == 0)\n    ns.push(i);\n    i++;}\n \n    for (var i = 0; i < ns.length; i++) {\n      console.log(ns[i]);\n    }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  let i = 0;\n  while (i < numbers.length) {\n    for (let j = 0; j < numbers.length; j++)\n    if (i != j) {\n      let a = numbers [ i ], b = numbers [ j ];\n      if (distance == null) {\n        distance = Math.abs(a - b);\n        closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n        }\n      else {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        let new_distance = Math.abs(a - b);\n        if (new_distance < distance) {\n          distance = new_distance;\n          closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n          }\n        }\n      }\n    i++;}\n  return closest_pair;\n  }\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  let i = 0;\n  while (i < numbers.length) {\n    for (let j = 0; j < numbers.length; j++)\n    if (i!= j) {\n      let a = numbers [ i ], b = numbers [ j ];\n      if (distance == null) {\n        distance = Math.abs(a - b);\n        closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n        }\n      else {\n       \n        let new_distance = Math.abs(a - b);\n        if (new_distance < distance) {\n          distance = new_distance;\n          closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n          }\n        }\n      }\n    i++;\n    }\n  return closest_pair;\n  };\n\n/* Find the first two numbers in a list that are relatively prime\n  >>> find_two_relatively_prime([3, 4, 5, 7, 10, 12, 14, 16])\n  (3, 4)\n  >>> find_two_relatively_prime([3, 4, 5, 7, 10, 12, 14, 16, 17, 19, 21])\n  (3, 5)\n  >>> find_two_relatively_prime([3, 4, 5, 7, 10, 12, 14, 16, 17, 19, 21])\n  (3, 7)\n  */\nconst find_two_relatively_prime =(numbers) => {\n  var i = 0;\n  while (i < numbers.length) {\n    let prime = false;\n    for (let j = 0; j < numbers.length; j++) {\n      if (i!= j) {\n        if (numbers [ i ] % numbers [ j ] === 0) {\n          prime = true;\n          break;\n          }\n        }\n      }\n    if (!prime) break;\n    i++;\n    }\n  return [numbers [ i - 1 ], numbers [ i ]];\n  };\n\n/* Find all the prime numbers in a list.\n  >>> find_all_primes([3, 4, 5, 7, 10, 12, 14, 16])\n  [3, 5, 7]\n  >>> find_all_primes([3, 4, 5, 7, 10, 12, 14, 16, 17, 19, 21])\n  [3, 5, 7, 11, 13, 17, 19, 21]\n  >>> find_all_primes([3, 4, 5, 7, 10, 12, 14, 16, 17, 19, 21])\n  [3, 5, 7, 11, 13, 17, 19, 21]\n  */\nconst find_all_primes =(numbers) => {\n  var is_prime = true;\n  for (let i = 0; i < numbers.length; i++) {\n    if (i === 0) {\n      if (numbers [ i ]!== 2) is_prime = false;\n      }\n    else {\n      if (numbers [ i ] % 2 === 0) is_prime = false;\n      }\n    }\n  if (is_prime) {\n    let primes = [];\n    for (let i = 0; i < numbers.length; i++) {\n      if (i === 0) {\n        primes.push(2);\n        }\n      else {\n        if (numbers [ i ] % 2 === 0) {\n          primes.push(numbers [ i ]);\n          }\n        }\n      }\n      return primes;\n    }\n  else {\n    return [];\n    }\n  };\n\n/* Find all the primes in a list, not in the first 1000.\n  >>> find_all_primes_less_than_1000([3, 4, 5, 7, 10, 12, 14, 16])\n  [3, 5, 7]\n  >>> find_all_primes_less_than_1000([3, 4, 5, 7, 10, 12, 14, 16, 17, 19, 21])\n  [3, 5, 7, 11, 13, 17, 19, 21]\n  */\nconst find_all_primes_less_than_1000 =(numbers) => {\n  var primes = find_all_primes(numbers);\n  var result = [];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes [ i ] < 1000) {\n      result.push(primes [ i ]);\n      }\n    }\n  return result;\n  };\n\n/* Find all the primes in a list, not in the first 1000, not in the second 1000.\n  >>> find_all_primes_less_than_1000_less_than_1000([3, 4, 5, 7, 10, 12, 14, 16])\n  [3, 5, 7]\n  >>> find_all_primes_less_than_1000_less_than_1000([3, 4, 5, 7, 10, 12, 14, 16, 17, 19, 21])\n  [3, 5, 7, 11, 13, 17, 19, 21]\n  */\nconst find_all_primes_less_than_1000_less_than_1000 =(numbers) => {\n  var primes = find_all_primes_less_than_1000(numbers);\n  var result = [];\n  for (let i = 0; i < primes.length; i++) {\n    if (primes [ i ] < 1000 && primes [ i ] > -1000) {\n      result.push(primes [ i ]);\n      }\n    }\n  return result;\n  };\n\nexports.find_all_primes = find_all_primes;\nexports.find_all_primes_less_than_1000 = find_all_primes_less_than_1000;\n"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      let y = lst [ i ]\n      if (y % 1 != 0) {\n        if (y > 0) {\n          y = y - y % 1 + 1}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        else {\n          y = - y; y = y - y % 1}\n        }\n      p+=y * y\n      }\n    i++;}\n  return p\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      let y = lst [ i ]\n      if (y % 1!= 0) {\n        if (y > 0) {\n          y = y - y % 1 + 1}\n       \n        if (y % 1!= 0) {\n          y = y - y % 1 + 1}\n        }\n       \n        let x = Math.pow (y, 2)\n        p += x\n        i++\n       }\n     }\n  }\n  return p\n}\n\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([1,4,9]))\nconsole.log(sumSquares([1,3,5,7]))\nconsole.log(sumSquares([1.4,4.2,0]))\nconsole.log(sumSquares([-2.4,1,1]))\n<|endoftext|>"}
{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    let j = 0;\n    while (j < numbers.length) {\n       {\n        if (i != j) {\n          let distance = Math.abs(numbers [ i ] - numbers [ j ]);\n          if (distance < threshold) {\n            j++; return true;\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            }\n          }\n        }\n      j++;}\n    }\n  return false;\n  }\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    let j = 0;\n    while (j < numbers.length) {\n       {\n        if (i!= j) {\n          let distance = Math.abs(numbers [ i ] - numbers [ j ]);\n          if (distance < threshold) {\n            j++; return true;\n           \n          }\n        }\n      }\n    }\n  }\n  return false;\n}\n\n/* Check if given list of numbers has any odd number.\n  >>> hasOdd([1, 2, 3, 4, 5])\n  false\n  >>> hasOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  true\n  */\nconst hasOdd =(numbers) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers [ i ] % 2!= 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* Check if given list of numbers has any even number.\n  >>> hasEven([1, 2, 3, 4, 5])\n  false\n  >>> hasEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  true\n  */\nconst hasEven =(numbers) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers [ i ] % 2!= 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/* Check if given list of numbers has all odd numbers.\n  >>> hasOddOnly([1, 2, 3, 4, 5])\n  false\n  >>> hasOddOnly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  true\n  */\nconst hasOddOnly =(numbers) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers [ i ] % 2!= 1) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/* Check if given list of numbers has all even numbers.\n  >>> hasEvenOnly([1, 2, 3, 4, 5])\n  false\n  >>> hasEvenOnly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  true\n  */\nconst hasEvenOnly =(numbers) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers [ i ] % 2!= 1) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/* Check if given list of numbers has any number between 1 and n\n  >>> hasInRange(1, 10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  false\n  >>> hasInRange(1, 10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  true\n  */\nconst hasInRange =(min, max, numbers) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers [ i ] >= min && numbers [ i ] <= max) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* Check if given list of numbers has all numbers between 1 and n\n  >>> hasInRangeOnly(1, 10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  false\n  >>> hasInRangeOnly(1, 10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  true\n  */\nconst hasInRangeOnly =(min, max, numbers) => {\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers [ i ] < min || numbers [ i ] > max) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = {\n  hasCloseElements,\n  hasOdd,\n  hasEven,\n  hasOddOnly,\n  hasEvenOnly,\n  hasInRange,\n  hasInRangeOnly\n}<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n     {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (p == 1) {\n        t.push(i)}\n      }\n    i++;}\n  return t\n  }\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n     {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n      }\n      if (p) t.push(i)\n      i++;\n     }\n  }\n  return t\n}\n\nconsole.log(countUpTo(100))<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(lst) => {\n  var res = [ ], sw = true;\n  \n  for (; lst.length;) {\n     {\n      res.push(sw ? Math.min(... lst) : Math.max(... lst));\n      lst.splice(lst.indexOf(res.at( - 1)), 1);\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      sw = !sw;\n      }\n    }\n  return res;\n  }\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(lst) => {\n  var res = [ ], sw = true;\n  \n  for (; lst.length;) {\n     {\n      res.push(sw? Math.min(... lst) : Math.max(... lst));\n      lst.splice(lst.indexOf(res.at( - 1)), 1);\n     \n      sw =!sw;\n    }\n  }\n  return res;\n}\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return false\n  }\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n  } else if ((x + y === z || x + z === y) && (x === y || x === z || y === z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are positive.\n  Returns false in any other cases.\n  Examples\n  positiveInt(5, 2, 7) ➞ true\n  positiveInt(3, 2, 2) ➞ false\n  positiveInt(3, -2, 1) ➞ false\n  positiveInt(3.6, -2.2, 2) ➞ false\n  positiveInt(3.6, -2.2, 1) ➞ true\n  */\nconst positiveInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  if ((x + y === z || x + z === y) && (x === y || x === z || y === z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are positive integers.\n  Returns false in any other cases.\n  Examples\n  positiveInt(5, 2, 7) ➞ true\n  positiveInt(3, 2, 2) ➞ false\n  positiveInt(3, -2, 1) ➞ false\n  positiveInt(3.6, -2.2, 2) ➞ false\n  positiveInt(3.6, -2.2, 1) ➞ true\n  */\nconst positiveIntWithIntegers = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  if ((x + y === z || x + z === y) && (x === y || x === z || y === z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are between 0 and 100.\n  Returns false in any other cases.\n  Examples\n  betweenZeroAnd100(5, 2, 7) ➞ true\n  betweenZeroAnd100(3, 2, 2) ➞ true\n  betweenZeroAnd100(3, -2, 1) ➞ true\n  betweenZeroAnd100(3.6, -2.2, 2) ➞ true\n  betweenZeroAnd100(3.6, -2.2, 1) ➞ true\n  betweenZeroAnd100(3.6, -2.2, -1) ➞ false\n  */\nconst betweenZeroAnd100 = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  if ((x + y === z || x + z === y) && (x === y || x === z || y === z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are between 0 and 100 and are integers.\n  Returns false in any other cases.\n  Examples\n  betweenZeroAnd100(5, 2, 7) ➞ true\n  betweenZeroAnd100(3, 2, 2) ➞ true\n  betweenZeroAnd100(3, -2, 1) ➞ true\n  betweenZeroAnd100(3.6, -2.2, 2) ➞ true\n  betweenZeroAnd100(3.6, -2.2, 1) ➞ true\n  betweenZeroAnd100(3.6, -2.2, -1) ➞ false\n  */\nconst betweenZeroAnd100WithIntegers = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  if ((x + y === z || x + z === y) && (x === y || x === z || y === z)) {\n    return true\n  }\n  return false\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are between 0 and 100.\n  Returns false in any other cases.\n  Examples\n  betweenZeroAnd100(5, 2, 7) ➞ true\n  betweenZeroAnd100(3, 2, 2) ➞ true\n  betweenZeroAnd100(3, -2, 1) ➞ true\n  betweenZeroAnd100(3.6, -2.2, 2) ➞ true\n  betweenZeroAnd100(3.6, -2.2, 1) ➞ true\n  betweenZeroAnd100(3.6, -2.2, -1) ➞ false\n  */\nconst betweenZeroAnd100WithPositiveIntegers = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  if ((x + y ==="}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(n) => {\n  if (n == 0)\n  return 0;\n  if (n == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fib(n - 1) + fib(n - 2);\n  }\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(n) => {\n  if (n == 0)\n  return 0;\n  if (n == 1)\n \n  return 1;\n  if (n == 2)\n  return 1;\n  if (n == 3)\n  return 2;\n  if (n == 4)\n  return 3;\n  if (n == 5)\n  return 5;\n  if (n == 6)\n  return 8;\n  if (n == 7)\n  return 13;\n  if (n == 8)\n  return 21;\n  if (n == 9)\n  return 34;\n  if (n == 10)\n  return 55;\n  if (n == 11)\n  return 89;\n  if (n == 12)\n  return 144;\n  if (n == 13)\n  return 233;\n  if (n == 14)\n  return 377;\n  if (n == 15)\n  return 634;\n  if (n == 16)\n  return 987;\n  if (n == 17)\n  return 1597;\n  if (n == 18)\n  return 2584;\n  if (n == 19)\n  return 4181;\n  if (n == 20)\n  return 6765;\n  if (n == 21)\n  return 10946;\n  if (n == 22)\n  return 16380;\n  if (n == 23)\n  return 23251;\n  if (n == 24)\n  return 32924;\n  if (n == 25)\n  return 46367;\n  if (n == 26)\n  return 64994;\n  if (n == 27)\n  return 88573;\n  if (n == 28)\n  return 118098;\n  if (n == 29)\n  return 146972;\n  if (n == 30)\n  return 178741;\n  if (n == 31)\n  return 217752;\n  if (n == 32)\n  return 270154;\n  if (n == 33)\n  return 326627;\n  if (n == 34)\n  return 380305;\n  if (n == 35)\n  return 477481;\n  if (n == 36)\n  return 557806;\n  if (n == 37)\n  return 670163;\n  if (n == 38)\n  return 807917;\n  if (n == 39)\n  return 957292;\n  if (n == 40)\n  return 1143153;\n  if (n == 41)\n  return 1318658;\n  if (n == 42)\n  return 1495505;\n  if (n == 43)\n  return 1668280;\n  if (n == 44)\n  return 1844123;\n  if (n == 45)\n  return 2109901;\n  if (n == 46)\n  return 2458074;\n  if (n == 47)\n  return 2817505;\n  if (n == 48)\n  return 3290756;\n  if (n == 49)\n  return 3900249;\n  if (n == 50)\n  return 4490520;\n  if (n == 51)\n  return 5221511;\n  if (n == 52)\n  return 5878064;\n  if (n == 53)\n  return 6988257;\n  if (n == 54)\n  return 8231638;\n  if (n == 55)\n  return 9472021;\n  if (n == 56)\n  return 11121535;\n  if (n == 57)\n  return 13265548;\n  if (n == 58)\n  return 14981513;\n  if (n == 59)\n  return 16990176;\n  if (n == 60)\n  return 19168381;\n  if (n == 61)\n  return 21524606;\n  if (n == 62)\n  return 25280757;\n  if (n == 63)\n  return 29402864;\n  if (n == 64)\n  return 34359717;\n  if (n == 65)\n  return 40265324;\n  if (n == 66)\n  return 45459817;\n  if (n == 67)\n  return 51677252;\n  if (n == 68)\n  return 57646075;\n  if (n == 69)\n  return 62788866;\n  if (n == 70)\n  return 69478735;\n  if (n == 71)\n  return 76636317;\n  if (n == 72)\n  return 81920000;\n  if (n == 73)\n  return 87481281;\n  if (n == 74)\n  return 93952406;\n  if (n == 75)\n  return 101461185;\n  if (n == 76)\n  return 111048578;\n  if (n == 77)\n  return 122658316;\n  if (n == 78)\n  return 136720597;\n  if (n == 79)\n  return 150782568;\n  if (n == 80)\n  return 166738776;\n  if (n == 81)\n  return 180833777;\n  if (n == 82)\n  return 198187866;\n  if (n == 83)\n  return 219305555;\n  if (n == 84)\n  return 241589376;\n  if (n == 85)\n  return 267078148;\n  if (n == 86)\n  return 289512097;\n  if (n == 87)\n  return 322814062;\n  if (n == 88)\n  return 360751023;\n  if (n == 89)\n  return 396850396;\n  if (n == 90)\n  return 449441827;\n  if (n == 91)\n  return 494641523;\n  if (n == 92)\n  return 545245973;\n  if (n == 93)\n  return 594749250;\n  if (n == 94)\n  return 645856520;\n  if (n == 95)\n  return 706515263;\n  if (n == 96)\n  return 766595726;\n  if (n == 97)\n  return 817351810;\n  if (n"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, s1) => {\n  return JSON.stringify([ ... new Set(s0) ].sort()) === JSON.stringify([ ... new Set(s1) ].sort());\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, s1) => {\n  return JSON.stringify([... new Set(s0) ].sort()) === JSON.stringify([... new Set(s1) ].sort());\n \n}\n\n/*\n  Create a new word from two words.\n  >>> newWord('eabcd', 'dddddddabc')\n  'zabcd'\n  >>> newWord('abcd', 'dddddddabc')\n  'abcdd'\n  >>> newWord('eabcd', 'dddddddabce')\n  'eabce'\n  >>> newWord('eabcd', 'dddddddabce')\n  'eabce'\n  >>> newWord('abcd', 'dddddddabce')\n  'abce'\n  >>> newWord('abcd', 'dddddddabc')\n  'abcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabc')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabce')\n  'eabce'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabce')\n  'eabce'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabc')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabc')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabc')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabce')\n  'eabce'\n  >>> newWord('eabcd', 'dddddddabce')\n  'eabce'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabc')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabc')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabc')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabc')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabc')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabce')\n  'eabce'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabce')\n  'eabce'\n  >>> newWord('eabcd', 'dddddddabce')\n  'eabce'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabc')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabc')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabce')\n  'eabce'\n  >>> newWord('eabcd', 'dddddddabce')\n  'eabce'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabc')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabc')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabce')\n  'eabce'\n  >>> newWord('eabcd', 'dddddddabce')\n  'eabce'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd')\n  'eabcd'\n  >>> newWord('eabcd', 'dddddddabc')\n  'eabcd'\n  >>> newWord('eabcd', 'ddddddd"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(words) => {\n  let s = - 1\n  let u = - 1\n  if (words.length == 0) {\n    return ''}\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    let j = 0;\n    while (j < words [ i ].length) {\n       {\n        let y = 1\n        for (let k = 0; k < j; k++) {\n          if (words [ i ] [ j ] == words [ i ] [ k ]) {\n            y = 0}\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        if (y == 1) {\n          p++}\n        }\n      j++;}\n    if (p > s ||(p == s && words [ i ] < words [ u ])) {\n      u = i;\n      s = p;\n      }\n    }\n  return words [ u ]\n  }\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(words) => {\n  let s = - 1\n  let u = - 1\n  if (words.length == 0) {\n    return ''}\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    let j = 0;\n    while (j < words [ i ].length) {\n       {\n        let y = 1\n        for (let k = 0; k < j; k++) {\n          if (words [ i ] [ j ] == words [ i ] [ k ]) {\n            y = 0}\n         \n        }\n        if (y) {\n          p += 1}\n        else {\n          j += 1}\n       }\n    }\n    if (p > u) {\n      u = p\n      s = i}\n  }\n  return words [ s ]\n}\n\n//console.log(findMax([[\"aaa\", \"aaa\", \"aaa\"], [\"aaa\", \"bbb\", \"ccc\"]]))\nconsole.log(findMax([[\"aaa\", \"aaa\", \"aaa\"], [\"aaa\", \"bbb\", \"ccc\"], [\"ddd\", \"ddd\", \"ddd\"], [\"aaa\", \"bbb\", \"ccc\"]]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return lst1;\n  else\n  return lst2;\n  }\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n \n  return lst1;\n};\n\n/*\n  Write a function that finds the longest common substring in two strings.\n\n  if there is no common substring return null\n  */\nconst longestCommonSubstring = (str1, str2) => {\n  var max = 0;\n  var x = 0;\n  var y = 0;\n  var len = str1.length;\n  var str = '';\n\n  while (x < len) {\n    while (y < len && str1.charAt(x)!= str2.charAt(y))\n      y += 1;\n    if (y < len && str1.charAt(x) == str2.charAt(y)) {\n      if (max < y - x) {\n        max = y - x;\n        str = str1.slice(x, y + 1);\n      }\n    }\n    x += 1;\n  }\n\n  if (max === 0)\n    return null;\n  else\n    return str;\n};\n\n/*\n  Write a function that finds the longest common prefix string in two strings.\n\n  if there is no common prefix return null\n  */\nconst longestCommonPrefix = (str1, str2) => {\n  var max = 0;\n  var x = 0;\n  var y = 0;\n  var len = Math.min(str1.length, str2.length);\n  var str = '';\n\n  while (x < len) {\n    while (y < len && str1.charAt(x)!= str2.charAt(y))\n      y += 1;\n    if (y < len && str1.charAt(x) == str2.charAt(y)) {\n      if (max < y - x) {\n        max = y - x;\n        str = str1.slice(x, y + 1);\n      }\n    }\n    x += 1;\n  }\n\n  if (max === 0)\n    return null;\n  else\n    return str;\n};\n\n/*\n  Write a function that finds the longest common suffix string in two strings.\n\n  if there is no common suffix return null\n  */\nconst longestCommonSuffix = (str1, str2) => {\n  var max = 0;\n  var x = 0;\n  var y = 0;\n  var len = Math.min(str1.length, str2.length);\n  var str = '';\n\n  while (x < len) {\n    while (y < len && str1.charAt(str1.length - x - 1)!= str2.charAt(str2.length - y - 1))\n      y += 1;\n    if (y < len && str1.charAt(str1.length - x - 1) == str2.charAt(str2.length - y - 1)) {\n      if (max < str1.length - y - x) {\n        max = str1.length - y - x;\n        str = str1.slice(str1.length - y - x, str1.length - y);\n      }\n    }\n    x += 1;\n  }\n\n  if (max === 0)\n    return null;\n  else\n    return str;\n};\n\n/*\n  Write a function that finds the common prefix of two strings.\n\n  if there is no common prefix return null\n  */\nconst commonPrefix = (str1, str2) => {\n  var max = 0;\n  var x = 0;\n  var y = 0;\n  var len = Math.min(str1.length, str2.length);\n  var str = '';\n\n  while (x < len) {\n    while (y < len && str1.charAt(x)!= str2.charAt(y))\n      y += 1;\n    if (y < len && str1.charAt(x) == str2.charAt(y)) {\n      if (max < y - x) {\n        max = y - x;\n        str = str1.slice(x, y + 1);\n      }\n    }\n    x += 1;\n  }\n\n  if (max === 0)\n    return null;\n  else\n    return str;\n};\n\n/*\n  Write a function that finds the common suffix of two strings.\n\n  if there is no common suffix return null\n  */\nconst commonSuffix = (str1, str2) => {\n  var max = 0;\n  var x = 0;\n  var y = 0;\n  var len = Math.min(str1.length, str2.length);\n  var str = '';\n\n  while (x < len) {\n    while (y < len && str1.charAt(str1.length - x - 1)!= str2.charAt(str2.length - y - 1))\n      y += 1;\n    if (y < len && str1.charAt(str1.length - x - 1) == str2.charAt(str2.length - y - 1)) {\n      if (max < str1.length - y - x) {\n        max = str1.length - y - x;\n        str = str1.slice(str1.length - y - x, str1.length - y);\n      }\n    }\n    x += 1;\n  }\n\n  if (max === 0)\n    return null;\n  "}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  let i = 0;\n  while (i < Math.floor(arr.length / 2)) {\n    if (arr [ i ] != arr.at( - i - 1))\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  ans++;\n  return ans;\n  }\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  let i = 0;\n  while (i < Math.floor(arr.length / 2)) {\n    if (arr [ i ]!= arr.at( - i - 1))\n   \n      ans ++;\n    i++;\n  }\n  return ans;\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    let k = 2;\n    while (k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1)) {\n       {\n        if (p % k == 0)\n        k++; return false;\n        }\n      k++;}\n    return true;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  var f = [ 0, 1 ];\n  while (true) {\n    f.push(f.at( - 1) + f.at( - 2));\n    if (isPrime(f.at( - 1)))\n    n-=1;\n    if (n == 0)\n    return f.at( - 1);\n    }\n  }\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    let k = 2;\n    while (k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1)) {\n       {\n        if (p % k == 0)\n        k++; return false;\n        }\n      k++;}\n    return true;\n    }\n \n  while (n <= 100) {\n    if (isPrime(n)) {\n      return n;\n    }\n    n = n + (n - 1);\n  }\n  return n;\n}\n \n \n \n//console.log(primeFib(1));\nconsole.log(primeFib(2));\nconsole.log(primeFib(3));\nconsole.log(primeFib(4));\nconsole.log(primeFib(5));\n \n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  \n  var largest = 1;\n  let j = 2;\n  while (j < n + 1) {\n    if (n % j == 0 && isPrime(j))\n    largest = Math.max(largest, j);\n    j++;}\n  return largest;\n  }\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n  }\n  var max = 0;\n  var prime = 0;\n  var count = 0;\n  while (n > 1) {\n    prime = n;\n    while (!isPrime(prime)) {\n      prime--;\n    }\n    if (prime > max) {\n      max = prime;\n      count = 1;\n    } else if (prime == max) {\n      count++;\n    }\n    n = n / prime;\n  }\n  return max;\n}\n\nconsole.log(largestPrimeFactor(13195));<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == true\n  */\nconst isEqualToSumEven5 =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 7 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == true\n  */\nconst isEqualToSumEven7 =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 9 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == true\n  */\nconst isEqualToSumEven9 =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 11 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == true\n  */\nconst isEqualToSumEven11 =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 13 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(18) == true\n  */\nconst isEqualToSumEven13 =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 15 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(18) == false\n  isEqualToSumEven(20) == true\n  */\nconst isEqualToSumEven15 =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 17 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(18) == false\n  isEqualToSumEven(20) == false\n  isEqualToSumEven(22) == true\n  */\nconst isEqualToSumEven17 =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 19 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(18) == false\n  isEqualToSumEven(20) == false\n  isEqualToSumEven(22) == false\n  isEqualToSumEven(24) == true\n  */\nconst isEqualToSumEven19 =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n};\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 21 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(18) == false\n  isEqualToSumEven(20) == false\n"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      f *= i;\n      if (i % 2 == 0) {\n        k.push(f)}\n      else {\n        k.push(p)}\n      }\n    i++;}\n  return k\n  }\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      k.push(f)\n     }\n      i+=2\n    }\n  return k\n}\n\n// const f =(n) => [1,2,6,24,15]\n\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      k.push(f)\n     }\n      i+=2\n    }\n  return k\n}\n\nconst f =(n) => [1,2,6,24,15]\n\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      k.push(f)\n     }\n      i+=2\n    }\n  return k\n}\n\nconst f =(n) => [1,2,6,24,15]\n\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      k.push(f)\n     }\n      i+=2\n    }\n  return k\n}\n\nconst f =(n) => [1,2,6,24,15]\n\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      k.push(f)\n     }\n      i+=2\n    }\n  return k\n}\n\nconst f =(n) => [1,2,6,24,15]\n\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      k.push(f)\n     }\n      i+=2\n    }\n  return k\n}\n\nconst f =(n) => [1,2,6,24,15]\n\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      k.push(f)\n     }\n      i+=2\n    }\n  return k\n}\n\nconst f =(n) => [1,2,6,24,15]\n\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      k.push(f)\n     }\n      i+=2\n    }\n  return k\n}\n\nconst f =(n) => [1,2,6,24,15]\n\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      k.push(f)\n     }\n      i+=2\n    }\n  return k\n}\n\nconst f =(n) => [1,2,6,24,15]\n\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      k.push(f)\n     }\n      i+=2\n    }\n  return k\n}\n\nconst f =(n) => [1,2,6,24,15]\n\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      k.push(f)\n     }\n      i+=2\n    }\n  return k\n}\n\nconst f =(n) => [1,2,6,24,15]\n\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      k.push(f)\n     }\n      i+=2\n    }\n  return k\n}\n\nconst f =(n) => [1,2,6,24,15]\n\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      k.push(f)\n     }\n      i+=2\n    }\n  return k\n}\n\nconst f =(n) => [1,2,6,24,15]\n\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      k.push(f)\n     }\n      i+=2\n    }\n  return k\n}\n\nconst f =(n) => [1,2,6,24,15]\n\nconst f =(n) =>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, j) {\n    if (i == j)\n    return '0';\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return '1';\n    }\n  return a.split('').map((item, index) => xor(item, b [ index ])).join('');\n  }\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, j) {\n    if (i == j)\n    return '0';\n    else\n   \n  }\n}\n\nconsole.log(stringXor('0101', '0110'))<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(numbers) => {\n  var min_number = Math.min(... numbers);\n  var max_number = Math.max(... numbers);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return numbers.map(x =>(x - min_number) /(max_number - min_number));\n  }\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(numbers) => {\n  var min_number = Math.min(... numbers);\n  var max_number = Math.max(... numbers);\n \n  var new_numbers = [];\n  for(var i = 0; i < numbers.length; i++){\n    new_numbers.push((numbers[i] - min_number) / (max_number - min_number));\n  }\n  return new_numbers;\n}\n\n\n/* Given a number, returns its decimal representation in the form 'n.n'\n  >>> decimalize(3.0)\n  '3.0'\n  >>> decimalize(10.0)\n  '10.0'\n  >>> decimalize(3.0)\n  '3.0'\n  >>> decimalize(4.5)\n  '4.5'\n  >>> decimalize(7.0)\n  '7.0'\n  */\nconst decimalize = (number) => {\n  return number.toString().split(\".\")[1].split(\"e\").join(\"\");\n}\n\n/* Given a number, returns its value to the power of two.\n  >>> twoPower(3)\n  8\n  >>> twoPower(4)\n  16\n  >>> twoPower(7)\n  128\n  >>> twoPower(1)\n  1\n  >>> twoPower(0)\n  0\n  */\nconst twoPower = (number) => {\n  var binary = number.toString(2);\n  while(binary.length < 32)\n    binary = \"0\" + binary;\n  return parseInt(binary, 2);\n}\n\n/* Given a number, returns its binary representation.\n  >>> binary(10)\n  '1010'\n  >>> binary(2)\n  '10'\n  >>> binary(4)\n  '100'\n  */\nconst binary = (number) => {\n  var binary = number.toString(2);\n  while(binary.length < 32)\n    binary = \"0\" + binary;\n  return binary;\n}\n\n/* Given a number, returns its hexadecimal representation.\n  >>> hexadecimal(10)\n  'A'\n  >>> hexadecimal(3)\n  '3'\n  >>> hexadecimal(4)\n  '4'\n  */\nconst hexadecimal = (number) => {\n  var hexadecimal = number.toString(16);\n  while(hexadecimal.length < 8)\n    hexadecimal = \"0\" + hexadecimal;\n  return hexadecimal;\n}\n\n\nmodule.exports = {\n  rescaleToUnit,\n  decimalize,\n  twoPower,\n  binary,\n  hexadecimal\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let t = file_name.split( / . /)\n  if (t.length != 2) {\n    return 'No'}\n  if (t [ 1 ] != 'txt' && t [ 1 ] != 'dll' && t [ 1 ] != 'exe') {\n    return 'No'}\n  if (t [ 0 ] == '') {\n    return 'No'}\n  let a = t [ 0 ] [ 0 ].charCodeAt()\n  if ( !((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = 0\n  let i = 1;\n  while (i < t [ 0 ].length) {\n     {\n      if (t [ 0 ] [ i ].charCodeAt() >= 48 && t [ 0 ] [ i ].charCodeAt() <= 57) {\n        y++}\n      if (y > 3) {\n        i++; return 'No'}\n      }\n    i++;}\n  return 'Yes'}\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let t = file_name.split( /. /)\n  if (t.length!= 2) {\n    return 'No'}\n  if (t [ 1 ]!= 'txt' && t [ 1 ]!= 'dll' && t [ 1 ]!= 'exe') {\n    return 'No'}\n  if (t [ 0 ] == '') {\n    return 'No'}\n  let a = t [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  let b = t [ 1 ][ 0 ].charCodeAt()\n  if (b!= 32 && b!= 35 && b!= 36 && b!= 37 && b!= 39 && b!= 40 && b!= 41 && b!= 42 && b!= 43 && b!= 44 && b!= 45 && b!= 46 && b!= 47 && b!= 48 && b!= 49 && b!= 50 && b!= 51 && b!= 52 && b!= 53 && b!= 54 && b!= 55 && b!= 56 && b!= 57 && b!= 58 && b!= 59 && b!= 60 && b!= 61 && b!= 62 && b!= 63 && b!= 64) {\n    return 'No'}\n  return 'Yes'\n}\n\n\n/*\n  Given a string, return the index of the first character that is not a digit.\n  Examples:\n  indexOfNonDigit(\"12345\") => 4\n  indexOfNonDigit(\"abcdef\") => 7\n  indexOfNonDigit(\"abc123\") => 4\n  indexOfNonDigit(\"a1bc\") => 2\n  */\nconst indexOfNonDigit =(str) => {\n  let s = str.toLowerCase()\n  for (let i = 0; i < str.length; i++) {\n    if (!((s [ i ] >= 65 && s [ i ] <= 90) ||(s [ i ] >= 97 && s [ i ] <= 122))) {\n      return i}\n  }\n  return -1\n}\n\n\n/*\n  Given a string, return the index of the first character that is a digit.\n  Examples:\n  indexOfDigit(\"12345\") => 0\n  indexOfDigit(\"abcdef\") => 0\n  indexOfDigit(\"abc123\") => 3\n  indexOfDigit(\"a1bc\") => 1\n  */\nconst indexOfDigit =(str) => {\n  let s = str.toLowerCase()\n  for (let i = 0; i < str.length; i++) {\n    if ( (s [ i ] >= 65 && s [ i ] <= 90) ||(s [ i ] >= 97 && s [ i ] <= 122)) {\n      return i}\n  }\n  return -1\n}\n\n\n/*\n  Given a string, return the index of the first character that is not a letter.\n  Examples:\n  indexOfNonLetter(\"12345\") => 4\n  indexOfNonLetter(\"abcdef\") => 7\n  indexOfNonLetter(\"abc123\") => 4\n  indexOfNonLetter(\"a1bc\") => 2\n  */\nconst indexOfNonLetter =(str) => {\n  let s = str.toLowerCase()\n  for (let i = 0; i < str.length; i++) {\n    if (!((s [ i ] >= 65 && s [ i ] <= 90) ||(s [ i ] >= 97 && s [ i ] <= 122))) {\n      return i}\n  }\n  return -1\n}\n\n\n/*\n  Given a string, return the index of the first character that is a letter.\n  Examples:\n  indexOfLetter(\"12345\") => 0\n  indexOfLetter(\"abcdef\") => 0\n  indexOfLetter(\"abc123\") => 3\n  indexOfLetter(\"a1bc\") => 1\n  */\nconst indexOfLetter =(str) => {\n  let s = str.toLowerCase()\n  for (let i = 0; i < str.length; i++) {\n    if ( (s [ i ] >= 65 && s [ i ] <= 90) ||(s [ i ] >= 97 && s [ i ] <= 122)) {\n      return i}\n  }\n  return -1\n}\n\n\n/*\n  Given a string, return the index of the first character that is a space.\n  Examples:\n  indexOfSpace(\"12345\") => -1\n  indexOfSpace(\"abcdef\") => -1\n  indexOfSpace(\"abc123\") => -1\n  indexOfSpace(\"a1bc\") => -1\n  */\nconst indexOfSpace =(str) => {\n  let s = str.toLowerCase()\n  for (let i = 0; i < str.length; i++) {\n    if (s [ i ] == 32) {\n      return i}\n  }\n  return -1\n}\n\n\n/*\n  Given a string, return the index of the first character that is a blank.\n  Examples:\n  indexOfBlank(\"12345\") => 4\n  indexOfBlank(\"abcdef\") => 7\n  indexOfBlank(\"abc123\") => 4\n  indexOfBlank(\"a1bc\") => 2\n  */\nconst indexOfBlank =(str) => {\n  let s = str.toLowerCase()\n  for (let i = 0; i < str.length; i++) {\n    if (s [ i ] == 32 || s [ i ] == 35 || s [ i ] == 36 || s [ i ] == 37 || s [ i ] == 39 || s [ i ] == 40 || s [ i ] == 41 || s [ i ] == 42 || s [ i ] == 43 ||"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let ord_char = char.charCodeAt(0)\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            return prev +(ord_char > 64 && ord_char < 91 ? ord_char : 0);\n            }\n      , 0);\n      }\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let ord_char = char.charCodeAt(0)\n           \n            return prev + (ord_char > 96? ord_char - 96 : 0);\n          }, 0);\n    }\n\n\n//Task\n/*\n  Write a function that takes a string as input and returns the number of occurrences of the char\n  that appears in the string.\n\n  Examples:\n      occurrences(\"abc\") => 3\n      occurrences(\"cacaca\") => 3\n      occurrences(\"ccccccc\") => 5\n      occurrences(\"cccccccc\") => 5\n  */\nconst occurrences = (s) => {\n      if (s == '') return 0;\n      let count = 0;\n      for (let char of s) {\n        if (char.charCodeAt(0) < 127) count += 1;\n      }\n      return count;\n    }\n\n\n//Task\n/*\n  Write a function that takes a string as input and returns the number of occurrences of the char\n  that appears in the string.\n\n  Examples:\n      occurrences(\"abc\") => 3\n      occurrences(\"cacaca\") => 3\n      occurrences(\"ccccccc\") => 5\n      occurrences(\"cccccccc\") => 5\n  */\nconst occurrences2 = (s) => {\n      if (s == '') return 0;\n      let count = 0;\n      for (let char of s) {\n        if (char.charCodeAt(0) < 127) count += 1;\n      }\n      return count;\n    }\n\n\n//Task\n/*\n  Write a function that takes a string as input and returns the number of occurrences of the char\n  that appears in the string.\n\n  Examples:\n      occurrences(\"abc\") => 3\n      occurrences(\"cacaca\") => 3\n      occurrences(\"ccccccc\") => 5\n      occurrences(\"cccccccc\") => 5\n  */\nconst occurrences3 = (s) => {\n      if (s == '') return 0;\n      let count = 0;\n      for (let char of s) {\n        if (char.charCodeAt(0) < 127) count += 1;\n      }\n      return count;\n    }\n\n\n//Task\n/*\n  Write a function that takes a string as input and returns the number of occurrences of the char\n  that appears in the string.\n\n  Examples:\n      occurrences(\"abc\") => 3\n      occurrences(\"cacaca\") => 3\n      occurrences(\"ccccccc\") => 5\n      occurrences(\"cccccccc\") => 5\n  */\nconst occurrences4 = (s) => {\n      if (s == '') return 0;\n      let count = 0;\n      for (let char of s) {\n        if (char.charCodeAt(0) < 127) count += 1;\n      }\n      return count;\n    }\n\n\n//Task\n/*\n  Write a function that takes a string as input and returns the number of occurrences of the char\n  that appears in the string.\n\n  Examples:\n      occurrences(\"abc\") => 3\n      occurrences(\"cacaca\") => 3\n      occurrences(\"ccccccc\") => 5\n      occurrences(\"cccccccc\") => 5\n  */\nconst occurrences5 = (s) => {\n      if (s == '') return 0;\n      let count = 0;\n      for (let char of s) {\n        if (char.charCodeAt(0) > 127) count += 1;\n      }\n      return count;\n    }\n\n\n//Task\n/*\n  Write a function that takes a string as input and returns the number of occurrences of the char\n  that appears in the string.\n\n  Examples:\n      occurrences(\"abc\") => 3\n      occurrences(\"cacaca\") => 3\n      occurrences(\"ccccccc\") => 5\n      occurrences(\"cccccccc\") => 5\n  */\nconst occurrences6 = (s) => {\n      if (s == '') return 0;\n      let count = 0;\n      for (let char of s) {\n        if (char.charCodeAt(0) > 127) count += 1;\n      }\n      return count;\n    }\n\n\n//Task\n/*\n  Write a function that takes a string as input and returns the number of occurrences of the char\n  that appears in the string.\n\n  Examples:\n      occurrences(\"abc\") => 3\n      occurrences(\"cacaca\") => 3\n      occurrences(\"ccccccc\") => 5\n      occurrences(\"cccccccc\") => 5\n  */\nconst occurrences7 = (s) => {\n      if (s == '') return 0;\n      let count = 0;\n      for (let char of s) {\n        if (char.charCodeAt(0) < 127) count += 1;\n      }\n      return count;\n    }\n\n\n//Task\n/*\n  Write a function that takes a string as input and returns the number of occurrences of the char\n  that appears in the string.\n\n  Examples:\n      occurrences(\"abc\") => 3\n      occurrences(\"cacaca\") => 3\n      occurrences(\"ccccccc\") => 5\n      occurrences(\"cccccccc\") => 5\n  */\nconst occurrences8 = (s) => {\n      if (s == '') return 0;\n      let count = 0;\n      for (let char of s) {\n        if (char.charCodeAt(0) > 127) count += 1;\n      }\n      return count;\n    }<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != - 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= - 1);\n \n};\n\n/*\n  Convert a list of strings to an array of indexes of substrings\n  >>> indexString([], 'a')\n  []\n  >>> indexString(['abc', 'bacd', 'cde', 'array'], 'a')\n  [0, 1, 2, 3]\n  */\nconst indexString =(strings, substring) => {\n  return strings.map(x => x.indexOf(substring));\n};\n\n/*\n  Get the largest substring that appears in all the input lists\n  >>> largest(['a', 'b', 'c'])\n  'a'\n  >>> largest(['a', 'b', 'c', 'c', 'd'])\n  'c'\n  >>> largest(['a', 'b', 'c', 'c', 'd', 'e'])\n  'c'\n  >>> largest(['a', 'b', 'c', 'd', 'e'])\n  'e'\n  */\nconst largest =(strings) => {\n  return strings.reduce((prev, curr) => {\n    const index = indexString(prev, curr);\n    if(index.length > 0) {\n      return curr;\n    } else {\n      return prev;\n    }\n  });\n};\n\n/*\n  Get the smallest substring that appears in all the input lists\n  >>> smallest(['a', 'b', 'c'])\n  'a'\n  >>> smallest(['a', 'b', 'c', 'c', 'd'])\n  'a'\n  >>> smallest(['a', 'b', 'c', 'c', 'd', 'e'])\n  'a'\n  >>> smallest(['a', 'b', 'c', 'd', 'e'])\n  'a'\n  */\nconst smallest =(strings) => {\n  return strings.reduce((prev, curr) => {\n    const index = indexString(prev, curr);\n    if(index.length > 0) {\n      return curr;\n    } else {\n      return prev;\n    }\n  });\n};\n\n/*\n  Convert a list of strings to a list of lists of strings, each containing one\n  substring.\n  >>> split('abc')\n  [['a', 'b', 'c']]\n  >>> split('abcde')\n  [['a', 'b', 'c'], ['d', 'e']]\n  >>> split('abc')\n  [['a', 'b', 'c']]\n  */\nconst split =(strings) => {\n  return strings.split(' ').map(x => x.split(''));\n};\n\n/*\n  Sort a list of strings according to their length\n  >>> sortByLength([])\n  []\n  >>> sortByLength(['a', 'b', 'c'])\n  [['a', 'b', 'c']]\n  >>> sortByLength(['a', 'c', 'b'])\n  [['a', 'b', 'c']]\n  */\nconst sortByLength =(strings) => {\n  return sortBy(strings, x => x.length);\n};\n\n/*\n  Sort a list of strings according to their lexicographically smaller value\n  >>> sortByLex([])\n  []\n  >>> sortByLex(['a', 'b', 'c'])\n  [['a', 'b', 'c']]\n  >>> sortByLex(['a', 'c', 'b'])\n  [['a', 'b', 'c']]\n  */\nconst sortByLex =(strings) => {\n  return sortBy(strings, x => x);\n};\n\n/*\n  Get the first item in the list that contains given substring\n  >>> firstBySubstring(['a', 'b', 'c'], 'a')\n  'a'\n  >>> firstBySubstring(['a', 'b', 'c', 'c', 'd'], 'a')\n  'a'\n  >>> firstBySubstring(['a', 'b', 'c', 'c', 'd', 'e'], 'a')\n  'a'\n  >>> firstBySubstring(['a', 'b', 'c', 'd', 'e'], 'a')\n  'a'\n  */\nconst firstBySubstring =(strings, substring) => {\n  return filterBySubstring(strings, substring).map(x => x.split(' ')[0]);\n};\n\n/*\n  Get the last item in the list that contains given substring\n  >>> lastBySubstring(['a', 'b', 'c'], 'a')\n  'a'\n  >>> lastBySubstring(['a', 'b', 'c', 'c', 'd'], 'a')\n  'c'\n  >>> lastBySubstring(['a', 'b', 'c', 'c', 'd', 'e'], 'a')\n  'e'\n  >>> lastBySubstring(['a', 'b', 'c', 'd', 'e'], 'a')\n  'e'\n  */\nconst lastBySubstring =(strings, substring) => {\n  return filterBySubstring(strings, substring).map(x => x.split(' ')[x.split(' ').length - 1]);\n};\n\n/*\n  Convert a list of strings to a list of lists of strings, each containing one\n  substring. The first item in the list is the longest substring that appears\n  in all the input lists\n  >>> splitByLength(['a', 'b', 'c'])\n  [['a', 'b', 'c']]\n  >>> splitByLength(['a', 'b', 'c', 'c', 'd'])\n  [['a', 'b', 'c'], ['d', 'e']]\n  >>> splitByLength(['a', 'b', 'c', 'c', 'd', 'e'])\n  [['a', 'b', 'c'], ['d', 'e']]\n  */\nconst splitByLength =(strings) => {\n  return split(strings).map(x => x"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr) => {\n  if (arr.length == 0) return [ ];\n  var evens = arr.filter(x => x % 2 == 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (evens.length == 0) return [ ];\n  return [ Math.min(... evens), arr.indexOf(Math.min(... evens)) ];\n  }\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr) => {\n  if (arr.length == 0) return [ ];\n  var evens = arr.filter(x => x % 2 == 0);\n \n  if (evens.length == 0) return [ ];\n\n  var min = evens[0];\n  var minIndex = evens.indexOf(min);\n  return [min, minIndex];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    let i = operator.length - 1;\n    while (i >= 0) {\n       {\n        if (operator [ i ] == '**') {\n          let u = operand [ i ]\n          while (operand [ i + 1 ] > 1) {\n            operand [ i + 1 ]--;\n            operand [ i ] *= u;\n            }\n          operand.splice(i + 1, 1)\n          operator.splice(i, 1)\n          y = 1;\n          i--; break;\n          }\n        }\n      i--;}\n    if (y == 1) {\n      continue}\n    for (let i = 0; i < operator.length; i++) {\n      if (operator [ i ] == '*') {\n        operand [ i ] *= operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '//') {\n        operand [ i ] =(operand [ i ] - operand [ i ] % operand [ i + 1 ]) / operand [ i + 1 ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let i = 0; i < operator.length; i++) {\n      if (operator [ i ] == '+') {\n        operand [ i ]+=operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '-') {\n        operand [ i ]-=operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    }\n  return operand [ 0 ]\n  }\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    let i = operator.length - 1;\n    while (i >= 0) {\n       {\n        if (operator [ i ] == '**') {\n          let u = operand [ i ]\n          while (operand [ i + 1 ] > 1) {\n            operand [ i + 1 ]--;\n            operand [ i ] *= u;\n            }\n          operand.splice(i + 1, 1)\n          operator.splice(i, 1)\n          y = 1;\n          i--; break;\n          }\n        }\n      i--;}\n    if (y == 1) {\n      continue}\n    for (let i = 0; i < operator.length; i++) {\n      if (operator [ i ] == '*') {\n        operand [ i ] *= operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '//') {\n        operand [ i ] =(operand [ i ] - operand [ i ] % operand [ i + 1 ]) / operand [ i + 1 ]\n       \n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break\n        }\n      }\n    }\n  }\nreturn operand\n}\n\nconsole.log(doAlgebra(['*', '*', '*', '+'], [2, 3, 4, 5]))<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, remaining) => {\n  if (need <= remaining) {\n    return [ need + number, remaining - need ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return [ remaining + number, 0 ]\n  }\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, remaining) => {\n  if (need <= remaining) {\n    return [ need + number, remaining - need ]\n   \n  } else if (remaining > number) {\n    return [ number, remaining ]\n  }\n}\n\nexport { eat }\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) {\n    return y}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (len % i == 0) {\n        i++; return y}\n      }\n    i++;}\n  return x\n  }\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) {\n    return y}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n     if (n % i === 0) {\n       return x}\n    }\n  i++}\n}\nconsole.log(xOrY(8, 2, 4))\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    let j = 2;\n    while (j * j <= lst [ i ]) {\n       {\n        if (lst [ i ] % j == 0) {\n          p = 0; j++; break}\n        }\n      j++;}\n    if (p == 1 && lst [ i ] > t) {\n      t = lst [ i ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let k = 0\n  while (t != 0) {\n    k+=t % 10\n    t =(t - t % 10) / 10\n    }\n  return k\n  }\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    let j = 2;\n    while (j * j <= lst [ i ]) {\n       {\n        if (lst [ i ] % j == 0) {\n          p = 0; j++; break}\n        }\n      j++;}\n    if (p == 1 && lst [ i ] > t) {\n      t = lst [ i ]}\n   \n    }\n    }\n    return t\n}\n\nlet arr = [3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1,9,3]\nconsole.log(skjkasdkd(arr))\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  let l = [ 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine' ]\n  let t = [ ]\n  let j = 0;\n  while (j < p.length) {\n     {\n      t.push(l [ p [ j ] - 1 ])\n      }\n    j++;}\n  return t\n  }\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n      let temp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = temp\n    }\n  }\n  p = p.reverse()\n  let i = 0\n  for (let x of p) {\n    if (x > 0 && x < 10) {\n      p[i] = (x).toString()\n      i++\n    }\n  }\n  return p\n}\n\nlet arr = byLength([1, 1, 1, 1, 1, 1, 1, 1, 1])\nconsole.log(arr)\nconsole.log(byLength([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > - 0.5) {\n    value-=t}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else {\n    value+=t}\n  return value\n  }\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > - 0.5) {\n    value-=t}\n \n  return value\n}\n\nexport default closestInteger\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b == 'string') {\n    bb = Number(b.replace(',', '.'))}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (aa > bb) {\n    return a}\n  if (aa < bb) {\n    return b}\n  return null\n  }\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n \n  if (aa > bb) {\n    return aa\n  } else if (aa < bb) {\n    return bb\n  } else {\n    return null\n  }\n}\n\nconst compareTwo =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n \n  if (aa > bb) {\n    return a\n  } else if (aa < bb) {\n    return b\n  } else {\n    return null\n  }\n}\n\n/*\n  Create a function that takes two values and returns the larger value.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"5,1\"\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareThree =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n \n  if (aa > bb) {\n    return a\n  } else if (aa < bb) {\n    return b\n  } else {\n    return null\n  }\n}\n\nconst compareFour =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n \n  if (aa > bb) {\n    return a\n  } else if (aa < bb) {\n    return b\n  } else {\n    return null\n  }\n}\n\nconst compareFive =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n \n  if (aa > bb) {\n    return b\n  } else if (aa < bb) {\n    return a\n  } else {\n    return null\n  }\n}\n\n/*\n  Create a function that takes two values and returns the larger value.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"5,1\"\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareSix =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n \n  if (aa < bb) {\n    return a\n  } else if (aa > bb) {\n    return b\n  } else {\n    return null\n  }\n}\n\n/*\n  Create a function that takes two values and returns the larger value.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"5,1\"\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareSeven =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n \n  if (aa < bb) {\n    return b\n  } else if (aa > bb) {\n    return a\n  } else {\n    return null\n  }\n}\n\n/*\n  Create a function that takes two values and returns the larger value.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo("}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid [ m - 1 ] [ n ] < min) {\n    min = grid [ m - 1 ] [ n ]}\n  if (n > 0 && grid [ m ] [ n - 1 ] < min) {\n    min = grid [ m ] [ n - 1 ]}\n  if (m < grid.length - 1 && grid [ m + 1 ] [ n ] < min) {\n    min = grid [ m + 1 ] [ n ]}\n  if (n < grid.length - 1 && grid [ m ] [ n + 1 ] < min) {\n    min = grid [ m ] [ n + 1 ]}\n  let p = [ ]\n  let i = 0;\n  while (i < k) {\n     {\n      if (i % 2 == 0) {\n        p.push(1)}\n      else {\n        p.push(min)}\n      }\n    i++;}\n  return p\n  }\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n  let path = []\n  let visited = [ [ m, n ] ]\n  let stack = []\n  let curr_node = [ m, n ]\n  while (true) {\n    stack.push(curr_node)\n    if (curr_node [ 0 ] < 0 || curr_node [ 1 ] < 0) {\n      break\n    }\n    if (curr_node [ 0 ] < grid.length - 1) {\n      curr_node [ 0 ] += 1\n      if (grid [ curr_node [ 0 ] ][ curr_node [ 1 ] ] == 1) {\n        path.unshift(curr_node)\n        stack.unshift([ curr_node [ 0 ], curr_node [ 1 ] ])\n      }\n    }\n    if (curr_node [ 1 ] < grid.length - 1) {\n      curr_node [ 1 ] += 1\n      if (grid [ curr_node [ 0 ] ][ curr_node [ 1 ] ] == 1) {\n        path.unshift(curr_node)\n        stack.unshift([ curr_node [ 0 ], curr_node [ 1 ] ])\n      }\n    }\n    if (curr_node [ 0 ] > 0) {\n      curr_node [ 0 ] -= 1\n      if (grid [ curr_node [ 0 ] ][ curr_node [ 1 ] ] == 1) {\n        path.unshift(curr_node)\n        stack.unshift([ curr_node [ 0 ], curr_node [ 1 ] ])\n      }\n    }\n    if (curr_node [ 1 ] > 0) {\n      curr_node [ 1 ] -= 1\n      if (grid [ curr_node [ 0 ] ][ curr_node [ 1 ] ] == 1) {\n        path.unshift(curr_node)\n        stack.unshift([ curr_node [ 0 ], curr_node [ 1 ] ])\n      }\n    }\n  }\n  \n  path.sort((a, b) => {\n    if (a [ 0 ] == b [ 0 ]) {\n      return a [ 1 ] - b [ 1 ]\n    } else {\n      return a [ 0 ] - b [ 0 ]\n    }\n  })\n  \n  let out = []\n  for (let i = 0; i < k; i++) {\n    out.push(path [ i ])\n  }\n  return out\n}\n\nconsole.log(minPath([ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ], 1))\nconsole.log(minPath([ [ 5, 9, 3 ], [ 4, 1, 6 ], [ 7, 8, 2 ] ], 1))\nconsole.log(minPath([ [ 5, 9, 3 ], [ 4, 1, 6 ], [ 7, 8, 2 ] ], 2))\nconsole.log(minPath([ [ 5, 9, 3 ], [ 4, 1, 6 ], [ 7, 8, 2 ] ], 3))\nconsole.log(minPath([ [ 5, 9, 3 ], [ 4, 1, 6 ], [ 7, 8, 2 ] ], 4))\nconsole.log(minPath([ [ 5, 9, 3 ], [ 4, 1, 6 ], [ 7, 8, 2 ] ], 5))\nconsole.log(minPath([ [ 5, 9, 3 ], [ 4, 1, 6 ], [ 7, 8, 2 ] ], 6))\nconsole.log(minPath([ [ 5, 9, 3 ], [ 4, 1, 6 ], [ 7, 8, 2 ] ], 7))\nconsole.log(minPath([ [ 5, 9, 3 ], [ 4, 1, 6 ], [ 7, 8, 2 ] ], 8))\nconsole.log(minPath([ [ 5, 9, 3 ], [ 4, 1, 6 ], [ 7, 8, 2 ] ], 9))\nconsole.log(minPath([ [ 5, 9, 3 ], [ 4, 1, 6 ], [ 7, 8, 2 ] ], 10))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = Number(a [ 0 ]) * Number(b [ 0 ])\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let r = Number(a [ 1 ]) * Number(b [ 1 ])\n  return m % r == 0\n  }\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = Number(a [ 0 ]) * Number(b [ 0 ])\n \n  if(Number(a [ 1 ]) === 0 && Number(b [ 1 ]) === 0)\n    return true\n  if(Number(a [ 1 ]) === 0 && Number(b [ 1 ])!== 0)\n    return false\n  if(Number(a [ 0 ]) === 0 && Number(b [ 0 ])!== 0)\n    return false\n\n  if(Number(a [ 1 ]) === 0)\n    return true\n  if(Number(b [ 1 ]) === 0)\n    return false\n\n  if(Number(m) % 1 === 0)\n    return true\n  return false\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"))\nconsole.log(simplify(\"1/6\", \"2/1\"))\nconsole.log(simplify(\"7/10\", \"10/2\"))\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1) {\n        p+=lst [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i+=2;}\n  return p\n  }\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1) {\n        p+=lst [ i ]\n       \n      }\n    }\n    i++\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(S) => {\n  let t = 0\n  if (S [ 0 ] == 'I' && S [ 1 ] == ' ') {\n    t = 1}\n  let i = 0;\n  while (i < S.length) {\n     {\n      if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n        if (S [ i + 1 ] == ' ' && S [ i + 2 ] == 'I' && S [ i + 3 ] == ' ') {\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          t++\n          }\n        }\n      }\n    i++;}\n  return t\n  }\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(S) => {\n  let t = 0\n  if (S [ 0 ] == 'I' && S [ 1 ] =='') {\n    t = 1}\n  let i = 0;\n  while (i < S.length) {\n     {\n      if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n        if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' && S [ i + 3 ] =='') {\n         \n            t += 1}\n        }\n      }\n      i += 3}\n  return t}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n  .filter(s => ![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  .includes(s.toLowerCase())\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )\n  .join(\"\")\n  }\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n .filter(s =>![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n .includes(s.toLowerCase())\n \n  )\n .join(\"\")\n}\n\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 =(text) => {\n  const vowels = [ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  return text.split(\"\")\n .filter(s =>!vowels\n .includes(s.toLowerCase())\n \n  )\n .join(\"\")\n}\n\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 =(text) => {\n  const vowels = [ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  return text.split(\"\")\n .filter(s =>!vowels\n .includes(s.toLowerCase())\n \n  )\n .join(\"\")\n}\n\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 =(text) => {\n  const vowels = [ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  return text.split(\"\")\n .filter(s =>!vowels\n .includes(s.toLowerCase())\n \n  )\n .join(\"\")\n}\n\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 =(text) => {\n  const vowels = [ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  return text.split(\"\")\n .filter(s =>!vowels\n .includes(s.toLowerCase())\n \n  )\n .join(\"\")\n}\n\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels6 =(text) => {\n  const vowels = [ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  return text.split(\"\")\n .filter(s =>!vowels\n .includes(s.toLowerCase())\n \n  )\n .join(\"\")\n}\n\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels7 =(text) => {\n  const vowels = [ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  return text.split(\"\")\n .filter(s =>!vowels\n .includes(s.toLowerCase())\n \n  )\n .join(\"\")\n}\n\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels8 =(text) => {\n  const vowels = [ \"a\", \"e\", \"i\", \""}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(n) => {\n  return [ ... Array(n).keys(), n ].join(' ')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence2 =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence3 =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence4 =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence5 =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence6 =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence7 =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence8 =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence9 =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence10 =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence11 =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence12 =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence13 =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence14 =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence15 =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence16 =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n};\n\n/*\n  Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence17 =(n) => {\n  return [... Array(n).keys(), n ].join"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, b) => {\n  \n  for (; b != 0;) {\n     {\n      let temp = a;\n      a = b;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      b = temp % b;\n      }\n    }\n  return a;\n  }\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n     \n      b = temp % b;\n     }\n  }\n  return a;\n}\n\n/* Return a least common multiple of two integers a and b\n  >>> leastCommonMultiple(10, 5)\n  20\n  >>> leastCommonMultiple(25, 15)\n  15\n  */\nconst leastCommonMultiple =(a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n}\n\n/* Return a number that is the result of multiplying two integers\n  >>> multiply(3, 5)\n  15\n  >>> multiply(10, 10)\n  100\n  >>> multiply(25, 15)\n  315\n  */\nconst multiply =(a, b) => {\n  return a * b;\n}\n\n/* Return a number that is the sum of two integers\n  >>> sum(10, 5)\n  15\n  >>> sum(25, 15)\n  45\n  */\nconst sum =(a, b) => {\n  return a + b;\n}\n\n/* Return a number that is the difference of two integers\n  >>> difference(10, 5)\n  5\n  >>> difference(25, 15)\n  10\n  */\nconst difference =(a, b) => {\n  return a - b;\n}\n\n/* Return a number that is the quotient of two integers\n  >>> quotient(25, 15)\n  5\n  >>> quotient(10, 5)\n  2\n  >>> quotient(5, 2)\n  1\n  >>> quotient(1, 1)\n  0\n  */\nconst quotient =(a, b) => {\n  return a / b;\n}\n\n/* Return a number that is the product of two integers\n  >>> product(10, 5)\n  50\n  >>> product(25, 15)\n  225\n  >>> product(10, 2)\n  10\n  >>> product(2, 2)\n  4\n  */\nconst product =(a, b) => {\n  return a * b;\n}\n\n/* Return a number that is the sum of the squares of two integers\n  >>> sumOfSquares(25, 15)\n  225\n  >>> sumOfSquares(10, 5)\n  25\n  >>> sumOfSquares(1, 1)\n  1\n  */\nconst sumOfSquares =(a, b) => {\n  return a * a + b * b;\n}\n\n/* Return a number that is the difference of the squares of two integers\n  >>> differenceOfSquares(25, 15)\n  225\n  >>> differenceOfSquares(10, 5)\n  25\n  >>> differenceOfSquares(1, 1)\n  0\n  */\nconst differenceOfSquares =(a, b) => {\n  return a * a - b * b;\n}\n\n/* Return a number that is the difference of the cubes of two integers\n  >>> differenceOfCubes(25, 15)\n  225\n  >>> differenceOfCubes(10, 5)\n  25\n  >>> differenceOfCubes(1, 1)\n  0\n  */\nconst differenceOfCubes =(a, b) => {\n  return a * a * a - b * b * b;\n}\n\n/* Return a number that is the cube of the difference of two integers\n  >>> cubeOfDifference(25, 15)\n  225\n  >>> cubeOfDifference(10, 5)\n  25\n  >>> cubeOfDifference(1, 1)\n  1\n  */\nconst cubeOfDifference =(a, b) => {\n  return a * a * a - b * b * b;\n}\n\n/* Return a number that is the sum of the cubes of two integers\n  >>> sumOfCubes(25, 15)\n  225\n  >>> sumOfCubes(10, 5)\n  25\n  >>> sumOfCubes(1, 1)\n  1\n  */\nconst sumOfCubes =(a, b) => {\n  return a * a * a + b * b * b;\n}\n\n/* Return a number that is the difference of the cubes of two integers\n  >>> differenceOfCubes(25, 15)\n  225\n  >>> differenceOfCubes(10, 5)\n  25\n  >>> differenceOfCubes(1, 1)\n  0\n  */\nconst differenceOfCubes =(a, b) => {\n  return a * a * a - b * b * b;\n}\n\n/* Return a number that is the sum of the products of two integers\n  >>> sumOfProducts(10, 5)\n  50\n  >>> sumOfProducts(25, 15)\n  975\n  >>> sumOfProducts(10, 2)\n  10\n  >>> sumOfProducts(2, 2)\n  4\n  */\nconst sumOfProducts =(a, b) => {\n  return a * b;\n}\n\n/* Return a number that is the difference of the products of two integers\n  >>> differenceOfProducts(10, 5)\n  5\n  >>> differenceOfProducts(25, 15)\n  -20\n  >>> differenceOfProducts(10, 2)\n  10\n  >>> differenceOfProducts(2, 2)\n  0\n  */\nconst differenceOfProducts =(a, b) => {\n  return a - b;\n}\n\n/* Return a number that is the sum of the differences of two integers\n  >>> sumOfDifferences(10, 5)\n  -5\n  >>> sumOfDifferences(25, 15)\n  -20\n  >>> sumOfDifferences(10, 2)\n  -10\n  >>> sumOfDifferences(2, 2)\n  0\n  */\nconst sumOfDifferences =(a, b) => {\n  return a - b;\n}\n\n/* Return a number that is the difference of the differences of two integers\n  >>> differenceOfDifferences(10, 5)\n  5\n  >>> differenceOfDifferences(25, 15)\n  20\n  >>> differenceOfDifferences(10, 2)\n  -10\n  >>> differenceOfDifferences(2, 2)\n  0\n  */\nconst differenceOfDifferences =(a, b) => {\n  return a - b;\n}\n\n/* Return a number that is the sum of"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  let i = 0;\n  while (i < grid.length) {\n     {\n      let m = 0\n      for (let j = 0; j < grid [ i ].length; j++) {\n        if (grid [ i ] [ j ] == 1) {\n          m++}\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      while (m > 0) {\n        m-=capacity;\n        p++;\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  let i = 0;\n  while (i < grid.length) {\n     {\n      let m = 0\n      for (let j = 0; j < grid [ i ].length; j++) {\n        if (grid [ i ] [ j ] == 1) {\n          m++}\n        }\n     \n        if (m < capacity) {\n          p += 1\n        }\n     }\n     i++\n  }\n  return p\n}\n\n\nconsole.log(maxFill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1));\nconsole.log(maxFill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]], 2));\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 5));\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let len = string.length\n  if (len == 1 || len == 0) {\n    return false}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (len % i == 0) {\n        i++; return false}\n      }\n    i++;}\n  return true\n  }\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let len = string.length\n  if (len == 1 || len == 0) {\n    return false}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n        if (string[i] === string[string.length - i]) {\n            return false\n        }\n        if (i * i >= len) {\n            break\n        }\n        if (string[i] === string[string.length - i] && i!= 2) {\n            return false\n        }\n     }\n  }\n  return true\n}\n\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) {\n    return false\n  }\n  let i = 2\n  while (i * i <= len) {\n    if (string[i] === string[len - i]) {\n      return false\n    }\n    if (i * i >= len) {\n      break\n    }\n    if (string[i] === string[len - i] && i!= 2) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\nconsole.log(primeLength('abcdcba'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('orange'))\nconsole.log(primeLength('12'))\nconsole.log(primeLength('3'))\nconsole.log(primeLength('1'))\nconsole.log(primeLength('2'))\nconsole.log(primeLength('0'))\nconsole.log(primeLength('hello'))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 0) {\n        t+=lst [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i+=2;}\n  return t\n  }\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 0) {\n        t+=lst [ i ]\n       \n      }\n      i++\n    }\n  }\n  return t\n}\n\n// add([4, 2, 6, 7]) ==> 2\n\n// add([1, 2, 3, 4]) ==> 2\n\n// add([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> 10\n\n// add([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> 10\n\n\n// add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==> 20\n\n// add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ==> 40\n\n// add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]) ==> 80\n\n// add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) ==> 160\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = [ ]\n  let i = a;\n  while (i <= b) {\n     {\n      if (i == 2 || i == 4 || i == 6 || i == 8) {\n        y.push(i)}\n      }\n    i++;}\n  return y\n  }\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n  let start = a;\n  let end = b;\n  let result = [];\n \n  while (start <= end) {\n    if (start % 2 === 0) {\n      result.push(start);\n    }\n    start += 2;\n  }\n \n  return result;\n}\n\n/*\n  Given two non-empty strings s and t, return true if they are anagrams,\n  or false otherwise.\n  (Note: s and t are not empty strings.)\n  */\nconst isAnagram =(s, t) => {\n  let sLength = s.length;\n  let tLength = t.length;\n  if (sLength!== tLength) {\n    return false;\n  }\n \n  let sHash = 0;\n  let tHash = 0;\n  for (let i = 0; i < sLength; i++) {\n    sHash = (sHash * 31) + s.charCodeAt(i);\n    tHash = (tHash * 31) + t.charCodeAt(i);\n  }\n \n  return (sHash === tHash);\n}\n\n/*\n  Given a non-empty string s and an integer n, return a string made of the\n  first n characters of s, with the last n characters of s appended to the\n  end.\n  (Note: 1 < n < s.length.)\n  */\nconst addEnd =(s, n) => {\n  return s.slice(0, n) + s.slice(n);\n}\n\n/*\n  Given a string s and an integer n, return a string made of the first n\n  characters of s, followed by the last n characters of s appended to the\n  end.\n  (Note: 1 <= n <= s.length.)\n  */\nconst addStart =(s, n) => {\n  return s.slice(0, n) + s.slice(n);\n}\n\n/*\n  Return a string consisting of the first n characters of s followed by the\n  last n characters of s, where n is the length of the longest common\n  prefix of s and t. If s has a length of n or less, return an empty string.\n  (Note: n < s.length)\n  */\nconst getLongestCommonPrefix =(s, t) => {\n  let prefix = s.slice(0, Math.min(s.length, t.length));\n  let lastCommon = s.lastIndexOf(t.slice(0, Math.min(s.length, t.length)));\n \n  return (lastCommon === 0)? prefix : prefix.slice(0, lastCommon);\n}\n\n/*\n  Given two strings s and t, return true if they are the same or if they\n  are anagrams of each other, or false otherwise.\n  (Note: s and t are not empty strings.)\n  */\nconst same =(s, t) => {\n  let sLength = s.length;\n  let tLength = t.length;\n  if (sLength!== tLength) {\n    return false;\n  }\n \n  let sHash = 0;\n  let tHash = 0;\n  for (let i = 0; i < sLength; i++) {\n    sHash = (sHash * 31) + s.charCodeAt(i);\n    tHash = (tHash * 31) + t.charCodeAt(i);\n  }\n \n  return (sHash === tHash);\n}\n\n/*\n  Return the string that has the same number of anagrams as t, starting\n  with the first anagram of t.\n  (Note: 1 <= t.length <= 1000)\n  */\nconst getAnagram =(t) => {\n  let tLength = t.length;\n  let result = [];\n \n  for (let i = 1; i <= tLength; i++) {\n    let anagrams = generateIntegers(1, tLength);\n    let anagram = addEnd(anagrams.shift(), t[i]);\n    if (anagrams.length === tLength) {\n      result.push(anagram);\n    }\n  }\n \n  return result.join('');\n}\n\n/*\n  Return the number of distinct anagrams of t.\n  (Note: 1 <= t.length <= 1000)\n  */\nconst countAnagrams =(t) => {\n  let tLength = t.length;\n  let result = 1;\n \n  for (let i = 1; i <= tLength; i++) {\n    let anagrams = generateIntegers(1, tLength);\n    let anagram = addEnd(anagrams.shift(), t[i]);\n    if (anagrams.length === tLength) {\n      result *= 2;\n    }\n  }\n \n  return result;\n}\n\n/*\n  Given two non-empty strings s and t, return true if they are the same or if\n  they are anagrams of each other, or false otherwise.\n  (Note: s and t are not empty strings.)\n  */\nconst sameOrAnagram =(s, t) => {\n  return (same(s, t) || isAnagram(s, t));\n}\n\n/*\n  Return the string that has the same number of anagrams as t, starting\n  with the first anagram of t.\n  (Note: 1 <= t.length <= 1000)\n  */\nconst getAnagramOrSame =(t) => {\n  let tLength = t.length;\n  let result = [];\n \n  for (let i = 1; i <= tLength; i++) {\n    let anagrams = generateIntegers(1, tLength);\n    let anagram = addStart(anagrams.shift(), t[i]);\n    if (anagrams.length === tLength) {\n      result.push(anagram);\n    }\n  }\n \n  return result.join('');\n}\n\n/*\n  Given"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p [ ind ].toString(2)\n      let f1 = 0\n      let u = 0;\n      while (u < w1.length) {\n         {\n          if (w1 [ u ] == '1') {\n            f1++}\n          }\n        u++;}\n      let w2 = p [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (f2 < f1 ||(f1 == f2 && p [ k ] < p [ ind ])) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  return p\n  }\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p [ ind ].toString(2)\n      let f1 = 0\n      let u = 0;\n      while (u < w1.length) {\n         {\n          if (w1 [ u ] == '1') {\n            f1++}\n          }\n        u++;}\n      let w2 = p [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n        }\n      if (f1 > f2) {\n        ind = k}\n      }\n    }\n    p.splice(ind, 1)\n  }\n  return p;\n}\n\nconsole.log(sortArray([1, 0, 2, 3, 4]));<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const i of lst)\n      frq [ i ]+=1;\n      var ans = - 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let i = 1;\n      while (i < frq.length) {\n            if (frq [ i ] >= i)\n            ans = i;\n            i++;}\n      return ans;\n      }\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const i of lst)\n      frq [ i ]+=1;\n      var ans = - 1;\n     \n      for (const i of frq) {\n          if (i > 0 && frq[i] >= i) {\n              ans = Math.max(ans, i);\n          }\n      }\n      return ans;\n  }\n  console.log(search([4, 1, 2, 2, 3, 1]));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  let i = 0;\n  while (i < num.length) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  if (primes.includes(num [ i ]))\n  total++;\n  return total;\n  }\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  let i = 0;\n  while (i < num.length) {\n   \n    if (primes.indexOf(num[i]) > -1) {\n      total += 1;\n    }\n    i++;\n  }\n  return total;\n}\n\nconsole.log(hexKey(\"ABCDEF\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n \n};\n\n/*\n  Convert a binary number in string form to a decimal number.\n\n  The function should return a number.\n\n  Example:\n  binaryToDecimal(\"db100000db\")   # returns 15\n  */\nconst binaryToDecimal =(binary) => {\n  return parseInt(binary.substring(2, binary.length - 2), 2);\n};\n\n\n/*\n  Given a binary number in string form, return a number in decimal form.\n\n  Examples:\n  binaryToDecimal(\"db100000db\")   # returns 15\n  */\nconst binaryToDecimal =(binary) => {\n  return parseInt(binary, 2);\n};\n\n/*\n  Given a decimal number, return a binary number in string form.\n\n  Examples:\n  binaryToDecimal(15)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return decimal.toString(2);\n};\n\n/*\n  Given a binary number in string form, return a decimal number in binary form.\n\n  Examples:\n  binaryToDecimal(\"db100000db\")   # returns \"15\"\n  */\nconst binaryToDecimal =(binary) => {\n  return parseInt(binary, 2);\n};\n\n/*\n  Given a decimal number, return a binary number in string form.\n\n  Examples:\n  binaryToDecimal(15)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return decimal.toString(2);\n};\n\n/*\n  Given a binary number in string form, return a decimal number in binary form.\n\n  Examples:\n  binaryToDecimal(\"db100000db\")   # returns \"15\"\n  */\nconst binaryToDecimal =(binary) => {\n  return parseInt(binary, 2);\n};\n\n/*\n  Given a decimal number, return a binary number in string form.\n\n  Examples:\n  binaryToDecimal(15)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return decimal.toString(2);\n};\n\n/*\n  Given a binary number in string form, return a decimal number in binary form.\n\n  Examples:\n  binaryToDecimal(\"db100000db\")   # returns \"15\"\n  */\nconst binaryToDecimal =(binary) => {\n  return parseInt(binary, 2);\n};\n\n/*\n  Given a decimal number, return a binary number in string form.\n\n  Examples:\n  binaryToDecimal(15)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return decimal.toString(2);\n};\n\n/*\n  Given a binary number in string form, return a decimal number in binary form.\n\n  Examples:\n  binaryToDecimal(\"db100000db\")   # returns \"15\"\n  */\nconst binaryToDecimal =(binary) => {\n  return parseInt(binary, 2);\n};\n\n/*\n  Given a decimal number, return a binary number in string form.\n\n  Examples:\n  binaryToDecimal(15)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return decimal.toString(2);\n};\n\n/*\n  Given a decimal number, return a binary number in string form.\n\n  Examples:\n  binaryToDecimal(\"15\")   # returns \"db100000db\"\n  */\nconst binaryToDecimal =(binary) => {\n  return parseInt(binary, 2);\n};\n\n/*\n  Given a decimal number, return a binary number in string form.\n\n  Examples:\n  binaryToDecimal(15)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return decimal.toString(2);\n};\n\n/*\n  Given a decimal number, return a binary number in string form.\n\n  Examples:\n  binaryToDecimal(\"15\")   # returns \"db100000db\"\n  */\nconst binaryToDecimal =(binary) => {\n  return parseInt(binary, 2);\n};\n\n/*\n  Given a decimal number, return a binary number in string form.\n\n  Examples:\n  binaryToDecimal(15)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return decimal.toString(2);\n};\n\n/*\n  Given a decimal number, return a binary number in string form.\n\n  Examples:\n  binaryToDecimal(\"15\")   # returns \"db100000db\"\n  */\nconst binaryToDecimal =(binary) => {\n  return parseInt(binary, 2);\n};\n\n/*\n  Given a decimal number, return a binary number in string form.\n\n  Examples:\n  binaryToDecimal(15)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return decimal.toString(2);\n};\n\n/*\n  Given a decimal number, return a binary number in string form.\n\n  Examples:\n  binaryToDecimal(\"15\")   # returns \"db100000db\"\n  */\nconst binaryToDecimal =(binary) => {\n  return parseInt(binary, 2);\n};\n\n/*\n  Given a decimal number, return a binary number in string form.\n\n  Examples:\n  binaryToDecimal(15)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return decimal.toString(2);\n};\n\n/*\n  Given a decimal number, return a binary number in string form.\n\n  Examples:\n  binaryToDecimal(\"15\")   # returns \"db100000db\"\n  */\nconst binaryToDecimal =(binary) =>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] > 0 && lst [ i ] < a) {\n        a = lst [ i ]}\n      if (lst [ i ] < 0 && lst [ i ] > b) {\n        b = lst [ i ]}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  if (a == Infinity) {\n    a = null}\n  if (b == - Infinity) {\n    b = null}\n  return(b, a)\n  }\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] > 0 && lst [ i ] < a) {\n        a = lst [ i ]}\n      if (lst [ i ] < 0 && lst [ i ] > b) {\n        b = lst [ i ]}\n     \n    }\n    i += 1\n  }\n  if (a == Infinity) {\n    return (null, null)\n  } else if (b == - Infinity) {\n    return (null, a)\n  } else {\n    return (a, b)\n  }\n}\n\nconst main = () => {\n  let a = largestSmallestIntegers([2, 4, 1, 3, 5, 7])\n  console.log(`Largest of 2's: ${a[1]}`)\n  console.log(`Smallest of 2's: ${a[0]}`)\n  let b = largestSmallestIntegers([])\n  console.log(`Largest of null: ${b[1]}`)\n  console.log(`Smallest of null: ${b[0]}`)\n  let c = largestSmallestIntegers([0])\n  console.log(`Largest of 0: ${c[1]}`)\n  console.log(`Smallest of 0: ${c[0]}`)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(n) => {\n  if (n == 0 || n == 1)\n  return 0;\n  if (n == 2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(n) => {\n  if (n == 0 || n == 1)\n  return 0;\n  if (n == 2)\n \n  return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(3));\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, index) =>(index % 3 == 0 ? three [ index / 3 ] : item));\n  }\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n  var sorted = l.filter((item, index) => index % 3!= 0);\n  sorted.forEach((item, index) => sorted[index] = l[index]);\n  sorted.sort((a, b) =>(a - b));\n  \n  return sorted;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by four, while its values at the indicies that are divisible by four are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFourth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFourth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFourth =(l) => {\n  var four = l.filter((item, index) => index % 4 == 0);\n  four.sort((a, b) =>(a - b));\n \n  var sorted = l.filter((item, index) => index % 4!= 0);\n  sorted.forEach((item, index) => sorted[index] = l[index]);\n  sorted.sort((a, b) =>(a - b));\n  \n  return sorted;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifth =(l) => {\n  var five = l.filter((item, index) => index % 5 == 0);\n  five.sort((a, b) =>(a - b));\n \n  var sorted = l.filter((item, index) => index % 5!= 0);\n  sorted.forEach((item, index) => sorted[index] = l[index]);\n  sorted.sort((a, b) =>(a - b));\n  \n  return sorted;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by six, while its values at the indicies that are divisible by six are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSixth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSixth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSixth =(l) => {\n  var six = l.filter((item, index) => index % 6 == 0);\n  six.sort((a, b) =>(a - b));\n \n  var sorted = l.filter((item, index) => index % 6!= 0);\n  sorted.forEach((item, index) => sorted[index] = l[index]);\n  sorted.sort((a, b) =>(a - b));\n  \n  return sorted;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by seven, while its values at the indicies that are divisible by seven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSeventh([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSeventh([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSeventh =(l) => {\n  var seven = l.filter((item, index) => index % 7 == 0);\n  seven.sort((a, b) =>(a - b));\n \n  var sorted = l.filter((item, index) => index % 7!= 0);\n  sorted.forEach((item, index) => sorted[index] = l[index]);\n  sorted.sort((a, b) =>(a - b));\n  \n  return sorted;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by eight, while its values at the indicies that are divisible by eight are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortEighth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEighth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEighth =(l) => {\n  var eighth = l.filter((item, index) => index % 8 == 0);\n  eighth.sort((a, b) =>(a - b));\n \n  var sorted = l.filter((item, index) => index % 8!= 0);\n  sorted.forEach((item, index) => sorted[index] = l[index]);\n  sorted.sort((a, b) =>(a - b));\n  \n  return sorted;\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by nine, while its values at the indic"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value+=n;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    prod_value *= n;\n    }\n  return [ sum_value, prod_value ];\n  }\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value+=n;\n   \n    prod_value *= n;\n  }\n  return {sum: sum_value, prod: prod_value}\n}\n\nmodule.exports = sumProduct;<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = 1\n    let j = 0;\n    while (j < c.length) {\n       {\n        if (s [ i ] == c [ j ]) {\n          y = 0\n          }\n        }\n      j++;}\n    if (y == 1) {\n      t+=s [ i ]\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t [ i ] != t [ t.length - i - 1 ]) {\n      z = 0\n      }\n    }\n  if (z == 0) {\n    return(z, false)\n    }\n  return(z, true)\n  }\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = 1\n    let j = 0;\n    while (j < c.length) {\n       {\n        if (s [ i ] == c [ j ]) {\n          y = 0\n          }\n        }\n      j++;}\n    if (y == 1) {\n      t+=s [ i ]\n      }\n   \n   }\n   return (t, (t == s))\n}\n  \n\nlet t = reverseDelete(\"abcdedcba\", \"ab\")\nconsole.log(t)\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(l) => {\n  for (let i = 0; i < l.length; i++)\n  let j = i + 1;\n  while (j < l.length) {\n    for (let k = j + 1; k < l.length; k++)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    j++;}\n  if (l [ i ] + l [ j ] + l [ k ] == 0)\n  return true;\n  return false;\n  }\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(l) => {\n  for (let i = 0; i < l.length; i++)\n  let j = i + 1;\n  while (j < l.length) {\n    for (let k = j + 1; k < l.length; k++)\n   \n      if (l[i] + l[j] + l[k] === 0)\n        return true;\n    j++;\n  }\n  return false;\n};\n\n/*\n  triplesSumToZero returns true if there are three distinct elements in\n  the list that sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, -2, 1])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1, 3, 0])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7, 9, 0])\n  false\n  */\nconst sumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++)\n    sum += l[i];\n  return (sum === 0)? true : false;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that sum\n  to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7, 9, 0])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++)\n    sum += l[i];\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] + l[j] === 0)\n        return true;\n  return false;\n};\n\n/*\n  sumToZero returns true if there are three distinct elements in the list that sum to zero, and false otherwise.\n\n  >>> sumToZero([1, 3, -2, 1])\n  false\n  >>> sumToZero([1, 3, -2, 1, 3, 0])\n  true\n  >>> sumToZero([1, 2, 3, 7])\n  false\n  >>> sumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> sumToZero([1, 2, 3, 7, 9, 0])\n  false\n  */\nconst sumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++)\n    sum += l[i];\n  return (sum === 0)? true : false;\n};\n\n/*\n  findTriples returns a list of triples of integers that sum to zero.\n  it takes a list of integers as an input.\n\n  >>> findTriples([1, 3, 5, 0])\n  []\n  >>> findTriples([1, 3, -2, 1])\n  [[1, 3, -2]]\n  >>> findTriples([1, 2, 3, 7])\n  []\n  >>> findTriples([2, 4, -5, 3, 9, 7])\n  [[2, 4, -5], [2, 4, -5]]\n  >>> findTriples([1, 2, 3, 7, 9, 0])\n  []\n  */\nconst findTriples = (l) => {\n  let triples = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n        triples.push([l[i], l[j], 0]);\n      }\n    }\n  }\n  return triples;\n};\n\nmodule.exports = {\n  triplesSumToZero,\n  sumToZero,\n  findTriples\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map [ x ]);\n  }\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n  const notes = music_string.split(\" \");\n  const result = []\n  for (let i = 0; i < notes.length; i++) {\n    let last_note = notes[i].slice(-1)\n    result.push(note_map[last_note])\n  }\n  return result\n}\n\n/*\n  Input:\n  'o o| o| o o o o o| o o o| o o o o o o o o o| o o o| o o o o o o o o o o o| o o o| o o o o o o o o o o o o| o o o| o o o o o o o o o o o o| o o o o o o o o o o o o o o o o| o o o o o o o o o o o o o o o| o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o| o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  let i = arr.length - 1;\n  while (i > 0) {\n     {\n      if (arr [ i ] < arr [ i - 1 ]) {\n        i--; return i}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i--;}\n  return - 1\n  }\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  let i = arr.length - 1;\n  while (i > 0) {\n     {\n      if (arr [ i ] < arr [ i - 1 ]) {\n        i--; return i}\n     \n    }\n  }\n  return - 1\n}\n\nconsole.log(canArrange([1,2,4,3,5]));\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = q.length - 1;\n  \n  for (; i < j;) {\n     {\n      if (q [ i ] != q [ j ])\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      return false;\n      i++;\n      j--;\n      }\n    }\n  return true;\n  }\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = q.length - 1;\n  \n  for (; i < j;) {\n     {\n      if (q [ i ]!= q [ j ])\n     \n      break;\n    }\n    \n    ++i;\n    --j;\n  }\n  return i >= 0 && i < q.length;\n}\n\n// console.log(willItFly([1, 2, 3, 2, 1], 5));\n// console.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3], 5));\nconsole.log(willItFly([1, 2, 3, 2, 1], 3));\nconsole.log(willItFly([1, 2, 3, 2, 1], 1));\nconsole.log(willItFly([3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 8));\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(s) => {\n  return encodeCyclic(encodeCyclic(s));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(s) => {\n  return encodeCyclic(encodeCyclic(s));\n \n}\n\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------\n\n//\n// ------------------------------------------------------------------------------------"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )).join(\"\");\n  }\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n  )).join(\"\");\n}\n\n/*\n  encodes a string using a-z\n  */\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string. Returns an array of all the possible\n  encoded strings from the given string.\n  */\nconst encodeAll = (s) => {\n  let encodedStrings = [];\n  for(let i = 0; i < 26; i++) {\n    encodedStrings.push(encode(encodeShift(s + String.fromCharCode(i + \"a\".charCodeAt(0)) + \"a\")));\n  }\n  return encodedStrings;\n}\n\n/*\n  takes as input an array of encoded strings. Returns a single string\n  decoded from all the encoded strings.\n  */\nconst decodeAll = (encodedStrings) => {\n  let decodedString = \"\";\n  encodedStrings.forEach(e => decodedString += decode(e));\n  return decodedString;\n}\n\nmodule.exports = {\n  encode,\n  decode,\n  encodeAll,\n  decodeAll\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let len = 0\n  if (hi > lo) {\n    len = hi - lo}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (len == 1 || len == 0) {\n    return 'NO'}\n  let i = 2;\n  while (i * i <= len) {\n     {\n      if (len % i == 0) {\n        i++; return 'NO'}\n      }\n    i++;}\n  return 'YES'}\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let len = 0\n  if (hi > lo) {\n    len = hi - lo}\n \n  return (len % 1 === 0)? \"YES\" : \"NO\"\n}\n\n/*\n[input/output] samples:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n*/\n\n//let intersect = (interval1, interval2) => {\n//  let min = interval1 [ 0 ]\n//  let max = interval1 [ 1 ]\n//  let lo = interval2 [ 0 ]\n//  let hi = interval2 [ 1 ]\n//  \n//  if (lo < min) {\n//    min = lo}\n//  if (hi > max) {\n//    max = hi}\n//  \n//  return (min <= max)? \"YES\" : \"NO\"\n//}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(n) => {\n  return n *(n + 1) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(n) => {\n  return n *(n + 1) / 2;\n \n}\n\n/*\n  sumFromNToN is a function that sums numbers from 1 to n.\n  >>> sumFromNToN(30)\n  5050\n  >>> sumFromNToN(100)\n  8784\n  >>> sumFromNToN(5)\n  15\n  >>> sumFromNToN(10)\n  55\n  >>> sumFromNToN(1)\n  1\n  */\nconst sumFromNToN =(n) => {\n  let total = 0;\n  for (let i = 1; i <= n; i++) {\n    total += i;\n  }\n  return total;\n \n}\n\n/*\n  sumInBounds is a function that sums numbers in a range.\n  >>> sumInBounds(1,5)\n  6\n  >>> sumInBounds(1,10)\n  55\n  >>> sumInBounds(0,100)\n  50525\n  >>> sumInBounds(100,999)\n  101050\n  >>> sumInBounds(999,1010)\n  9995\n  */\nconst sumInBounds =(low, high) => {\n  let total = 0;\n  for (let i = low; i <= high; i++) {\n    total += i;\n  }\n  return total;\n}\n\n/*\n  sumInRange is a function that sums numbers in a range.\n  >>> sumInRange(1,5)\n  6\n  >>> sumInRange(1,10)\n  55\n  >>> sumInRange(0,100)\n  50525\n  >>> sumInRange(100,999)\n  101050\n  >>> sumInRange(999,1010)\n  9995\n  */\nconst sumInRange =(low, high) => {\n  let total = 0;\n  for (let i = low; i <= high; i++) {\n    total += i;\n  }\n  return total;\n}\n\n/*\n  sumOfDigits is a function that sums numbers that are multiples of ten.\n  >>> sumOfDigits(100)\n  55\n  >>> sumOfDigits(1000)\n  44\n  >>> sumOfDigits(1010)\n  10\n  >>> sumOfDigits(1001)\n  11\n  >>> sumOfDigits(1005)\n  5\n  >>> sumOfDigits(1111)\n  1\n  */\nconst sumOfDigits =(n) => {\n  let total = 0;\n  for (let i = 1; i <= n; i++) {\n    let digits = n % 10;\n    total += digits;\n    n = Math.floor(n / 10);\n  }\n  return total;\n}\n\n/*\n  sumOfSquares is a function that sums the squares of numbers.\n  >>> sumOfSquares(100)\n  55\n  >>> sumOfSquares(1000)\n  4416\n  >>> sumOfSquares(1010)\n  1020\n  >>> sumOfSquares(1001)\n  1101\n  >>> sumOfSquares(1005)\n  5\n  >>> sumOfSquares(1111)\n  1\n  */\nconst sumOfSquares =(n) => {\n  let total = 0;\n  for (let i = 1; i <= n; i++) {\n    total += Math.pow(i, 2);\n  }\n  return total;\n}\n\n/*\n  sumOfPrimes is a function that sums the primes.\n  >>> sumOfPrimes(100)\n  22\n  >>> sumOfPrimes(1000)\n  33\n  >>> sumOfPrimes(1010)\n  22\n  >>> sumOfPrimes(1001)\n  22\n  >>> sumOfPrimes(1005)\n  2\n  >>> sumOfPrimes(1111)\n  1\n  */\nconst sumOfPrimes =(n) => {\n  let total = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      total += i;\n    }\n  }\n  return total;\n}\n\nconst isPrime =(n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\n/*\n  sumOfFibonacci is a function that sums the fibonacci numbers.\n  >>> sumOfFibonacci(100)\n  55\n  >>> sumOfFibonacci(1000)\n  55\n  >>> sumOfFibonacci(1010)\n  55\n  >>> sumOfFibonacci(1001)\n  55\n  >>> sumOfFibonacci(1005)\n  55\n  >>> sumOfFibonacci(1111)\n  55\n  >>> sumOfFibonacci(10000)\n  1635\n  */\nconst sumOfFibonacci =(n) => {\n  let total = 0;\n  let a = 1;\n  let b = 1;\n  for (let i = 1; i <= n; i++) {\n    total += a;\n    a = b;\n    b = a + b;\n  }\n  return total;\n}\n\nmodule.exports = {\n  sumToN,\n  sumFromNToN,\n  sumInBounds,\n  sumInRange,\n  sumOfDigits,\n  sumOfSquares,\n  sumOfPrimes,\n  sumOfFibonacci\n}\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(n) => {\n  if (n < 2)\n  return false;\n  let k = 2;\n  while (k < n - 1) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    k++;}\n  if (n % k == 0)\n  return false;\n  return true;\n  }\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(n) => {\n  if (n < 2)\n  return false;\n  let k = 2;\n  while (k < n - 1) {\n   \n   if (n % k === 0) {\n    return false;\n   }\n   k += 1;\n  }\n  return true;\n};\n\n/* Return the number of prime numbers less than a number n.\n  >>> countPrimes(100)\n  100\n  >>> countPrimes(10000)\n  9700\n  >>> countPrimes(1000001)\n  99892\n  >>> countPrimes(1000000)\n  999098\n  */\nconst countPrimes =(n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i += 1) {\n    if (isPrime(i)) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n//export {isPrime, countPrimes}\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  let i = 0;\n  while (i < t.length) {\n     {\n      let l = 0\n      for (let j = 0; j < t [ i ].length; j++) {\n        if (t [ i ] [ j ] != 'a' && t [ i ] [ j ] != 'e' && t [ i ] [ j ] != 'i' && t [ i ] [ j ] != 'o' && t [ i ] [ j ] != 'u' && t [ i ] [ j ] != 'A' &&\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        t [ i ] [ j ] != 'U' && t [ i ] [ j ] != 'O' && t [ i ] [ j ] != 'I' && t [ i ] [ j ] != 'E') {\n          l++\n          }\n        }\n      if (l == n) {\n        k.push(t [ i ])}\n      }\n    i++;}\n  return k\n  }\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  let i = 0;\n  while (i < t.length) {\n     {\n      let l = 0\n      for (let j = 0; j < t [ i ].length; j++) {\n        if (t [ i ] [ j ]!= 'a' && t [ i ] [ j ]!= 'e' && t [ i ] [ j ]!= 'i' && t [ i ] [ j ]!= 'o' && t [ i ] [ j ]!= 'u' && t [ i ] [ j ]!= 'A' &&\n       \n          t [ i ] [ j ]!= 'E' && t [ i ] [ j ]!= 'I' && t [ i ] [ j ]!= 'O' && t [ i ] [ j ]!= 'U') {\n          l = j\n          break\n        }\n      }\n      if (l === t [ i ].length) {\n        k.push(t [ i ])\n        i++\n      } else {\n        k.push(t [ i ].slice(l))\n        i++\n      }\n    }\n  }\n  return k.filter(x => x.length === n)\n}\n\nselectWords(\"Hello world\", 4)<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var lis = [ ];\n  for (const i of s.split(\" \"))\n  if ( !isNaN(i))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n  }\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var lis = [ ];\n  for (const i of s.split(\" \"))\n  if (!isNaN(i))\n \n    lis.push(i);\n  \n  let total = 0;\n  for (const i of lis)\n  total += i;\n  \n  return n - total;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (h < 0) {\n        y = - 1; h = - h;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      \n      for (; h >= 10;) {\n         {\n          m+=h % 10;\n          h =(h - h % 10) / 10;\n          }\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      m+=y * h\n      while (d >= 10) {\n        n+=d % 10;\n        d =(d - d % 10) / 10;\n        }\n      n+=u * d\n      if (m > n) {\n        let tmp = p [ k ]\n        p [ k ] = p [ k + 1 ]\n        p [ k + 1 ] = tmp\n        }\n      }\n    }\n  return p\n  }\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (h < 0) {\n        y = - 1; h = - h;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      \n      for (; h >= 10;) {\n         {\n          m+=h % 10;\n          h =(h - h % 10) / 10;\n          }\n        }\n     \n        for (; d >= 10;) {\n          {\n          n+=d % 10;\n          d =(d - d % 10) / 10;\n          }\n        }\n        if (m > n) {\n          p [ k + 1 ] = p [ k ]\n          p [ k ] = y * u * (p [ j + 1 ] - n) + y * (p [ j ] - m)\n          j--\n        } else if (m < n) {\n          p [ k + 1 ] = p [ k ]\n          p [ k ] = y * u * (p [ j + 1 ] - n) + y * (p [ j ] - m)\n          j--\n        }\n      }\n    }\n  }\n  return p\n}\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12]))\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 4)\n  9.0\n  */\nconst triangleArea2 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 5)\n  25.0\n  */\nconst triangleArea3 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 6)\n  30.0\n  */\nconst triangleArea4 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 7)\n  35.0\n  */\nconst triangleArea5 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 8)\n  40.0\n  */\nconst triangleArea6 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 9)\n  45.0\n  */\nconst triangleArea7 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 10)\n  50.0\n  */\nconst triangleArea8 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 11)\n  55.0\n  */\nconst triangleArea9 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 12)\n  60.0\n  */\nconst triangleArea10 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 13)\n  65.0\n  */\nconst triangleArea11 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 14)\n  70.0\n  */\nconst triangleArea12 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 15)\n  75.0\n  */\nconst triangleArea13 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 16)\n  80.0\n  */\nconst triangleArea14 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 17)\n  85.0\n  */\nconst triangleArea15 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 18)\n  90.0\n  */\nconst triangleArea16 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 19)\n  95.0\n  */\nconst triangleArea17 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 20)\n  100.0\n  */\nconst triangleArea18 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 21)\n  105.0\n  */\nconst triangleArea19 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 22)\n  110.0\n  */\nconst triangleArea20 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 23)\n  115.0\n  */\nconst triangleArea21 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 24)\n  120.0\n  */\nconst triangleArea22 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 25)\n  125.0\n  */\nconst triangleArea23 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /* Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 26)\n  130.0\n  */\nconst triangleArea24 =(a, h) => {\n  return a * h / 2.0;\n \n};\n\n//  /*"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    running_max = Math.max(running_max, n);\n    result.push(running_max);\n    }\n  return result;\n  }\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n    if (running_max < n)\n    running_max = n;\n    result.push(running_max);\n  }\n  return result;\n}\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 3, 2]\n  */\nconst rollingMin =(numbers) => {\n  var running_min, result = [ ];\n  for (const n of numbers) {\n    if (running_min == undefined)\n    running_min = n;\n    else\n    if (running_min > n)\n    running_min = n;\n    result.push(running_min);\n  }\n  return result;\n}\n\n/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingSum =(numbers) => {\n  var running_sum = 0;\n  for (const n of numbers)\n    running_sum += n;\n  return [running_sum];\n}\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 3, 2]\n  */\nconst rollingDifference =(numbers) => {\n  var running_difference = 0;\n  for (const n of numbers)\n    running_difference += n;\n  return [running_difference];\n}\n\n/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingProduct =(numbers) => {\n  var running_product = 1;\n  for (const n of numbers)\n    running_product *= n;\n  return [running_product];\n}\n\n/* From a given list of integers, generate a list of rolling minimum element found until given moment\n  in the sequence.\n  >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 2, 2, 3, 3, 2]\n  */\nconst rollingQuotient =(numbers) => {\n  var running_quotient = 1;\n  for (const n of numbers)\n    running_quotient /= n;\n  return [running_quotient];\n}\n\n/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingAverage =(numbers) => {\n  var running_average = 0;\n  for (const n of numbers)\n    running_average += n;\n  return [running_average / numbers.length];\n}\n\nmodule.exports = {\n  rollingSum,\n  rollingDifference,\n  rollingProduct,\n  rollingQuotient,\n  rollingMax,\n  rollingMin,\n  rollingAverage\n}\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    depth+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    depth-=1;\n    if (depth < 0)\n    return false;\n    }\n  return depth == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    depth+=1;\n    else\n   \n      if (b == \")\")\n      depth-=1;\n  }\n  return (depth == 0);\n};\n\n/*\n  Given a string, find the longest palindromic substring in it.\n  Assume the maximum length of the string is 1000.\n\n  >>> longestPalindrome(\"cab\")\n  'bac'\n  >>> longestPalindrome(\"abb\")\n  'ba'\n  >>> longestPalindrome(\"a\")\n  ''\n  >>> longestPalindrome(\"abac\")\n  'abac'\n  >>> longestPalindrome(\"abb\")\n  'abb'\n  >>> longestPalindrome(\"\")\n  ''\n  >>> longestPalindrome(\"aabbcc\")\n  'aabb'\n  >>> longestPalindrome(\"abca\")\n  'abca'\n  >>> longestPalindrome(\"abc\")\n  'abc'\n  >>> longestPalindrome(\"\")\n  ''\n  >>> longestPalindrome(\"a\")\n  ''\n  >>> longestPalindrome(\"abcd\")\n  'abcd'\n  >>> longestPalindrome(\"abc\")\n  'abc'\n  >>> longestPalindrome(\"a\")\n  ''\n  >>> longestPalindrome(\"\")\n  ''\n  >>> longestPalindrome(\"\")\n  ''\n  */\nconst longestPalindrome = (string) => {\n    if (string.length == 0)\n      return \"\";\n    var mid = (string.length - 1) / 2;\n    var left = 0;\n    var right = string.length - 1;\n    while (left <= right) {\n        var temp = string.charAt(left);\n        if (string.charAt(right) == temp) {\n            if (left < mid) {\n                if (string.charAt(right - 1) == temp)\n                    left += 1;\n                else\n                    right -= 1;\n            }\n            else {\n                if (string.charAt(left + 1) == temp)\n                    right -= 1;\n                else\n                    left += 1;\n            }\n        }\n        else\n            break;\n    }\n    return string.slice(left, right + 1);\n};\n\n/*\n  Given a string, write a function to check whether it is a valid palindrome.\n\n  Assume a string consists of lowercase or uppercase letters.\n\n  We define a palindrome as a string that reads the same backward as forward.\n  Write a function to check whether the given string is a palindrome.\n\n  Assume you have already solved the regular expression challenge.\n\n  Follow up: Could you solve it in-place and in one-pass?\n  */\nconst isPalindrome = (string) => {\n  var reversed = string.split(\"\").reverse().join(\"\");\n  return string === reversed;\n};\n\n/*\n  Given a string s, return the longest palindromic substring in s.\n\n  Assume the maximum length of the string is 1000.\n\n  Follow up: Could you solve it in-place and in one-pass?\n  */\nconst longestPalindromeSubstring = (string) => {\n    if (string.length == 0)\n      return \"\";\n    var mid = (string.length - 1) / 2;\n    var left = 0;\n    var right = string.length - 1;\n    while (left <= right) {\n        var temp = string.charAt(left);\n        if (string.charAt(right) == temp) {\n            if (left < mid) {\n                if (string.charAt(right - 1) == temp)\n                    left += 1;\n                else\n                    right -= 1;\n            }\n            else {\n                if (string.charAt(left + 1) == temp)\n                    right -= 1;\n                else\n                    left += 1;\n            }\n        }\n        else\n            break;\n    }\n    return string.slice(left, right + 1);\n};\n\n/*\n  Given a string s, return the longest palindromic substring in s and its\n  start index in the given string.\n\n  Assume the maximum length of the string is 1000.\n  */\nconst longestPalindromeSubstring = (string) => {\n    if (string.length == 0)\n      return \"\";\n    var mid = (string.length - 1) / 2;\n    var left = 0;\n    var right = string.length - 1;\n    while (left <= right) {\n        var temp = string.charAt(left);\n        if (string.charAt(right) == temp) {\n            if (left < mid) {\n                if (string.charAt(right - 1) == temp)\n                    left += 1;\n                else\n                    right -= 1;\n            }\n            else {\n                if (string.charAt(left + 1) == temp)\n                    right -= 1;\n                else\n                    left += 1;\n            }\n        }\n        else\n            break;\n    }\n    return [string.slice(left, right + 1), left];\n};<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  let i = 0;\n  while (i < guess.length) {\n     {\n      game [ i ]-=guess [ i ]\n      if (game [ i ] < 0)\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      game [ i ] = - game [ i ];}\n    i++;}\n  return game\n  }\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  let i = 0;\n  while (i < guess.length) {\n     {\n      game [ i ]-=guess [ i ]\n      if (game [ i ] < 0)\n     \n      {\n      game [ i ]+=1\n      }\n      \n      else\n      {\n      return [0,0,0,0,0,0]\n      }\n     }\n     i++\n  }\n  return [0,0,0,0,0,0]\n}\n\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var area = Math.pow(s *(s - a) *(s - b) *(s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c) / 12), 2);\n}\n\nconsole.log(triangleArea(1, 2, 3));<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(l) => {\n  let i = 0;\n  while (i < l.length) {\n    for (let j = i + 1; j < l.length; j++)\n    if (l [ i ] + l [ j ] == 0)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  return true;\n  return false;\n  }\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(l) => {\n  let i = 0;\n  while (i < l.length) {\n    for (let j = i + 1; j < l.length; j++)\n    if (l [ i ] + l [ j ] == 0)\n   \n      return true;\n    i++;\n  }\n  return false;\n};\n\n// console.log(pairsSumToZero([1, 3, 5, 0]));\n// console.log(pairsSumToZero([1, 3, -2, 1]));\n// console.log(pairsSumToZero([1, 2, 3, 7]));\n// console.log(pairsSumToZero([2, 4, -5, 3, 5, 7]));\n// console.log(pairsSumToZero([1]));\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(lst) => {\n  if (lst.length == 0) {\n    return true}\n  let dup = 1\n  let pre = lst [ 0 ]\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] < pre) {\n        i++; return false}\n      if (lst [ i ] == pre) {\n        dup+=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        if (dup == 3) {\n          i++; return false}\n        }\n      else {\n        pre = lst [ i ]\n        dup = 1\n        }\n      }\n    i++;}\n  return true\n  }\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(lst) => {\n  if (lst.length == 0) {\n    return true}\n  let dup = 1\n  let pre = lst [ 0 ]\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] < pre) {\n        i++; return false}\n      if (lst [ i ] == pre) {\n        dup+=1;\n       \n      }\n    }\n    pre = lst [ i ];\n  }\n  return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(arr) => {\n  if (arr.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  let i = 0;\n  while (i < arr.length) {\n     {\n      s+=arr [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (arr [ i ] == 0) {\n        i++; return 0}\n      if (arr [ i ] < 0) {\n        n = - n; s-=2 * arr [ i ]}\n      }\n    i++;}\n  return s * n\n  }\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(arr) => {\n  if (arr.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  let i = 0;\n  while (i < arr.length) {\n     {\n      s+=arr [ i ]\n     \n      switch (arr[i]) {\n        case 1:\n          n++\n          break\n        case -1:\n          n--\n          break\n        default:\n          s+=arr[i]*n\n          break\n      }\n    }\n    i++\n  }\n  return s\n}\n\nconsole.log(prodSigns([1, 2, 2, -4]))\nconsole.log(prodSigns([0, 1]))\nconsole.log(prodSigns([1, 2, 2, -4, -3, 0, 4, 3, 1, -2, -1]))\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t = t * 10\n      }\n    i++;}\n  return t\n  }\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n    }\n    let f = (1 * i)\n    if (f == n) {\n      return 1}\n    if (f == n - 1) {\n      return 2}\n    if (f < n) {\n      i++\n    }\n  }\n  return 0\n}\n\nconsole.log(startsOneEnds(1))\nconsole.log(startsOneEnds(2))\nconsole.log(startsOneEnds(3))\nconsole.log(startsOneEnds(4))\nconsole.log(startsOneEnds(5))\nconsole.log(startsOneEnds(6))\nconsole.log(startsOneEnds(7))\nconsole.log(startsOneEnds(8))\nconsole.log(startsOneEnds(9))\nconsole.log(startsOneEnds(10))\nconsole.log(startsOneEnds(11))\nconsole.log(startsOneEnds(12))\nconsole.log(startsOneEnds(13))\nconsole.log(startsOneEnds(14))\nconsole.log(startsOneEnds(15))\nconsole.log(startsOneEnds(16))\nconsole.log(startsOneEnds(17))\nconsole.log(startsOneEnds(18))\nconsole.log(startsOneEnds(19))\nconsole.log(startsOneEnds(20))\nconsole.log(startsOneEnds(21))\nconsole.log(startsOneEnds(22))\nconsole.log(startsOneEnds(23))\nconsole.log(startsOneEnds(24))\nconsole.log(startsOneEnds(25))\nconsole.log(startsOneEnds(26))\nconsole.log(startsOneEnds(27))\nconsole.log(startsOneEnds(28))\nconsole.log(startsOneEnds(29))\nconsole.log(startsOneEnds(30))\nconsole.log(startsOneEnds(31))\nconsole.log(startsOneEnds(32))\nconsole.log(startsOneEnds(33))\nconsole.log(startsOneEnds(34))\nconsole.log(startsOneEnds(35))\nconsole.log(startsOneEnds(36))\nconsole.log(startsOneEnds(37))\nconsole.log(startsOneEnds(38))\nconsole.log(startsOneEnds(39))\nconsole.log(startsOneEnds(40))\nconsole.log(startsOneEnds(41))\nconsole.log(startsOneEnds(42))\nconsole.log(startsOneEnds(43))\nconsole.log(startsOneEnds(44))\nconsole.log(startsOneEnds(45))\nconsole.log(startsOneEnds(46))\nconsole.log(startsOneEnds(47))\nconsole.log(startsOneEnds(48))\nconsole.log(startsOneEnds(49))\nconsole.log(startsOneEnds(50))\nconsole.log(startsOneEnds(51))\nconsole.log(startsOneEnds(52))\nconsole.log(startsOneEnds(53))\nconsole.log(startsOneEnds(54))\nconsole.log(startsOneEnds(55))\nconsole.log(startsOneEnds(56))\nconsole.log(startsOneEnds(57))\nconsole.log(startsOneEnds(58))\nconsole.log(startsOneEnds(59))\nconsole.log(startsOneEnds(60))\nconsole.log(startsOneEnds(61))\nconsole.log(startsOneEnds(62))\nconsole.log(startsOneEnds(63))\nconsole.log(startsOneEnds(64))\nconsole.log(startsOneEnds(65))\nconsole.log(startsOneEnds(66))\nconsole.log(startsOneEnds(67))\nconsole.log(startsOneEnds(68))\nconsole.log(startsOneEnds(69))\nconsole.log(startsOneEnds(70))\nconsole.log(startsOneEnds(71))\nconsole.log(startsOneEnds(72))\nconsole.log(startsOneEnds(73))\nconsole.log(startsOneEnds(74))\nconsole.log(startsOneEnds(75))\nconsole.log(startsOneEnds(76))\nconsole.log(startsOneEnds(77))\nconsole.log(startsOneEnds(78))\nconsole.log(startsOneEnds(79))\nconsole.log(startsOneEnds(80))\nconsole.log(startsOneEnds(81))\nconsole.log(startsOneEnds(82))\nconsole.log(startsOneEnds(83))\nconsole.log(startsOneEnds(84))\nconsole.log(startsOneEnds(85))\nconsole.log(startsOneEnds(86))\nconsole.log(startsOneEnds(87))\nconsole.log(startsOneEnds(88))\nconsole.log(startsOneEnds(89))\nconsole.log(startsOneEnds(90))\nconsole.log(startsOneEnds(91))\nconsole.log(startsOneEnds(92))\nconsole.log(startsOneEnds(93))\nconsole.log(startsOneEnds(94))\nconsole.log(startsOneEnds(95))\nconsole.log(startsOneEnds(96))\nconsole.log(startsOneEnds(97))\nconsole.log(startsOneEnds(98))\nconsole.log(startsOneEnds(99))\nconsole.log(startsOneEnds(100))\nconsole.log(startsOneEnds(101))\nconsole.log(startsOneEnds(102))\nconsole.log(startsOneEnds(103))\nconsole.log(startsOneEnds(104))\nconsole.log(startsOneEnds(105))\nconsole.log(startsOneEnds(106))\nconsole."}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        t *= n;\n        }\n      }\n    p++;\n    n--;\n    }\n  return t\n  }\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n        t = t * n;\n       }\n    }\n    \n    n--;\n    p = t;\n  }\n  return t;\n};\n\n/*\n  For example:\n  >>> factorial(3)\n  6\n  \n  The function will receive an integer as input and should return the factorial\n  of this integer.\n  */\nconst factorial =(n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n        t = t * n;\n       }\n    }\n    \n    n--;\n    p = t;\n  }\n  return t;\n};\n\n/*\n  The function will receive an integer as input and should return the natural\n  logarithm of this integer.\n  */\nconst naturalLogarithm =(n) => {\n  let p = 1;\n  let t = 0;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n        t = t + Math.log(n);\n       }\n    }\n    \n    n--;\n    p = t;\n  }\n  return t;\n};\n\n/*\n  The function will receive an integer as input and should return the square root\n  of this integer.\n  */\nconst squareRoot =(n) => {\n  let p = 0;\n  let t = 0;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n        t = t + Math.sqrt(n);\n       }\n    }\n    \n    n--;\n    p = t;\n  }\n  return t;\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  digits in the number represented as a string.\n  */\nconst numberOfDigits =(n) => {\n  let p = 0;\n  let t = 0;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n        t = t + n.toString().length;\n       }\n    }\n    \n    n--;\n    p = t;\n  }\n  return t;\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  letters in the number represented as a string.\n  */\nconst numberOfLetters =(n) => {\n  let p = 0;\n  let t = 0;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n        t = t + n.toString().length;\n       }\n    }\n    \n    n--;\n    p = t;\n  }\n  return t;\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  triplets of digits in the number represented as a string.\n  */\nconst numberOfTriplets =(n) => {\n  let p = 0;\n  let t = 0;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n        t = t + n.toString().length;\n       }\n    }\n    \n    n--;\n    p = t;\n  }\n  return t;\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  quads of digits in the number represented as a string.\n  */\nconst numberOfQuads =(n) => {\n  let p = 0;\n  let t = 0;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n        t = t + n.toString().length;\n       }\n    }\n    \n    n--;\n    p = t;\n  }\n  return t;\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  seventeen digits in the number represented as a string.\n  */\nconst numberOfSeventeenDigits =(n) => {\n  let p = 0;\n  let t = 0;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n        t = t + n.toString().length;\n       }\n    }\n    \n    n--;\n    p = t;\n  }\n  return t;\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  twenty four digits in the number represented as a string.\n  */\nconst numberOfTwentyFourDigits =(n) => {\n  let p = 0;\n  let t = 0;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n        t = t + n.toString().length;\n       }\n    }\n    \n    n--;\n    p = t;\n  }\n  return t;\n};\n\n/*\n  The function will receive an integer as input and should return the number of\n  twenty eight digits in the number represented as a string.\n  */\nconst numberOfTwentyEightDigits =(n) => {\n  let p = 0;\n  let t = 0;\n  while (n > 1"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    return max_depth;\n    }\n  return paren_string.split(' ')\n  .filter(x => x != '')\n  .map(x => parseParenGroup(x));\n  }\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n        }\n      }\n    return max_depth;\n    };\n  var parseNestedParens = function(s) {\n    var groups = [];\n    for (var i = 0; i < s.length; i++) {\n      groups.push(parseParenGroup(s.slice(i)));\n      }\n    return groups;\n    };\n  return parseNestedParens(paren_string);\n}\n\n/* Input to this function is a string representing multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst getMaxDepth = (paren_string) => {\n  var parseNestedParens = function(s) {\n    var groups = [];\n    for (var i = 0; i < s.length; i++) {\n      groups.push(parseParenGroup(s.slice(i)));\n      }\n    return groups;\n    };\n  return parseNestedParens(paren_string).reduce((a, b) => Math.max(a, b), 0);\n}\n\n/*\n  Input: a string like '(()())()()'\n  Output: {\n    [1,2,3,4]: '()()()',\n    [1,3]: '()()()',\n    [1,2]: '()()()',\n    [1,1]: '()()()',\n    [1]: '()()()',\n    []: '()()()'\n  }\n*/\nconst getAllGroupings = (s) => {\n  var groupings = {};\n  var group_id = 0;\n  var parseNestedParens = function(s) {\n    var groups = [];\n    for (var i = 0; i < s.length; i++) {\n      groups.push(parseParenGroup(s.slice(i)));\n      }\n    return groups;\n    };\n  for (var i = 0; i < s.length; i++) {\n    var group = parseNestedParens(s.slice(i));\n    if (!groupings[group]) {\n      groupings[group] = group_id;\n      group_id++;\n      }\n    }\n  return groupings;\n};\n\n/*\n  Input: a string like '(()())()()'\n  Output: [1,2,3,4]\n*/\nconst getAllDepth = (s) => {\n  var groupings = getAllGroupings(s);\n  var depths = [];\n  for (var group in groupings) {\n    depths.push(groupings[group]);\n    }\n  return depths;\n};\n\n/*\n  Input: a string like '(()())()()'\n  Output: [1,2,3,4]\n*/\nconst getAllDepths = (s) => {\n  var groupings = getAllGroupings(s);\n  var depths = [];\n  for (var group in groupings) {\n    depths.push(getMaxDepth(groupings[group]));\n    }\n  return depths;\n};\n\n/*\n  Input: a string like '(()())()()'\n  Output: [1,2,3,4]\n*/\nconst getAllNestedDepths = (s) => {\n  var groupings = getAllGroupings(s);\n  var depths = [];\n  for (var group in groupings) {\n    depths.push(getNestedDepth(groupings[group]));\n    }\n  return depths;\n};\n\n/*\n  Input: a string like '(()())()()'\n  Output: [1,2,3,4]\n*/\nconst getNestedDepth = (s) => {\n  var depths = getAllDepths(s);\n  var nested_depth = 0;\n  for (var depth in depths) {\n    nested_depth = Math.max(nested_depth, depth);\n    }\n  return nested_depth;\n};\n\n/*\n  Input: a string like '(()())()()'\n  Output: [1,2,3,4]\n*/\nconst getAllNestedNestedDepths = (s) => {\n  var groupings = getAllGroupings(s);\n  var depths = [];\n  for (var group in groupings) {\n    depths.push(getNestedDepth(groupings[group]));\n    }\n  return depths;\n};\n\n/*\n  Input: a string like '(()())()()'\n  Output: [1,2,3,4]\n*/\nconst getAllNestedNestedDepthsIncludingNewlines = (s) => {\n  var groupings = getAllGroupings(s);\n  var depths = [];\n  for (var group in groupings) {\n    depths.push(getNestedDepth(groupings[group]));\n    }\n  return depths;\n};\n\n/*\n  Input: a string like '(()())()()'\n  Output: [1,2,3,4]\n*/\nconst getAllNestedNestedDepthsIncludingNewlines = (s) => {\n  var groupings = getAllGroupings(s);\n  var depths = [];\n  for (var group in groupings) {\n    depths.push(getNestedDepth(groupings[group]));\n    }\n  return depths;\n};\n\nmodule.exports = {\n  getAllNestedNestedDepths,\n  getAllNestedNestedDepthsIncludingNewlines,\n  getAllNestedDepths,\n  get"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    let j = i + 1;\n    while (j < n - 1) {\n       {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        for (let k = j + 1; k < n; k++) {\n          if ((y [ i ] + y [ j ] + y [ k ]) % 3 == 0) {\n            u++}\n          }\n        }\n      j++;}\n    }\n  return u\n  }\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    let j = i + 1;\n    while (j < n - 1) {\n       {\n       \n       let k = j + 1;\n       let a = y[i] + y[j] + y[k]\n       if (a % 3 === 0) {\n         u++\n       }\n       }\n       j++\n    }\n  }\n  return u\n}\n\nconst getMaxTriples2 =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    let j = i + 1;\n    while (j < n - 1) {\n      {\n      let k = j + 1;\n      let a = y[i] + y[j] + y[k]\n      if (a % 3 === 0) {\n        u++\n      }\n      }\n      j++\n    }\n  }\n  return u\n}\n\n\nconst getMaxTriples3 =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    let j = i + 1;\n    while (j < n - 1) {\n      {\n      let k = j + 1;\n      let a = y[i] + y[j] + y[k]\n      if (a % 3 === 0) {\n        u++\n      }\n      }\n      j++\n    }\n  }\n  return u\n}\n\n\nconst getMaxTriples4 =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    let j = i + 1;\n    while (j < n - 1) {\n      {\n      let k = j + 1;\n      let a = y[i] + y[j] + y[k]\n      if (a % 3 === 0) {\n        u++\n      }\n      }\n      j++\n    }\n  }\n  return u\n}\n\nconst getMaxTriples5 =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    let j = i + 1;\n    while (j < n - 1) {\n      {\n      let k = j + 1;\n      let a = y[i] + y[j] + y[k]\n      if (a % 3 === 0) {\n        u++\n      }\n      }\n      j++\n    }\n  }\n  return u\n}\n\nconst getMaxTriples6 =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    let j = i + 1;\n    while (j < n - 1) {\n      {\n      let k = j + 1;\n      let a = y[i] + y[j] + y[k]\n      if (a % 3 === 0) {\n        u++\n      }\n      }\n      j++\n    }\n  }\n  return u\n}\n\nconst getMaxTriples7 =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    let j = i + 1;\n    while (j < n - 1) {\n      {\n      let k = j + 1;\n      let a = y[i] + y[j] + y[k]\n      if (a % 3 === 0) {\n        u++\n      }\n      }\n      j++\n    }\n  }\n  return u\n}\n\nconst getMaxTriples8 =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    let j = i + 1;\n    while (j < n - 1) {\n      {\n      let k = j + 1;\n      let a = y[i] + y[j] + y[k]\n      if (a % 3 === 0) {\n        u++\n      }\n      }\n      j++\n    }\n  }\n  return u\n}\n\nconst getMaxTriples9 =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(arr) => {\n  if (arr.length == 0) {\n    return true}\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    let j = 1;\n    while (j < len) {\n       {\n        if (arr [ j ] < arr [ j - 1 ]) {\n          t = 0;\n          j++; break;\n          }\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      j++;}\n    if (t == 1) {\n      k = 1;\n      break;\n      }\n    arr.push(arr [ 0 ]);\n    arr.shift()\n    }\n  if (k == 1) {\n    return true}\n  return false\n  }\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(arr) => {\n  if (arr.length == 0) {\n    return true}\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    let j = 1;\n    while (j < len) {\n       {\n        if (arr [ j ] < arr [ j - 1 ]) {\n          t = 0;\n          j++; break;\n          }\n       \n        else {\n          arr [ k ] = arr [ j ];\n          k++; j++;\n        }\n      }\n    }\n    if (t) {\n      return false\n    }\n  }\n  return true\n}\n\nmoveOneBall([3, 5, 4, 1, 2]);\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(number) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm' ]\n  let i = 12\n  let res = ''\n  for (; number;) {\n     {\n      let div =(number - number % num [ i ]) / num [ i ]\n      number = number % num [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      while (div) {\n        res+=sym [ i ]\n        div-=1\n        }\n      i-=1\n      }\n    }\n  return res\n  }\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(number) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m' ]\n  let i = 12\n  let res = ''\n  for (; number;) {\n     {\n      let div =(number - number % num [ i ]) / num [ i ]\n      number = number % num [ i ]\n     \n      if (number === 0) {\n        res += sym [ i ]\n        break\n      } else if (div === 1) {\n        res += 'i'\n      } else if (div === 2) {\n        res += 'ii'\n      } else if (div === 3) {\n        res += 'iii'\n      } else if (div === 4) {\n        res += 'iv'\n      } else if (div === 5) {\n        res += 'v'\n      } else if (div === 6) {\n        res += 'vi'\n      } else if (div === 7) {\n        res += 'vii'\n      } else if (div === 8) {\n        res += 'viii'\n      } else if (div === 9) {\n        res += 'ix'\n      } else if (div === 10) {\n        res += 'x'\n      } else if (div === 20) {\n        res += 'xx'\n      } else if (div === 30) {\n        res += 'xxx'\n      } else if (div === 40) {\n        res += 'xxxx'\n      } else if (div === 50) {\n        res += 'xl'\n      } else if (div === 60) {\n        res += 'l'\n      } else if (div === 70) {\n        res += 'xlx'\n      } else if (div === 80) {\n        res += 'lx'\n      } else if (div === 90) {\n        res += 'xix'\n      } else if (div === 100) {\n        res += 'c'\n      } else if (div === 200) {\n        res += 'cc'\n      } else if (div === 300) {\n        res += 'ccc'\n      } else if (div === 400) {\n        res += 'cd'\n      } else if (div === 500) {\n        res += 'd'\n      } else if (div === 600) {\n        res +='m'\n      } else if (div === 700) {\n        res +='mm'\n      } else if (div === 800) {\n        res +='mmm'\n      } else if (div === 900) {\n        res +='mmx'\n      } else if (div === 1000) {\n        res +='mxx'\n      }\n    }\n    i--\n    if (i === 0) {\n      res +='m'\n      break\n    }\n  }\n  return res.toLowerCase()\n}\n\nmodule.exports = intToMiniRoman\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n  return s.split('').reverse().join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else\n  return s.slice( - shift) + s.slice(0, - shift);\n  }\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n  return s.split('').reverse().join('');\n \n  return s.split('').reverse().join('');\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @description Add two numbers and return the sum.\n  * If the numbers are the same, return the number itself.\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n  * 6\n  * >>> add(3, 3)\n"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let p = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      p.push(lst [ i ])\n      }\n    }\n  let j = p.length - 2;\n  while (j >= 0) {\n     {\n      for (let k = 0; k <= j; k++) {\n        let f = 0\n        if (p [ k ].length > p [ k + 1 ].length) {\n          f = 1}\n        if (p [ k ].length == p [ k + 1 ].length) {\n          let r = p [ k ].length\n          for (let l = 0; l < r; l++) {\n            if (p [ k ] [ l ].charCodeAt() > p [ k + 1 ] [ l ].charCodeAt()) {\n              f = 1;\n             \n", "canonical_solution": "# print('@@this is the line to split##')\n              j--; break;\n              }\n            if (p [ k ] [ l ].charCodeAt() < p [ k + 1 ] [ l ].charCodeAt()) {\n              j--; break;\n              }\n            }\n          }\n        if (f == 1) {\n          let tmp = p [ k ]\n          p [ k ] = p [ k + 1 ]\n          p [ k + 1 ] = tmp\n          }\n        }\n      }\n    j--;}\n  return p\n  }\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let p = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      p.push(lst [ i ])\n      }\n    }\n  let j = p.length - 2;\n  while (j >= 0) {\n     {\n      for (let k = 0; k <= j; k++) {\n        let f = 0\n        if (p [ k ].length > p [ k + 1 ].length) {\n          f = 1}\n        if (p [ k ].length == p [ k + 1 ].length) {\n          let r = p [ k ].length\n          for (let l = 0; l < r; l++) {\n            if (p [ k ] [ l ].charCodeAt() > p [ k + 1 ] [ l ].charCodeAt()) {\n              f = 1;\n             \n            }\n          }\n          if (f == 0) {\n            break\n          }\n        }\n      }\n      if (f == 1) {\n        p [ j + 1 ] = p [ k + 1 ]\n        p.splice (k + 1, 1)\n        j--\n      }\n    }\n  }\n  return p\n}\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]))\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]))\n<|endoftext|>"}
