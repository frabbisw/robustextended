{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    depth+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    depth-=1;\n    if (depth < 0)\n    return false;\n    }\n  return depth == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    depth+=1;\n    else\n   \n    if (b == \">\")\n    depth -= 1;\n    if (depth < 0)\n    return false;\n  }\n  return true;\n}\n\n/*\n  This program finds the minimum number of brackets that can be added to\n  brackets to make the input brackets.\n\n  >>> minBrackets(\"\")\n  0\n  >>> minBrackets(\"<\")\n  0\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<><>\")\n  1\n  >>> minBrackets(\"<><<\")\n  2\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<><\")\n  2\n  >>> minBrackets(\"<><>\")\n  2\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<><\")\n  2\n  >>> minBrackets(\"<><<\")\n  3\n  >>> minBrackets(\"<><<>\")\n  3\n  >>> minBrackets(\"<><<>\")\n  3\n  >>> minBrackets(\"<><>\")\n  2\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<><\")\n  2\n  >>> minBrackets(\"<><>\")\n  3\n  >>> minBrackets(\"<><><\")\n  4\n  >>> minBrackets(\"<><><>\")\n  4\n  >>> minBrackets(\"<><><>\")\n  4\n  >>> minBrackets(\"<><>\")\n  2\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<><>\")\n  3\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<><>\")\n  3\n  >>> minBrackets(\"<><\")\n  2\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<><\")\n  2\n  >>> minBrackets(\"<><>\")\n  3\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<><\")\n  2\n  >>> minBrackets(\"<><>\")\n  3\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<><>\")\n  3\n  >>> minBrackets(\"<><\")\n  2\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<><>\")\n  3\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<><>\")\n  3\n  >>> minBrackets(\"<><\")\n  2\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<><>\")\n  3\n  >>> minBrackets(\"<><>\")\n  3\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<><\")\n  2\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<><>\")\n  3\n  >>> minBrackets(\"<><>\")\n  3\n  >>> minBrackets(\"<><>\")\n  3\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<><\")\n  2\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")\n  1\n  >>> minBrackets(\"<>\")"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(l) => {\n  return Math.max(... l);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(l) => {\n  return Math.max(... l);\n \n}\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement =(l) => {\n  return Math.min(... l);\n \n}\n\n/*Return maximum of a list of numbers.\n  >>> max([1, 2, 3])\n  3\n  >>> max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max =(l) => {\n  return Math.max(... l);\n}\n\n/*Return minimum of a list of numbers.\n  >>> min([1, 2, 3])\n  1\n  >>> min([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -5\n  */\nconst min =(l) => {\n  return Math.min(... l);\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3])\n  3\n  >>> largest([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst largest =(l) => {\n  return Math.max(... l);\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3])\n  3\n  >>> largest([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst smallest =(l) => {\n  return Math.min(... l);\n}\n\n/*Return the sum of the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum =(l) => {\n  return l.reduce((sum, num) => sum + num, 0);\n}\n\n/*Return the sum of the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst product =(l) => {\n  return l.reduce((product, num) => product * num, 1);\n}\n\n/*Return the number of times that the element appears in the list.\n  >>> count([1, 2, 3, 2, 3])\n  2\n  >>> count([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst count =(l) => {\n  return l.reduce((count, num) => count + (num === l[0]? 1 : 0), 0);\n}\n\n/*Return the average of the list.\n  >>> average([1, 2, 3, 2, 3])\n  2.0\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -3.0\n  */\nconst average =(l) => {\n  return sum(l) / count(l);\n}\n\n/*Return the number of times that the element appears in the list.\n  >>> count(['a', 'b', 'c', 'd', 'a'])\n  4\n  >>> count(['a', 'b', 'c', 'd', 'a'])\n  4\n  >>> count(['a', 'b', 'c', 'd', 'a'])\n  4\n  */\nconst countBy =(l) => {\n  const d = {};\n  return l.reduce((d, num) => {\n    d[num] = d[num] || 0;\n    d[num]++;\n    return d;\n  }, d);\n}\n\n/*Return the number of times that the element appears in the list.\n  >>> countBy([{a:1, b:2, c:3}, {a:1, b:2, c:4}])\n  {a: 2, b: 2, c: 3}\n  >>> countBy([{a:1, b:2, c:3}, {a:1, b:2, c:4}])\n  {a: 2, b: 2, c: 3}\n  */\nconst countBy =(l) => {\n  const d = {};\n  return l.reduce((d, item) => {\n    if (!d[item.a]) {\n      d[item.a] = 0;\n    }\n    d[item.a]++;\n    return d;\n  }, d);\n}\n\n/*Return the sum of the list.\n  >>> sum([1, 2, 3, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst difference =(l) => {\n  return l.reduce((sum, num) => sum + num, 0);\n}\n\n/*Return the sum of the list.\n  >>> sum([1, 2, 3, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst product =(l) => {\n  return l.reduce((product, num) => product * num, 1);\n}\n\n/*Return the sum of the list.\n  >>> sum([1, 2, 3, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst sum =(l) => {\n  return l.reduce((sum, num) => sum + num, 0);\n}\n\nmodule.exports = {\n  add,\n  subtract,\n  "}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let t = '' let p = [ ]\n  let k = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == ' ' || s [ i ] == ',') {\n        if (k == 0) {\n          k = 1;\n          p.push(t);\n          t = '';\n          }\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      else {\n        k = 0;\n        t+=s [ i ]\n        }\n      }\n    i++;}\n  if (t != '') {\n    p.push(t);\n    }\n  return p\n  }\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let t = '' let p = [ ]\n  let k = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] =='' || s [ i ] == ',') {\n        if (k == 0) {\n          k = 1;\n          p.push(t);\n          t = '';\n          }\n       \n      }\n      else {\n        t += s [ i ];\n        }\n      }\n    i++;\n    }\n    if (k!= 0) p.push(t);\n    return p;\n}\n\nmodule.exports = wordsString;<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(x, base) => {\n  var ret = \"\";\n  \n  for (; x > 0;) {\n     {\n      ret =(x % base).toString() + ret;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      x = Math.floor(x / base);\n      }\n    }\n  return ret;\n  }\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(x, base) => {\n  var ret = \"\";\n  \n  for (; x > 0;) {\n     {\n      ret =(x % base).toString() + ret;\n     \n      x = (x / base);\n     }\n  }\n  \n  return ret;\n}\n\n/*\nGiven two numbers represented as strings, return multiplication of the numbers as a string.\n\nNote: The numbers can be arbitrarily large and are non-negative.\n\n>>> multiply(\"23\", \"45\")\n'6775'\n>>> multiply(\"101\", \"101\")\n'13010110101'\n>>> multiply(\"10\", \"10001\")\n'10001000010'\n*/\nconst multiply =(x, y) =>{\n  let ret = \"\";\n  \n  for (; x > 0 && y > 0;) {\n     {\n      ret += (x % 10).toString() + (y % 10).toString();\n     \n      x = (x / 10);\n      y = (y / 10);\n     }\n  }\n  \n  return ret;\n}\n\n/*\nGiven two numbers represented as strings, return their sum as a string.\n\nNote: The numbers can be arbitrarily large and are non-negative.\n\n>>> add(\"23\", \"45\")\n'67'\n>>> add(\"101\", \"101\")\n'1301'\n>>> add(\"10\", \"10001\")\n'10011'\n*/\nconst add =(x, y) =>{\n  let ret = \"\";\n  \n  for (; x > 0 && y > 0;) {\n     {\n      ret += (x % 10).toString() + (y % 10).toString();\n     \n      x = (x / 10);\n      y = (y / 10);\n     }\n  }\n  \n  return ret;\n}\n\n/*\nGiven two numbers represented as strings, return their difference as a string.\n\nNote: The numbers can be arbitrarily large and are non-negative.\n\n>>> subtract(\"23\", \"45\")\n'22'\n>>> subtract(\"101\", \"101\")\n'0'\n>>> subtract(\"10\", \"10001\")\n'10001'\n*/\nconst subtract =(x, y) =>{\n  let ret = \"\";\n  \n  for (; x > 0 && y > 0;) {\n     {\n      ret += (x % 10).toString() + (y % 10).toString();\n     \n      x = (x / 10);\n      y = (y / 10);\n     }\n  }\n  \n  return ret;\n}\n\n/*\nGiven two numbers represented as strings, return the product of the numbers as a string.\n\nNote: The numbers can be arbitrarily large and are non-negative.\n\n>>> multiply(\"23\", \"45\")\n'6775'\n>>> multiply(\"101\", \"101\")\n'13010110101'\n>>> multiply(\"10\", \"10001\")\n'10001000010'\n*/\nconst multiply_multiply =(x, y) =>{\n  let ret = \"\";\n  \n  for (; x > 0 && y > 0;) {\n     {\n      ret += (x % 10).toString() + (y % 10).toString() + (x % 10).toString() + (y % 10).toString();\n     \n      x = (x / 10);\n      y = (y / 10);\n     }\n  }\n  \n  return ret;\n}\n\n/*\nGiven two numbers represented as strings, return the sum of the numbers as a string.\n\nNote: The numbers can be arbitrarily large and are non-negative.\n\n>>> add(\"23\", \"45\")\n'67'\n>>> add(\"101\", \"101\")\n'1301'\n>>> add(\"10\", \"10001\")\n'10011'\n*/\nconst add_add =(x, y) =>{\n  let ret = \"\";\n  \n  for (; x > 0 && y > 0;) {\n     {\n      ret += (x % 10).toString() + (y % 10).toString();\n     \n      x = (x / 10);\n      y = (y / 10);\n     }\n  }\n  \n  return ret;\n}\n\n/*\nGiven two numbers represented as strings, return the difference of the numbers as a string.\n\nNote: The numbers can be arbitrarily large and are non-negative.\n\n>>> subtract(\"23\", \"45\")\n'22'\n>>> subtract(\"101\", \"101\")\n'0'\n>>> subtract(\"10\", \"10001\")\n'10001'\n*/\nconst subtract_subtract =(x, y) =>{\n  let ret = \"\";\n  \n  for (; x > 0 && y > 0;) {\n     {\n      ret += (x % 10).toString() + (y % 10).toString();\n     \n      x = (x / 10);\n      y = (y / 10);\n     }\n  }\n  \n  return ret;\n}\n\n// Test the functions\nconst test =()=>{\n  console.log(add(\"23\", \"45\"));\n  console.log(add(\"101\", \"101\"));\n  console.log(add(\"10\", \"10001\"));\n  \n  console.log(subtract(\"23\", \"45\"));\n  console.log(subtract(\"101\", \"101\"));\n  console.log(subtract(\"10\", \"10001\"));\n  \n  console.log(multiply(\"23\", \"45\"));\n  console.log(multiply(\"101\", \"101\"));\n  console.log(multiply(\"10\", \"10001\"));\n  \n  console.log(multiply_multiply(\"23\", \"45\"));\n  console.log(multiply_multiply(\"101\", \"101\"));\n  console.log(multiply_multiply(\"10\", \"10001\"));\n  \n  console.log(add_add(\"23\", \"45\"));\n  console.log(add_add(\"101\", \"101\"));\n  console.log(add_add(\"10\", \"10001\"));\n  \n  console.log(subtract_subtract(\"23\", \"45\"));\n  "}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(string) => {\n  return(new Set(string.toLowerCase())).size;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  }\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(string) => {\n  return(new Set(string.toLowerCase())).size;\n \n}\n\n/* Given a string, find out how many words does it consist of\n  >>> countWords('hello world')\n  2\n  >>> countWords('hello world, Hello, World')\n  2\n  >>> countWords('I want to go to the cinema')\n  1\n  >>> countWords('I want to go to the cinema')\n  1\n  >>> countWords('I want to go to the cinema')\n  1\n  >>> countWords('I want to go to the cinema, I want to go to the cinema')\n  1\n  >>> countWords('I want to go to the cinema, I want to go to the cinema')\n  1\n  */\nconst countWords =(string) => {\n  let words = string.split(' ');\n  return words.length;\n}\n\n/* Given a string, find out how many lines does it consist of\n  >>> countLines('hello world')\n  2\n  >>> countLines('hello world, Hello, World')\n  2\n  >>> countLines('I want to go to the cinema')\n  1\n  >>> countLines('I want to go to the cinema')\n  1\n  >>> countLines('I want to go to the cinema')\n  1\n  >>> countLines('I want to go to the cinema, I want to go to the cinema')\n  1\n  >>> countLines('I want to go to the cinema, I want to go to the cinema')\n  1\n  */\nconst countLines =(string) => {\n  return string.split('\\n').length;\n}\n\n/* Given a string, find out how many times does a substring appear\n  >>> countSubStrings('xyzXYZ', 'xyz')\n  2\n  >>> countSubStrings('xyzXYZ', 'XYZ')\n  2\n  >>> countSubStrings('xyzXYZ', 'XYZXY')\n  1\n  >>> countSubStrings('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countSubStrings('xyzXYZ', 'xyzXYZ')\n  1\n  */\nconst countSubStrings =(string, substring) => {\n  return string.split(substring).length;\n}\n\n/* Given a string, find out how many times does a substring appear\n  >>> countSubStrings('xyzXYZ', 'XYZ')\n  2\n  >>> countSubStrings('xyzXYZ', 'XYZXY')\n  1\n  >>> countSubStrings('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countSubStrings('xyzXYZ', 'xyzXYZ')\n  1\n  */\nconst countSubStrings =(string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      if (string.length > i + 1) {\n        for (let j = i + 1; j < string.length; j++) {\n          if (string[j] === substring[0]) {\n            count++;\n            i = j;\n          }\n        }\n      }\n    }\n  }\n  return count;\n}\n\n/* Given a string, find out how many times does a substring appear\n  >>> countSubStrings('xyzXYZ', 'XYZ')\n  2\n  >>> countSubStrings('xyzXYZ', 'XYZXY')\n  1\n  >>> countSubStrings('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countSubStrings('xyzXYZ', 'xyzXYZ')\n  1\n  */\nconst countSubStrings =(string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      if (string.length > i + 1) {\n        for (let j = i + 1; j < string.length; j++) {\n          if (string[j] === substring[0]) {\n            count++;\n            i = j;\n          }\n        }\n      }\n    }\n  }\n  return count;\n}\n\n/* Given a string, find out how many times does a substring appear\n  >>> countSubStrings('xyzXYZ', 'XYZ')\n  2\n  >>> countSubStrings('xyzXYZ', 'XYZXY')\n  1\n  >>> countSubStrings('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countSubStrings('xyzXYZ', 'xyzXYZ')\n  1\n  */\nconst countSubStrings =(string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      if (string.length > i + 1) {\n        for (let j = i + 1; j < string.length; j++) {\n          if (string[j] === substring[0]) {\n            count++;\n            i = j;\n          }\n        }\n      }\n    }\n  }\n  return count;\n}\n\n/* Given a string, find out how many times does a substring appear\n  >>> countSubStrings('xyzXYZ', 'XYZ')\n  2\n  >>> countSubStrings('xyzXYZ', 'XYZXY')\n  1\n  >>> countSubStrings('xyzXYZ', 'xyzXYZ')\n  1\n  >>> countSubStrings('xyzXYZ', 'xyzXYZ')\n  1\n  */\nconst countSubStrings =(string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      count++;\n      if (string.length > i + 1) {\n        for (let j = i + 1; j < string.length; j++) {\n          if (string[j] === subst"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let t = date.split( / - /)\n  if (t.length != 3) {\n    return false}\n  if (t [ 0 ] < 1 || t [ 0 ] > 12 || t [ 1 ] < 1) {\n    return false}\n  if (t [ 0 ] == 2 && t [ 1 ] > 29) {\n    return false}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if ((t [ 0 ] == 1 || t [ 0 ] == 3 || t [ 0 ] == 5 || t [ 0 ] == 7 || t [ 0 ] == 8 || t [ 0 ] == 10 || t [ 0 ] == 12) && t [ 1 ] > 31) {\n    return false}\n  if ((t [ 0 ] == 4 || t [ 0 ] == 6 || t [ 0 ] == 9 || t [ 0 ] == 11) && t [ 1 ] > 30) {\n    return false}\n  return true\n  }\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let t = date.split( / - /)\n  if (t.length!= 3) {\n    return false}\n  if (t [ 0 ] < 1 || t [ 0 ] > 12 || t [ 1 ] < 1) {\n    return false}\n  if (t [ 0 ] == 2 && t [ 1 ] > 29) {\n    return false}\n \n  if (t [ 0 ] == 4 && t [ 1 ] > 30) {\n    return false}\n  if (t [ 0 ] == 6 && t [ 1 ] > 29) {\n    return false}\n  \n  if (t [ 0 ] == 8 && t [ 1 ] > 30) {\n    return false}\n  \n  if (t [ 0 ] == 10 && t [ 1 ] > 29) {\n    return false}\n  \n  if (t [ 0 ] == 12 && t [ 1 ] > 31) {\n    return false}\n  return true\n}\n\nconst validDay =(day) => {\n  if (day < 1 || day > 31) {\n    return false}\n  return true\n}\n\nconst validMonth =(month) => {\n  if (month < 1 || month > 12) {\n    return false}\n  return true\n}\n\nconst validYear =(year) => {\n  if (year < 1900 || year > 2020) {\n    return false}\n  return true\n}\n\nconst dateValid =(date) => {\n  return validDate(date) && validMonth(date.split( / - /)[1]) && validDay(date.split( / - /)[2]) && validYear(date.split( / - /)[0])\n}\n\nconst valid =(date) => {\n  return dateValid(date)\n}\n\nexport {dateValid, valid, validMonth, validDay, validYear}<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance+=op;\n    if (balance < 0) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      return true;\n      }\n    }\n  return false;\n  }\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance+=op;\n    if (balance < 0) {\n     \n      return true;\n    }\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict [ num ]+=1;\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      dict [ num ] = 1;\n      }\n    }\n  return numbers.filter(x => dict [ x ] <= 1);\n  }\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict [ num ]+=1;\n      }\n    else {\n     \n      dict [ num ] = 1;\n    }\n  }\n  var output = [];\n  for (const key of Object.keys(dict)) {\n    output.push(key);\n  }\n  return output;\n}\n\n/*\n  From a list of numbers, find the largest number\n  >>> findLargestNumber([4,3,5,7,2,3])\n  7\n  */\nconst findLargestNumber =(numbers) => {\n  const max = numbers[0];\n  for (const number of numbers) {\n    if (number > max) {\n      max = number;\n    }\n  }\n  return max;\n}\n\n/*\n  From a list of numbers, find the smallest number\n  >>> findSmallestNumber([4,3,5,7,2,3])\n  2\n  */\nconst findSmallestNumber =(numbers) => {\n  const min = numbers[0];\n  for (const number of numbers) {\n    if (number < min) {\n      min = number;\n    }\n  }\n  return min;\n}\n\n/*\n  Given a list of words, return a list of the words that appear the same number of times.\n  Words may not be duplicated.\n  >>> sameWords([1,1,2,3,3,4,4,4,5])\n  [1, 2, 3, 4, 5]\n  >>> sameWords([1,1,2,3,3,4,4,4,5,5,6,6,7,8,8,8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> sameWords([1,1,2,3,3,4,4,4,5,5,5,6,6,7,8,8,8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> sameWords([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> sameWords([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> sameWords([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> sameWords([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  >>> sameWords([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  >>> sameWords([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n  >>> sameWords([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n  >>> sameWords([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]\n  >>> sameWords([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\n  >>> sameWords([1,2,3,4,5,6,7,8,9,10,11,12"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(string) => {\n  if (string == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  for (; !isPalindrome(string.slice(beginning_of_suffix));) {\n    beginning_of_suffix+=1;\n    }\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n  }\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(string) => {\n  if (string == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n  var longest_palindrome = 0;\n  var longest_suffix = 0;\n  var suffix = string.split('').reverse().join('');\n\n  /* Find the longest postfix of supplied string that is a palindrome. */\n  for (var i = 1; i < string.length; i++) {\n    if (isPalindrome(string.substring(0, i) + suffix)) {\n      if (isPalindrome(string.substring(0, i))) {\n        if (i > longest_suffix) {\n          longest_suffix = i;\n          longest_palindrome = string.substring(0, i);\n        }\n      }\n    }\n  }\n  return longest_palindrome + suffix;\n}\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cataa')\n  'catac'\n  >>> makePalindrome('ab')\n  'ab'\n  >>> makePalindrome('abab')\n  'abab'\n  >>> makePalindrome('ababab')\n  'ababab'\n  >>> makePalindrome('abababab')\n  'abababab'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cataa')\n  'catac'\n  >>> makePalindrome('ab')\n  'ab'\n  >>> makePalindrome('abab')\n  'abab'\n  >>> makePalindrome('ababab')\n  'ababab'\n  >>> makePalindrome('abababab')\n  'abababab'\n  >>> makePalindrome('ababababa')\n  'ababababa'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cataa')\n  'catac'\n  >>> makePalindrome('ab')\n  'ab'\n  >>> makePalindrome('abab')\n  'abab'\n  >>> makePalindrome('ababab')\n  'ababab'\n  >>> makePalindrome('abababab')\n  'abababab'\n  >>> makePalindrome('ababababa')\n  'ababababa'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cataa')\n  'catac'\n  >>> makePalindrome('ab')\n  'ab'\n  >>> makePalindrome('abab')\n  'abab'\n  >>> makePalindrome('ababab')\n  'ababab'\n  >>> makePalindrome('abababab')\n  'abababab'\n  >>> makePalindrome('ababababa')\n  'ababababa'\n  */\n\n/*\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cataa')\n  'catac'\n  >>> makePalindrome('ab')\n  'ab'\n  >>> makePalindrome('abab')\n  'abab'\n  >>> makePalindrome('ababab')\n  'ababab'\n  >>> makePalindrome('abababab')\n  'abababab'\n  >>> makePalindrome('ababababa')\n  'ababababa'\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(n) => {\n  var fact = [ ], i = 2;\n  \n  for (; i <= Math.sqrt(n) + 1;) {\n     {\n      if (n % i == 0) {\n        fact.push(i);\n        n = n / i;\n        }\n      else {\n        i+=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    \n    }\n  if (n > 1)\n  fact.push(n);\n  return fact;\n  }\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(n) => {\n  var fact = [ ], i = 2;\n  \n  for (; i <= Math.sqrt(n) + 1;) {\n     {\n      if (n % i == 0) {\n        fact.push(i);\n        n = n / i;\n        }\n      else {\n        i+=1;\n       \n        }\n      }\n  }\n  if (n > 1) {\n    fact.push(n);\n  }\n  return fact;\n}\n\nmodule.exports = factorize;<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(N) => {\n  let t = 0\n  \n  for (; N > 0;) {\n     {\n      t+=N % 10\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      N =(N - N % 10) / 10\n      }\n    }\n  return t.toString(2)\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(N) => {\n  let t = 0\n  \n  for (; N > 0;) {\n     {\n      t+=N % 10\n     \n      N = Math.floor(N / 10)\n    }\n  }\n  \n  return t\n}\n\nmodule.exports = solve<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l [ Math.floor(len / 2) ];\n  else\n  return(l [ len / 2 - 1 ] + l [ len / 2 ]) / 2.0;\n  }\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n \n    return l[(len - 1) / 2];\n  else\n    return (l[(len - 1) / 2] + l[(len - 2) / 2]) / 2;\n};\n\nconsole.log(median([3, 1, 2, 4, 5]));\nconsole.log(median([-10, 4, 6, 1000, 10, 20]));\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var ret = 1;\n  let i = 0;\n  while (i < n) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  ret =(2 * ret) % p;\n  return ret;\n  }\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var ret = 1;\n  let i = 0;\n  while (i < n) {\n   \n    ret = ret * 2 % p;\n    i++;\n  }\n  return ret;\n};\n\n/*\n  Return a number between 0 and n (inclusive) such that modp(n, ret) is prime\n  (be aware of numerics).\n  >>> modpPrime(3, 5)\n  0\n  >>> modpPrime(1101, 101)\n  0\n  >>> modpPrime(0, 101)\n  1\n  >>> modpPrime(3, 11)\n  0\n  >>> modpPrime(100, 101)\n  2\n  */\nconst modpPrime = (n, p) => {\n  var i = 0;\n  var ret = 1;\n  while (ret < n) {\n    ret = modp(ret, p);\n    i++;\n  }\n  return i - 1;\n};\n\n/*\n  Return a number between 0 and n (inclusive) such that modp(n, ret) is prime\n  (be aware of numerics).\n  >>> modpPrimePrime(3, 5)\n  2\n  >>> modpPrimePrime(1101, 101)\n  2\n  >>> modpPrimePrime(0, 101)\n  1\n  >>> modpPrimePrime(3, 11)\n  2\n  >>> modpPrimePrime(100, 101)\n  0\n  */\nconst modpPrimePrime = (n, p) => {\n  var i = 0;\n  var ret = 1;\n  while (ret < n) {\n    ret = modp(ret, p);\n    i++;\n  }\n  return i;\n};\n\n//export default modpPrimePrime;\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(num) => {\n      let o = 0\n      let e = 0\n      if (num < 0) {\n            num = - num}\n      \n      for (; num > 0;) {\n             {\n                  if (num % 2 == 0) {\n                        e++}\n                 \n", "canonical_solution": "# print('@@this is the line to split##')\n                  else {\n                        o++}\n                  num =(num - num % 10) / 10\n                  }\n            }\n      return(e, o)\n      }\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(num) => {\n      let o = 0\n      let e = 0\n      if (num < 0) {\n            num = - num}\n      \n      for (; num > 0;) {\n             {\n                  if (num % 2 == 0) {\n                        e++}\n                 \n                  num = Math.floor(num / 2)\n             }\n      }\n      return (e, o)\n}\n\nmodule.exports = evenOddCount<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var begin = - 1.0, end = 1.0;\n  \n  for (; poly(xs, begin) * poly(xs, end) > 0;) {\n     {\n      begin *= 2.0;\n      end *= 2.0;\n      }\n    }\n  while (end - begin > 1e-10) {\n    let center =(begin + end) / 2.0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n    begin = center;\n    else\n    end = center;\n    }\n  return begin;\n  }\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var begin = - 1.0, end = 1.0;\n  \n  for (; poly(xs, begin) * poly(xs, end) > 0;) {\n     {\n      begin *= 2.0;\n      end *= 2.0;\n      }\n    }\n  while (end - begin > 1e-10) {\n    let center =(begin + end) / 2.0;\n   \n    if (poly(xs, center) === 0) {\n      return center;\n    }\n    else {\n      if (poly(xs, begin) * poly(xs, end) < 0) {\n        end = center;\n      }\n      else {\n        begin = center;\n      }\n    }\n  }\n  return 0;\n}\n\nconst findRoots = (xs, x) => {\n  var roots = [];\n  for (var i = 0; i < xs.length; i++) {\n    roots.push(findZero(poly(xs, x)));\n  }\n  return roots;\n}\n\nconsole.log(findRoots([1, 2, 3, 4, 5, 6], -3));\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n     {\n      result.push(string.slice(0, i + 1));\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  return result;\n  }\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  let i = 0;\n  while (i < string.length) {\n     {\n      result.push(string.slice(0, i + 1));\n     \n    }\n    i++;\n  }\n  return result;\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'abc']\n  */\nconst allSuffixes =(string) => {\n  var result = [ ];\n  let i = string.length - 1;\n  while (i >= 0) {\n     {\n      result.push(string.slice(i, string.length));\n     \n    }\n    i--;\n  }\n  return result;\n}\n\n/* Return list of all subsets of the input string\n  >>> allSubsets('abc')\n  [['a', 'b', 'c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['b'], ['c']]\n  */\nconst allSubsets =(string) => {\n  var result = [ ];\n  var i = 0;\n  var set = [string.slice(0, 1)];\n  while (i < string.length) {\n    {\n      set.push(string.slice(i, i + 1));\n    }\n    i++;\n  }\n  var setLength = set.length;\n  var i = 0;\n  while (i < setLength) {\n    {\n      result.push(set);\n    }\n    i++;\n  }\n  return result;\n}\n\n/* Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  [['a', 'b', 'c'], ['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'b'], ['a', 'b', 'c', 'c'], ['a', 'b', 'c', 'a', 'b'], ['a', 'b', 'c', 'a', 'c'], ['a', 'b', 'c', 'b', 'c'], ['a', 'b', 'c', 'a', 'b', 'c'], ['a', 'b', 'c', 'b', 'c', 'a'], ['a', 'b', 'c', 'b', 'c', 'b'], ['a', 'b', 'c', 'c', 'a', 'b'], ['a', 'b', 'c', 'c', 'b', 'a'], ['a', 'b', 'c', 'c', 'b', 'b'], ['a', 'b', 'c', 'c', 'a', 'b', 'c'], ['a', 'b', 'c', 'c', 'b', 'c', 'a'], ['a', 'b', 'c', 'c', 'b', 'c', 'b'], ['a', 'b', 'c', 'c', 'c', 'a', 'b'], ['a', 'b', 'c', 'c', 'c', 'b', 'a'], ['a', 'b', 'c', 'c', 'c', 'b', 'b'], ['a', 'b', 'c', 'c', 'c', 'a', 'b', 'c'], ['a', 'b', 'c', 'c', 'c', 'b', 'c', 'a'], ['a', 'b', 'c', 'c', 'c', 'b', 'c', 'b'], ['a', 'b', 'c', 'c', 'c', 'c', 'a', 'b'], ['a', 'b', 'c', 'c', 'c', 'c', 'b', 'a'], ['a', 'b', 'c', 'c', 'c', 'c', 'b', 'b'], ['a', 'b', 'c', 'c', 'c', 'c', 'a', 'b', 'c']]\n  */\nconst allPermutations =(string) => {\n  var result = [ ];\n  var permutations = [string.slice(0, 1)];\n  var i = 0;\n  var set = [string.slice(0, 2)];\n  while (i < string.length) {\n    {\n      set.push(string.slice(i, i + 1));\n    }\n    i++;\n  }\n  var setLength = set.length;\n  var i = 0;\n  while (i < setLength) {\n    {\n      permutations.push(set);\n    }\n    i++;\n  }\n  var permutationsLength = permutations.length;\n  var i = 0;\n  while (i < permutationsLength) {\n    {\n      result.push(permutations);\n    }\n    i++;\n  }\n  return result;\n}\n\n/* Return list of all combinations of the input string\n  >>> allCombinations('abc')\n  [['a', 'b', 'c'], ['a', 'b', 'c', 'a'], ['a', 'b', 'c', 'b'], ['a', 'b', 'c', 'c'], ['a', 'b', 'c', 'a', 'b'], ['a', 'b', 'c', 'a', 'c'], ['a', 'b', 'c', 'b', 'c'], ['a', 'b', 'c', 'a', 'b', 'c'], ['a', 'b', 'c', 'b', 'c', 'a'], ['a', 'b', 'c', 'b', 'c', 'b'], ['a', 'b', 'c', 'c', 'a', 'b'], ['a', 'b', 'c', 'c', 'b', 'a'], ['a', 'b', 'c', 'c', 'b', 'b'], ['a', 'b', 'c', 'c', 'c', 'a'], ['a', 'b', 'c', 'c', 'c', 'b'], ['a', 'b', 'c', 'c', 'c', 'c']]\n  */\nconst allCombinations =(string) => {\n  var result = [ ];\n  var combinations = [string.slice(0, 1)];\n  var i = 0;\n  var set = [string.slice"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  \n  for (; 1;) {\n     {\n      let u = 0\n      for (let i = 0; i < p.length; i++) {\n        if (t == p [ i ]) {\n          u = 1\n          break;\n          }\n        }\n      if (u == 1) {\n        break}\n      if (t % 2 == 1) {\n        p.push(t); t = 3 * t + 1}\n      else {\n        t = t / 2}\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] < p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  return p\n  }\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let p = [ ]\n  let t = n\n  \n  for (; 1;) {\n     {\n      let u = 0\n      for (let i = 0; i < p.length; i++) {\n        if (t == p [ i ]) {\n          u = 1\n          break;\n          }\n        }\n      if (u == 1) {\n        break}\n      if (t % 2 == 1) {\n        p.push(t); t = 3 * t + 1}\n      else {\n        t = t / 2}\n      }\n    }\n \n  return p\n}\n\n// console.log(getOddCollatz(5))\n// console.log(getOddCollatz(16))\n// console.log(getOddCollatz(8))\n// console.log(getOddCollatz(4))\n// console.log(getOddCollatz(2))\n// console.log(getOddCollatz(1))<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(n) => {\n  return Math.pow(n, 2);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(n) => {\n  return Math.pow(n, 2);\n \n}\n\nconst numberOfCollisions =(n) => {\n  const collisions = carRaceCollision(n);\n  return collisions;\n}\n\nconst main =(n) => {\n  console.log(numberOfCollisions(n));\n}\n\nmain(10);<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let i = 0; i < lst.length; i++) {\n        let j = lst [ i ].length - 1;\n        while (j >= 0) {\n             {\n                if (lst [ i ] [ j ] == x) {\n                    t.push((i, j))\n                   \n", "canonical_solution": "# print('@@this is the line to split##')\n                    }\n                }\n            j--;}\n        }\n    return t\n    }\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let i = 0; i < lst.length; i++) {\n        let j = lst [ i ].length - 1;\n        while (j >= 0) {\n             {\n                if (lst [ i ] [ j ] == x) {\n                    t.push((i, j))\n                   \n                }\n                j--\n            }\n        }\n    }\n    return t.sort((a, b) => {\n        if (a [0] > b [0]) {\n            return 1\n        } else if (a [0] < b [0]) {\n            return -1\n        } else {\n            if (a [1] > b [1]) {\n                return 1\n            } else if (a [1] < b [1]) {\n                return -1\n            } else {\n                return 0\n            }\n        }\n    })\n}\n\n// console.log(getRow([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1))\n// [ (0, 0), (1, 4), (1, 0), (2, 5), (2, 0) ]\n// console.log(getRow([[], [1], [1, 2, 3]], 3))\n// [ (2, 2) ]\n\n// const getRow = (lst, x) => {\n//     let t = [ ]\n//     for (let i = 0; i < lst.length; i++) {\n//         let j = lst [ i ].length - 1;\n//         while (j >= 0) {\n//             {\n//                 if (lst [ i ] [ j ] == x) {\n//                     t.push((i, j))\n//                 }\n//                 j--\n//             }\n//         }\n//     }\n//     return t.sort((a, b) => {\n//         if (a [0] > b [0]) {\n//             return 1\n//         } else if (a [0] < b [0]) {\n//             return -1\n//         } else {\n//             if (a [1] > b [1]) {\n//                 return 1\n//             } else if (a [1] < b [1]) {\n//                 return -1\n//             } else {\n//                 return 0\n//             }\n//         }\n//     })\n// }\n\n// console.log(getRow([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1))\n// [ (0, 0), (1, 4), (1, 0), (2, 5), (2, 0) ]\n// console.log(getRow([[], [1], [1, 2, 3]], 3))\n// [ (2, 2) ]\n\nconst getRow = (lst, x) => {\n    let t = [ ]\n    for (let i = 0; i < lst.length; i++) {\n        let j = lst [ i ].length - 1;\n        while (j >= 0) {\n             {\n                if (lst [ i ] [ j ] == x) {\n                    t.push((i, j))\n                }\n                j--\n            }\n        }\n    }\n    return t.sort((a, b) => {\n        if (a [0] > b [0]) {\n            return -1\n        } else if (a [0] < b [0]) {\n            return 1\n        } else {\n            if (a [1] > b [1]) {\n                return -1\n            } else if (a [1] < b [1]) {\n                return 1\n            } else {\n                return 0\n            }\n        }\n    })\n}\n\n// const getRow = (lst, x) => {\n//     let t = [ ]\n//     for (let i = 0; i < lst.length; i++) {\n//         let j = lst [ i ].length - 1;\n//         while (j >= 0) {\n//             {\n//                 if (lst [ i ] [ j ] == x) {\n//                     t.push((i, j))\n//                 }\n//                 j--\n//             }\n//         }\n//     }\n//     return t.sort((a, b) => {\n//         if (a [0] > b [0]) {\n//             return 1\n//         } else if (a [0] < b [0]) {\n//             return -1\n//         } else {\n//             if (a [1] > b [1]) {\n//                 return 1\n//             } else if (a [1] < b [1]) {\n//                 return -1\n//             } else {\n//                 return 0\n//             }\n//         }\n//     })\n// }\n\nconst getRow = (lst, x) => {\n    let t = [ ]\n    for (let i = 0; i < lst.length; i++) {\n        let j = lst [ i ].length - 1;\n        while (j >= 0) {\n             {\n                if (lst [ i ] [ j ] == x) {\n                    t.push((i, j))\n                }\n                j"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let p = [ ]\n  let i = 0;\n  while (i < x.length) {\n     {\n      let h = x [ i ]\n      let boo = 1\n      while (h > 0) {\n        let r = h % 10\n        if (r % 2 == 0) {\n          boo = 0;\n          i++; break;\n          }\n        h =(h - r) / 10\n        }\n      if (boo) {\n        p.push(x [ i ])\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] < p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  return p\n  }\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let p = [ ]\n  let i = 0;\n  while (i < x.length) {\n     {\n      let h = x [ i ]\n      let boo = 1\n      while (h > 0) {\n        let r = h % 10\n        if (r % 2 == 0) {\n          boo = 0;\n          i++; break;\n          }\n        h =(h - r) / 10\n        }\n      if (boo) {\n        p.push(x [ i ])\n        }\n     \n      }\n  }\n  return p.sort();\n}\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let k =(n + m) / 2\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (k % 1 != 0) {\n    k =(n + m + 1) / 2}\n  return '0b' + k.toString(2)\n  }\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let k =(n + m) / 2\n \n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  \n  let rounded = Math.round(sum / (k - n + 1))\n  \n  return rounded\n}\n\nmodule.exports = roundedAvg\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let d = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in d) {\n      d [ t [ m ] ]++\n      }\n    else {\n      d [ t [ m ] ] = 1\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  s = Object.keys(d).sort(function(a, b) {\n    return - d [ a ] + d [ b ];}\n  );\n  if (s.length == 0) {\n    return {\n      }\n    }\n  let g = d [ s [ 0 ] ]\n  let l = {\n    }\n  let ss = 0;\n  while (ss < s.length) {\n     {\n      if (d [ s [ ss ] ] == g) {\n        l [ s [ ss ] ] = d [ s [ ss ] ]\n        }\n      }\n    ss++;}\n  return l\n  }\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let d = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in d) {\n      d [ t [ m ] ]++\n      }\n    else {\n      d [ t [ m ] ] = 1\n      }\n    }\n \n  return d\n  }\n  \n  \n  \n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = '' let i = 0;\n  while (i < s.length) {\n     {\n      let p = s [ i ].charCodeAt() + 4\n      if (p > 122) {\n        p-=26}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t+=String.fromCharCode(p)\n      }\n    i++;}\n  return t\n  }\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = '' let i = 0;\n  while (i < s.length) {\n     {\n      let p = s [ i ].charCodeAt() + 4\n      if (p > 122) {\n        p-=26}\n     \n      let n = p;\n      n+=s.length-1\n      if (n > 122) {\n        n-=26}\n      let t = s [ i ] + s [ n ]\n      i++\n      return t\n     }\n  }\n}\n\n// console.log(encrypt(\"hi\"))\nconsole.log(encrypt(\"asdfghjkl\"))\nconsole.log(encrypt(\"gf\"))\nconsole.log(encrypt(\"et\"))\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122)) {\n      return true}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false\n    }\n  if (txt [ len - 2 ] == ' ' &&((y >= 65 && y <= 90) ||(y >= 97 && y <= 122))) {\n    return true}\n  return false\n  }\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122)) {\n      return true}\n   \n    return false}\n  let n = txt.charCodeAt(len - 2)\n  if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122)) {\n    if (n >= 97 && n <= 122) {\n      return true}\n    if (n >= 65 && n <= 90) {\n      return true}\n    return false}\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a digit and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsADigit(\"apple pie\") ➞ false\n  checkIfLastCharIsADigit(\"apple pi e\") ➞ true\n  checkIfLastCharIsADigit(\"apple pi e \") ➞ false\n  checkIfLastCharIsADigit(\"\") ➞ false\n  */\nconst checkIfLastCharIsADigit =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 48 && y <= 57)) {\n      return true}\n   \n    return false}\n  let n = txt.charCodeAt(len - 2)\n  if ((y >= 48 && y <= 57)) {\n    if (n >= 48 && n <= 57) {\n      return true}\n    if (n >= 48 && n <= 57) {\n      return true}\n    return false}\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a lowercase letter, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALowerCase(\"apple pie\") ➞ true\n  checkIfLastCharIsALowerCase(\"apple pi e\") ➞ false\n  checkIfLastCharIsALowerCase(\"apple pi e \") ➞ true\n  checkIfLastCharIsALowerCase(\"\") ➞ false\n  */\nconst checkIfLastCharIsALowerCase =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 97 && y <= 122) || (y >= 65 && y <= 90)) {\n      return true}\n   \n    return false}\n  let n = txt.charCodeAt(len - 2)\n  if ((y >= 97 && y <= 122) || (y >= 65 && y <= 90)) {\n    if (n >= 97 && n <= 122) {\n      return true}\n    if (n >= 65 && n <= 90) {\n      return true}\n    return false}\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is an uppercase letter, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsAUpCase(\"apple pie\") ➞ false\n  checkIfLastCharIsAUpCase(\"apple pi e\") ➞ true\n  checkIfLastCharIsAUpCase(\"apple pi e \") ➞ false\n  checkIfLastCharIsAUpCase(\"\") ➞ false\n  */\nconst checkIfLastCharIsAUpCase =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122)) {\n      return true}\n   \n    return false}\n  let n = txt.charCodeAt(len - 2)\n  if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122)) {\n    if (n >= 97 && n <= 122) {\n      return true}\n    if (n >= 65 && n <= 90) {\n      return true}\n    return false}\n  return false\n}\n\n/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsAny =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let y = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122)) {\n      return true}\n   \n    return false}\n  let n = txt.charCodeAt(len - 2)\n  if ((y >= 65 && y <= 90) ||(y >= 97 && y <= 122)) {\n    if (n >= 97 && n <= 122) {\n      return true}\n    if (n >= 65 && n <= 90) {\n      return true}\n"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  let i = word.length - 2;\n  while (i > 0) {\n     {\n      if (\n       !(word [ i ] != 'a' && word [ i ] != 'e' && word [ i ] != 'i' && word [ i ] != 'o' && word [ i ] != 'u' && word [ i ] != 'A' &&\n      word [ i ] != 'U' && word [ i ] != 'O' && word [ i ] != 'I' && word [ i ] != 'E')\n       &&\n      (word [ i + 1 ] != 'a' && word [ i + 1 ] != 'e' && word [ i + 1 ] != 'i' && word [ i + 1 ] != 'o' && word [ i + 1 ] != 'u' && word [ i + 1 ] != 'A' &&\n      word [ i + 1 ] != 'U' && word [ i + 1 ] != 'O' && word [ i + 1 ] != 'I' && word [ i + 1 ] != 'E')\n       &&\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      (word [ i - 1 ] != 'a' && word [ i - 1 ] != 'e' && word [ i - 1 ] != 'i' && word [ i - 1 ] != 'o' && word [ i - 1 ] != 'u' && word [ i - 1 ] != 'A' &&\n      word [ i - 1 ] != 'U' && word [ i - 1 ] != 'O' && word [ i - 1 ] != 'I' && word [ i - 1 ] != 'E')\n      ) {\n        i--; return word [ i ]\n        }\n      }\n    i--;}\n  return ' '}\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  let i = word.length - 2;\n  while (i > 0) {\n     {\n      if (\n      !(word [ i ]!= 'a' && word [ i ]!= 'e' && word [ i ]!= 'i' && word [ i ]!= 'o' && word [ i ]!= 'u' && word [ i ]!= 'A' &&\n      word [ i ]!= 'U' && word [ i ]!= 'O' && word [ i ]!= 'I' && word [ i ]!= 'E')\n       &&\n      (word [ i + 1 ]!= 'a' && word [ i + 1 ]!= 'e' && word [ i + 1 ]!= 'i' && word [ i + 1 ]!= 'o' && word [ i + 1 ]!= 'u' && word [ i + 1 ]!= 'A' &&\n      word [ i + 1 ]!= 'U' && word [ i + 1 ]!= 'O' && word [ i + 1 ]!= 'I' && word [ i + 1 ]!= 'E')\n       &&\n     \n      (word [ i ]!= 'a' && word [ i ]!= 'e' && word [ i ]!= 'i' && word [ i ]!= 'o' && word [ i ]!= 'u' && word [ i ]!= 'A' &&\n      word [ i ]!= 'U' && word [ i ]!= 'O' && word [ i ]!= 'I' && word [ i ]!= 'E')\n      )\n      return word [ i ];\n      else {\n        i -= 1;\n      }\n    }\n  }\n  return '';\n};\n\nconsole.log(getClosestVowel('abc'));\nconsole.log(getClosestVowel('abcdefghij'));\nconsole.log(getClosestVowel('acd'));\nconsole.log(getClosestVowel('ABCDEFGHIJ'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClosestVowel('qwertyuiop'));\nconsole.log(getClos"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n        p++}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i+=2;}\n  return p\n  }\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('aBdEf') returns 2\n  countConsonants('BCdEf') returns 1\n  */\nconst countConsonants =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ]!= 'A' && s [ i ]!= 'E' && s [ i ]!= 'I' && s [ i ]!= 'O' && s [ i ]!= 'U' && s [ i ]!= 'a' && s [ i ]!= 'e' && s [ i ]!= 'i' && s [ i ]!= 'o' && s [ i ]!= 'u') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of vowels in the string.\n  \n  For example:\n  countVowels('aBCdEf') returns 3\n  countVowels('aBdEf') returns 2\n  countVowels('BCdEf') returns 1\n  */\nconst countVowels =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U' || s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\n/*\n  Given a string s, count the number of consonants and vowels in the string.\n  \n  For example:\n  countConsonantsVowels('aBCdEf') returns 5\n  countConsonantsVowels('aBdEf') returns 4\n  countConsonantsVowels('BCdEf') returns 3\n  */\nconst countConsonantsVowels =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U' || s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\n/*\n  Given a string s, return a new string with all the vowels replaced by '.'.\n  \n  For example:\n  replaceVowels('aBCdEf') returns '.dEf'\n  replaceVowels('aBdEf') returns 'a.Ef'\n  replaceVowels('BCdEf') returns 'b.Ef'\n  */\nconst replaceVowels =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U' || s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\n/*\n  Given a string s, return a new string with all the consonants replaced by '.'.\n  \n  For example:\n  replaceConsonants('aBCdEf') returns 'aBCdEf'\n  replaceConsonants('aBdEf') returns 'a.Ef'\n  replaceConsonants('BCdEf') returns 'b.Ef'\n  */\nconst replaceConsonants =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s [ i ] == 'A' || s [ i ] == 'E' || s [ i ] == 'I' || s [ i ] == 'O' || s [ i ] == 'U' || s [ i ] == 'a' || s [ i ] == 'e' || s [ i ] == 'i' || s [ i ] == 'o' || s [ i ] == 'u') {\n        p++}\n     \n     }\n     i++\n  }\n  return p\n}\n\n/*\n  Given a string s, return a new string with all the vowels and consonants replaced by '.'.\n  \n  For example:\n  replaceVowelsConsonants('aBCdEf') returns 'aBCdEf'\n  replaceVowelsConsonants('aBdEf') returns 'a.Ef'\n  replaceVowelsConsonants('BCdEf') returns 'b.Ef'\n  */\nconst replaceVowelsConsonants =(s) => {\n  let p = 0\n  let i = 0;\n  while (i < s.length) {\n     {\n      if (s ["}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(nums) => {\n  let min = nums [ 0 ]\n  let i = 0;\n  while (i < nums.length) {\n     {\n      for (let j = i + 1; j <= nums.length; j++) {\n        let s = 0;\n        for (let k = i; k < j; k++) {\n          s+=nums [ k ]\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        if (s < min) {\n          min = s}\n        }\n      }\n    i++;}\n  return min\n  }\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(nums) => {\n  let min = nums [ 0 ]\n  let i = 0;\n  while (i < nums.length) {\n     {\n      for (let j = i + 1; j <= nums.length; j++) {\n        let s = 0;\n        for (let k = i; k < j; k++) {\n          s+=nums [ k ]\n         \n        }\n        if (s < min) {\n          min = s\n        }\n      }\n    }\n    i++\n  }\n  return min\n}\n\n// Test\n\nconst test = [\n  [ [ 1, 2, 3 ], 1 ],\n  [ [ 2, 3, 4 ], 3 ],\n  [ [ 3, 4, 5, 6 ], 6 ],\n  [ [ 2, 5, 7, 9, 11 ], 9 ],\n  [ [ -2, -3, -4 ], -4 ],\n  [ [ -3, -4, -5, -6 ], -6 ],\n  [ [ -2, -3, -4, -5 ], -5 ],\n  [ [ -2, -3, -4, -5, -6 ], -6 ]\n]\n\nconsole.log(minSubArraySum(test));\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, b, c) => {\n  return(a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, b, c) => {\n  return(a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n \n}\n\n/*\n Given the length of a side, return true if it is a right angle triangle,\n  false otherwise.\n  A right angle triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3) == true\n  rightAngleTriangle(5) == false\n  */\nconst rightAngleTriangle =(a) => {\n  return(a * a == a * a)\n}\n\n\n/*\n Given the length of a side, return true if it is a triangle,\n  false otherwise.\n  A triangle is a triangle in which all angles are right angles.\n  Example:\n  triangle(3) == true\n  triangle(5) == false\n  */\nconst triangle =(a) => {\n  return(a * a == a * a + a)\n}\n\n/*\n Given the length of a side, return true if it is a triangle,\n  false otherwise.\n  A triangle is a triangle in which all angles are right angles.\n  Example:\n  triangle(3) == true\n  triangle(5) == false\n  */\nconst triangle =(a) => {\n  return(a * a == a * a + a)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, y) => {\n  return x + y;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, y) => {\n  return x + y;\n \n};\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n "}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n  .map(x =>(x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  .join('');\n  }\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n .map(x =>(x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n \n .join('');\n}\n\n/*\n  For a given string, remove all punctuation from the string.\n  >>> removePunctuation('hello!')\n  'hello'\n  >>> removePunctuation('hello. goodbye.')\n  'hello goodbye'\n  >>> removePunctuation('hello. goodbye. goodbye! goodbye! goodbye. goodbye!')\n  'hello goodbye goodbye goodbye goodbye goodbye goodbye goodbye goodbye goodbye'\n  */\nconst removePunctuation =(string) => {\n  return string.replace(/[.,!@#$%^&*()_+|~`?-]/g, '');\n}\n\n/*\n  Returns a new string with only the first letter capitalized\n  >>> capitalizeFirst('Hello')\n  'Hello'\n  >>> capitalizeFirst('Hello')\n  'Hello'\n  >>> capitalizeFirst('hello!')\n  'Hello!'\n  >>> capitalizeFirst('hello!')\n  'Hello!'\n  >>> capitalizeFirst('hello! goodbye! goodbye. goodbye!')\n  'Hello! Goodbye! Goodbye. Goodbye!'\n  >>> capitalizeFirst('hello! goodbye! goodbye. goodbye!')\n  'Hello! Goodbye! Goodbye. Goodbye!'\n  >>> capitalizeFirst('Hello. Goodbye.')\n  'Hello. Goodbye.'\n  >>> capitalizeFirst('Hello. Goodbye.')\n  'Hello. Goodbye.'\n  >>> capitalizeFirst('Hello. Goodbye. Goodbye. Hello.')\n  'Hello. Goodbye. Goodbye. Hello.'\n  >>> capitalizeFirst('Hello. Goodbye. Goodbye. Hello.')\n  'Hello. Goodbye. Goodbye. Hello.'\n  >>> capitalizeFirst('Hello. Goodbye. Goodbye. Hello. Goodbye. Hello. Goodbye.')\n  'Hello. Goodbye. Goodbye. Hello. Goodbye. Hello. Goodbye.'\n  */\nconst capitalizeFirst =(string) => {\n  return string.substring(0,1).toUpperCase() + string.substring(1,string.length);\n}\n\n/*\n  Returns a new string with all words capitalized except the first word\n  >>> capitalizeAll('Hello world')\n  'Hello world'\n  >>> capitalizeAll('Hello world')\n  'Hello world'\n  >>> capitalizeAll('hello world!')\n  'Hello world!'\n  >>> capitalizeAll('hello world!')\n  'Hello world!'\n  >>> capitalizeAll('Hello world. goodbye. goodbye. goodbye! goodbye! goodbye. goodbye!')\n  'Hello world Goodbye! Goodbye! Goodbye. Goodbye!'\n  >>> capitalizeAll('Hello world. goodbye. goodbye. goodbye! goodbye! goodbye. goodbye!')\n  'Hello world Goodbye! Goodbye! Goodbye. Goodbye!'\n  >>> capitalizeAll('Hello world. Goodbye! Goodbye! Goodbye. Goodbye! Hello. Goodbye! Hello. Goodbye.')\n  'Hello world Goodbye! Goodbye! Goodbye. Goodbye! Hello. Goodbye! Hello. Goodbye.'\n  >>> capitalizeAll('Hello world. Goodbye! Goodbye! Goodbye. Goodbye! Hello. Goodbye! Hello. Goodbye.')\n  'Hello world Goodbye! Goodbye! Goodbye. Goodbye! Hello. Goodbye! Hello. Goodbye.'\n  */\nconst capitalizeAll =(string) => {\n  const words = string.split(' ');\n  let newStr = '';\n  for(let i=0; i<words.length; i++){\n    newStr += words[i].substring(0,1).toUpperCase() + words[i].substring(1,words[i].length);\n    newStr +='';\n  }\n  newStr = newStr.slice(0, -1);\n  return newStr;\n}\n\n/*\n  Returns a new string with only the first word capitalized\n  >>> capitalizeFirstWord('Hello world')\n  'Hello world'\n  >>> capitalizeFirstWord('Hello world')\n  'Hello world'\n  >>> capitalizeFirstWord('hello world!')\n  'Hello world!'\n  >>> capitalizeFirstWord('hello world!')\n  'Hello world!'\n  >>> capitalizeFirstWord('Hello world. Goodbye! Goodbye. Goodbye. Hello.')\n  'Hello world Goodbye! Goodbye. Goodbye. Hello.'\n  >>> capitalizeFirstWord('Hello world. Goodbye! Goodbye. Goodbye. Hello.')\n  'Hello world Goodbye! Goodbye. Goodbye. Hello.'\n  >>> capitalizeFirstWord('Hello world. Goodbye! Goodbye. Goodbye. Hello. Goodbye. Hello. Goodbye.')\n  'Hello world Goodbye! Goodbye. Goodbye. Hello. Goodbye. Hello. Goodbye.'\n  */\nconst capitalizeFirstWord =(string) => {\n  return string.split(' ')[0].substring(0,1).toUpperCase() + string.substring(1,string.length);\n}\n\n/*\n  Returns a new string with the first word capitalized and all subsequent words capitalized.\n  >>> capitalizeWord('Hello world')\n  'Hello world'\n  >>> capitalizeWord('Hello world')\n  'Hello world'\n  >>> capitalizeWord('Hello world. Goodbye! Goodbye. Goodbye. Hello.')\n  'Hello world Goodbye! Goodbye. Goodbye. Hello.'\n  >>> capitalizeWord('Hello world. Goodbye! Goodbye. Goodbye. Hello. Goodbye. Hello. Goodbye.')\n  'Hello world Goodbye! Goodbye. Goodbye. Hello. Goodbye. Hello. Goodbye.'\n  >>> capitalizeWord('Hello world. Goodbye! Goodbye. Goodbye. Hello. Goodbye. Hello. Goodbye.')\n  'Hello world Goodbye! Goodbye. Goodbye. Hello. Goodbye. Hello. Goodbye.'\n  */\nconst capitalizeWord =(string) => {\n  return capitalizeFirstWord(string) +'' + capitalizeAll(string.substring(1, string.length));\n}\n\nmodule.exports = {\n  flipCase,\n  removePunctuation,\n  capitalizeFirst,\n  capitalizeFirstWord,\n  capitalizeAll,\n  capitalizeWord\n};<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  let i = 0;\n  while (i < string.length) {\n     {\n      if (string [ i ] == '[') {\n        opening_bracket_index.push(i)\n        }\n      else {\n        closing_bracket_index1.push(i)\n        }\n      }\n    i++;}\n  let closing_bracket_index = [ ]\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1 [ closing_bracket_index1.length - i - 1 ])\n    }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index [ k ] < closing_bracket_index [ i ]) {\n      cnt+=1;\n      i+=1;\n      }\n    }\n  return cnt >= 2\n  }\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  let i = 0;\n  while (i < string.length) {\n     {\n      if (string [ i ] == '[') {\n        opening_bracket_index.push(i)\n        }\n      else {\n        closing_bracket_index1.push(i)\n        }\n      }\n    i++;}\n  let closing_bracket_index = [ ]\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n   \n    let j = closing_bracket_index1 [ i ] + 1;\n    while (j < string.length) {\n      if (string [ j ] == ']') {\n        closing_bracket_index.push(j)\n        }\n      else {\n        break;\n        }\n      j++;}\n    }\n  let nested = true\n  let nested_bracket_index = opening_bracket_index\n  for (let i = 0; i < nested_bracket_index.length; i++) {\n    for (let j = 0; j < closing_bracket_index.length; j++) {\n      if (nested_bracket_index [ i ] == closing_bracket_index [ j ]) {\n        nested = false\n        }\n      }\n    }\n  return nested\n}\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested2 =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  let i = 0;\n  while (i < string.length) {\n     {\n      if (string [ i ] == '[') {\n        opening_bracket_index.push(i)\n        }\n      else {\n        closing_bracket_index1.push(i)\n        }\n      }\n    i++;}\n  let nested = false\n  let nested_bracket_index = opening_bracket_index\n  for (let i = 0; i < nested_bracket_index.length; i++) {\n    for (let j = 0; j < closing_bracket_index1.length; j++) {\n      if (nested_bracket_index [ i ] == closing_bracket_index1 [ j ]) {\n        nested = true\n        }\n      }\n    }\n  return nested\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\nconsole.log(isNested('[[]][['));\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = s [ i ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    p+=String.fromCharCode(y)\n    }\n  if (t == 1) {\n    return p}\n  let u = '' let i = 0;\n  while (i < p.length) {\n     {\n      u+=p [ p.length - i - 1 ]\n      }\n    i++;}\n  return u\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = s [ i ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n    }\n    else t = 0\n    p += String.fromCharCode(y)\n  }\n  return t? p : p.toLowerCase()\n};\n\nconsole.log(solve(\"#a@C\"));<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const e of l)\n  if (e >= t)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const e of l)\n  if (e >= t)\n \n    return false;\n  \n  return true;\n};\n\nconst isNumber = (e) =>\n{\n  return e >= 0;\n};\n\nconst isSorted = (l) =>\n{\n  let last = l[0];\n  for (const e of l)\n  if (e <= last)\n  {\n    console.log(\"SORTED\");\n    return false;\n  }\n  last = e;\n  return true;\n};\n\nconst isPermutation = (l) =>\n{\n  const c = l.length;\n  const b = c - 1;\n  let a = 0;\n  let x = 0;\n  while (x < b)\n  {\n    if (l[x] < l[x + 1])\n    {\n      console.log(\"NOT PERMUTATION\");\n      return false;\n    }\n    x += 1;\n  }\n  return true;\n};\n\nconst isPalindrome = (e) =>\n{\n  const c = e.length;\n  const b = c - 1;\n  let a = 0;\n  while (a < b)\n  {\n    if (e[a]!= e[b])\n    {\n      console.log(\"NOT PALINDROME\");\n      return false;\n    }\n    a += 1;\n    b -= 1;\n  }\n  return true;\n};\n\nconst isUnique = (e) =>\n{\n  let a = 1;\n  while (a < e.length)\n  {\n    if (e[a - 1] == e[a])\n    {\n      return false;\n    }\n    a += 1;\n  }\n  return true;\n};\n\nconst isBinary = (e) =>\n{\n  let a = 0;\n  let b = 1;\n  while (a < e.length)\n  {\n    if (e[a]!= b)\n    {\n      return false;\n    }\n    a += 1;\n    b *= 2;\n  }\n  return true;\n};\n\nconst isBinaryPrime = (e) =>\n{\n  let b = 1;\n  let c = e;\n  while (b < c)\n  {\n    if (e % b == 0)\n    {\n      return false;\n    }\n    b *= 2;\n  }\n  return true;\n};\n\nconst isPrime = (e) =>\n{\n  if (e < 2)\n  {\n    return false;\n  }\n  if (e == 2)\n  {\n    return true;\n  }\n  if (e % 2 == 0)\n  {\n    return false;\n  }\n  for (let i = 3; i * i <= e; i += 2)\n  {\n    if (e % i == 0)\n    {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPerfectNumber = (e) =>\n{\n  return e % 1 == 0;\n};\n\nconst isPerfect = (e) =>\n{\n  return e.toString().split(\"\").reduce((prev, curr) =>\n  {\n    return prev + curr + curr;\n  }, 0);\n};\n\nconst isHappyNumber = (e) =>\n{\n  let prev = e;\n  let c = 1;\n  while (prev!= 1)\n  {\n    prev = Math.sqrt(prev);\n    c++;\n  }\n  return c;\n};\n\nconst isAbundant = (e) =>\n{\n  let c = 1;\n  let a = e;\n  while (a!= 1)\n  {\n    c = c + 2;\n    a = Math.sqrt(a);\n  }\n  return c;\n};\n\nconst isPrimeAbundant = (e) =>\n{\n  if (e < 0)\n  {\n    return false;\n  }\n  if (e == 1)\n  {\n    return true;\n  }\n  for (let i = 2; i < e; i++)\n  {\n    if (e % i == 0)\n    {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isAbundantPrime = (e) =>\n{\n  if (e < 0)\n  {\n    return false;\n  }\n  if (e == 1)\n  {\n    return true;\n  }\n  for (let i = 2; i < e; i++)\n  {\n    if (e % i == 0)\n    {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeAbundantPrime = (e) =>\n{\n  if (e < 0)\n  {\n    return false;\n  }\n  if (e == 1)\n  {\n    return true;\n  }\n  for (let i = 2; i < e; i++)\n  {\n    if (e % i == 0)\n    {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeAbundantPrimeAbundant = (e) =>\n{\n  if (e < 0)\n  {\n    return false;\n  }\n  if (e == 1)\n  {\n    return true;\n  }\n  for (let i = 2; i < e; i++)\n  {\n    if (e % i == 0)\n    {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isAbundantPrimeAbundantPrime = (e) =>\n{\n  if (e < 0)\n  {\n    return false;\n  }\n  if (e == 1)\n  {\n    return true;\n  }\n  for (let i = 2; i < e; i++)\n  {\n    if (e % i == 0)\n    {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeAbundantPrimePrime = (e) =>\n{\n  if (e < 0)\n  {\n    return false"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  let i = 1;\n  while (i <= n) {\n     {\n      let k = i.toString()\n      let p = 1\n      for (let j = 0; j < k.length; j++) {\n        if (k [ j ] != k [ k.length - j - 1 ]) {\n          p = 0;\n          i++; break;\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        }\n      if (p == 1) {\n        if (k % 2 == 0) {\n          e++}\n        else {\n          o++}\n        }\n      }\n    i++;}\n  return(e, o)\n  }\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  let i = 1;\n  while (i <= n) {\n     {\n      let k = i.toString()\n      let p = 1\n      for (let j = 0; j < k.length; j++) {\n        if (k [ j ]!= k [ k.length - j - 1 ]) {\n          p = 0;\n          i++; break;\n         \n        }\n      }\n      if (p) {\n        if (k.length % 2 == 0) {\n          e++;\n        } else {\n          o++;\n        }\n        i++;\n      }\n    }\n  }\n  return [e, o]\n}\n\n// let evenOddPalindrome = (n) => {\n//   let i = 1;\n//   while (i <= n) {\n//     let k = i.toString()\n//     let p = 1\n//     for (let j = 0; j < k.length; j++) {\n//       if (k [ j ]!= k [ k.length - j - 1 ]) {\n//         p = 0\n//         break;\n//       }\n//     }\n//     if (p) {\n//       if (k.length % 2 == 0) {\n//         i++;\n//       } else {\n//         console.log(i)\n//       }\n//     }\n//   }\n//   return [i - 1, i]\n// }\n\nconst evenOddPalindrome = (n) => {\n  let i = 1;\n  while (i <= n) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k [ j ]!= k [ k.length - j - 1 ]) {\n        p = 0\n        break;\n      }\n    }\n    if (p) {\n      if (k.length % 2 == 0) {\n        i++;\n      } else {\n        console.log(i)\n      }\n    }\n  }\n  return [i - 1, i]\n}\n\nconst evenOddPalindrome = (n) => {\n  let i = 1;\n  while (i <= n) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k [ j ]!= k [ k.length - j - 1 ]) {\n        p = 0\n        break;\n      }\n    }\n    if (p) {\n      if (k.length % 2 == 0) {\n        i++;\n      } else {\n        console.log(i)\n      }\n    }\n  }\n  return [i - 1, i]\n}\n\nconst evenOddPalindrome = (n) => {\n  let i = 1;\n  while (i <= n) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k [ j ]!= k [ k.length - j - 1 ]) {\n        p = 0\n        break;\n      }\n    }\n    if (p) {\n      if (k.length % 2 == 0) {\n        i++;\n      } else {\n        console.log(i)\n      }\n    }\n  }\n  return [i - 1, i]\n}\n\nconst evenOddPalindrome = (n) => {\n  let i = 1;\n  while (i <= n) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k [ j ]!= k [ k.length - j - 1 ]) {\n        p = 0\n        break;\n      }\n    }\n    if (p) {\n      if (k.length % 2 == 0) {\n        i++;\n      } else {\n        console.log(i)\n      }\n    }\n  }\n  return [i - 1, i]\n}\n\nconst evenOddPalindrome = (n) => {\n  let i = 1;\n  while (i <= n) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k [ j ]!= k [ k.length - j - 1 ]) {\n        p = 0\n        break;\n      }\n    }\n    if (p) {\n      if (k.length % 2 == 0) {\n        i++;\n      } else {\n        console.log(i)\n      }\n    }\n  }\n  return [i - 1, i]\n}\n\nconst evenOddPalindrome = (n) => {\n  let i = 1;\n  while (i <= n) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k [ j ]!= k [ k.length - j - 1 ]) {\n        p = 0\n        break;\n      }\n    }\n    if (p) {\n      if (k.length % 2 == 0) {\n        i++;\n      } else {\n        console.log(i)\n      }\n    }\n  }\n  return [i - 1, i]\n}\n\nconst evenOddPalindrome = (n) => {\n  let i = 1;\n  while (i <= n) {\n    let k = i."}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i--;}\n  return i;\n  }\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  let i = n - 1;\n  while (i >= 0) {\n    if (n % i == 0)\n   \n      return i;\n    i--;\n  }\n};\n\nconst isPalindrome =(n) => {\n  let reverse = n.split(\"\").reverse().join(\"\");\n  return n == reverse;\n};\n\nconst largestPalindrome =(n) => {\n  let reverse = n.split(\"\").reverse().join(\"\");\n  return reverse.split(\"\").reverse().join(\"\");\n};\n\nconst largestPalindromeSubsequence =(n) => {\n  let sequence = largestPalindrome(n);\n  let current = 1;\n  let max = 1;\n  while (sequence.length > 1) {\n    let subSequence = largestPalindromeSubsequence(sequence.substr(0, sequence.length - 1));\n    if (subSequence.length > max) {\n      max = subSequence.length;\n    }\n    sequence = sequence.substr(0, sequence.length - 1) + subSequence;\n    current++;\n  }\n  return {sequence: sequence, current: current, max: max};\n};\n\nconst largestPalindromeSubsequence_ =(n) => {\n  let current = 1;\n  let max = 1;\n  let subSequence = largestPalindromeSubsequence(n);\n  while (subSequence.current < subSequence.max) {\n    let subSequence = largestPalindromeSubsequence(n.substr(0, subSequence.sequence.length - 1) + subSequence.sequence);\n    if (subSequence.current > current) {\n      current = subSequence.current;\n    }\n    if (subSequence.current > max) {\n      max = subSequence.current;\n    }\n  }\n  return {sequence: subSequence.sequence, current: current, max: max};\n};\n\nconst isPalindrome_ =(n) => {\n  let reverse = n.split(\"\").reverse().join(\"\");\n  return n == reverse;\n};\n\nconst isPalindrome_ =(n) => {\n  let reverse = n.split(\"\").reverse().join(\"\");\n  return n == reverse;\n};\n\nconst largestPalindrome =(n) => {\n  let reverse = n.split(\"\").reverse().join(\"\");\n  return reverse.split(\"\").reverse().join(\"\");\n};\n\nconst largestPalindromeSubsequence =(n) => {\n  let sequence = largestPalindrome(n);\n  let current = 1;\n  let max = 1;\n  while (sequence.length > 1) {\n    let subSequence = largestPalindromeSubsequence(sequence.substr(0, sequence.length - 1));\n    if (subSequence.length > max) {\n      max = subSequence.length;\n    }\n    sequence = sequence.substr(0, sequence.length - 1) + subSequence;\n    current++;\n  }\n  return {sequence: sequence, current: current, max: max};\n};\n\nconst isPalindrome =(n) => {\n  let reverse = n.split(\"\").reverse().join(\"\");\n  return n == reverse;\n};\n\nconst isPalindrome =(n) => {\n  let reverse = n.split(\"\").reverse().join(\"\");\n  return n == reverse;\n};\n\nconst largestPalindromeSubsequence =(n) => {\n  let current = 1;\n  let max = 1;\n  let subSequence = largestPalindromeSubsequence(n);\n  while (subSequence.current < subSequence.max) {\n    let subSequence = largestPalindromeSubsequence(n.substr(0, subSequence.sequence.length - 1) + subSequence.sequence);\n    if (subSequence.current > current) {\n      current = subSequence.current;\n    }\n    if (subSequence.current > max) {\n      max = subSequence.current;\n    }\n  }\n  return {sequence: subSequence.sequence, current: current, max: max};\n};\n\nconst largestPalindromeSubsequence =(n) => {\n  let current = 1;\n  let max = 1;\n  let subSequence = largestPalindromeSubsequence(n);\n  while (subSequence.current < subSequence.max) {\n    let subSequence = largestPalindromeSubsequence(n.substr(0, subSequence.sequence.length - 1) + subSequence.sequence);\n    if (subSequence.current > current) {\n      current = subSequence.current;\n    }\n    if (subSequence.current > max) {\n      max = subSequence.current;\n    }\n  }\n  return {sequence: subSequence.sequence, current: current, max: max};\n};\n\nconst largestPalindrome =(n) => {\n  let reverse = n.split(\"\").reverse().join(\"\");\n  return reverse.split(\"\").reverse().join(\"\");\n};\n\nconst largestPalindromeSubsequence =(n) => {\n  let current = 1;\n  let max = 1;\n  let subSequence = largestPalindromeSubsequence(n);\n  while (subSequence.current < subSequence.max) {\n    let subSequence = largestPalindromeSubsequence(n.substr(0, subSequence.sequence.length - 1) + subSequence.sequence);\n    if (subSequence.current > current) {\n      current = subSequence.current;\n    }\n    if (subSequence.current > max) {\n      max = subSequence.current;\n    }\n  }\n  return {sequence: subSequence.sequence, current: current, max: max};\n};\n\nconst isPalindrome =(n) => {\n  let reverse = n.split(\"\").reverse().join(\"\");\n  return n == reverse;\n};\n\nconst largestPalindromeSubsequence =(n) => {\n  let current = 1;\n  let max = 1;\n  let subSequence = largestPalindromeSubsequence(n);\n  while (subSequence.current < subSequence.max) {\n    let subSequence = largestPalindromeSubsequence(n."}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let j = 2; j < n; j++)\n    if (n % j == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if ( !isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if ( !isPrime(j)) continue;\n      let k = 2;\n      while (k < 101) {\n         {\n          if ( !isPrime(k)) k++; continue;\n          if (i * j * k == a)\n          k++; return true;\n          }\n        k++;}\n      }\n    }\n  return false;\n  }\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let j = 2; j < n; j++)\n    if (n % j == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n     \n      if (isPrime(i * j)) {\n        if (i * j < a) return false;\n      }\n    }\n  }\n  return true;\n}\n\n//Test\nconsole.log(isMultiplyPrime(30));<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n  , 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (s.at( - 1) == 'y' || s.at( - 1) == 'Y')\n  n_vowels+=1;\n  return n_vowels;\n  }\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n , 0);\n \n  return n_vowels;\n};\n\n\nconsole.log(vowelsCount(\"ACEDY\"));\nconsole.log(vowelsCount(\"aBcDe\"));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1) {\n      lo = i}\n    }\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet2) {\n      hi = i}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (lo == - 1 || hi == - 1 || lo == hi) {\n    return [ ]}\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n    }\n  let i = lo + 1;\n  while (i < hi) {\n     {\n      u.push(y [ i ])\n      }\n    i++;}\n  return u\n  }\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1) {\n      lo = i}\n    }\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet2) {\n      hi = i}\n    }\n \n  if (lo == -1 || hi == -1) {\n    return []\n  }\n  if (hi < lo) {\n    return []\n  }\n  for (let i = lo; i <= hi; i++) {\n    u.push(y[i])\n  }\n  u.sort()\n  return u\n}\n\n/*\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the Sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1) {\n      lo = i}\n    }\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet2) {\n      hi = i}\n    }\n \n  if (lo == -1 || hi == -1) {\n    return []\n  }\n  if (hi < lo) {\n    return []\n  }\n  for (let i = lo; i <= hi; i++) {\n    u.push(y[i])\n  }\n  u.sort()\n  return u\n}\n\n/*\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the Sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet1) {\n      lo = i}\n    }\n  for (let i = 0; i < 8; i++) {\n    if (y [ i ] == planet2) {\n      hi = i}\n    }\n \n  if (lo == -1 || hi == -1) {\n    return []\n  }\n  if (hi < lo) {\n    return []\n  }\n  for (let i = lo; i <= hi; i++) {\n    u.push(y[i])\n  }\n  u.sort()\n  return u\n}\n\nconst planet = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\nconst expected = ['Mercury', 'Earth', 'Jupiter', 'Saturn', 'Neptune', 'Uranus', 'Venus', 'Mars']\nconst bf = (planet1, planet2) => {\n  let u = [ ]\n  for (let i = 0; i < 8; i++) {\n    if (planet1 == planet[i] || planet2 == planet[i]) {\n      u.push(planet[i])\n    }\n  }\n  u.sort()\n  return u\n}\n\nconst bf = (planet1, planet2) => {\n  let u = [ ]\n  for (let i = 0; i < 8; i++) {\n    if (planet1 == planet[i] || planet2 == planet[i]) {\n      u.push(planet[i])\n    }\n  }\n  u.sort()\n  return u\n}\n\nconsole.log(bf('Mercury', 'Mercury'))\nconsole.log(bf('Mercury', 'Mercury'))\nconsole.log(bf('Mercury', 'Mercury'))\nconsole.log(bf('Mercury', 'Mercury'))\nconsole.log(bf('Mercury', '"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a, b) => {\n  if (a < 0) {\n    a = - a}\n  if (b < 0) {\n    b = - b}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(a % 10) *(b % 10)\n  }\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a, b) => {\n  if (a < 0) {\n    a = - a}\n  if (b < 0) {\n    b = - b}\n \n  let x = a % 10;\n  let y = b % 10;\n  let result = 0;\n  let carry = 0;\n  while (x!= 0 || y!= 0) {\n    result += x * y;\n    x = x % 10;\n    y = y % 10;\n    carry += result % 10;\n    result = result / 10;\n  }\n  return (carry + result);\n}\n\nconst multiply2 = (a, b) => {\n  let carry = 0;\n  let result = 0;\n  for (let i = 0; i < Math.max(a.length, b.length); i++) {\n    let digit = a.length > i? a.charCodeAt(i) : 0;\n    let digit2 = b.length > i? b.charCodeAt(i) : 0;\n    result += (digit * digit2) + (carry + result) % 10;\n    carry = result / 10;\n  }\n  return carry + result;\n}\n\nconst multiply3 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let digit = a.charCodeAt(i);\n    for (let j = 0; j < b.length; j++) {\n      result += (digit * b.charCodeAt(j)) + (result) % 10;\n    }\n  }\n  return result;\n}\n\nconst multiply4 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let digit = a.charCodeAt(i);\n    let carry = 0;\n    for (let j = 0; j < b.length; j++) {\n      carry += (digit * b.charCodeAt(j)) + (carry) % 10;\n      digit = carry % 10;\n      carry = carry / 10;\n    }\n    result += digit;\n  }\n  return result;\n}\n\nconst multiply5 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let carry = 0;\n    for (let j = 0; j < b.length; j++) {\n      let digit = a.charCodeAt(i) + b.charCodeAt(j) + carry;\n      carry = digit / 10;\n      result += digit % 10;\n    }\n  }\n  return result;\n}\n\nconst multiply6 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let carry = 0;\n    for (let j = 0; j < b.length; j++) {\n      let digit = a.charCodeAt(i) + b.charCodeAt(j) + carry;\n      carry = (digit + carry) / 10;\n      result += digit % 10;\n    }\n  }\n  return result;\n}\n\nconst multiply7 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let carry = 0;\n    for (let j = 0; j < b.length; j++) {\n      let digit = a.charCodeAt(i) + b.charCodeAt(j) + carry;\n      carry = (digit + carry) / 10;\n      result += digit % 10;\n    }\n  }\n  return result;\n}\n\nconst multiply8 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let carry = 0;\n    for (let j = 0; j < b.length; j++) {\n      let digit = a.charCodeAt(i) + b.charCodeAt(j) + carry;\n      carry = (digit + carry) % 10;\n      result += carry;\n    }\n  }\n  return result;\n}\n\nconst multiply9 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let carry = 0;\n    for (let j = 0; j < b.length; j++) {\n      let digit = a.charCodeAt(i) + b.charCodeAt(j) + carry;\n      carry = (digit + carry) / 10;\n      result += digit % 10;\n    }\n  }\n  return result;\n}\n\nconst multiply10 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let carry = 0;\n    for (let j = 0; j < b.length; j++) {\n      let digit = a.charCodeAt(i) + b.charCodeAt(j) + carry;\n      carry = (digit + carry) % 10;\n      result += carry;\n    }\n  }\n  return result;\n}\n\nconst multiply11 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let carry = 0;\n    for (let j = 0; j < b.length; j++) {\n      let digit = a.charCodeAt(i) + b.charCodeAt(j) + carry;\n      carry = (digit + carry) / 10;\n      result += carry % 10;\n    }\n  }\n  return result;\n}\n\nconst multiply12 = (a, b) => {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let carry = 0;\n    for (let j = 0; j < b.length; j++) {\n      let digit = a.charCodeAt(i) + b.charCodeAt(j) +"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(a) => {\n  a = Math.abs(a);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n  }\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(a) => {\n  a = Math.abs(a);\n \n  var c = Math.pow(a,1/3);\n  return c === a? true : false;\n}\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(3));\nconsole.log(iscube(4));\nconsole.log(iscube(5));\nconsole.log(iscube(6));\nconsole.log(iscube(7));\nconsole.log(iscube(8));\nconsole.log(iscube(9));\nconsole.log(iscube(10));\nconsole.log(iscube(11));\nconsole.log(iscube(12));\nconsole.log(iscube(13));\nconsole.log(iscube(14));\nconsole.log(iscube(15));\nconsole.log(iscube(16));\nconsole.log(iscube(17));\nconsole.log(iscube(18));\nconsole.log(iscube(19));\nconsole.log(iscube(20));\nconsole.log(iscube(21));\nconsole.log(iscube(22));\nconsole.log(iscube(23));\nconsole.log(iscube(24));\nconsole.log(iscube(25));\nconsole.log(iscube(26));\nconsole.log(iscube(27));\nconsole.log(iscube(28));\nconsole.log(iscube(29));\nconsole.log(iscube(30));\nconsole.log(iscube(31));\nconsole.log(iscube(32));\nconsole.log(iscube(33));\nconsole.log(iscube(34));\nconsole.log(iscube(35));\nconsole.log(iscube(36));\nconsole.log(iscube(37));\nconsole.log(iscube(38));\nconsole.log(iscube(39));\nconsole.log(iscube(40));\nconsole.log(iscube(41));\nconsole.log(iscube(42));\nconsole.log(iscube(43));\nconsole.log(iscube(44));\nconsole.log(iscube(45));\nconsole.log(iscube(46));\nconsole.log(iscube(47));\nconsole.log(iscube(48));\nconsole.log(iscube(49));\nconsole.log(iscube(50));\nconsole.log(iscube(51));\nconsole.log(iscube(52));\nconsole.log(iscube(53));\nconsole.log(iscube(54));\nconsole.log(iscube(55));\nconsole.log(iscube(56));\nconsole.log(iscube(57));\nconsole.log(iscube(58));\nconsole.log(iscube(59));\nconsole.log(iscube(60));\nconsole.log(iscube(61));\nconsole.log(iscube(62));\nconsole.log(iscube(63));\nconsole.log(iscube(64));\nconsole.log(iscube(65));\nconsole.log(iscube(66));\nconsole.log(iscube(67));\nconsole.log(iscube(68));\nconsole.log(iscube(69));\nconsole.log(iscube(70));\nconsole.log(iscube(71));\nconsole.log(iscube(72));\nconsole.log(iscube(73));\nconsole.log(iscube(74));\nconsole.log(iscube(75));\nconsole.log(iscube(76));\nconsole.log(iscube(77));\nconsole.log(iscube(78));\nconsole.log(iscube(79));\nconsole.log(iscube(80));\nconsole.log(iscube(81));\nconsole.log(iscube(82));\nconsole.log(iscube(83));\nconsole.log(iscube(84));\nconsole.log(iscube(85));\nconsole.log(iscube(86));\nconsole.log(iscube(87));\nconsole.log(iscube(88));\nconsole.log(iscube(89));\nconsole.log(iscube(90));\nconsole.log(iscube(91));\nconsole.log(iscube(92));\nconsole.log(iscube(93));\nconsole.log(iscube(94));\nconsole.log(iscube(95));\nconsole.log(iscube(96));\nconsole.log(iscube(97));\nconsole.log(iscube(98));\nconsole.log(iscube(99));\nconsole.log(iscube(100));\nconsole.log(iscube(101));\nconsole.log(iscube(102));\nconsole.log(iscube(103));\nconsole.log(iscube(104));\nconsole.log(iscube(105));\nconsole.log(iscube(106));\nconsole.log(iscube(107));\nconsole.log(iscube(108));\nconsole.log(iscube(109));\nconsole.log(iscube(110));\nconsole.log(iscube(111));\nconsole.log(iscube(112));\nconsole.log(iscube(113));\nconsole.log(iscube(114));\nconsole.log(iscube(115));\nconsole.log(iscube(116));\nconsole.log(iscube(117));\nconsole.log(iscube(118));\nconsole.log(iscube(119));\nconsole.log(iscube(120));\nconsole.log(iscube(121));\nconsole.log(iscube(122));\nconsole.log(iscube(123));\nconsole.log(iscube(124));\nconsole.log(iscube(125));\nconsole.log(iscube(126));\nconsole.log(iscube(127));\nconsole.log(iscube(128));\nconsole.log(iscube(129));\nconsole.log(iscube(130));\nconsole.log(iscube(131));\nconsole.log(iscube(132));\nconsole.log(iscube(133));\nconsole.log(iscube(134));\nconsole.log(iscube(135));\nconsole.log(iscube(136));\nconsole.log(iscube(137));\nconsole.log(isc"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n    'six' : 6,\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n    }\n  ;\n  return numbers.split(' ')\n  .filter(x => x != '')\n  .sort((a, b) => value_map [ a ] - value_map [ b ])\n  .join(' ');\n  }\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9,\n  };\n  return numbers.split(' ').map((value) => value_map[value]).join(' ');\n};\n\n/* Input is a space-delimited string of numbers from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumerals =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9,\n  };\n  return numbers.split(' ').map((value) => value_map[value]).join(' ');\n};\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumerals('three one five')\n  'one three five'\n  */\nconst sortNumbersWithSpace =(numbers) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9,\n  };\n  return numbers.split(' ').map((value) => value_map[value]).join(' ');\n};\n\nconst sortNumbersInChunks = (numbers, chunkSize) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9,\n  };\n  const numbers_chunked = splitIntoChunks(numbers, chunkSize);\n  return numbers_chunked.map((numbers_chunk) => sortNumbers(numbers_chunk)).join('');\n};\n\nconst splitIntoChunks = (string, chunkSize) => {\n  const string_chunks = [];\n  const string_chunk = string;\n  let i = 0;\n  while (i < string.length) {\n    const chunk = string_chunk.slice(i, i + chunkSize);\n    string_chunks.push(chunk);\n    i += chunkSize;\n  }\n  return string_chunks;\n};\n\nconst sortNumeralsInChunks = (numbers, chunkSize) => {\n  const value_map = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9,\n  };\n  const numbers_chunked = splitIntoChunks(numbers, chunkSize);\n  return numbers_chunked.map((numbers_chunk) => sortNumerals(numbers_chunk)).join('');\n};\n\nmodule.exports = {\n  sortNumbers,\n  sortNumbersWithSpace,\n  sortNumerals,\n  sortNumeralsInChunks,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, index) =>(index % 2 == 0 ? even [ index / 2 ] : item));\n  }\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n  return l.filter((item, index) => index % 2!= 0).concat(even);\n};\n\nmodule.exports = sortEven;<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  let i = n;\n  while (i < n * 3) {\n     {\n      t.push(i)\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i+=2;}\n  return t\n  }\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  let i = n;\n  while (i < n * 3) {\n     {\n      t.push(i)\n     \n     if (i % 2 === 0) {\n        i += 1\n     } else {\n        i += 2\n     }\n    }\n    i += 1\n  }\n  return t\n}\n\nconsole.log(makeAPile(3))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let letter_grade = [ ]\n  let i = 0, len = grades.length;\n  while (i < len) {\n     {\n      let gpa = grades [ i ]\n      if (gpa == 4.0) {\n        letter_grade.push('A+')\n        }\n      else\nif (gpa > 3.7) {\n        letter_grade.push('A')\n        }\n      else\nif (gpa > 3.3) {\n        letter_grade.push('A-')\n        }\n      else\nif (gpa > 3.0) {\n        letter_grade.push('B+')\n        }\n      else\nif (gpa > 2.7) {\n        letter_grade.push('B')\n        }\n      else\nif (gpa > 2.3) {\n        letter_grade.push('B-')\n        }\n      else\nif (gpa > 2.0) {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        letter_grade.push('C+')\n        }\n      else\nif (gpa > 1.7) {\n        letter_grade.push('C')\n        }\n      else\nif (gpa > 1.3) {\n        letter_grade.push('C-')\n        }\n      else\nif (gpa > 1.0) {\n        letter_grade.push('D+')\n        }\n      else\nif (gpa > 0.7) {\n        letter_grade.push('D')\n        }\n      else\nif (gpa > 0.0) {\n        letter_grade.push('D-')\n        }\n      else {\n        letter_grade.push('E')\n        }\n      }\n    i++;}\n  return letter_grade\n  }\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let letter_grade = [ ]\n  let i = 0, len = grades.length;\n  while (i < len) {\n     {\n      let gpa = grades [ i ]\n      if (gpa == 4.0) {\n        letter_grade.push('A+')\n        }\n      else\nif (gpa > 3.7) {\n        letter_grade.push('A')\n        }\n      else\nif (gpa > 3.3) {\n        letter_grade.push('A-')\n        }\n      else\nif (gpa > 3.0) {\n        letter_grade.push('B+')\n        }\n      else\nif (gpa > 2.7) {\n        letter_grade.push('B')\n        }\n      else\nif (gpa > 2.3) {\n        letter_grade.push('B-')\n        }\n      else\nif (gpa > 2.0) {\n       \n        letter_grade.push('C+')\n        }\n      else\nif (gpa > 1.7) {\n        letter_grade.push('C')\n        }\n      else\nif (gpa > 1.3) {\n        letter_grade.push('C-')\n        }\n      else\nif (gpa > 1.0) {\n        letter_grade.push('D+')\n        }\n      else\nif (gpa > 0.7) {\n        letter_grade.push('D')\n        }\n      else\nif (gpa > 0.0) {\n        letter_grade.push('D-')\n        }\n      else {\n        letter_grade.push('E')\n        }\n      \n      i++\n      }\n  return letter_grade\n};\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var power = 1;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  for (; power < x;) {\n    power = power * n;\n    }\n  return(power == x);\n  }\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var power = 1;\n \n  while (power <= n) {\n    if (power * x == n)\n    return(true);\n    power *= x;\n  }\n  return(false);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(e => e > 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(e => e > 0);\n \n};\n\n/* Return a list of numbers in the list that are also in the positive list.\n  >>> getIncluded([-1, 2, -4, 5, 6])\n  []\n  >>> getIncluded([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getIncluded([-1, 2, -4, 5, 6, 0, -1, -2, -3, -4, -5, -6])\n  [0, 1, 2, 3, 4, 5, 6]\n  >>> getIncluded([0, -1, -2, -3, -4, -5, -6])\n  [0, -1, -2, -3, -4, -5, -6]\n  >>> getIncluded([-1, 2, -4, 5, 6, 0, -1, -2, -3, -4, -5, -6, 7])\n  [0, 1, 2, 3, 4, 5, 6, 7]\n  */\nconst getIncluded =(l) => {\n  return l.filter(e => l.indexOf(e) > -1);\n};\n\n\n/* Return a list of numbers in the list that are in the positive list but not in the included list.\n  >>> getExcluded([-1, 2, -4, 5, 6])\n  [0, -1, -2, -3, -4, -5, -6]\n  >>> getExcluded([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [0, 1, 2, 3, 4, 5, 6, 9, 123, 1, -10]\n  >>> getExcluded([-1, 2, -4, 5, 6, 0, -1, -2, -3, -4, -5, -6, 7])\n  [0, 1, 2, 3, 4, 5, 6, 7]\n  */\nconst getExcluded =(l) => {\n  return l.filter(e => l.indexOf(e) === -1);\n};\n\n\n\n/* Return the list of numbers in the list that are either in the positive list or in the included list.\n  >>> getCommon([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getCommon([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [2, 3, 9, 123, 1]\n  >>> getCommon([-1, 2, -4, 5, 6, 0, -1, -2, -3, -4, -5, -6, 7])\n  [2, 3, 9, 123, 1, 7]\n  */\nconst getCommon =(l) => {\n  return l.filter(e => getIncluded(l).indexOf(e) > -1 || getPositive(l).indexOf(e) > -1);\n};\n\n\n/* Return the list of numbers in the list that are in the positive list and in the included list.\n  >>> getCommonIncluded([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getCommonIncluded([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [2, 3, 9, 123, 1]\n  >>> getCommonIncluded([-1, 2, -4, 5, 6, 0, -1, -2, -3, -4, -5, -6, 7])\n  [2, 3, 9, 123, 1, 7]\n  */\nconst getCommonIncluded =(l) => {\n  return l.filter(e => getIncluded(l).indexOf(e) > -1 && getPositive(l).indexOf(e) > -1);\n};\n\n\n\n/* Return the list of numbers in the list that are in the positive list and in the excluded list.\n  >>> getCommonExcluded([-1, 2, -4, 5, 6])\n  [0, -1, -2, -3, -4, -5, -6]\n  >>> getCommonExcluded([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [0, 1, 2, 3, 4, 5, 6, 9, 123, 1, -10]\n  >>> getCommonExcluded([-1, 2, -4, 5, 6, 0, -1, -2, -3, -4, -5, -6, 7])\n  [0, 1, 2, 3, 4, 5, 6, 7]\n  */\nconst getCommonExcluded =(l) => {\n  return l.filter(e => getIncluded(l).indexOf(e) === -1 && getPositive(l).indexOf(e) === -1);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        y+=lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        y+=lst [ i ] * lst [ i ] * lst [ i ]}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      else {\n        y+=lst [ i ]}\n      }\n    i++;}\n  return y\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        y+=lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        y+=lst [ i ] * lst [ i ] * lst [ i ]}\n     \n     else {\n       y+=lst [ i ]}\n     i++\n     }\n  }\n  return y\n}\n\nconst sumSquares2 =(lst) => {\n  let y = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        y+=lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        y+=lst [ i ] * lst [ i ] * lst [ i ]}\n     \n     else {\n       y+=lst [ i ]}\n     i++\n     }\n  }\n  return y\n}\n\n\nconst sumSquares3 =(lst) => {\n  let y = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (i % 3 == 0) {\n        y+=lst [ i ] * lst [ i ]}\n      else\nif (i % 4 == 0) {\n        y+=lst [ i ] * lst [ i ] * lst [ i ]}\n     \n     else {\n       y+=lst [ i ]}\n     i++\n     }\n  }\n  return y\n}\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares2([1,2,3]));\nconsole.log(sumSquares3([1,2,3]));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  let i = 2;\n  while (i <= n) {\n     {\n      if (i % 2 == 0) {\n        p.push(1 + i / 2)\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      else {\n        p.push(p [ i - 2 ] + p [ i - 1 ] + 1 +(i + 1) / 2)\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  let i = 2;\n  while (i <= n) {\n     {\n      if (i % 2 == 0) {\n        p.push(1 + i / 2)\n       \n      } else {\n        p.push(p[i - 1] + p[i - 2] + p[i - 3])\n      }\n      i++;\n    }\n  }\n  return p\n}\n\nconst isPalindrome = (n) => {\n  if (n <= 0) {\n    return false\n  }\n  let arr = tri(n)\n  let arrLength = arr.length\n  for (let i = 0; i < arrLength / 2; i++) {\n    if (arr[i]!= arr[arrLength - i - 1]) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(isPalindrome(12))\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var results = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return results [ n ];\n  let i = 4;\n  while (i < n + 1) {\n     {\n      results.push(results.at( - 1) + results.at( - 2) +\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      results.at( - 3) + results.at( - 4));\n      results.shift();\n      }\n    i++;}\n  return results.pop();\n  }\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var results = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return results [ n ];\n  let i = 4;\n  while (i < n + 1) {\n     {\n      results.push(results.at( - 1) + results.at( - 2) +\n     \n    results.at( - 3) + results.at( - 4) );\n      i = i + 1;\n    }\n  }\n  return results.at( - 1);\n};\nfib4(5);\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  let i = y;\n  while (i >= x) {\n     {\n      if (i % 2 == 0) {\n        i--; return i}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i--;}\n  return - 1\n  }\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  let i = y;\n  while (i >= x) {\n     {\n      if (i % 2 == 0) {\n        i--; return i}\n     \n     }\n     i--;\n  }\n  return -1;\n}\n\nconsole.log(chooseNum(2, 4));\nconsole.log(chooseNum(4, 2));\nconsole.log(chooseNum(1, 0));\nconsole.log(chooseNum(0, 1));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1 && lst [ i ] > 0) {\n        p+=lst [ i ] * lst [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1 && lst [ i ] > 0) {\n        p+=lst [ i ] * lst [ i ]\n       \n      }\n    }\n    i++;\n  }\n  return p;\n}\n\n// doubleTheDifference([1, 3, 2, 0]) == 10\n// doubleTheDifference([-1, -2, 0]) == 0\n// doubleTheDifference([9, -2]) == 81\n// doubleTheDifference([0]) == 0\n\n// console.log(doubleTheDifference([1, 3, 2, 0]));\n// console.log(doubleTheDifference([-1, -2, 0]));\n// console.log(doubleTheDifference([9, -2]));\n// console.log(doubleTheDifference([0]));\n\n// console.log(doubleTheDifference([1, 3, 2, 0, 4, 2, 1, 5, 0, -1]));\n// console.log(doubleTheDifference([1, 3, 2, 0, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2]));\n// console.log(doubleTheDifference([1, 3, 2, 0, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2]));\n// console.log(doubleTheDifference([1, 3, 2, 0, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2]));\n// console.log(doubleTheDifference([1, 3, 2, 0, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1, 9, -2, 4, 2, 1, 5, 0, -1,"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(e => e + 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(e => e + 1);\n \n};\n\n/**\n  * @function\n  * @name listEqual\n  * @description\n  * @param {Array} a\n  * @param {Array} b\n  * @returns {boolean}\n  */\nconst listEqual =(a, b) => {\n  let i = 0;\n  let len = a.length;\n  while (i < len) {\n    if (a[i]!== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = {\n  incrList,\n  listEqual\n};\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  let i = 0;\n  while (i < s.length - 2) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  if (s [ i ] == s [ i + 1 ] || s [ i + 1 ] == s [ i + 2 ] || s [ i ] == s [ i + 2 ])\n  return false;\n  return true;\n  }\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  let i = 0;\n  while (i < s.length - 2) {\n   \n    if (s[i] === s[i + 1])\n    return false;\n    i++;\n  }\n  return true;\n}\n\nconsole.log(isHappy(\"a\")); // false\nconsole.log(isHappy(\"aa\")); // false\nconsole.log(isHappy(\"abcd\")); // true\nconsole.log(isHappy(\"aabb\")); // false\nconsole.log(isHappy(\"adb\")); // true\nconsole.log(isHappy(\"xyy\")); // false\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(x => Number.isInteger(x));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(x => Number.isInteger(x));\n \n};\n\n// Filter given list of any python values only for floating point numbers\nconst filterFloating =(values) => {\n  return values.filter(x => Number.isFinite(x));\n \n};\n\nconst filterByInteger =(values) => {\n  return values.filter(x => Number.isInteger(x));\n \n};\n\nconst filterByFloating =(values) => {\n  return values.filter(x => Number.isFinite(x));\n \n};\n\n// Filter given list of any python values only for numbers\nconst filterNumber =(values) => {\n  return values.filter(x => typeof x === 'number');\n \n};\n\n// Filter given list of any python values only for string\nconst filterString =(values) => {\n  return values.filter(x => typeof x ==='string');\n \n};\n\n// Filter given list of any python values only for boolean\nconst filterBoolean =(values) => {\n  return values.filter(x => typeof x === 'boolean');\n \n};\n\n// Filter given list of any python values only for objects\nconst filterObjects =(values) => {\n  return values.filter(x => typeof x === 'object');\n \n};\n\n// Filter given list of any python values only for dictionaries\nconst filterDictionaries =(values) => {\n  return values.filter(x => typeof x === 'object' && typeof x.get === 'function');\n \n};\n\n// Filter given list of any python values only for arrays\nconst filterArrays =(values) => {\n  return values.filter(x => Array.isArray(x));\n \n};\n\n// Filter given list of any python values only for functions\nconst filterFunctions =(values) => {\n  return values.filter(x => typeof x === 'function');\n \n};\n\n// Filter given list of any python values only for null\nconst filterNull =(values) => {\n  return values.filter(x => x === null);\n \n};\n\n// Filter given list of any python values only for undefined\nconst filterUndefined =(values) => {\n  return values.filter(x => typeof x === 'undefined');\n \n};\n\n// Filter given list of any python values only for arrays of strings\nconst filterStrings =(values) => {\n  return values.filter(x => Array.isArray(x) && typeof x[0] ==='string');\n \n};\n\n// Filter given list of any python values only for arrays of numbers\nconst filterNumbers =(values) => {\n  return values.filter(x => Array.isArray(x) && typeof x[0] === 'number');\n \n};\n\n// Filter given list of any python values only for arrays of objects\nconst filterObjects =(values) => {\n  return values.filter(x => Array.isArray(x) && typeof x[0] === 'object');\n \n};\n\n// Filter given list of any python values only for arrays of dictionaries\nconst filterDictionaries =(values) => {\n  return values.filter(x => Array.isArray(x) && typeof x[0] === 'object' && typeof x[0].get === 'function');\n \n};\n\n// Filter given list of any python values only for arrays of booleans\nconst filterBooleans =(values) => {\n  return values.filter(x => Array.isArray(x) && typeof x[0] === 'boolean');\n \n};\n\n// Filter given list of any python values only for arrays of numbers\nconst filterFloats =(values) => {\n  return values.filter(x => Array.isArray(x) && typeof x[0] === 'number');\n \n};\n\n// Filter given list of any python values only for arrays of strings\nconst filterStrings =(values) => {\n  return values.filter(x => Array.isArray(x) && typeof x[0] ==='string');\n \n};\n\n// Filter given list of any python values only for dictionaries with string keys\nconst filterDictionaries =(values) => {\n  return values.filter(x => typeof x === 'object' && typeof x.get === 'function' && typeof x.keys === 'function');\n \n};\n\n// Filter given list of any python values only for arrays of functions\nconst filterFunctions =(values) => {\n  return values.filter(x => Array.isArray(x) && typeof x[0] === 'function');\n \n};\n\n// Filter given list of any python values only for null\nconst filterNull =(values) => {\n  return values.filter(x => x === null);\n \n};\n\n// Filter given list of any python values only for undefined\nconst filterUndefined =(values) => {\n  return values.filter(x => typeof x === 'undefined');\n \n};\n\n// Filter given list of any python values only for objects\nconst filterObjects =(values) => {\n  return values.filter(x => typeof x === 'object');\n \n};\n\n// Filter given list of any python values only for dictionaries with number keys\nconst filterDictionaries =(values) => {\n  return values.filter(x => typeof x === 'object' && typeof x.get === 'function' && typeof x.keys === 'function');\n \n};\n\n// Filter given list of any python values only for booleans\nconst filterBooleans =(values) => {\n  return values.filter(x => typeof x === 'boolean');\n \n};\n\n// Filter given list of any python values only for numbers\nconst filterFloats =(values) => {\n  return values.filter(x => typeof x === 'number');\n \n};\n\n// Filter given list of any python values only for strings\nconst filterStrings =(values) => {\n  return values.filter(x => typeof x ==='string');\n \n};\n\n// Filter given list of any python values only for strings\nconst filterStrings =(values) => {\n  return values.filter(x => typeof x ==='string');\n \n};\n\n// Filter given"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < p.length) {\n       {\n        if (p [ k ] < p [ ind ]) {\n          ind = k\n          }\n        }\n      k++;}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  if (k == 0) {\n    return [ ]}\n  return p.slice( - k)\n  }\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < p.length) {\n       {\n        if (p [ k ] < p [ ind ]) {\n          ind = k\n          }\n        }\n      k++;}\n   \n    if (k - j > k - ind) {\n      p [ j ] = p [ ind ];\n      } else {\n      break;\n    }\n  }\n  return p\n}\n\nconst arr = [-3, -4, 5, 4, -4, 4, 4, -4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4, 4, -4, 4"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n \n}\n\n/*\n  Given a number, return the factorial of it.\n  >>> factorial(0)\n  1\n  >>> factorial(1)\n  1\n  >>> factorial(2)\n  2\n  >>> factorial(3)\n  6\n  >>> factorial(4)\n  24\n  >>> factorial(5)\n  120\n  >>> factorial(6)\n  720\n  >>> factorial(7)\n  5040\n  >>> factorial(8)\n  40320\n  >>> factorial(9)\n  362880\n  >>> factorial(10)\n  3628800\n  >>> factorial(11)\n  39916800\n  >>> factorial(12)\n  479001600\n  >>> factorial(13)\n  6227020800\n  >>> factorial(14)\n  87178291200\n  >>> factorial(15)\n  1307674368000\n  >>> factorial(16)\n  17592186044416\n  >>> factorial(17)\n  2025078125000\n  >>> factorial(18)\n  21617277525000\n  >>> factorial(19)\n  25078005001000\n  >>> factorial(20)\n  26952914290000\n  >>> factorial(21)\n  28183885050000\n  >>> factorial(22)\n  29802322387100\n  >>> factorial(23)\n  31398537894100\n  >>> factorial(24)\n  32182712402000\n  >>> factorial(25)\n  3372036854740200\n  >>> factorial(26)\n  35230081368500000\n  >>> factorial(27)\n  378974877906944000\n  >>> factorial(28)\n  4009519082836800000\n  >>> factorial(29)\n  425244537690823200000\n  >>> factorial(30)\n  461168601842738798000\n  >>> factorial(31)\n  50331648128351808000000\n  >>> factorial(32)\n  536870912000000000000000\n  >>> factorial(33)\n  57646075230342348398400000\n  >>> factorial(34)\n  64789978417500565360000\n  >>> factorial(35)\n  7036874417765339539200000\n  >>> factorial(36)\n  7818643965454101560000000\n  >>> factorial(37)\n  854742946313583514000000\n  >>> factorial(38)\n  9227418096513303348000000\n  >>> factorial(39)\n  10233479071784185735200000\n  >>> factorial(40)\n  11274868129817210786400000\n  >>> factorial(41)\n  12586269025278635860000000\n  >>> factorial(42)\n  13954691472251858624000000\n  >>> factorial(43)\n  1475642396825397764800000\n  >>> factorial(44)\n  15451423207273513440000000\n  >>> factorial(45)\n  160791767992188044800000\n  >>> factorial(46)\n  169329257265579200000000\n  >>> factorial(47)\n  1797693134862315708145274\n  >>> factorial(48)\n  1801439850948198317058\n  >>> factorial(49)\n  1822203915654423967485\n  >>> factorial(50)\n  18442047496475413086\n  >>> factorial(51)\n  1878917564721740770\n  >>> factorial(52)\n  1911802521674902781\n  >>> factorial(53)\n  1931880607466265450\n  >>> factorial(54)\n  1958974645251464230\n  >>> factorial(55)\n  1996180678311180125\n  >>> factorial(56)\n  2004241009444101441\n  >>> factorial(57)\n  2014406537539449855\n  >>> factorial(58)\n  2013557848344230499\n  >>> factorial(59)\n  20251690168318490129\n  >>> factorial(60)\n  2045603965481902405\n  >>> factorial(61)\n  2070307612348983986\n  >>> factorial(62)\n  209547443638807096\n  >>> factorial(63)\n  2108928969642293028\n  >>> factorial(64)\n  2115901991852120986\n  >>> factorial(65)\n  2123929973065671609\n  >>> factorial(66)\n  213142827056141881\n  >>> factorial(67)\n  2134555265917063781\n  >>> factorial(68)\n  2136817758365769081\n  >>> factorial(69)\n  21408113433252594581\n  >>> factorial(70)\n  214222208654803801\n  >>> factorial(71)\n  214442748515806701\n  >>> factorial(72)\n  21465979947209613\n  >>> factorial(73)\n  2148739852903065\n  >>> factorial(74)\n  215106845764050\n  >>> factorial(75)\n  215242336893400\n  >>> factorial(76)\n  21545946845855\n  >>> factorial(77)\n  2156636261880\n  >>> factorial(78)\n  2157729156910\n  >>> factorial(79)\n  215882455400\n  >>> factorial(80)\n  215991037450\n  >>> factorial(81)\n"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(text) => {\n  if (text == '') {\n    return null}\n  var md5 = require('js-md5')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return md5(text)\n  }\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(text) => {\n  if (text == '') {\n    return null}\n  var md5 = require('js-md5')\n \n  return md5.createHash(text).toString();\n}\n\nmodule.exports = stringToMd5;<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr [ i ].length; j++) {\n      let ind = j\n      let k = j + 1;\n      while (k < arr [ i ].length) {\n         {\n          if (arr [ i ] [ k ].charCodeAt() < arr [ i ] [ ind ].charCodeAt()) {\n            ind = k\n            }\n          }\n        k++;}\n      if (ind > j) {\n        arr [ i ] = arr [ i ].slice(0, j) + arr [ i ] [ ind ] + arr [ i ].slice(j + 1, ind) + arr [ i ] [ j ] + arr [ i ].slice(ind + 1, arr [ i ].length)\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    }\n  let t = ''\nfor (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '}\n    t = t + arr [ i ]\n    }\n  return t\n  }\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr [ i ].length; j++) {\n      let ind = j\n      let k = j + 1;\n      while (k < arr [ i ].length) {\n         {\n          if (arr [ i ] [ k ].charCodeAt() < arr [ i ] [ ind ].charCodeAt()) {\n            ind = k\n            }\n          }\n        k++;}\n      if (ind > j) {\n        arr [ i ] = arr [ i ].slice(0, j) + arr [ i ] [ ind ] + arr [ i ].slice(j + 1, ind) + arr [ i ] [ j ] + arr [ i ].slice(ind + 1, arr [ i ].length)\n       \n        }\n      }\n    }\n    return arr.join(' ')\n  }\n}\n\nconst shuffle =(s) => {\n  let arr = s.split( / s /)\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let ind = Math.floor(Math.random() * (arr [ i ].length - 1))\n    result += arr [ i ] [ ind ] + arr [ i ].slice(ind + 1, arr [ i ].length)\n  }\n  return result\n}\n\nconst shuffleWithSpace =(s) => {\n  let arr = s.split( / s /)\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let ind = Math.floor(Math.random() * (arr [ i ].length - 1))\n    result += arr [ i ] [ ind ] +'' + arr [ i ].slice(ind + 1, arr [ i ].length)\n  }\n  return result\n}\n\nconst shuffleWithSpaceWithNewWord =(s) => {\n  let arr = s.split( / s /)\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let ind = Math.floor(Math.random() * (arr [ i ].length - 1))\n    result += arr [ i ] [ ind ] +'' + arr [ i ].slice(ind + 1, arr [ i ].length) + '!'\n  }\n  return result\n}\n\nconst shuffleWithSpaceWithNewWord2 =(s) => {\n  let arr = s.split( / s /)\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let ind = Math.floor(Math.random() * (arr [ i ].length - 1))\n    result += arr [ i ] [ ind ] +'' + arr [ i ].slice(ind + 1, arr [ i ].length) + '?'\n  }\n  return result\n}\n\nconst shuffleWithSpaceWithNewWord3 =(s) => {\n  let arr = s.split( / s /)\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let ind = Math.floor(Math.random() * (arr [ i ].length - 1))\n    result += arr [ i ] [ ind ] +'' + arr [ i ].slice(ind + 1, arr [ i ].length) + '?'\n  }\n  return result\n}\n\nconst shuffleWithSpaceWithNewWord4 =(s) => {\n  let arr = s.split( / s /)\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let ind = Math.floor(Math.random() * (arr [ i ].length - 1))\n    result += arr [ i ] [ ind ] +'' + arr [ i ].slice(ind + 1, arr [ i ].length) + '?'\n  }\n  return result\n}\n\nconst shuffleWithSpaceWithNewWord5 =(s) => {\n  let arr = s.split( / s /)\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let ind = Math.floor(Math.random() * (arr [ i ].length - 1))\n    result += arr [ i ] [ ind ] +'' + arr [ i ].slice(ind + 1, arr [ i ].length) + '?'\n  }\n  return result\n}\n\nconst shuffleWithSpaceWithNewWord6 =(s) => {\n  let arr = s.split( / s /)\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let ind = Math.floor(Math.random() * (arr [ i ].length - 1))\n    result += arr [ i ] [ ind ] +'' + arr [ i ].slice(ind + 1, arr [ i ].length) + '?'\n  }\n  return result\n}\n\nconst shuffleWithSpaceWithNewWord7 =(s) => {\n  let arr = s.split( / s /)\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let ind = Math.floor(Math.random() * (arr [ i ].length - 1))\n    result += arr [ i ] [ ind ] +'' + arr [ i ].slice(ind + 1, arr [ i ].length) + '?'\n  }\n  return result\n}\n\nconst shuffleWithSpaceWithNewWord8 =(s) => {\n  let arr = s.split( / s /)\n  let result = ''\n  for (let i = 0; i < arr.length; i++) {\n    let ind = Math.floor(Math.random() * (arr [ i ].length - 1))\n    result += arr [ i ] [ ind ] +'' + arr [ i ].slice(ind + 1, arr [ i ].length) + '?'\n  }\n  return result"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n \n};\n\n/* Filter an input list of strings by whether they are of a given type.\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  >>> filterByType(['abc', 'bcd', 'cde', 'array'], 'z')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByType =(strings, type) => {\n  return strings.filter(x => x.type === type);\n};\n\n/* Filter an input list of strings by whether they are in a given range.\n  >>> filterByRange(['abc', 'bcd', 'cde', 'array'], [3, 5])\n  ['cde']\n  >>> filterByRange(['abc', 'bcd', 'cde', 'array'], [3, 5])\n  ['abc', 'array']\n  >>> filterByRange(['abc', 'bcd', 'cde', 'array'], [4, 5])\n  []\n  */\nconst filterByRange =(strings, range) => {\n  return strings.filter(x => x.range[0] <= range[0] && x.range[1] >= range[1]);\n};\n\n/* Filter an input list of strings by whether they are in a given range.\n  >>> filterByRange(['abc', 'bcd', 'cde', 'array'], [3, 5])\n  ['cde']\n  >>> filterByRange(['abc', 'bcd', 'cde', 'array'], [3, 5])\n  ['abc', 'array']\n  >>> filterByRange(['abc', 'bcd', 'cde', 'array'], [4, 5])\n  []\n  */\nconst filterByRange =(strings, range) => {\n  return strings.filter(x => x.range[0] <= range[0] && x.range[1] >= range[1]);\n};\n\n/* Filter an input list of strings by whether they are of a given length.\n  >>> filterByLength(['abc', 'bcd', 'cde', 'array'], 3)\n  ['abc', 'bcd', 'array']\n  >>> filterByLength(['abc', 'bcd', 'cde', 'array'], 4)\n  []\n  >>> filterByLength(['abc', 'bcd', 'cde', 'array'], 5)\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByLength =(strings, length) => {\n  return strings.filter(x => x.length === length);\n};\n\n/* Filter an input list of strings by whether they are the same.\n  >>> filterBySame(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filterBySame(['abc', 'bcd', 'cde', 'array'], ['bcd', 'cde', 'abc', 'array'])\n  ['bcd']\n  */\nconst filterBySame =(strings, same) => {\n  return strings.filter(x => x === same);\n};\n\n/* Filter an input list of strings by whether they are a given number of times.\n  >>> filterByCount(['abc', 'bcd', 'cde', 'array'], 3)\n  ['abc', 'bcd', 'array']\n  >>> filterByCount(['abc', 'bcd', 'cde', 'array'], 2)\n  ['abc', 'array']\n  >>> filterByCount(['abc', 'bcd', 'cde', 'array'], 4)\n  []\n  */\nconst filterByCount =(strings, count) => {\n  return strings.filter(x => x.count === count);\n};\n\n/* Filter an input list of strings by whether they are of a given length.\n  >>> filterBySame(['abc', 'bcd', 'cde', 'array'], ['abc', 'bcd', 'cde', 'array'])\n  []\n  >>> filterBySame(['abc', 'bcd', 'cde', 'array'], ['bcd', 'cde', 'abc', 'array'])\n  ['bcd']\n  */\nconst filterBySame =(strings, same) => {\n  return strings.filter(x => x === same);\n};\n\n/* Filter an input list of strings by whether they are of a given length.\n  >>> filterByCount(['abc', 'bcd', 'cde', 'array'], 3)\n  ['abc', 'bcd', 'array']\n  >>> filterByCount(['abc', 'bcd', 'cde', 'array'], 2)\n  ['abc', 'array']\n  >>> filterByCount(['abc', 'bcd', 'cde', 'array'], 4)\n  []\n  */\nconst filterByCount =(strings, count) => {\n  return strings.filter(x => x.count === count);\n};\n\nmodule.exports = {\n  filterByLength,\n  filterByType,\n  filterByPrefix,\n  filterByRange,\n  filterBySame,\n  filterByCount\n};\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let arr = lst\n  let j = 0;\n  while (j < arr.length) {\n     {\n      let ind = j\n      for (let k = j + 1; k < arr.length; k++) {\n        if (arr [ k ] < arr [ ind ]) {\n          ind = k\n          }\n        }\n      let tmp = arr [ j ]\n      arr [ j ] = arr [ ind ]\n      arr [ ind ] = tmp\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    j++;}\n  let smallest = arr [ 0 ]\n  let pt = 1\n  while (pt < arr.length) {\n    if (arr [ pt ] > smallest) {\n      return arr [ pt ]\n      }\n    pt++\n    }\n  return null\n  }\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let arr = lst\n  let j = 0;\n  while (j < arr.length) {\n     {\n      let ind = j\n      for (let k = j + 1; k < arr.length; k++) {\n        if (arr [ k ] < arr [ ind ]) {\n          ind = k\n          }\n        }\n      let tmp = arr [ j ]\n      arr [ j ] = arr [ ind ]\n      arr [ ind ] = tmp\n     \n      j++;\n     }\n  }\n  if (arr.length == 1) {\n    return null;\n  }\n  if (arr.length == 2) {\n    return arr [ 1 ]\n  }\n  return arr [ 1 ]\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([1, 1]))\nconsole.log(nextSmallest([1]))\nconsole.log(nextSmallest([1, 2]))\nconsole.log(nextSmallest([2, 1]))\nconsole.log(nextSmallest([3, 2, 1]))\nconsole.log(nextSmallest([1, 2, 3]))\nconsole.log(nextSmallest([1, 1, 1]))\nconsole.log(nextSmallest([1, 1, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = '' let i = 0;\n  while (i < message.length) {\n     {\n      let p = message [ i ].charCodeAt()\n      if (p > 96) {\n        p-=32}\n      else\nif (p != 32 && p < 96) {\n        p+=32}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) {\n        p+=2}\n      t+=String.fromCharCode(p)\n      }\n    i++;}\n  return t\n  }\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = '' let i = 0;\n  while (i < message.length) {\n     {\n      let p = message [ i ].charCodeAt()\n      if (p > 96) {\n        p-=32}\n      else\nif (p!= 32 && p < 96) {\n        p+=32}\n     \n      t+=message [ i ].toUpperCase()\n      i+=1\n    }\n  }\n  return t\n}\n\nconsole.log(encode('This is a message'))\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let y = 0\n  let u = 1\n  let i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == '(') {\n        y++}\n      else {\n        y--}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      y++}\n    else {\n      y--}\n    if (y < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  return 'No'}\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let y = 0\n  let u = 1\n  let i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == '(') {\n        y++}\n      else {\n        y--}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n  y = 0\n  u = 1\n  i = 0;\n  while (i < w1.length) {\n     {\n      if (w1 [ i ] == ')') {\n        y++}\n      else {\n        y--}\n      if (y < 0) {\n        u = 0;\n        i++; break;\n        }\n      }\n    i++;}\n  if (u == 1 && y == 0) {\n    return 'Yes'}\n  return 'No';\n}\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst [ i ].length\n    let j = 0;\n    while (j < h) {\n       {\n        if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n          p++}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      j++;}\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n    }\n  return d\n  }\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst [ i ].length\n    let j = 0;\n    while (j < h) {\n       {\n        if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n          p++}\n       \n        j++}\n    }\n    d.push(p)\n  }\n  return d\n}\n\nconst evenCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0\n    let h = lst [ i ].length\n    let j = 0;\n    while (j < h) {\n      if (lst [ i ] [ j ].charCodeAt() % 2!= 1) {\n        p++}\n      j++}\n    d.push(p)\n  }\n  return d\n}\n\nconst even =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2!= 0) {\n      d.push(lst [ i ])\n    }\n  }\n  return d\n}\n\nconst odd =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      d.push(lst [ i ])\n    }\n  }\n  return d\n}\n\nmodule.exports = {\n  oddCount,\n  evenCount,\n  odd,\n  even\n}\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    let i = 0;\n    while (i < key.length) {\n       {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        if (key [ i ].charCodeAt() < 65 || key [ i ].charCodeAt() > 90) {\n          hi = 0}\n        if (key [ i ].charCodeAt() < 97 || key [ i ].charCodeAt() > 122) {\n          lo = 0}\n        }\n      i++;}\n    }\n  if ((lo == 0 && hi == 0) || c == 0) {\n    return false}\n  return true\n  }\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    let i = 0;\n    while (i < key.length) {\n       {\n       \n       if (key[i].toUpperCase() === key[i].toLowerCase()) {\n         lo = 0\n         break\n       }\n       }\n       i++\n    }\n    if (lo === 1) {\n      hi = 0\n      break\n    }\n  }\n  return c === Object.keys(dict).length && hi === 1\n}\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let j = 0; j < t.length; j++) {\n    let len = t [ j ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    let i = 2;\n    while (i * i <= len) {\n       {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        if (len % i == 0) {\n          u = 0}\n        }\n      i++;}\n    if (u == 0) {\n      continue}\n    if (p == '') {\n      p+=t [ j ]}\n    else {\n      p = p + ' ' + t [ j ]}\n    }\n  return p\n  }\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let j = 0; j < t.length; j++) {\n    let len = t [ j ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    let i = 2;\n    while (i * i <= len) {\n       {\n       \n       if (i * i == len) {\n        if (i == 1) {\n          p += t [ j ]\n          continue\n        }\n        p += t [ j ] + t [ j ][0]\n        continue\n       }\n       }\n       i = i + 1\n    }\n    p += t [ j ][0]\n  }\n  return p\n}\n\n//\n// console.log(wordsInSentence(\"This is a test\"))\n// // \"is\"\n//\n// console.log(wordsInSentence(\"lets go for swimming\"))\n// // \"go for\"\n//\n// console.log(wordsInSentence(\"This is a test\"))\n// // \"is\"\n//\n// console.log(wordsInSentence(\"This is a test\"))\n// // \"is\"\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth+=1;\n      current_string.push(c);\n      }\n    else\nif (c == ')') {\n      current_depth-=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [ ];\n        }\n      }\n    }\n  \n  return result;\n  }\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth+=1;\n      current_string.push(c);\n      }\n    else\nif (c == ')') {\n      current_depth-=1;\n     \n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [ ];\n        current_depth = 0;\n        }\n      }\n    else {\n      if (current_depth == 0) {\n        current_string.push(c);\n        }\n      }\n    }\n  return result;\n}\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(numbers, delimeter) => {\n  if ( !Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of numbers) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    result.push(n, delimeter);\n    }\n  result.pop();\n  return result;\n  }\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of numbers) {\n   \n    for (const m of result) {\n      result.push(m, n, delimeter);\n    }\n    result = [ ];\n  }\n  return result;\n}\n\n/*\n  Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 1)\n  [1, 1, 2, 2, 3, 1]\n  */\nconst intersperseWithDelimeter =(numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of numbers) {\n   \n    for (const m of result) {\n      result.push(m, delimeter, n);\n    }\n    result = [ ];\n  }\n  return result;\n}\n\nconst intersperseMany =(numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of numbers) {\n   \n    for (const m of result) {\n      result.push(m, n, delimeter);\n    }\n    result = [ ];\n  }\n  return result;\n}\n\nmodule.exports = {\n  intersperse,\n  intersperseWithDelimeter,\n  intersperseMany\n}<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n    }\n  , 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n    }\n  , 0) / numbers.length;\n  \n  }\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n    }\n , 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n   \n    return Math.abs(item - mean);\n    }, 0) / numbers.length;\n  }\n\n// Mean Absolute Deviation as a percent of the maximum value\n//\n// A percentage of the maximum value is the Mean Absolute Deviation divided by\n// the Maximum value.\n//\n// For example, if the maximum value is 100 and the Mean Absolute Deviation\n// is 30, then the percentage is 30/100 = 0.3.\n//\n// >>> meanAbsoluteDeviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n// 3.0\nconst meanAbsoluteDeviationPercent =(numbers) => {\n  return meanAbsoluteDeviation(numbers) / Math.max(numbers);\n  }\n\n// The Mean Absolute Deviation of a dataset of one element\n//\n// >>> meanAbsoluteDeviation([1])\n// 0.0\nconst meanAbsoluteDeviationOfOne =(numbers) => {\n  return 0;\n  }\n\n// The Mean Absolute Deviation of an empty dataset\n//\n// >>> meanAbsoluteDeviation([])\n// NaN\nconst meanAbsoluteDeviationOfEmpty =(numbers) => {\n  return NaN;\n  }\n\n// The Mean Absolute Deviation of a single number\n//\n// >>> meanAbsoluteDeviation([1])\n// 0.0\nconst meanAbsoluteDeviationOfOneNumber =(numbers) => {\n  return 0;\n  }\n\n// The Mean Absolute Deviation of an empty array\n//\n// >>> meanAbsoluteDeviation([])\n// NaN\nconst meanAbsoluteDeviationOfEmptyArray =(numbers) => {\n  return NaN;\n  }\n\n// The Mean Absolute Deviation of a single number\n//\n// >>> meanAbsoluteDeviation([1])\n// 0.0\nconst meanAbsoluteDeviationOfArray =(numbers) => {\n  return 0;\n  }\n\n// The Mean Absolute Deviation of an empty object\n//\n// >>> meanAbsoluteDeviation([{}])\n// NaN\nconst meanAbsoluteDeviationOfEmptyObject =(numbers) => {\n  return NaN;\n  }\n\n// The Mean Absolute Deviation of an object with one number as a key\n//\n// >>> meanAbsoluteDeviation([{'a':1}])\n// 0.0\nconst meanAbsoluteDeviationOfObject =(numbers) => {\n  return 0;\n  }\n\n// The Mean Absolute Deviation of an object with multiple numbers as keys\n//\n// >>> meanAbsoluteDeviation([{'a':1, 'b':2}, {'a':1, 'b':3}, {'a':1, 'b':4}])\n// 1.0\nconst meanAbsoluteDeviationOfObjectWithMultipleNumbersAsKeys =(numbers) => {\n  return 0;\n  }\n\n// The Mean Absolute Deviation of an array of objects with multiple numbers\n// as keys\n//\n// >>> meanAbsoluteDeviation([{'a':1, 'b':2}, {'a':1, 'b':3}, {'a':1, 'b':4}])\n// 1.0\nconst meanAbsoluteDeviationOfArrayOfObjectsWithMultipleNumbersAsKeys =(numbers) => {\n  return 0;\n  }\n\n// The Mean Absolute Deviation of a single number\n//\n// >>> meanAbsoluteDeviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n// 1.0\nconst meanAbsoluteDeviationOfArrayOfNumbers =(numbers) => {\n  return 0;\n  }\n\n// The Mean Absolute Deviation of an empty array\n//\n// >>> meanAbsoluteDeviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n// NaN\nconst meanAbsoluteDeviationOfArrayOfNumbersAndArray =(numbers) => {\n  return NaN;\n  }\n\n// The Mean Absolute Deviation of an array of numbers and an empty array\n//\n// >>> meanAbsoluteDeviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, []])\n// NaN\nconst meanAbsoluteDeviationOfArrayOfNumbersAndArrayOfEmptyArray =(numbers) => {\n  return NaN;\n  }\n\n// The Mean Absolute Deviation of an array of numbers and an empty object\n//\n// >>> meanAbsoluteDeviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, {}])\n// NaN\nconst meanAbsoluteDeviationOfArrayOfNumbersAndObject =(numbers) => {\n  return NaN;\n  }\n\n// The Mean Absolute Deviation of an empty array and an array of numbers\n//\n// >>> meanAbsoluteDeviation([[]], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n// NaN\nconst meanAbsoluteDeviationOfArrayOfEmptyArrayAndArrayOfNumbers =(numbers) => {\n  return NaN;\n  }\n\n// The Mean Absolute Deviation of an empty array and an array of numbers\n//\n// >>> meanAbsoluteDeviation([{}], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n// NaN\nconst meanAbsoluteDeviationOfObjectAndArrayOfNumbers =(numbers) => {\n  return NaN;\n  }\n\n// The Mean Absolute Deviation of an empty array and an array of objects\n//\n// >>> meanAbsoluteDeviation([[]], [{}])\n// NaN\nconst meanAbsoluteDeviationOfArrayOfEmptyArrayAndArrayOfObjects =(numbers) => {\n  return NaN;\n  }\n\n// The Mean Absolute Deviation of an empty array and an object\n//\n// >>> meanAbsoluteDeviation([[]], {'a':1})\n// NaN\nconst meanAbsoluteDeviationOfArrayOfEmptyArrayAnd"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr [ i ]\n    if (h > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    h = - h\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    \n    for (; h >= 10;) {\n       {\n        k+=h % 10;\n        h =(h - h % 10) / 10;\n        }\n      }\n    k-=h;\n    if (k > 0) {\n      p++}\n    }\n  return p\n  }\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr [ i ]\n    if (h > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    h = - h\n   \n    while (h > 0) {\n      if (h % 10 === 0) {\n        k++\n        h = h / 10\n        } else {\n        break\n        }\n    }\n    if (k > 0) {\n      p++;\n      }\n  }\n  return p\n}\n\nconsole.log(countNums([1, 1, 2]))\nconsole.log(countNums([1, -1, -2]))\nconsole.log(countNums([-1, -1, -2]))\nconsole.log(countNums([-1, -1, -2, -3]))\nconsole.log(countNums([-1, -1, -2, -3, -4]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24]))\nconsole.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  let i = 0;\n  while (i < nums.length) {\n     {\n      if (nums [ i ] < 10) {\n        i++; continue}\n      let y = nums [ i ].toString()\n      if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        p++\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  let i = 0;\n  while (i < nums.length) {\n     {\n      if (nums [ i ] < 10) {\n        i++; continue}\n      let y = nums [ i ].toString()\n      if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n       \n        p++;\n      }\n      i++;\n    }\n  }\n  return p;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n     {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i++;}\n  return times;\n  }\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  let i = 0;\n  while (i < string.length - substring.length + 1) {\n     {\n      if (string.slice(i, i + substring.length) == substring) {\n        times+=1;\n       \n      }\n      i++;\n    }\n  }\n  return times;\n}\n\n/* Find the longest substring in the given string which contains only characters in the given set.\n  >>> longestSubstring('', ['a','b'])\n  ''\n  >>> longestSubstring('a', ['a','b'])\n  'a'\n  >>> longestSubstring('abcd', ['a','b'])\n  'ab'\n  */\nconst longestSubstring =(string, set) => {\n    if (string == '') {\n        return '';\n    }\n    var length = 0;\n    var current = 0;\n    var currentString = '';\n    while (current < string.length) {\n        if (string.slice(current, current + 1) in set) {\n            currentString += string.slice(current, current + 1);\n            length += 1;\n        }\n        current++;\n    }\n    return currentString;\n}\n\n/* Find the longest substring in the given string which contains only the same character.\n  >>> longestSubstring('abc', 'c')\n  'c'\n  >>> longestSubstring('abcc', 'c')\n  'c'\n  >>> longestSubstring('abc', 'z')\n  ''\n  */\nconst longestSubstring =(string, character) => {\n    if (string == '') {\n        return '';\n    }\n    var length = 0;\n    var current = 0;\n    var currentString = '';\n    while (current < string.length) {\n        if (string.slice(current, current + 1) == character) {\n            currentString += string.slice(current, current + 1);\n            length += 1;\n        }\n        current++;\n    }\n    return currentString;\n}\n\n/* Find the length of the longest substring in the given string.\n  >>> lengthOfLongestSubstring('abc')\n  3\n  >>> lengthOfLongestSubstring('aaabccdd')\n  7\n  >>> lengthOfLongestSubstring('')\n  0\n  */\nconst lengthOfLongestSubstring =(string) => {\n    if (string == '') {\n        return 0;\n    }\n    var length = 0;\n    var current = 0;\n    var currentString = '';\n    while (current < string.length) {\n        if (currentString.length > length) {\n            length = currentString.length;\n        }\n        currentString = currentString + string.slice(current, current + 1);\n        current++;\n    }\n    return length;\n}\n\n/* Find the length of the longest substring in the given string which contains only the same character.\n  >>> lengthOfLongestSubstring('abc')\n  1\n  >>> lengthOfLongestSubstring('aaabccdd')\n  4\n  >>> lengthOfLongestSubstring('')\n  0\n  */\nconst lengthOfLongestSubstring =(string, character) => {\n    if (string == '') {\n        return 0;\n    }\n    var length = 0;\n    var current = 0;\n    var currentString = '';\n    while (current < string.length) {\n        if (string.slice(current, current + 1) == character) {\n            currentString += string.slice(current, current + 1);\n            length += 1;\n        }\n        current++;\n    }\n    return length;\n}\n\n/* Find the length of the longest substring in the given string which contains only the characters in the given set.\n  >>> lengthOfLongestSubstring('', ['a','b'])\n  0\n  >>> lengthOfLongestSubstring('a', ['a','b'])\n  1\n  >>> lengthOfLongestSubstring('abcd', ['a','b'])\n  3\n  >>> lengthOfLongestSubstring('abcd', ['b','d'])\n  0\n  */\nconst lengthOfLongestSubstring =(string, set) => {\n    if (string == '') {\n        return 0;\n    }\n    var length = 0;\n    var current = 0;\n    var currentString = '';\n    while (current < string.length) {\n        if (string.slice(current, current + 1) in set) {\n            currentString += string.slice(current, current + 1);\n            length += 1;\n        }\n        current++;\n    }\n    return length;\n}\n\n/*\nGiven a string, find the first non-repeating character in the string.\n  >>> firstNonRepeatingCharacter('abc')\n  'a'\n  >>> firstNonRepeatingCharacter('a')\n  'a'\n  >>> firstNonRepeatingCharacter('bbbbbb')\n  'b'\n  */\nconst firstNonRepeatingCharacter =(string) => {\n    var lastCharacter = string.slice(string.length - 1, string.length);\n    var currentCharacter = string.slice(0, string.length - 1);\n    var currentCount = 0;\n    while (currentCount < currentCharacter.length) {\n        if (currentCharacter.slice(currentCount, currentCount + 1)!= lastCharacter) {\n            return currentCharacter.slice(0, currentCount + 1);\n        }\n        currentCount++;\n    }\n    return '';\n}\n\n/* Given a string, find the number of repeating characters in the string.\n  >>> countRepeatingCharacters('abc')\n  0\n  >>> countRepeatingCharacters('aa')\n  2\n  >>> countRepeatingCharacters('aaa')\n  1\n  */\nconst countRepeatingCharacters =(string) => {\n    var currentCount = 0;\n    var previousCount = 0;\n    while (currentCount < string.length) {\n        if (string.slice(currentCount, currentCount + 1) == string.slice(previousCount, previousCount + 1)) {\n            currentCount++;\n            previousCount++;\n        } else {\n            previousCount = currentCount + 1;"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  let i = 0;\n  while (i < text.length) {\n    if (text [ i ] != text.at( - i - 1))\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  return false;\n  return true;\n  }\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  let i = 0;\n  while (i < text.length) {\n    if (text [ i ]!= text.at( - i - 1))\n   \n      return false;\n    i++;\n  }\n  return true;\n};\n\n/*\n  Counts the number of occurrences of given string in the text\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('aba')\n  2\n  >>> isPalindrome('abaab')\n  3\n  >>> isPalindrome('abca')\n  2\n  >>> isPalindrome('abcaa')\n  3\n  */\nconst count =(text, subtext) => {\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text.at(i) == subtext)\n      count++;\n  }\n  return count;\n};\n\n/*\n  Returns true if the given string is a palindrome\n  >>> isPalindrome('abc')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('bab')\n  false\n  >>> isPalindrome('abcdcc')\n  true\n  >>> isPalindrome('abcdcba')\n  true\n  >>> isPalindrome('abcdcba')\n  false\n  */\nconst isPalindrome = (text) => {\n  return count(text, text) == count(text, text.at(text.length - 1));\n};\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));\n\n// console.log(isPalindrome('abcdcba'));"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(strings) => {\n  if ( !Array.isArray(strings) || strings.length == 0)\n  return null;\n  var maxlen = Math.max(... strings.map(x => x.length));\n  for (const s of strings) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n      }\n    }\n  }\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n  return null;\n  var maxlen = Math.max(... strings.map(x => x.length));\n  for (const s of strings) {\n   \n    if (s.length === maxlen) return s;\n  }\n  return strings[0];\n}\n\n/*\n  Given a string containing a single letter and a non-empty list of strings, return a list of strings that\n  contain all the letters of the original string but in a different order.\n  >>> letterStrings('a', ['a', 'b', 'c', 'a'])\n  ['b', 'c', 'a']\n  >>> letterStrings('a', ['b', 'c', 'a'])\n  ['a', 'c', 'b']\n  >>> letterStrings('a', ['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  */\nconst letterStrings = (letter, strings) => {\n  const map = new Map();\n  for (const string of strings) {\n    for (const c of string) {\n      if (map.has(c)) map.set(c, map.get(c) + 1);\n      else map.set(c, 1);\n    }\n  }\n  const keys = Array.from(map.keys());\n  const results = [];\n  for (const key of keys) {\n    const count = map.get(key);\n    if (count === 1) results.push(key);\n  }\n  return results;\n}\n\nmodule.exports = {\n  longest,\n  letterStrings\n};\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  let i = extensions.length - 1;\n  while (i >= 0) {\n     {\n      let y = 0\n      for (let j = 0; j < extensions [ i ].length; j++) {\n        let k = extensions [ i ] [ j ].charCodeAt()\n        if (k >= 65 && k <= 90) {\n          y+=1}\n        if (k >= 97 && k <= 122) {\n          y-=1}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (y >= s) {\n        s = y;\n        u = i;\n        }\n      }\n    i--;}\n  return class_name + '.' + extensions [ u ]\n  }\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  let i = extensions.length - 1;\n  while (i >= 0) {\n     {\n      let y = 0\n      for (let j = 0; j < extensions [ i ].length; j++) {\n        let k = extensions [ i ] [ j ].charCodeAt()\n        if (k >= 65 && k <= 90) {\n          y+=1}\n        if (k >= 97 && k <= 122) {\n          y-=1}\n       \n        if (y > u) {\n          u = y\n          s = i\n        }\n      }\n    }\n    if (u == 0) {\n      break\n    }\n    i--\n  }\n  return class_name + \".\" + extensions [ s ][0]\n}\n\n// let strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n\n/*\n  You are given the class name and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  */\nconst getStrongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  let i = extensions.length - 1;\n  while (i >= 0) {\n    {\n      let y = 0\n      for (let j = 0; j < extensions [ i ].length; j++) {\n        let k = extensions [ i ] [ j ].charCodeAt()\n        if (k >= 65 && k <= 90) {\n          y+=1}\n        if (k >= 97 && k <= 122) {\n          y-=1}\n        if (y > u) {\n          u = y\n          s = i\n        }\n      }\n    }\n    if (u == 0) {\n      break\n    }\n    i--\n  }\n  return class_name + \".\" + extensions [ s ][1]\n}\n\n/*\n  Given a class name and a list of extensions, returns the name of the class\n  with the strongest extension.\n  Example:\n  getStrongestClass('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  */\nconst getStrongestClass = (class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  let i = extensions.length - 1;\n  while (i >= 0) {\n    {\n      let y = 0\n      for (let j = 0; j < extensions [ i ].length; j++) {\n        let k = extensions [ i ] [ j ].charCodeAt()\n        if (k >= 65 && k <= 90) {\n          y+=1}\n        if (k >= 97 && k <= 122) {\n          y-=1}\n        if (y > u) {\n          u = y\n          s = i\n        }\n      }\n    }\n    if (u == 0) {\n      break\n    }\n    i--\n  }\n  return class_name + \".\" + extensions [ s ][2]\n}\n\n/*\n  Given the class name and a list of extensions, returns the name of the class\n  with the strongest extension.\n  Example:\n  getStrongestClass('my_class', ['AA', 'Be', 'CC']) =='my_class.Be'\n  */\nconst getMostSpecificClass = (class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  let i = extensions.length - 1;\n  while (i >= 0) {\n    {\n      let y = 0\n      for (let j = 0; j < extensions [ i ].length; j++) {\n        let k = extensions [ i ] [ j ].charCodeAt()\n        if (k >= 65 && k <= 90) {\n          y+=1}\n        if (k >= 97 && k <= 122) {\n          y-=1}\n        if (y > u) {\n          u = y\n          s = i\n        }\n      }\n    }\n    if (u == 0) {\n      break\n    }\n    i--\n  }\n  return class_name + \".\" + extensions [ s ][3]\n}\n\nmodule.exports = {\n  getStrongestClass,\n  getMost"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  let i = 0;\n  while (i < k) {\n     {\n      if (arr [ i ] < 100 && arr [ i ] > - 100) {\n        p+=arr [ i ]}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  return p\n  }\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  let i = 0;\n  while (i < k) {\n     {\n      if (arr [ i ] < 100 && arr [ i ] > - 100) {\n        p+=arr [ i ]}\n     \n      else if (arr [ i ] >= 100 && arr [ i ] <= - 100) {\n        p+=arr [ i ] + 100}\n      else if (arr [ i ] >= - 100 && arr [ i ] <= 100) {\n        p+=arr [ i ] + 200}\n      }\n      else if (arr [ i ] < - 100 && arr [ i ] > - 200) {\n        p+=arr [ i ] + 200}\n      else if (arr [ i ] >= - 200 && arr [ i ] <= - 100) {\n        p+=arr [ i ] + 100}\n      else if (arr [ i ] >= - 100 && arr [ i ] <= - 200) {\n        p+=arr [ i ] + 200}\n      }\n      else if (arr [ i ] < - 200 && arr [ i ] > - 400) {\n        p+=arr [ i ] + 400}\n      else if (arr [ i ] >= - 400 && arr [ i ] <= - 200) {\n        p+=arr [ i ] + 200}\n      else if (arr [ i ] >= - 200 && arr [ i ] <= - 400) {\n        p+=arr [ i ] + 400}\n      }\n      else if (arr [ i ] < - 400 && arr [ i ] > - 600) {\n        p+=arr [ i ] + 600}\n      else if (arr [ i ] >= - 600 && arr [ i ] <= - 400) {\n        p+=arr [ i ] + 400}\n      else if (arr [ i ] >= - 400 && arr [ i ] <= - 600) {\n        p+=arr [ i ] + 600}\n      }\n      else if (arr [ i ] < - 600 && arr [ i ] > - 800) {\n        p+=arr [ i ] + 800}\n      else if (arr [ i ] >= - 800 && arr [ i ] <= - 600) {\n        p+=arr [ i ] + 600}\n      else if (arr [ i ] >= - 600 && arr [ i ] <= - 800) {\n        p+=arr [ i ] + 800}\n      }\n      else if (arr [ i ] < - 800 && arr [ i ] > - 1000) {\n        p+=arr [ i ] + 1000}\n      else if (arr [ i ] >= - 1000 && arr [ i ] <= - 800) {\n        p+=arr [ i ] + 600}\n      else if (arr [ i ] >= - 800 && arr [ i ] <= - 1000) {\n        p+=arr [ i ] + 1000}\n      }\n      else if (arr [ i ] < - 1000 && arr [ i ] > - 1200) {\n        p+=arr [ i ] + 1200}\n      else if (arr [ i ] >= - 1200 && arr [ i ] <= - 1000) {\n        p+=arr [ i ] + 1000}\n      else if (arr [ i ] >= - 1000 && arr [ i ] <= - 1200) {\n        p+=arr [ i ] + 1200}\n      }\n      else if (arr [ i ] < - 1200 && arr [ i ] > - 1400) {\n        p+=arr [ i ] + 1400}\n      else if (arr [ i ] >= - 1400 && arr [ i ] <= - 1200) {\n        p+=arr [ i ] + 1000}\n      else if (arr [ i ] >= - 1200 && arr [ i ] <= - 1400) {\n        p+=arr [ i ] + 1400}\n      }\n      else if (arr [ i ] < - 1400 && arr [ i ] > - 1600) {\n        p+=arr [ i ] + 1600}\n      else if (arr [ i ] >= - 1600 && arr [ i ] <= - 1400) {\n        p+=arr [ i ] + 1400}\n      else if (arr [ i ] >= - 1400 && arr [ i ] <= - 1600) {\n        p+=arr [ i ] + 1600}\n      }\n      else if (arr [ i ] < - 1600 && arr [ i ] > - 1800) {\n        p+=arr [ i ] + 1800}\n      else if (arr [ i ] >= - 1800 && arr [ i ] <= - 1600) {\n        p+=arr [ i ] + 1400}\n      else if (arr [ i ] >= - 1600 && arr [ i ] <= - 1800) {\n        p+=arr [ i ] + 1800}\n      }\n      else if (arr [ i ] < - 1800 && arr [ i ] > - 2000) {\n        p+=arr [ i ] + 2000}\n      else if (arr [ i ] >= - 2000 && arr [ i ] <= - 1800) {\n        p+=arr [ i ] + 1600}\n      else if (arr [ i ] >= - 1800 && arr [ i ] <= - 2000) {\n        p+=arr [ i ] + 2000}\n      }\n      else if (arr [ i ] < - 2000 && arr [ i ] > - 2200) {\n        p+=arr [ i ] + 2200}\n      else if (arr [ i ] >= - 2200 && arr [ i ] <= - 2000) {\n        p+=arr [ i ] + 1600}\n      else if (arr [ i ] >= - 2000 && arr [ i ] <= - 2200) {\n        p+=arr [ i ] + 2200}\n      }\n      else if (arr [ i ] < - 2200 && arr [ i ] > - 2400) {\n        p+=arr [ i ] + 2400}\n      else if (arr [ i ] >= - 2400 && arr [ i ] <= - 2200) {\n        p+=arr [ i ] + 2000}\n      else if (arr [ i ] >= - 2200 && arr [ i ] <= - 2400) {\n        p+=arr [ i ] + 2400}\n      }\n      else if (arr [ i ] < - 2400 && arr [ i ] > - 2600) {\n        p+=arr [ i ] + 2600}\n      else if (arr [ i ] >= - 2600 && arr [ i ] <= - 2400)"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let arr = array\n  let tot = arr [ 0 ] + arr [ arr.length - 1 ]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < arr.length) {\n       {\n        if ((tot % 2 == 1 && arr [ k ] < arr [ ind ]) ||(tot % 2 == 0 && arr [ k ] > arr [ ind ])) {\n          ind = k\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        }\n      k++;}\n    let tmp = arr [ j ]\n    arr [ j ] = arr [ ind ]\n    arr [ ind ] = tmp\n    }\n  return arr\n  }\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let arr = array\n  let tot = arr [ 0 ] + arr [ arr.length - 1 ]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    let k = j + 1;\n    while (k < arr.length) {\n       {\n        if ((tot % 2 == 1 && arr [ k ] < arr [ ind ]) ||(tot % 2 == 0 && arr [ k ] > arr [ ind ])) {\n          ind = k\n         \n        }\n      }\n      k++;\n    }\n    if (ind!== j) {\n      let temp = arr [ j ]\n      arr [ j ] = arr [ ind ]\n      arr [ ind ] = temp\n    }\n  }\n  return arr\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] == ' ') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        c = 0;\n        }\n      else {\n        t+=text [ i ]\n        }\n      }\n    i++;}\n  if (c == 1) {\n    t+='_'}\n  if (c == 2) {\n    t+='__'}\n  if (c > 2) {\n    t+='-'}\n  return t\n  }\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n      } else {\n        t+=text [ i ]\n      }\n    }\n    i++;\n  }\n  return t\n}\n\n//console.log(fixSpaces(\"Example\"));\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n      } else {\n        t+=text [ i ]\n      }\n    }\n    i++;\n  }\n  return t\n}\n\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n      } else {\n        t+=text [ i ]\n      }\n    }\n    i++;\n  }\n  return t\n}\n\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n      } else {\n        t+=text [ i ]\n      }\n    }\n    i++;\n  }\n  return t\n}\n\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n      } else {\n        t+=text [ i ]\n      }\n    }\n    i++;\n  }\n  return t\n}\n\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n      } else {\n        t+=text [ i ]\n      }\n    }\n    i++;\n  }\n  return t\n}\n\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n      } else {\n        t+=text [ i ]\n      }\n    }\n    i++;\n  }\n  return t\n}\n\nconst fixSpaces =(text) => {\n  let t = '' let c = 0\n  let i = 0;\n  while (i < text.length) {\n     {\n      if (text [ i ] =='') {\n        c++}\n      else\nif (c > 0) {\n        if (c == 1) {\n          t+='_'}\n        if (c == 2) {\n          t+='__'}\n        if (c > 2) {\n          t+='-'}\n        t+=text [ i ]\n       \n      } else {\n        t+=text [ i ]\n      }\n    }\n    i++;\n  }\n  return t\n}\n\n"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, b) =>(a - b));\n \n};\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(l) => {\n  var sort1 = [ ... l ].sort((a, b) => a - b);\n  var sort2 = [ ... l ].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  JSON.stringify(l) === JSON.stringify(sort2))\n  return true;\n  return false;\n  }\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(l) => {\n  var sort1 = [... l ].sort((a, b) => a - b);\n  var sort2 = [... l ].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n \n  JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n//# sourceMappingURL=Monotonic.js.map<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(strings) => {\n  return strings.join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(strings) => {\n  return strings.join('');\n \n}\n\n/*\n  * Return the longest string in the list\n  * Concatenate list of strings into a single string\n  *\n  * @param {Array} list\n  * @returns {String}\n  *\n  */\nconst longest = (list) => {\n  return list.reduce((a, b) => {\n    if (a.length < b.length) {\n      return b;\n    } else {\n      return a;\n    }\n  });\n};\n\n/*\n  * Return the second longest string in the list\n  * Concatenate list of strings into a single string\n  *\n  * @param {Array} list\n  * @returns {String}\n  *\n  */\nconst second_longest = (list) => {\n  return list.reduce((a, b) => {\n    if (a.length < b.length) {\n      return b;\n    } else {\n      return a;\n    }\n  });\n};\n\n/*\n * Return the second longest string in the list\n * Concatenate list of strings into a single string\n *\n * @param {Array} list\n * @returns {String}\n */\nconst second_longest_from_list = (list) => {\n  let longest = longest(list);\n  let longest_list = list.filter((e) => e === longest);\n  let second_longest = second_longest(longest_list);\n  return second_longest;\n}\n\n/*\n * Return the second longest string in the list\n * Concatenate list of strings into a single string\n *\n * @param {Array} list\n * @returns {String}\n */\nconst second_longest_from_list_2 = (list) => {\n  let longest = longest(list);\n  let longest_list = list.filter((e) => e === longest);\n  let second_longest = second_longest(longest_list);\n  return second_longest;\n}\n\n/*\n * Return the second longest string in the list\n * Concatenate list of strings into a single string\n *\n * @param {Array} list\n * @returns {String}\n */\nconst third_longest_from_list = (list) => {\n  let longest = longest(list);\n  let longest_list = list.filter((e) => e === longest);\n  let second_longest = second_longest(longest_list);\n  let third_longest = second_longest_from_list_2(second_longest);\n  return third_longest;\n}\n\n/*\n * Return the third longest string in the list\n * Concatenate list of strings into a single string\n *\n * @param {Array} list\n * @returns {String}\n */\nconst fourth_longest_from_list = (list) => {\n  let longest = longest(list);\n  let longest_list = list.filter((e) => e === longest);\n  let second_longest = second_longest(longest_list);\n  let third_longest = second_longest_from_list_2(second_longest);\n  let fourth_longest = third_longest_from_list(third_longest);\n  return fourth_longest;\n}\n\n/*\n * Return the first string in the list\n * Concatenate list of strings into a single string\n *\n * @param {Array} list\n * @returns {String}\n */\nconst first = (list) => {\n  return list[0];\n}\n\n/*\n * Return the second string in the list\n * Concatenate list of strings into a single string\n *\n * @param {Array} list\n * @returns {String}\n */\nconst second = (list) => {\n  return list[1];\n}\n\n/*\n * Return the third string in the list\n * Concatenate list of strings into a single string\n *\n * @param {Array} list\n * @returns {String}\n */\nconst third = (list) => {\n  return list[2];\n}\n\n/*\n * Return the fourth string in the list\n * Concatenate list of strings into a single string\n *\n * @param {Array} list\n * @returns {String}\n */\nconst fourth = (list) => {\n  return list[3];\n}\n\n/*\n * Return the fifth string in the list\n * Concatenate list of strings into a single string\n *\n * @param {Array} list\n * @returns {String}\n */\nconst fifth = (list) => {\n  return list[4];\n}\n\n/*\n * Return the sixth string in the list\n * Concatenate list of strings into a single string\n *\n * @param {Array} list\n * @returns {String}\n */\nconst sixth = (list) => {\n  return list[5];\n}\n\n/*\n * Return the seventh string in the list\n * Concatenate list of strings into a single string\n *\n * @param {Array} list\n * @returns {String}\n */\nconst seventh = (list) => {\n  return list[6];\n}\n\n/*\n * Return the eighth string in the list\n * Concatenate list of strings into a single string\n *\n * @param {Array} list\n * @returns {String}\n */\nconst eighth = (list) => {\n  return list[7];\n}\n\n/*\n * Return the ninth string in the list\n * Concatenate list of strings into a single string\n *\n * @param {Array} list\n * @returns {String}\n */\nconst ninth = (list) => {\n  return list[8];\n}\n\n/*\n * Return the tenth string in the list\n * Concatenate list of strings into a single string\n *\n * @param {Array} list\n * @returns {String}\n */\nconst tenth = (list) => {\n  return list[9];\n}\n\n/*\n * Return the 11th string in the list\n * Concatenate list of strings into a single string\n *\n * @param {Array} list\n * @returns {String}\n */\nconst eleventh = (list) => {\n  return list[10];\n"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1 [ i ] % 2 == 0) {\n      t++}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let i = 0;\n  while (i < lst2.length) {\n     {\n      if (lst2 [ i ] % 2 == 0) {\n        t++}\n      }\n    i++;}\n  if (t >= k) {\n    return 'YES'}\n  return 'NO'}\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1 [ i ] % 2 == 0) {\n      t++}\n    }\n \n  if (t == lst1.length) {\n    return \"YES\"\n  }\n  \n  return \"NO\"\n}\n\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\n//true\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n//false\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(string) => {\n  return string.length;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(string) => {\n  return string.length;\n \n}\n\n/* Return the character at a given index of a given string\n  >>> strchr('abc', 'b')\n  'b'\n  >>> strchr('abc', 'b', 1)\n  'c'\n  >>> strchr('abc', 'd')\n  >>> strchr('abc', 'd', 1)\n  >>> strchr('abc', 'd', 2)\n  >>> strchr('abc', 'd', 3)\n  >>> strchr('abc', 'd', 4)\n  >>> strchr('abc', 'd', 5)\n  >>> strchr('abc', 'd', 6)\n  >>> strchr('abc', 'd', 7)\n  >>> strchr('abc', 'd', 8)\n  >>> strchr('abc', 'd', 9)\n  >>> strchr('abc', 'd', 10)\n  >>> strchr('abc', 'd', 11)\n  >>> strchr('abc', 'd', 12)\n  >>> strchr('abc', 'd', 13)\n  >>> strchr('abc', 'd', 14)\n  >>> strchr('abc', 'd', 15)\n  >>> strchr('abc', 'd', 16)\n  >>> strchr('abc', 'd', 17)\n  >>> strchr('abc', 'd', 18)\n  >>> strchr('abc', 'd', 19)\n  >>> strchr('abc', 'd', 20)\n  >>> strchr('abc', 'd', 21)\n  >>> strchr('abc', 'd', 22)\n  >>> strchr('abc', 'd', 23)\n  >>> strchr('abc', 'd', 24)\n  >>> strchr('abc', 'd', 25)\n  >>> strchr('abc', 'd', 26)\n  >>> strchr('abc', 'd', 27)\n  >>> strchr('abc', 'd', 28)\n  >>> strchr('abc', 'd', 29)\n  >>> strchr('abc', 'd', 30)\n  >>> strchr('abc', 'd', 31)\n  >>> strchr('abc', 'd', 32)\n  >>> strchr('abc', 'd', 33)\n  >>> strchr('abc', 'd', 34)\n  >>> strchr('abc', 'd', 35)\n  >>> strchr('abc', 'd', 36)\n  >>> strchr('abc', 'd', 37)\n  >>> strchr('abc', 'd', 38)\n  >>> strchr('abc', 'd', 39)\n  >>> strchr('abc', 'd', 40)\n  >>> strchr('abc', 'd', 41)\n  >>> strchr('abc', 'd', 42)\n  >>> strchr('abc', 'd', 43)\n  >>> strchr('abc', 'd', 44)\n  >>> strchr('abc', 'd', 45)\n  >>> strchr('abc', 'd', 46)\n  >>> strchr('abc', 'd', 47)\n  >>> strchr('abc', 'd', 48)\n  >>> strchr('abc', 'd', 49)\n  >>> strchr('abc', 'd', 50)\n  >>> strchr('abc', 'd', 51)\n  >>> strchr('abc', 'd', 52)\n  >>> strchr('abc', 'd', 53)\n  >>> strchr('abc', 'd', 54)\n  >>> strchr('abc', 'd', 55)\n  >>> strchr('abc', 'd', 56)\n  >>> strchr('abc', 'd', 57)\n  >>> strchr('abc', 'd', 58)\n  >>> strchr('abc', 'd', 59)\n  >>> strchr('abc', 'd', 60)\n  >>> strchr('abc', 'd', 61)\n  >>> strchr('abc', 'd', 62)\n  >>> strchr('abc', 'd', 63)\n  >>> strchr('abc', 'd', 64)\n  >>> strchr('abc', 'd', 65)\n  >>> strchr('abc', 'd', 66)\n  >>> strchr('abc', 'd', 67)\n  >>> strchr('abc', 'd', 68)\n  >>> strchr('abc', 'd', 69)\n  >>> strchr('abc', 'd', 70)\n  >>> strchr('abc', 'd', 71)\n  >>> strchr('abc', 'd', 72)\n  >>> strchr('abc', 'd', 73)\n  >>> strchr('abc', 'd', 74)\n  >>> strchr('abc', 'd', 75)\n  >>> strchr('abc', 'd', 76)\n  >>> strchr('abc', 'd', 77)\n  >>> strchr('abc', 'd', 78)\n  >>> strchr('abc', 'd', 79)\n  >>> strchr('abc', 'd', 80)\n  >>> strchr('abc', 'd', 81)\n  >>> strchr('abc', 'd', 82)\n  >>> strchr('abc', 'd', 83)\n  >>> strchr('abc', 'd', 84)\n  >>> strchr('abc', 'd', 85)\n  >>> strchr('abc', 'd', 86)\n  >>> strchr('abc', 'd', 87)\n  >>> strchr('abc', 'd', 88)\n  >>> strchr('abc', 'd', 89)\n  >>> strchr('abc', 'd', 90)\n  >>> strchr('abc', 'd', 91)\n  >>> strchr('abc', 'd', 92)\n  >>> strchr('abc', 'd', 93)\n  >>> strchr('abc', 'd', 94)\n  >>> strchr('abc', 'd', 95)\n  >>> strchr('abc', 'd', 96)\n  >>> strchr('abc', 'd', 97)\n  >>> strchr('abc', 'd', 98)\n  >>> strchr('abc', 'd', 99)\n  >>> strchr('abc', 'd', 100)\n  >>> strchr('abc', 'd', 101)\n  >>> strchr('abc"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  let i = 0;\n  while (i < a.length - l + 1) {\n     {\n      for (let j = 0; j < l + 1; j++) {\n        let y = 1\n        for (let k = 0; k < l; k++) {\n          if (a [ i + k ] != pat [ j + k ]) {\n            y = 0}\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        if (y == 1) {\n          i++; return true\n          }\n        }\n      }\n    i++;}\n  return false\n  }\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  let i = 0;\n  while (i < a.length - l + 1) {\n     {\n      for (let j = 0; j < l + 1; j++) {\n        let y = 1\n        for (let k = 0; k < l; k++) {\n          if (a [ i + k ]!= pat [ j + k ]) {\n            y = 0}\n         \n          }\n        if (y == 0) return false\n      }\n    }\n    pat = a + a\n    i = i + l\n  }\n  return true\n}\n\nconsole.log(cycpatternCheck(\"abcd\",\"abd\"))\nconsole.log(cycpatternCheck(\"hello\",\"ell\"))\nconsole.log(cycpatternCheck(\"whassup\",\"psus\"))\nconsole.log(cycpatternCheck(\"abab\",\"baa\"))\nconsole.log(cycpatternCheck(\"efef\",\"eeff\"))\nconsole.log(cycpatternCheck(\"himenss\",\"simen\"))\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(number) => {\n  return number % 1.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(number) => {\n  return number % 1.0;\n \n};\n\n/* Given a number, it can be transformed into the base 10 number.\n  For example, the base 10 representation of the number 2 is \"10\".\n  \n  Return the base 10 representation of the given number.\n  >>> toBase10(10)\n  10\n  */\nconst toBase10 =(number) => {\n  return number.toString(10);\n\n};\n\n/* Given a number, it can be transformed into the base 2 number.\n  For example, the base 2 representation of the number 2 is \"10\".\n  \n  Return the base 2 representation of the given number.\n  >>> toBase2(10)\n  10\n  */\nconst toBase2 =(number) => {\n  return number.toString(2);\n\n};\n\n/* Given a number, it can be transformed into the base 5 number.\n  For example, the base 5 representation of the number 2 is \"2\".\n  \n  Return the base 5 representation of the given number.\n  >>> toBase5(10)\n  2\n  */\nconst toBase5 =(number) => {\n  return number.toString(5);\n\n};\n\n/* Given a number, it can be transformed into the base 16 number.\n  For example, the base 16 representation of the number 2 is \"10000\".\n  \n  Return the base 16 representation of the given number.\n  >>> toBase16(10)\n  10000\n  */\nconst toBase16 =(number) => {\n  return number.toString(16);\n\n};\n\n/* Given a number, it can be transformed into the base 8 number.\n  For example, the base 8 representation of the number 2 is \"10\".\n  \n  Return the base 8 representation of the given number.\n  >>> toBase8(10)\n  10\n  */\nconst toBase8 =(number) => {\n  return number.toString(8);\n\n};\n\n/* Given a number, it can be transformed into the base 36 number.\n  For example, the base 36 representation of the number 2 is \"10\".\n  \n  Return the base 36 representation of the given number.\n  >>> toBase36(10)\n  10\n  */\nconst toBase36 =(number) => {\n  return number.toString(36);\n\n};\n\n/* Given a number, it can be transformed into the base 19 number.\n  For example, the base 19 representation of the number 2 is \"0\".\n  \n  Return the base 19 representation of the given number.\n  >>> toBase19(10)\n  0\n  */\nconst toBase19 =(number) => {\n  return number.toString(19);\n\n};\n\n/* Given a number, it can be transformed into the base 3 number.\n  For example, the base 3 representation of the number 2 is \"2\".\n  \n  Return the base 3 representation of the given number.\n  >>> toBase3(10)\n  2\n  */\nconst toBase3 =(number) => {\n  return number.toString(3);\n\n};\n\n/* Given a number, it can be transformed into the base 4 number.\n  For example, the base 4 representation of the number 2 is \"10\".\n  \n  Return the base 4 representation of the given number.\n  >>> toBase4(10)\n  10\n  */\nconst toBase4 =(number) => {\n  return number.toString(4);\n\n};\n\n/* Given a number, it can be transformed into the base 7 number.\n  For example, the base 7 representation of the number 2 is \"10\".\n  \n  Return the base 7 representation of the given number.\n  >>> toBase7(10)\n  10\n  */\nconst toBase7 =(number) => {\n  return number.toString(7);\n\n};\n\n/* Given a number, it can be transformed into the base 10 number with zero\n  padding.\n  \n  Return the base 10 number with zero padding.\n  >>> toZeroPaddedBase10(10)\n  10\n  */\nconst toZeroPaddedBase10 =(number) => {\n  return padNumber(toBase10(number), 0);\n\n};\n\n/* Given a number, it can be transformed into the base 2 number with zero\n  padding.\n  \n  Return the base 2 number with zero padding.\n  >>> toZeroPaddedBase2(10)\n  10\n  */\nconst toZeroPaddedBase2 =(number) => {\n  return padNumber(toBase2(number), 0);\n\n};\n\n/* Given a number, it can be transformed into the base 5 number with zero\n  padding.\n  \n  Return the base 5 number with zero padding.\n  >>> toZeroPaddedBase5(10)\n  10\n  */\nconst toZeroPaddedBase5 =(number) => {\n  return padNumber(toBase5(number), 0);\n\n};\n\n/* Given a number, it can be transformed into the base 16 number with zero\n  padding.\n  \n  Return the base 16 number with zero padding.\n  >>> toZeroPaddedBase16(10)\n  10\n  */\nconst toZeroPaddedBase16 =(number) => {\n  return padNumber(toBase16(number), 0);\n\n};\n\n/* Given a number, it can be transformed into the base 8 number with zero\n  padding.\n  \n  Return the base 8 number with zero padding.\n  >>> toZeroPaddedBase8(10)\n  10\n  */\nconst toZeroPaddedBase8 =(number) => {\n  return padNumber(toBase8(number), 0);\n\n};\n\n/* Given a number, it can be transformed into the base 36 number with zero\n  padding.\n  \n  Return the base 36 number with zero padding.\n  >>> toZeroPaddedBase36(10)\n  10\n  */\nconst toZeroPaddedBase36 =(number) => {\n  return padNumber(toBase36(number), 0);\n\n};\n\n/* Given a number, it can be transformed into the base 19 number with zero\n  padding.\n  \n  Return the base 19 number with zero padding.\n  >>> toZeroPaddedBase19(10)\n  10\n  */\nconst toZeroPaddedBase19 =(number) => {"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(n) => {\n  let p = 1\n  let k = 1\n  \n  for (; n > 0;) {\n     {\n      let y = n % 10\n      if (y % 2 == 1) {\n        p *= y; k = 0;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      n =(n - n % 10) / 10\n      }\n    }\n  if (k == 0) {\n    return p}\n  return 0\n  }\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(n) => {\n  let p = 1\n  let k = 1\n  \n  for (; n > 0;) {\n     {\n      let y = n % 10\n      if (y % 2 == 1) {\n        p *= y; k = 0;\n       \n      }\n      n = n / 10;\n      \n    }\n  }\n  \n  return { p, k };\n};\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let t = txt.split( / s /)\n  if (t.length > 1) {\n    return t\n    }\n  else {\n    t = txt.split( /, /)\n    if (t.length > 1) {\n      return t\n      }\n    else {\n      let p = 0\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let i = 0;\n      while (i < txt.length) {\n         {\n          let m = txt [ i ].charCodeAt()\n          if (m >= 97 && m <= 122 && m % 2 == 0) {\n            p++\n            }\n          }\n        i++;}\n      return p\n      }\n    }\n  }\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let t = txt.split( / s /)\n  if (t.length > 1) {\n    return t\n    }\n  else {\n    t = txt.split( /, /)\n    if (t.length > 1) {\n      return t\n      }\n    else {\n      let p = 0\n     \n      for (let i = 0; i < txt.length; i++) {\n        if (txt[i].match( /^[a-zA-Z]+$/ )) {\n          p = p + 1\n          if (p % 2 === 0) {\n            return [txt[i]]\n          }\n        }\n      }\n    }\n  }\n}\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (e1 == e2)\n  ret.add(e1);\n  return [ ... ret ].sort();\n  }\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n  if (e1!== e2)\n    ret.add(e1);\n  return [...ret];\n}\n\n\n/* Return list of unique elements in given list.\n  >>> unique([1, 4, 3, 34, 653, 2, 5])\n  [1, 4, 3, 34, 653, 5]\n  >>> unique([1, 4, 3, 34, 653, 2, 5, 1])\n  [1, 4, 3, 34, 653, 5, 1]\n\n  */\nconst unique =(l) => {\n  var ret = new Set();\n  for (const e of l)\n  ret.add(e);\n  return [...ret];\n}\n\n/* Return list of unique elements in given list.\n  >>> distinct([1, 4, 3, 34, 653, 2, 5, 1])\n  [1, 4, 3, 34, 653, 5, 1]\n  >>> distinct([1, 4, 3, 34, 653, 2, 5, 1, 5])\n  [1, 4, 3, 34, 653, 5, 1, 5]\n\n  */\nconst distinct =(l) => {\n  var ret = new Set();\n  for (const e of l)\n  if (!ret.has(e))\n    ret.add(e);\n  return [...ret];\n}\n\n/* Return the sum of all elements in the given list.\n  >>> sum([1, 4, 3, 34, 653, 2, 5])\n  65\n  >>> sum([1, 4, 3, 34, 653, 2, 5, 1])\n  65\n  >>> sum([1, 4, 3, 34, 653, 2, 5])\n  65\n\n  */\nconst sum =(l) => {\n  var ret = 0;\n  for (const e of l)\n    ret += e;\n  return ret;\n}\n\n/* Return the sum of all elements in the given list.\n  >>> sum([1, 4, 3, 34, 653, 2, 5, 1])\n  65\n  >>> sum([1, 4, 3, 34, 653, 2, 5])\n  65\n\n  */\nconst product =(l) => {\n  var ret = 1;\n  for (const e of l)\n    ret *= e;\n  return ret;\n}\n\n/* Return the sum of all elements in the given list.\n  >>> product([1, 4, 3, 34, 653, 2, 5])\n  65\n  >>> product([1, 4, 3, 34, 653, 2, 5, 1])\n  65\n  >>> product([1, 4, 3, 34, 653, 2, 5])\n  65\n\n  */\nconst max =(l) => {\n  if (l.length === 0)\n    return 0;\n  var ret = -Infinity;\n  for (const e of l)\n    if (e > ret)\n      ret = e;\n  return ret;\n}\n\n/* Return the sum of all elements in the given list.\n  >>> max([1, 4, 3, 34, 653, 2, 5])\n  65\n  >>> max([1, 4, 3, 34, 653, 2, 5, 1])\n  65\n  >>> max([1, 4, 3, 34, 653, 2, 5])\n  65\n\n  */\nconst min =(l) => {\n  if (l.length === 0)\n    return 0;\n  var ret = Infinity;\n  for (const e of l)\n    if (e < ret)\n      ret = e;\n  return ret;\n}\n\n/* Return the sum of all elements in the given list.\n  >>> min([1, 4, 3, 34, 653, 2, 5])\n  1\n  >>> min([1, 4, 3, 34, 653, 2, 5, 1])\n  1\n  >>> min([1, 4, 3, 34, 653, 2, 5])\n  1\n\n  */\nconst mean =(l) => {\n  var ret = sum(l) / l.length;\n  return ret;\n}\n\n/* Return the sum of all elements in the given list.\n  >>> mean([1, 4, 3, 34, 653, 2, 5, 1])\n  65\n  >>> mean([1, 4, 3, 34, 653, 2, 5])\n  65\n  >>> mean([1, 4, 3, 34, 653, 2, 5, 1])\n  65\n\n  */\nconst median =(l) => {\n  if (l.length === 0)\n    return 0;\n  if (l.length % 2 === 1)\n    return mean(l);\n  return (l[(l.length / 2) - 1] + l[(l.length / 2)]) / 2;\n}\n\n/* Return the sum of all elements in the given list.\n  >>> median([1, 4, 3, 34, 653, 2, 5, 1])\n  65\n  >>> median([1, 4, 3, 34, 653, 2, 5])\n  65\n  >>> median([1, 4, 3, 34, 653, 2, 5, 1])\n  65\n\n  */\nconst mode =(l) => {\n  var ret = new Set();\n  for (const e of l)\n    if (ret.has(e))\n      ret.delete(e);\n    else\n      ret.add(e);\n  if (ret.size === 1)\n    return [...ret].pop();\n  return [...ret];\n}\n\n/* Return the sum of all elements in the given list.\n  >>> mode([1, 4, 3, 34, 653, 2, 5, 1])\n  1\n  >>> mode([1, 4, 3, 34, 653, 2, 5])\n  2\n  >>> mode([1, 4, 3, 34, 653, 2, 5, 1])\n  2\n\n  */\nconst mode_2 =(l) => {\n  var ret ="}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  let i = 0;\n  while (i < n) {\n    if (i % 11 == 0 || i % 13 == 0)\n    ns.push(i);\n    i++;}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n  ans+=(c == '7');\n  return ans;\n  }\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  let i = 0;\n  while (i < n) {\n    if (i % 11 == 0 || i % 13 == 0)\n    ns.push(i);\n    i++;}\n \n  ns.sort((a,b) => a - b);\n \n  for (i = 0; i < ns.length; i++)\n  console.log(ns[i]);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  let i = 0;\n  while (i < numbers.length) {\n    for (let j = 0; j < numbers.length; j++)\n    if (i != j) {\n      let a = numbers [ i ], b = numbers [ j ];\n      if (distance == null) {\n        distance = Math.abs(a - b);\n        closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n        }\n      else {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        let new_distance = Math.abs(a - b);\n        if (new_distance < distance) {\n          distance = new_distance;\n          closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n          }\n        }\n      }\n    i++;}\n  return closest_pair;\n  }\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  let i = 0;\n  while (i < numbers.length) {\n    for (let j = 0; j < numbers.length; j++)\n    if (i!= j) {\n      let a = numbers [ i ], b = numbers [ j ];\n      if (distance == null) {\n        distance = Math.abs(a - b);\n        closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n        }\n      else {\n       \n        let d = Math.abs(a - b);\n        if (distance > d) {\n          distance = d;\n          closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n        }\n      }\n    }\n    i++;\n  }\n  return closest_pair;\n}\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 =(numbers) => {\n  var closest_pair, distance;\n  let i = 0;\n  while (i < numbers.length) {\n    for (let j = 0; j < numbers.length; j++)\n    if (i!= j) {\n      let a = numbers [ i ], b = numbers [ j ];\n      if (distance == null) {\n        distance = Math.abs(a - b);\n        closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n        }\n      else {\n        let d = Math.abs(a - b);\n        if (distance > d) {\n          distance = d;\n          closest_pair = [ Math.min(a, b), Math.max(a, b) ];\n        }\n      }\n    }\n    i++;\n  }\n  return closest_pair;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      let y = lst [ i ]\n      if (y % 1 != 0) {\n        if (y > 0) {\n          y = y - y % 1 + 1}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        else {\n          y = - y; y = y - y % 1}\n        }\n      p+=y * y\n      }\n    i++;}\n  return p\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      let y = lst [ i ]\n      if (y % 1!= 0) {\n        if (y > 0) {\n          y = y - y % 1 + 1}\n       \n        else {\n          y = y + 1}\n      }\n      p = p + y * y\n      i++\n    }\n  }\n  return p\n}\n\nconsole.log(sumSquares([1,2,3]))\n\n/*\n  The sum of the squares of the first ten natural numbers is,\n  1^2 + 2^2 +... + 10^2 = 385\n  The square of the sum of the first ten natural numbers is,\n  (1 + 2 +... + 10)^2 = 55^2 = 3025\n  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640\n  */\nconst sumSquares2 = (lst) => {\n  let p = 0;\n  let i = 0;\n  while (i < lst.length) {\n    p = p + lst[i] * lst[i]\n    i++\n  }\n  return p\n}\n\nconsole.log(sumSquares2([1,2,3]))\n\n/*\n  The sum of the squares of the first ten natural numbers is,\n  1^2 + 2^2 +... + 10^2 = 385\n  The square of the sum of the first ten natural numbers is,\n  (1 + 2 +... + 10)^2 = 55^2 = 3025\n  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640\n  */\nconst sumSquares3 = (lst) => {\n  let p = 0;\n  let i = 0;\n  while (i < lst.length) {\n    p = p + lst[i]\n    i++\n  }\n  return p * p\n}\n\nconsole.log(sumSquares3([1,2,3]))\n\n/*\n  The sum of the squares of the first ten natural numbers is,\n  1^2 + 2^2 +... + 10^2 = 385\n  The square of the sum of the first ten natural numbers is,\n  (1 + 2 +... + 10)^2 = 55^2 = 3025\n  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640\n  */\nconst sumSquares4 = (lst) => {\n  let p = 0;\n  let i = 0;\n  while (i < lst.length) {\n    p = p + lst[i] * lst[i]\n    i++\n  }\n  return p * p\n}\n\nconsole.log(sumSquares4([1,2,3]))\n\n/*\n  The sum of the squares of the first ten natural numbers is,\n  1^2 + 2^2 +... + 10^2 = 385\n  The square of the sum of the first ten natural numbers is,\n  (1 + 2 +... + 10)^2 = 55^2 = 3025\n  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640\n  */\nconst sumSquares5 = (lst) => {\n  let p = 0;\n  let i = 0;\n  while (i < lst.length) {\n    p = p + lst[i]\n    i++\n  }\n  return p\n}\n\nconsole.log(sumSquares5([1,2,3]))\n\n/*\n  The sum of the squares of the first ten natural numbers is,\n  1^2 + 2^2 +... + 10^2 = 385\n  The square of the sum of the first ten natural numbers is,\n  (1 + 2 +... + 10)^2 = 55^2 = 3025\n  Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640\n  */\nconst sumSquares6 = (lst) => {\n  let p = 0;\n  let i = 0;\n  while (i < lst.length) {\n    p = p + lst[i] * lst[i]\n    i++\n  }\n  return p\n}\n\nconsole.log(sumSquares6([1,2,3]))\n<|endoftext|>"}
{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    let j = 0;\n    while (j < numbers.length) {\n       {\n        if (i != j) {\n          let distance = Math.abs(numbers [ i ] - numbers [ j ]);\n          if (distance < threshold) {\n            j++; return true;\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            }\n          }\n        }\n      j++;}\n    }\n  return false;\n  }\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    let j = 0;\n    while (j < numbers.length) {\n       {\n        if (i!= j) {\n          let distance = Math.abs(numbers [ i ] - numbers [ j ]);\n          if (distance < threshold) {\n            j++; return true;\n           \n          }\n        }\n        j++;\n      }\n    }\n  }\n  return false;\n};\n\n// -----------------------------------------------------------------------------\n// -----------------------------------------------------------------------------\n\nmodule.exports = {\n  hasCloseElements\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n     {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (p == 1) {\n        t.push(i)}\n      }\n    i++;}\n  return t\n  }\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n     {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n      }\n      if (p == 1) {\n        t.push(i)\n        i++;\n      }\n    }\n  }\n  return t;\n}\n\nconst countUpTo2 =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n    {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n      }\n      if (p == 1) {\n        t.push(i)\n        i++;\n      }\n    }\n  }\n  return t;\n}\n\nconst countUpTo3 =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n    {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n      }\n      if (p == 1) {\n        t.push(i)\n        i++;\n      }\n    }\n  }\n  return t;\n}\n\nconst countUpTo4 =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n    {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n      }\n      if (p == 1) {\n        t.push(i)\n        i++;\n      }\n    }\n  }\n  return t;\n}\n\nconst countUpTo5 =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n    {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n      }\n      if (p == 1) {\n        t.push(i)\n        i++;\n      }\n    }\n  }\n  return t;\n}\n\nconst countUpTo6 =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n    {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n      }\n      if (p == 1) {\n        t.push(i)\n        i++;\n      }\n    }\n  }\n  return t;\n}\n\nconst countUpTo7 =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n    {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n      }\n      if (p == 1) {\n        t.push(i)\n        i++;\n      }\n    }\n  }\n  return t;\n}\n\nconst countUpTo8 =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n    {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n      }\n      if (p == 1) {\n        t.push(i)\n        i++;\n      }\n    }\n  }\n  return t;\n}\n\nconst countUpTo9 =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n    {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n      }\n      if (p == 1) {\n        t.push(i)\n        i++;\n      }\n    }\n  }\n  return t;\n}\n\nconst countUpTo10 =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n    {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n      }\n      if (p == 1) {\n        t.push(i)\n        i++;\n      }\n    }\n  }\n  return t;\n}\n\nconst countUpTo11 =(n) => {\n  let t = [ ]\n  let i = 2;\n  while (i < n) {\n    {\n      let p = 1\n      for (let j = 2; j * j <= i; j++) {\n        if (i % j == 0) {\n          p = 0; i++; break}\n       \n      }\n      if (p == 1) {\n        t.push(i)\n        i++;\n      }\n    }\n  }\n  return t;\n}\n\nconst countUpTo12 =("}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(lst) => {\n  var res = [ ], sw = true;\n  \n  for (; lst.length;) {\n     {\n      res.push(sw ? Math.min(... lst) : Math.max(... lst));\n      lst.splice(lst.indexOf(res.at( - 1)), 1);\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      sw = !sw;\n      }\n    }\n  return res;\n  }\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(lst) => {\n  var res = [ ], sw = true;\n  \n  for (; lst.length;) {\n     {\n      res.push(sw? Math.min(... lst) : Math.max(... lst));\n      lst.splice(lst.indexOf(res.at( - 1)), 1);\n     \n      sw =!sw;\n     }\n  }\n  return res;\n};\n\nconsole.log(strangeSortList([1, 2, 3, 4]));\nconsole.log(strangeSortList([5, 5, 5, 5]));\nconsole.log(strangeSortList([]));\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return false\n  }\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(x + y === z || x + z === y || x === y + z)) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst main = () => {\n  const anyInt_1 = anyInt(3, 2, 2)\n  console.log(anyInt_1)\n  const anyInt_2 = anyInt(3, -2, 1)\n  console.log(anyInt_2)\n  const anyInt_3 = anyInt(3.6, -2.2, 2)\n  console.log(anyInt_3)\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(n) => {\n  if (n == 0)\n  return 0;\n  if (n == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fib(n - 1) + fib(n - 2);\n  }\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(n) => {\n  if (n == 0)\n  return 0;\n  if (n == 1)\n \n  return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\nconst sum =(n, m) => n + m;\nconst product =(n, m) => n * m;\nconst average =(n, m) => (n + m) / 2;\nconst avg_sum =(n, m) => n + m;\nconst avg_product =(n, m) => n * m;\n\nconst even =(n) => n % 2 == 0;\nconst odd =(n) => n % 2 == 1;\nconst sum_odd =(n) => n + (n + 1) / 2;\nconst sum_even =(n) => (n + 1) / 2;\n\nconst is_sum_even =(n) => even(n)? sum_even(n) : sum_odd(n);\nconst is_sum_odd =(n) => odd(n)? sum_odd(n) : sum_even(n);\n\nconst is_product_even =(n) => even(n)? product_even(n) : product_odd(n);\nconst is_product_odd =(n) => odd(n)? product_odd(n) : product_even(n);\n\nconst is_avg_sum_even =(n) => even(n)? avg_sum_even(n) : avg_sum_odd(n);\nconst is_avg_sum_odd =(n) => odd(n)? avg_sum_odd(n) : avg_sum_even(n);\n\nconst is_avg_product_even =(n) => even(n)? avg_product_even(n) : avg_product_odd(n);\nconst is_avg_product_odd =(n) => odd(n)? avg_product_odd(n) : avg_product_even(n);\n\nconst is_fib =(n) => n >= 0 && n <= 1000000;\n\nconst is_even =(n) => n % 2 == 0;\nconst is_odd =(n) => n % 2 == 1;\n\nconst is_prime =(n) => is_fib(n) && fib(n) == n;\nconst is_composite =(n) => n > 2 && n < 1000 &&!is_prime(n);\n\nconst is_sum_of_primes =(n) => n > 0 && is_prime(n) && is_composite(n);\n\nconst is_product_of_primes =(n) => n > 0 && is_prime(n) && is_composite(n);\n\nconst is_sum_of_fib =(n) => n > 0 && is_fib(n) && is_prime(n);\nconst is_product_of_fib =(n) => n > 0 && is_fib(n) && is_prime(n);\n\nconst is_sum_of_fibs =(n) => n > 0 && is_fib(n) && is_prime(n);\nconst is_product_of_fibs =(n) => n > 0 && is_fib(n) && is_prime(n);\n\nconst is_sum_of_primes_of_fibs =(n) => n > 0 && is_fib(n) && is_prime(n);\nconst is_product_of_primes_of_fibs =(n) => n > 0 && is_fib(n) && is_prime(n);\n\nconst is_sum_of_primes_of_fibs =(n) => n > 0 && is_fib(n) && is_prime(n);\nconst is_product_of_primes_of_fibs =(n) => n > 0 && is_fib(n) && is_prime(n);\n\nconst is_sum_of_primes_of_fibs =(n) => n > 0 && is_fib(n) && is_prime(n);\nconst is_product_of_primes_of_fibs =(n) => n > 0 && is_fib(n) && is_prime(n);\n\nconst is_sum_of_fibs_of_primes =(n) => n > 0 && is_prime(n) && is_fib(n);\nconst is_product_of_fibs_of_primes =(n) => n > 0 && is_prime(n) && is_fib(n);\n\nconst is_sum_of_fibs_of_primes =(n) => n > 0 && is_prime(n) && is_fib(n);\nconst is_product_of_fibs_of_primes =(n) => n > 0 && is_prime(n) && is_fib(n);\n\nconst is_sum_of_fibs_of_primes =(n) => n > 0 && is_prime(n) && is_fib(n);\nconst is_product_of_fibs_of_primes =(n) => n > 0 && is_prime(n) && is_fib(n);\n\nconst is_sum_of_fibs_of_primes =(n) => n > 0 && is_prime(n) && is_fib(n);\nconst is_product_of_fibs_of_primes =(n) => n > 0 && is_prime(n) && is_fib(n);\n\nconst is_sum_of_primes_of_fibs =(n) => n > 0 && is_prime(n) && is_fib(n);\nconst is_product_of_primes_of_fibs =(n) => n > 0 && is_prime(n) && is_fib(n);\n\nconst is_sum_of_primes_of_fibs =(n) => n > 0 && is_prime(n) && is_fib(n);\nconst is_product_of_primes_of_fibs =(n) => n > 0 && is_prime(n) && is_f"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, s1) => {\n  return JSON.stringify([ ... new Set(s0) ].sort()) === JSON.stringify([ ... new Set(s1) ].sort());\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, s1) => {\n  return JSON.stringify([... new Set(s0) ].sort()) === JSON.stringify([... new Set(s1) ].sort());\n \n};\n\n// console.log(sameChars('eabcd', 'dddddddabc'));\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(words) => {\n  let s = - 1\n  let u = - 1\n  if (words.length == 0) {\n    return ''}\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    let j = 0;\n    while (j < words [ i ].length) {\n       {\n        let y = 1\n        for (let k = 0; k < j; k++) {\n          if (words [ i ] [ j ] == words [ i ] [ k ]) {\n            y = 0}\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        if (y == 1) {\n          p++}\n        }\n      j++;}\n    if (p > s ||(p == s && words [ i ] < words [ u ])) {\n      u = i;\n      s = p;\n      }\n    }\n  return words [ u ]\n  }\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(words) => {\n  let s = - 1\n  let u = - 1\n  if (words.length == 0) {\n    return ''}\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    let j = 0;\n    while (j < words [ i ].length) {\n       {\n        let y = 1\n        for (let k = 0; k < j; k++) {\n          if (words [ i ] [ j ] == words [ i ] [ k ]) {\n            y = 0}\n         \n        }\n        if (y == 0) {\n          s = i\n          break}\n        p++}\n        j++\n    }\n  }\n  return words [s]}\n\n//console.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(findMax([1, 2, 3, 2"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return lst1;\n  else\n  return lst2;\n  }\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n \n    return lst1;\n  else\n    return lst2;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  let i = 0;\n  while (i < Math.floor(arr.length / 2)) {\n    if (arr [ i ] != arr.at( - i - 1))\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  ans++;\n  return ans;\n  }\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  let i = 0;\n  while (i < Math.floor(arr.length / 2)) {\n    if (arr [ i ]!= arr.at( - i - 1))\n   \n      ans++;\n    i++;\n  }\n  return ans;\n}\n\nconsole.log(smallestChange([1,2,3,5,4,7,9,6]));\nconsole.log(smallestChange([1,2,3,4,3,2,2]));\nconsole.log(smallestChange([1,2,3,2,1]));<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    let k = 2;\n    while (k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1)) {\n       {\n        if (p % k == 0)\n        k++; return false;\n        }\n      k++;}\n    return true;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  var f = [ 0, 1 ];\n  while (true) {\n    f.push(f.at( - 1) + f.at( - 2));\n    if (isPrime(f.at( - 1)))\n    n-=1;\n    if (n == 0)\n    return f.at( - 1);\n    }\n  }\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    let k = 2;\n    while (k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1)) {\n       {\n        if (p % k == 0)\n        k++; return false;\n        }\n      k++;}\n    return true;\n    }\n \n  let fib = (n) => {\n    if (n == 0) return 1;\n    else if (n == 1) return 2;\n    else {\n      return fib(n - 1) + fib(n - 2);\n      }\n    }\n    \n  let fibPrime = (n) => {\n    let nPrime = fib(n);\n    while (!isPrime(nPrime)) {\n      nPrime = fib(nPrime);\n      }\n    return nPrime;\n    }\n  return fibPrime(n);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  \n  var largest = 1;\n  let j = 2;\n  while (j < n + 1) {\n    if (n % j == 0 && isPrime(j))\n    largest = Math.max(largest, j);\n    j++;}\n  return largest;\n  }\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n  }\n  var factorize = function(k) {\n    if (k < 2)\n    return 1;\n    let result = 1;\n    while (k > 1) {\n      if (isPrime(k))\n    result *= k;\n      k--;\n    }\n    return result;\n  }\n  return factorize(n);\n};\n\n/*\n  Return the nth fibonacci number.\n  >>> fibonacci(0)\n  0\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(3)\n  3\n  >>> fibonacci(12)\n  21\n  >>> fibonacci(13)\n  26\n  */\nconst fibonacci = (n) => {\n  if (n < 2)\n  return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Return the largest palindrome made from the product of two 3-digit numbers.\n  >>> largestPalindrome(0)\n  999\n  >>> largestPalindrome(1)\n  999\n  >>> largestPalindrome(3)\n  906609\n  >>> largestPalindrome(5)\n  8847533\n  >>> largestPalindrome(12)\n  99900999\n  >>> largestPalindrome(13)\n  99911111\n  */\nconst largestPalindrome = (n) => {\n  if (n < 3)\n  return n;\n  var max = 0;\n  var isPalindrome = function(num) {\n    var reverse = 0;\n    var i = n;\n    var j = n;\n    while (i > 0) {\n      reverse = reverse * 10 + num % 10;\n      num = num / 10;\n      i--;\n      j--;\n    }\n    if (reverse!= num)\n    return false;\n    return true;\n  }\n  while (n > 1) {\n    var reverse = 0;\n    var i = n;\n    var j = n;\n    while (i > 0) {\n      reverse = reverse * 10 + n % 10;\n      n = n / 10;\n      i--;\n      j--;\n    }\n    if (reverse!= n)\n    return max;\n    if (isPalindrome(reverse) && reverse > max)\n    max = reverse;\n    n--;\n  }\n  return max;\n}\n\n/*\n  Return the smallest number that can be divided by every number from 1 to n.\n  >>> smallestDivisibleNumber(0)\n  0\n  >>> smallestDivisibleNumber(1)\n  1\n  >>> smallestDivisibleNumber(3)\n  1\n  >>> smallestDivisibleNumber(10)\n  3\n  >>> smallestDivisibleNumber(20)\n  5\n  >>> smallestDivisibleNumber(100)\n  100\n  >>> smallestDivisibleNumber(999)\n  999\n  >>> smallestDivisibleNumber(1000000)\n  999\n  >>> smallestDivisibleNumber(2000000)\n  999\n  >>> smallestDivisibleNumber(10001)\n  10001\n  >>> smallestDivisibleNumber(100100)\n  100100\n  >>> smallestDivisibleNumber(100000)\n  100000\n  >>> smallestDivisibleNumber(1000000000)\n  1000000000\n  */\nconst smallestDivisibleNumber = (n) => {\n  var i = 1;\n  while (i <= n) {\n    var divisor = 1;\n    while (n % i === 0) {\n      divisor++;\n      n = n / i;\n    }\n    i++;\n    if (divisor > 1)\n    return n * divisor;\n  }\n  return n;\n}\n\n/*\n  Return the sum of the squares of the first ten natural numbers.\n  >>> sumOfSquares(0)\n  0\n  >>> sumOfSquares(1)\n  1\n  >>> sumOfSquares(2)\n  4\n  >>> sumOfSquares(9)\n  36\n  >>> sumOfSquares(10)\n  100\n  */\nconst sumOfSquares = (n) => {\n  var sum = 0;\n  for (let i = 1; i <= n; i++)\n  sum += i * i;\n  return sum;\n};\n\n/*\n  Return the sum of the multiples of 3 and 5 below n.\n  >>> sumOfMultiples(0)\n  0\n  >>> sumOfMultiples(1)\n  1\n  >>> sumOfMultiples(3)\n  6\n  >>> sumOfMultiples(10)\n  45\n  >>> sumOfMultiples(100)\n  900\n  >>> sumOfMultiples(200)\n  1860\n  >>> sumOfMultiples(1000)\n  8990\n  >>> sumOfMultiples(5000)\n  346600\n  >>> sumOfMultiples(10000)\n  924000\n  */\nconst sumOfMultiples = (n) => {\n  var sum = 0;\n  for (let i = 1; i <= n; i++)\n  sum += largestPrimeFactor(i);\n  return sum;\n};\n\n/*\n  Return the sum of the multiples of 3 and 5 above n.\n  >>> sumOfMultiples(0)\n  0\n  >>> sumOfMultiples(1)\n  0\n  >>> sumOfMultiples(3)\n  6\n  >>> sumOfMultiples(10)\n  45\n  >>> sumOfMultiples(100)\n  900\n  >>> sumOfMultiples(200)\n  1860\n  >>> sumOfMultiples(1000)\n  8990\n  >>> sumOfMultiples(5000)\n  346600\n  >>> sumOfMultiples(10000)\n  924000\n  */\nconst sumOfMultiples = (n) => {\n  var sum = 0;\n  for (let i = n + 1; i <= largestPrimeFactor(n); i++)\n  sum += largestPrimeFactor(i);\n  return sum;\n}\n\n/*\n  Return the"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n}\n\n//Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n/*\nExample\nisEqualToSumEven(5) == false\nisEqualToSumEven(9) == false\nisEqualToSumEven(10) == false\nisEqualToSumEven(12) == false\nisEqualToSumEven(16) == false\nisEqualToSumEven(20) == false\nisEqualToSumEven(24) == true\nisEqualToSumEven(28) == false\nisEqualToSumEven(30) == false\nisEqualToSumEven(36) == false\nisEqualToSumEven(40) == false\nisEqualToSumEven(44) == false\nisEqualToSumEven(48) == false\nisEqualToSumEven(56) == false\nisEqualToSumEven(60) == true\nisEqualToSumEven(64) == false\n*/\nconst isEqualToSumEven2 =(n) => {\n  return(n >= 8 && n % 2 == 0)\n \n}\n\n//Evaluate whether the given number n can be written as the sum of exactly 6 positive even numbers\nconst isEqualToSumEven3 =(n) => {\n  return(n >= 8 && n % 2 == 0 && n % 3 == 0)\n}\n\n//Evaluate whether the given number n can be written as the sum of exactly 7 positive even numbers\nconst isEqualToSumEven4 =(n) => {\n  return(n >= 8 && n % 2 == 0 && n % 3 == 0 && n % 4 == 0)\n}\n\n//Evaluate whether the given number n can be written as the sum of exactly 8 positive even numbers\nconst isEqualToSumEven5 =(n) => {\n  return(n >= 8 && n % 2 == 0 && n % 3 == 0 && n % 4 == 0 && n % 5 == 0)\n}\n\n//Evaluate whether the given number n can be written as the sum of exactly 9 positive even numbers\nconst isEqualToSumEven6 =(n) => {\n  return(n >= 8 && n % 2 == 0 && n % 3 == 0 && n % 4 == 0 && n % 5 == 0 && n % 6 == 0)\n}\n\n//Evaluate whether the given number n can be written as the sum of exactly 10 positive even numbers\nconst isEqualToSumEven7 =(n) => {\n  return(n >= 8 && n % 2 == 0 && n % 3 == 0 && n % 4 == 0 && n % 5 == 0 && n % 6 == 0 && n % 7 == 0)\n}\n\n//Evaluate whether the given number n can be written as the sum of exactly 11 positive even numbers\nconst isEqualToSumEven8 =(n) => {\n  return(n >= 8 && n % 2 == 0 && n % 3 == 0 && n % 4 == 0 && n % 5 == 0 && n % 6 == 0 && n % 7 == 0 && n % 8 == 0)\n}\n\n//Evaluate whether the given number n can be written as the sum of exactly 12 positive even numbers\nconst isEqualToSumEven9 =(n) => {\n  return(n >= 8 && n % 2 == 0 && n % 3 == 0 && n % 4 == 0 && n % 5 == 0 && n % 6 == 0 && n % 7 == 0 && n % 8 == 0 && n % 9 == 0)\n}\n\n//Evaluate whether the given number n can be written as the sum of exactly 13 positive even numbers\nconst isEqualToSumEven10 =(n) => {\n  return(n >= 8 && n % 2 == 0 && n % 3 == 0 && n % 4 == 0 && n % 5 == 0 && n % 6 == 0 && n % 7 == 0 && n % 8 == 0 && n % 9 == 0 && n % 10 == 0)\n}\n\n//Evaluate whether the given number n can be written as the sum of exactly 14 positive even numbers\nconst isEqualToSumEven11 =(n) => {\n  return(n >= 8 && n % 2 == 0 && n % 3 == 0 && n % 4 == 0 && n % 5 == 0 && n % 6 == 0 && n % 7 == 0 && n % 8 == 0 && n % 9 == 0 && n % 10 == 0 && n % 11 == 0)\n}\n\n//Evaluate whether the given number n can be written as the sum of exactly 15 positive even numbers\nconst isEqualToSumEven12 =(n) => {\n  return(n >= 8 && n % 2 == 0 && n % 3 == 0 && n % 4 == 0 && n % 5 == 0 && n % 6 == 0 && n % 7 == 0 && n % 8 == 0 && n % 9 == 0 && n % 10 == 0 && n % 11 == 0 && n % 12 == 0)\n}\n\n//Evaluate whether the given number n can be written as the sum of exactly 16 positive even numbers\nconst isEqualToSumEven13 =(n) => {\n  return(n >= 8 && n % 2 == 0 && n % 3 == 0 && n % 4 == 0 && n % 5 == 0 && n % 6 == 0 && n % 7 == 0 && n % 8 == 0 && n % 9 == 0 && n % 10 == 0 && n % 11 == 0 && n % 12 == 0 && n % 13 == 0)\n}\n\n//Evaluate whether the given number n can be written as the sum of exactly 17 positive even numbers\nconst isEqualToSumEven14 =(n) => {\n  return(n >= 8 && n % 2 == 0 && n % 3 == 0 && n % 4 == 0 && n % 5 == 0 && n % 6 == 0 && n % 7 == 0 && n % 8 == 0 && n % 9 == 0 && n % 10 == 0 && n % 11 == 0 && n % 12 == 0 && n % 13 == 0 && n % 14 == 0)\n}\n\n//Evaluate whether the given number n can be written as the sum of exactly 18 positive even numbers\nconst isEqualToSumEven15 =(n) => {\n  return(n >= 8 && n % 2 == 0 && n % 3 == 0 && n % 4 == 0 && n % 5 =="}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      f *= i;\n      if (i % 2 == 0) {\n        k.push(f)}\n      else {\n        k.push(p)}\n      }\n    i++;}\n  return k\n  }\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      f = f*i;\n     }\n     k.push(f)\n     i++;\n  }\n  return k;\n}\n\nconst factorial =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  let i = 1;\n  while (i <= n) {\n     {\n      p+=i;\n     \n      f = f*i;\n     }\n     k.push(f)\n     i++;\n  }\n  return k;\n}\n\nmodule.exports = {\n  f,\n  factorial\n}<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, j) {\n    if (i == j)\n    return '0';\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return '1';\n    }\n  return a.split('').map((item, index) => xor(item, b [ index ])).join('');\n  }\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, j) {\n    if (i == j)\n    return '0';\n    else\n   \n    return '1';\n  };\n  \n  var xorResult = a.split('').reduce((previous, current) => {\n    previous = xor(previous, current);\n    return previous;\n  }, b.split('').reduce((previous, current) => {\n    previous = xor(previous, current);\n    return previous;\n  }, ''));\n  \n  return xorResult;\n}\n\n/*\n  Input: two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> stringAnd('010', '110')\n  '00'\n  */\nconst stringAnd =(a, b) => {\n  var and = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n    return '0';\n  };\n  \n  var andResult = a.split('').reduce((previous, current) => {\n    previous = and(previous, current);\n    return previous;\n  }, b.split('').reduce((previous, current) => {\n    previous = and(previous, current);\n    return previous;\n  }, ''));\n  \n  return andResult;\n}\n\n/*\n  Input: two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> stringOr('010', '110')\n  '11'\n  */\nconst stringOr =(a, b) => {\n  var or = function(i, j) {\n    if (i == j)\n    return '1';\n    else\n    return '0';\n  };\n  \n  var orResult = a.split('').reduce((previous, current) => {\n    previous = or(previous, current);\n    return previous;\n  }, b.split('').reduce((previous, current) => {\n    previous = or(previous, current);\n    return previous;\n  }, ''));\n  \n  return orResult;\n}\n\nmodule.exports = {\n  stringXor,\n  stringAnd,\n  stringOr\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(numbers) => {\n  var min_number = Math.min(... numbers);\n  var max_number = Math.max(... numbers);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return numbers.map(x =>(x - min_number) /(max_number - min_number));\n  }\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(numbers) => {\n  var min_number = Math.min(... numbers);\n  var max_number = Math.max(... numbers);\n \n  var min_percent = (min_number / max_number);\n  var max_percent = (max_number / min_number);\n  \n  var scaled_numbers = [];\n  for(var i = 0; i < numbers.length; i++) {\n    scaled_numbers.push(numbers[i] * min_percent + min_number * (1 - min_percent));\n  }\n  return scaled_numbers;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let t = file_name.split( / . /)\n  if (t.length != 2) {\n    return 'No'}\n  if (t [ 1 ] != 'txt' && t [ 1 ] != 'dll' && t [ 1 ] != 'exe') {\n    return 'No'}\n  if (t [ 0 ] == '') {\n    return 'No'}\n  let a = t [ 0 ] [ 0 ].charCodeAt()\n  if ( !((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = 0\n  let i = 1;\n  while (i < t [ 0 ].length) {\n     {\n      if (t [ 0 ] [ i ].charCodeAt() >= 48 && t [ 0 ] [ i ].charCodeAt() <= 57) {\n        y++}\n      if (y > 3) {\n        i++; return 'No'}\n      }\n    i++;}\n  return 'Yes'}\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let t = file_name.split( /. /)\n  if (t.length!= 2) {\n    return 'No'}\n  if (t [ 1 ]!= 'txt' && t [ 1 ]!= 'dll' && t [ 1 ]!= 'exe') {\n    return 'No'}\n  if (t [ 0 ] == '') {\n    return 'No'}\n  let a = t [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  let b = t [ 0 ] [ t [ 0 ].length - 1 ].charCodeAt()\n  if (!((b >= 65 && b <= 90) ||(b >= 97 && b <= 122))) {\n    return 'No'}\n  return 'Yes'\n}\n\nconst isValidEmail =(email) => {\n  let t = email.split(/@/)\n  if (t.length!= 2) {\n    return 'No'}\n  let a = t [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n  let b = t [ 1 ].charCodeAt()\n  if (!((b >= 65 && b <= 90) ||(b >= 97 && b <= 122))) {\n    return 'No'}\n  return 'Yes'\n}\n\nconst isValidName =(name) => {\n  let t = name.split(/. /)\n  if (t.length!= 2) {\n    return 'No'}\n  let a = t [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n  let b = t [ 1 ].charCodeAt()\n  if (!((b >= 65 && b <= 90) ||(b >= 97 && b <= 122))) {\n    return 'No'}\n  return 'Yes'\n}\n\nconst isValidPhone =(phone) => {\n  let t = phone.split(/. /)\n  if (t.length!= 2) {\n    return 'No'}\n  let a = t [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n  let b = t [ 1 ].charCodeAt()\n  if (!((b >= 65 && b <= 90) ||(b >= 97 && b <= 122))) {\n    return 'No'}\n  return 'Yes'\n}\n\nconst isValidPassword =(password) => {\n  let t = password.split(/. /)\n  if (t.length!= 2) {\n    return 'No'}\n  let a = t [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n  let b = t [ 1 ].charCodeAt()\n  if (!((b >= 65 && b <= 90) ||(b >= 97 && b <= 122))) {\n    return 'No'}\n  return 'Yes'\n}\n\nconst isValidNameLength =(name) => {\n  let t = name.split(/. /)\n  if (t.length!= 2) {\n    return 'No'}\n  let a = t [ 0 ].length\n  if (a < 2) {\n    return 'No'}\n  return 'Yes'\n}\n\nconst isValidDate =(date) => {\n  let t = date.split(/. /)\n  if (t.length!= 2) {\n    return 'No'}\n  let a = t [ 0 ].length\n  if (a < 2) {\n    return 'No'}\n  let b = t [ 1 ].length\n  if (b < 2) {\n    return 'No'}\n  return 'Yes'\n}\n\nconst isValidPhoneNumber =(phone) => {\n  let t = phone.split(/. /)\n  if (t.length!= 2) {\n    return 'No'}\n  let a = t [ 0 ].length\n  if (a < 2) {\n    return 'No'}\n  let b = t [ 1 ].length\n  if (b < 2) {\n    return 'No'}\n  return 'Yes'\n}\n\nconst isValidPassPhrase =(pass) => {\n  let t = pass.split(/. /)\n  if (t.length!= 2) {\n    return 'No'}\n  let a = t [ 0 ].length\n  if (a < 2) {\n    return 'No'}\n  let b = t [ 1 ].length\n  if (b < 2) {\n    return 'No'}\n  return 'Yes'\n}\n\nconst isValidPasswordLength =(pass) => {\n  let t = pass.split(/. /)\n  if (t.length!= 2) {\n    return 'No'}\n  let a = t [ 0 ].length\n  if (a < 2) {\n    return 'No'}\n  return 'Yes'\n}\n\nconst isValidPhoneNumberLength =(phone) => {\n  let t = phone.split(/. /)\n  if (t.length!= 2) {\n    return 'No'}\n  let a = t [ 0 ].length\n  if (a < 2) {\n    return 'No'}"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let ord_char = char.charCodeAt(0)\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            return prev +(ord_char > 64 && ord_char < 91 ? ord_char : 0);\n            }\n      , 0);\n      }\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let ord_char = char.charCodeAt(0)\n           \n            return prev + (ord_char >= 97 && ord_char <= 122)\n      });\n}\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != - 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= - 1);\n \n};\n \n/* Filter an input list of strings only for ones that are equal to given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterByEqual =(strings, substring) => {\n  return strings.filter(x => x == substring);\n\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterBySubstringAndEqual =(strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= - 1 && x == substring);\n\n};\n\nmodule.exports = {\n  filterBySubstring,\n  filterByEqual,\n  filterBySubstringAndEqual\n};<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr) => {\n  if (arr.length == 0) return [ ];\n  var evens = arr.filter(x => x % 2 == 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (evens.length == 0) return [ ];\n  return [ Math.min(... evens), arr.indexOf(Math.min(... evens)) ];\n  }\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr) => {\n  if (arr.length == 0) return [ ];\n  var evens = arr.filter(x => x % 2 == 0);\n \n  return evens.reduce((a, b) => {\n    if (a.length == 0) {\n      a.push([ b, 0 ]);\n      return a;\n    }\n    for (var i = 0; i < a.length; i++) {\n      if (a[i][0] <= b) {\n        a.splice(i, 1);\n        break;\n      }\n    }\n    a.push([ b, a.length - 1 ]);\n    return a;\n  });\n};\n\n/*\n  \"Given a tree, each node contains a value and a reference to the value of the left subtree\n  and the right subtree.\n  Given a node with value x and a pointer to the left subtree with the reference node,\n  we will pluck a value from the right subtree and return it.\n  The plucked value should be the value of the right subtree.\n\n  If the given pointer is null, there is no right subtree, so we pluck a value from the left subtree.\n\n  The plucked value should be returned in a list, [ value, left_value, right_value ].\n\n  Example 1:\n      Input: [1,null,2,3,null,4,5,6,null,null,7,8,9]\n      Output: [4,2,6]\n\n  Example 2:\n      Input: [1,2,3,null,null,null,4,5,6]\n      Output: [5,2,3]\n\n  Example 3:\n      Input: [1,null,2,3,null,4,5,6]\n      Output: [4,5,6]\n\n  Example 4:\n      Input: [1,2,3,null,null,null,4,5,6,null,null,7,8,9]\n      Output: [7,8,9]\n\n  Example 5:\n      Input: [1,2,3,null,null,null,4,5,6]\n      Output: [6,4,5]\n\n  Example 6:\n      Input: [1,2,3,null,null,null,4,5,6]\n      Output: [6,5,4]\n*/\nconst pluckValue = (node, val, left) => {\n  if (node == null) return [ val, null, null ];\n  var nodeVal = node.value;\n  var leftVal = left.value;\n  if (nodeVal == val) {\n    return [ nodeVal, leftVal, null ];\n  }\n  return pluckValue(left, val, node);\n};\n\nconst pluckNode = (node, val) => {\n  if (node == null) return [ null, null, null ];\n  var nodeVal = node.value;\n  var leftVal = pluckNode(node.left, val);\n  var rightVal = pluckNode(node.right, val);\n  if (nodeVal == val) {\n    return [ node, leftVal, rightVal ];\n  }\n  return pluckNode(node.left, val, leftVal);\n};\n\nconst tree = (arr) => {\n  var nodes = pluck(arr);\n  return nodes.reduce((a, b) => {\n    var [ v, l, r ] = b;\n    a.push(pluckValue(l, v, r));\n    return a;\n  }, []);\n};\n\n// test\nconsole.log(tree([4,2,3]));\nconsole.log(tree([1,2,3,null,null,null,4,5,6,null,null,7,8,9]));\nconsole.log(tree([1,2,3,null,null,null,4,5,6]));\nconsole.log(tree([1,2,3,null,null,null,4,5,6,null,null,7,8,9]));\nconsole.log(tree([1,2,3,null,null,null,4,5,6]));\nconsole.log(tree([1,2,3,null,null,null,4,5,6,null,null,7,8,9]));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    let i = operator.length - 1;\n    while (i >= 0) {\n       {\n        if (operator [ i ] == '**') {\n          let u = operand [ i ]\n          while (operand [ i + 1 ] > 1) {\n            operand [ i + 1 ]--;\n            operand [ i ] *= u;\n            }\n          operand.splice(i + 1, 1)\n          operator.splice(i, 1)\n          y = 1;\n          i--; break;\n          }\n        }\n      i--;}\n    if (y == 1) {\n      continue}\n    for (let i = 0; i < operator.length; i++) {\n      if (operator [ i ] == '*') {\n        operand [ i ] *= operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '//') {\n        operand [ i ] =(operand [ i ] - operand [ i ] % operand [ i + 1 ]) / operand [ i + 1 ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let i = 0; i < operator.length; i++) {\n      if (operator [ i ] == '+') {\n        operand [ i ]+=operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '-') {\n        operand [ i ]-=operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    }\n  return operand [ 0 ]\n  }\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    let i = operator.length - 1;\n    while (i >= 0) {\n       {\n        if (operator [ i ] == '**') {\n          let u = operand [ i ]\n          while (operand [ i + 1 ] > 1) {\n            operand [ i + 1 ]--;\n            operand [ i ] *= u;\n            }\n          operand.splice(i + 1, 1)\n          operator.splice(i, 1)\n          y = 1;\n          i--; break;\n          }\n        }\n      i--;}\n    if (y == 1) {\n      continue}\n    for (let i = 0; i < operator.length; i++) {\n      if (operator [ i ] == '*') {\n        operand [ i ] *= operand [ i + 1 ]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i ] == '//') {\n        operand [ i ] =(operand [ i ] - operand [ i ] % operand [ i + 1 ]) / operand [ i + 1 ]\n       \n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n        }\n      }\n    }\n  return operand\n  }\n  //operator = ['+', '*', '-', '//', '**']\n  //operand = [2, 3, 4, 5]\n  //result = 9\n  //=> result = 9\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\n\nconst doAlgebra2 =(operator, operand) => {\n  let i = 0;\n  let y = 0;\n  while (operator[i]!= '**') {\n    if (operator[i] == '*') {\n      if (i!= operator.length - 1) {\n        if (operand[i + 1] > 1) {\n          operand[i] *= operand[i + 1];\n          operand.splice(i + 1, 1);\n          operator.splice(i, 1);\n          y = 1;\n          }\n        }\n      }\n    else\n      if (operator[i] == '//') {\n        if (i!= operator.length - 1) {\n          operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1];\n          operand.splice(i + 1, 1);\n          operator.splice(i, 1);\n          y = 1;\n          }\n        }\n    i++;}\n  if (y == 1) {\n    return operand\n    }\n  return doAlgebra(operator, operand)\n  }\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\n\nconst doAlgebra3 =(operator, operand) => {\n  let i = 0;\n  let y = 0;\n  while (operator[i]!= '**') {\n    if (operator[i] == '*') {\n      if (i!= operator.length - 1) {\n        if (operand[i + 1] > 1) {\n          operand[i] *= operand[i + 1];\n          operand.splice(i + 1, 1);\n          operator.splice(i, 1);\n          y = 1;\n          }\n        }\n      }\n    else\n      if (operator[i] == '//') {\n        if (i!= operator.length - 1) {\n          operand[i] = (operand[i] - operand[i"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, remaining) => {\n  if (need <= remaining) {\n    return [ need + number, remaining - need ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return [ remaining + number, 0 ]\n  }\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, remaining) => {\n  if (need <= remaining) {\n    return [ need + number, remaining - need ]\n   \n  } else {\n    return [ number, remaining ]\n  }\n}\n\nconst testEat =(t) => {\n  t.deepEqual(eat(5, 6, 10), [11, 4])\n  t.deepEqual(eat(4, 8, 9), [12, 1])\n  t.deepEqual(eat(1, 10, 10), [11, 0])\n  t.deepEqual(eat(2, 11, 5), [7, 0])\n}\n\ntestEat(t)\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) {\n    return y}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (len % i == 0) {\n        i++; return y}\n      }\n    i++;}\n  return x\n  }\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) {\n    return y}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n      if (n % i === 0) {\n        return x}\n      }\n      i += 1\n  }\n}\n\nconsole.log(xOrY(7, 34, 12))\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    let j = 2;\n    while (j * j <= lst [ i ]) {\n       {\n        if (lst [ i ] % j == 0) {\n          p = 0; j++; break}\n        }\n      j++;}\n    if (p == 1 && lst [ i ] > t) {\n      t = lst [ i ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let k = 0\n  while (t != 0) {\n    k+=t % 10\n    t =(t - t % 10) / 10\n    }\n  return k\n  }\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    let j = 2;\n    while (j * j <= lst [ i ]) {\n       {\n        if (lst [ i ] % j == 0) {\n          p = 0; j++; break}\n        }\n      j++;}\n    if (p == 1 && lst [ i ] > t) {\n      t = lst [ i ]}\n   \n  }\n  return t\n}\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nconsole.log(skjkasdkd([0,81,12,3,1,21]))\nconsole.log(skjkasdkd([0,8,1,2,1,7]))\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  let l = [ 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine' ]\n  let t = [ ]\n  let j = 0;\n  while (j < p.length) {\n     {\n      t.push(l [ p [ j ] - 1 ])\n      }\n    j++;}\n  return t\n  }\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n     \n      let temp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = temp\n    }\n  }\n  return p.reverse()\n .map(v => `${v}`)\n}\n\n/*\n  Given an array of strings, sort the strings in the array, reversing the array,\n  and return the original array.\n\n  For example:\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr = [\"Ten\", \"Nine\", \"Eight\", \"Seven\"]\n    arr"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > - 0.5) {\n    value-=t}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else {\n    value+=t}\n  return value\n  }\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > - 0.5) {\n    value-=t}\n \n  if (value < 0) {\n    value = -value\n  }\n  return Math.floor(value)\n}\n\nexport default closestInteger\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b == 'string') {\n    bb = Number(b.replace(',', '.'))}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (aa > bb) {\n    return a}\n  if (aa < bb) {\n    return b}\n  return null\n  }\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n \n  if (aa == bb) return null\n  if (aa < bb) return a\n  return b\n}\n\nconst compareTwo =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n  if (aa < bb) return a\n  return b\n}\n\nconst compareThree =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n  if (aa < bb) return a\n  return b\n}\n\nconst compareFour =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n  if (aa < bb) return a\n  return b\n}\n\nconst compareFive =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n  if (aa > bb) return a\n  return b\n}\n\nconst compareSix =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n  if (aa > bb) return a\n  return b\n}\n\nconst compareSeven =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n  if (aa >= bb) return a\n  return b\n}\n\nconst compareEight =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n  if (aa <= bb) return a\n  return b\n}\n\nconst compareNine =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n  if (aa <= bb) return a\n  return b\n}\n\nconst compareTen =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n  if (aa > bb) return a\n  return b\n}\n\nconst compareEleven =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n  if (aa >= bb) return a\n  return b\n}\n\nconst compareTwelve =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n  if (aa < bb) return a\n  return b\n}\n\nconst compareThirteen =(a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n  if (aa <= bb) return a\n  return b\n}\n\nconst compareFour"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid [ m - 1 ] [ n ] < min) {\n    min = grid [ m - 1 ] [ n ]}\n  if (n > 0 && grid [ m ] [ n - 1 ] < min) {\n    min = grid [ m ] [ n - 1 ]}\n  if (m < grid.length - 1 && grid [ m + 1 ] [ n ] < min) {\n    min = grid [ m + 1 ] [ n ]}\n  if (n < grid.length - 1 && grid [ m ] [ n + 1 ] < min) {\n    min = grid [ m ] [ n + 1 ]}\n  let p = [ ]\n  let i = 0;\n  while (i < k) {\n     {\n      if (i % 2 == 0) {\n        p.push(1)}\n      else {\n        p.push(min)}\n      }\n    i++;}\n  return p\n  }\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n  let path = [];\n  let path1 = [];\n  let path2 = [];\n  let path3 = [];\n  let path4 = [];\n  let path5 = [];\n  let path6 = [];\n  let path7 = [];\n  let path8 = [];\n  let path9 = [];\n  let path10 = [];\n  let path11 = [];\n  let path12 = [];\n  let path13 = [];\n  let path14 = [];\n  let path15 = [];\n  let path16 = [];\n  let path17 = [];\n  let path18 = [];\n  let path19 = [];\n  let path20 = [];\n  let path21 = [];\n  let path22 = [];\n  let path23 = [];\n  let path24 = [];\n  let path25 = [];\n  let path26 = [];\n  let path27 = [];\n  let path28 = [];\n  let path29 = [];\n  let path30 = [];\n  let path31 = [];\n  let path32 = [];\n  let path33 = [];\n  let path34 = [];\n  let path35 = [];\n  let path36 = [];\n  let path37 = [];\n  let path38 = [];\n  let path39 = [];\n  let path40 = [];\n  let path41 = [];\n  let path42 = [];\n  let path43 = [];\n  let path44 = [];\n  let path45 = [];\n  let path46 = [];\n  let path47 = [];\n  let path48 = [];\n  let path49 = [];\n  let path50 = [];\n  let path51 = [];\n  let path52 = [];\n  let path53 = [];\n  let path54 = [];\n  let path55 = [];\n  let path56 = [];\n  let path57 = [];\n  let path58 = [];\n  let path59 = [];\n  let path60 = [];\n  let path61 = [];\n  let path62 = [];\n  let path63 = [];\n  let path64 = [];\n  let path65 = [];\n  let path66 = [];\n  let path67 = [];\n  let path68 = [];\n  let path69 = [];\n  let path70 = [];\n  let path71 = [];\n  let path72 = [];\n  let path73 = [];\n  let path74 = [];\n  let path75 = [];\n  let path76 = [];\n  let path77 = [];\n  let path78 = [];\n  let path79 = [];\n  let path80 = [];\n  let path81 = [];\n  let path82 = [];\n  let path83 = [];\n  let path84 = [];\n  let path85 = [];\n  let path86 = [];\n  let path87 = [];\n  let path88 = [];\n  let path89 = [];\n  let path90 = [];\n  let path91 = [];\n  let path92 = [];\n  let path93 = [];\n  let path94 = [];\n  let path95 = [];\n  let path96 = [];\n  let path97 = [];\n  let path98 = [];\n  let path99 = [];\n  let path100 = [];\n  let path101 = [];\n  let path102 = [];\n  let path103 = [];\n  let path104 = [];\n  let path105 = [];\n  let path106 = [];\n  let path107 = [];\n  let path108 = [];\n  let path109 = [];\n  let path110 = [];\n  let path111 = [];\n  let path112 = [];\n  let path113 = [];\n  let path114 = [];\n  let path115 = [];\n  let path116 = [];\n  let path117 = [];\n  let path118 = [];\n  let path119 = [];\n  let path120 = [];\n  let path121 = [];\n  let path122 = [];\n  let path123 = [];\n  let path124 = [];\n  let path125 = [];\n  let path126 = [];\n  let path127 = [];\n  let path128 = [];\n  let path129 = [];\n  let path130 = [];\n  let path131 = [];\n  let path132 = [];\n  let path133 = [];\n  let path134 = [];\n  let path135 = [];\n  let path136 = [];\n  let path137 = [];\n  let path138 = [];\n  let path139 = [];\n  let path140 = [];\n  let path141 = [];\n  let path142 = [];\n  let path143 = [];\n  let path144 = [];\n  let path"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = Number(a [ 0 ]) * Number(b [ 0 ])\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let r = Number(a [ 1 ]) * Number(b [ 1 ])\n  return m % r == 0\n  }\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = Number(a [ 0 ]) * Number(b [ 0 ])\n \n  if ( a [ 1 ] === \"1\" && b [ 1 ] === \"1\") return true\n  else if ( a [ 1 ] === \"1\" && b [ 1 ] === \"0\") return false\n  else if ( a [ 1 ] === \"0\" && b [ 1 ] === \"1\") return false\n  else if ( m === Math.floor( m )) return true\n  else return false\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"))\nconsole.log(simplify(\"1/6\", \"2/1\"))\nconsole.log(simplify(\"7/10\", \"10/2\"))<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1) {\n        p+=lst [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i+=2;}\n  return p\n  }\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 1) {\n        p+=lst [ i ]\n       \n      }\n      i++;\n    }\n  }\n  return p;\n}\n\nmodule.exports = solution;<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(S) => {\n  let t = 0\n  if (S [ 0 ] == 'I' && S [ 1 ] == ' ') {\n    t = 1}\n  let i = 0;\n  while (i < S.length) {\n     {\n      if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n        if (S [ i + 1 ] == ' ' && S [ i + 2 ] == 'I' && S [ i + 3 ] == ' ') {\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          t++\n          }\n        }\n      }\n    i++;}\n  return t\n  }\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(S) => {\n  let t = 0\n  if (S [ 0 ] == 'I' && S [ 1 ] =='') {\n    t = 1}\n  let i = 0;\n  while (i < S.length) {\n     {\n      if (S [ i ] == '.' || S [ i ] == '!' || S [ i ] == '?') {\n        if (S [ i + 1 ] =='' && S [ i + 2 ] == 'I' && S [ i + 3 ] =='') {\n         \n          t += 1\n        }\n      }\n      i++\n    }\n  }\n  return t\n}\n\n/*\n  Given a string, check if the string is a palindrome.\n \n  A palindrome is a string that reads the same forwards and backwards.\n \n  For example:\n  >>> isPalindrome(\"A man, a plan, a canal-Panama\")\n  True\n  >>> isPalindrome(\"race a car\")\n  False\n  */\nconst isPalindrome =(S) => {\n  let i = 0;\n  let j = S.length - 1\n  while (i < j) {\n    if (S [ i ]!= S [ j ]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Given a string, return the number of times it contains the word \"bored\".\n \n  For example:\n  >>> findBored(\"I love this weather\")\n  2\n  >>> findBored(\"Hello world\")\n  0\n  */\nconst findBored =(S) => {\n  let t = 0\n  let i = 0\n  while (i < S.length) {\n    if (S [ i ] == 'bored') {\n      t++\n    }\n    i++\n  }\n  return t\n}\n\n/*\n  Given a string, return the number of times it contains the word \"is\".\n \n  For example:\n  >>> findIs(\"I love this weather\")\n  2\n  >>> findIs(\"Hello world\")\n  0\n  */\nconst findIs =(S) => {\n  let t = 0\n  let i = 0\n  while (i < S.length) {\n    if (S [ i ] == 'is') {\n      t++\n    }\n    i++\n  }\n  return t\n}\n\n/*\n  Given a string, return the number of times it contains the word \"bored\".\n \n  For example:\n  >>> findBored(\"I love this weather\")\n  2\n  >>> findBored(\"Hello world\")\n  0\n  */\nconst countBored =(S) => {\n  let t = 0\n  let i = 0\n  while (i < S.length) {\n    if (S [ i ] == 'bored') {\n      t++\n    }\n    i++\n  }\n  return t\n}\n\n/*\n  Given a string, return the number of times it contains the word \"is\".\n \n  For example:\n  >>> findIs(\"I love this weather\")\n  2\n  >>> findIs(\"Hello world\")\n  0\n  */\nconst countIs =(S) => {\n  let t = 0\n  let i = 0\n  while (i < S.length) {\n    if (S [ i ] == 'is') {\n      t++\n    }\n    i++\n  }\n  return t\n}\n\n/*\n  Given a string, return the number of times it contains the word \"bored\".\n \n  For example:\n  >>> findBored(\"I love this weather\")\n  2\n  >>> findBored(\"Hello world\")\n  0\n  */\nconst countBored2 =(S) => {\n  let t = 0\n  let i = 0\n  while (i < S.length) {\n    if (S [ i ] == 'bored') {\n      t++\n    }\n    i++\n  }\n  return t\n}\n\n/*\n  Given a string, return the number of times it contains the word \"is\".\n \n  For example:\n  >>> findIs(\"I love this weather\")\n  2\n  >>> findIs(\"Hello world\")\n  0\n  */\nconst countIs2 =(S) => {\n  let t = 0\n  let i = 0\n  while (i < S.length) {\n    if (S [ i ] == 'is') {\n      t++\n    }\n    i++\n  }\n  return t\n}\n\nconst main = () => {\n  let a = ['I love this weather', 'The sky is blue. The sun is shining. I love this weather', 'I love this weather', 'I love this weather']\n  let b = ['I love this weather', 'The sky is blue. The sun is shining. I love this weather', 'The sky is blue. The sun is shining. I love this weather', 'I love this weather', 'I love this weather']\n  let c = ['I love this weather', 'The sky is blue. The sun is shining. I love this weather', 'The sky is blue. The sun is shining. I love this weather', 'I love this weather', 'I love this weather']\n  let d = ['I love this weather', 'The sky is blue. The sun is shining. I love this weather', 'The sky is blue. The sun is shining. I love this weather', 'I love this weather', 'I love this weather']\n  let e = ['I love this weather', 'The sky is blue. The sun is shining. I love this weather', 'The sky is blue. The sun is shining. I love this weather', 'I love this weather', 'I love this weather']\n  let f = ['I love this weather', 'The sky is blue. The sun is shining. I love this weather', 'The sky is blue. The sun is shining. I love this weather', 'I love this weather', 'I love this weather']\n  let g = ['I love this weather', 'The sky is blue. The sun is shining. I love this weather', 'The sky is blue."}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n  .filter(s => ![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  .includes(s.toLowerCase())\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )\n  .join(\"\")\n  }\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n .filter(s =>![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n .includes(s.toLowerCase())\n \n .join(\"\")\n .toUpperCase()\n}\n\n/*\n  replaceVowels is a function that takes string and returns string with vowels replaced by consonants.\n  >>> replaceVowels('abcdef')\n  'bcdf'\n  >>> replaceVowels('aaBAA')\n  'B'\n  >>> replaceVowels('zbcd')\n  'ZBCD'\n  >>> replaceVowels('abcdef\\nghijklm')\n  'abcdf\\nghjklm'\n  >>> replaceVowels('abcdef\\nghijklm\\naaaaa')\n  'abcdf\\nghjklm\\nbbbbb'\n  */\nconst replaceVowels =(text) => {\n  return text.split(\"\")\n .map((s) => {\n    let s = s.toLowerCase();\n    if(![ \"a\", \"e\", \"i\", \"o\", \"u\" ].includes(s.toLowerCase()))\n      return s;\n    else\n      return s.toUpperCase();\n  })\n .join(\"\")\n}\n\n/*\n  getIndexOfVowels is a function that takes string and returns index of the first vowel.\n  >>> getIndexOfVowels('')\n  -1\n  >>> getIndexOfVowels('abcdef')\n  2\n  >>> getIndexOfVowels('aaBAA')\n  0\n  >>> getIndexOfVowels('zbcd')\n  1\n  >>> getIndexOfVowels('abcdef\\nghijklm')\n  1\n  >>> getIndexOfVowels('abcdef\\nghijklm\\naaaaa')\n  1\n  */\nconst getIndexOfVowels =(text) => {\n  return text.split(\"\")\n .map((s, index) => {\n    if(![ \"a\", \"e\", \"i\", \"o\", \"u\" ].includes(s.toLowerCase()))\n      return index;\n    else\n      return index + 1;\n  })\n .findIndex((index) => {\n    return index >= 0\n  })\n}\n\n/*\n  getIndexOfConsonants is a function that takes string and returns index of the first consonant.\n  >>> getIndexOfConsonants('')\n  -1\n  >>> getIndexOfConsonants('abcdef')\n  1\n  >>> getIndexOfConsonants('aaBAA')\n  0\n  >>> getIndexOfConsonants('zbcd')\n  3\n  >>> getIndexOfConsonants('abcdef\\nghijklm')\n  3\n  >>> getIndexOfConsonants('abcdef\\nghijklm\\naaaaa')\n  3\n  */\nconst getIndexOfConsonants =(text) => {\n  return text.split(\"\")\n .map((s, index) => {\n    if(![ \"a\", \"e\", \"i\", \"o\", \"u\" ].includes(s.toLowerCase()))\n      return index + 1;\n    else\n      return index;\n  })\n .findIndex((index) => {\n    return index >= 0\n  })\n}\n\n/*\n  getVowelsCount is a function that takes string and returns number of vowels.\n  >>> getVowelsCount('')\n  0\n  >>> getVowelsCount('abcdef')\n  1\n  >>> getVowelsCount('aaBAA')\n  1\n  >>> getVowelsCount('zbcd')\n  1\n  >>> getVowelsCount('abcdef\\nghijklm')\n  2\n  >>> getVowelsCount('abcdef\\nghijklm\\naaaaa')\n  2\n  */\nconst getVowelsCount =(text) => {\n  return text.split(\"\")\n .map((s, index) => {\n    if(![ \"a\", \"e\", \"i\", \"o\", \"u\" ].includes(s.toLowerCase()))\n      return 1;\n    else\n      return 0;\n  })\n .reduce((count, index) => {\n    return count + index\n  }, 0)\n}\n\n/*\n  getConsonantsCount is a function that takes string and returns number of consonants.\n  >>> getConsonantsCount('')\n  0\n  >>> getConsonantsCount('abcdef')\n  2\n  >>> getConsonantsCount('aaBAA')\n  0\n  >>> getConsonantsCount('zbcd')\n  1\n  >>> getConsonantsCount('abcdef\\nghijklm')\n  3\n  >>> getConsonantsCount('abcdef\\nghijklm\\naaaaa')\n  3\n  */\nconst getConsonantsCount =(text) => {\n  return text.split(\"\")\n .map((s, index) => {\n    if(![ \"a\", \"e\", \"i\", \"o\", \"u\" ].includes(s.toLowerCase()))\n      return 0;\n    else\n      return 1;\n  })\n .reduce((count, index) => {\n    return count + index\n  }, 0)\n}\n\n/*\n  main is the main function.\n  >>> main('')\n  ''\n  >>> main('abcdef')\n  'bcdf'\n  >>> main('aaBAA')\n  'B'\n  >>> main('zbcd')\n  'ZBCD'\n  >>> main('abcdef\\nghijklm')\n  'abcdf\\nghjklm'\n  >>> main('abcdef\\nghijklm\\naaaaa')\n  'abcdf\\nghjklm\\nbbbbb'\n  */\n"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(n) => {\n  return [ ... Array(n).keys(), n ].join(' ')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(n) => {\n  return [... Array(n).keys(), n ].join(' ')\n \n}\n\n// # Tasks\n// 1. What is the complexity of `stringSequence`?\n// 2. What is the time complexity of `stringSequence`?\n// 3. What is the space complexity of `stringSequence`?\n// 4. What is the space complexity of `stringSequence`?\n// 5. What is the space complexity of `stringSequence`?\n// 6. What is the space complexity of `stringSequence`?\n// 7. What is the space complexity of `stringSequence`?\n// 8. What is the space complexity of `stringSequence`?\n// 9. What is the space complexity of `stringSequence`?\n// 10. What is the space complexity of `stringSequence`?\n// 11. What is the space complexity of `stringSequence`?\n// 12. What is the space complexity of `stringSequence`?\n// 13. What is the space complexity of `stringSequence`?\n// 14. What is the space complexity of `stringSequence`?\n// 15. What is the space complexity of `stringSequence`?\n// 16. What is the space complexity of `stringSequence`?\n// 17. What is the space complexity of `stringSequence`?\n// 18. What is the space complexity of `stringSequence`?\n// 19. What is the space complexity of `stringSequence`?\n// 20. What is the space complexity of `stringSequence`?\n// 21. What is the space complexity of `stringSequence`?\n// 22. What is the space complexity of `stringSequence`?\n// 23. What is the space complexity of `stringSequence`?\n// 24. What is the space complexity of `stringSequence`?\n// 25. What is the space complexity of `stringSequence`?\n// 26. What is the space complexity of `stringSequence`?\n// 27. What is the space complexity of `stringSequence`?\n// 28. What is the space complexity of `stringSequence`?\n// 29. What is the space complexity of `stringSequence`?\n// 30. What is the space complexity of `stringSequence`?\n// 31. What is the space complexity of `stringSequence`?\n// 32. What is the space complexity of `stringSequence`?\n// 33. What is the space complexity of `stringSequence`?\n// 34. What is the space complexity of `stringSequence`?\n// 35. What is the space complexity of `stringSequence`?\n// 36. What is the space complexity of `stringSequence`?\n// 37. What is the space complexity of `stringSequence`?\n// 38. What is the space complexity of `stringSequence`?\n// 39. What is the space complexity of `stringSequence`?\n// 40. What is the space complexity of `stringSequence`?\n// 41. What is the space complexity of `stringSequence`?\n// 42. What is the space complexity of `stringSequence`?\n// 43. What is the space complexity of `stringSequence`?\n// 44. What is the space complexity of `stringSequence`?\n// 45. What is the space complexity of `stringSequence`?\n// 46. What is the space complexity of `stringSequence`?\n// 47. What is the space complexity of `stringSequence`?\n// 48. What is the space complexity of `stringSequence`?\n// 49. What is the space complexity of `stringSequence`?\n// 50. What is the space complexity of `stringSequence`?\n// 51. What is the space complexity of `stringSequence`?\n// 52. What is the space complexity of `stringSequence`?\n// 53. What is the space complexity of `stringSequence`?\n// 54. What is the space complexity of `stringSequence`?\n// 55. What is the space complexity of `stringSequence`?\n// 56. What is the space complexity of `stringSequence`?\n// 57. What is the space complexity of `stringSequence`?\n// 58. What is the space complexity of `stringSequence`?\n// 59. What is the space complexity of `stringSequence`?\n// 60. What is the space complexity of `stringSequence`?\n// 61. What is the space complexity of `stringSequence`?\n// 62. What is the space complexity of `stringSequence`?\n// 63. What is the space complexity of `stringSequence`?\n// 64. What is the space complexity of `stringSequence`?\n// 65. What is the space complexity of `stringSequence`?\n// 66. What is the space complexity of `stringSequence`?\n// 67. What is the space complexity of `stringSequence`?\n// 68. What is the space complexity of `stringSequence`?\n// 69. What is the space complexity of `stringSequence`?\n// 70. What is the space complexity of `stringSequence`?\n// 71. What is the space complexity of `stringSequence`?\n// 72. What is the space complexity of `stringSequence`?\n// 73. What is the space complexity of `stringSequence`?\n// 74. What is the space complexity of `stringSequence`?\n// 75. What is the space complexity of `stringSequence`?\n// 76. What is the space complexity of `stringSequence`?\n// 77. What is the space complexity of `stringSequence`?\n// 78. What is the space complexity of `stringSequence`?\n// 79. What is the space complexity of `stringSequence`?\n// 80. What is the space complexity of `stringSequence`?\n// 81. What is the space complexity of `stringSequence`?\n// 82. What is the space complexity of `stringSequence`?\n// 83. What is the space complexity of `stringSequence`?\n// 84. What is the space complexity of `stringSequence`?\n// 85. What is the space complexity of `stringSequence`?\n// 86. What is the space complexity of `stringSequence`?\n// 87. What is the space complexity of `stringSequence`?\n// 88. What is the space complexity of `stringSequence`?\n// 89. What is the space complexity of `stringSequence`?\n// 90. What is the space complexity of `stringSequence`?\n// 91."}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, b) => {\n  \n  for (; b != 0;) {\n     {\n      let temp = a;\n      a = b;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      b = temp % b;\n      }\n    }\n  return a;\n  }\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n     \n      b = temp % b;\n      \n    }\n  }\n  \n  return a;\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(12, 3)\n  6\n  >>> leastCommonMultiple(3, 10)\n  30\n  */\nconst leastCommonMultiple = (a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n      \n      b = temp % b;\n      \n    }\n  }\n  \n  return a;\n}\n\n/* Return the greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor2 =(a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n      \n      b = temp % b;\n      \n    }\n  }\n  \n  return a;\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(12, 3)\n  6\n  >>> leastCommonMultiple(3, 10)\n  30\n  */\nconst leastCommonMultiple2 = (a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n      \n      b = temp % b;\n      \n    }\n  }\n  \n  return a;\n}\n\n/* Return the greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor3 =(a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n      \n      b = temp % b;\n      \n    }\n  }\n  \n  return a;\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(12, 3)\n  6\n  >>> leastCommonMultiple(3, 10)\n  30\n  */\nconst leastCommonMultiple3 = (a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n      \n      b = temp % b;\n      \n    }\n  }\n  \n  return a;\n}\n\n/* Return the greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor4 =(a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n      \n      b = temp % b;\n      \n    }\n  }\n  \n  return a;\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(12, 3)\n  6\n  >>> leastCommonMultiple(3, 10)\n  30\n  */\nconst leastCommonMultiple4 = (a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n      \n      b = temp % b;\n      \n    }\n  }\n  \n  return a;\n}\n\n/* Return the greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor5 =(a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n      \n      b = temp % b;\n      \n    }\n  }\n  \n  return a;\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(12, 3)\n  6\n  >>> leastCommonMultiple(3, 10)\n  30\n  */\nconst leastCommonMultiple5 = (a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n      \n      b = temp % b;\n      \n    }\n  }\n  \n  return a;\n}\n\n/* Return the greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor6 =(a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n      \n      b = temp % b;\n      \n    }\n  }\n  \n  return a;\n}\n\n/* Return the least common multiple of two integers a and b\n  >>> leastCommonMultiple(12, 3)\n  6\n  >>> leastCommonMultiple(3, 10)\n  30\n  */\nconst leastCommonMultiple6 = (a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n      \n      b = temp % b;\n      \n    }\n  }\n  \n  return a;\n}\n\n/* Return the greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor7 =(a, b) => {\n  \n  for (; b!= 0;) {\n     {\n      let temp = a;\n      a = b;\n      \n      b = temp % b;\n      \n    }\n"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  let i = 0;\n  while (i < grid.length) {\n     {\n      let m = 0\n      for (let j = 0; j < grid [ i ].length; j++) {\n        if (grid [ i ] [ j ] == 1) {\n          m++}\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      while (m > 0) {\n        m-=capacity;\n        p++;\n        }\n      }\n    i++;}\n  return p\n  }\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  let i = 0;\n  while (i < grid.length) {\n     {\n      let m = 0\n      for (let j = 0; j < grid [ i ].length; j++) {\n        if (grid [ i ] [ j ] == 1) {\n          m++}\n        }\n     \n      p = p + m;\n      if (p >= capacity) {\n        return p\n      }\n    }\n    i++\n  }\n}\n\nlet test = [\n  [\n    [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], \n    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], \n    [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  ],\n  [\n    [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],\n    [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],\n    [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]],\n    [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let len = string.length\n  if (len == 1 || len == 0) {\n    return false}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (len % i == 0) {\n        i++; return false}\n      }\n    i++;}\n  return true\n  }\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let len = string.length\n  if (len == 1 || len == 0) {\n    return false}\n  let i = 2;\n  while (i * i <= len) {\n     {\n     \n      if (string[0] % i === 0 || string[1] % i === 0) {\n        return false\n      }\n      else {\n        i++;\n      }\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 0) {\n        t+=lst [ i ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    i+=2;}\n  return t\n  }\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] % 2 == 0) {\n        t+=lst [ i ]\n       \n      }\n    }\n    i+=1;\n  }\n  return t;\n}\n\nexport default add;<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = [ ]\n  let i = a;\n  while (i <= b) {\n     {\n      if (i == 2 || i == 4 || i == 6 || i == 8) {\n        y.push(i)}\n      }\n    i++;}\n  return y\n  }\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n  let evens = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      evens.push(i);\n    }\n  }\n\n  return evens;\n}\n\nconsole.log(generateIntegers(2, 8));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p [ ind ].toString(2)\n      let f1 = 0\n      let u = 0;\n      while (u < w1.length) {\n         {\n          if (w1 [ u ] == '1') {\n            f1++}\n          }\n        u++;}\n      let w2 = p [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (f2 < f1 ||(f1 == f2 && p [ k ] < p [ ind ])) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = p [ j ]\n      p [ j ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  return p\n  }\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p [ ind ].toString(2)\n      let f1 = 0\n      let u = 0;\n      while (u < w1.length) {\n         {\n          if (w1 [ u ] == '1') {\n            f1++}\n          }\n        u++;}\n      let w2 = p [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n      }\n      if (f1 < f2) {\n        p [ ind ] = p [ k];\n        ind = k;}\n    }\n  }\n  return p;\n}\n\n/*\n  In this Kata, you have to find the difference between two numbers in an array\n  based on the sum of the two numbers.\n\n  It must be implemented like this:\n  >>> subtractArray([5, 2, 1, 3, 5]) [3, 2, 1, 3, 2]\n  >>> subtractArray([4, 4, 4, 4]) [0, 0, 0, 0]\n  >>> subtractArray([3, 5, 1, 7, 4]) [2, 1, 1, 2]\n  */\nconst subtractArray = (arr) => {\n  let p = arr\n  let diff = 0\n  for (let i = 0; i < p.length; i++) {\n    diff += p[i]\n  }\n  let diffArr = []\n  for (let i = 0; i < p.length; i++) {\n    diffArr.push(diff - p[i])\n  }\n  return diffArr\n}\n\n/*\n  In this Kata, you have to find the product of the numbers in an array.\n\n  It must be implemented like this:\n  >>> productArray([3, 1, 4, 2, 5]) [3, 4, 5, 6, 10]\n  >>> productArray([1, 2, 3, 4, 5]) [1, 2, 3, 4, 5]\n  >>> productArray([1, 2, 3, 4, 5, 6, 7, 8, 9]) [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst productArray = (arr) => {\n  let p = arr\n  let prod = 1\n  for (let i = 0; i < p.length; i++) {\n    prod *= p[i]\n  }\n  return prod\n}\n\n/*\n  In this Kata, you have to find the maximum of the numbers in an array.\n\n  It must be implemented like this:\n  >>> maximumArray([3, 1, 4, 2, 5]) 5\n  >>> maximumArray([1, 2, 3, 4, 5]) 5\n  >>> maximumArray([1, 2, 3, 4, 5, 6, 7, 8, 9]) 9\n  */\nconst maximumArray = (arr) => {\n  let p = arr\n  let max = p[0]\n  for (let i = 0; i < p.length; i++) {\n    if (p[i] > max) {\n      max = p[i]\n    }\n  }\n  return max\n}\n\n/*\n  In this Kata, you have to find the minimum of the numbers in an array.\n\n  It must be implemented like this:\n  >>> minimumArray([3, 1, 4, 2, 5]) 1\n  >>> minimumArray([1, 2, 3, 4, 5]) 1\n  >>> minimumArray([1, 2, 3, 4, 5, 6, 7, 8, 9]) 1\n  */\nconst minimumArray = (arr) => {\n  let p = arr\n  let min = p[0]\n  for (let i = 0; i < p.length; i++) {\n    if (p[i] < min) {\n      min = p[i]\n    }\n  }\n  return min\n}\n\n/*\n  In this Kata, you have to find the largest set of numbers that sums to a number\n  in an array.\n\n  It must be implemented like this:\n  >>> sumToArray([2, 3, 5, 6, 7]) [2, 3, 5, 6, 7]\n  >>> sumToArray([2, 3, 5, 6, 7]) [2, 3, 5, 6]\n  >>> sumToArray([2, 3, 5, 6, 7, 8, 9, 10]) [2, 3, 5, 6, 7, 8, 9, 10]\n  */\nconst sumToArray = (arr) => {\n  let p = arr\n  let diff = 0\n  let set = []\n  for (let i = 0; i < p.length; i++) {\n    let i1 = p[i]\n    diff += i1\n    while (diff - i1 >= 0) {\n      set.push(diff - i1)\n      diff -= i1\n    }\n  }\n  return set\n}\n\n/*\n  In this Kata, you have to find the largest set of numbers that are all greater\n  than a number in an array.\n\n  It must be implemented like this:\n  >>> greaterThanArray([2, 3, 5, 6, 7]) [2, 3, 5, 6, 7]\n  >>> greaterThanArray([2, 3, 5, 6, 7]) [3, 5, 6, 7]\n  >>> greaterThanArray([2, 3, 5, 6, 7, 8, 9, 10]) [2, 3, 5, 6, 7, 8, 9, 10]\n  */\nconst greaterThanArray = (arr) => {\n"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const i of lst)\n      frq [ i ]+=1;\n      var ans = - 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let i = 1;\n      while (i < frq.length) {\n            if (frq [ i ] >= i)\n            ans = i;\n            i++;}\n      return ans;\n      }\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const i of lst)\n      frq [ i ]+=1;\n      var ans = - 1;\n     \n      for (const i of frq)\n      {\n      if(i > 0 && i > ans)\n      ans = i;\n      }\n      return ans;\n    };\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  let i = 0;\n  while (i < num.length) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  if (primes.includes(num [ i ]))\n  total++;\n  return total;\n  }\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  let i = 0;\n  while (i < num.length) {\n   \n    if (primes.indexOf(num.charCodeAt(i))!== -1) {\n      total++;\n    }\n    i++;\n  }\n  return total;\n};\n\n/*\n  Solution:\n  - Find the prime numbers in the list and count how many of them are prime\n    in the given hexadecimal number.\n  - Return the sum of the two counts.\n*/\nconst hexKey = (num) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17],\n    total = 0;\n  for (var i = 0; i < num.length; i++) {\n    if (primes.indexOf(num.charCodeAt(i))!== -1) {\n      total++;\n    }\n  }\n  return total;\n};\n\n/*\n  Solution:\n  - Create a new array and copy all the digits in the input to the array\n    and then convert the input to a string.\n  - Loop through the array and add the number of digits that are prime\n    (i.e. the number of 1's) to the sum.\n*/\nconst hexKey = (num) => {\n  var primes = [2, 3, 5, 7, 11, 13, 17],\n    total = 0;\n  var numStr = num.toString();\n  for (var i = 0; i < numStr.length; i++) {\n    if (primes.indexOf(numStr.charCodeAt(i))!== -1) {\n      total++;\n    }\n  }\n  return total;\n};\n\nconsole.log(hexKey('123456789ABCDEF0'));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n \n};\n\nconst binaryToDecimal =(binary) => {\n  let binaryStr = binary.slice(2, binary.length-2);\n  let decimal = parseInt(binaryStr, 2);\n  return decimal;\n}\n\nconsole.log(decimalToBinary(32));\nconsole.log(binaryToDecimal(decimalToBinary(32)));\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] > 0 && lst [ i ] < a) {\n        a = lst [ i ]}\n      if (lst [ i ] < 0 && lst [ i ] > b) {\n        b = lst [ i ]}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i++;}\n  if (a == Infinity) {\n    a = null}\n  if (b == - Infinity) {\n    b = null}\n  return(b, a)\n  }\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  let i = 0;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] > 0 && lst [ i ] < a) {\n        a = lst [ i ]}\n      if (lst [ i ] < 0 && lst [ i ] > b) {\n        b = lst [ i ]}\n     \n      }\n     \n    i++;\n  }\n  if (a == Infinity) {\n    return (null, null)}\n  else if (b == - Infinity) {\n    return (null, a)}\n  else {\n    return (a, b)}\n}\n\nconsole.log(\"largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == \" + largestSmallestIntegers([2, 4, 1, 3, 5, 7]))\nconsole.log(\"largestSmallestIntegers([]) == \" + largestSmallestIntegers([]))\nconsole.log(\"largestSmallestIntegers([0]) == \" + largestSmallestIntegers([0]))\nconsole.log(\"largestSmallestIntegers([-2, -4, -1, -3, -5, -7]) == \" + largestSmallestIntegers([-2, -4, -1, -3, -5, -7]))<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(n) => {\n  if (n == 0 || n == 1)\n  return 0;\n  if (n == 2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(n) => {\n  if (n == 0 || n == 1)\n  return 0;\n  if (n == 2)\n \n  return 1;\n  \n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n\nfibfib(20);\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, index) =>(index % 3 == 0 ? three [ index / 3 ] : item));\n  }\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n  return l.filter((item, index) => index % 3!= 0).concat(three);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value+=n;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    prod_value *= n;\n    }\n  return [ sum_value, prod_value ];\n  }\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value+=n;\n   \n    prod_value*=n;\n  }\n  return (sum_value, prod_value);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = 1\n    let j = 0;\n    while (j < c.length) {\n       {\n        if (s [ i ] == c [ j ]) {\n          y = 0\n          }\n        }\n      j++;}\n    if (y == 1) {\n      t+=s [ i ]\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t [ i ] != t [ t.length - i - 1 ]) {\n      z = 0\n      }\n    }\n  if (z == 0) {\n    return(z, false)\n    }\n  return(z, true)\n  }\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let i = 0; i < s.length; i++) {\n    let y = 1\n    let j = 0;\n    while (j < c.length) {\n       {\n        if (s [ i ] == c [ j ]) {\n          y = 0\n          }\n        }\n      j++;}\n    if (y == 1) {\n      t+=s [ i ]\n      }\n   \n  }\n  return [t, (t == s)];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(l) => {\n  for (let i = 0; i < l.length; i++)\n  let j = i + 1;\n  while (j < l.length) {\n    for (let k = j + 1; k < l.length; k++)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    j++;}\n  if (l [ i ] + l [ j ] + l [ k ] == 0)\n  return true;\n  return false;\n  }\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(l) => {\n  for (let i = 0; i < l.length; i++)\n  let j = i + 1;\n  while (j < l.length) {\n    for (let k = j + 1; k < l.length; k++)\n   \n      if (l[j] + l[k] == 0) {\n        return true;\n      }\n      j = k + 1;\n  }\n  return false;\n};\n\n/*\n  getPrimes returns a list of all the primes below a given limit\n  >>> getPrimes(100)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  >>> getPrimes(100)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  >>> getPrimes(100)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  >>> getPrimes(10)\n  []\n  */\nconst getPrimes = (limit) => {\n  let primeNumbers = [];\n  for (let i = 2; i <= limit; i++) {\n    if (triplesSumToZero(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\n/*\n  getPrimesSorted returns a sorted list of all the primes below a given limit\n  >>> getPrimesSorted(100)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  >>> getPrimesSorted(100)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  >>> getPrimesSorted(10)\n  []\n  */\nconst getPrimesSorted = (limit) => {\n  let primeNumbers = getPrimes(limit);\n  let sortedNumbers = primeNumbers.sort((a, b) => a - b);\n  return sortedNumbers;\n};\n\n/*\n  findPrimes returns the indices of all the primes in a given list\n  >>> findPrimes(getPrimes(100))\n  [0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97]\n  >>> findPrimes(getPrimes(100))\n  [0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97]\n  >>> findPrimes(getPrimes(10))\n  []\n  */\nconst findPrimes = (l) => {\n  let primeNumbers = l;\n  let result = [];\n  let index = 0;\n  while (index < primeNumbers.length) {\n    let start = index;\n    while (index < primeNumbers.length && primeNumbers[index] < primeNumbers[start]) {\n      start = index;\n    }\n    result.push(primeNumbers[start]);\n    index = start + 1;\n  }\n  return result;\n};\n\n/*\n  findPrimesSorted returns the indices of all the primes in a given list\n  >>> findPrimesSorted(getPrimes(100))\n  [0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97]\n  >>> findPrimesSorted(getPrimes(100))\n  [0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97]\n  >>> findPrimesSorted(getPrimes(10))\n  []\n  */\nconst findPrimesSorted = (l) => {\n  let primeNumbers = l;\n  let result = [];\n  let index = 0;\n  while (index < primeNumbers.length) {\n    let start = index;\n    while (index < primeNumbers.length && primeNumbers[index] < primeNumbers[start]) {\n      start = index;\n    }\n    result.push(primeNumbers[start]);\n    index = start + 1"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map [ x ]);\n  }\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n  let beat_list = music_string.split(\" \")\n  ;\n  beat_list = beat_list.map( (note) => {\n    return note_map[note]\n  })\n  ;\n  return beat_list\n}\n;\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  let i = arr.length - 1;\n  while (i > 0) {\n     {\n      if (arr [ i ] < arr [ i - 1 ]) {\n        i--; return i}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    i--;}\n  return - 1\n  }\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  let i = arr.length - 1;\n  while (i > 0) {\n     {\n      if (arr [ i ] < arr [ i - 1 ]) {\n        i--; return i}\n     \n     }\n  }\n  return -1\n}\n\n/* Given a string, return the largest index of a character which does not\n  occur before any other character. If no such index exists, return -1.\n\n  Examples:\n  canArrange(\"abcde\") = 2\n  canArrange(\"abcd\") = 1\n  canArrange(\"a\") = -1\n  */\nconst canArrange =(str) => {\n  const arr = str.split('');\n  if (arr.length == 0) {\n    return - 1}\n  let i = arr.length - 1;\n  while (i > 0) {\n     {\n      if (arr [ i ] < arr [ i - 1 ]) {\n        i--; return i}\n     \n     }\n  }\n  return -1\n}\n\n/* Given an array of strings, return a function which takes a string\n  and returns the largest index of a character which does not occur before\n  any other character. If no such index exists, return -1.\n\n  Examples:\n  canArrange(\"abcde\") = 2\n  canArrange(\"abcd\") = 1\n  canArrange(\"a\") = -1\n  */\nconst canArrange =(arr) => {\n  const arr = arr.slice();\n  arr.sort((a, b) => {\n    return a.length - b.length\n  });\n  let i = 0;\n  while (i < arr.length) {\n    if (arr [ i ] < arr [ i + 1 ]) {\n      return i\n    }\n    i++;\n  }\n  return -1\n}\n\nconst arr = ['a','b','c','d','e'];\nconst arr = ['a','b','c','d'];\nconst arr = ['a','b','c'];\nconst arr = ['a','b'];\nconst arr = ['a'];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr = [];\nconst arr"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = q.length - 1;\n  \n  for (; i < j;) {\n     {\n      if (q [ i ] != q [ j ])\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      return false;\n      i++;\n      j--;\n      }\n    }\n  return true;\n  }\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = q.length - 1;\n  \n  for (; i < j;) {\n     {\n      if (q [ i ]!= q [ j ])\n     \n     return false;\n      \n      i++, j--;\n    }\n  }\n  return true;\n}\n\n/*\n  Write a function that takes an integer and returns its reverse.\n  Example:\n  reverse(10) ➞ 20\n  */\nconst reverse = (n) => {\n  if (n == 0)\n  return 0;\n  return n % 2 == 0? n/2 : n + 1;\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt2 = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt3 = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt4 = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt5 = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt6 = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt7 = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt8 = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt9 = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt10 = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt11 = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt12 = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt13 = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt14 = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt15 = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt(100) ➞ 53\n  */\nconst getRandomInt16 = (N) => {\n  return Math.floor(Math.random() * N);\n}\n\n/*\n  Write a function that will return a random integer in the range [0, N)\n  Example:\n  getRandomInt("}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(s) => {\n  return encodeCyclic(encodeCyclic(s));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(s) => {\n  return encodeCyclic(encodeCyclic(s));\n \n}\n\nmodule.exports = { encodeCyclic, decodeCyclic }\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )).join(\"\");\n  }\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n  ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n)).join(\"\");\n}\n\n/*\n  takes as input string, and returns if it is valid or not\n  */\nconst isValid = (s) => {\n  return s.match(/^[a-zA-Z]*$/)? true : false;\n}\n\nconst validate = (s) => {\n  const valid = isValid(s);\n  if(!valid) {\n    throw new Error(`Invalid string: ${s}`);\n  }\n  return s;\n}\n\n/*\n  takes as input string, and returns if it is valid or not\n  */\nconst isValidReverse = (s) => {\n  return isValid(encodeShift(s));\n}\n\nconst validateReverse = (s) => {\n  const valid = isValidReverse(s);\n  if(!valid) {\n    throw new Error(`Invalid string: ${s}`);\n  }\n  return decodeShift(s);\n}\n\nmodule.exports = {\n  encodeShift,\n  decodeShift,\n  isValid,\n  validate,\n  isValidReverse,\n  validateReverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let len = 0\n  if (hi > lo) {\n    len = hi - lo}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (len == 1 || len == 0) {\n    return 'NO'}\n  let i = 2;\n  while (i * i <= len) {\n     {\n      if (len % i == 0) {\n        i++; return 'NO'}\n      }\n    i++;}\n  return 'YES'}\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let len = 0\n  if (hi > lo) {\n    len = hi - lo}\n \n  if (len > 2) {\n    return \"NO\"\n  }\n  return \"YES\"\n}\n\nconsole.log(intersection([1, 2], [2, 3]))\nconsole.log(intersection([-1, 1], [0, 4]))\nconsole.log(intersection([-3, -1], [-5, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(n) => {\n  return n *(n + 1) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(n) => {\n  return n *(n + 1) / 2;\n \n}\n\n/*\n  sumEvenNumbers is a function that sums the even numbers.\n  >>> sumEvenNumbers(0)\n  0\n  >>> sumEvenNumbers(10)\n  30\n  >>> sumEvenNumbers(15)\n  45\n  >>> sumEvenNumbers(25)\n  60\n  >>> sumEvenNumbers(30)\n  30\n  >>> sumEvenNumbers(100)\n  3050\n  >>> sumEvenNumbers(5)\n  0\n  >>> sumEvenNumbers(15)\n  30\n  >>> sumEvenNumbers(10)\n  0\n  >>> sumEvenNumbers(1)\n  0\n  */\nconst sumEvenNumbers =(n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 1) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n\n/*\n  sumOddNumbers is a function that sums the odd numbers.\n  >>> sumOddNumbers(0)\n  0\n  >>> sumOddNumbers(10)\n  15\n  >>> sumOddNumbers(15)\n  15\n  >>> sumOddNumbers(25)\n  45\n  >>> sumOddNumbers(30)\n  45\n  >>> sumOddNumbers(100)\n  3050\n  >>> sumOddNumbers(5)\n  0\n  >>> sumOddNumbers(15)\n  15\n  >>> sumOddNumbers(10)\n  15\n  >>> sumOddNumbers(1)\n  1\n  */\nconst sumOddNumbers =(n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 1) {\n    if (i % 2!== 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n\n/*\n  sumMultiples is a function that sums all multiples of 3.\n  >>> sumMultiples(0)\n  0\n  >>> sumMultiples(10)\n  30\n  >>> sumMultiples(15)\n  30\n  >>> sumMultiples(25)\n  45\n  >>> sumMultiples(30)\n  45\n  >>> sumMultiples(100)\n  3050\n  >>> sumMultiples(5)\n  0\n  >>> sumMultiples(15)\n  30\n  >>> sumMultiples(10)\n  30\n  >>> sumMultiples(1)\n  0\n  */\nconst sumMultiples =(n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 1) {\n    if (i % 3 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n\n/*\n  sumDivisors is a function that sums all divisors of an integer.\n  >>> sumDivisors(0)\n  0\n  >>> sumDivisors(10)\n  15\n  >>> sumDivisors(15)\n  15\n  >>> sumDivisors(25)\n  45\n  >>> sumDivisors(30)\n  45\n  >>> sumDivisors(100)\n  3050\n  >>> sumDivisors(5)\n  0\n  >>> sumDivisors(15)\n  15\n  >>> sumDivisors(10)\n  15\n  >>> sumDivisors(1)\n  0\n  */\nconst sumDivisors =(n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 1) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n\n/*\n  sumDivisorsToN is a function that sums all divisors of an integer up to n.\n  >>> sumDivisorsToN(0)\n  0\n  >>> sumDivisorsToN(10)\n  15\n  >>> sumDivisorsToN(15)\n  15\n  >>> sumDivisorsToN(25)\n  45\n  >>> sumDivisorsToN(30)\n  45\n  >>> sumDivisorsToN(100)\n  3050\n  >>> sumDivisorsToN(5)\n  0\n  >>> sumDivisorsToN(15)\n  15\n  >>> sumDivisorsToN(10)\n  15\n  >>> sumDivisorsToN(1)\n  0\n  */\nconst sumDivisorsToN =(n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 1) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n\n/*\n  sumPrimes is a function that sums all prime numbers up to n.\n  >>> sumPrimes(0)\n  0\n  >>> sumPrimes(10)\n  15\n  >>> sumPrimes(15)\n  15\n  >>> sumPrimes(25)\n  45\n  >>> sumPrimes(30)\n  45\n  >>> sumPrimes(100)\n  3050\n  >>> sumPrimes(5)\n  0\n  >>> sumPrimes(15)\n  15\n  >>> sumPrimes(10)\n  15\n  >>> sumPrimes(1)\n  0\n  */\nconst sumPrimes =(n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i += 1) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n\n/*\n  isPrime is a function that checks if an integer is prime.\n  >>> isPrime(0)\n  false\n  >>> isPrime(10)\n  false\n  >>> isPrime(15)\n  true\n  >>> isPrime(25)\n  true\n  >>> isPrime(30)\n  true\n  >>> isPrime(100)\n  true\n  >>> isPrime(5)\n  false\n  >>> isPrime(15)\n  true\n  >>> isPrime"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(n) => {\n  if (n < 2)\n  return false;\n  let k = 2;\n  while (k < n - 1) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    k++;}\n  if (n % k == 0)\n  return false;\n  return true;\n  }\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(n) => {\n  if (n < 2)\n  return false;\n  let k = 2;\n  while (k < n - 1) {\n   \n   if (n % k == 0)\n   return false;\n   k += 1;\n  }\n  return true;\n}\n\n/**\n  * @param {number} n - The number whose factorial is being computed.\n  * @return {number} - The n!\n  * Return the factorial of a given number n.\n  * @example\n  *  Factorial(7)\n  *  returns: 105\n  *  @example\n  *  Factorial(2)\n  *  returns: 2\n  */\nconst Factorial = (n) => {\n  let factorial = 1;\n  while (n > 1) {\n    factorial = factorial * n;\n    n -= 1;\n  }\n  return factorial;\n}\n\n/**\n  * @param {number} n - The number whose number of factorials is being computed.\n  * @return {number} - The number of factorials for a given number n.\n  * Return the number of factorials for a given number n.\n  * @example\n  *  Factorial(7)\n  *  returns: 105\n  *  @example\n  *  Factorial(2)\n  *  returns: 2\n  */\nconst nFactorial = (n) => {\n  let nFactorial = 1;\n  while (n > 1) {\n    nFactorial = nFactorial * n;\n    n -= 1;\n  }\n  return nFactorial;\n}\n\n/**\n  * @param {number} n - The number whose harmonic sum is being computed.\n  * @return {number} - The harmonic sum of a given number n.\n  * Return the harmonic sum of a given number n.\n  * @example\n  *  HarmonicSum(7)\n  *  returns: 21\n  *  @example\n  *  HarmonicSum(2)\n  *  returns: 4\n  */\nconst HarmonicSum = (n) => {\n  let sum = 1;\n  while (n > 1) {\n    sum = sum + n;\n    n -= 1;\n  }\n  return sum;\n}\n\n/**\n  * @param {number} n - The number whose harmonic product is being computed.\n  * @return {number} - The harmonic product of a given number n.\n  * Return the harmonic product of a given number n.\n  * @example\n  *  HarmonicProduct(7)\n  *  returns: 21\n  *  @example\n  *  HarmonicProduct(2)\n  *  returns: 4\n  */\nconst HarmonicProduct = (n) => {\n  let product = 1;\n  while (n > 1) {\n    product = product * n;\n    n -= 1;\n  }\n  return product;\n}\n\n/**\n  * @param {number} n - The number whose hyperbolic cosine is being computed.\n  * @return {number} - The hyperbolic cosine of a given number n.\n  * Return the hyperbolic cosine of a given number n.\n  * @example\n  *  HyperbolicCosine(7)\n  *  returns: 1.5499\n  *  @example\n  *  HyperbolicCosine(2)\n  *  returns: 0.8726\n  */\nconst HyperbolicCosine = (n) => {\n  let cosine = Math.pow(Math.E, n);\n  return cosine;\n}\n\n/**\n  * @param {number} n - The number whose hyperbolic sine is being computed.\n  * @return {number} - The hyperbolic sine of a given number n.\n  * Return the hyperbolic sine of a given number n.\n  * @example\n  *  HyperbolicSine(7)\n  *  returns: 2.0435\n  *  @example\n  *  HyperbolicSine(2)\n  *  returns: 1.0161\n  */\nconst HyperbolicSine = (n) => {\n  let sine = Math.pow(Math.E, -n);\n  return sine;\n}\n\n/**\n  * @param {number} n - The number whose hyperbolic tangent is being computed.\n  * @return {number} - The hyperbolic tangent of a given number n.\n  * Return the hyperbolic tangent of a given number n.\n  * @example\n  *  HyperbolicTangent(7)\n  *  returns: 0.6588\n  *  @example\n  *  HyperbolicTangent(2)\n  *  returns: 0.0952\n  */\nconst HyperbolicTangent = (n) => {\n  let tangent = Math.pow(Math.E, n);\n  return tangent;\n}\n\n/**\n  * @param {number} n - The number whose hyperbolic cotangent is being computed.\n  * @return {number} - The hyperbolic cotangent of a given number n.\n  * Return the hyperbolic cotangent of a given number n.\n  * @example\n  *  HyperbolicCotangent(7)\n  *  returns: -0.7995\n  *  @example\n  *  HyperbolicCotangent(2)\n  *  returns: -0.0948\n  */\nconst HyperbolicCotangent = (n) => {\n  let cotangent = Math.pow(Math.E, -n);\n  return cotangent;\n}\n\n/**\n  * @param {number} n - The number whose hyperbolic cosecant is being computed.\n  * @return {number} - The hyperbolic cosecant of a given number n.\n  * Return the hyperbolic cosecant of a given number n.\n  * @example\n  *  "}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  let i = 0;\n  while (i < t.length) {\n     {\n      let l = 0\n      for (let j = 0; j < t [ i ].length; j++) {\n        if (t [ i ] [ j ] != 'a' && t [ i ] [ j ] != 'e' && t [ i ] [ j ] != 'i' && t [ i ] [ j ] != 'o' && t [ i ] [ j ] != 'u' && t [ i ] [ j ] != 'A' &&\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        t [ i ] [ j ] != 'U' && t [ i ] [ j ] != 'O' && t [ i ] [ j ] != 'I' && t [ i ] [ j ] != 'E') {\n          l++\n          }\n        }\n      if (l == n) {\n        k.push(t [ i ])}\n      }\n    i++;}\n  return k\n  }\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  let i = 0;\n  while (i < t.length) {\n     {\n      let l = 0\n      for (let j = 0; j < t [ i ].length; j++) {\n        if (t [ i ] [ j ]!= 'a' && t [ i ] [ j ]!= 'e' && t [ i ] [ j ]!= 'i' && t [ i ] [ j ]!= 'o' && t [ i ] [ j ]!= 'u' && t [ i ] [ j ]!= 'A' &&\n       \n        t [ i ] [ j ]!= 'E' && t [ i ] [ j ]!= 'I' && t [ i ] [ j ]!= 'O' && t [ i ] [ j ]!= 'U') {\n          l++;\n        }\n      }\n      if (l == n) {\n        k.push(t [ i ]);\n      }\n    }\n    i++;\n  }\n  return k;\n}\n\n/*\n  Given two strings s and t, write a function to determine if t is an anagram of s.\n  Two strings are anagram of each other if the characters in t can be rearranged to form s.\n  Example:\n  isAnagram(\"great\", \"rgeat\") ==> true\n  isAnagram(\"great\", \"rgeat\") ==> false\n  isAnagram(\"abcd\", \"dcab\") ==> true\n  isAnagram(\"abcd\", \"dcab\") ==> false\n  isAnagram(\"abcd\", \"cdab\") ==> true\n  isAnagram(\"abcd\", \"cdab\") ==> false\n  isAnagram(\"abcd\", \"cdab\") ==> true\n*/\nconst isAnagram =(s, t) => {\n  if (s.length!= t.length) {\n    return false;\n  }\n  let hash = { }\n  for (let i = 0; i < t.length; i++) {\n    if (hash[t [ i ]] === undefined) {\n      hash[t [ i ]] = 1;\n    } else {\n      return false;\n    }\n  }\n  return true\n}\n\n/*\n  Given a string s and a dictionary of words dict, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\n  Example:\n  canBeSegmented(\"cats and dogs\") ==> True\n  canBeSegmented(\"cats and dogs\") ==> False\n  canBeSegmented(\"cats and dogs\") ==> True\n  canBeSegmented(\"cat dog\") ==> True\n  canBeSegmented(\"cat dog\") ==> True\n  canBeSegmented(\"cat dog\") ==> True\n  canBeSegmented(\"cat dog\") ==> True\n  canBeSegmented(\"cat dog\") ==> True\n*/\nconst canBeSegmented =(s) => {\n  let result = false;\n  let word ='';\n  let tmp ='';\n  for (let i = 0; i < s.length; i++) {\n    for (let j = i + 1; j < s.length; j++) {\n      if (s [ i ] === s [ j ]) {\n        word += s [ i ]\n      } else {\n        break;\n      }\n    }\n    if (word.length > 0) {\n      for (let k = 0; k < word.length; k++) {\n        tmp += word [ k ]\n      }\n      if (isAnagram(tmp, dict)) {\n        result = true;\n        break;\n      }\n    }\n    word ='';\n  }\n  return result\n}\n\nconst dict = [ \"cat\", \"dog\", \"hat\", \"bat\", \"rat\" ]\nconst s = \"cat dog hat bat rat\"\nconsole.log(canBeSegmented(s))<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var lis = [ ];\n  for (const i of s.split(\" \"))\n  if ( !isNaN(i))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n  }\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var lis = [ ];\n  for (const i of s.split(\" \"))\n  if (!isNaN(i))\n \n  lis.push(i);\n  var a = lis.length;\n  var b = lis.length;\n  var c = lis.length;\n  var d = lis.length;\n  var e = lis.length;\n  var f = lis.length;\n  var g = lis.length;\n  var h = lis.length;\n  var i = lis.length;\n  var j = lis.length;\n  var k = lis.length;\n  var l = lis.length;\n  var m = lis.length;\n  var n = lis.length;\n  var o = lis.length;\n  var p = lis.length;\n  var q = lis.length;\n  var r = lis.length;\n  var s = lis.length;\n  var t = lis.length;\n  var u = lis.length;\n  var v = lis.length;\n  var w = lis.length;\n  var x = lis.length;\n  var y = lis.length;\n  var z = lis.length;\n  var aa = lis.length;\n  var bb = lis.length;\n  var cc = lis.length;\n  var dd = lis.length;\n  var ee = lis.length;\n  var ff = lis.length;\n  var gg = lis.length;\n  var hh = lis.length;\n  var ii = lis.length;\n  var jj = lis.length;\n  var kk = lis.length;\n  var ll = lis.length;\n  var mm = lis.length;\n  var nn = lis.length;\n  var oo = lis.length;\n  var pp = lis.length;\n  var qq = lis.length;\n  var rr = lis.length;\n  var ss = lis.length;\n  var tt = lis.length;\n  var uu = lis.length;\n  var vv = lis.length;\n  var ww = lis.length;\n  var xx = lis.length;\n  var yy = lis.length;\n  var zz = lis.length;\n  var aa = lis.length;\n  var bb = lis.length;\n  var cc = lis.length;\n  var dd = lis.length;\n  var ee = lis.length;\n  var ff = lis.length;\n  var gg = lis.length;\n  var hh = lis.length;\n  var ii = lis.length;\n  var jj = lis.length;\n  var kk = lis.length;\n  var ll = lis.length;\n  var mm = lis.length;\n  var nn = lis.length;\n  var oo = lis.length;\n  var pp = lis.length;\n  var qq = lis.length;\n  var rr = lis.length;\n  var ss = lis.length;\n  var tt = lis.length;\n  var uu = lis.length;\n  var vv = lis.length;\n  var ww = lis.length;\n  var xx = lis.length;\n  var yy = lis.length;\n  var zz = lis.length;\n  var aa = lis.length;\n  var bb = lis.length;\n  var cc = lis.length;\n  var dd = lis.length;\n  var ee = lis.length;\n  var ff = lis.length;\n  var gg = lis.length;\n  var hh = lis.length;\n  var ii = lis.length;\n  var jj = lis.length;\n  var kk = lis.length;\n  var ll = lis.length;\n  var mm = lis.length;\n  var nn = lis.length;\n  var oo = lis.length;\n  var pp = lis.length;\n  var qq = lis.length;\n  var rr = lis.length;\n  var ss = lis.length;\n  var tt = lis.length;\n  var uu = lis.length;\n  var vv = lis.length;\n  var ww = lis.length;\n  var xx = lis.length;\n  var yy = lis.length;\n  var zz = lis.length;\n  var aa = lis.length;\n  var bb = lis.length;\n  var cc = lis.length;\n  var dd = lis.length;\n  var ee = lis.length;\n  var ff = lis.length;\n  var gg = lis.length;\n  var hh = lis.length;\n  var ii = lis.length;\n  var jj = lis.length;\n  var kk = lis.length;\n  var ll = lis.length;\n  var mm = lis.length;\n  var nn = lis.length;\n  var oo = lis.length;\n  var pp = lis.length;\n  var qq = lis.length;\n  var rr = lis.length;\n  var ss = lis.length;\n  var tt"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (h < 0) {\n        y = - 1; h = - h;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      \n      for (; h >= 10;) {\n         {\n          m+=h % 10;\n          h =(h - h % 10) / 10;\n          }\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      m+=y * h\n      while (d >= 10) {\n        n+=d % 10;\n        d =(d - d % 10) / 10;\n        }\n      n+=u * d\n      if (m > n) {\n        let tmp = p [ k ]\n        p [ k ] = p [ k + 1 ]\n        p [ k + 1 ] = tmp\n        }\n      }\n    }\n  return p\n  }\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (h < 0) {\n        y = - 1; h = - h;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      \n      for (; h >= 10;) {\n         {\n          m+=h % 10;\n          h =(h - h % 10) / 10;\n          }\n        }\n     \n        for (; d >= 10;) {\n          {\n          n+=d % 10;\n          d =(d - d % 10) / 10;\n          }\n        }\n        if (m == n) {\n          if (k < j) {\n            if (y == 1) {\n              p[k + 1] = p [ k ] + 1\n            } else {\n              p[k + 1] = p [ k ] - 1\n            }\n          }\n        }\n      }\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(3, 6)\n  12\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(4, 5)\n  25\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(6, 5)\n  30\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(8, 7)\n  45\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 7)\n  54\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(10, 7)\n  60\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(12, 7)\n  72\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(15, 7)\n  81\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(20, 7)\n  90\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(30, 7)\n  108\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(45, 7)\n  135\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(90, 7)\n  180\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(120, 7)\n  225\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(150, 7)\n  270\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(180, 7)\n  315\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(300, 7)\n  450\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(300, 9)\n  564\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(300, 13)\n  811\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(300, 17)\n  1035\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(300, 19)\n  1278\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(300, 21)\n  1581\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(300, 25)\n  2026\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(300, 30)\n  2559\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(300, 60)\n  3681\n  */\nconst triangleArea =(a, h) => {\n  return a * h / 2.0;\n \n}\n\n/*\n  "}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    running_max = Math.max(running_max, n);\n    result.push(running_max);\n    }\n  return result;\n  }\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n   \n    if (running_max < n) {\n      running_max = n;\n    }\n    result.push(running_max);\n  }\n  return result;\n}\n\n//  [0, 1, 2, 3, 2, 3, 4, 2]\n//  [1, 2, 3, 3, 3, 4, 4, 4]\n//  [2, 3, 3, 3, 4, 4, 4, 4]\n//  [3, 3, 3, 4, 4, 4, 4, 4]\n//  [4, 4, 4, 4, 4, 4, 4, 4]\n\nconst rollingMax =(numbers) => {\n  const max_elements = [ ]\n  const max_element = numbers[0]\n  const max_index = 0\n\n  for (const number of numbers) {\n    if (max_element < number) {\n      max_element = number\n      max_index = numbers.indexOf(number)\n    }\n  }\n  return numbers.splice(max_index, numbers.length - max_index)\n}\n\n\n\n/* From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var running_max, result = [ ];\n  for (const n of numbers) {\n    if (running_max == undefined)\n    running_max = n;\n    else\n    if (running_max < n) {\n      running_max = n;\n    }\n    result.push(running_max);\n  }\n  return result;\n}\n\nconst rollingMax =(numbers) => {\n  const max_elements = [ ]\n  const max_element = numbers[0]\n  const max_index = 0\n\n  for (const number of numbers) {\n    if (max_element < number) {\n      max_element = number\n      max_index = numbers.indexOf(number)\n    }\n  }\n  return numbers.splice(max_index, numbers.length - max_index)\n}\n\n//  [0, 1, 2, 3, 2, 3, 4, 2]\n//  [1, 2, 3, 3, 3, 4, 4, 4]\n//  [2, 3, 3, 3, 4, 4, 4, 4]\n//  [3, 3, 3, 4, 4, 4, 4, 4]\n//  [4, 4, 4, 4, 4, 4, 4, 4]\n\nconst rollingMax =(numbers) => {\n  const max_elements = [ ]\n  const max_element = numbers[0]\n  const max_index = 0\n\n  for (const number of numbers) {\n    if (max_element < number) {\n      max_element = number\n      max_index = numbers.indexOf(number)\n    }\n  }\n  return numbers.splice(max_index, numbers.length - max_index)\n}\n\n\n//  [0, 1, 2, 3, 2, 3, 4, 2]\n//  [1, 2, 3, 3, 3, 4, 4, 4]\n//  [2, 3, 3, 3, 4, 4, 4, 4]\n//  [3, 3, 3, 4, 4, 4, 4, 4]\n//  [4, 4, 4, 4, 4, 4, 4, 4]\n\nconst rollingMax =(numbers) => {\n  const max_elements = [ ]\n  const max_element = numbers[0]\n  const max_index = 0\n\n  for (const number of numbers) {\n    if (max_element < number) {\n      max_element = number\n      max_index = numbers.indexOf(number)\n    }\n  }\n  return numbers.splice(max_index, numbers.length - max_index)\n}\n\n\n//  [0, 1, 2, 3, 2, 3, 4, 2]\n//  [1, 2, 3, 3, 3, 4, 4, 4]\n//  [2, 3, 3, 3, 4, 4, 4, 4]\n//  [3, 3, 3, 4, 4, 4, 4, 4]\n//  [4, 4, 4, 4, 4, 4, 4, 4]\n\nconst rollingMax =(numbers) => {\n  const max_elements = [ ]\n  const max_element = numbers[0]\n  const max_index = 0\n\n  for (const number of numbers) {\n    if (max_element < number) {\n      max_element = number\n      max_index = numbers.indexOf(number)\n    }\n  }\n  return numbers.splice(max_index, numbers.length - max_index)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    depth+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    depth-=1;\n    if (depth < 0)\n    return false;\n    }\n  return depth == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    depth+=1;\n    else\n   \n    if (b == \")\")\n    depth-=1;\n    if (depth < 0) return false;\n  }\n  return depth == 0;\n}\n\n/*\n  This function splits a string into several substrings.\n  It returns an array of strings that contains the substrings\n  of the input.\n\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\"abcde\")\n  [ 'abcde' ]\n  >>> splitIntoSubstrings(\""}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  let i = 0;\n  while (i < guess.length) {\n     {\n      game [ i ]-=guess [ i ]\n      if (game [ i ] < 0)\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      game [ i ] = - game [ i ];}\n    i++;}\n  return game\n  }\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  let i = 0;\n  while (i < guess.length) {\n     {\n      game [ i ]-=guess [ i ]\n      if (game [ i ] < 0)\n     \n        {\n          return [0,0,0,0,0,0]\n        }\n      if (game [ i ] > 0)\n        {\n          return [game [ i ],game [ i ],game [ i ],game [ i ],game [ i ],game [ i ]]\n        }\n    }\n    i++\n  }\n  return [0,0,0,0,0,0]\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var area = Math.pow(s *(s - a) *(s - b) *(s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n \n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n};\n\nconst triangleArea2 =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n  var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nconst triangleArea3 =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n  var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nconst triangleArea4 =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n  var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nconst triangleArea5 =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n  var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nconst triangleArea6 =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n  var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nconst triangleArea7 =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n  var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nconst triangleArea8 =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n  var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nconst triangleArea9 =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n  var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nconst triangleArea10 =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n  var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nconst triangleArea11 =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n  var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nconst triangleArea12 =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n  var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nconst triangleArea13 =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n  var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nconst triangleArea14 =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n  var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nconst triangleArea15 =(a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n  return - 1;\n  var s =(a + b + c) / 2;\n  var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area;\n};\n\nconst triangleArea16 =(a, b, c)"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(l) => {\n  let i = 0;\n  while (i < l.length) {\n    for (let j = i + 1; j < l.length; j++)\n    if (l [ i ] + l [ j ] == 0)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i++;}\n  return true;\n  return false;\n  }\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(l) => {\n  let i = 0;\n  while (i < l.length) {\n    for (let j = i + 1; j < l.length; j++)\n    if (l [ i ] + l [ j ] == 0)\n   \n      return true;\n    i++;\n  }\n  return false;\n};\n\n/*\n  pairsSumToZero returns true if the input contains any two distinct elements\n  that sum to zero, false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero2 =(l) => {\n  let i = 0;\n  while (i < l.length) {\n    for (let j = i + 1; j < l.length; j++)\n    if (l [ i ] + l [ j ] == 0)\n    \n      return true;\n    i++;\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(lst) => {\n  if (lst.length == 0) {\n    return true}\n  let dup = 1\n  let pre = lst [ 0 ]\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] < pre) {\n        i++; return false}\n      if (lst [ i ] == pre) {\n        dup+=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        if (dup == 3) {\n          i++; return false}\n        }\n      else {\n        pre = lst [ i ]\n        dup = 1\n        }\n      }\n    i++;}\n  return true\n  }\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(lst) => {\n  if (lst.length == 0) {\n    return true}\n  let dup = 1\n  let pre = lst [ 0 ]\n  let i = 1;\n  while (i < lst.length) {\n     {\n      if (lst [ i ] < pre) {\n        i++; return false}\n      if (lst [ i ] == pre) {\n        dup+=1;\n       \n      }\n      else {\n        pre = lst [ i ];\n      }\n    }\n  }\n  return true;\n};\n\nconst isSorted2 =(lst) => {\n  if (lst.length == 0) {\n    return true}\n  let i = 1;\n  while (i < lst.length) {\n    if (lst [ i - 1 ] >= lst [ i ]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = isSorted;<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(arr) => {\n  if (arr.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  let i = 0;\n  while (i < arr.length) {\n     {\n      s+=arr [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (arr [ i ] == 0) {\n        i++; return 0}\n      if (arr [ i ] < 0) {\n        n = - n; s-=2 * arr [ i ]}\n      }\n    i++;}\n  return s * n\n  }\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(arr) => {\n  if (arr.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  let i = 0;\n  while (i < arr.length) {\n     {\n      s+=arr [ i ]\n     \n     if (arr [ i ] == -1) {\n      n*=-1\n     }\n     else if (arr [ i ] == 1) {\n      n*=1\n     }\n     i++\n     }\n  }\n  return n * s\n}\n\nmodule.exports = prodSigns\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t = t * 10\n      }\n    i++;}\n  return t\n  }\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let t = 18\n  let i = 2;\n  while (i < n) {\n     {\n     \n     t += (1 + i) * (n - i)\n     i++\n     }\n  }\n  return t\n}\n\nconst countStartEnd = (n) => {\n  let c = 0\n  for (let i = 1; i <= n; i++) {\n    c += startsOneEnds(i)\n  }\n  return c\n}\n\nmodule.exports = countStartEnd\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        t *= n;\n        }\n      }\n    p++;\n    n--;\n    }\n  return t\n  }\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    \n    for (; y > 0;) {\n       {\n        y--;\n       \n       }\n    }\n    p = p * n;\n    t = t * (n-1);\n    n--;\n  }\n  return t;\n}\n\nconsole.log(specialFactorial(2));\nconsole.log(specialFactorial(10));\nconsole.log(specialFactorial(15));\nconsole.log(specialFactorial(30));\nconsole.log(specialFactorial(50));\nconsole.log(specialFactorial(100));\nconsole.log(specialFactorial(200));\nconsole.log(specialFactorial(500));\nconsole.log(specialFactorial(1000));\nconsole.log(specialFactorial(2000));\nconsole.log(specialFactorial(3000));\nconsole.log(specialFactorial(5000));\nconsole.log(specialFactorial(10000));\nconsole.log(specialFactorial(20000));\nconsole.log(specialFactorial(30000));\nconsole.log(specialFactorial(50000));\nconsole.log(specialFactorial(100000));\nconsole.log(specialFactorial(200000));\nconsole.log(specialFactorial(300000));\nconsole.log(specialFactorial(500000));\nconsole.log(specialFactorial(1000000));\nconsole.log(specialFactorial(2000000));\nconsole.log(specialFactorial(3000000));\nconsole.log(specialFactorial(5000000));\nconsole.log(specialFactorial(10000000));\nconsole.log(specialFactorial(20000000));\nconsole.log(specialFactorial(30000000));\nconsole.log(specialFactorial(50000000));\nconsole.log(specialFactorial(100000000));\nconsole.log(specialFactorial(200000000));\nconsole.log(specialFactorial(300000000));\nconsole.log(specialFactorial(500000000));\nconsole.log(specialFactorial(1000000000));\nconsole.log(specialFactorial(2000000000));\nconsole.log(specialFactorial(3000000000));\nconsole.log(specialFactorial(5000000000));\nconsole.log(specialFactorial(10000000000));\nconsole.log(specialFactorial(20000000000));\nconsole.log(specialFactorial(30000000000));\nconsole.log(specialFactorial(50000000000));\nconsole.log(specialFactorial(100000000000));\nconsole.log(specialFactorial(200000000000));\nconsole.log(specialFactorial(300000000000));\nconsole.log(specialFactorial(500000000000));\nconsole.log(specialFactorial(1000000000000));\nconsole.log(specialFactorial(2000000000000));\nconsole.log(specialFactorial(3000000000000));\nconsole.log(specialFactorial(5000000000000));\nconsole.log(specialFactorial(10000000000000));\nconsole.log(specialFactorial(20000000000000));\nconsole.log(specialFactorial(30000000000000));\nconsole.log(specialFactorial(50000000000000));\nconsole.log(specialFactorial(100000000000000));\nconsole.log(specialFactorial(200000000000000));\nconsole.log(specialFactorial(300000000000000));\nconsole.log(specialFactorial(500000000000000));\nconsole.log(specialFactorial(1000000000000000));\nconsole.log(specialFactorial(2000000000000000));\nconsole.log(specialFactorial(3000000000000000));\nconsole.log(specialFactorial(5000000000000000));\nconsole.log(specialFactorial(10000000000000000));\nconsole.log(specialFactorial(20000000000000000));\nconsole.log(specialFactorial(3000000000000000));\nconsole.log(specialFactorial(5000000000000000));\nconsole.log(specialFactorial(100000000000000000));\nconsole.log(specialFactorial(200000000000000000));\nconsole.log(specialFactorial(300000000000000000));\nconsole.log(specialFactorial(500000000000000000));\nconsole.log(specialFactorial(1000000000000000000));\nconsole.log(specialFactorial(20000000000000000000));\nconsole.log(specialFactorial(3000000000000000000));\nconsole.log(specialFactorial(5000000000000000000));\nconsole.log(specialFactorial(1000000000000000000000));\nconsole.log(specialFactorial(200000000000000000000));\nconsole.log(specialFactorial(3000000000000000000000));\nconsole.log(specialFactorial(5000000000000000000000));\nconsole.log(specialFactorial(1000000000000000000000000));\nconsole.log(specialFactorial(2000000000000000000000000));\nconsole.log(specialFactorial(300000000000000000000000000));\nconsole.log(specialFactorial(5000000000000000000000000000));\nconsole.log(specialFactorial(10000000000000000000000000000));\nconsole.log(specialFactorial(20000000000000000000000000000000));\nconsole.log(specialFactorial(3000000000000000000000000000000));\nconsole.log(specialFactorial(50000000000000000000000000000000));\nconsole.log(specialFactorial(1000000000000000000000000000000000));\nconsole.log(specialFactorial(2000000000000000000000000000000000));\nconsole.log(specialFactorial(30000000000000000000000000000000));\nconsole.log(specialFactorial(50000000000000000000000000000000));\nconsole.log(specialFactorial(1000000000000000000000000000000000));\nconsole.log(specialFactorial(2000000000000000000000000000000000));\nconsole.log(specialFactorial(30000000000000000000000000000000));\nconsole.log(specialFactorial(50000000000000000000000000000000));\nconsole.log(specialFactorial(1000000000000000000000000000000000));\nconsole.log(specialFactorial(2000000000000000000000000000000000));\nconsole.log(specialFactorial(30000000000000000000000000000000));\nconsole.log(specialFactorial(50000000000000000000000000000000));\nconsole.log(specialFactorial(1000000000000000000000000000000000));\nconsole.log(specialFactorial(2000000000000000000000000000000000));\nconsole.log(specialFactorial(30000000000000000000000000000000));\nconsole.log(specialFactorial(50000000000000000000000000000000));\nconsole.log(specialFactorial(1000000000000000000000000000000000));\nconsole.log(specialFactorial(2000000000000000000000000000000000));\nconsole.log(specialFactorial(30000000000000000000000000000000));\nconsole.log(specialFactorial(50000000000000000000000000000000));\nconsole.log"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    return max_depth;\n    }\n  return paren_string.split(' ')\n  .filter(x => x != '')\n  .map(x => parseParenGroup(x));\n  }\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n      }\n    }\n    return max_depth;\n  };\n  let i = 0;\n  let max_depth = 0;\n  while (i < paren_string.length) {\n    let paren_string_i = paren_string.indexOf(paren_string[i], i);\n    if (paren_string_i == -1) {\n      break;\n    }\n    let new_max_depth = parseParenGroup(paren_string.slice(i, paren_string_i));\n    if (new_max_depth > max_depth) {\n      max_depth = new_max_depth;\n    }\n    i = paren_string_i + 1;\n  }\n  return max_depth;\n};\n\nmodule.exports = parseNestedParens;<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    let j = i + 1;\n    while (j < n - 1) {\n       {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        for (let k = j + 1; k < n; k++) {\n          if ((y [ i ] + y [ j ] + y [ k ]) % 3 == 0) {\n            u++}\n          }\n        }\n      j++;}\n    }\n  return u\n  }\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n    }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    let j = i + 1;\n    while (j < n - 1) {\n       {\n       \n        let sum = y[i] + y[j] + y[n - 1]\n        if (sum % 3 === 0) {\n          u++\n        }\n        j++\n      }\n    }\n  }\n  return u\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(arr) => {\n  if (arr.length == 0) {\n    return true}\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    let j = 1;\n    while (j < len) {\n       {\n        if (arr [ j ] < arr [ j - 1 ]) {\n          t = 0;\n          j++; break;\n          }\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      j++;}\n    if (t == 1) {\n      k = 1;\n      break;\n      }\n    arr.push(arr [ 0 ]);\n    arr.shift()\n    }\n  if (k == 1) {\n    return true}\n  return false\n  }\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(arr) => {\n  if (arr.length == 0) {\n    return true}\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    let j = 1;\n    while (j < len) {\n       {\n        if (arr [ j ] < arr [ j - 1 ]) {\n          t = 0;\n          j++; break;\n          }\n       \n        if (arr [j] < arr [k]) {\n          t = 0;\n          k++; break;\n          }\n        j++;\n      }\n    if (t === 0) {\n      continue;\n    }\n    if (k === i) {\n      continue;\n    }\n    let temp = arr [k]\n    arr [k] = arr [i]\n    arr [i] = temp;\n    k++;\n  }\n  return arr.every( (x, i) => x <= arr[i] )\n};\n  \n\nconst moveOneBall2 =(arr) => {\n  if (arr.length == 0) {\n    return true}\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    let j = 1;\n    while (j < len) {\n       {\n        if (arr [ j ] < arr [ j - 1 ]) {\n          t = 0;\n          j++; break;\n          }\n       \n        if (arr [j] < arr [k]) {\n          t = 0;\n          k++; break;\n          }\n        j++;\n      }\n    if (t === 0) {\n      continue;\n    }\n    if (k === i) {\n      continue;\n    }\n    let temp = arr [k]\n    arr [k] = arr [i]\n    arr [i] = temp;\n    k++;\n  }\n  return arr.every( (x, i) => x <= arr[i] )\n};\n  \n  \n  \nconst moveOneBall3 =(arr) => {\n  if (arr.length == 0) {\n    return true}\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    let j = 1;\n    while (j < len) {\n       {\n        if (arr [ j ] < arr [ j - 1 ]) {\n          t = 0;\n          j++; break;\n          }\n       \n        if (arr [j] < arr [k]) {\n          t = 0;\n          k++; break;\n          }\n        j++;\n      }\n    if (t === 0) {\n      continue;\n    }\n    if (k === i) {\n      continue;\n    }\n    let temp = arr [k]\n    arr [k] = arr [i]\n    arr [i] = temp;\n    k++;\n  }\n  return arr.every( (x, i) => x <= arr[i] )\n};\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(number) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm' ]\n  let i = 12\n  let res = ''\n  for (; number;) {\n     {\n      let div =(number - number % num [ i ]) / num [ i ]\n      number = number % num [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      while (div) {\n        res+=sym [ i ]\n        div-=1\n        }\n      i-=1\n      }\n    }\n  return res\n  }\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(number) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m' ]\n  let i = 12\n  let res = ''\n  for (; number;) {\n     {\n      let div =(number - number % num [ i ]) / num [ i ]\n      number = number % num [ i ]\n     \n      if (div === 0) res += sym [ i ]\n      else if (div === 1) res += sym [ i ] + sym [ i ]\n      else if (div > 1 && div < 5) res += sym [ i ] + sym [ i ] + sym [ i ]\n      else if (div === 5) res += sym [ i ] + sym [ i ] + sym [ i ] + sym [ i ]\n      else if (div === 9) res += sym [ i ] + sym [ i ] + sym [ i ] + sym [ i ] + sym [ i ]\n      else res += sym [ i ] + sym [ i ] + sym [ i ] + sym [ i ] + sym [ i ] + sym [ i ]\n      i--\n    }\n  }\n  return res.toLowerCase()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n  return s.split('').reverse().join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else\n  return s.slice( - shift) + s.slice(0, - shift);\n  }\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n  return s.split('').reverse().join('');\n \n  return s.split('').reverse().join('') + s.slice(shift, s.length);\n}\n\n// Complete the function below.\nconst solve =(input) => {\n  let res = [];\n  let i = 0;\n  let j = input.length-1;\n  let k = 0;\n  let m = 0;\n  while (i <= j) {\n    let v = parseInt(input[i], 10);\n    res.push(v);\n    while (k <= m) {\n      res[k] += circularShift(v, m);\n      k++;\n    }\n    i++;\n    j--;\n    m = Math.max(i-j, j);\n  }\n  return res;\n}\n\nlet t = \"abcd\";\nlet t2 = \"abcd\";\nlet t3 = \"abcde\";\nlet t4 = \"abcdef\";\n\nconsole.log(solve(t));\nconsole.log(solve(t2));\nconsole.log(solve(t3));\nconsole.log(solve(t4));<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let p = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      p.push(lst [ i ])\n      }\n    }\n  let j = p.length - 2;\n  while (j >= 0) {\n     {\n      for (let k = 0; k <= j; k++) {\n        let f = 0\n        if (p [ k ].length > p [ k + 1 ].length) {\n          f = 1}\n        if (p [ k ].length == p [ k + 1 ].length) {\n          let r = p [ k ].length\n          for (let l = 0; l < r; l++) {\n            if (p [ k ] [ l ].charCodeAt() > p [ k + 1 ] [ l ].charCodeAt()) {\n              f = 1;\n             \n", "canonical_solution": "# print('@@this is the line to split##')\n              j--; break;\n              }\n            if (p [ k ] [ l ].charCodeAt() < p [ k + 1 ] [ l ].charCodeAt()) {\n              j--; break;\n              }\n            }\n          }\n        if (f == 1) {\n          let tmp = p [ k ]\n          p [ k ] = p [ k + 1 ]\n          p [ k + 1 ] = tmp\n          }\n        }\n      }\n    j--;}\n  return p\n  }\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let p = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      p.push(lst [ i ])\n      }\n    }\n  let j = p.length - 2;\n  while (j >= 0) {\n     {\n      for (let k = 0; k <= j; k++) {\n        let f = 0\n        if (p [ k ].length > p [ k + 1 ].length) {\n          f = 1}\n        if (p [ k ].length == p [ k + 1 ].length) {\n          let r = p [ k ].length\n          for (let l = 0; l < r; l++) {\n            if (p [ k ] [ l ].charCodeAt() > p [ k + 1 ] [ l ].charCodeAt()) {\n              f = 1;\n             \n              break\n            }\n            }\n        }\n        if (f == 1) {\n          p.splice (k, 1)\n          j--\n          break\n        }\n      }\n    }\n    j--\n  }\n  return p\n}\n<|endoftext|>"}
