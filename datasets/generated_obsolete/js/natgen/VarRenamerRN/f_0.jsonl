{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var r8ezP = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    r8ezP+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    r8ezP-=1;\n    if (r8ezP < 0)\n    return false;\n    }\n  return r8ezP == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var r8ezP = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    r8ezP+=1;\n    else\n   \n    if (b == \">\")\n    r8ezP-=1;\n    if (r8ezP < 0)\n    return false;\n  }\n  return true;\n};\n\n/*\n  The next function uses the BracketPairs function and the correctBracketing function to determine the next possible bracketing.\n  If the brackets are correct, then it returns a string that is the bracketing.\n  If the brackets are not correct, then it returns null.\n\n  >>> nextBracketing(\"<>\")\n  null\n  >>> nextBracketing(\"<\")\n  null\n  >>> nextBracketing(\"<>\")\n  <>\n  >>> nextBracketing(\"<>\")\n  <>\n  >>> nextBracketing(\"<>\")\n  <>\n  */\nconst nextBracketing =(brackets) => {\n  var pairs = bracketPairs(brackets);\n  for (var i=0; i<pairs.length; i++) {\n    if (correctBracketing(pairs[i]))\n    return pairs[i];\n  }\n  return null;\n};\n\n// tests\n\nconst brackets = [\"<>\", \"<>\", \"<><>\", \"<><><>\"];\nconsole.log(\"Correct brackets:\", correctBracketing(brackets));\nconsole.log(\"Next brackets:\", nextBracketing(brackets));\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(k) => {\n  return Math.max(... k);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(k) => {\n  return Math.max(... k);\n \n}\n\n/*Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement =(k) => {\n  return Math.min(... k);\n \n}\n\n/*\n  >>> list = [1, 2, 3]\n  >>> sum(list)\n  6\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  45\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  56\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  77\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  100\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  123\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  150\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  169\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  198\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  227\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  250\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  281\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  302\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  333\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  356\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  379\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  402\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  425\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  450\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  475\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  500\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  523\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  546\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  559\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  582\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  605\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let P = '' let p = [ ]\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s [ i ] == ' ' || s [ i ] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(P);\n        P = '';\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    else {\n      k = 0;\n      P+=s [ i ]\n      }\n    }\n  if (P != '') {\n    p.push(P);\n    }\n  return p\n  }\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let P = '' let p = [ ]\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s [ i ] =='' || s [ i ] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(P);\n        P = '';\n        }\n     \n      P += s [ i ]\n    }\n    else {\n      P += s [ i ]\n    }\n  }\n  if (k == 0) {\n    p.push(P);\n  }\n  return p;\n}\n\n// Test\nwordsString(\"Hello, my name is John\") == ['Hello','my', 'name', 'is', 'John']\nwordsString(\"Hello, my name is John\") == ['Hello','my', 'name', 'is', 'John']\nwordsString(\"One, two, three, four, five, six\") == ['One', 'two', 'three', 'four', 'five','six']\nwordsString(\"One, two, three, four, five, six\") == ['One', 'two', 'three', 'four', 'five','six']\nwordsString(\"Hello, my name is John, and I love you\") == ['Hello','my', 'name', 'is', 'John', 'and', 'I', 'love', 'you']\nwordsString(\"Hello, my name is John, and I love you\") == ['Hello','my', 'name', 'is', 'John', 'and', 'I', 'love', 'you']\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(l, base) => {\n  var ret = \"\";\n  while (l > 0) {\n    ret =(l % base).toString() + ret;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    l = Math.floor(l / base);\n    }\n  return ret;\n  }\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(l, base) => {\n  var ret = \"\";\n  while (l > 0) {\n    ret =(l % base).toString() + ret;\n   \n    l = Math.floor(l / base);\n  }\n  return ret;\n}\n\n/*\nGiven two numbers represented as strings, return multiplication of the two numbers as a string.\n\nNote: The numbers can be arbitrarily large and are non-negative.\n\n>>> multiply(\"23\", \"45\")\n'345'\n>>> multiply(\"23\", \"67\")\n'2300'\n>>> multiply(\"10\", \"10\")\n'1010'\n>>> multiply(\"23\", \"89\")\n'2374'\n*/\nconst multiply = (x, y) => {\n  var lenX = x.length;\n  var lenY = y.length;\n  var res = \"\";\n  for (var i = lenX - 1; i >= 0; i--) {\n    res = (x.charCodeAt(i) * (lenY - i)).toString() + res;\n  }\n  return res;\n}\n\n/*\nGiven two numbers represented as strings, return addition of the two numbers as a string.\n\nNote: The numbers can be arbitrarily large and are non-negative.\n\n>>> add(\"23\", \"45\")\n'67'\n>>> add(\"23\", \"67\")\n'23'\n>>> add(\"10\", \"10\")\n'20'\n>>> add(\"23\", \"89\")\n'100'\n*/\nconst add = (x, y) => {\n  var lenX = x.length;\n  var lenY = y.length;\n  var res = \"\";\n  for (var i = lenX - 1; i >= 0; i--) {\n    res = (x.charCodeAt(i) + (lenY - i)).toString() + res;\n  }\n  return res;\n}\n\n/*\nGiven two numbers represented as strings, return subtraction of the two numbers as a string.\n\nNote: The numbers can be arbitrarily large and are non-negative.\n\n>>> subtract(\"23\", \"45\")\n'33'\n>>> subtract(\"23\", \"67\")\n'-23'\n>>> subtract(\"10\", \"10\")\n'0'\n>>> subtract(\"23\", \"89\")\n'-74'\n*/\nconst subtract = (x, y) => {\n  var lenX = x.length;\n  var lenY = y.length;\n  var res = \"\";\n  for (var i = lenX - 1; i >= 0; i--) {\n    res = (x.charCodeAt(i) - (lenY - i)).toString() + res;\n  }\n  return res;\n}\n\n/*\nGiven a string, return the string with all the characters lowercased.\n\n>>> lowercase(\"A string\")\n'a string'\n*/\nconst lowercase = (x) => {\n  return x.toLowerCase();\n}\n\n/*\nGiven two strings, return the longest string that can be obtained by interchanging the characters in the two strings.\n\n>>> longestInterchange(\"cba\", \"abcd\")\n'abcd'\n>>> longestInterchange(\"cba\", \"cbad\")\n'cba'\n>>> longestInterchange(\"abc\", \"abcd\")\n'abc'\n>>> longestInterchange(\"a\", \"\")\n''\n>>> longestInterchange(\"\", \"a\")\n''\n>>> longestInterchange(\"ab\", \"c\")\n'ab'\n>>> longestInterchange(\"ab\", \"\")\n'ab'\n*/\nconst longestInterchange = (x, y) => {\n  var lenX = x.length;\n  var lenY = y.length;\n  var res = \"\";\n  if (lenX > lenY) {\n    for (var i = lenX - 1; i >= 0; i--) {\n      res = (y.charCodeAt(i) + (lenX - i)).toString() + res;\n    }\n  } else {\n    for (var i = lenY - 1; i >= 0; i--) {\n      res = (x.charCodeAt(i) + (lenY - i)).toString() + res;\n    }\n  }\n  return res;\n}\n\n/*\nGiven a string, return the string with all the characters uppercased.\n\n>>> uppercase(\"cba\")\n'CBA'\n*/\nconst uppercase = (x) => {\n  return x.toUpperCase();\n}\n\n/*\nGiven two strings, return their sum.\n\n>>> add(\"1\", \"2\")\n'3'\n>>> add(\"1\", \"5\")\n'6'\n>>> add(\"10\", \"10\")\n'20'\n>>> add(\"100\", \"100\")\n'200'\n>>> add(\"1000\", \"1000\")\n'2000'\n>>> add(\"1\", \"2\")\n'3'\n>>> add(\"2\", \"4\")\n'6'\n*/\nconst add = (x, y) => {\n  var lenX = x.length;\n  var lenY = y.length;\n  var res = \"\";\n  for (var i = lenX - 1; i >= 0; i--) {\n    res = (x.charCodeAt(i) + (lenY - i)).toString() + res;\n  }\n  return res;\n}\n\nmodule.exports = {\n  changeBase: changeBase,\n  multiply: multiply,\n  add: add,\n  subtract: subtract,\n  lowercase: lowercase,\n  uppercase: uppercase\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(mF7K12) => {\n  return(new Set(mF7K12.toLowerCase())).size;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  }\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(mF7K12) => {\n  return(new Set(mF7K12.toLowerCase())).size;\n \n};\n\n/* Given a string, return the length of the longest substring that consists of distinct characters\n  >>> lengthLongestDistinctSubstring('xyzXYZ')\n  3\n  >>> lengthLongestDistinctSubstring('Jerry')\n  4\n  >>> lengthLongestDistinctSubstring('aaa')\n  3\n  */\nconst lengthLongestDistinctSubstring =(mF7K12) => {\n  let result = 0;\n  let unique = new Set(mF7K12.toLowerCase());\n  for (let i = 0; i < mF7K12.length; i++) {\n    if (unique.has(mF7K12[i])) {\n      if (result < mF7K12.length) {\n        result++;\n      }\n    }\n  }\n  return result;\n};\n\n/* Given a string, return the length of the longest substring that consists of distinct characters (regardless of case)\n  >>> lengthLongestDistinctSubstring('xyzXYZ')\n  3\n  >>> lengthLongestDistinctSubstring('Jerry')\n  4\n  >>> lengthLongestDistinctSubstring('aaa')\n  3\n  */\nconst lengthLongestDistinctSubstring =(mF7K12) => {\n  let result = 0;\n  let unique = new Set(mF7K12.toLowerCase());\n  for (let i = 0; i < mF7K12.length; i++) {\n    if (unique.has(mF7K12[i])) {\n      if (result < mF7K12.length) {\n        result++;\n      }\n    }\n  }\n  return result;\n};\n\n/* Given a string, return the number of appearances of the character 'a' in the string\n  >>> countOccurrencesOf('aaa', 'a')\n  3\n  >>> countOccurrencesOf('aaa', 'b')\n  0\n  */\nconst countOccurrencesOf =(mF7K12) => {\n  let result = 0;\n  for (let i = 0; i < mF7K12.length; i++) {\n    if (mF7K12[i] === 'a') {\n      result++;\n    }\n  }\n  return result;\n};\n\n/* Given a string, return the number of appearances of the character 'a' in the string (regardless of case)\n  >>> countOccurrencesOf('aaa', 'A')\n  3\n  >>> countOccurrencesOf('aaa', 'b')\n  0\n  */\nconst countOccurrencesOf =(mF7K12) => {\n  let result = 0;\n  for (let i = 0; i < mF7K12.length; i++) {\n    if (mF7K12[i].toUpperCase() === 'A') {\n      result++;\n    }\n  }\n  return result;\n};\n\n/* Given a string, return the number of appearances of the character 'a' in the string (regardless of case)\n  >>> countOccurrencesOf('aaa', 'A')\n  3\n  >>> countOccurrencesOf('aaa', 'b')\n  0\n  */\nconst countOccurrencesOf =(mF7K12) => {\n  let result = 0;\n  for (let i = 0; i < mF7K12.length; i++) {\n    if (mF7K12[i].toLowerCase() === 'a') {\n      result++;\n    }\n  }\n  return result;\n};\n\n/* Given a string, return the number of appearances of the character 'a' in the string\n  >>> countOccurrencesOf('aaa', 'a')\n  3\n  >>> countOccurrencesOf('aaa', 'b')\n  0\n  */\nconst countOccurrencesOf =(mF7K12) => {\n  let result = 0;\n  for (let i = 0; i < mF7K12.length; i++) {\n    if (mF7K12[i] === 'a') {\n      result++;\n    }\n  }\n  return result;\n};\n\n/* Given a string, return the number of appearances of the character 'a' in the string (regardless of case)\n  >>> countOccurrencesOf('aaa', 'A')\n  3\n  >>> countOccurrencesOf('aaa', 'b')\n  0\n  */\nconst countOccurrencesOf =(mF7K12) => {\n  let result = 0;\n  for (let i = 0; i < mF7K12.length; i++) {\n    if (mF7K12[i].toLowerCase() === 'a') {\n      result++;\n    }\n  }\n  return result;\n};\n\n/* Given a string, return the number of appearances of the character 'a' in the string (regardless of case)\n  >>> countOccurrencesOf('aaa', 'A')\n  3\n  >>> countOccurrencesOf('aaa', 'b')\n  0\n  */\nconst countOccurrencesOf =(mF7K12) => {\n  let result = 0;\n  for (let i = 0; i < mF7K12.length; i++) {\n    if (mF7K12[i].toUpperCase() === 'A') {\n      result++;\n    }\n  }\n  return result;\n};\n\n/* Given a string, return the number of appearances of the character 'a' in the string\n  >>> countOccurrencesOf('aaa', 'a')\n  3\n  >>> countOccurrencesOf('aaa', 'b')\n  0\n  */\nconst countOccurrencesOf =(mF7K12) => {\n  let result = 0;\n  for (let i = 0; i < mF7K12.length; i++) {\n    if (mF7K12[i] === 'a') {\n      result++;\n    }\n  }\n  return result;\n};\n\n/* Given a string, return the number of appearances of the character 'a' in the string (regardless of case)\n  >>> countOccurrencesOf('aaa', 'A')\n  "}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let l = date.split( / - /)\n  if (l.length != 3) {\n    return false}\n  if (l [ 0 ] < 1 || l [ 0 ] > 12 || l [ 1 ] < 1) {\n    return false}\n  if (l [ 0 ] == 2 && l [ 1 ] > 29) {\n    return false}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if ((l [ 0 ] == 1 || l [ 0 ] == 3 || l [ 0 ] == 5 || l [ 0 ] == 7 || l [ 0 ] == 8 || l [ 0 ] == 10 || l [ 0 ] == 12) && l [ 1 ] > 31) {\n    return false}\n  if ((l [ 0 ] == 4 || l [ 0 ] == 6 || l [ 0 ] == 9 || l [ 0 ] == 11) && l [ 1 ] > 30) {\n    return false}\n  return true\n  }\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let l = date.split( / - /)\n  if (l.length!= 3) {\n    return false}\n  if (l [ 0 ] < 1 || l [ 0 ] > 12 || l [ 1 ] < 1) {\n    return false}\n  if (l [ 0 ] == 2 && l [ 1 ] > 29) {\n    return false}\n \n  if (l [ 2 ] < 1970) {\n    return false}\n \n  return true\n}\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  2. The months should not be less than 1 or higher than 12.\n  3. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate2 =(date) => {\n  let l = date.split( / - /)\n  if (l.length!= 3) {\n    return false}\n  if (l [ 0 ] < 1 || l [ 0 ] > 12 || l [ 1 ] < 1) {\n    return false}\n \n  if (l [ 2 ] < 1970) {\n    return false}\n \n  return true\n}\n\nconst input = '03-11-2000'\n\nconsole.log(validDate(input))\nconsole.log(validDate2(input))<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var k4oha39 = 0;\n  for (const op of operations) {\n    k4oha39+=op;\n    if (k4oha39 < 0) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      return true;\n      }\n    }\n  return false;\n  }\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var k4oha39 = 0;\n  for (const op of operations) {\n    k4oha39+=op;\n    if (k4oha39 < 0) {\n     \n      return true;\n    }\n  }\n  return false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const Ueh of numbers) {\n    if (Ueh in dict) {\n      dict [ Ueh ]+=1;\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      dict [ Ueh ] = 1;\n      }\n    }\n  return numbers.filter(x => dict [ x ] <= 1);\n  }\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const Ueh of numbers) {\n    if (Ueh in dict) {\n      dict [ Ueh ]+=1;\n      }\n    else {\n     \n    dict [ Ueh ] = 1;\n    }\n    }\n  return [...new Set(dict.values())];\n}\n\nmodule.exports = removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(ZQ30m6) => {\n  if (ZQ30m6 == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  while ( !isPalindrome(ZQ30m6.slice(beginning_of_suffix)))\n  beginning_of_suffix+=1;\n  return ZQ30m6 + ZQ30m6.slice(0, beginning_of_suffix).split('').reverse().join('');\n  }\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(ZQ30m6) => {\n  if (ZQ30m6 == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n  while (isPalindrome(ZQ30m6.substring(beginning_of_suffix))){\n    beginning_of_suffix += 1;\n  }\n  var beginning_of_prefix = beginning_of_suffix;\n  var end_of_suffix = ZQ30m6.length - 1;\n  while (isPalindrome(ZQ30m6.substring(beginning_of_prefix, end_of_suffix))){\n    end_of_suffix -= 1;\n  }\n  var beginning_of_prefix_and_suffix = beginning_of_prefix + 1;\n  var end_of_prefix_and_suffix = end_of_suffix - 1;\n  var reversed_string = ZQ30m6.substring(beginning_of_prefix_and_suffix, end_of_prefix_and_suffix);\n  return reversed_string + ZQ30m6.substring(0, beginning_of_prefix);\n}\n\n/* Print a palindrome that begins with a supplied string.\n  >>> printPalindrome('cat')\n  'catac'\n  >>> printPalindrome('cata')\n  'catac'\n  */\nconst printPalindrome = (ZQ30m6) => {\n  return makePalindrome(ZQ30m6);\n}\n\n/* Print all palindromes that begin with a supplied string.\n  >>> printAllPalindromes('cat')\n  'catac'\n  'cata'\n  >>> printAllPalindromes('cata')\n  'catac'\n  'cata'\n  >>> printAllPalindromes('c')\n  'c'\n  >>> printAllPalindromes('abc')\n  'abc'\n  'abcd'\n  'acbd'\n  'abcd'\n  'acbd'\n  'abc'\n  'abcd'\n  'acbd'\n  'abcd'\n  */\nconst printAllPalindromes =(ZQ30m6) => {\n  return makePalindrome(ZQ30m6).split('').reduce((previous_palindrome, current_palindrome) => {\n    return previous_palindrome + current_palindrome;\n  });\n}\n\n/* Test if a supplied string is a palindrome.\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('c')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abc')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('acbd')\n  true\n  >>> isPalindrome('acbd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('acbd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  */\nconst isPalindrome = (ZQ30m6) => {\n  var first_half = ZQ30m6.split('').reduce((previous_half, current_half) => {\n    return previous_half + current_half.charAt(0);\n  });\n  var second_half = ZQ30m6.split('').reduce((previous_half, current_half) => {\n    return current_half.charAt(0) + previous_half;\n  });\n  return first_half == second_half;\n}\n\n/* Print a string with a supplied length.\n  >>> printStringOfLength(3, 'cat')\n  'cat'\n  >>> printStringOfLength(4, 'cat')\n  'cat'\n  >>> printStringOfLength(5, 'cat')\n  'cat'\n  >>> printStringOfLength(6, 'cat')\n  'cat'\n  >>> printStringOfLength(7, 'cat')\n  'cat'\n  >>> printStringOfLength(8, 'cat')\n  'cat'\n  >>> printStringOfLength(9, 'cat')\n  'cat'\n  >>> printStringOfLength(10, 'cat')\n  'cat'\n  */\nconst printStringOfLength =(ZQ30m6, length) => {\n  var string_of_length = '';\n  for (var i = 0; i < length; i++) {\n    string_of_length += ZQ30m6;\n  }\n  return string_of_length;\n}\n\n/* Test if a supplied string is a palindrome.\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('c')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abc')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('acbd')\n  true\n  >>> isPalindrome('acbd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('acbd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  */\nconst isPalindrome = (ZQ30m6) => {\n  return makePalindrome(ZQ30m6) == ZQ30m6;\n}\n\n/* Test if a supplied string is"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(U) => {\n  var fact = [ ], i = 2;\n  while (i <= Math.sqrt(U) + 1) {\n    if (U % i == 0) {\n      fact.push(i);\n      U = U / i;\n      }\n    else {\n      i+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  \n  if (U > 1)\n  fact.push(U);\n  return fact;\n  }\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(U) => {\n  var fact = [ ], i = 2;\n  while (i <= Math.sqrt(U) + 1) {\n    if (U % i == 0) {\n      fact.push(i);\n      U = U / i;\n      }\n    else {\n      i+=1;\n     \n    }\n  }\n  if (U > 1) {\n    fact.push(U);\n  }\n  return fact;\n}\n\nvar factors = factorize(1000),\n    sum = 0,\n    i = 1;\n\nwhile(i <= factors.length) {\n  sum = sum + factors[i-1];\n  i++;\n}\n\nconsole.log(sum);\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(w) => {\n  let t = 0\n  while (w > 0) {\n    t+=w % 10\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    w =(w - w % 10) / 10\n    }\n  return t.toString(2)\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(w) => {\n  let t = 0\n  while (w > 0) {\n    t+=w % 10\n   \n    w=w/10\n  }\n  return t\n}\n\n/*\n  Given a positive integer N, return the total sum of its digits in decimal.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of decimal number\n  */\nconst solve_decimal =(w) => {\n  let t = 0\n  while (w > 0) {\n    t+=w % 10\n    w=w/10\n  }\n  return t\n}\n\n/*\n  Given a positive integer N, return the number of leading zeros in the binary representation of N.\n  \n  Example\n      For N = 1000, the number of leading zeros will be 2 the output should be \"2\".\n      For N = 150, the number of leading zeros will be 1 the output should be \"1\".\n      For N = 147, the number of leading zeros will be 0 the output should be \"0\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of number of leading zeros\n  */\nconst solve_zeros =(w) => {\n  let t = 0\n  while (w > 0) {\n    t+=w % 10\n    w=w/10\n  }\n  return t\n}\n\n/*\n  Given a positive integer N, return the number of trailing zeros in the binary representation of N.\n  \n  Example\n      For N = 1000, the number of trailing zeros will be 0 the output should be \"0\".\n      For N = 150, the number of trailing zeros will be 1 the output should be \"1\".\n      For N = 147, the number of trailing zeros will be 2 the output should be \"11\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of number of trailing zeros\n  */\nconst solve_trail =(w) => {\n  let t = 0\n  while (w > 0) {\n    t+=w % 10\n    w=w/10\n  }\n  return t\n}\n\n/*\n  Given a positive integer N, return the number of 1's in the binary representation of N.\n  \n  Example\n      For N = 1000, the number of 1's will be 2 the output should be \"2\".\n      For N = 150, the number of 1's will be 1 the output should be \"1\".\n      For N = 147, the number of 1's will be 1 the output should be \"1\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of number of 1's\n  */\nconst solve_ones =(w) => {\n  let t = 0\n  while (w > 0) {\n    t+=w % 10\n    w=w/10\n  }\n  return t\n}\n\n/*\n  Given a positive integer N, return the number of 0's in the binary representation of N.\n  \n  Example\n      For N = 1000, the number of 0's will be 3 the output should be \"11\".\n      For N = 150, the number of 0's will be 0 the output should be \"0\".\n      For N = 147, the number of 0's will be 1 the output should be \"1\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of number of 0's\n  */\nconst solve_zeros =(w) => {\n  let t = 0\n  while (w > 0) {\n    t+=w % 10\n    w=w/10\n  }\n  return t\n}\n\n/*\n  Given a positive integer N, return the number of trailing 0's in the binary representation of N.\n  \n  Example\n      For N = 1000, the number of trailing 0's will be 2 the output should be \"1\".\n      For N = 150, the number of trailing 0's will be 0 the output should be \"0\".\n      For N = 147, the number of trailing 0's will be 1 the output should be \"1\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of number of trailing 0's\n  */\nconst solve_trail =(w) => {\n  let t = 0\n  while (w > 0) {\n    t+=w % 10\n    w=w/10\n  }\n  return t\n}\n\nconst test = () => {\n  console.log(solve(1000))\n  console.log(solve_zeros(1000))\n  console.log(solve_ones(1000))\n  console.log(solve_trail(1000))\n  console.log(solve(150))\n  console.log(solve_zeros(150))\n  console.log(solve_ones(150))\n  console.log(solve_trail(150))\n  console.log(solve(147))\n  console.log(solve_zeros(147))\n  console.log(solve_ones(147))\n  console.log(solve_trail(147))\n  console.log(solve(999))\n  console.log(solve_zeros(999))\n  console.log(solve_ones(999))\n  console.log(solve_trail(999))\n  console.log(solve(100))\n  console.log(solve_zeros(100))\n  console.log(s"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(E) => {\n  E.sort((a, b) => a - b);\n  var len = E.length;\n  if (E.length % 2 == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return E [ Math.floor(len / 2) ];\n  else\n  return(E [ len / 2 - 1 ] + E [ len / 2 ]) / 2.0;\n  }\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(E) => {\n  E.sort((a, b) => a - b);\n  var len = E.length;\n  if (E.length % 2 == 1)\n \n  return E[Math.floor(len / 2)];\n  else {\n    return (E[len / 2 - 1] + E[len / 2]) / 2;\n  }\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var A67 = 1;\n  for (let i = 0; i < n; i++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  A67 =(2 * A67) % p;\n  return A67;\n  }\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var A67 = 1;\n  for (let i = 0; i < n; i++)\n \n  {\n    A67 = A67 * 2 % p;\n  }\n  return A67;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      if (kMJ < 0) {\n            kMJ = - kMJ}\n      while (kMJ > 0) {\n            if (kMJ % 2 == 0) {\n                  e++}\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            else {\n                  o++}\n            kMJ =(kMJ - kMJ % 10) / 10\n            }\n      return(e, o)\n      }\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      if (kMJ < 0) {\n            kMJ = - kMJ}\n      while (kMJ > 0) {\n            if (kMJ % 2 == 0) {\n                  e++}\n           \n            if (kMJ % 2 == 1) {\n                  o++}\n            kMJ = kMJ / 2}\n      return [o, e]\n  }\n  \n  \n  const _evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n\n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n  \n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n  \n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n  const evenOddCount =(kMJ) => {\n      let o = 0\n      let e = 0\n      while (kMJ > 0) {\n          if (kMJ % 2 == 0) {\n              e++}\n          kMJ = kMJ / 2}\n      return [o, e]\n  }\n\n/*\n  evenOddCount(12)\n  \n*/<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var ib2hQ = - 1.0, end = 1.0;\n  while (poly(xs, ib2hQ) * poly(xs, end) > 0) {\n    ib2hQ *= 2.0;\n    end *= 2.0;\n    }\n  while (end - ib2hQ > 1e-10) {\n    let center =(ib2hQ + end) / 2.0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, ib2hQ) > 0)\n    ib2hQ = center;\n    else\n    end = center;\n    }\n  return ib2hQ;\n  }\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var ib2hQ = - 1.0, end = 1.0;\n  while (poly(xs, ib2hQ) * poly(xs, end) > 0) {\n    ib2hQ *= 2.0;\n    end *= 2.0;\n    }\n  while (end - ib2hQ > 1e-10) {\n    let center =(ib2hQ + end) / 2.0;\n   \n    if (poly(xs, center) == 0) return center;\n    if (poly(xs, center) * poly(xs, ib2hQ) < 0) ib2hQ = center;\n    else end = center;\n    }\n  return -1.0;\n}\n\n/*\n  Given a list of coefficients xs,\n  solve the linear system with coefficients a and b.\n  return b(x) = [a_0, a_1,..., a_n]^T * x\n  */\nconst solveLinear = (xs, a, b) => {\n  const N = xs.length;\n  const x = new Array(N);\n  for (var i = 0; i < N; i++) {\n    x[i] = b[i] / a[i];\n  }\n  return x;\n}\n\n/*\n  Given a list of coefficients xs and a point x,\n  find the coefficients b such that b(x) = 0.\n  The system of linear equations is \n  a_0 * x_0 + a_1 * x_1 +... + a_n * x_n = b\n  Returns only coefficients b, not the coefficients xs.\n  */\nconst findZeroLinear = (xs, a) => {\n  var x = new Array(xs.length);\n  for (var i = 0; i < xs.length; i++) {\n    x[i] = - xs[i] / a[i];\n  }\n  return x;\n}\n\n// __________________________________________\n\nconst p0 = findZero([-2, -1, 1, 2]);\nconsole.log(`p(x) = ${poly([-2, -1, 1, 2], p0)}`);\n\nconst p1 = findZero([1, 1, 1, 1]);\nconsole.log(`p(x) = ${poly([1, 1, 1, 1], p1)}`);\n\nconst p2 = findZero([-1, -1, -1, -1]);\nconsole.log(`p(x) = ${poly([-1, -1, -1, -1], p2)}`);\n\nconst p3 = findZero([0, 0, 0, 0]);\nconsole.log(`p(x) = ${poly([0, 0, 0, 0], p3)}`);\n\nconst p4 = findZero([0, 0, 0, 1]);\nconsole.log(`p(x) = ${poly([0, 0, 0, 1], p4)}`);\n\nconst p5 = findZero([1, 1, 1, 1]);\nconsole.log(`p(x) = ${poly([1, 1, 1, 1], p5)}`);\n\nconst p6 = findZero([-1, -1, -1, -1]);\nconsole.log(`p(x) = ${poly([-1, -1, -1, -1], p6)}`);\n\nconst p7 = findZero([1, 1, 1, 1]);\nconsole.log(`p(x) = ${poly([1, 1, 1, 1], p7)}`);\n\nconst p8 = findZero([-1, -1, -1, -1]);\nconsole.log(`p(x) = ${poly([-1, -1, -1, -1], p8)}`);\n\nconst p9 = findZero([1, 1, 1, 1]);\nconsole.log(`p(x) = ${poly([1, 1, 1, 1], p9)}`);\n\nconst p10 = findZero([-1, -1, -1, -1]);\nconsole.log(`p(x) = ${poly([-1, -1, -1, -1], p10)}`);\n\nconst p11 = findZero([1, 1, 1, 1]);\nconsole.log(`p(x) = ${poly([1, 1, 1, 1], p11)}`);\n\nconst p12 = findZero([-1, -1, -1, -1]);\nconsole.log(`p(x) = ${poly([-1, -1, -1, -1], p12)}`);\n\nconst p13 = findZero([1, 1, 1, 1]);\nconsole.log(`p(x) = ${poly([1, 1, 1, 1], p13)}`);\n\nconst p14 = findZero([-1, -1, -1, -1]);\nconsole.log(`p(x) = ${poly([-1, -1, -1, -1], p14)}`);\n\nconst p15 = findZero([1, 1, 1, 1]);\nconsole.log(`p(x) = ${poly([1, 1, 1, 1], p15)}`);\n\nconst p16 = findZero([-1, -1, -1, -1]);\nconsole.log("}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let W = 0; W < string.length; W++) {\n    result.push(string.slice(0, W + 1));\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return result;\n  }\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let W = 0; W < string.length; W++) {\n    result.push(string.slice(0, W + 1));\n   \n  }\n  return result;\n};\n\n/* Return the index of the first character of the longest common prefix of two strings */\nconst longestCommonPrefix = (string1, string2) => {\n  var W = 0;\n  while (string1.charAt(W) === string2.charAt(W)) {\n    W++;\n    if (W === string1.length) {\n      return W;\n    }\n  }\n  return W;\n};\n\n/* Return the index of the last character of the longest common prefix of two strings */\nconst longestCommonSuffix = (string1, string2) => {\n  var W = 0;\n  while (string1.charAt(string1.length - W - 1) === string2.charAt(string2.length - W - 1)) {\n    W++;\n    if (W === string1.length) {\n      return W;\n    }\n  }\n  return W;\n};\n\n/* Return true if two strings are a subsequence of one another */\nconst isSubsequence = (string1, string2) => {\n  return string1.indexOf(string2)!== -1;\n};\n\n/* Return true if two strings are a subsequence of one another */\nconst isSupersequence = (string1, string2) => {\n  return string2.indexOf(string1)!== -1;\n};\n\n/* Return the index of the first character of the shortest common suffix of two strings */\nconst shortestCommonSuffix = (string1, string2) => {\n  var W = 0;\n  while (string1.charAt(string1.length - W - 1) === string2.charAt(string2.length - W - 1)) {\n    W++;\n    if (W === string1.length) {\n      return W;\n    }\n  }\n  return W;\n};\n\n/* Return the longest common subsequence of two strings */\nconst longestCommonSubsequence = (string1, string2) => {\n  var result = [ ];\n  var length = string1.length;\n  var W = 0;\n  while (W < length) {\n    result.push(string1.charAt(W));\n    W++;\n    if (W === string2.length) {\n      return result;\n    }\n    while (string1.charAt(W) === string2.charAt(W)) {\n      W++;\n      if (W === string2.length) {\n        return result;\n      }\n    }\n  }\n  return result;\n};\n\n/* Return the index of the first character of the longest common prefix of two strings */\nconst longestCommonPrefix = (string1, string2) => {\n  var W = 0;\n  while (string1.charAt(W) === string2.charAt(W)) {\n    W++;\n    if (W === string1.length) {\n      return W;\n    }\n  }\n  return W;\n};\n\n/* Return the longest common prefix of two strings */\nconst longestCommonPrefix = (string1, string2) => {\n  var result = [ ];\n  var length = string1.length;\n  var W = 0;\n  while (W < length) {\n    result.push(string1.charAt(W));\n    W++;\n    if (W === string2.length) {\n      return result;\n    }\n    while (string1.charAt(W) === string2.charAt(W)) {\n      W++;\n      if (W === string2.length) {\n        return result;\n      }\n    }\n  }\n  return result;\n};\n\n/* Return true if the given string contains any of the given strings */\nconst contains = (string, stringList) => {\n  return stringList.some(function (element) {\n    return string.indexOf(element)!== -1;\n  });\n};\n\n/* Return the index of the first character of the shortest common prefix of two strings */\nconst shortestCommonPrefix = (string1, string2) => {\n  var W = 0;\n  while (string1.charAt(W) === string2.charAt(W)) {\n    W++;\n    if (W === string1.length) {\n      return W;\n    }\n  }\n  return W;\n};\n\n/* Return the index of the last character of the shortest common prefix of two strings */\nconst shortestCommonSuffix = (string1, string2) => {\n  var W = 0;\n  while (string1.charAt(string1.length - W - 1) === string2.charAt(string2.length - W - 1)) {\n    W++;\n    if (W === string1.length) {\n      return W;\n    }\n  }\n  return W;\n};\n\n/* Return the index of the last character of the shortest common suffix of two strings */\nconst shortestCommonSuffix = (string1, string2) => {\n  var W = 0;\n  while (string1.charAt(string1.length - W - 1) === string2.charAt(string2.length - W - 1)) {\n    W++;\n    if (W === string1.length) {\n      return W;\n    }\n  }\n  return W;\n};\n\nmodule.exports = {\n  allPrefixes,\n  contains,\n  longestCommonPrefix,\n  longestCommonSuffix,\n  longestCommonSubsequence,\n  longestCommonPrefix,\n  shortestCommonSuffix,\n  shortestCommonPrefix,\n  isSubsequence,\n  isSupersequence\n};\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let E = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < E.length; i++) {\n      if (t == E [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      E.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let j = 0; j < E.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < E.length; k++) {\n      if (E [ k ] < E [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = E [ j ]\n      E [ j ] = E [ ind ]\n      E [ ind ] = tmp\n      }\n    }\n  return E\n  }\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let E = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < E.length; i++) {\n      if (t == E [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      E.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  }\n  return E\n}\n\nconsole.log(getOddCollatz(5))\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [5, 2, 4, 1, 3] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 2, 4, and 1.\n  */\nconst getEvenCollatz = (n) => {\n  let E = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < E.length; i++) {\n      if (t == E [ i ]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) {\n      break}\n    if (t % 2 == 0) {\n      E.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n  }\n  return E\n}\n\nconsole.log(getEvenCollatz(5))\n\n/*\n  Given a positive integer n, return a sorted list that has the sum of odd and even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. returned list sorted in increasing order.\n\n  For example:\n  getOddAndEvenCollatz(5) returns [1, 5, 4, 3, 2] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the sum of odd and even numbers is 4.\n  */\nconst getOddAndEvenCollatz = (n) => {\n  let E = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < E.length; i++) {\n      if (t == E [ i ]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) {\n      break}\n    if (t % 2 == 0) {\n      E.push(t); t = 3 * t + 1}\n    else {\n      E.push(t); t = 3 * t + 1}\n    }\n  }\n  return E\n}\n\nconsole.log(getOddAndEvenCollatz(5))\n\n/*\n  Given a positive integer n, return a sorted list of the first k terms in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. returned list sorted in increasing order.\n\n  For example:\n  getKthCollatz(5, 1) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the first k terms are 1, 5, 4, 2, 1.\n  */\nconst getKthCollatz = (n, k) => {\n  let E = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < E.length; i++) {\n      if (t == E [ i ]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) {\n      break}\n    if (t % 2 == 0) {\n      E.push(t); t = 3 * t + 1}\n    else {\n      E.push(t); t = 3 * t + 1}\n    }\n  }\n  return E.slice(0, k)\n}\n\nconsole.log(getKthCollatz(5, 1))\n\n/*\n  Given a positive integer n, return a sorted list of the first k terms"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(P) => {\n  return Math.pow(P, 2);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(P) => {\n  return Math.pow(P, 2);\n \n}\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let X = 0; X < lst.length; X++) {\n        for (let j = lst [ X ].length - 1; j >= 0; j--) {\n            if (lst [ X ] [ j ] == x) {\n                t.push((X, j))\n               \n", "canonical_solution": "# print('@@this is the line to split##')\n                }\n            }\n        }\n    return t\n    }\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let X = 0; X < lst.length; X++) {\n        for (let j = lst [ X ].length - 1; j >= 0; j--) {\n            if (lst [ X ] [ j ] == x) {\n                t.push((X, j))\n               \n            }\n        }\n    }\n    t.sort((a, b) => {\n        if (a[0] > b[0]) return -1\n        if (a[0] < b[0]) return 1\n        return 0\n    })\n    let l = [ ]\n    let t2 = [ ]\n    for (let i = t.length - 1; i >= 0; i--) {\n        if (t[i][0] > 0) {\n            l.push(t[i])\n        } else {\n            t2.push(t[i])\n        }\n    }\n    l.sort((a, b) => {\n        if (a[1] < b[1]) return 1\n        if (a[1] > b[1]) return -1\n        return 0\n    })\n    l.reverse()\n    return t2.concat(l)\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by rows in descending order.\n  \n  Examples:\n  getCol([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6)]\n  getCol([], 1) == []\n  getCol([[], [1], [1, 2, 3]], 3) == [(1, 0), (1, 1), (1, 2)]\n  */\nconst getCol =(lst, x) => {\n    let t = [ ]\n    for (let X = 0; X < lst.length; X++) {\n        for (let j = lst [ X ].length - 1; j >= 0; j--) {\n            if (lst [ X ] [ j ] == x) {\n                t.push((X, j))\n            }\n        }\n    }\n    t.sort((a, b) => {\n        if (a[1] > b[1]) return 1\n        if (a[1] < b[1]) return -1\n        return 0\n    })\n    let l = [ ]\n    let t2 = [ ]\n    for (let i = t.length - 1; i >= 0; i--) {\n        if (t[i][1] > 0) {\n            l.push(t[i])\n        } else {\n            t2.push(t[i])\n        }\n    }\n    l.sort((a, b) => {\n        if (a[0] < b[0]) return 1\n        if (a[0] > b[0]) return -1\n        return 0\n    })\n    l.reverse()\n    return t2.concat(l)\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(1, 2), (1, 3), (1, 0)]\n  */\nconst getCells =(lst, x) => {\n    let t = [ ]\n    for (let X = 0; X < lst.length; X++) {\n        for (let j = lst [ X ].length - 1; j >= 0; j--) {\n            if (lst [ X ] [ j ] == x) {\n                t.push((X, j))\n            }\n        }\n    }\n    t.sort((a, b) => {\n        if (a[0] > b[0]) return 1\n        if (a[0] < b[0]) return -"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let S = [ ]\n  for (let i = 0; i < x.length; i++) {\n    let h = x [ i ]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n        }\n      h =(h - r) / 10\n      }\n    if (boo) {\n      S.push(x [ i ])\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  for (let j = 0; j < S.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < S.length; k++) {\n      if (S [ k ] < S [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = S [ j ]\n      S [ j ] = S [ ind ]\n      S [ ind ] = tmp\n      }\n    }\n  return S\n  }\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let S = [ ]\n  for (let i = 0; i < x.length; i++) {\n    let h = x [ i ]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n        }\n      h =(h - r) / 10\n      }\n    if (boo) {\n      S.push(x [ i ])\n      }\n   \n  }\n  return S.sort()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m) / 2\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (K % 1 != 0) {\n    K =(n + m + 1) / 2}\n  return '0b' + K.toString(2)\n  }\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m) / 2\n \n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  \n  let avg = Math.floor(sum / (K - n + 1))\n  \n  let res = (avg << 1).toString(2)\n  return res\n}\n\nconst roundedAvg2 =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m) / 2\n  \n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  \n  let avg = Math.floor(sum / (K - n + 1))\n  \n  let res = (avg << 1) + 1\n  return res\n}\n\nconst roundedAvg3 =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m) / 2\n  \n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  \n  let avg = Math.floor(sum / (K - n + 1))\n  \n  let res = (avg << 1) + 1\n  return res\n}\n\nconst roundedAvg4 =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m) / 2\n  \n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  \n  let avg = Math.floor(sum / (K - n + 1))\n  \n  let res = (avg << 1) + 1\n  return res\n}\n\nconst roundedAvg5 =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m) / 2\n  \n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  \n  let avg = Math.floor(sum / (K - n + 1))\n  \n  let res = (avg << 1) + 1\n  return res\n}\n\nconst roundedAvg6 =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m) / 2\n  \n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  \n  let avg = Math.floor(sum / (K - n + 1))\n  \n  let res = (avg << 1) + 1\n  return res\n}\n\nconst roundedAvg7 =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m) / 2\n  \n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  \n  let avg = Math.floor(sum / (K - n + 1))\n  \n  let res = (avg << 1) + 1\n  return res\n}\n\nconst roundedAvg8 =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m) / 2\n  \n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  \n  let avg = Math.floor(sum / (K - n + 1))\n  \n  let res = (avg << 1) + 1\n  return res\n}\n\nconst roundedAvg9 =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m) / 2\n  \n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  \n  let avg = Math.floor(sum / (K - n + 1))\n  \n  let res = (avg << 1) + 1\n  return res\n}\n\nconst roundedAvg10 =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m) / 2\n  \n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  \n  let avg = Math.floor(sum / (K - n + 1))\n  \n  let res = (avg << 1) + 1\n  return res\n}\n\nconst roundedAvg11 =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m) / 2\n  \n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  \n  let avg = Math.floor(sum / (K - n + 1))\n  \n  let res = (avg << 1) + 1\n  return res\n}\n\nconst roundedAvg12 =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m) / 2\n  \n  let sum = 0\n  for (let i = n; i <= m; i++) {\n    sum += i\n  }\n  \n  let avg = Math.floor(sum / (K - n + 1))\n  \n  let res = (avg << 1) + 1\n  return res\n}\n\nconst roundedAvg13 =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let K =(n + m)"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let c = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in c) {\n      c [ t [ m ] ]++\n      }\n    else {\n      c [ t [ m ] ] = 1\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  s = Object.keys(c).sort(function(a, b) {\n    return - c [ a ] + c [ b ];}\n  );\n  if (s.length == 0) {\n    return {\n      }\n    }\n  let g = c [ s [ 0 ] ]\n  let l = {\n    }\n  for (let ss = 0; ss < s.length; ss++) {\n    if (c [ s [ ss ] ] == g) {\n      l [ s [ ss ] ] = c [ s [ ss ] ]\n      }\n    }\n  return l\n  }\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let c = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in c) {\n      c [ t [ m ] ]++\n      }\n    else {\n      c [ t [ m ] ] = 1\n      }\n    }\n \n  return c\n}\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = ''\nfor (let i2 = 0; i2 < s.length; i2++) {\n    let p = s [ i2 ].charCodeAt() + 4\n    if (p > 122) {\n      p-=26}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    t+=String.fromCharCode(p)\n    }\n  return t\n  }\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = ''\nfor (let i2 = 0; i2 < s.length; i2++) {\n    let p = s [ i2 ].charCodeAt() + 4\n    if (p > 122) {\n      p-=26}\n   \n    t += String.fromCharCode(p)\n    }\n  return t\n  }\n  \n\n/* Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('jm') returns 'hi'\n  decrypt('lm') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt =(s) => {\n  let t = ''\n  for (let i2 = 0; i2 < s.length; i2++) {\n    let p = s [ i2 ].charCodeAt() - 4\n    if (p < 97) {\n      p+=26}\n   \n    t += String.fromCharCode(p)\n    }\n  return t\n  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let t = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((t >= 65 && t <= 90) ||(t >= 97 && t <= 122)) {\n      return true}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false\n    }\n  if (txt [ len - 2 ] == ' ' &&((t >= 65 && t <= 90) ||(t >= 97 && t <= 122))) {\n    return true}\n  return false\n  }\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let t = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((t >= 65 && t <= 90) ||(t >= 97 && t <= 122)) {\n      return true}\n   \n    else {\n      return false}\n  }\n  let t2 = txt [ len - 2 ].charCodeAt()\n  if ((t >= 65 && t <= 90) ||(t >= 97 && t <= 122) ||(t >= 48 && t <= 57)) {\n    return true}\n  else {\n    return false}\n}\n\n/*\n  Create a function that returns true if the last two\n  characters of a given string are both alphabetical\n  characters, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastTwoCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastTwoCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastTwoCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastTwoCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastTwoCharsAreALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let t = txt [ len - 2 ].charCodeAt()\n  let t2 = txt [ len - 1 ].charCodeAt()\n  if ((t >= 97 && t <= 122) && (t2 >= 97 && t2 <= 122)) {\n    return true}\n  else {\n    return false}\n}\n\n/*\n  Create a function that returns true if the last three\n  characters of a given string are all alphabetical\n  characters, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastThreeCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastThreeCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastThreeCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastThreeCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastThreeCharsAreALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let t = txt [ len - 3 ].charCodeAt()\n  let t2 = txt [ len - 2 ].charCodeAt()\n  let t3 = txt [ len - 1 ].charCodeAt()\n  if ((t >= 97 && t <= 122) && (t2 >= 97 && t2 <= 122) && (t3 >= 97 && t3 <= 122)) {\n    return true}\n  else {\n    return false}\n}\n\n/*\n  Create a function that returns true if the last four\n  characters of a given string are all alphabetical\n  characters, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastFourCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastFourCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastFourCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastFourCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastFourCharsAreALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let t = txt [ len - 4 ].charCodeAt()\n  let t2 = txt [ len - 3 ].charCodeAt()\n  let t3 = txt [ len - 2 ].charCodeAt()\n  let t4 = txt [ len - 1 ].charCodeAt()\n  if ((t >= 97 && t <= 122) && (t2 >= 97 && t2 <= 122) && (t3 >= 97 && t3 <= 122) && (t4 >= 97 && t4 <= 122)) {\n    return true}\n  else {\n    return false}\n}\n\n/*\n  Create a function that returns true if the last five\n  characters of a given string are all alphabetical\n  characters, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastFiveCharsAreALetter(\"apple pie\") ➞ false\n  checkIfLastFiveCharsAreALetter(\"apple pi e\") ➞ true\n  checkIfLastFiveCharsAreALetter(\"apple pi e \") ➞ false\n  checkIfLastFiveCharsAreALetter(\"\") ➞ false\n  */\nconst checkIfLastFiveCharsAreALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let t = txt [ len - 5 ].charCodeAt()\n  let t2 = txt [ len - 4 ].charCodeAt()\n  let t3 = txt [ len - 3 ].charCodeAt()\n  let t4 = txt [ len - 2 ].charCodeAt()\n  let t5 = txt [ len - 1 ].charCodeAt()\n  if ((t >= 97 && t <= 122) && (t2 >= 97 && t2 <= 122) && (t3 >= 97 && t3 <= 122) && (t4 >= 97 && t4 <= 122) && (t5 >= 97 && t5 <= 122)) {\n    return true}\n  else {\n    return false}\n}\n\n/*\n  Create a function that returns true if the last six\n  characters of a given string are all alphabetical\n  characters, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastSix"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  for (let T = word.length - 2; T > 0; T--) {\n    if (\n     !(word [ T ] != 'a' && word [ T ] != 'e' && word [ T ] != 'i' && word [ T ] != 'o' && word [ T ] != 'u' && word [ T ] != 'A' &&\n    word [ T ] != 'U' && word [ T ] != 'O' && word [ T ] != 'I' && word [ T ] != 'E')\n     &&\n    (word [ T + 1 ] != 'a' && word [ T + 1 ] != 'e' && word [ T + 1 ] != 'i' && word [ T + 1 ] != 'o' && word [ T + 1 ] != 'u' && word [ T + 1 ] != 'A' &&\n    word [ T + 1 ] != 'U' && word [ T + 1 ] != 'O' && word [ T + 1 ] != 'I' && word [ T + 1 ] != 'E')\n     &&\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    (word [ T - 1 ] != 'a' && word [ T - 1 ] != 'e' && word [ T - 1 ] != 'i' && word [ T - 1 ] != 'o' && word [ T - 1 ] != 'u' && word [ T - 1 ] != 'A' &&\n    word [ T - 1 ] != 'U' && word [ T - 1 ] != 'O' && word [ T - 1 ] != 'I' && word [ T - 1 ] != 'E')\n    ) {\n      return word [ T ]\n      }\n    }\n  return ''}\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  for (let T = word.length - 2; T > 0; T--) {\n    if (\n    !(word [ T ]!= 'a' && word [ T ]!= 'e' && word [ T ]!= 'i' && word [ T ]!= 'o' && word [ T ]!= 'u' && word [ T ]!= 'A' &&\n    word [ T ]!= 'U' && word [ T ]!= 'O' && word [ T ]!= 'I' && word [ T ]!= 'E')\n     &&\n    (word [ T + 1 ]!= 'a' && word [ T + 1 ]!= 'e' && word [ T + 1 ]!= 'i' && word [ T + 1 ]!= 'o' && word [ T + 1 ]!= 'u' && word [ T + 1 ]!= 'A' &&\n    word [ T + 1 ]!= 'U' && word [ T + 1 ]!= 'O' && word [ T + 1 ]!= 'I' && word [ T + 1 ]!= 'E')\n     &&\n   \n    (word [ T - 1 ]!= 'a' && word [ T - 1 ]!= 'e' && word [ T - 1 ]!= 'i' && word [ T - 1 ]!= 'o' && word [ T - 1 ]!= 'u' && word [ T - 1 ]!= 'A' &&\n    word [ T - 1 ]!= 'U' && word [ T - 1 ]!= 'O' && word [ T - 1 ]!= 'I' && word [ T - 1 ]!= 'E')\n    ) {\n      return word [ T ];\n    }\n  }\n  return \"\";\n}\n\n//console.log(getClosestVowel(\"yogurt\"));\n//console.log(getClosestVowel(\"FULL\"));\n//console.log(getClosestVowel(\"quick\"));\n//console.log(getClosestVowel(\"ab\"));\n\n/*\n  Let's solve this with regex, we'll find consonant from the left and vowel from the right.\n  \n  var re = /(^\\w*\\b\\w+\\b$|^\\w*\\b\\w+\\b\\w*$|^\\w*\\b\\w+\\b\\w*$|^\\w*\\b\\w+\\b\\w*$)/;\n  \n  console.log(re.test(\"FULL\"));\n  console.log(re.test(\"quick\"));\n  console.log(re.test(\"ab\"));\n  \n  re = /(^\\w*\\b\\w+\\b\\w*$|^\\w*\\b\\w+\\b\\w*$|^\\w*\\b\\w+\\b\\w*$|^\\w*\\b\\w+\\b\\w*$)/;\n  console.log(re.test(\"FULL\"));\n  console.log(re.test(\"quick\"));\n  console.log(re.test(\"ab\"));\n  \n  console.log(re.test(\"yogurt\"));\n  console.log(re.test(\"FULL\"));\n  console.log(re.test(\"quick\"));\n  console.log(re.test(\"ab\"));\n  */\n\n/*\n  Let's solve this with regular expression.\n\n  var re = /^\\w+\\b(?=\\w+\\b|\\b\\w+\\b|\\b\\w+\\b|\\b\\w+\\b)$/;\n  console.log(re.test(\"FULL\"));\n  console.log(re.test(\"quick\"));\n  console.log(re.test(\"ab\"));\n  console.log(re.test(\"yogurt\"));\n  console.log(re.test(\"FULL\"));\n  console.log(re.test(\"quick\"));\n  console.log(re.test(\"ab\"));\n  console.log(re.test(\"yogurt\"));\n  */\n\nvar re = /^\\w+\\b(?=\\w+\\b|\\b\\w+\\b|\\b\\w+\\b|\\b\\w+\\b)$/;\nconsole.log(re.test(\"FULL\"));\nconsole.log(re.test(\"quick\"));\nconsole.log(re.test(\"ab\"));\nconsole.log(re.test(\"yogurt\"));\nconsole.log(re.test(\"FULL\"));\nconsole.log(re.test(\"quick\"));\nconsole.log(re.test(\"ab\"));\nconsole.log(re.test(\"yogurt\"));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  for (let n = 0; n < s.length; n+=2) {\n    if (s [ n ] == 'A' || s [ n ] == 'E' || s [ n ] == 'I' || s [ n ] == 'O' || s [ n ] == 'U') {\n      p++}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return p\n  }\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  for (let n = 0; n < s.length; n+=2) {\n    if (s [ n ] == 'A' || s [ n ] == 'E' || s [ n ] == 'I' || s [ n ] == 'O' || s [ n ] == 'U') {\n      p++}\n   \n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(z15B) => {\n  let min = z15B [ 0 ]\n  for (let i = 0; i < z15B.length; i++) {\n    for (let j = i + 1; j <= z15B.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s+=z15B [ k ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (s < min) {\n        min = s}\n      }\n    }\n  return min\n  }\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(z15B) => {\n  let min = z15B [ 0 ]\n  for (let i = 0; i < z15B.length; i++) {\n    for (let j = i + 1; j <= z15B.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s+=z15B [ k ]\n       \n      }\n      min = Math.min(min, s)\n    }\n  }\n  return min\n}\n\nconst main = () => {\n  let n = parseInt(process.argv[2])\n  let z15B = Array(n)\n  for (let i = 0; i < n; i++) {\n    let z15A = parseInt(process.argv[3+i])\n    z15B[i] = z15A\n  }\n  console.log(minSubArraySum(z15B))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, q, c) => {\n  return(a * a + q * q == c * c || a * a == q * q + c * c || q * q == a * a + c * c)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, q, c) => {\n  return(a * a + q * q == c * c || a * a == q * q + c * c || q * q == a * a + c * c)\n \n}\n\n/*\n Return the area of a triangle. The area of a triangle is the half the length\n  of the cross product of two sides of the triangle.\n  Example:\n  areaOfTriangle(1, 2, 3) == 6\n  areaOfTriangle(1, 2, 4) == 12\n  areaOfTriangle(2, 4, 6) == 16\n  areaOfTriangle(2, 4, 8) == 24\n  areaOfTriangle(4, 8, 12) == 32\n  */\nconst areaOfTriangle =(a, q, c) => {\n  return ((a * c) + (q * q) - (2 * q * a) - (2 * c * q)) / (2 * (a + q + c))\n}\n\n/*\n Return the perimeter of a triangle. The perimeter of a triangle is the sum of\n  its sides.\n  Example:\n  perimeterOfTriangle(1, 2, 3) == 8\n  perimeterOfTriangle(1, 2, 4) == 12\n  perimeterOfTriangle(2, 4, 6) == 16\n  perimeterOfTriangle(2, 4, 8) == 24\n  */\nconst perimeterOfTriangle =(a, q, c) => {\n  return(a + q + c)\n}\n\n/*\n Return the length of the longest side of a triangle.\n  Example:\n  longestSide(1, 2, 3) == 3\n  longestSide(1, 2, 4) == 4\n  longestSide(2, 4, 6) == 6\n  longestSide(2, 4, 8) == 8\n  */\nconst longestSide =(a, q, c) => {\n  return Math.max(Math.max(a, q), c)\n}\n\n/*\n Return the short side of a triangle.\n  Example:\n  shortSide(1, 2, 3) == 2\n  shortSide(1, 2, 4) == 2\n  shortSide(2, 4, 6) == 4\n  shortSide(2, 4, 8) == 4\n  */\nconst shortSide =(a, q, c) => {\n  return Math.min(Math.min(a, q), c)\n}\n\n/*\n Return the width of a triangle. The width of a triangle is the length of\n  the shorter side of the triangle.\n  Example:\n  widthOfTriangle(1, 2, 3) == 2\n  widthOfTriangle(1, 2, 4) == 2\n  widthOfTriangle(2, 4, 6) == 4\n  widthOfTriangle(2, 4, 8) == 4\n  */\nconst widthOfTriangle =(a, q, c) => {\n  return(Math.min(Math.min(a, q), c) - Math.max(Math.max(a, q), c))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, j) => {\n  return x + j;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, j) => {\n  return x + j;\n \n};\n \nconsole.log(add(2, 3));\nconsole.log(add(5, 7));\n \n/*\n  * Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, j) => {\n  return x - j;\n};\n \nconsole.log(subtract(2, 3));\nconsole.log(subtract(5, 7));\n \n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  21\n  */\nconst multiply = (x, j) => {\n  return x * j;\n};\n \nconsole.log(multiply(2, 3));\nconsole.log(multiply(5, 7));\n \n/*\n  * Divide two numbers x and y\n  >>> divide(2, 3)\n  0.5\n  >>> divide(5, 7)\n  2\n  */\nconst divide = (x, j) => {\n  return x / j;\n};\n \nconsole.log(divide(2, 3));\nconsole.log(divide(5, 7));\n \n/*\n  * Modulo\n  *\n  * The modulo operator returns the remainder after dividing x by y.\n  *\n  * For example:\n  *   1 % 3 = 1\n  *   4 % 3 = 1\n  *   3 % 3 = 0\n  *   4 % 4 = 4\n  *\n  * More info:\n  *   https://en.wikipedia.org/wiki/Modulo_operation\n  */\nconst modulo = (x, y) => {\n  return x % y;\n};\n \nconsole.log(modulo(1, 3));\nconsole.log(modulo(4, 3));\nconsole.log(modulo(3, 3));\nconsole.log(modulo(4, 4));\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n  .map(T =>(T.toUpperCase() == T ? T.toLowerCase() : T.toUpperCase()))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  .join('');\n  }\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n .map(T =>(T.toUpperCase() == T? T.toLowerCase() : T.toUpperCase()))\n \n .join('')\n}\n\n/*\n  For a given string, capitalize the first character\n  >>> capitalize('hello')\n  'Hello'\n  */\nconst capitalize =(string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nconst removeNewlines =(string) => {\n  return string.replace(/\\r\\n|\\r|\\n/g, '')\n}\n\nconst removeSpace =(string) => {\n  return string.replace(/\\s+/g, '')\n}\n\nconst convertToTitleCase =(string) => {\n  return string.replace(/\\w\\S*/g, (txt) => (txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()))\n}\n\nconst convertToLowerCase =(string) => {\n  return string.replace(/\\w\\S*/g, (txt) => (txt.charAt(0).toLowerCase() + txt.substr(1)))\n}\n\nconst capitalizeFirstLetter =(string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nconst capitalizeAll =(string) => {\n  return string.replace(/\\w\\S*/g, (txt) => (txt.charAt(0).toUpperCase() + txt.substr(1)))\n}\n\nconst convertToCapitalizedWords =(string) => {\n  return string.replace(/\\w\\S*/g, (txt) => (txt.charAt(0).toUpperCase() + txt.substr(1)))\n}\n\nconst convertToTitleCase =(string) => {\n  return string.replace(/\\w\\S*/g, (txt) => (txt.charAt(0).toUpperCase() + txt.substr(1)))\n}\n\nconst splitWords =(string) => {\n  return string.replace(/\\s+/g,'')\n .split(/\\s+/)\n}\n\nconst stripNewlines =(string) => {\n  return string.replace(/\\r\\n|\\r|\\n/g, '')\n}\n\nconst removeSpecialCharacters =(string) => {\n  return string.replace(/[^a-zA-Z0-9\\s\\[\\]]/g, '')\n}\n\nconst convertToTitleCase =(string) => {\n  return string.replace(/\\w\\S*/g, (txt) => (txt.charAt(0).toUpperCase() + txt.substr(1)))\n}\n\nconst removePunctuation =(string) => {\n  return string.replace(/[^a-zA-Z0-9\\s\\[\\]]/g, '')\n}\n\nconst getRandomInt =(min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nconst removeSpecialCharacters =(string) => {\n  return string.replace(/[^a-zA-Z0-9\\s\\[\\]]/g, '')\n}\n\nconst removeNewlines =(string) => {\n  return string.replace(/\\r\\n|\\r|\\n/g, '')\n}\n\nconst removeSpace =(string) => {\n  return string.replace(/\\s+/g, '')\n}\n\nconst convertToTitleCase =(string) => {\n  return string.replace(/\\w\\S*/g, (txt) => (txt.charAt(0).toUpperCase() + txt.substr(1)))\n}\n\nconst removePunctuation =(string) => {\n  return string.replace(/[^a-zA-Z0-9\\s\\[\\]]/g, '')\n}\n\nconst splitWords =(string) => {\n  return string.replace(/\\s+/g,'')\n .split(/\\s+/)\n}\n\nconst removePunctuation =(string) => {\n  return string.replace(/[^a-zA-Z0-9\\s\\[\\]]/g, '')\n}\n\nconst capitalizeFirstLetter =(string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nconst capitalizeAll =(string) => {\n  return string.replace(/\\w\\S*/g, (txt) => (txt.charAt(0).toUpperCase() + txt.substr(1)))\n}\n\nconst capitalizeFirstLetter =(string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nconst capitalizeAll =(string) => {\n  return string.replace(/\\w\\S*/g, (txt) => (txt.charAt(0).toUpperCase() + txt.substr(1)))\n}\n\nconst convertToCapitalizedWords =(string) => {\n  return string.replace(/\\w\\S*/g, (txt) => (txt.charAt(0).toUpperCase() + txt.substr(1)))\n}\n\nconst convertToTitleCase =(string) => {\n  return string.replace(/\\w\\S*/g, (txt) => (txt.charAt(0).toUpperCase() + txt.substr(1)))\n}\n\nconst splitWords =(string) => {\n  return string.replace(/\\s+/g,'')\n .split(/\\s+/)\n}\n\nconst removePunctuation =(string) => {\n  return string.replace(/[^a-zA-Z0-9\\s\\[\\]]/g, '')\n}\n\nconst splitWords =(string) => {\n  return string.replace(/\\s+/g,'')\n .split(/\\s+/)\n}\n\nconst removePunctuation =(string) => {"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  for (let q = 0; q < string.length; q++) {\n    if (string [ q ] == '[') {\n      opening_bracket_index.push(q)\n      }\n    else {\n      closing_bracket_index1.push(q)\n      }\n    }\n  let closing_bracket_index = [ ]\n  for (let q = 0; q < closing_bracket_index1.length; q++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1 [ closing_bracket_index1.length - q - 1 ])\n    }\n  let cnt = 0\n  let q = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (q < l && opening_bracket_index [ k ] < closing_bracket_index [ q ]) {\n      cnt+=1;\n      q+=1;\n      }\n    }\n  return cnt >= 2\n  }\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  for (let q = 0; q < string.length; q++) {\n    if (string [ q ] == '[') {\n      opening_bracket_index.push(q)\n      }\n    else {\n      closing_bracket_index1.push(q)\n      }\n    }\n  let closing_bracket_index = [ ]\n  for (let q = 0; q < closing_bracket_index1.length; q++) {\n   \n    if (closing_bracket_index1 [ q ] + 1 == opening_bracket_index [ q ]) {\n      closing_bracket_index.push(closing_bracket_index1 [ q ])\n      }\n    }\n  let isNested = false\n  if (opening_bracket_index.length == 0) {\n    isNested = true\n  }\n  if (opening_bracket_index.length == 0) {\n    isNested = false\n  }\n  return isNested\n  }\n\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[][]]'));\nconsole.log(isNested('[][]][][[][]'));\nconsole.log(isNested('[][][]'));\nconsole.log(isNested('[][][]]'));\nconsole.log(isNested('[][][]][[][]'));\nconsole.log(isNested('[][][]][[][]][[][]'));\nconsole.log(isNested('[][][]][[][][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));\nconsole.log(isNested('[][][]][[][][]][[][]'));"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let G = 0; G < s.length; G++) {\n    let y = s [ G ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    p+=String.fromCharCode(y)\n    }\n  if (t == 1) {\n    return p}\n  let u = ''\nfor (let G = 0; G < p.length; G++) {\n    u+=p [ p.length - G - 1 ]\n    }\n  return u\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let G = 0; G < s.length; G++) {\n    let y = s [ G ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n      }\n    else {\n      t = 0;\n      }\n    if (t) {\n      p+=s [ G ];\n      }\n    else {\n      p+=s [ G ].toUpperCase();\n      }\n    }\n  return p;\n  };\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, I) => {\n  for (const e of l)\n  if (e >= I)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, I) => {\n  for (const e of l)\n  if (e >= I)\n \n  return false;\n  return true;\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\n\n/*Return a list of numbers in the range [a, b] inclusively.\n  >>> range(10, 20)\n  [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> range(2, 10)\n  [2, 3, 4, 5, 6, 7, 8, 9]\n  >>> range(3, 10, 2)\n  [3, 5, 7]\n  >>> range(3, 10, -2)\n  [3, 1, -1]\n  >>> range(1, -2, -2)\n  [1]\n  >>> range(1, -2, -1)\n  []\n  */\nconst range =(a, b, i = 1) => {\n  const x = [];\n  for (const i of Array.from(Array.range(a, b, i)))\n  x.push(i);\n  return x;\n};\n\n/*\n  >>> range(10, 20)\n  [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> range(2, 10)\n  [2, 3, 4, 5, 6, 7, 8, 9]\n  >>> range(3, 10, 2)\n  [3, 5, 7]\n  >>> range(3, 10, -2)\n  [3, 1, -1]\n  >>> range(1, -2, -2)\n  [1]\n  >>> range(1, -2, -1)\n  []\n  */\n\n/*Return a list of numbers in the range [a, b] inclusively, with\n  the specified step size.\n  >>> range(1, 10, 2)\n  [1, 3, 5, 7, 9]\n  >>> range(1, 10, 3)\n  [1, 4, 7]\n  >>> range(1, 10, -2)\n  [1, -1]\n  >>> range(1, -2, -2)\n  []\n  */\nconst range =(a, b, step = 1) => {\n  const x = [];\n  for (const i of Array.from(Array.range(a, b, step)))\n  x.push(i);\n  return x;\n};\n\n/*\n  >>> range(1, 10, 2)\n  [1, 3, 5, 7, 9]\n  >>> range(1, 10, 3)\n  [1, 4, 7]\n  >>> range(1, 10, -2)\n  [1, -1]\n  >>> range(1, -2, -2)\n  []\n  */\n\n/* Return a list of numbers in the range [a, b] inclusively, with\n  the specified step size, beginning from the start value.\n  >>> range(1, 10, 2, 1)\n  [1, 3, 5, 7, 9]\n  >>> range(1, 10, 3, 1)\n  [1, 4, 7]\n  >>> range(1, 10, -2, 1)\n  [1, -1]\n  >>> range(1, -2, -2, 1)\n  []\n  */\nconst range =(a, b, step = 1, start = 0) => {\n  const x = [];\n  for (const i of Array.from(Array.range(start, b, step)))\n  x.push(i);\n  return x;\n};\n\n/*\n  >>> range(1, 10, 2, 1)\n  [1, 3, 5, 7, 9]\n  >>> range(1, 10, 3, 1)\n  [1, 4, 7]\n  >>> range(1, 10, -2, 1)\n  [1, -1]\n  >>> range(1, -2, -2, 1)\n  []\n  */\n\n/* Return a list of numbers in the range [a, b] inclusively, with\n  the specified step size, beginning from the start value.\n  >>> range(1, 10, 2, 1)\n  [1, 3, 5, 7, 9]\n  >>> range(1, 10, 3, 1)\n  [1, 4, 7]\n  >>> range(1, 10, -2, 1)\n  [1, -1]\n  >>> range(1, -2, -2, 1)\n  []\n  */\nconst range =(a, b, step = 1, start = 0) => {\n  const x = [];\n  for (const i of Array.from(Array.range(start, b, step)))\n  x.push(i);\n  return x;\n};\n\n/*\n  >>> range(1, 10, 2, 1)\n  [1, 3, 5, 7, 9]\n  >>> range(1, 10, 3, 1)\n  [1, 4, 7]\n  >>> range(1, 10, -2, 1)\n  [1, -1]\n  >>> range(1, -2, -2, 1)\n  []\n  */\n\n/* Return a list of numbers in the range [a, b] inclusively, with\n  the specified step size, beginning from the start value,\n  and ending at the end value.\n  >>> range(1, 10, 2, 1, 4)\n  [1, 3, 5, 7, 9]\n  >>> range(1, 10, 3, 1, 4)\n  [1, 4, 7]\n  >>> range(1, 10, -2, 1, 4)\n  [1, 3, 5, 7]\n  >>> range(1, -2, -2, 1, 4)\n  [1, -1]\n  >>> range(1, -2, -2, 1, 4)\n  []\n  */\nconst range =(a, b, step = 1, start = 0, end = -1) => {\n  const x = [];\n  for (const i of Array.from(Array.range(start, end, step)))"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let Q = i.toString()\n    let p = 1\n    for (let j = 0; j < Q.length; j++) {\n      if (Q [ j ] != Q [ Q.length - j - 1 ]) {\n        p = 0;\n        break;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    if (p == 1) {\n      if (Q % 2 == 0) {\n        e++}\n      else {\n        o++}\n      }\n    }\n  return(e, o)\n  }\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let Q = i.toString()\n    let p = 1\n    for (let j = 0; j < Q.length; j++) {\n      if (Q [ j ]!= Q [ Q.length - j - 1 ]) {\n        p = 0;\n        break;\n       \n      }\n    }\n    if (p) {\n      e++\n    } else {\n      o++\n    }\n  }\n  return [e, o]\n}\n\n/*\n  Given a positive integer n, return a list that contains the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: [1, 2]\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: [4, 6]\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned list contains the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let Q = i.toString()\n    let p = 1\n    for (let j = 0; j < Q.length; j++) {\n      if (Q [ j ]!= Q [ Q.length - j - 1 ]) {\n        p = 0;\n        break\n      }\n    }\n    if (p) {\n      e++\n    } else {\n      o++\n    }\n  }\n  return [e, o]\n}\n\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let Q = i.toString()\n    let p = 1\n    for (let j = 0; j < Q.length; j++) {\n      if (Q [ j ]!= Q [ Q.length - j - 1 ]) {\n        p = 0;\n        break\n      }\n    }\n    if (p) {\n      e++\n    } else {\n      o++\n    }\n  }\n  return [e, o]\n}\n\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let Q = i.toString()\n    let p = 1\n    for (let j = 0; j < Q.length; j++) {\n      if (Q [ j ]!= Q [ Q.length - j - 1 ]) {\n        p = 0;\n        break\n      }\n    }\n    if (p) {\n      e++\n    } else {\n      o++\n    }\n  }\n  return [e, o]\n}\n\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let Q = i.toString()\n    let p = 1\n    for (let j = 0; j < Q.length; j++) {\n      if (Q [ j ]!= Q [ Q.length - j - 1 ]) {\n        p = 0;\n        break\n      }\n    }\n    if (p) {\n      e++\n    } else {\n      o++\n    }\n  }\n  return [e, o]\n}\n\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let Q = i.toString()\n    let p = 1\n    for (let j = 0; j < Q.length; j++) {\n      if (Q [ j ]!= Q [ Q.length - j - 1 ]) {\n        p = 0;\n        break\n      }\n    }\n    if (p) {\n      e++\n    } else {\n      o++\n    }\n  }\n  return [e, o]\n}\n\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let Q = i.toString()\n    let p = 1\n    for (let j = 0; j < Q.length; j++) {\n      if (Q [ j ]!= Q [ Q.length - j - 1 ]) {\n        p = 0;\n        break\n      }\n    }\n    if (p) {\n      e++\n    } else {\n      o++\n    }\n  }\n  return [e, o]\n}\n\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let Q = i.toString()\n    let p = 1\n    for (let j = 0; j < Q.length; j++) {\n      if (Q [ j ]!= Q [ Q.length - j - 1 ]) {\n        p = 0;\n        break\n      }\n    "}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  for (let H = n - 1; H >= 0; H--)\n  if (n % H == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return H;\n  }\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  for (let H = n - 1; H >= 0; H--)\n  if (n % H == 0)\n \n    return H;\n  return -1;\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst smallestDivisor =(n) => {\n  for (let H = n - 1; H >= 0; H--)\n  if (n % H == 0)\n  if (n > H)\n    return H;\n}\n\n/* Given two numbers, a and b, return the sum of their greatest common divisor\n  >>> gcd(30, 60)\n  20\n  >>> gcd(30, 60)\n  20\n  >>> gcd(1, 9)\n  1\n  >>> gcd(4, 12)\n  4\n  */\nconst gcd = (a, b) => {\n  while (b > 0) {\n    let t = b;\n    b = a % b;\n    a = t;\n  }\n  return a;\n}\n\n/* Given two numbers, a and b, return the product of their greatest common divisor\n  >>> gcd(30, 60)\n  20\n  >>> gcd(30, 60)\n  20\n  >>> gcd(1, 9)\n  1\n  >>> gcd(4, 12)\n  12\n  */\nconst lcm = (a, b) => {\n  return (a * b) / gcd(a, b);\n}\n\n/* Given two numbers, a and b, return their greatest common divisor\n  >>> gcd(30, 60)\n  20\n  >>> gcd(30, 60)\n  20\n  >>> gcd(1, 9)\n  1\n  >>> gcd(4, 12)\n  4\n  */\nconst gcd = (a, b) => {\n  while (b > 0) {\n    let t = b;\n    b = a % b;\n    a = t;\n  }\n  return a;\n}\n\n/* Given two numbers, a and b, return their least common multiple\n  >>> lcm(30, 60)\n  600\n  >>> lcm(30, 60)\n  600\n  >>> lcm(1, 9)\n  9\n  >>> lcm(4, 12)\n  12\n  */\nconst lcm = (a, b) => {\n  return (a * b) / gcd(a, b);\n}\n\n/* Given two numbers, a and b, return the sum of their least common multiple\n  >>> lcm(30, 60)\n  600\n  >>> lcm(30, 60)\n  600\n  >>> lcm(1, 9)\n  9\n  >>> lcm(4, 12)\n  12\n  */\nconst lcm = (a, b) => {\n  return (a * b) / gcd(a, b);\n}\n\n/* Given a positive number n, find the sum of all numbers that are less than or equal to n and divide n by their sum\n  >>> sumOfLargestDivisor(20)\n  6\n  >>> sumOfLargestDivisor(20)\n  6\n  >>> sumOfLargestDivisor(21)\n  7\n  >>> sumOfLargestDivisor(9)\n  1\n  */\nconst sumOfLargestDivisor =(n) => {\n  const largestDivisor = largestDivisor(n);\n  const sum = 0;\n  for (let H = largestDivisor; H <= n; H++) {\n    if (n % H == 0)\n      sum += H;\n  }\n  return sum;\n}\n\n/* Given a positive number n, find the sum of all numbers that are less than or equal to n and divide n by their sum\n  >>> sumOfLargestDivisor(20)\n  6\n  >>> sumOfLargestDivisor(20)\n  6\n  >>> sumOfLargestDivisor(21)\n  7\n  >>> sumOfLargestDivisor(9)\n  1\n  */\nconst sumOfLargestDivisor =(n) => {\n  const largestDivisor = largestDivisor(n);\n  const sum = 0;\n  for (let H = largestDivisor; H <= n; H++) {\n    if (n % H == 0)\n      sum += H;\n  }\n  return sum;\n}\n\n/* Given a positive number n, find the sum of all numbers that are less than or equal to n and divide n by their sum\n  >>> sumOfLargestDivisor(20)\n  6\n  >>> sumOfLargestDivisor(20)\n  6\n  >>> sumOfLargestDivisor(21)\n  7\n  >>> sumOfLargestDivisor(9)\n  1\n  */\nconst sumOfLargestDivisor =(n) => {\n  const largestDivisor = largestDivisor(n);\n  const sum = 0;\n  for (let H = largestDivisor; H <= n; H++) {\n    if (n % H == 0)\n      sum += H;\n  }\n  return sum;\n}\n\n/* Given a positive number n, find the sum of all numbers that are less than or equal to n and divide n by their sum\n  >>> sumOfLargestDivisor(20)\n  6\n  >>> sumOfLargestDivisor(20)\n  6\n  >>> sumOfLargestDivisor(21)\n  7\n  >>> sumOfLargestDivisor(9)\n  1\n  */\nconst sumOfLargestDivisor =(n) => {\n  const largestDivisor = largestDivisor(n);\n  const sum = 0;\n  for (let H = largestDivisor; H <= n; H++) {\n    if (n % H == 0)\n      sum += H;\n  }\n  return sum;\n}\n\n/* Given two numbers, a and b, return the difference of their least common multiple\n  >>> lcm(30, 60)\n  600\n  >>> lcm(30, 60)\n  600\n  >>> lcm(1, 9)\n  9"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let G = 2; G < n; G++)\n    if (n % G == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if ( !isPrime(i)) continue;\n    for (let G = 2; G < 101; G++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if ( !isPrime(G)) continue;\n      for (let k = 2; k < 101; k++) {\n        if ( !isPrime(k)) continue;\n        if (i * G * k == a)\n        return true;\n        }\n      }\n    }\n  return false;\n  }\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let G = 2; G < n; G++)\n    if (n % G == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let G = 2; G < 101; G++) {\n     \n      if (isPrime(i * G)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nconsole.log(isMultiplyPrime(30));<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(v) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = v.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n  , 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (v.at( - 1) == 'y' || v.at( - 1) == 'Y')\n  n_vowels+=1;\n  return n_vowels;\n  }\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(v) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = v.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n , 0);\n \n  if(v.length === 2) {\n    return n_vowels + (vowels.includes(v[1]));\n  }\n  return n_vowels;\n}\n\nconsole.log(vowelsCount(\"ABCEDY\"));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let j = 0; j < 8; j++) {\n    if (y [ j ] == planet1) {\n      lo = j}\n    }\n  for (let j = 0; j < 8; j++) {\n    if (y [ j ] == planet2) {\n      hi = j}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (lo == - 1 || hi == - 1 || lo == hi) {\n    return [ ]}\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n    }\n  for (let j = lo + 1; j < hi; j++) {\n    u.push(y [ j ])\n    }\n  return u\n  }\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let j = 0; j < 8; j++) {\n    if (y [ j ] == planet1) {\n      lo = j}\n    }\n  for (let j = 0; j < 8; j++) {\n    if (y [ j ] == planet2) {\n      hi = j}\n    }\n \n  if (lo > hi) {\n    return [ ]\n  }\n \n  while (lo <= hi) {\n    u.push(y [ lo ])\n    lo ++\n  }\n \n  return u\n}\n\n//console.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\n\n//console.log(bf(\"Mercury\", \"Mercury\"))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(J, b) => {\n  if (J < 0) {\n    J = - J}\n  if (b < 0) {\n    b = - b}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(J % 10) *(b % 10)\n  }\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(J, b) => {\n  if (J < 0) {\n    J = - J}\n  if (b < 0) {\n    b = - b}\n \n  const t = 1\n  let res = 0\n  while (J >= t) {\n    res += b / t\n    J -= t\n  }\n  return res\n}\n\nexport default multiply\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(R) => {\n  R = Math.abs(R);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(Math.pow(Math.round(Math.pow(R, 1.0 / 3.0)), 3) == R);\n  }\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(R) => {\n  R = Math.abs(R);\n \n  if (R === 1) {\n    return true;\n  } else if (R === 0) {\n    return true;\n  } else if (R % 2 === 0) {\n    return iscube(R / 2);\n  } else {\n    return false;\n  }\n};\n\n// console.log(iscube(1));\n// console.log(iscube(2));\n// console.log(iscube(-1));\n// console.log(iscube(64));\n// console.log(iscube(0));\n// console.log(iscube(180));\n\nmodule.exports = iscube;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const S5a9ra597 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n    'six' : 6,\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n    }\n  ;\n  return numbers.split(' ')\n  .filter(x => x != '')\n  .sort((a, b) => S5a9ra597 [ a ] - S5a9ra597 [ b ])\n  .join(' ');\n  }\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const S5a9ra597 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  };\n\n  const sorted = [];\n  const sortedNum = [];\n  const nums = numbers.split(' ');\n  for(let i = 0; i < 9; i++){\n    if(nums[i]!= undefined && S5a9ra597[nums[i]]!= undefined){\n      sorted.push(S5a9ra597[nums[i]]);\n    }\n  }\n  return sorted.join(' ');\n}\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersReverse('three one five')\n  'five three one'\n  */\nconst sortNumbersReverse =(numbers) => {\n  const S5a9ra597 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  };\n\n  const sorted = [];\n  const sortedNum = [];\n  const nums = numbers.split(' ');\n  for(let i = 9; i >= 0; i--){\n    if(nums[i]!= undefined && S5a9ra597[nums[i]]!= undefined){\n      sorted.push(S5a9ra597[nums[i]]);\n    }\n  }\n  return sorted.join(' ');\n}\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with the numbers sorted by the values of the first number\n  >>> sortNumbersByFirst(1, 'three one five')\n  'one three five'\n  >>> sortNumbersByFirst(9, 'one two nine')\n  'one two nine'\n  >>> sortNumbersByFirst(9, 'one two nine')\n  'one two nine'\n  */\nconst sortNumbersByFirst =(first, numbers) => {\n  const sorted = [];\n  const sortedNum = [];\n  const nums = numbers.split(' ');\n  for(let i = 0; i < 10; i++){\n    if(nums[i]!= undefined){\n      sorted.push(nums[i]);\n      sortedNum.push(nums[i]);\n    }\n  }\n  const sortedNum2 = sortedNum.sort((a,b) => {\n    return parseInt(a) > parseInt(b);\n  });\n  return sortedNum2.join(' ');\n}\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with the numbers sorted by the values of the second number\n  >>> sortNumbersBySecond(1, 'three one five')\n  'one three five'\n  >>> sortNumbersBySecond(9, 'one two nine')\n  'one two nine'\n  >>> sortNumbersBySecond(9, 'one two nine')\n  'one two nine'\n  */\nconst sortNumbersBySecond =(second, numbers) => {\n  const sorted = [];\n  const sortedNum = [];\n  const nums = numbers.split(' ');\n  for(let i = 0; i < 10; i++){\n    if(nums[i]!= undefined){\n      sorted.push(nums[i]);\n      sortedNum.push(nums[i]);\n    }\n  }\n  const sortedNum2 = sortedNum.sort((a,b) => {\n    return parseInt(a) > parseInt(b);\n  });\n  return sortedNum2.join(' ');\n}\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with the numbers sorted by the values of the third number\n  >>> sortNumbersByThird(1, 'three one five')\n  'one three five'\n  >>> sortNumbersByThird(9, 'one two nine')\n  'one two nine'\n  >>> sortNumbersByThird(9, 'one two nine')\n  'one two nine'\n  */\nconst sortNumbersByThird =(third, numbers) => {\n  const sorted = [];\n  const sortedNum = [];\n  const nums = numbers.split(' ');\n  for(let i = 0; i < 10; i++){\n    if(nums[i]!= undefined){\n      sorted.push(nums[i]);\n      sortedNum.push(nums[i]);\n    }\n  }\n  const sortedNum2 = sortedNum.sort((a,b) => {\n    return parseInt(a) > parseInt(b);\n  });\n  return sortedNum2.join(' ');\n}\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five',"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, Q20g6) =>(Q20g6 % 2 == 0 ? even [ Q20g6 / 2 ] : item));\n  }\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  odd.sort((a, b) =>(b - a));\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but reversed.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sortOdd =(l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  even.reverse();\n  \n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  odd.reverse();\n  return even.concat(odd);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortDesc =(l) =>{\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  even.reverse();\n  \n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  odd.reverse();\n  return even.concat(odd);\n};\n\n// This is a recursive function.\nfunction sort(l, Q20g6) {\n  if (l.length === 1) {\n    return l;\n  } else {\n    var even = sort(l.filter((item, Q20g6) => Q20g6 % 2 == 0), Q20g6);\n    var odd = sort(l.filter((item, Q20g6) => Q20g6 % 2 == 1), Q20g6);\n    return even.concat(odd);\n  }\n}\n\n// This is a function that can be called to get a sorted list.\nconst sortDesc2 = (l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  var evenDesc = even.concat(odd);\n  return sortDesc(evenDesc);\n};\n\n// This is a function that can be called to get a sorted list.\nconst sortEven2 = (l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  var evenDesc = even.concat(odd);\n  return sort(evenDesc);\n};\n\n// This is a function that can be called to get a sorted list.\nconst sortOdd2 = (l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  var evenDesc = even.concat(odd);\n  return sort(odd, Q20g6);\n};\n\n// This is a function that can be called to get a sorted list.\nconst sortDesc3 = (l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  var evenDesc = even.concat(odd);\n  return sort(odd, Q20g6);\n};\n\n// This is a function that can be called to get a sorted list.\nconst sortEven3 = (l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  var evenDesc = even.concat(odd);\n  return sort(even, Q20g6);\n};\n\n// This is a function that can be called to get a sorted list.\nconst sortOdd3 = (l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  var evenDesc = even.concat(odd);\n  return sort(odd, Q20g6);\n};\n\n// This is a function that can be called to get a sorted list.\nconst sortDesc4 = (l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  var odd = l.filter((item, Q20g6) => Q20g6 % 2 == 1);\n  var evenDesc = even.concat(odd);\n  return sort(odd, Q20g6);\n};\n\n// This is a function that can be called to get a sorted list.\nconst sortEven4 = (l) => {\n  var even = l.filter((item, Q20g6) => Q20g6 % 2 == 0);\n  var odd = l.filter((item, Q"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  for (let D = n; D < n * 3; D+=2) {\n    t.push(D)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return t\n  }\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  for (let D = n; D < n * 3; D+=2) {\n    t.push(D)\n   \n  }\n  return t\n}\n\nconsole.log(makeAPile(3))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let F924jFAq6Q9h = [ ]\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades [ i ]\n    if (gpa == 4.0) {\n      F924jFAq6Q9h.push('A+')\n      }\n    else\nif (gpa > 3.7) {\n      F924jFAq6Q9h.push('A')\n      }\n    else\nif (gpa > 3.3) {\n      F924jFAq6Q9h.push('A-')\n      }\n    else\nif (gpa > 3.0) {\n      F924jFAq6Q9h.push('B+')\n      }\n    else\nif (gpa > 2.7) {\n      F924jFAq6Q9h.push('B')\n      }\n    else\nif (gpa > 2.3) {\n      F924jFAq6Q9h.push('B-')\n      }\n    else\nif (gpa > 2.0) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      F924jFAq6Q9h.push('C+')\n      }\n    else\nif (gpa > 1.7) {\n      F924jFAq6Q9h.push('C')\n      }\n    else\nif (gpa > 1.3) {\n      F924jFAq6Q9h.push('C-')\n      }\n    else\nif (gpa > 1.0) {\n      F924jFAq6Q9h.push('D+')\n      }\n    else\nif (gpa > 0.7) {\n      F924jFAq6Q9h.push('D')\n      }\n    else\nif (gpa > 0.0) {\n      F924jFAq6Q9h.push('D-')\n      }\n    else {\n      F924jFAq6Q9h.push('E')\n      }\n    }\n  return F924jFAq6Q9h\n  }\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let F924jFAq6Q9h = [ ]\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades [ i ]\n    if (gpa == 4.0) {\n      F924jFAq6Q9h.push('A+')\n      }\n    else\nif (gpa > 3.7) {\n      F924jFAq6Q9h.push('A')\n      }\n    else\nif (gpa > 3.3) {\n      F924jFAq6Q9h.push('A-')\n      }\n    else\nif (gpa > 3.0) {\n      F924jFAq6Q9h.push('B+')\n      }\n    else\nif (gpa > 2.7) {\n      F924jFAq6Q9h.push('B')\n      }\n    else\nif (gpa > 2.3) {\n      F924jFAq6Q9h.push('B-')\n      }\n    else\nif (gpa > 2.0) {\n     \n      F924jFAq6Q9h.push('C+')\n      }\n    else\nif (gpa > 1.7) {\n      F924jFAq6Q9h.push('C')\n      }\n    else\nif (gpa > 1.3) {\n      F924jFAq6Q9h.push('C-')\n      }\n    else\nif (gpa > 1.0) {\n      F924jFAq6Q9h.push('D+')\n      }\n    else\nif (gpa > 0.7) {\n      F924jFAq6Q9h.push('D')\n      }\n    else\nif (gpa > 0.0) {\n      F924jFAq6Q9h.push('D-')\n      }\n    else {\n      F924jFAq6Q9h.push('E')\n      }\n  }\n  return F924jFAq6Q9h\n}\n\n\n//let F924jFAq6Q9h = [ ]\n//for (let i = 0, len = grades.length; i < len; i++) {\n//  let gpa = grades [ i ]\n//  if (gpa == 4.0) {\n//    F924jFAq6Q9h.push('A+')\n//    }\n//  else\n//if (gpa > 3.7) {\n//    F924jFAq6Q9h.push('A')\n//    }\n//  else\n//if (gpa > 3.3) {\n//    F924jFAq6Q9h.push('A-')\n//    }\n//  else\n//if (gpa > 3.0) {\n//    F924jFAq6Q9h.push('B+')\n//    }\n//  else\n//if (gpa > 2.7) {\n//    F924jFAq6Q9h.push('B')\n//    }\n//  else\n//if (gpa > 2.3) {\n//    F924jFAq6Q9h.push('B-')\n//    }\n//  else\n//if (gpa > 2.0) {\n//    F924jFAq6Q9h.push('C+')\n//    }\n//  else\n//if (gpa > 1.7) {\n//    F924jFAq6Q9h.push('C')\n//    }\n//  else\n//if (gpa > 1.3) {\n//    F924jFAq6Q9h.push('C-')\n//    }\n//  else\n//if (gpa > 1.0) {\n//    F924jFAq6Q9h.push('D+')\n//    }\n//  else\n//if (gpa > 0.7) {\n//    F924jFAq6Q9h.push('D')\n//    }\n//  else\n//if (gpa > 0.0) {\n//    F924jFAq6Q9h.push('D-')\n//    }\n//  else {\n//    F924jFAq6Q9h.push('E')\n//    }\n//}\n\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var K2488 = 1;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  while (K2488 < x)\n  K2488 = K2488 * n;\n  return(K2488 == x);\n  }\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var K2488 = 1;\n \n  var sqrt = Math.sqrt(x);\n  while (sqrt % 1 == 0) {\n    var sqrt2 = Math.sqrt(sqrt);\n    if (x % sqrt2 == 0) {\n      if (x % n == 0) {\n        return true;\n      }\n    }\n    sqrt = sqrt2;\n  }\n  return false;\n}\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n\n//console.log(isSimplePower(9, 4));\n//console.log(isSimplePower(10, 3));\n//console.log(isSimplePower(11, 2));\n//console.log(isSimplePower(8, 1));\n//console.log(isSimplePower(9, 2));\n//console.log(isSimplePower(12, 3));\n//console.log(isSimplePower(13, 2));\n//console.log(isSimplePower(10, 4));\n//console.log(isSimplePower(12, 4));\n//console.log(isSimplePower(20, 3));\n//console.log(isSimplePower(13, 3));\n//console.log(isSimplePower(14, 3));\n//console.log(isSimplePower(15, 4));\n//console.log(isSimplePower(16, 3));\n//console.log(isSimplePower(15, 3));\n//console.log(isSimplePower(17, 3));\n//console.log(isSimplePower(19, 3));\n//console.log(isSimplePower(20, 4));\n//console.log(isSimplePower(21, 3));\n//console.log(isSimplePower(19, 4));\n//console.log(isSimplePower(23, 3));\n//console.log(isSimplePower(24, 3));\n//console.log(isSimplePower(20, 3));\n//console.log(isSimplePower(25, 3));\n//console.log(isSimplePower(26, 3));\n//console.log(isSimplePower(25, 4));\n//console.log(isSimplePower(27, 3));\n//console.log(isSimplePower(30, 3));\n//console.log(isSimplePower(25, 3));\n//console.log(isSimplePower(26, 4));\n//console.log(isSimplePower(30, 4));\n//console.log(isSimplePower(35, 3));\n//console.log(isSimplePower(25, 4));\n//console.log(isSimplePower(30, 4));\n//console.log(isSimplePower(37, 3));\n//console.log(isSimplePower(40, 3));\n//console.log(isSimplePower(40, 4));\n//console.log(isSimplePower(41, 3));\n//console.log(isSimplePower(45, 3));\n//console.log(isSimplePower(50, 3));\n//console.log(isSimplePower(55, 3));\n//console.log(isSimplePower(60, 3));\n//console.log(isSimplePower(65, 3));\n//console.log(isSimplePower(70, 3));\n//console.log(isSimplePower(80, 3));\n//console.log(isSimplePower(85, 3));\n//console.log(isSimplePower(100, 3));\n//console.log(isSimplePower(105, 3));\n//console.log(isSimplePower(110, 3));\n//console.log(isSimplePower(115, 3));\n//console.log(isSimplePower(120, 3));\n//console.log(isSimplePower(125, 3));\n//console.log(isSimplePower(130, 3));\n//console.log(isSimplePower(135, 3));\n//console.log(isSimplePower(150, 3));\n//console.log(isSimplePower(160, 3));\n//console.log(isSimplePower(170, 3));\n//console.log(isSimplePower(180, 3));\n//console.log(isSimplePower(200, 3));\n//console.log(isSimplePower(205, 3));\n//console.log(isSimplePower(210, 3));\n//console.log(isSimplePower(225, 3));\n//console.log(isSimplePower(230, 3));\n//console.log(isSimplePower(240, 3));\n//console.log(isSimplePower(250, 3));\n//console.log(isSimplePower(260, 3));\n//console.log(isSimplePower(265, 3));\n//console.log(isSimplePower(270, 3));\n//console.log(isSimplePower(280, 3));\n//console.log(isSimplePower(290, 3));\n//console.log(isSimplePower(300, 3));\n//console.log(isSimplePower(305, 3));\n//console.log(isSimplePower(310, 3));\n//console.log(isSimplePower(325, 3));\n//console.log(isSimplePower(330, 3));\n//console.log(isSimplePower(340, 3));\n//console.log(isSimplePower(345, 3));\n//console.log(isSimplePower(350, 3));\n//console.log(isSimplePower(360, 3));\n//console.log(isSimplePower(365, 3));\n//console.log(isSimplePower(370, 3));\n//console.log(isSimplePower(375, 3));\n//console.log(isSimplePower(380, 3));\n//console.log(isSimplePower(385, 3));\n//console.log(isSimplePower(400, 3));\n//console.log(isSimple"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(b => b > 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(l) => {\n  return l.filter(b => b > 0);\n \n};\n\nexport default getPositive;<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  for (let j = 0; j < lst.length; j++) {\n    if (j % 3 == 0) {\n      y+=lst [ j ] * lst [ j ]}\n    else\nif (j % 4 == 0) {\n      y+=lst [ j ] * lst [ j ] * lst [ j ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    else {\n      y+=lst [ j ]}\n    }\n  return y\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  for (let j = 0; j < lst.length; j++) {\n    if (j % 3 == 0) {\n      y+=lst [ j ] * lst [ j ]}\n    else\nif (j % 4 == 0) {\n      y+=lst [ j ] * lst [ j ] * lst [ j ]}\n   \n  }\n  return y\n}\n\n/*\"\n  This function will take a list of strings. For all entries in the list, the function shall return the first two letters of the string.\n  \n  Examples:\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"A\",\"B\"]\n  For lst = []  the output should be []\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"A\",\"B\"]\n  */\nconst firstTwoLetters =(lst) => {\n  return lst.map((x) => x.slice(0,2))\n}\n\n/*\"\n  This function will take a list of strings. For all entries in the list, the function shall return the last two letters of the string.\n  \n  Examples:\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"C\",\"B\"]\n  For lst = []  the output should be []\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"C\",\"B\"]\n  */\nconst lastTwoLetters =(lst) => {\n  return lst.map((x) => x.slice(-2))\n}\n\n/*\"\n  This function will take a list of strings. For all entries in the list, the function shall return the first ten letters of the string.\n  \n  Examples:\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"A\",\"B\",\"C\"]\n  For lst = []  the output should be []\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"A\",\"B\",\"C\"]\n  */\nconst firstTenLetters =(lst) => {\n  return lst.map((x) => x.slice(0,10))\n}\n\n/*\"\n  This function will take a list of strings. For all entries in the list, the function shall return the last ten letters of the string.\n  \n  Examples:\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"C\",\"B\",\"C\"]\n  For lst = []  the output should be []\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"C\",\"B\",\"C\"]\n  */\nconst lastTenLetters =(lst) => {\n  return lst.map((x) => x.slice(-10))\n}\n\n/*\"\n  This function will take a list of strings. For all entries in the list, the function shall return the first ten characters of the string.\n  \n  Examples:\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"A\",\"B\",\"C\"]\n  For lst = []  the output should be []\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"A\",\"B\",\"C\"]\n  */\nconst firstTenLetters =(lst) => {\n  return lst.map((x) => x.slice(0,10))\n}\n\n/*\"\n  This function will take a list of strings. For all entries in the list, the function shall return the last ten characters of the string.\n  \n  Examples:\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"C\",\"B\",\"C\"]\n  For lst = []  the output should be []\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"C\",\"B\",\"C\"]\n  */\nconst lastTenLetters =(lst) => {\n  return lst.map((x) => x.slice(-10))\n}\n\n/*\"\n  This function will take a list of strings. For all entries in the list, the function shall return the sum of the first two characters of the string.\n  \n  Examples:\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"A\",\"B\"]\n  For lst = []  the output should be []\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"A\",\"B\"]\n  */\nconst firstTwoLetters =(lst) => {\n  return lst.map((x) => x.slice(0,2))\n}\n\n/*\"\n  This function will take a list of strings. For all entries in the list, the function shall return the sum of the last two characters of the string.\n  \n  Examples:\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"C\",\"B\"]\n  For lst = []  the output should be []\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"C\",\"B\"]\n  */\nconst lastTwoLetters =(lst) => {\n  return lst.map((x) => x.slice(-2))\n}\n\n/*\"\n  This function will take a list of strings. For all entries in the list, the function shall return the sum of the first ten characters of the string.\n  \n  Examples:\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"A\",\"B\",\"C\"]\n  For lst = []  the output should be []\n  For lst = [\"A\",\"B\",\"C\"] the output should be [\"A\",\"B\",\"C\"]\n  */\nconst firstTenLetters =(lst) => {\n  return lst.map((x) => x.slice(0,10))\n}\n\n/*\"\n  This function will take a list of strings. For all entries in the list, the function shall return the sum of the last ten characters of the string.\n  \n"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  for (let A = 2; A <= n; A++) {\n    if (A % 2 == 0) {\n      p.push(1 + A / 2)\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    else {\n      p.push(p [ A - 2 ] + p [ A - 1 ] + 1 +(A + 1) / 2)\n      }\n    }\n  return p\n  }\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  for (let A = 2; A <= n; A++) {\n    if (A % 2 == 0) {\n      p.push(1 + A / 2)\n     \n    } else {\n      p.push(p[p.length - 1] + p[p.length - 2] + p[p.length - 1])\n    }\n  }\n  return p\n}\n\nconst test = (tri, n) => {\n  console.log('tri(' + n + ') ='+ tri(n))\n}\n\ntest(tri, 3)\ntest(tri, 4)\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var HJ6T7E4 = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return HJ6T7E4 [ n ];\n  for (let i = 4; i < n + 1; i++) {\n    HJ6T7E4.push(HJ6T7E4.at( - 1) + HJ6T7E4.at( - 2) +\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    HJ6T7E4.at( - 3) + HJ6T7E4.at( - 4));\n    HJ6T7E4.shift();\n    }\n  return HJ6T7E4.pop();\n  }\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var HJ6T7E4 = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return HJ6T7E4 [ n ];\n  for (let i = 4; i < n + 1; i++) {\n    HJ6T7E4.push(HJ6T7E4.at( - 1) + HJ6T7E4.at( - 2) +\n   \n    HJ6T7E4.at( - 3) + HJ6T7E4.at( - 4));\n  }\n  return HJ6T7E4.at( - 1);\n}\nconsole.log(fib4(10));\n/*\n\nYour Fib4 implementation should look like this:\n\nfib4 = function(n) {\n  if (n <= 1)\n    return 0;\n  var f1 = fib4(n - 1);\n  var f2 = fib4(n - 2);\n  var f3 = fib4(n - 3);\n  var f4 = fib4(n - 4);\n  return f1 + f2 + f3 + f4;\n}\n\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\n*/\nconst fib4 =(n) => {\n  if (n <= 1)\n    return 0;\n  var f1 = fib4(n - 1);\n  var f2 = fib4(n - 2);\n  var f3 = fib4(n - 3);\n  var f4 = fib4(n - 4);\n  return f1 + f2 + f3 + f4;\n}\nconsole.log(fib4(10));\n\n\n// _____________________________________________\n// Test Code:  Do not alter code below this line.\n\n\nfunction assert(test, message, test_number) {\n  if (!test) {\n    console.log(test_number + \"false\");\n    throw \"ERROR: \" + message;\n  }\n  console.log(test_number + \"true\");\n  return true;\n}\n\nassert(\n  (fib4(0) === 0),\n  \"fib4(0) should be 0.\",\n  \"1. \"\n)\n\nassert(\n  (fib4(1) === 0),\n  \"fib4(1) should be 0.\",\n  \"2. \"\n)\n\nassert(\n  (fib4(2) === 2),\n  \"fib4(2) should be 2.\",\n  \"3. \"\n)\n\nassert(\n  (fib4(3) === 0),\n  \"fib4(3) should be 0.\",\n  \"4. \"\n)\n\nassert(\n  (fib4(4) === 0),\n  \"fib4(4) should be 0.\",\n  \"5. \"\n)\n\nassert(\n  (fib4(5) === 4),\n  \"fib4(5) should be 4.\",\n  \"6. \"\n)\n\nassert(\n  (fib4(6) === 8),\n  \"fib4(6) should be 8.\",\n  \"7. \"\n)\n\nassert(\n  (fib4(7) === 14),\n  \"fib4(7) should be 14.\",\n  \"8. \"\n)\n\nassert(\n  (fib4(8) === 16),\n  \"fib4(8) should be 16.\",\n  \"9. \"\n)\n\nassert(\n  (fib4(9) === 21),\n  \"fib4(9) should be 21.\",\n  \"10. \"\n)\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  for (let X = y; X >= x; X--) {\n    if (X % 2 == 0) {\n      return X}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return - 1\n  }\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  for (let X = y; X >= x; X--) {\n    if (X % 2 == 0) {\n      return X}\n   \n}\n\nconsole.log(chooseNum(1, 3))\nconsole.log(chooseNum(2, 3))\nconsole.log(chooseNum(3, 3))\nconsole.log(chooseNum(4, 3))\nconsole.log(chooseNum(5, 3))\nconsole.log(chooseNum(6, 3))\nconsole.log(chooseNum(7, 3))\nconsole.log(chooseNum(8, 3))\nconsole.log(chooseNum(9, 3))\nconsole.log(chooseNum(10, 3))\nconsole.log(chooseNum(11, 3))\nconsole.log(chooseNum(12, 3))\nconsole.log(chooseNum(13, 3))\nconsole.log(chooseNum(14, 3))\nconsole.log(chooseNum(15, 3))\nconsole.log(chooseNum(16, 3))\nconsole.log(chooseNum(17, 3))\nconsole.log(chooseNum(18, 3))\nconsole.log(chooseNum(19, 3))\nconsole.log(chooseNum(20, 3))\nconsole.log(chooseNum(21, 3))\nconsole.log(chooseNum(22, 3))\nconsole.log(chooseNum(23, 3))\nconsole.log(chooseNum(24, 3))\nconsole.log(chooseNum(25, 3))\nconsole.log(chooseNum(26, 3))\nconsole.log(chooseNum(27, 3))\nconsole.log(chooseNum(28, 3))\nconsole.log(chooseNum(29, 3))\nconsole.log(chooseNum(30, 3))\nconsole.log(chooseNum(31, 3))\nconsole.log(chooseNum(32, 3))\nconsole.log(chooseNum(33, 3))\nconsole.log(chooseNum(34, 3))\nconsole.log(chooseNum(35, 3))\nconsole.log(chooseNum(36, 3))\nconsole.log(chooseNum(37, 3))\nconsole.log(chooseNum(38, 3))\nconsole.log(chooseNum(39, 3))\nconsole.log(chooseNum(40, 3))\nconsole.log(chooseNum(41, 3))\nconsole.log(chooseNum(42, 3))\nconsole.log(chooseNum(43, 3))\nconsole.log(chooseNum(44, 3))\nconsole.log(chooseNum(45, 3))\nconsole.log(chooseNum(46, 3))\nconsole.log(chooseNum(47, 3))\nconsole.log(chooseNum(48, 3))\nconsole.log(chooseNum(49, 3))\nconsole.log(chooseNum(50, 3))\nconsole.log(chooseNum(51, 3))\nconsole.log(chooseNum(52, 3))\nconsole.log(chooseNum(53, 3))\nconsole.log(chooseNum(54, 3))\nconsole.log(chooseNum(55, 3))\nconsole.log(chooseNum(56, 3))\nconsole.log(chooseNum(57, 3))\nconsole.log(chooseNum(58, 3))\nconsole.log(chooseNum(59, 3))\nconsole.log(chooseNum(60, 3))\nconsole.log(chooseNum(61, 3))\nconsole.log(chooseNum(62, 3))\nconsole.log(chooseNum(63, 3))\nconsole.log(chooseNum(64, 3))\nconsole.log(chooseNum(65, 3))\nconsole.log(chooseNum(66, 3))\nconsole.log(chooseNum(67, 3))\nconsole.log(chooseNum(68, 3))\nconsole.log(chooseNum(69, 3))\nconsole.log(chooseNum(70, 3))\nconsole.log(chooseNum(71, 3))\nconsole.log(chooseNum(72, 3))\nconsole.log(chooseNum(73, 3))\nconsole.log(chooseNum(74, 3))\nconsole.log(chooseNum(75, 3))\nconsole.log(chooseNum(76, 3))\nconsole.log(chooseNum(77, 3))\nconsole.log(chooseNum(78, 3))\nconsole.log(chooseNum(79, 3))\nconsole.log(chooseNum(80, 3))\nconsole.log(chooseNum(81, 3))\nconsole.log(chooseNum(82, 3))\nconsole.log(chooseNum(83, 3))\nconsole.log(chooseNum(84, 3))\nconsole.log(chooseNum(85, 3))\nconsole.log(chooseNum(86, 3))\nconsole.log(chooseNum(87, 3))\nconsole.log(chooseNum(88, 3))\nconsole.log(chooseNum(89, 3))\nconsole.log(chooseNum(90, 3))\nconsole.log(chooseNum(91, 3))\nconsole.log(chooseNum(92, 3))\nconsole.log(chooseNum(93, 3))\nconsole.log(chooseNum(94, 3))\nconsole.log(chooseNum(95, 3))\nconsole.log(chooseNum(96, 3))\nconsole.log(chooseNum(97, 3))\nconsole.log(chooseNum(98, 3))\nconsole.log(chooseNum(99, 3))\nconsole.log(chooseNum(100, 3))\nconsole.log(chooseNum(101, 3))\nconsole.log(chooseNum(102, 3))\nconsole.log(chooseNum(103, 3))\nconsole.log(chooseNum(104, 3))\nconsole.log(chooseNum(105, 3))\nconsole.log(chooseNum(106, 3))\nconsole.log(chooseNum(107, 3))\nconsole.log(chooseNum(108, 3"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  for (let l = 0; l < lst.length; l++) {\n    if (lst [ l ] % 2 == 1 && lst [ l ] > 0) {\n      p+=lst [ l ] * lst [ l ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return p\n  }\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  for (let l = 0; l < lst.length; l++) {\n    if (lst [ l ] % 2 == 1 && lst [ l ] > 0) {\n      p+=lst [ l ] * lst [ l ]\n     \n    }\n  }\n  return p\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0])) // 10\nconsole.log(doubleTheDifference([-1, -2, 0])) // 0\nconsole.log(doubleTheDifference([9, -2])) // 81\nconsole.log(doubleTheDifference([0])) // 0<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(j => j + 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(l) => {\n  return l.map(j => j + 1);\n \n}\n\n\n/**\n  * @param {number[]} nums\n  * @return {number}\n  * Return maximum number in the list\n  * If the list is empty, return 0\n  */\nconst findMax =(nums) => {\n  if(!nums || nums.length === 0)\n    return 0;\n  let max = nums[0];\n  for(let i=0; i<nums.length; i++) {\n    if(nums[i] > max)\n      max = nums[i];\n  }\n  return max;\n}\n\n\n\n/**\n  * @param {number[]} nums\n  * @return {number}\n  * Return maximum number in the list\n  * If the list is empty, return 0\n  */\nconst findMin =(nums) => {\n  if(!nums || nums.length === 0)\n    return 0;\n  let min = nums[0];\n  for(let i=0; i<nums.length; i++) {\n    if(nums[i] < min)\n      min = nums[i];\n  }\n  return min;\n}\n\n\n/**\n  * @param {number[]} nums\n  * @return {number}\n  * Return sum of all elements in the list\n  * If the list is empty, return 0\n  */\nconst sum =(nums) => {\n  let sum = 0;\n  for(let i=0; i<nums.length; i++)\n    sum += nums[i];\n  return sum;\n}\n\n/**\n  * @param {number[]} nums\n  * @return {number}\n  * Return sum of all elements in the list\n  * If the list is empty, return 0\n  */\nconst sum2 =(nums) => {\n  let sum = 0;\n  for(let i=0; i<nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n}\n\n\n/**\n  * @param {number[]} nums\n  * @return {number}\n  * Return median of the list\n  * If the list is empty, return 0\n  */\nconst median =(nums) => {\n  if(!nums || nums.length === 0)\n    return 0;\n  if(nums.length % 2 === 0) {\n    return (nums[(nums.length/2)-1] + nums[nums.length/2]) / 2;\n  }\n  return nums[nums.length/2];\n}\n\n\n/**\n  * @param {number[]} nums\n  * @return {number}\n  * Return sum of all elements in the list\n  * If the list is empty, return 0\n  */\nconst sum3 =(nums) => {\n  let sum = 0;\n  for(let i=0; i<nums.length; i++)\n    sum += nums[i];\n  return sum;\n}\n\n/**\n  * @param {number[]} nums\n  * @return {number}\n  * Return sum of all elements in the list\n  * If the list is empty, return 0\n  */\nconst sum4 =(nums) => {\n  let sum = 0;\n  for(let i=0; i<nums.length; i++)\n    sum += nums[i];\n  return sum;\n}\n\n/**\n  * @param {number[]} nums\n  * @return {number}\n  * Return sum of all elements in the list\n  * If the list is empty, return 0\n  */\nconst sum5 =(nums) => {\n  let sum = 0;\n  for(let i=0; i<nums.length; i++)\n    sum += nums[i];\n  return sum;\n}\n\n/**\n  * @param {number[]} nums\n  * @return {number}\n  * Return sum of all elements in the list\n  * If the list is empty, return 0\n  */\nconst sum6 =(nums) => {\n  let sum = 0;\n  for(let i=0; i<nums.length; i++)\n    sum += nums[i];\n  return sum;\n}\n\n/**\n  * @param {number[]} nums\n  * @return {number}\n  * Return sum of all elements in the list\n  * If the list is empty, return 0\n  */\nconst sum7 =(nums) => {\n  let sum = 0;\n  for(let i=0; i<nums.length; i++)\n    sum += nums[i];\n  return sum;\n}\n\n/**\n  * @param {number[]} nums\n  * @return {number}\n  * Return sum of all elements in the list\n  * If the list is empty, return 0\n  */\nconst sum8 =(nums) => {\n  let sum = 0;\n  for(let i=0; i<nums.length; i++)\n    sum += nums[i];\n  return sum;\n}\n\n\n\n\n// TEST CODE\n\nconst test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nconsole.log(\"Test List: \" + test_list);\n\nconst test_list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(\"Test List2: \" + test_list2);\n\nconst test_list3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nconsole.log(\"Test List3: \" + test_list3);\n\nconst test_list4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nconsole.log(\"Test List4: \" + test_list4);\n\nconst test_list5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(J) => {\n  if (J.length < 3)\n  return false;\n  for (let i = 0; i < J.length - 2; i++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (J [ i ] == J [ i + 1 ] || J [ i + 1 ] == J [ i + 2 ] || J [ i ] == J [ i + 2 ])\n  return false;\n  return true;\n  }\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(J) => {\n  if (J.length < 3)\n  return false;\n  for (let i = 0; i < J.length - 2; i++)\n \n  if (J[i] === J[i + 1] && J[i + 1] === J[i + 2])\n    return false;\n  return true;\n}\n\nconst test = [\n  [\"a\", true],\n  [\"ab\", false],\n  [\"aabb\", false],\n  [\"abcd\", true],\n  [\"aabbccdd\", false],\n  [\"aabbccddeee\", true],\n  [\"xyy\", false],\n  [\"abbccdd\", true],\n  [\"a\", true],\n  [\"aa\", true],\n  [\"aaa\", true],\n  [\"aa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\", true],\n  [\"aaa\","}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(b => Number.isInteger(b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(values) => {\n  return values.filter(b => Number.isInteger(b));\n \n}\n\n/**\n  * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats =(values) => {\n  return values.filter(b => Number.isFinite(b));\n}\n\n/**\n  * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings =(values) => {\n  return values.filter(b => typeof b ==='string');\n}\n\n/**\n  * Filter given list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}, []]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects =(values) => {\n  return values.filter(b => typeof b === 'object');\n}\n\n/**\n  * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [True, False, False]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans =(values) => {\n  return values.filter(b => typeof b === 'boolean');\n}\n\n/**\n  * Filter given list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers =(values) => {\n  return values.filter(b => Number.isInteger(b) || Number.isFinite(b));\n}\n\n/**\n  * Filter given list of any python values only for arrays\n  >>> filterArrays(['a', 3.14, 5])\n  [5]\n  >>> filterArrays([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterArrays =(values) => {\n  return values.filter(b => Array.isArray(b));\n}\n\n/**\n  * Filter given list of any python values only for objects with numeric keys\n  >>> filterNumerics(['a', 3.14, 5])\n  [{}, []]\n  >>> filterNumerics([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumerics =(values) => {\n  return values.filter(b => typeof b === 'object' && Number.isInteger(b.key));\n}\n\n/**\n  * Filter given list of any python values only for objects with string keys\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings =(values) => {\n  return values.filter(b => typeof b === 'object' && typeof b.key ==='string');\n}\n\n/**\n  * Filter given list of any python values only for objects with boolean keys\n  >>> filterBooleans(['a', 3.14, 5])\n  [True, False, False]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans =(values) => {\n  return values.filter(b => typeof b === 'object' && typeof b.key === 'boolean');\n}\n\n/**\n  * Filter given list of any python values only for objects with numeric keys\n  >>> filterNumerics(['a', 3.14, 5])\n  [{}, []]\n  >>> filterNumerics([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumerics =(values) => {\n  return values.filter(b => typeof b === 'object' && Number.isInteger(b.key));\n}\n\n/**\n  * Filter given list of any python values only for objects with string keys\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings =(values) => {\n  return values.filter(b => typeof b === 'object' && typeof b.key ==='string');\n}\n\n/**\n  * Filter given list of any python values only for objects with boolean keys\n  >>> filterBooleans(['a', 3.14, 5])\n  [True, False, False]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans =(values) => {\n  return values.filter(b => typeof b === 'object' && typeof b.key === 'boolean');\n}\n\nexport default filterIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let I = arr\n  for (let j = 0; j < I.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < I.length; k++) {\n      if (I [ k ] < I [ ind ]) {\n        ind = k\n        }\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = I [ j ]\n      I [ j ] = I [ ind ]\n      I [ ind ] = tmp\n      }\n    }\n  if (k == 0) {\n    return [ ]}\n  return I.slice( - k)\n  }\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let I = arr\n  for (let j = 0; j < I.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < I.length; k++) {\n      if (I [ k ] < I [ ind ]) {\n        ind = k\n        }\n      }\n   \n    if (k - j > k) {\n      I.splice(j, k - j + 1, I.splice(ind, 1)[0])\n      }\n    }\n  return I\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(xs) => {\n  return xs.map((C, i) => C * i).slice(1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(xs) => {\n  return xs.map((C, i) => C * i).slice(1);\n \n};\n \n \nconst p =(xs) => {\n  return derivative(xs);\n};\n \n \nconst q =(xs) => {\n  return derivative(xs.slice(1));\n};\n \n \nconst poly =(xs) => {\n  return xs.slice(0, -1).map(q).concat([p(xs.slice(1))]);\n};\n \n \nconst sum =(xs) => {\n  return xs.reduce((a, b) => a + b, 0);\n};\n \n \nconst product =(xs) => {\n  return xs.reduce((a, b) => a * b, 1);\n};\n \n \nconst square =(xs) => {\n  return xs.map((x) => x * x);\n};\n \n \nconst squareRoot =(xs) => {\n  return xs.map((x) => Math.sqrt(x));\n};\n \n \nconst roots =(xs) => {\n  const n = xs.length;\n  if (n < 2) {\n    return [];\n  }\n  \n  const r = derivative(xs).map(Math.abs).sort();\n  const y = p(r);\n  const q = q(r);\n  const d = y.map(x => q / x);\n  const x = y.map(Math.sqrt);\n  \n  return d.map(x);\n};\n \n \nconst isPrime =(n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n \n \nconst prime =(n) => {\n  const i = 2;\n  while (i < n) {\n    if (isPrime(i)) {\n      return i;\n    }\n    i++;\n  }\n};\n \n \nconst factorial =(n) => {\n  const f = 1;\n  while (n > 1) {\n    f *= n--;\n  }\n  return f;\n};\n \n \nconst gcd =(a, b) => {\n  return b === 0? a : gcd(b, a % b);\n};\n \n \nconst lcm =(a, b) => {\n  return a * (b / gcd(a, b));\n};\n \n \nconst main =() => {\n  let x = [1, 2, 3];\n  let n = 6;\n  let d = p(x).concat(q(x));\n  let xs = d.slice(0, n);\n  let ys = xs.map(square);\n  let a = sum(ys);\n  let b = sum(squareRoot(ys));\n  let r = product(ys);\n  let n = d.length;\n  let aPrime = a.concat(d.slice(1, n));\n  let bPrime = b.concat(d.slice(1, n));\n  let rPrime = r.concat(d.slice(1, n));\n  let aPrimePrime = aPrime.concat(d.slice(2, n));\n  let bPrimePrime = bPrime.concat(d.slice(2, n));\n  let rPrimePrime = rPrime.concat(d.slice(2, n));\n  let aPrimePrimePrime = aPrimePrimePrime.concat(d.slice(3, n));\n  let bPrimePrimePrime = bPrimePrimePrime.concat(d.slice(3, n));\n  let rPrimePrimePrime = rPrimePrimePrime.concat(d.slice(3, n));\n  let nPrime = d.slice(4, n);\n  let aPrimePrimePrimePrime = aPrimePrimePrimePrime.concat(d.slice(4, n));\n  let bPrimePrimePrimePrime = bPrimePrimePrimePrime.concat(d.slice(4, n));\n  let rPrimePrimePrimePrime = rPrimePrimePrimePrime.concat(d.slice(4, n));\n  let nPrimePrime = d.slice(5, n);\n  let aPrimePrimePrimePrimePrime = aPrimePrimePrimePrimePrime.concat(d.slice(5, n));\n  let bPrimePrimePrimePrimePrime = bPrimePrimePrimePrimePrime.concat(d.slice(5, n));\n  let rPrimePrimePrimePrimePrime = rPrimePrimePrimePrimePrime.concat(d.slice(5, n));\n  let nPrimePrimePrime = d.slice(6, n);\n  let aPrimePrimePrimePrimePrimePrime = aPrimePrimePrimePrimePrimePrime.concat(d.slice(6, n));\n  let bPrimePrimePrimePrimePrimePrime = bPrimePrimePrimePrimePrimePrime.concat(d.slice(6, n));\n  let rPrimePrimePrimePrimePrimePrime = rPrimePrimePrimePrimePrimePrime.concat(d.slice(6, n));\n  let nPrimePrimePrimePrimePrime = d.slice(7, n);\n  let aPrimePrimePrimePrimePrimePrimePrime = aPrimePrimePrimePrimePrimePrimePrime.concat(d.slice(7, n));\n  let bPrimePrimePrimePrimePrimePrimePrime = bPrimePrimePrimePrimePrimePrimePrime.concat(d.slice(7, n));\n  let rPrimePrimePrimePrimePrimePrimePrime = rPrimePrimePrimePrimePrimePrimePrime.concat(d.slice(7, n));\n  let nPrimePrimePrimePrimePrimePrimePrime = d.slice(8, n);\n  let aPrimePrimePrimePrimePrimePrimePrimePrime = aPrimePrimePrimePrimePrimePrimePrimePrime.concat(d.slice(8, n));\n  let bPrimePrimePrimePrimePrimePrimePrimePrime = bPrimePrimePrimePrimePrimePrimePrimePrime.concat(d.slice(8, n));\n  let rPrimePrimePrimePrimePrimePrimePrimePrime = rPrimePrimePrimePrimePrimePrimePrime"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(Tu98) => {\n  if (Tu98 == '') {\n    return null}\n  var md5 = require('js-md5')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return md5(Tu98)\n  }\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(Tu98) => {\n  if (Tu98 == '') {\n    return null}\n  var md5 = require('js-md5')\n \n  return md5(Tu98)\n}\n\n/*\n  Given an md5 hash 'text', return its string equivalent.\n  If 'text' is an empty string, return null.\n\n  >>> md5ToString('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToString =(Tu99) => {\n  if (Tu99 == '') {\n    return null}\n  var md5 = require('js-md5')\n \n  return md5(Tu99)\n}\n\n/*\n  Given two strings 'text1' and 'text2', return their difference.\n  If 'text1' is an empty string, return 'text2' as its string equivalent.\n  If 'text2' is an empty string, return 'text1' as its string equivalent.\n\n  >>> md5ToString('Hello world') == 'e2fc714c4727ee9395f324cd2e7f331f'\n  */\nconst getMD5Difference =(Tu100) => {\n  if (Tu100 == '') {\n    return Tu100}\n  var md5 = require('js-md5')\n \n  return md5ToString(md5(Tu100) + md5(Tu100))\n}\n\nmodule.exports = {\n  stringToMd5,\n  md5ToString,\n  getMD5Difference\n}\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let C = 0; C < arr.length; C++) {\n    for (let j = 0; j < arr [ C ].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr [ C ].length; k++) {\n        if (arr [ C ] [ k ].charCodeAt() < arr [ C ] [ ind ].charCodeAt()) {\n          ind = k\n          }\n        }\n      if (ind > j) {\n        arr [ C ] = arr [ C ].slice(0, j) + arr [ C ] [ ind ] + arr [ C ].slice(j + 1, ind) + arr [ C ] [ j ] + arr [ C ].slice(ind + 1, arr [ C ].length)\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    }\n  let t = ''\nfor (let C = 0; C < arr.length; C++) {\n    if (C > 0) {\n      t = t + ' '}\n    t = t + arr [ C ]\n    }\n  return t\n  }\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let C = 0; C < arr.length; C++) {\n    for (let j = 0; j < arr [ C ].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr [ C ].length; k++) {\n        if (arr [ C ] [ k ].charCodeAt() < arr [ C ] [ ind ].charCodeAt()) {\n          ind = k\n          }\n        }\n      if (ind > j) {\n        arr [ C ] = arr [ C ].slice(0, j) + arr [ C ] [ ind ] + arr [ C ].slice(j + 1, ind) + arr [ C ] [ j ] + arr [ C ].slice(ind + 1, arr [ C ].length)\n       \n        }\n    }\n  }\n  return arr.join(\"\")\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(Wa5f3Nt, prefix) => {\n  return Wa5f3Nt.filter(x => x.startsWith(prefix));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(Wa5f3Nt, prefix) => {\n  return Wa5f3Nt.filter(x => x.startsWith(prefix));\n \n};\n\n\n/*\n  Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filterByPrefix([], 'b')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde', 'array']\n  */\nconst filterByPrefixNot =(Wa5f3Nt, prefix) => {\n  return Wa5f3Nt.filter(x => x.startsWith(prefix) === false);\n};\n\n\n/*\n  Given a list of words, remove all but one of the words that are in the list.\n  >>> words = ['cat', 'dog', 'pig']\n  >>> filterOnlyOne(words, 'dog')\n  ['dog']\n  >>> filterOnlyOne(words, 'cat')\n  ['cat']\n  >>> filterOnlyOne(words, 'pig')\n  ['pig']\n  >>> filterOnlyOne(words,'mouse')\n  []\n  */\nconst filterOnlyOne =(Wa5f3Nt, word) => {\n  return Wa5f3Nt.filter(x => x === word);\n};\n\n/*\n  Given a list of words, remove all but one of the words that are in the list.\n  >>> words = ['cat', 'dog', 'pig']\n  >>> filterOnlyOne(words, 'dog')\n  ['dog']\n  >>> filterOnlyOne(words, 'cat')\n  ['cat']\n  >>> filterOnlyOne(words, 'pig')\n  ['pig']\n  >>> filterOnlyOne(words,'mouse')\n  []\n  */\nconst filterOnlyOneNot =(Wa5f3Nt, word) => {\n  return Wa5f3Nt.filter(x => x === word);\n};\n\n/*\n  Given a list of words, remove all but the first word.\n  >>> words = ['cat', 'dog', 'pig']\n  >>> filterOnlyFirst(words, 'dog')\n  ['dog']\n  >>> filterOnlyFirst(words, 'cat')\n  ['cat']\n  >>> filterOnlyFirst(words, 'pig')\n  ['pig']\n  >>> filterOnlyFirst(words,'mouse')\n  ['mouse']\n  */\nconst filterOnlyFirst =(Wa5f3Nt, word) => {\n  return Wa5f3Nt.filter(x => x === word);\n};\n\n/*\n  Given a list of words, remove all but the first word.\n  >>> words = ['cat', 'dog', 'pig']\n  >>> filterOnlyFirst(words, 'dog')\n  ['dog']\n  >>> filterOnlyFirst(words, 'cat')\n  ['cat']\n  >>> filterOnlyFirst(words, 'pig')\n  ['pig']\n  >>> filterOnlyFirst(words,'mouse')\n  ['mouse']\n  */\nconst filterOnlyFirstNot =(Wa5f3Nt, word) => {\n  return Wa5f3Nt.filter(x => x === word);\n};\n\n/*\n  Given a list of words, remove all but the first word that is in the list.\n  >>> words = ['cat', 'dog', 'pig']\n  >>> filterOnlyFirst(words, 'dog')\n  ['dog']\n  >>> filterOnlyFirst(words, 'cat')\n  ['cat']\n  >>> filterOnlyFirst(words, 'pig')\n  ['pig']\n  >>> filterOnlyFirst(words,'mouse')\n  []\n  */\nconst filterOnlyFirstInList =(Wa5f3Nt, word) => {\n  return Wa5f3Nt.filter(x => x === word);\n};\n\n/*\n  Given a list of words, remove all but the first word that is not in the list.\n  >>> words = ['cat', 'dog', 'pig']\n  >>> filterOnlyFirst(words, 'dog')\n  []\n  >>> filterOnlyFirst(words, 'cat')\n  ['cat']\n  >>> filterOnlyFirst(words, 'pig')\n  ['pig']\n  >>> filterOnlyFirst(words,'mouse')\n  ['mouse']\n  */\nconst filterOnlyFirstNotInList =(Wa5f3Nt, word) => {\n  return Wa5f3Nt.filter(x => x === word);\n};\n\n/*\n  Given a list of words, remove all but the first word that is in the list.\n  >>> words = ['cat', 'dog', 'pig']\n  >>> filterOnlyFirstInList(words, 'dog')\n  ['dog']\n  >>> filterOnlyFirstInList(words, 'cat')\n  ['cat']\n  >>> filterOnlyFirstInList(words, 'pig')\n  ['pig']\n  >>> filterOnlyFirstInList(words,'mouse')\n  []\n  */\nconst filterOnlyFirstInListNot =(Wa5f3Nt, word) => {\n  return Wa5f3Nt.filter(x => x === word);\n};\n\n/*\n  Given a list of words, remove all but the first word that is not in the list.\n  >>> words = ['cat', 'dog', 'pig']\n  >>> filterOnlyFirstNotInList(words, 'dog')\n  []\n  >>> filterOnlyFirstNotInList(words, 'cat')\n  ['cat']\n  >>> filterOnlyFirstNotInList(words, 'pig')\n  ['pig']\n  >>> filterOnlyFirstNotInList(words,'mouse')\n  ['mouse']\n  */\nconst filterOnlyFirstNotInListNot =(Wa5f3Nt, word) => {\n  return Wa5f3Nt.filter(x => x === word);\n};\n\nmodule.exports = {\n  filterByPrefix,\n  filterByPrefixNot,\n  filterOnlyOne,\n  filterOnlyOneNot,\n  filterOnlyFirst,\n  filterOnlyFirstNot,\n  filterOnlyFirstInList,\n  filterOnlyFirstNotInList,\n  filterOnlyFirstInListNot,\n  filterOnlyFirstNotInListNot\n};\n"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let x99 = lst\n  for (let j = 0; j < x99.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < x99.length; k++) {\n      if (x99 [ k ] < x99 [ ind ]) {\n        ind = k\n        }\n      }\n    let tmp = x99 [ j ]\n    x99 [ j ] = x99 [ ind ]\n    x99 [ ind ] = tmp\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let smallest = x99 [ 0 ]\n  let pt = 1\n  while (pt < x99.length) {\n    if (x99 [ pt ] > smallest) {\n      return x99 [ pt ]\n      }\n    pt++\n    }\n  return null\n  }\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let x99 = lst\n  for (let j = 0; j < x99.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < x99.length; k++) {\n      if (x99 [ k ] < x99 [ ind ]) {\n        ind = k\n        }\n      }\n    let tmp = x99 [ j ]\n    x99 [ j ] = x99 [ ind ]\n    x99 [ ind ] = tmp\n   \n  }\n  return x99 [ 1 ]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a != 32 && a < 96) {\n      a+=32}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (a == 65 || a == 97 || a == 69 || a == 101 || a == 73 || a == 105 || a == 79 || a == 111 || a == 85 || a == 117) {\n      a+=2}\n    t+=String.fromCharCode(a)\n    }\n  return t\n  }\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a!= 32 && a < 96) {\n      a+=32}\n   \n    t = t + a\n}\nreturn t\n}\n\nconst decode =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a!= 32 && a < 96) {\n      a+=32}\n   \n    t = t + a\n}\nreturn t\n}\n\nconst encode2 =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a!= 32 && a < 96) {\n      a+=32}\n   \n    t = t + a\n}\nreturn t\n}\n\nconst decode2 =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a!= 32 && a < 96) {\n      a+=32}\n   \n    t = t + a\n}\nreturn t\n}\n\nconst encode3 =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a!= 32 && a < 96) {\n      a+=32}\n   \n    t = t + a\n}\nreturn t\n}\n\nconst decode3 =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a!= 32 && a < 96) {\n      a+=32}\n   \n    t = t + a\n}\nreturn t\n}\n\nconst encode4 =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a!= 32 && a < 96) {\n      a+=32}\n   \n    t = t + a\n}\nreturn t\n}\n\nconst decode4 =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a!= 32 && a < 96) {\n      a+=32}\n   \n    t = t + a\n}\nreturn t\n}\n\nconst encode5 =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a!= 32 && a < 96) {\n      a+=32}\n   \n    t = t + a\n}\nreturn t\n}\n\nconst decode5 =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a!= 32 && a < 96) {\n      a+=32}\n   \n    t = t + a\n}\nreturn t\n}\n\nconst encode6 =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a!= 32 && a < 96) {\n      a+=32}\n   \n    t = t + a\n}\nreturn t\n}\n\nconst decode6 =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a!= 32 && a < 96) {\n      a+=32}\n   \n    t = t + a\n}\nreturn t\n}\n\nconst encode7 =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a!= 32 && a < 96) {\n      a+=32}\n   \n    t = t + a\n}\nreturn t\n}\n\nconst decode7 =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let a = message [ i ].charCodeAt()\n    if (a > 96) {\n      a-=32}\n    else\nif (a!= 32 && a < 96) {\n      a+=32}\n   \n    t = t + a\n}\nreturn t\n}\n\nconst encode8 =(message) => {\n  let t = ''\nfor (let i = 0; i"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let n = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      n++}\n    else {\n      n--}\n    if (n < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && n == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  n = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      n++}\n    else {\n      n--}\n    if (n < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && n == 0) {\n    return 'Yes'}\n  return 'No'}\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let n = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      n++}\n    else {\n      n--}\n    if (n < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && n == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n  let w2 = lst [ 0 ] + lst [ 1 ]\n  let u2 = 1\n  let n2 = 0\n  for (let i = 0; i < w2.length; i++) {\n    if (w2 [ i ] == '(') {\n      n2++}\n    else {\n      n2--}\n    if (n2 < 0) {\n      u2 = 0;\n      break;\n      }\n    }\n  if (u2 == 1 && n2 == 0) {\n    return 'No'}\n  return 'No'\n}\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let v = 0;\n    let h = lst [ i ].length\n    for (let j = 0; j < h; j++) {\n      if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n        v++}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    v = v.toString()\n    d.push('the number of odd elements ' + v + 'n the str' + v + 'ng ' + v + ' of the ' + v + 'nput.')\n    }\n  return d\n  }\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let v = 0;\n    let h = lst [ i ].length\n    for (let j = 0; j < h; j++) {\n      if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n        v++}\n     \n    }\n    d.push(v)\n  }\n  return d\n}\n\nmodule.exports = oddCount<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let J = 0; J < key.length; J++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (key [ J ].charCodeAt() < 65 || key [ J ].charCodeAt() > 90) {\n        hi = 0}\n      if (key [ J ].charCodeAt() < 97 || key [ J ].charCodeAt() > 122) {\n        lo = 0}\n      }\n    }\n  if ((lo == 0 && hi == 0) || c == 0) {\n    return false}\n  return true\n  }\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let J = 0; J < key.length; J++) {\n     \n      if (key[J].toUpperCase() === key[J].toLowerCase()) {\n        lo++\n      }\n      else {\n        hi++\n      }\n    }\n    if (hi > lo) {\n      return false\n    }\n  }\n  if (c === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  Given a list, return true if all elements are strings in lower case\n  or all elements are strings in upper case, else return false.\n  The function should return false is the given list is empty.\n  Examples:\n  checkListCase([\"a\",\"apple\", \"A\",\"banana\", \"b\",\"banana\"]) should return true.\n  checkListCase([\"a\",\"apple\", \"A\",\"banana\", \"b\",\"banana\"]) should return false.\n  checkListCase([\"a\",\"apple\", \"A\",\"banana\", \"b\",\"banana\"]) should return false.\n  checkListCase([\"a\",\"apple\", 8,\"banana\", \"a\",\"apple\"]) should return false.\n  checkListCase([\"STATE\",\"NC\", \"ZIP\", \"12345\"]) should return true.\n  checkListCase([\"STATE\",\"NC\", \"ZIP\", \"12345\"]) should return false.\n  checkListCase([\"STATE\",\"NC\", \"ZIP\", \"12345\"]) should return false.\n  */\nconst checkListCase =(list) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let i = 0; i < list.length; i++) {\n    c++\n    for (let J = 0; J < list[i].length; J++) {\n      if (list[i][J].toUpperCase() === list[i][J].toLowerCase()) {\n        lo++\n      }\n      else {\n        hi++\n      }\n    }\n    if (hi > lo) {\n      return false\n    }\n  }\n  if (c === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case\n  or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return false.\n  */\nconst checkDictCase2 =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let J = 0; J < key.length; J++) {\n      if (key[J].toUpperCase() === key[J].toLowerCase()) {\n        lo++\n      }\n      else {\n        hi++\n      }\n    }\n    if (hi > lo) {\n      return false\n    }\n  }\n  if (c === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  Given a list, return true if all elements are strings in lower case\n  or all elements are strings in upper case, else return false.\n  The function should return false is the given list is empty.\n  Examples:\n  checkListCase([\"a\",\"apple\", \"A\",\"banana\", \"b\",\"banana\"]) should return true.\n  checkListCase([\"a\",\"apple\", \"A\",\"banana\", \"b\",\"banana\"]) should return false.\n  checkListCase([\"a\",\"apple\", \"A\",\"banana\", \"b\",\"banana\"]) should return false.\n  checkListCase([\"a\",\"apple\", 8,\"banana\", \"a\",\"apple\"]) should return false.\n  checkListCase([\"STATE\",\"NC\", \"ZIP\", \"12345\"]) should return true.\n  checkListCase([\"STATE\",\"NC\", \"ZIP\", \"12345\"]) should return false.\n  checkListCase([\"STATE\",\"NC\", \"ZIP\", \"12345\"]) should return false.\n  */\nconst checkListCase2 =(list) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let i = 0; i < list.length; i++) {\n    c++\n    for (let J = 0; J < list[i].length; J++) {\n      if (list[i][J].toUpperCase() === list[i][J].toLowerCase()) {\n        lo++\n      }\n      else {\n        hi++\n      }\n    }\n    if (hi > lo) {\n      return false\n    }\n  }\n  if (c === 0) {\n    return true\n  }\n  return false\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower case\n  or all keys are strings in"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let P = 0; P < t.length; P++) {\n    let len = t [ P ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    for (let i = 2; i * i <= len; i++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (len % i == 0) {\n        u = 0}\n      }\n    if (u == 0) {\n      continue}\n    if (p == '') {\n      p+=t [ P ]}\n    else {\n      p = p + ' ' + t [ P ]}\n    }\n  return p\n  }\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let P = 0; P < t.length; P++) {\n    let len = t [ P ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    for (let i = 2; i * i <= len; i++) {\n     \n      if (t[P].charAt(0) == t[P].charAt(len - i)) {\n        u *= i\n        if (u > 1) {\n          p += t[P].substr(0, len - i)\n        }\n        break\n      }\n    }\n  }\n  return p\n}\n\nconst getPrimeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst isPrime = (number) => {\n  if (number <= 1) {\n    return false\n  }\n  if (number % 2 == 0) {\n    return false\n  }\n  let sqr = (Math.floor(Math.sqrt(number)) + 1)\n  for (let i = 3; i <= sqr; i += 2) {\n    if (number % i == 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime = (number) => {\n  if (number <= 1) {\n    return false\n  }\n  if (number % 2 == 0) {\n    return false\n  }\n  let sqr = (Math.floor(Math.sqrt(number)) + 1)\n  for (let i = 3; i <= sqr; i += 2) {\n    if (number % i == 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst primeNumbers = (n) => {\n  let result = []\n  for (let i = 2; i <= n; i++) {\n    if ("}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var K01W0DW2q80038 = [ ];\n  var current_depth = 0;\n  \n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth+=1;\n      K01W0DW2q80038.push(c);\n      }\n    else\nif (c == ')') {\n      current_depth-=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      K01W0DW2q80038.push(c);\n      if (current_depth == 0) {\n        result.push(K01W0DW2q80038.join(''));\n        K01W0DW2q80038 = [ ];\n        }\n      }\n    }\n  \n  return result;\n  }\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var K01W0DW2q80038 = [ ];\n  var current_depth = 0;\n  \n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth+=1;\n      K01W0DW2q80038.push(c);\n      }\n    else\nif (c == ')') {\n      current_depth-=1;\n     \n      if (current_depth == 0) {\n        result.push(K01W0DW2q80038.join(''));\n        K01W0DW2q80038 = [];\n        }\n      else {\n        K01W0DW2q80038.pop();\n        }\n      }\n    }\n  \n  if (K01W0DW2q80038.length > 0) {\n    result.push(K01W0DW2q80038.join(''));\n    }\n  \n  return result;\n  };\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(v1fiU87, delimeter) => {\n  if ( !Array.isArray(v1fiU87) || v1fiU87.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of v1fiU87) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    result.push(n, delimeter);\n    }\n  result.pop();\n  return result;\n  }\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(v1fiU87, delimeter) => {\n  if (!Array.isArray(v1fiU87) || v1fiU87.length == 0)\n  return [ ];\n  var result = [ ];\n  for (const n of v1fiU87) {\n   \n    result.push(n);\n    if (v1fiU87.length > 1) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n}\n\nexport { intersperse };<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(Gw9E78c) => {\n  var mean = Gw9E78c.reduce((prev, item) => {\n    return prev + item;\n    }\n  , 0) / Gw9E78c.length;\n  return Gw9E78c.reduce((prev, item) => {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n    }\n  , 0) / Gw9E78c.length;\n  \n  }\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(Gw9E78c) => {\n  var mean = Gw9E78c.reduce((prev, item) => {\n    return prev + item;\n    }\n , 0) / Gw9E78c.length;\n  return Gw9E78c.reduce((prev, item) => {\n   \n    return prev + Math.abs(item - mean);\n    }, 0) / Gw9E78c.length;\n}\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = Gw9E78c.reduce((prev, item) => {\n    return prev + item;\n    }\n , 0) / Gw9E78c.length;\n  return Gw9E78c.reduce((prev, item) => {\n   \n    return prev + Math.abs(item - mean);\n    }, 0) / Gw9E78c.length;\n}\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return Math.sqrt(\n    numbers.reduce((prev, item) => {\n      return prev + Math.pow(item - Math.floor(item), 2);\n    }, 0) / numbers.length\n  )\n}\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return Math.sqrt(\n    numbers.reduce((prev, item) => {\n      return prev + Math.pow(item - Math.floor(item), 2);\n    }, 0) / numbers.length\n  )\n}\n\n\n\n// const meanAbsoluteDeviation = (numbers) => {\n//   return Math.sqrt(\n//     numbers.reduce((prev, item) => {\n//       return prev + Math.pow(item - Math.floor(item), 2);\n//     }, 0) / numbers.length\n//   )\n// }\n\n\n// const meanAbsoluteDeviation = (numbers) => {\n//   return Math.sqrt(\n//     numbers.reduce((prev, item) => {\n//       return prev + Math.pow(item - Math.floor(item), 2);\n//     }, 0) / numbers.length\n//   )\n// }\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return Math.sqrt(\n    numbers.reduce((prev, item) => {\n      return prev + Math.pow(item - Math.floor(item), 2);\n    }, 0) / numbers.length\n  )\n}\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return Math.sqrt(\n    numbers.reduce((prev, item) => {\n      return prev + Math.pow(item - Math.floor(item), 2);\n    }, 0) / numbers.length\n  )\n}\n\n\n// const meanAbsoluteDeviation = (numbers) => {\n//   return Math.sqrt(\n//     numbers.reduce((prev, item) => {\n//       return prev + Math.pow(item - Math.floor(item), 2);\n//     }, 0) / numbers.length\n//   )\n// }\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return Math.sqrt(\n    numbers.reduce((prev, item) => {\n      return prev + Math.pow(item - Math.floor(item), 2);\n    }, 0) / numbers.length\n  )\n}\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return Math.sqrt(\n    numbers.reduce((prev, item) => {\n      return prev + Math.pow(item - Math.floor(item), 2);\n    }, 0) / numbers.length\n  )\n}\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return Math.sqrt(\n    numbers.reduce((prev, item) => {\n      return prev + Math.pow(item - Math.floor(item), 2);\n    }, 0) / numbers.length\n  )\n}\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return Math.sqrt(\n    numbers.reduce((prev, item) => {\n      return prev + Math.pow(item - Math.floor(item), 2);\n    }, 0) / numbers.length\n  )\n}\n\n\n// const meanAbsoluteDeviation = (numbers) => {\n//   return Math.sqrt(\n//     numbers.reduce((prev, item) => {\n//       return prev + Math.pow(item - Math.floor(item), 2);\n//     }, 0) / numbers.length\n//   )\n// }\n\n\n\n\n// const meanAbsoluteDeviation = (numbers) => {\n//   return Math.sqrt(\n//     numbers.reduce((prev, item) => {\n//       return prev + Math.pow(item - Math.floor(item), 2);\n//     }, 0) / numbers.length\n//   )\n// }\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return Math.sqrt(\n    numbers.reduce((prev, item) => {\n      return prev + Math.pow(item - Math.floor(item), 2);\n    }, 0) / numbers.length\n  )\n}\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return Math.sqrt(\n    numbers.reduce((prev, item) => {\n      return prev + Math.pow(item - Math.floor(item), 2);\n    }, 0) / numbers.length\n  )\n}\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return Math.sqrt"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let M = arr [ i ]\n    if (M > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    M = - M\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (M >= 10) {\n      k+=M % 10;\n      M =(M - M % 10) / 10;\n      }\n    k-=M;\n    if (k > 0) {\n      p++}\n    }\n  return p\n  }\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let M = arr [ i ]\n    if (M > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    M = - M\n   \n    for (let j = 0; j < M.length; j++) {\n      if (M.charAt(j) >= 0) {\n        k++;\n        }\n      }\n    if (k > 0) {\n      p++;\n      }\n    }\n  return p\n  }\n\n// Tests\n\nconst test_cases = [\n  [ [ ], 0 ],\n  [ [ -1, 11, -11 ], 1 ],\n  [ [ 1, 1, 2 ], 3 ],\n  ]\n\ntest_cases.forEach(function(input) {\n  let actual = countNums(input[0]);\n  let expected = input[1];\n  console.log(`${input[0].join(' ')} -> ${actual} (${expected})`);\n  assert.equal(actual, expected);\n  })\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  for (let d = 0; d < nums.length; d++) {\n    if (nums [ d ] < 10) {\n      continue}\n    let y = nums [ d ].toString()\n    if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      p++\n      }\n    }\n  return p\n  }\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  for (let d = 0; d < nums.length; d++) {\n    if (nums [ d ] < 10) {\n      continue}\n    let y = nums [ d ].toString()\n    if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n     \n      p++\n    }\n  }\n  return p\n}\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  for (let W = 0; W < string.length - substring.length + 1; W++) {\n    if (string.slice(W, W + substring.length) == substring) {\n      times+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return times;\n  }\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  for (let W = 0; W < string.length - substring.length + 1; W++) {\n    if (string.slice(W, W + substring.length) == substring) {\n      times+=1;\n     \n    }\n  }\n  return times;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  for (let T = 0; T < text.length; T++)\n  if (text [ T ] != text.at( - T - 1))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  for (let T = 0; T < text.length; T++)\n  if (text [ T ]!= text.at( - T - 1))\n \n    return false;\n  return true;\n}\n\n/*\n  Finds the longest substring which is a palindrome\n  >>> findPalindrome('aaaaa')\n  'aaaa'\n  >>> findPalindrome('abcd')\n  'abcd'\n  >>> findPalindrome('a')\n  'a'\n  >>> findPalindrome('ab')\n  'ab'\n  >>> findPalindrome('aab')\n  'aab'\n  */\nconst findPalindrome =(text) => {\n  let longest = '';\n  for (let T = 0; T < text.length; T++)\n    if (isPalindrome(text.slice(T, text.length - T)))\n      if (T + T > longest.length)\n        longest = text.slice(T, T + T);\n  return longest;\n}\n\n/*\n  Returns the longest palindrome that contains the given string\n  >>> longestPalindrome('aaaaa')\n  'aaaa'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('a')\n  'a'\n  >>> longestPalindrome('ab')\n  'ab'\n  >>> longestPalindrome('aab')\n  'aab'\n  >>> longestPalindrome('abba')\n  'abba'\n  */\nconst longestPalindrome =(text) => {\n    let longest = '';\n    for (let T = 0; T < text.length; T++)\n    if (isPalindrome(text.slice(T, text.length - T)))\n      if (T + T > longest.length)\n        longest = text.slice(T, T + T);\n    return longest;\n}\n\n/*\n  Returns the longest palindrome that contains the given string\n  >>> longestPalindrome('aaaa')\n  'aaaa'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('a')\n  'a'\n  >>> longestPalindrome('ab')\n  'ab'\n  >>> longestPalindrome('aab')\n  'aab'\n  >>> longestPalindrome('abba')\n  'abba'\n  */\nconst longestPalindrome =(text) => {\n    let longest = '';\n    for (let T = 0; T < text.length; T++)\n    if (isPalindrome(text.slice(T, text.length - T)))\n      if (T + T > longest.length)\n        longest = text.slice(T, T + T);\n    return longest;\n}\n\n/*\n  Returns the longest palindrome that contains the given string\n  >>> longestPalindrome('aaaa')\n  'aaaa'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('a')\n  'a'\n  >>> longestPalindrome('ab')\n  'ab'\n  >>> longestPalindrome('aab')\n  'aab'\n  >>> longestPalindrome('abba')\n  'abba'\n  */\nconst longestPalindrome =(text) => {\n    let longest = '';\n    for (let T = 0; T < text.length; T++)\n    if (isPalindrome(text.slice(T, text.length - T)))\n      if (T + T > longest.length)\n        longest = text.slice(T, T + T);\n    return longest;\n}\n\n/*\n  Returns the longest palindrome that contains the given string\n  >>> longestPalindrome('aaaa')\n  'aaaa'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('a')\n  'a'\n  >>> longestPalindrome('ab')\n  'ab'\n  >>> longestPalindrome('aab')\n  'aab'\n  >>> longestPalindrome('abba')\n  'abba'\n  */\nconst longestPalindrome =(text) => {\n    let longest = '';\n    for (let T = 0; T < text.length; T++)\n    if (isPalindrome(text.slice(T, text.length - T)))\n      if (T + T > longest.length)\n        longest = text.slice(T, T + T);\n    return longest;\n}\n\n/*\n  Returns the longest palindrome that contains the given string\n  >>> longestPalindrome('aaaa')\n  'aaaa'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('a')\n  'a'\n  >>> longestPalindrome('ab')\n  'ab'\n  >>> longestPalindrome('aab')\n  'aab'\n  >>> longestPalindrome('abba')\n  'abba'\n  */\nconst longestPalindrome =(text) => {\n    let longest = '';\n    for (let T = 0; T < text.length; T++)\n    if (isPalindrome(text.slice(T, text.length - T)))\n      if (T + T > longest.length)\n        longest = text.slice(T, T + T);\n    return longest;\n}\n\n/*\n  Returns the longest palindrome that contains the given string\n  >>> longestPalindrome('aaaa')\n  'aaaa'\n  >>> longestPalindrome('abcd')\n  'abcd'\n  >>> longestPalindrome('a')\n  'a'\n  >>> longestPalindrome('ab')\n  'ab'\n  >>> longestPalindrome('aab')\n  'aab'\n  >>> longestPalindrome('abba')\n  'abba'\n  */\nconst longestPalindrome =(text) => {\n    let longest = '';\n    for (let T = 0; T < text.length; T++)\n    if (isPalindrome(text.slice(T, text.length - T)))\n      if (T + T > longest.length)\n        longest = text.slice(T,"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(y9dcD2Y) => {\n  if ( !Array.isArray(y9dcD2Y) || y9dcD2Y.length == 0)\n  return null;\n  var maxlen = Math.max(... y9dcD2Y.map(x => x.length));\n  for (const s of y9dcD2Y) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n      }\n    }\n  }\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(y9dcD2Y) => {\n  if (!Array.isArray(y9dcD2Y) || y9dcD2Y.length == 0)\n  return null;\n  var maxlen = Math.max(... y9dcD2Y.map(x => x.length));\n  for (const s of y9dcD2Y) {\n   \n    if (s.length > maxlen) {\n      maxlen = s.length;\n    }\n  }\n  return y9dcD2Y[0] || y9dcD2Y[y9dcD2Y.length - 1];\n};\n\n/*\n  * Return a copy of the input list of strings, but sorted.\n  * The order is based on the length of the string, so shorter strings come first.\n  *\n  * If the input list is empty, return an empty list.\n  *\n  * >>> longestSorted([])\n  * []\n  * >>> longestSorted(['a', 'b', 'c'])\n  * ['c', 'b', 'a']\n  * >>> longestSorted(['a', 'bb', 'ccc'])\n  * ['ccc', 'bb', 'a']\n  * >>> longestSorted(['a', 'b', 'c', 'd'])\n  * ['d', 'c', 'b', 'a']\n  * */\nconst longestSorted =(y9dcD2Y) => {\n  if (!Array.isArray(y9dcD2Y) || y9dcD2Y.length == 0)\n  return [];\n  var len = y9dcD2Y.map(x => x.length);\n  len.sort((a, b) => b - a);\n  return y9dcD2Y.map(x => x);\n};\n\n/*\n  * Return the longest string in the list of strings. Return the first string in case\n  * of multiple strings of the same length. Return null in case the input list is empty.\n  *\n  * If the input list is empty, return null.\n  *\n  * >>> longestSorted([])\n  * null\n  * >>> longestSorted(['a', 'b', 'c'])\n  * 'a'\n  * >>> longestSorted(['a', 'bb', 'ccc'])\n  * 'ccc'\n  * */\nconst longestSorted =(y9dcD2Y) => {\n  if (!Array.isArray(y9dcD2Y) || y9dcD2Y.length == 0)\n  return null;\n  var maxlen = Math.max(... y9dcD2Y.map(x => x.length));\n  var minlen = Math.min(... y9dcD2Y.map(x => x.length));\n  for (const s of y9dcD2Y) {\n    if (s.length >= minlen && s.length <= maxlen) {\n      maxlen = s.length;\n    }\n  }\n  return y9dcD2Y[0] || y9dcD2Y[y9dcD2Y.length - 1];\n};\n\n\n// ------------------------------------\n// Reflection\n// ------------------------------------\n/*\n  * Test your code on the playground!\n  *\n  * Make sure your output matches the right answer.\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *\n  *"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  for (let Z = extensions.length - 1; Z >= 0; Z--) {\n    let y = 0\n    for (let j = 0; j < extensions [ Z ].length; j++) {\n      let k = extensions [ Z ] [ j ].charCodeAt()\n      if (k >= 65 && k <= 90) {\n        y+=1}\n      if (k >= 97 && k <= 122) {\n        y-=1}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (y >= s) {\n      s = y;\n      u = Z;\n      }\n    }\n  return class_name + '.' + extensions [ u ]\n  }\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  for (let Z = extensions.length - 1; Z >= 0; Z--) {\n    let y = 0\n    for (let j = 0; j < extensions [ Z ].length; j++) {\n      let k = extensions [ Z ] [ j ].charCodeAt()\n      if (k >= 65 && k <= 90) {\n        y+=1}\n      if (k >= 97 && k <= 122) {\n        y-=1}\n     \n      }\n      s = Math.min(s, y)\n    }\n    if (s > u) {\n      u = s\n      return class_name + '.' + extensions [ Z ]\n    }\n  }\n  return class_name\n}\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  for (let V = 0; V < k; V++) {\n    if (arr [ V ] < 100 && arr [ V ] > - 100) {\n      p+=arr [ V ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return p\n  }\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  for (let V = 0; V < k; V++) {\n    if (arr [ V ] < 100 && arr [ V ] > - 100) {\n      p+=arr [ V ]}\n   \n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let R8I = array\n  let tot = R8I [ 0 ] + R8I [ R8I.length - 1 ]\n  for (let j = 0; j < R8I.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < R8I.length; k++) {\n      if ((tot % 2 == 1 && R8I [ k ] < R8I [ ind ]) ||(tot % 2 == 0 && R8I [ k ] > R8I [ ind ])) {\n        ind = k\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    let tmp = R8I [ j ]\n    R8I [ j ] = R8I [ ind ]\n    R8I [ ind ] = tmp\n    }\n  return R8I\n  }\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let R8I = array\n  let tot = R8I [ 0 ] + R8I [ R8I.length - 1 ]\n  for (let j = 0; j < R8I.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < R8I.length; k++) {\n      if ((tot % 2 == 1 && R8I [ k ] < R8I [ ind ]) ||(tot % 2 == 0 && R8I [ k ] > R8I [ ind ])) {\n        ind = k\n       \n      }\n    }\n    if (ind!= j) {\n      [ R8I [ ind ], R8I [ j ] ] = [ R8I [ j ], R8I [ ind ] ]\n    }\n  }\n  return R8I\n}\n\nconst R8I = sortArray([5, 2, 4, 3, 0, 1, 5, 6])\nconsole.log(R8I)<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let x = '' let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] == ' ') {\n      c++}\n    else\nif (c > 0) {\n      if (c == 1) {\n        x+='_'}\n      if (c == 2) {\n        x+='__'}\n      if (c > 2) {\n        x+='-'}\n      x+=text [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      c = 0;\n      }\n    else {\n      x+=text [ i ]\n      }\n    }\n  if (c == 1) {\n    x+='_'}\n  if (c == 2) {\n    x+='__'}\n  if (c > 2) {\n    x+='-'}\n  return x\n  }\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let x = '' let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] =='') {\n      c++}\n    else\nif (c > 0) {\n      if (c == 1) {\n        x+='_'}\n      if (c == 2) {\n        x+='__'}\n      if (c > 2) {\n        x+='-'}\n      x+=text [ i ]\n     \n      c = 0}\n    else {\n      x+=text [ i ]}\n  }\nreturn x\n}\n\nconst generateSeed =(seed) => {\n  const seedStr = fixSpaces(seed)\n  let x = seedStr\n  let c = 0\n  while (x.length < 4) {\n    c++\n    x+=' '+c\n  }\n  x = x.substr(0,4)\n  return x\n}\n\nconst generateString =(seed) => {\n  const seedStr = generateSeed(seed)\n  let x = ''\n  let c = 0\n  for (let i = 0; i < 4; i++) {\n    c++\n    x+=seedStr[i]\n  }\n  return x\n}\n\nconst generateNumber =(seed) => {\n  const seedStr = generateSeed(seed)\n  let x = ''\n  let c = 0\n  for (let i = 0; i < 4; i++) {\n    c++\n    x+=seedStr[i]\n  }\n  x = parseInt(x)\n  return x\n}\n\nconst generateRandom =(seed) => {\n  const seedStr = generateSeed(seed)\n  let x = ''\n  let c = 0\n  while (x.length < 4) {\n    c++\n    x+=seedStr[c%4]\n  }\n  x = parseInt(x)\n  return x\n}\n\nconst generateRandomInt =(seed) => {\n  const seedStr = generateSeed(seed)\n  let x = ''\n  let c = 0\n  while (x.length < 4) {\n    c++\n    x+=seedStr[c%4]\n  }\n  x = parseInt(x)\n  return x\n}\n\nconst generateRandomIntWithLowerBound =(seed,lowerBound) => {\n  const seedStr = generateSeed(seed)\n  let x = ''\n  let c = 0\n  while (x.length < 4) {\n    c++\n    x+=seedStr[c%4]\n  }\n  x = parseInt(x)\n  x = Math.max(lowerBound,x)\n  return x\n}\n\nconst generateRandomIntWithUpperBound =(seed,upperBound) => {\n  const seedStr = generateSeed(seed)\n  let x = ''\n  let c = 0\n  while (x.length < 4) {\n    c++\n    x+=seedStr[c%4]\n  }\n  x = parseInt(x)\n  x = Math.min(upperBound,x)\n  return x\n}\n\nconst generateRandomIntRange =(seed,lowerBound,upperBound) => {\n  const seedStr = generateSeed(seed)\n  let x = ''\n  let c = 0\n  while (x.length < 4) {\n    c++\n    x+=seedStr[c%4]\n  }\n  x = parseInt(x)\n  x = Math.max(lowerBound,x)\n  x = Math.min(upperBound,x)\n  return x\n}\n\nconst generateRandomIntRangeInclusive =(seed,lowerBound,upperBound) => {\n  const seedStr = generateSeed(seed)\n  let x = ''\n  let c = 0\n  while (x.length < 4) {\n    c++\n    x+=seedStr[c%4]\n  }\n  x = parseInt(x)\n  x = Math.min(upperBound,x)\n  x = Math.max(lowerBound,x)\n  return x\n}\n\nconst generateRandomIntRangeInclusiveWithLowerBound =(seed,lowerBound,upperBound) => {\n  const seedStr = generateSeed(seed)\n  let x = ''\n  let c = 0\n  while (x.length < 4) {\n    c++\n    x+=seedStr[c%4]\n  }\n  x = parseInt(x)\n  x = Math.min(upperBound,x)\n  x = Math.max(lowerBound,x)\n  return x\n}\n\nconst generateRandomIntRangeInclusiveWithUpperBound =(seed,lowerBound,upperBound) => {\n  const seedStr = generateSeed(seed)\n  let x = ''\n  let c = 0\n  while (x.length < 4) {\n    c++\n    x+=seedStr[c%4]\n  }\n  x = parseInt(x)\n  x = Math.max(lowerBound,x)\n  x = Math.min(upperBound,x)\n  return x\n}\n\nconst generateRandomNumberInRange =(seed,lowerBound,upperBound) => {\n  const seedStr = generateSeed(seed)\n  let x = ''\n  let c = 0\n  while (x.length < 4) {\n    c++\n    x+=seedStr[c%4]\n  }\n  x = parseInt(x)\n  x = Math.min(upperBound,x)\n  x = Math.max(lowerBound,x)\n  return x\n}\n\nconst generateRandomNumberInRangeWithLowerBound =(seed,lowerBound,upperBound) => {\n  const seedStr = generateSeed(seed)\n  let x = ''\n  let c = 0\n  while (x.length < 4) {\n    c++\n    x+=seedStr[c%4]\n  }\n  x = parseInt(x)\n  x = Math.max(lowerBound,x)\n  x = Math"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, R) =>(a - R));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, R) =>(a - R));\n \n};\n\nmodule.exports = unique;<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(W) => {\n  var sort1 = [ ... W ].sort((a, b) => a - b);\n  var sort2 = [ ... W ].sort((a, b) => b - a);\n  if (JSON.stringify(W) === JSON.stringify(sort1) ||\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  JSON.stringify(W) === JSON.stringify(sort2))\n  return true;\n  return false;\n  }\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(W) => {\n  var sort1 = [... W ].sort((a, b) => a - b);\n  var sort2 = [... W ].sort((a, b) => b - a);\n  if (JSON.stringify(W) === JSON.stringify(sort1) ||\n \n  JSON.stringify(W) === JSON.stringify(sort2)) return true;\n  else return false;\n}\n\nconst find =(w) => {\n  var W = [...w].sort();\n  var i = 0;\n  var j = W.length - 1;\n  while (i < j) {\n    var mid = (i + j) / 2;\n    var midValue = W[mid];\n    if (midValue > W[i]) {\n      i = mid + 1;\n    } else if (midValue < W[i]) {\n      j = mid - 1;\n    }\n  }\n  return W[i];\n}\n\nconst main =(W) => {\n  console.log(monotonic(W));\n  console.log(find(W));\n}\n\nmain(W);\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q) => {\n  return p3z456q.join('');\n \n};\n\n\n/* Concatenate strings and list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate('a', 'b', 'c')\n  'abc'\n  */\nconst concatenate =(p3z456q"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let B = 0; B < lst1.length; B++) {\n    if (lst1 [ B ] % 2 == 0) {\n      t++}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let B = 0; B < lst2.length; B++) {\n    if (lst2 [ B ] % 2 == 0) {\n      t++}\n    }\n  if (t >= k) {\n    return 'YES'}\n  return 'NO'}\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let B = 0; B < lst1.length; B++) {\n    if (lst1 [ B ] % 2 == 0) {\n      t++}\n    }\n \n  for (let i = 0; i < k; i++) {\n    if (lst2 [ i ] % 2 == 0) {\n      t--}\n    }\n  \n  if (t == 0) {\n    return \"YES\"\n  } else {\n    return \"NO\"\n  }\n}\n\n//Test cases\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4])\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5])\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4])\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\nexchange([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\nexchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\nexchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7])\nexchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7])\nexchange([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8])\nexchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8])\nexchange([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [1,"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(HhW2hE) => {\n  return HhW2hE.length;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(HhW2hE) => {\n  return HhW2hE.length;\n \n};\n\n// \n// /* Return the character at given index in the given string\n//   >>> strat('')\n//   >>> strat('abc')\n//   'a'\n//   >>> strat('abc', 2)\n//   'c'\n//   */\nconst strat =(HhW2hE, index) => {\n  return HhW2hE[index];\n \n};\n\n// \n// /* Return the index of the given character in the given string\n//   >>> indexOf('abc', 'a')\n//   0\n//   >>> indexOf('abc', 'z')\n//   -1\n//   >>> indexOf('abc', 'a', 2)\n//   2\n//   */\nconst indexOf =(HhW2hE, char, index) => {\n  const N = HhW2hE.length;\n  for (let i = index; i < N; i++) {\n    if (HhW2hE[i] === char) {\n      return i;\n    }\n  }\n  return -1;\n \n};\n\n// \n// /* Return the last index of the given character in the given string\n//   >>> lastIndexOf('abc', 'a')\n//   2\n//   >>> lastIndexOf('abc', 'z')\n//   -1\n//   >>> lastIndexOf('abc', 'a', 2)\n//   2\n//   */\nconst lastIndexOf =(HhW2hE, char, index) => {\n  const N = HhW2hE.length;\n  for (let i = index; i >= 0; i--) {\n    if (HhW2hE[i] === char) {\n      return i;\n    }\n  }\n  return -1;\n \n};\n\n// \n// /* Return true if the given string contains the given character\n//   >>> contains('abc', 'a')\n//   True\n//   >>> contains('abc', 'z')\n//   False\n//   */\nconst contains =(HhW2hE, char) => {\n  return indexOf(HhW2hE, char, 0)!== -1;\n \n};\n\n// \n// /* Return true if the given string starts with the given prefix\n//   >>> startsWith('abc', 'ab')\n//   True\n//   >>> startsWith('abc', 'abx')\n//   False\n//   */\nconst startsWith =(HhW2hE, prefix) => {\n  return indexOf(HhW2hE, prefix, 0) === 0;\n \n};\n\n// \n// /* Return true if the given string ends with the given suffix\n//   >>> endsWith('abc', 'bc')\n//   True\n//   >>> endsWith('abc', 'ab')\n//   False\n//   */\nconst endsWith =(HhW2hE, suffix) => {\n  return lastIndexOf(HhW2hE, suffix, HhW2hE.length - 1) === HhW2hE.length - 1;\n \n};\n\n// \n// /* Return a new string that has all the characters in the given string\n//   >>> replace('abc', 'b', 'z')\n//   'azc'\n//   */\nconst replace =(HhW2hE, char, replace) => {\n  const N = HhW2hE.length;\n  let result = '';\n  for (let i = 0; i < N; i++) {\n    result += HhW2hE[i];\n    if (HhW2hE[i] === char) {\n      result += replace;\n    }\n  }\n  return result;\n \n};\n\n// \n// /* Return a new string that has the given prefix prepended to the given string\n//   >>> prefix('abc', 'ab')\n//   'ababc'\n//   */\nconst prefix =(HhW2hE, prefix) => {\n  return prefix + HhW2hE;\n \n};\n\n// \n// /* Return a new string that has the given suffix appended to the given string\n//   >>> suffix('abc', 'bc')\n//   'abcbc'\n//   */\nconst suffix =(HhW2hE, suffix) => {\n  return HhW2hE + suffix;\n \n};\n\n// \n// /* Return a new string that has the given prefix and suffix appended to the given string\n//   >>> prefixAndSuffix('abc', 'ab', 'bc')\n//   'ababcbc'\n//   */\nconst prefixAndSuffix =(HhW2hE, prefix, suffix) => {\n  return prefix + HhW2hE + suffix;\n \n};\n\n// \n// /* Return a new string that has the given prefix, suffix and characters in the given string\n//   >>> add('abc', 'b', 'z')\n//   'abzc'\n//   */\nconst add =(HhW2hE, char, suffix) => {\n  const N = HhW2hE.length;\n  let result = '';\n  for (let i = 0; i < N; i++) {\n    result += HhW2hE[i];\n    if (HhW2hE[i] === char) {\n      result += char;\n    }\n  }\n  result += suffix;\n  return result;\n \n};\n\n// \n// /* Return a new string that has the given prefix, suffix and characters in the given string\n//   >>> add('abc', 'b', 'z')\n//   'abzc'\n//   */\nconst add2 =(HhW2hE, char, suffix) => {\n  const N = HhW2hE.length;\n  let result = '';\n  for (let i = 0; i < N; i++) {\n    result += HhW2hE[i];\n    if (HhW2hE[i] === char) {\n      result += suffix;\n    }\n  }\n  return result;\n \n};\n\n// \n// /* Return a new string that has the given prefix, suffix and characters in the given string\n//   >>> add('abc', 'b"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let G = 0; G < l; G++) {\n        if (a [ i + G ] != pat [ j + G ]) {\n          y = 0}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (y == 1) {\n        return true\n        }\n      }\n    }\n  return false\n  }\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let G = 0; G < l; G++) {\n        if (a [ i + G ]!= pat [ j + G ]) {\n          y = 0}\n       \n      }\n      if (y) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nconsole.log(cycpatternCheck(\"himenss\",\"simen\"))<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(m3s18o) => {\n  return m3s18o % 1.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(m3s18o) => {\n  return m3s18o % 1.0;\n \n};\n\nexport default {\n  truncateNumber\n};\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(b) => {\n  let p = 1\n  let k = 1\n  while (b > 0) {\n    let y = b % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    b =(b - b % 10) / 10\n    }\n  if (k == 0) {\n    return p}\n  return 0\n  }\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(b) => {\n  let p = 1\n  let k = 1\n  while (b > 0) {\n    let y = b % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n     \n    }\n    b = b / 10;\n    if (b > 0) {\n      k += 1;\n    }\n  }\n  if (k === 1) {\n    return p;\n  } else {\n    return 0;\n  }\n}\n\nexport default digits;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let m2 = txt.split( / s /)\n  if (m2.length > 1) {\n    return m2\n    }\n  else {\n    m2 = txt.split( /, /)\n    if (m2.length > 1) {\n      return m2\n      }\n    else {\n      let p = 0\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt [ i ].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n          }\n        }\n      return p\n      }\n    }\n  }\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let m2 = txt.split( / s /)\n  if (m2.length > 1) {\n    return m2\n    }\n  else {\n    m2 = txt.split( /, /)\n    if (m2.length > 1) {\n      return m2\n      }\n    else {\n      let p = 0\n     \n      let s = 0\n      for (let i = 0; i < txt.length; i++) {\n        if (txt[i] =='') {\n          p++\n        }\n      }\n      if (p % 2 == 1) {\n        return m2\n      }\n      else {\n        for (let i = 0; i < txt.length; i++) {\n          if (txt[i] =='') {\n            s++\n          }\n        }\n        if (s % 2 == 1) {\n          return m2\n        }\n        else {\n          let p = 0\n          let s = 0\n          for (let i = 0; i < txt.length; i++) {\n            if (txt[i] =='') {\n              p++\n            }\n          }\n          if (p % 2 == 1) {\n            return m2\n          }\n          else {\n            for (let i = 0; i < txt.length; i++) {\n              if (txt[i] =='') {\n                s++\n              }\n            }\n            if (s % 2 == 1) {\n              return m2\n            }\n            else {\n              return txt.toLowerCase()\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n/* Given a list of words, return a list of pairs of words, split on whitespace. \n  Example\n  splitWords([\"Hello\", \"world!\"]) ➞ [['Hello', 'world!']]\n  */\nconst splitWordsPairs =(txt) => {\n  let m2 = txt.split( / s /)\n  if (m2.length > 1) {\n    return m2\n    }\n  else {\n    return txt.split( /, /)\n    }\n}\n\n/* Given a list of pairs of words, return a list of pairs of words split on whitespace. \n  Example\n  splitWordsPairs([[\"Hello\", \"world!\"], [\"Good\", \"morning\"]]) ➞ [[\"Hello\", \"world!\"], [\"Good\", \"morning\"]]\n  */\nconst splitWordsPairsPairs =(txt) => {\n  let m2 = txt.split( / s /)\n  if (m2.length > 1) {\n    return m2\n    }\n  else {\n    return txt.split( /, /)\n    }\n}\n\n/* Given a list of words, return a list of words in reverse order. \n  Example\n  splitWordsReverse([[\"Hello\", \"world!\"], [\"Good\", \"morning\"]]) ➞ [[\"Good\", \"morning\"], [\"Hello\", \"world!\"]]\n  */\nconst splitWordsReverse =(txt) => {\n  let m2 = txt.split( / s /)\n  if (m2.length > 1) {\n    return m2.reverse()\n    }\n  else {\n    return txt.split( /, /)\n    }\n}\n\n/* Given a string, return a string made by appending a given string to the beginning and the end of the string. \n  Example\n  padString(\"Hello\", \"World\") ➞ \"HelloWorld\"\n  */\nconst padString =(txt, str) => {\n  return str + txt + str\n}\n\n/* Given a string, return a string made by appending a given string to the beginning and the end of the string. \n  Example\n  padString(\"Hello\", \"World\") ➞ \"HelloWorld\"\n  */\nconst padStringPairs =(txt, str) => {\n  return str + txt + str\n}\n\n/* Given a string, return a string made by appending a given string to the beginning and the end of the string. \n  Example\n  padString(\"Hello\", \"World\") ➞ \"HelloWorld\"\n  */\nconst padStringPairsPairs =(txt, str) => {\n  return str + txt + str\n}\n\n/* Given a string, return a string made by removing characters in the given string from the beginning and the end of the string. \n  Example\n  removeCharacter(\"Hello World!\", \"Hello\") ➞ \"World!\"\n  */\nconst removeCharacter =(txt, str) => {\n  return txt.replace(str, \"\")\n}\n\n/* Given a string, return a string made by removing characters in the given string from the beginning and the end of the string. \n  Example\n  removeCharacter(\"Hello World!\", \"Hello\") ➞ \"World!\"\n  */\nconst removeCharacterPairs =(txt, str) => {\n  return txt.replace(str, \"\")\n}\n\n/* Given a string, return a string made by removing characters in the given string from the beginning and the end of the string. \n  Example\n  removeCharacter(\"Hello World!\", \"Hello\") ➞ \"World!\"\n  */\nconst removeCharacterPairsPairs =(txt, str) => {\n  return txt.replace(str, \"\")\n}\n\n/* Given a string, return a string made by replacing a given string with another given string. \n  Example\n  replaceCharacter(\"Hello World!\", \"Hello\", \"Hi\") ➞ \"Hi World!\"\n  */\nconst replaceCharacter =(txt, str, with) => {\n  return txt.replace(str, with)\n}\n\n/* Given a string, return a string made by replacing a given string with another given string. \n  Example\n  replaceCharacter(\"Hello World!\", \"Hello\", \"Hi\") ➞ \"Hi World!\"\n  */\nconst replaceCharacterPairs =("}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var gOx = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (e1 == e2)\n  gOx.add(e1);\n  return [ ... gOx ].sort();\n  }\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var gOx = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n  if (gOx.has(e2))\n    return [e1, e2]\n  else\n    gOx.add(e2);\n};\n\n/* Return a list of elements from a given list that are not in the\n * other list.\n  >>> common([1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 4, 7, 9])\n  [3, 5, 8]\n  >>> common([1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 4, 5, 7, 9, 10])\n  [6, 8]\n  >>> common([1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 4, 5, 7, 9, 10, 11])\n  []\n  >>> common([1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 4, 5, 7, 9, 10, 11, 12])\n  [11]\n  >>> common([1, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 4, 5, 7, 9, 10, 11, 12, 13])\n  [11, 12]\n*/\nconst difference =(l1, l2) => {\n  var gOx = new Set();\n  for (const e1 of l1)\n  if (!gOx.has(e1))\n    gOx.add(e1);\n  for (const e2 of l2)\n  if (!gOx.has(e2))\n    return [e1, e2];\n};\n\n/*Return the intersection of two lists.\n  >>> intersection([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [5]\n  >>> intersection([1, 4, 3, 34, 653, 2, 5], [3, 2])\n  [3]\n  >>> intersection([5, 3, 2, 8], [3, 2])\n  [3]\n  >>> intersection([5, 3, 2, 8], [3, 2, 1])\n  [1, 3]\n*/\nconst intersection =(l1, l2) => {\n  var gOx = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n  if (gOx.has(e2))\n    return [e1, e2];\n};\n\n/* Return the union of two lists.\n  >>> union([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 4, 3, 34, 653, 5, 7, 1, 5, 9, 653, 121]\n  >>> union([1, 4, 3, 34, 653, 2, 5], [3, 2])\n  [1, 4, 3, 34, 653, 5, 7, 1, 5, 9, 653]\n  >>> union([5, 3, 2, 8], [3, 2])\n  [5, 3, 2, 8]\n  >>> union([5, 3, 2, 8], [3, 2, 1])\n  [5, 3, 2, 8, 1]\n*/\nconst union =(l1, l2) => {\n  var gOx = new Set();\n  for (const e1 of l1)\n  gOx.add(e1);\n  for (const e2 of l2)\n  gOx.add(e2);\n  return gOx.values();\n};\n\nmodule.exports = {\n  common: common,\n  difference: difference,\n  intersection: intersection,\n  union: union\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  for (let k = 0; k < n; k++)\n  if (k % 11 == 0 || k % 13 == 0)\n  ns.push(k);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n  ans+=(c == '7');\n  return ans;\n  }\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  for (let k = 0; k < n; k++)\n  if (k % 11 == 0 || k % 13 == 0)\n  ns.push(k);\n \n  ns.forEach(function(v){\n    console.log(v);\n    ans += 1;\n  });\n  return ans;\n};\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n  for (let j = 0; j < numbers.length; j++)\n  if (i != j) {\n    let a = numbers [ i ], M = numbers [ j ];\n    if (distance == null) {\n      distance = Math.abs(a - M);\n      closest_pair = [ Math.min(a, M), Math.max(a, M) ];\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let new_distance = Math.abs(a - M);\n      if (new_distance < distance) {\n        distance = new_distance;\n        closest_pair = [ Math.min(a, M), Math.max(a, M) ];\n        }\n      }\n    }\n  return closest_pair;\n  }\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n  for (let j = 0; j < numbers.length; j++)\n  if (i!= j) {\n    let a = numbers [ i ], M = numbers [ j ];\n    if (distance == null) {\n      distance = Math.abs(a - M);\n      closest_pair = [ Math.min(a, M), Math.max(a, M) ];\n      }\n    else {\n     \n      if (Math.abs(a - M) < distance) {\n        distance = Math.abs(a - M);\n        closest_pair = [ Math.min(a, M), Math.max(a, M) ];\n        }\n      }\n    }\n  return closest_pair;\n  };\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let Q = lst [ i ]\n    if (Q % 1 != 0) {\n      if (Q > 0) {\n        Q = Q - Q % 1 + 1}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      else {\n        Q = - Q; Q = Q - Q % 1}\n      }\n    p+=Q * Q\n    }\n  return p\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let Q = lst [ i ]\n    if (Q % 1!= 0) {\n      if (Q > 0) {\n        Q = Q - Q % 1 + 1}\n     \n      if (Q % 1 == 0) {\n        Q = Q - Q % 1}\n    }\n    p += Q * Q\n  }\n  return p\n}\n\nconsole.log(sumSquares([1,2,3]))\n<|endoftext|>"}
{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let C = 0; C < numbers.length; C++) {\n      if (i != C) {\n        let distance = Math.abs(numbers [ i ] - numbers [ C ]);\n        if (distance < threshold) {\n          return true;\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        }\n      }\n    }\n  return false;\n  }\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let C = 0; C < numbers.length; C++) {\n      if (i!= C) {\n        let distance = Math.abs(numbers [ i ] - numbers [ C ]);\n        if (distance < threshold) {\n          return true;\n         \n        }\n      }\n    }\n  }\n  return false;\n}\n\n\n/*\n  >>> getFarthestPoint([1,2,3,4,5], 2)\n  [4, 5]\n  >>> getFarthestPoint([1,2,3,4,5], 3)\n  [4, 5]\n  >>> getFarthestPoint([1,2,3,4,5], 4)\n  [4, 5]\n  >>> getFarthestPoint([1,2,3,4,5], 5)\n  [5]\n  >>> getFarthestPoint([1,2,3,4,5], 1)\n  []\n  */\nconst getFarthestPoint = (numbers, threshold) => {\n  let farthestPoint = [], \n      numbersCopy = JSON.parse(JSON.stringify(numbers));\n  for (let i = 0; i < numbersCopy.length; i++) {\n    let distance = 0;\n    for (let C = 0; C < numbersCopy.length; C++) {\n      if (i!= C) {\n        distance += Math.pow(numbersCopy [ i ] - numbersCopy [ C ], 2);\n      }\n    }\n    distance = Math.sqrt(distance);\n    if (distance > threshold) {\n      farthestPoint.push(numbersCopy [ i ]);\n    }\n  }\n  return farthestPoint;\n}\n\n\n/*\n  >>> isConnected([1,2,3,4,5], [2,3,4,5])\n  true\n  >>> isConnected([1,2,3,4,5], [3,4,5])\n  false\n  >>> isConnected([1,2,3,4,5], [3,4])\n  true\n  >>> isConnected([1,2,3,4,5], [3,4,5,6])\n  false\n  */\nconst isConnected = (numbers, numbers2) => {\n  let i = 0;\n  while (i < numbers.length) {\n    let j = 0;\n    while (j < numbers2.length) {\n      if (numbers [ i ] == numbers2 [ j ]) {\n        return true;\n      }\n      j++;\n    }\n    i++;\n  }\n  return false;\n}\n\n\n/*\n  >>> isPath(1, 2, [3, 4])\n  true\n  >>> isPath(1, 2, [3, 4, 5])\n  false\n  >>> isPath(1, 2, [3])\n  false\n  */\nconst isPath = (source, target, path) => {\n  if (path.length == 1) {\n    return source == path [ 0 ];\n  }\n  if (path.length == 2) {\n    return source == path [ 0 ] && target == path [ 1 ];\n  }\n  return source == path [ 0 ] && isPath(target, path [ 1 ], path.slice(2));\n}\n\n\nmodule.exports = {\n  hasCloseElements,\n  getFarthestPoint,\n  isConnected,\n  isPath\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (p == 1) {\n      t.push(t2)}\n    }\n  return t\n  }\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p == 1) {\n      t.push(t2)\n    }\n  }\n  return t\n}\n\nconst countUpTo2 =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p == 1) {\n      t.push(t2)\n    }\n  }\n  return t\n}\n\nconst countUpTo3 =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p == 1) {\n      t.push(t2)\n    }\n  }\n  return t\n}\n\nconst countUpTo4 =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p == 1) {\n      t.push(t2)\n    }\n  }\n  return t\n}\n\nconst countUpTo5 =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p == 1) {\n      t.push(t2)\n    }\n  }\n  return t\n}\n\nconst countUpTo6 =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p == 1) {\n      t.push(t2)\n    }\n  }\n  return t\n}\n\nconst countUpTo7 =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p == 1) {\n      t.push(t2)\n    }\n  }\n  return t\n}\n\nconst countUpTo8 =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p == 1) {\n      t.push(t2)\n    }\n  }\n  return t\n}\n\nconst countUpTo9 =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p == 1) {\n      t.push(t2)\n    }\n  }\n  return t\n}\n\nconst countUpTo10 =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p == 1) {\n      t.push(t2)\n    }\n  }\n  return t\n}\n\nconst countUpTo11 =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p == 1) {\n      t.push(t2)\n    }\n  }\n  return t\n}\n\nconst countUpTo12 =(n) => {\n  let t = [ ]\n  for (let t2 = 2; t2 < n; t2++) {\n    let p = 1\n    for (let j = 2; j * j <= t2; j++) {\n      if (t2 % j == 0) {\n        p = 0; break}\n     "}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(bA4) => {\n  var res = [ ], sw = true;\n  while (bA4.length) {\n    res.push(sw ? Math.min(... bA4) : Math.max(... bA4));\n    bA4.splice(bA4.indexOf(res.at( - 1)), 1);\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    sw = !sw;\n    }\n  return res;\n  }\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(bA4) => {\n  var res = [ ], sw = true;\n  while (bA4.length) {\n    res.push(sw? Math.min(... bA4) : Math.max(... bA4));\n    bA4.splice(bA4.indexOf(res.at( - 1)), 1);\n   \n    if (res.length > 1) {\n      sw =!sw;\n    }\n  }\n  return res;\n}\n\n/*\n  Given two lists, return list with items in common\n  if items are in both lists, the value will be duplicated.\n\n  Examples:\n  list1 = [1, 2, 3, 4, 5]\n  list2 = [2, 3, 4, 5]\n  listCommon = [2, 3, 4, 5]\n  */\nconst listCommon = (bA1, bA2) => {\n  var common = [ ], res = [], c, i = 0;\n  while (bA1.length && bA2.length) {\n    c = bA1.at(i) === bA2.at(i);\n    if (c) {\n      common.push(bA1.at(i));\n      res.push(bA1.at(i));\n    }\n    i++;\n  }\n  return common;\n}\n\nmodule.exports = {\n  strangeSortList,\n  listCommon\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(z2, y, z) => {\n  if (z2 % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(z2 + y === z || z2 + z === y || z2 === y + z)) {\n    return true\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return false\n  }\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(z2, y, z) => {\n  if (z2 % 1 === 0 && y % 1 === 0 && z % 1 === 0 &&(z2 + y === z || z2 + z === y || z2 === y + z)) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst anyString =(z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst allInt = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst anyNumber =(z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst allString = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst isInteger = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst any = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst all = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst anyNumber = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst allNumber = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst anyString = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst allString = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst isEqual = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst isNotEqual = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return false\n   \n  } else {\n    return true\n  }\n}\n\nconst isGreater = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst isLess = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return false\n   \n  } else {\n    return true\n  }\n}\n\nconst isGreaterOrEqual = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst isLessOrEqual = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return false\n   \n  } else {\n    return true\n  }\n}\n\nconst isZero = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return false\n   \n  } else {\n    return true\n  }\n}\n\nconst isOne = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return false\n   \n  } else {\n    return true\n  }\n}\n\nconst isNotZero = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst isNotOne = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return false\n   \n  } else {\n    return true\n  }\n}\n\nconst isEven = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return false\n   \n  } else {\n    return true\n  }\n}\n\nconst isOdd = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst isNotEven = (z2, y, z) => {\n  if (z2 === y + z || z2 === z + y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\nconst isNotOdd"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(i) => {\n  if (i == 0)\n  return 0;\n  if (i == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fib(i - 1) + fib(i - 2);\n  }\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(i) => {\n  if (i == 0)\n  return 0;\n  if (i == 1)\n \n    return 1;\n  return fib(i - 1) + fib(i - 2);\n};\n\n\n\nconsole.log(\"Fibonacci number \" + fib(10));\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, r0) => {\n  return JSON.stringify([ ... new Set(s0) ].sort()) === JSON.stringify([ ... new Set(r0) ].sort());\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, r0) => {\n  return JSON.stringify([... new Set(s0) ].sort()) === JSON.stringify([... new Set(r0) ].sort());\n \n}\n\nexport default sameChars;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(v23Zu) => {\n  let s = - 1\n  let u = - 1\n  if (v23Zu.length == 0) {\n    return ''}\n  for (let i = 0; i < v23Zu.length; i++) {\n    let p = 0\n    for (let j = 0; j < v23Zu [ i ].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (v23Zu [ i ] [ j ] == v23Zu [ i ] [ k ]) {\n          y = 0}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (y == 1) {\n        p++}\n      }\n    if (p > s ||(p == s && v23Zu [ i ] < v23Zu [ u ])) {\n      u = i;\n      s = p;\n      }\n    }\n  return v23Zu [ u ]\n  }\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(v23Zu) => {\n  let s = - 1\n  let u = - 1\n  if (v23Zu.length == 0) {\n    return ''}\n  for (let i = 0; i < v23Zu.length; i++) {\n    let p = 0\n    for (let j = 0; j < v23Zu [ i ].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (v23Zu [ i ] [ j ] == v23Zu [ i ] [ k ]) {\n          y = 0}\n       \n        }\n      if (y == 1) {\n        p++\n      }\n      }\n    if (p > s) {\n      s = p\n      u = i\n    }\n  }\n  return v23Zu [ u ]\n}\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]))\nconsole.log(findMax([\"name\", \"enam\", \"game\"]))\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, bI3q) => prev + bI3q.length), 0);\n  var l2 = lst2.reduce(((prev, bI3q) => prev + bI3q.length), 0);\n  if (l1 <= l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return lst1;\n  else\n  return lst2;\n  }\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, bI3q) => prev + bI3q.length), 0);\n  var l2 = lst2.reduce(((prev, bI3q) => prev + bI3q.length), 0);\n  if (l1 <= l2)\n \n    return lst1;\n  else \n    return lst2;\n};\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  for (let n = 0; n < Math.floor(arr.length / 2); n++)\n  if (arr [ n ] != arr.at( - n - 1))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  ans++;\n  return ans;\n  }\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  for (let n = 0; n < Math.floor(arr.length / 2); n++)\n  if (arr [ n ]!= arr.at( - n - 1))\n \n    ans++;\n  return ans;\n}\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  var U = [ 0, 1 ];\n  while (true) {\n    U.push(U.at( - 1) + U.at( - 2));\n    if (isPrime(U.at( - 1)))\n    n-=1;\n    if (n == 0)\n    return U.at( - 1);\n    }\n  }\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n  var fib = function(n) {\n    return fib(n - 1) + fib(n - 2);\n    }\n \n  var prime = function(n) {\n    return fib(n) === n && isPrime(fib(n));\n    }\n \n  return prime(n);\n}\n\nconsole.log(primeFib(1));\nconsole.log(primeFib(2));\nconsole.log(primeFib(3));\nconsole.log(primeFib(4));\nconsole.log(primeFib(5));\n\n/*\n  primeFib2 returns n-th number that is a Fibonacci number and is also prime.\n  >>> primeFib2(1)\n  2\n  >>> primeFib2(2)\n  3\n  >>> primeFib2(3)\n  5\n  >>> primeFib2(4)\n  13\n  >>> primeFib2(5)\n  89\n  */\nconst primeFib2 =(n) => {\n  var fib = function(n) {\n    return fib(n - 1) + fib(n - 2);\n    }\n \n  var prime = function(n) {\n    return fib(n) === n && isPrime(fib(n));\n    }\n \n  return prime(n);\n}\n\nconsole.log(primeFib2(1));\nconsole.log(primeFib2(2));\nconsole.log(primeFib2(3));\nconsole.log(primeFib2(4));\nconsole.log(primeFib2(5));\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  \n  var largest = 1;\n  for (let q = 2; q < n + 1; q++)\n  if (n % q == 0 && isPrime(q))\n  largest = Math.max(largest, q);\n  return largest;\n  }\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n  };\n  let d = 2;\n  while (isPrime(d * d))\n  d++;\n  for (let i = d + 1; i <= Math.sqrt(n); i++) {\n    if (isPrime(n / i))\n    return i;\n  }\n  return n;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(H) => {\n  return(H >= 8 && H % 2 == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(H) => {\n  return(H >= 8 && H % 2 == 0)\n \n};\n\nconst generateArray =(L) => {\n  const result = [];\n  for(let i = 1; i <= L; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst isSumOfTwoArray =(n) => {\n  return(generateArray(n).every(x => x % 2 == 0));\n};\n\nconst isSumOfThreeArray =(n) => {\n  return(generateArray(n).every(x => x % 3 == 0));\n};\n\nconst isSumOfFourArray =(n) => {\n  return(generateArray(n).every(x => x % 4 == 0));\n};\n\nconst isSumOfFiveArray =(n) => {\n  return(generateArray(n).every(x => x % 5 == 0));\n};\n\nconst isSumOfSixArray =(n) => {\n  return(generateArray(n).every(x => x % 6 == 0));\n};\n\nconst isSumOfSevenArray =(n) => {\n  return(generateArray(n).every(x => x % 7 == 0));\n};\n\nconst isSumOfEightArray =(n) => {\n  return(generateArray(n).every(x => x % 8 == 0));\n};\n\nconst isSumOfNineArray =(n) => {\n  return(generateArray(n).every(x => x % 9 == 0));\n};\n\nconst isSumOfTenArray =(n) => {\n  return(generateArray(n).every(x => x % 10 == 0));\n};\n\nconst isSumOfElevenArray =(n) => {\n  return(generateArray(n).every(x => x % 11 == 0));\n};\n\nconst isSumOfTwelveArray =(n) => {\n  return(generateArray(n).every(x => x % 12 == 0));\n};\n\nconst isSumOfThirteenArray =(n) => {\n  return(generateArray(n).every(x => x % 13 == 0));\n};\n\nconst isSumOfFourteenArray =(n) => {\n  return(generateArray(n).every(x => x % 14 == 0));\n};\n\nconst isSumOfFifteenArray =(n) => {\n  return(generateArray(n).every(x => x % 15 == 0));\n};\n\nconst isSumOfSixteenArray =(n) => {\n  return(generateArray(n).every(x => x % 16 == 0));\n};\n\nconst isSumOfSeventeenArray =(n) => {\n  return(generateArray(n).every(x => x % 17 == 0));\n};\n\nconst isSumOfEighteenArray =(n) => {\n  return(generateArray(n).every(x => x % 18 == 0));\n};\n\nconst isSumOfNineteenArray =(n) => {\n  return(generateArray(n).every(x => x % 19 == 0));\n};\n\nconst isSumOfTwentyArray =(n) => {\n  return(generateArray(n).every(x => x % 20 == 0));\n};\n\nconst isSumOfTwentyOneArray =(n) => {\n  return(generateArray(n).every(x => x % 21 == 0));\n};\n\nconst isSumOfTwentyTwoArray =(n) => {\n  return(generateArray(n).every(x => x % 22 == 0));\n};\n\nconst isSumOfTwentyThreeArray =(n) => {\n  return(generateArray(n).every(x => x % 23 == 0));\n};\n\nconst isSumOfTwentyFourArray =(n) => {\n  return(generateArray(n).every(x => x % 24 == 0));\n};\n\nconst isSumOfTwentyFiveArray =(n) => {\n  return(generateArray(n).every(x => x % 25 == 0));\n};\n\nconst isSumOfTwentySixArray =(n) => {\n  return(generateArray(n).every(x => x % 26 == 0));\n};\n\nconst isSumOfTwentySevenArray =(n) => {\n  return(generateArray(n).every(x => x % 27 == 0));\n};\n\nconst isSumOfTwentyEightArray =(n) => {\n  return(generateArray(n).every(x => x % 28 == 0));\n};\n\nconst isSumOfTwentyNineArray =(n) => {\n  return(generateArray(n).every(x => x % 29 == 0));\n};\n\nconst isSumOfThirtyArray =(n) => {\n  return(generateArray(n).every(x => x % 30 == 0));\n};\n\nconst isSumOfThirtyOneArray =(n) => {\n  return(generateArray(n).every(x => x % 31 == 0));\n};\n\nconst isSumOfThirtyTwoArray =(n) => {\n  return(generateArray(n).every(x => x % 32 == 0));\n};\n\nconst isSumOfThirtyThreeArray =(n) => {\n  return(generateArray(n).every(x => x % 33 == 0));\n};\n\nconst isSumOfThirtyFourArray =(n) => {\n  return(generateArray(n).every(x => x % 34 == 0));\n};\n\nconst isSumOfThirtyFiveArray =(n) => {\n  return(generateArray(n).every(x => x % 35 == 0));\n};\n\nconst isSumOfThirtySixArray =(n) => {\n  return(generateArray(n).every(x => x % 36 == 0));\n};\n\nconst isSumOfThirtySevenArray =(n) => {\n  return(generateArray(n).every(x => x % 37 == 0));\n};\n\nconst isSumOfThirtyEightArray =(n) => {\n  return(generateArray(n).every(x => x % 38 == 0));\n};\n\nconst isSumOfThirtyNineArray =(n) => {\n  return(generateArray(n).every("}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  for (let u = 1; u <= n; u++) {\n    p+=u;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    f *= u;\n    if (u % 2 == 0) {\n      k.push(f)}\n    else {\n      k.push(p)}\n    }\n  return k\n  }\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  for (let u = 1; u <= n; u++) {\n    p+=u;\n   \n    f = f*u;\n    if (u % 2 === 0) {\n      k.push(f)\n      f = 1\n    }\n    else {\n      f = p;\n      p = 0\n    }\n  }\n  return k\n}\n\nconst result = f(5)\nconsole.log(result)\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, T) {\n    if (i == T)\n    return '0';\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return '1';\n    }\n  return a.split('').map((item, index) => xor(item, b [ index ])).join('');\n  }\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, T) {\n    if (i == T)\n    return '0';\n    else\n   \n    return a[i] == b[i]? '1' : '0';\n  }\n  \n  return a.split('').map(x => xor(0, a.length)).join('');\n}\n\n/*\n  Input: s1 = 'abcd', s2 = 'xy'\n  Output: 'ayc'\n  \n  Given two strings, write a function that returns their XOR\n  */\nconst xorStrings =(s1, s2) => {\n  return s1.split('').map(x => s2.split('').map(y => x!= y? '0' : '1' )).join('');\n}\n\n/*\n  Input: s = 'abcd'\n  Output: 'cda'\n  \n  Given a string, return the string reversed.\n  */\nconst reverseString =(s) => {\n  return s.split('').reverse().join('');\n}\n\n/*\n  Input: s = 'abcd'\n  Output: 'dcba'\n  \n  Given a string, return the string in lowercase.\n  */\nconst toLowerCase =(s) => {\n  return s.toLowerCase();\n}\n\n/*\n  Input: s = 'abcd'\n  Output: 'dcba'\n  \n  Given a string, return the string in uppercase.\n  */\nconst toUpperCase =(s) => {\n  return s.toUpperCase();\n}\n\n/*\n  Input: s1 = 'abcd', s2 = 'xy'\n  Output: 'cda'\n  \n  Given two strings, return the maximum XOR of these strings.\n  */\nconst maxXor =(s1, s2) => {\n  let max = 0;\n  let xor = s1.split('').map(x => s2.split('').map(y => x!= y? '0' : '1' )).join('');\n  \n  for (let i = 0; i < xor.length; i++) {\n    if (xor[i] == '1') {\n      if (max < i)\n        max = i;\n    }\n  }\n  \n  return max;\n}\n\n/*\n  Input: s1 = 'abcd', s2 = 'xy'\n  Output: 'cda'\n  \n  Given two strings, return the minimum XOR of these strings.\n  */\nconst minXor =(s1, s2) => {\n  let min = 9999;\n  let xor = s1.split('').map(x => s2.split('').map(y => x!= y? '0' : '1' )).join('');\n  \n  for (let i = 0; i < xor.length; i++) {\n    if (xor[i] == '1') {\n      if (min > i)\n        min = i;\n    }\n  }\n  \n  return min;\n}\n\nmodule.exports = {\n  xorStrings,\n  stringXor,\n  reverseString,\n  toLowerCase,\n  toUpperCase,\n  maxXor,\n  minXor\n}<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(gn30pz7) => {\n  var min_number = Math.min(... gn30pz7);\n  var max_number = Math.max(... gn30pz7);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return gn30pz7.map(x =>(x - min_number) /(max_number - min_number));\n  }\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(gn30pz7) => {\n  var min_number = Math.min(... gn30pz7);\n  var max_number = Math.max(... gn30pz7);\n \n  var transformed_list = gn30pz7.map(x => (x - min_number) / (max_number - min_number));\n  return transformed_list;\n};\n\nmodule.exports = rescaleToUnit;\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let S = file_name.split( / . /)\n  if (S.length != 2) {\n    return 'No'}\n  if (S [ 1 ] != 'txt' && S [ 1 ] != 'dll' && S [ 1 ] != 'exe') {\n    return 'No'}\n  if (S [ 0 ] == '') {\n    return 'No'}\n  let a = S [ 0 ] [ 0 ].charCodeAt()\n  if ( !((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < S [ 0 ].length; i++) {\n    if (S [ 0 ] [ i ].charCodeAt() >= 48 && S [ 0 ] [ i ].charCodeAt() <= 57) {\n      y++}\n    if (y > 3) {\n      return 'No'}\n    }\n  return 'Yes'}\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let S = file_name.split( /. /)\n  if (S.length!= 2) {\n    return 'No'}\n  if (S [ 1 ]!= 'txt' && S [ 1 ]!= 'dll' && S [ 1 ]!= 'exe') {\n    return 'No'}\n  if (S [ 0 ] == '') {\n    return 'No'}\n  let a = S [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  return 'Yes'\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let S = file_name.split( /. /)\n  if (S.length!= 2) {\n    return 'No'}\n  if (S [ 1 ]!= 'txt' && S [ 1 ]!= 'dll' && S [ 1 ]!= 'exe') {\n    return 'No'}\n  if (S [ 0 ] == '') {\n    return 'No'}\n  let a = S [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  return 'Yes'\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let S = file_name.split( /. /)\n  if (S.length!= 2) {\n    return 'No'}\n  if (S [ 1 ]!= 'txt' && S [ 1 ]!= 'dll' && S [ 1 ]!= 'exe') {\n    return 'No'}\n  if (S [ 0 ] == '') {\n    return 'No'}\n  let a = S [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  return 'Yes'\n}\n\nconst fileNameCheck =(file_name) => {\n  let S = file_name.split( /. /)\n  if (S.length!= 2) {\n    return 'No'}\n  if (S [ 1 ]!= 'txt' && S [ 1 ]!= 'dll' && S [ 1 ]!= 'exe') {\n    return 'No'}\n  if (S [ 0 ] == '') {\n    return 'No'}\n  let a = S [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  return 'Yes'\n}\n\nconst fileNameCheck =(file_name) => {\n  let S = file_name.split( /. /)\n  if (S.length!= 2) {\n    return 'No'}\n  if (S [ 1 ]!= 'txt' && S [ 1 ]!= 'dll' && S [ 1 ]!= 'exe') {\n    return 'No'}\n  if (S [ 0 ] == '') {\n    return 'No'}\n  let a = S [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  return 'Yes'\n}\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let jQY13w43 = char.charCodeAt(0)\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            return prev +(jQY13w43 > 64 && jQY13w43 < 91 ? jQY13w43 : 0);\n            }\n      , 0);\n      }\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let jQY13w43 = char.charCodeAt(0)\n           \n            return prev + jQY13w43;\n      }, 0);\n}\n\n/*\n\nWrite a function that takes a string as input and returns the sum of the lower case characters'\nASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 99\n      digitSum(\"abcCd\") => 45\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 55\n      digitSum(\"aAaaaXa\") => 0\n*/\nconst lowerCaseSum =(s) => {\n    if (s == '') return 0;\n    return s.split('').reduce((prev, char) => {\n        let jQY13w43 = char.charCodeAt(0)\n\n        if (char.charCodeAt(0) >= 97 && char.charCodeAt(0) <= 122) {\n            return prev + char.charCodeAt(0) - 97;\n        } else {\n            return prev;\n        }\n    }, 0);\n}\n\n/*\n\nWrite a function that takes a string as input and returns the sum of the uppercase characters'\nASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 99\n      digitSum(\"abcCd\") => 45\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 55\n      digitSum(\"aAaaaXa\") => 0\n*/\nconst upperCaseSum =(s) => {\n    if (s == '') return 0;\n    return s.split('').reduce((prev, char) => {\n        let jQY13w43 = char.charCodeAt(0)\n\n        if (char.charCodeAt(0) >= 65 && char.charCodeAt(0) <= 90) {\n            return prev + char.charCodeAt(0) - 65;\n        } else {\n            return prev;\n        }\n    }, 0);\n}\n\nmodule.exports = {\n    digitSum,\n    lowerCaseSum,\n    upperCaseSum\n};<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring) != - 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n// Filter an input list of strings only for ones that contain given substring\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterBySubstring2 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n// Filter an input list of strings only for ones that contain given substring\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterBySubstring3 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n// Filter an input list of strings only for ones that contain given substring\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterBySubstring4 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n// Filter an input list of strings only for ones that contain given substring\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterBySubstring5 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n// Filter an input list of strings only for ones that contain given substring\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterBySubstring6 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n// Filter an input list of strings only for ones that contain given substring\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterBySubstring7 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n// Filter an input list of strings only for ones that contain given substring\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterBySubstring8 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n// Filter an input list of strings only for ones that contain given substring\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterBySubstring9 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n// Filter an input list of strings only for ones that contain given substring\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterBySubstring10 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n// Filter an input list of strings only for ones that contain given substring\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterBySubstring11 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n// Filter an input list of strings only for ones that contain given substring\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filterBySubstring12 =(L60mz84, substring) => {\n  return L60mz84.filter(x => x.indexOf(substring)!= - 1);\n \n}\n\n// Filter an input list of strings only for ones that contain given substring\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(Amk) => {\n  if (Amk.length == 0) return [ ];\n  var evens = Amk.filter(x => x % 2 == 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (evens.length == 0) return [ ];\n  return [ Math.min(... evens), Amk.indexOf(Math.min(... evens)) ];\n  }\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(Amk) => {\n  if (Amk.length == 0) return [ ];\n  var evens = Amk.filter(x => x % 2 == 0);\n \n  var min = evens[0];\n  var min_index = evens.indexOf(min);\n \n  return [ min, min_index ];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let N = operator.length - 1; N >= 0; N--) {\n      if (operator [ N ] == '**') {\n        let u = operand [ N ]\n        while (operand [ N + 1 ] > 1) {\n          operand [ N + 1 ]--;\n          operand [ N ] *= u;\n          }\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let N = 0; N < operator.length; N++) {\n      if (operator [ N ] == '*') {\n        operand [ N ] *= operand [ N + 1 ]\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ N ] == '//') {\n        operand [ N ] =(operand [ N ] - operand [ N ] % operand [ N + 1 ]) / operand [ N + 1 ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let N = 0; N < operator.length; N++) {\n      if (operator [ N ] == '+') {\n        operand [ N ]+=operand [ N + 1 ]\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ N ] == '-') {\n        operand [ N ]-=operand [ N + 1 ]\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    }\n  return operand [ 0 ]\n  }\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let N = operator.length - 1; N >= 0; N--) {\n      if (operator [ N ] == '**') {\n        let u = operand [ N ]\n        while (operand [ N + 1 ] > 1) {\n          operand [ N + 1 ]--;\n          operand [ N ] *= u;\n          }\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let N = 0; N < operator.length; N++) {\n      if (operator [ N ] == '*') {\n        operand [ N ] *= operand [ N + 1 ]\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ N ] == '//') {\n        operand [ N ] =(operand [ N ] - operand [ N ] % operand [ N + 1 ]) / operand [ N + 1 ]\n       \n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break\n        }\n      }\n    if (y == 1) {\n      continue\n      }\n    for (let N = 0; N < operator.length; N++) {\n      if (operator [ N ] == '-') {\n        operand [ N ] = operand [ N ] - operand [ N + 1 ]\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break\n        }\n      }\n    if (y == 1) {\n      continue\n      }\n    for (let N = 0; N < operator.length; N++) {\n      if (operator [ N ] == '+') {\n        operand [ N ] = operand [ N ] + operand [ N + 1 ]\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break\n        }\n      }\n    if (y == 1) {\n      continue\n      }\n    for (let N = 0; N < operator.length; N++) {\n      if (operator [ N ] == '-') {\n        operand [ N ] = operand [ N ] - operand [ N + 1 ]\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break\n        }\n      }\n    if (y == 1) {\n      continue\n      }\n    for (let N = 0; N < operator.length; N++) {\n      if (operator [ N ] == '/') {\n        operand [ N ] = operand [ N ] / operand [ N + 1 ]\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break\n        }\n      }\n    if (y == 1) {\n      continue\n      }\n    }\n  let result = 0\n  for (let N = 0; N < operand.length; N++) {\n    result = result + operand [ N ]\n    }\n  return result\n  }\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doEval =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let N = operator.length - 1; N >= 0; N--) {\n      if (operator [ N ] == '**') {\n        let u = operand [ N ]\n        while (operand [ N + 1 ] > 1) {\n          operand [ N + 1 ]--;\n          operand [ N ] *= u\n          }\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break\n        }\n      }\n    if (y == 1) {\n      continue\n      }\n    for (let N = 0; N < operator.length; N++) {\n      if (operator [ N ] == '*') {\n        operand [ N ] *= operand [ N + 1 ]\n        operand.splice(N + 1, 1)\n        operator.splice(N, 1)\n        y = 1;\n        break\n        }\n      else\nif (operator [ N ] =="}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, b8251p744) => {\n  if (need <= b8251p744) {\n    return [ need + number, b8251p744 - need ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return [ b8251p744 + number, 0 ]\n  }\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, b8251p744) => {\n  if (need <= b8251p744) {\n    return [ need + number, b8251p744 - need ]\n   \n  } else {\n    return [ number, b8251p744 - number ]\n  }\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                   the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat2 =(number, need, b8251p744) => {\n  let remaining = number\n  let total = 0\n  while (remaining > 0) {\n    total += remaining\n    remaining -= need\n  }\n  return [ total, remaining ]\n}\n\nconsole.log(eat(5, 6, 10))\nconsole.log(eat(4, 8, 9))\nconsole.log(eat(1, 10, 10))\nconsole.log(eat(2, 11, 5))\nconsole.log(eat2(5, 6, 10))\nconsole.log(eat2(4, 8, 9))\nconsole.log(eat2(1, 10, 10))\nconsole.log(eat2(2, 11, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let rb3 = n\n  if (rb3 == 1 || rb3 == 0) {\n    return y}\n  for (let i = 2; i * i <= rb3; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (rb3 % i == 0) {\n      return y}\n    }\n  return x\n  }\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let rb3 = n\n  if (rb3 == 1 || rb3 == 0) {\n    return y}\n  for (let i = 2; i * i <= rb3; i++) {\n   \n    if (rb3 % i === 0) {\n      return x}\n  }\n  return y}\n\n// console.log(xOrY(7, 34, 12))\n// console.log(xOrY(15, 8, 5))\n\n// const xOrY =(n, x, y) => {\n//   let rb3 = n\n//   if (rb3 == 1 || rb3 == 0) {\n//     return y}\n//   for (let i = 2; i * i <= rb3; i++) {\n//     if (rb3 % i === 0) {\n//       return x}\n//   }\n//   return y}\n\n// console.log(xOrY(7, 34, 12))\n// console.log(xOrY(15, 8, 5))\n\n// const xOrY =(n, x, y) => {\n//   let rb3 = n\n//   if (rb3 == 1 || rb3 == 0) {\n//     return y}\n//   for (let i = 2; i * i <= rb3; i++) {\n//     if (rb3 % i === 0) {\n//       return x}\n//   }\n//   return y}\n// console.log(xOrY(7, 34, 12))\n// console.log(xOrY(15, 8, 5))\n\n\n// console.log(xOrY(7, 34, 12))\n// console.log(xOrY(15, 8, 5))\n\n// const xOrY =(n, x, y) => {\n//   let rb3 = n\n//   if (rb3 == 1 || rb3 == 0) {\n//     return y}\n//   for (let i = 2; i * i <= rb3; i++) {\n//     if (rb3 % i === 0) {\n//       return x}\n//   }\n//   return y}\n// console.log(xOrY(7, 34, 12))\n// console.log(xOrY(15, 8, 5))\n\n// const xOrY =(n, x, y) => {\n//   let rb3 = n\n//   if (rb3 == 1 || rb3 == 0) {\n//     return y}\n//   for (let i = 2; i * i <= rb3; i++) {\n//     if (rb3 % i === 0) {\n//       return x}\n//   }\n//   return y}\n// console.log(xOrY(7, 34, 12))\n// console.log(xOrY(15, 8, 5))\n\n// const xOrY =(n, x, y) => {\n//   let rb3 = n\n//   if (rb3 == 1 || rb3 == 0) {\n//     return y}\n//   for (let i = 2; i * i <= rb3; i++) {\n//     if (rb3 % i === 0) {\n//       return x}\n//   }\n//   return y}\n// console.log(xOrY(7, 34, 12))\n// console.log(xOrY(15, 8, 5))\n\n// const xOrY =(n, x, y) => {\n//   let rb3 = n\n//   if (rb3 == 1 || rb3 == 0) {\n//     return y}\n//   for (let i = 2; i * i <= rb3; i++) {\n//     if (rb3 % i === 0) {\n//       return x}\n//   }\n//   return y}\n// console.log(xOrY(7, 34, 12))\n// console.log(xOrY(15, 8, 5))\n\n// const xOrY =(n, x, y) => {\n//   let rb3 = n\n//   if (rb3 == 1 || rb3 == 0) {\n//     return y}\n//   for (let i = 2; i * i <= rb3; i++) {\n//     if (rb3 % i === 0) {\n//       return x}\n//   }\n//   return y}\n// console.log(xOrY(7, 34, 12))\n// console.log(xOrY(15, 8, 5))\n\n// const xOrY =(n, x, y) => {\n//   let rb3 = n\n//   if (rb3 == 1 || rb3 == 0) {\n//     return y}\n//   for (let i = 2; i * i <= rb3; i++) {\n//     if (rb3 % i === 0) {\n//       return x}\n//   }\n//   return y}\n// console.log(xOrY(7, 34, 12))\n// console.log(xOrY(15, 8, 5))\n\n// const xOrY =(n, x, y) => {\n//   let rb3 = n\n//   if (rb3 == 1 || rb3 == 0) {\n//     return y}\n//   for (let i = 2; i * i <= rb3; i++) {\n//     if (rb3 % i === 0) {\n//       return x}\n//   }\n//   return y}\n// console.log(xOrY(7, 34, 12))\n// console.log(xOrY(15, 8, 5))\n\n// const xOrY =(n, x, y) => {\n//   let rb3 = n\n//   if (rb3 == 1 || rb3 == 0) {\n//     return y}\n//   for (let i = 2; i * i <= rb3; i++) {\n//     if (rb3 % i === 0) {\n//       return x}\n//   }\n//   return y}\n// console.log(xOrY(7, 34, 12))\n// console.log(xOrY(15, 8, 5))"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let e = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst [ i ]; j++) {\n      if (lst [ i ] % j == 0) {\n        p = 0; break}\n      }\n    if (p == 1 && lst [ i ] > e) {\n      e = lst [ i ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let k = 0\n  while (e != 0) {\n    k+=e % 10\n    e =(e - e % 10) / 10\n    }\n  return k\n  }\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let e = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst [ i ]; j++) {\n      if (lst [ i ] % j == 0) {\n        p = 0; break}\n      }\n    if (p == 1 && lst [ i ] > e) {\n      e = lst [ i ]}\n   \n  }\n  return e\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nconsole.log(skjkasdkd([0,81,12,3,1,21]))\nconsole.log(skjkasdkd([0,8,1,2,1,7]))\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let y = 0; y < p.length; y++) {\n    let ind = y\n    for (let k = y + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > y) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let tmp = p [ y ]\n      p [ y ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  let l = [ 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine' ]\n  let t = [ ]\n  for (let y = 0; y < p.length; y++) {\n    t.push(l [ p [ y ] - 1 ])\n    }\n  return t\n  }\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let y = 0; y < p.length; y++) {\n    let ind = y\n    for (let k = y + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > y) {\n     \n      let temp = p [ y ]\n      p [ y ] = p [ ind ]\n      p [ ind ] = temp\n    }\n  }\n  return p\n}\n\nconst sortByLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  return p.sort((a,b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    }\n    return 0\n  })\n}\n\nconst reverseByLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  return p.reverse()\n}\n\nconst replaceByNumber =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(Number(arr [ i ]))}\n    }\n  return p\n}\n\nconst main =() => {\n  const arr = [1, -1, 55]\n  console.log(byLength(arr))\n  console.log(sortByLength(arr))\n  console.log(reverseByLength(arr))\n  console.log(replaceByNumber(arr))\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(y2V2K) => {\n  y2V2K = Number(y2V2K)\n  let t = y2V2K % 1\n  if (t < 0.5 && t > - 0.5) {\n    y2V2K-=t}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else {\n    y2V2K+=t}\n  return y2V2K\n  }\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(y2V2K) => {\n  y2V2K = Number(y2V2K)\n  let t = y2V2K % 1\n  if (t < 0.5 && t > - 0.5) {\n    y2V2K-=t}\n \n  else {\n    y2V2K+=1 - t}\n  \n  return y2V2K\n}\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, S) => {\n  let aa = Number(a)\n  if (typeof a == 'string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(S)\n  if (typeof S == 'string') {\n    bb = Number(S.replace(',', '.'))}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (aa > bb) {\n    return a}\n  if (aa < bb) {\n    return S}\n  return null\n  }\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, S) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(S)\n  if (typeof S =='string') {\n    bb = Number(S.replace(',', '.'))}\n \n  if (aa < bb) {\n    return a\n  } else if (aa > bb) {\n    return S\n  } else {\n    return null\n  }\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smallest variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ null\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"5,1\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareTwo =(a, S) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(S)\n  if (typeof S =='string') {\n    bb = Number(S.replace(',', '.'))}\n \n  if (aa < bb) {\n    return a\n  } else if (aa > bb) {\n    return S\n  } else {\n    return null\n  }\n}\n\nmodule.exports = {\n  compareOne,\n  compareTwo\n}\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(g297, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < g297.length; i++) {\n    for (let j = 0; j < g297.length; j++) {\n      if (g297 [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let min = g297.length * g297.length\n  if (m > 0 && g297 [ m - 1 ] [ n ] < min) {\n    min = g297 [ m - 1 ] [ n ]}\n  if (n > 0 && g297 [ m ] [ n - 1 ] < min) {\n    min = g297 [ m ] [ n - 1 ]}\n  if (m < g297.length - 1 && g297 [ m + 1 ] [ n ] < min) {\n    min = g297 [ m + 1 ] [ n ]}\n  if (n < g297.length - 1 && g297 [ m ] [ n + 1 ] < min) {\n    min = g297 [ m ] [ n + 1 ]}\n  let p = [ ]\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) {\n      p.push(1)}\n    else {\n      p.push(min)}\n    }\n  return p\n  }\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(g297, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < g297.length; i++) {\n    for (let j = 0; j < g297.length; j++) {\n      if (g297 [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n  if (m == 0) {\n    return [];\n    }\n\n  let paths = []\n\n  // find all the paths that start from the left of current cell\n  let paths_left = minPath(g297, k - 1)\n\n  // find all the paths that start from the right of current cell\n  let paths_right = minPath(g297, k - 1)\n\n  // compare the left and right paths to find the minimum one\n  let min_path = (p1, p2) => p1.length < p2.length? p1 : p2;\n\n  paths.push(min_path(paths_left, paths_right));\n\n  // remove the elements of the paths_left\n  paths_left = paths_left.filter((p) => paths.indexOf(p) == -1);\n\n  // remove the elements of the paths_right\n  paths_right = paths_right.filter((p) => paths.indexOf(p) == -1);\n\n  // keep going up until we have k paths\n  while (paths.length < k) {\n    // find the minimum path on the left\n    let path_left = paths_left.find((p) => p.length < paths[m].length);\n    // find the minimum path on the right\n    let path_right = paths_right.find((p) => p.length < paths[m].length);\n\n    // if the minimum path on the left is smaller than the minimum path on the right\n    if (path_left.length < path_right.length) {\n      // find the element of the paths_left that is smaller than the minimum path on the left\n      let path_left_min = paths_left.find((p) => p.length < path_left.length);\n      // remove the element of the paths_left that is smaller than the minimum path on the left\n      paths_left = paths_left.filter((p) => p!= path_left_min);\n      // add the element of the paths_left that is smaller than the minimum path on the left to the end of the paths\n      paths.push(path_left_min);\n      // remove the element of the paths_right that is smaller than the minimum path on the right\n      paths_right = paths_right.filter((p) => p!= path_right);\n      // add the element of the paths_right that is smaller than the minimum path on the right to the end of the paths\n      paths.push(path_right);\n    }\n    else {\n      // find the element of the paths_right that is smaller than the minimum path on the right\n      let path_right_min = paths_right.find((p) => p.length < path_right.length);\n      // remove the element of the paths_right that is smaller than the minimum path on the right\n      paths_right = paths_right.filter((p) => p!= path_right_min);\n      // add the element of the paths_right that is smaller than the minimum path on the right to the end of the paths\n      paths.push(path_right_min);\n      // remove the element of the paths_left that is smaller than the minimum path on the left\n      paths_left = paths_left.filter((p) => p!= path_left);\n      // add the element of the paths_left that is smaller than the minimum path on the left to the end of the paths\n      paths.push(path_left);\n    }\n  }\n\n  return paths;\n};\n\nlet g297 = [\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n];\n\nlet g298 = [\n  [5,9,3],\n  [4,1,6],\n  [7,8,2]\n];\n\nlet g299 = [\n  [7,9,3],\n  [4,1,6],\n  [5,9,2]\n];\n\nconsole.log(minPath(g297, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = VL24e4(a [ 0 ]) * VL24e4(b [ 0 ])\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let r = VL24e4(a [ 1 ]) * VL24e4(b [ 1 ])\n  return m % r == 0\n  }\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = VL24e4(a [ 0 ]) * VL24e4(b [ 0 ])\n \n  if(a[1]!== b[1]) {\n    return false\n  }\n  if(a[0] === b[0]) {\n    return true\n  }\n  if(VL24e4(m) === VL24e4(VL24e4(a [ 1 ]) * VL24e4(b [ 1 ]))) {\n    return true\n  }\n  return false\n}\n\nsimplify(\"1/5\", \"5/1\")\nsimplify(\"1/6\", \"2/1\")\nsimplify(\"7/10\", \"10/2\")\n\n/*\nInput:\n\nn = \"1/2\"\nx = \"1/3\"\n\nOutput:\n\ntrue\n\nExplanation:\n\n\"1/3\" can be simplified to \"1/2\"\n*/\n\n/*\nInput:\n\nn = \"1/2\"\nx = \"3/2\"\n\nOutput:\n\nfalse\n\nExplanation:\n\n\"1/2\" cannot be simplified to \"3/2\"\n*/\n\n/*\nInput:\n\nn = \"1/2\"\nx = \"2/1\"\n\nOutput:\n\nfalse\n\nExplanation:\n\n\"1/2\" cannot be simplified to \"2/1\"\n*/\n\n/*\nInput:\n\nn = \"1/3\"\nx = \"1/4\"\n\nOutput:\n\ntrue\n\nExplanation:\n\n\"1/3\" can be simplified to \"1/4\"\n*/\n\n/*\nInput:\n\nn = \"1/3\"\nx = \"2/1\"\n\nOutput:\n\nfalse\n\nExplanation:\n\n\"1/3\" cannot be simplified to \"2/1\"\n*/\n\n/*\nInput:\n\nn = \"1/2\"\nx = \"2/1\"\n\nOutput:\n\ntrue\n\nExplanation:\n\n\"1/2\" can be simplified to \"2/1\"\n*/\n\n/*\nInput:\n\nn = \"2/1\"\nx = \"1/2\"\n\nOutput:\n\nfalse\n\nExplanation:\n\n\"2/1\" cannot be simplified to \"1/2\"\n*/\n\n/*\nInput:\n\nn = \"2/1\"\nx = \"3/2\"\n\nOutput:\n\ntrue\n\nExplanation:\n\n\"2/1\" can be simplified to \"3/2\"\n*/\n\n/*\nInput:\n\nn = \"2/1\"\nx = \"2/1\"\n\nOutput:\n\ntrue\n\nExplanation:\n\n\"2/1\" can be simplified to \"2/1\"\n*/\n\n/*\nInput:\n\nn = \"2/1\"\nx = \"4/3\"\n\nOutput:\n\nfalse\n\nExplanation:\n\n\"2/1\" cannot be simplified to \"4/3\"\n*/\n\n/*\nInput:\n\nn = \"2/1\"\nx = \"1/3\"\n\nOutput:\n\nfalse\n\nExplanation:\n\n\"2/1\" cannot be simplified to \"1/3\"\n*/\n\n/*\nInput:\n\nn = \"2/1\"\nx = \"1/4\"\n\nOutput:\n\ntrue\n\nExplanation:\n\n\"2/1\" can be simplified to \"1/4\"\n*/\n\n/*\nInput:\n\nn = \"1/4\"\nx = \"1/2\"\n\nOutput:\n\nfalse\n\nExplanation:\n\n\"1/4\" cannot be simplified to \"1/2\"\n*/\n\n/*\nInput:\n\nn = \"1/4\"\nx = \"1/3\"\n\nOutput:\n\nfalse\n\nExplanation:\n\n\"1/4\" cannot be simplified to \"1/3\"\n*/\n\n/*\nInput:\n\nn = \"1/4\"\nx = \"2/1\"\n\nOutput:\n\ntrue\n\nExplanation:\n\n\"1/4\" can be simplified to \"2/1\"\n*/\n\n/*\nInput:\n\nn = \"1/4\"\nx = \"3/2\"\n\nOutput:\n\ntrue\n\nExplanation:\n\n\"1/4\" can be simplified to \"3/2\"\n*/\n\n/*\nInput:\n\nn = \"1/4\"\nx = \"2/1\"\n\nOutput:\n\nfalse\n\nExplanation:\n\n\"1/4\" cannot be simplified to \"2/1\"\n*/\n\n/*\nInput:\n\nn = \"1/4\"\nx = \"4/3\"\n\nOutput:\n\ntrue\n\nExplanation:\n\n\"1/4\" can be simplified to \"4/3\"\n*/\n\n/*\nInput:\n\nn = \"1/4\"\nx = \"1/2\"\n\nOutput:\n\nfalse\n\nExplanation:\n\n\"1/4\" cannot be simplified to \"1/2\"\n*/\n\n/*\nInput:\n\nn = \"1/4\"\nx = \"1/3\"\n\nOutput:\n\nfalse\n\nExplanation:\n\n\"1/4\" cannot be simplified to \"1/3\"\n*/\n\n/*\nInput:\n\nn = \"1/2\"\nx = \"2/1\"\n\nOutput:\n\ntrue\n\nExplanation:\n\n\"1/2\" can be simplified to \"2/1\"\n*/\n\n/*\nInput:\n\nn = \"1/2\"\nx = \"3/2\"\n\nOutput:\n\nfalse\n\nExplanation:\n\n\""}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  for (let T = 0; T < lst.length; T+=2) {\n    if (lst [ T ] % 2 == 1) {\n      p+=lst [ T ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return p\n  }\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  for (let T = 0; T < lst.length; T+=2) {\n    if (lst [ T ] % 2 == 1) {\n      p+=lst [ T ]\n     \n    }\n  }\n  return p\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(O) => {\n  let t = 0\n  if (O [ 0 ] == 'I' && O [ 1 ] == ' ') {\n    t = 1}\n  for (let i = 0; i < O.length; i++) {\n    if (O [ i ] == '.' || O [ i ] == '!' || O [ i ] == '?') {\n      if (O [ i + 1 ] == ' ' && O [ i + 2 ] == 'I' && O [ i + 3 ] == ' ') {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        t++\n        }\n      }\n    }\n  return t\n  }\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(O) => {\n  let t = 0\n  if (O [ 0 ] == 'I' && O [ 1 ] =='') {\n    t = 1}\n  for (let i = 0; i < O.length; i++) {\n    if (O [ i ] == '.' || O [ i ] == '!' || O [ i ] == '?') {\n      if (O [ i + 1 ] =='' && O [ i + 2 ] == 'I' && O [ i + 3 ] =='') {\n       \n        t++}\n    }\n  }\n  return t\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredom sentences. A boredom sentence is a sentence that starts with\n  the word \"I\". Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoredSentence =(O) => {\n  let t = 0\n  for (let i = 0; i < O.length; i++) {\n    if (O [ i ] == '.' || O [ i ] == '!' || O [ i ] == '?') {\n      if (O [ i + 1 ] == 'I' && O [ i + 2 ] =='') {\n        t++}\n    }\n  }\n  return t\n}\n\nmodule.exports = {\n  isBored: isBored,\n  isBoredSentence: isBoredSentence\n}<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(zZSD) => {\n  return zZSD.split(\"\")\n  .filter(s => ![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  .includes(s.toLowerCase())\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )\n  .join(\"\")\n  }\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(zZSD) => {\n  return zZSD.split(\"\")\n .filter(s =>![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n .includes(s.toLowerCase())\n \n)\n.join(\"\")\n}\n\n/*\n  wordCount is a function that takes string and returns count of words.\n  >>> wordCount('')\n  0\n  >>> wordCount('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> wordCount('aaa')\n  1\n  >>> wordCount('aaBaa')\n  1\n  >>> wordCount('zbcd')\n  2\n  */\nconst wordCount =(zZSD) => {\n  return zZSD.split(\" \")\n .length\n}\n\n/*\n  wordCount is a function that takes string and returns count of words.\n  >>> wordCount('')\n  0\n  >>> wordCount('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> wordCount('aaa')\n  1\n  >>> wordCount('aaBaa')\n  1\n  >>> wordCount('zbcd')\n  2\n  */\nconst wordCount =(zZSD) => {\n  return zZSD.split(\" \")\n .length\n}\n\n/*\n  countWords is a function that takes string and returns count of words.\n  >>> countWords('')\n  0\n  >>> countWords('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> countWords('aaa')\n  1\n  >>> countWords('aaBaa')\n  1\n  >>> countWords('zbcd')\n  2\n  */\nconst countWords =(zZSD) => {\n  return zZSD.split(\" \")\n .filter(s => s!== \"\")\n .length\n}\n\n/*\n  countWords is a function that takes string and returns count of words.\n  >>> countWords('')\n  0\n  >>> countWords('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> countWords('aaa')\n  1\n  >>> countWords('aaBaa')\n  1\n  >>> countWords('zbcd')\n  2\n  */\nconst countWords =(zZSD) => {\n  return zZSD.split(\" \")\n .filter(s => s!== \"\")\n .length\n}\n\n/*\n  countWords is a function that takes string and returns count of words.\n  >>> countWords('')\n  0\n  >>> countWords('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> countWords('aaa')\n  1\n  >>> countWords('aaBaa')\n  1\n  >>> countWords('zbcd')\n  2\n  */\nconst countWords =(zZSD) => {\n  return zZSD.split(\" \")\n .filter(s => s!== \"\")\n .length\n}\n\n/*\n  countWords is a function that takes string and returns count of words.\n  >>> countWords('')\n  0\n  >>> countWords('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> countWords('aaa')\n  1\n  >>> countWords('aaBaa')\n  1\n  >>> countWords('zbcd')\n  2\n  */\nconst countWords =(zZSD) => {\n  return zZSD.split(\" \")\n .filter(s => s!== \"\")\n .length\n}\n\n/*\n  split is a function that takes string and returns array of words.\n  >>> split('')\n  []\n  >>> split('abcdefghijklmnopqrstuvwxyz')\n  ['abcdefghijklmnopqrstuvwxyz']\n  >>> split('abcdefghijklmnopqrstuvwxyz ')\n  ['abcdefghijklmnopqrstuvwxyz']\n  >>> split('abcdefghijklmnopqrstuvwxyz xyz')\n  ['abcdefghijklmnopqrstuvwxyz', 'xyz']\n  */\nconst split =(zZSD) => {\n  return zZSD.split(\" \")\n .filter(s => s!== \"\")\n}\n\n/*\n  split is a function that takes string and returns array of words.\n  >>> split('')\n  []\n  >>> split('abcdefghijklmnopqrstuvwxyz')\n  ['abcdefghijklmnopqrstuvwxyz']\n  >>> split('abcdefghijklmnopqrstuvwxyz ')\n  ['abcdefghijklmnopqrstuvwxyz']\n  >>> split('abcdefghijklmnopqrstuvwxyz xyz')\n  ['abcdefghijklmnopqrstuvwxyz', 'xyz']\n  */\nconst split =(zZSD) => {\n  return zZSD.split(\" \")\n .filter(s => s!== \"\")\n}\n\n/*\n  split is a function that takes string and returns array of words.\n  >>> split('')\n  []\n  >>> split('abcdefghijklmnopqrstuvwxyz')\n  ['abcdefghijklmnopqrstuvwxyz']\n  >>> split('abcdefghijklmnopqrstuvwxyz ')\n  ['abcdefghijklmnopqrstuvwxyz']\n  >>> split('abcdefghijklmnopqrstuvwxyz xyz')\n  ['abcdefghijklmnopqrstuvwxyz', 'xyz']\n  */\nconst split =(zZSD) => {\n  return zZSD.split(\" \")\n .filter("}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(C) => {\n  return [ ... Array(C).keys(), C ].join(' ')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(C) => {\n  return [... Array(C).keys(), C ].join(' ')\n \n}\n\n/* Return a string containing space-delimited letters starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(C) => {\n  return [... Array(C).keys(), C ].join(' ')\n}\n\n/* Return a string containing space-delimited letters and numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(C) => {\n  return [... Array(C).keys(), C ].join(' ')\n}\n\n/* Return a string containing the first C spaces.\n  >>> firstSpaces(0)\n  ''\n  >>> firstSpaces(1)\n ''\n  >>> firstSpaces(5)\n '  '\n  */\nconst firstSpaces =(C) => {\n  return C.toString().replace(/\\s+/g,'')\n}\n\n/* Return a string containing the first C letters.\n  >>> firstLetters(0)\n  ''\n  >>> firstLetters(1)\n ''\n  >>> firstLetters(5)\n  'abcde'\n  */\nconst firstLetters =(C) => {\n  return C.toString().replace(/\\W/g, '')\n}\n\n/* Return a string containing the first C numbers.\n  >>> firstNumbers(0)\n  ''\n  >>> firstNumbers(1)\n ''\n  >>> firstNumbers(5)\n  '01234'\n  */\nconst firstNumbers =(C) => {\n  return C.toString().replace(/[^0-9]/g, '')\n}\n\n/* Return a string containing the first C alphanumeric letters.\n  >>> firstAlphaNumeric(0)\n  ''\n  >>> firstAlphaNumeric(1)\n ''\n  >>> firstAlphaNumeric(5)\n  'abcde'\n  */\nconst firstAlphaNumeric =(C) => {\n  return C.toString().replace(/[^a-zA-Z0-9]/g, '')\n}\n\n/* Return a string containing the first C alphanumeric letters and numbers.\n  >>> firstAlphaNumeric(0)\n  ''\n  >>> firstAlphaNumeric(1)\n ''\n  >>> firstAlphaNumeric(5)\n  '01234'\n  */\nconst firstAlphaNumeric =(C) => {\n  return C.toString().replace(/[^a-zA-Z0-9]/g, '')\n}\n\n/* Return a string containing the first C alphanumeric letters and numbers and spaces.\n  >>> firstAlphaNumeric(0)\n  ''\n  >>> firstAlphaNumeric(1)\n ''\n  >>> firstAlphaNumeric(5)\n  '01234 '\n  */\nconst firstAlphaNumeric =(C) => {\n  return C.toString().replace(/[^a-zA-Z0-9]/g, '')\n}\n\n/* Return a string containing the first C alphanumeric letters and numbers and punctuation.\n  >>> firstAlphaNumeric(0)\n  ''\n  >>> firstAlphaNumeric(1)\n ''\n  >>> firstAlphaNumeric(5)\n  '01234,5'\n  */\nconst firstAlphaNumeric =(C) => {\n  return C.toString().replace(/[^a-zA-Z0-9]/g, '')\n}\n\n/* Return a string containing the first C alphanumeric letters and numbers and symbols.\n  >>> firstAlphaNumeric(0)\n  ''\n  >>> firstAlphaNumeric(1)\n ''\n  >>> firstAlphaNumeric(5)\n  '01234,5'\n  */\nconst firstAlphaNumeric =(C) => {\n  return C.toString().replace(/[^a-zA-Z0-9]/g, '')\n}\n\n/* Return a string containing the first C alphanumeric letters and numbers and symbols.\n  >>> firstAlphaNumeric(0)\n  ''\n  >>> firstAlphaNumeric(1)\n ''\n  >>> firstAlphaNumeric(5)\n  '01234,5'\n  */\nconst firstAlphaNumeric =(C) => {\n  return C.toString().replace(/[^a-zA-Z0-9]/g, '')\n}\n\n/* Return a string containing the first C alphanumeric letters and numbers and symbols and spaces.\n  >>> firstAlphaNumeric(0)\n  ''\n  >>> firstAlphaNumeric(1)\n ''\n  >>> firstAlphaNumeric(5)\n  '01234,5 '\n  */\nconst firstAlphaNumeric =(C) => {\n  return C.toString().replace(/[^a-zA-Z0-9]/g, '')\n}\n\n/* Return a string containing the first C alphanumeric letters and numbers and symbols and spaces.\n  >>> firstAlphaNumeric(0)\n  ''\n  >>> firstAlphaNumeric(1)\n ''\n  >>> firstAlphaNumeric(5)\n  '01234,5 '\n  */\nconst firstAlphaNumeric =(C) => {\n  return C.toString().replace(/[^a-zA-Z0-9]/g, '')\n}\n\n/* Return a string containing the first C alphanumeric letters and numbers and symbols and spaces.\n  >>> firstAlphaNumeric(0)\n  ''\n  >>> firstAlphaNumeric(1)\n ''\n  >>> firstAlphaNumeric(5)\n  '01234,5 '\n  */\nconst firstAlphaNumeric =(C) => {\n  return C.toString().replace(/[^a-zA-Z0-9]/g, '')\n}\n\n/* Return a string containing the first C alphanumeric letters and numbers and symbols and spaces.\n  >>> firstAlphaNumeric(0)\n  ''\n  >>> first"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, P) => {\n  while (P != 0) {\n    let temp = a;\n    a = P;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    P = temp % P;\n    }\n  return a;\n  }\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, P) => {\n  while (P!= 0) {\n    let temp = a;\n    a = P;\n   \n    P = temp % P;\n  }\n  return a;\n};\n\nconst gcd = (a, b) => {\n  while (b!= 0) {\n    let temp = b;\n    b = a % b;\n    a = temp;\n  }\n  return a;\n};\n\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\nmodule.exports = {\n  lcm: lcm,\n  gcd: gcd\n};\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  for (let e = 0; e < grid.length; e++) {\n    let m = 0\n    for (let j = 0; j < grid [ e ].length; j++) {\n      if (grid [ e ] [ j ] == 1) {\n        m++}\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (m > 0) {\n      m-=capacity;\n      p++;\n      }\n    }\n  return p\n  }\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  for (let e = 0; e < grid.length; e++) {\n    let m = 0\n    for (let j = 0; j < grid [ e ].length; j++) {\n      if (grid [ e ] [ j ] == 1) {\n        m++}\n      }\n   \n      if (m >= capacity) {\n        p++\n        if (p > m) {\n          break\n        }\n      }\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let n66 = string.length\n  if (n66 == 1 || n66 == 0) {\n    return false}\n  for (let i = 2; i * i <= n66; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (n66 % i == 0) {\n      return false}\n    }\n  return true\n  }\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let n66 = string.length\n  if (n66 == 1 || n66 == 0) {\n    return false}\n  for (let i = 2; i * i <= n66; i++) {\n   \n    if (n66 % i == 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\nWrite a function that takes a number n and returns true if n is a prime number\nor false otherwise\n  Examples\n  prime(7) == true\n  prime(11) == false\n  prime(17) == false\n  prime(5) == false\n  prime(5) == false\n*/\nconst prime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (n % i == 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\nWrite a function that takes a string and returns true if the string contains\nany of the characters \"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"\nor false otherwise\n  Examples\n  containsAnyLetter('abcde') == true\n  containsAnyLetter('abc') == true\n  containsAnyLetter('cde') == false\n*/\nconst containsAnyLetter = (string) => {\n  let foundLetters = string.split('')\n  let letter = 'a'\n  for (let i = 0; i < foundLetters.length; i++) {\n    if (foundLetters.indexOf(letter) == -1) {\n      return false\n    }\n    letter++\n  }\n  return true\n}\n\n/*\nWrite a function that takes a string and returns true if the string contains\nall the letters in \"aeiou\" or false otherwise\n  Examples\n  containsAllLetter('aeiou') == true\n  containsAllLetter('bc') == false\n*/\nconst containsAllLetter = (string) => {\n  let foundLetters = string.split('')\n  let letter = 'a'\n  for (let i = 0; i < foundLetters.length; i++) {\n    if (foundLetters.indexOf(letter) == -1) {\n      return false\n    }\n    letter++\n  }\n  return true\n}\n\n/*\nWrite a function that takes a string and returns true if the string contains\nany of the characters \"abc\" or \"cde\" or false otherwise\n  Examples\n  containsAnyLetter('abcde') == true\n  containsAnyLetter('ab') == true\n  containsAnyLetter('abcd') == true\n  containsAnyLetter('cde') == true\n*/\nconst containsAnyLetterInRange = (string) => {\n  let foundLetters = string.split('')\n  let letter = 'a'\n  for (let i = 0; i < foundLetters.length; i++) {\n    if (foundLetters.indexOf(letter) == -1) {\n      return false\n    }\n    letter++\n  }\n  return true\n}\n\n/*\nWrite a function that takes a string and returns true if the string contains\nany of the characters \"aeiou\" or false otherwise\n  Examples\n  containsAnyLetter('aeiou') == true\n  containsAnyLetter('abc') == false\n*/\nconst containsOnlyLetter = (string) => {\n  let foundLetters = string.split('')\n  let letter = 'a'\n  for (let i = 0; i < foundLetters.length; i++) {\n    if (foundLetters.indexOf(letter) == -1) {\n      return false\n    }\n    letter++\n  }\n  return true\n}\n\n/*\nWrite a function that takes a string and returns true if the string contains\nall the characters in \"aeiou\" or false otherwise\n  Examples\n  containsAllLetter('aeiou') == true\n  containsAllLetter('bc') == false\n*/\nconst containsAllLetterInRange = (string) => {\n  let foundLetters = string.split('')\n  let letter = 'a'\n  for (let i = 0; i < foundLetters.length; i++) {\n    if (foundLetters.indexOf(letter) == -1) {\n      return false\n    }\n    letter++\n  }\n  return true\n}\n\n/*\nWrite a function that takes a string and returns true if the string contains\nany of the characters \"aeiou\" or contains any of the characters \"aeiou\" or false otherwise\n  Examples\n  containsAnyLetter('aeiou') == true\n  containsAnyLetter('aeiou') == true\n  containsAnyLetter('aeiou') == true\n  containsAllLetter('aeiou') == true\n  containsAllLetter('aeiou') == true\n  containsAnyLetter('aeiou') == false\n  containsAllLetter('aeiou') == false\n*/\nconst containsAnyLetterOrAllLetterInRange = (string) => {\n  let foundLetters = string.split('')\n  let letter = 'a'\n  for (let i = 0; i < foundLetters.length; i++) {\n    if (foundLetters.indexOf(letter) == -1) {\n      return false\n    }\n    letter++\n  }\n  return true\n}\n\nmodule.exports = {\n  primeLength,\n  prime,\n  containsAnyLetter,\n  containsAllLetter,\n  containsAnyLetterInRange,\n  containsAllLetterInRange,\n  containsAnyLetterOrAllLetterInRange\n}\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    if (lst [ E ] % 2 == 0) {\n      t+=lst [ E ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return t\n  }\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    if (lst [ E ] % 2 == 0) {\n      t+=lst [ E ]\n     \n    }\n  }\n  return t\n}\n\nconst add1 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\n\nconst add2 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add3 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add4 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add5 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add6 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add7 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add8 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add9 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add10 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add11 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add12 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add13 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add14 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add15 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add16 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add17 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add18 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add19 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\nconst add20 =(lst) => {\n  let t = 0\n  for (let E = 1; E < lst.length; E+=2) {\n    t+=lst [ E ]\n  }\n  return t\n}\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = [ ]\n  for (let d = a; d <= b; d++) {\n    if (d == 2 || d == 4 || d == 6 || d == 8) {\n      y.push(d)}\n    }\n  return y\n  }\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n  let result = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\nconst test = (actual, expected) => {\n  if (actual === expected) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\ndescribe('#generateIntegers()', () => {\n  it('should return an array of numbers between 2 and 8', () => {\n    expect(generateIntegers(2, 8)).toEqual([2, 4, 6, 8]);\n  });\n  it('should return an empty array if the first number is greater than the second', () => {\n    expect(generateIntegers(10, 2)).toEqual([]);\n  });\n  it('should return an empty array if the first number is less than the second', () => {\n    expect(generateIntegers(2, 2)).toEqual([]);\n  });\n});\n\ndescribe('#generateIntegers()', () => {\n  it('should return an array of numbers between 2 and 8', () => {\n    expect(generateIntegers(2, 8)).toEqual([2, 4, 6, 8]);\n  });\n  it('should return an array of numbers between 0 and 7', () => {\n    expect(generateIntegers(0, 7)).toEqual([0, 2, 4, 6]);\n  });\n  it('should return an array of numbers between 0 and 7', () => {\n    expect(generateIntegers(7, 0)).toEqual([7, 2, 4, 6]);\n  });\n  it('should return an empty array if the first number is greater than the second', () => {\n    expect(generateIntegers(10, 2)).toEqual([]);\n  });\n  it('should return an empty array if the first number is less than the second', () => {\n    expect(generateIntegers(2, 2)).toEqual([]);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let a = arr\n  for (let j = 0; j < a.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < a.length; k++) {\n      let w1 = a [ ind ].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1 [ u ] == '1') {\n          f1++}\n        }\n      let w2 = a [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (f2 < f1 ||(f1 == f2 && a [ k ] < a [ ind ])) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = a [ j ]\n      a [ j ] = a [ ind ]\n      a [ ind ] = tmp\n      }\n    }\n  return a\n  }\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let a = arr\n  for (let j = 0; j < a.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < a.length; k++) {\n      let w1 = a [ ind ].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1 [ u ] == '1') {\n          f1++}\n        }\n      let w2 = a [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n      }\n      if (f1 > f2) {\n        ind = k\n      }\n    }\n    if (ind!= j) {\n      a[j] = a[ind]\n      a[ind] = a[j]\n    }\n  }\n  return a\n}\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const o of lst)\n      frq [ o ]+=1;\n      var ans = - 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let o = 1; o < frq.length; o++)\n      if (frq [ o ] >= o)\n      ans = o;\n      return ans;\n      }\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const o of lst)\n      frq [ o ]+=1;\n      var ans = - 1;\n     \n      for (const o of frq)\n      {\n         if (ans < o)\n         {\n            ans = o;\n         }\n      }\n      return ans;\n   }\n\n/*\n  Given a sorted array of numbers, and a number to search, return the index of the first number\n  that is greater than or equal to the number to search, or return -1 if the number to search\n  does not exist in the array.\n  Examples:\n      search([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)) == 3\n      search([1, 2, 3, 4, 5, 6, 7, 8, 9], -1)) == -1\n  */\nconst search =(lst, val) => {\n   for (const o of lst)\n   {\n      if (o >= val)\n      {\n         return o;\n      }\n   }\n   return -1;\n}\n\n/*\n  Given a sorted array of numbers, and a number to search, return the index of the first number\n  that is greater than or equal to the number to search, or return -1 if the number to search\n  does not exist in the array.\n  Examples:\n      search([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)) == 3\n      search([1, 2, 3, 4, 5, 6, 7, 8, 9], -1)) == -1\n  */\nconst search =(lst, val) => {\n   for (const o of lst)\n   {\n      if (o >= val)\n      {\n         return o;\n      }\n   }\n   return -1;\n}\n\nconst search =(lst, val) => {\n   for (const o of lst)\n   {\n      if (o >= val)\n      {\n         return o;\n      }\n   }\n   return -1;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  for (let k = 0; k < num.length; k++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (primes.includes(num [ k ]))\n  total++;\n  return total;\n  }\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  for (let k = 0; k < num.length; k++)\n \n  num.charAt(k).charCodeAt(0);\n  for (let i = 0; i < primes.length; i++) {\n    if (num.indexOf(primes.charAt(i)) === -1) {\n      return total;\n    }\n  }\n  return total + 1;\n}\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(M97x1zf) => {\n  return \"db\" + M97x1zf.toString(2) + \"db\";\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(M97x1zf) => {\n  return \"db\" + M97x1zf.toString(2) + \"db\";\n \n}\n\nmodule.exports = {\n  decimalToBinary\n};\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  for (let J = 0; J < lst.length; J++) {\n    if (lst [ J ] > 0 && lst [ J ] < a) {\n      a = lst [ J ]}\n    if (lst [ J ] < 0 && lst [ J ] > b) {\n      b = lst [ J ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  if (a == Infinity) {\n    a = null}\n  if (b == - Infinity) {\n    b = null}\n  return(b, a)\n  }\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  for (let J = 0; J < lst.length; J++) {\n    if (lst [ J ] > 0 && lst [ J ] < a) {\n      a = lst [ J ]}\n    if (lst [ J ] < 0 && lst [ J ] > b) {\n      b = lst [ J ]}\n   \n  }\n  return [a, b]\n}\n\n/* Create a function that returns the largest of the values in a list.\n  Example: largest([1, 2, 3]) == 3\n  */\nconst largest =(lst) => {\n  let max = 0\n  for (let J = 0; J < lst.length; J++) {\n    if (lst [ J ] > max) {\n      max = lst [ J ]}\n  }\n  return max\n}\n\n/* Create a function that returns the smallest of the values in a list.\n  Example: smallest([1, 2, 3]) == 1\n  */\nconst smallest =(lst) => {\n  let min = Infinity\n  for (let J = 0; J < lst.length; J++) {\n    if (lst [ J ] < min) {\n      min = lst [ J ]}\n  }\n  return min\n}\n\n/* Create a function that returns the sum of the values in a list.\n  Example: sum([1, 2, 3]) == 6\n  */\nconst sum =(lst) => {\n  let sum = 0\n  for (let J = 0; J < lst.length; J++) {\n    sum += lst [ J ]\n  }\n  return sum\n}\n\n/* Create a function that returns the product of the values in a list.\n  Example: product([1, 2, 3]) == 6\n  */\nconst product =(lst) => {\n  let product = 1\n  for (let J = 0; J < lst.length; J++) {\n    product *= lst [ J ]\n  }\n  return product\n}\n\n/* Create a function that returns the mean of the values in a list.\n  Example: mean([1, 2, 3]) == 2\n  */\nconst mean =(lst) => {\n  let sum = 0\n  for (let J = 0; J < lst.length; J++) {\n    sum += lst [ J ]}\n  return sum / lst.length\n}\n\n/* Create a function that returns the median of the values in a list.\n  Example: median([1, 2, 3]) == 2\n  */\nconst median =(lst) => {\n  let mid = lst.length / 2\n  let list = lst.slice(0, mid)\n  let sorted = list.sort()\n  return sorted [ (list.length / 2) - 1 ]\n}\n\n/* Create a function that returns the mode of the values in a list.\n  Example: mode([1, 2, 3]) == 2\n  */\nconst mode =(lst) => {\n  let modes = {}\n  for (let J = 0; J < lst.length; J++) {\n    if (lst [ J ] in modes) {\n      modes [ lst [ J ] ] ++}\n    else {\n      modes [ lst [ J ] ] = 1}\n  }\n  let max = 0\n  let maxKey = 0\n  for (let J in modes) {\n    if (modes [ J ] > max) {\n      max = modes [ J ]\n      maxKey = J}\n  }\n  return maxKey\n}\n\n/* Create a function that returns the standard deviation of the values in a list.\n  Example: standardDeviation([1, 2, 3]) == 1\n  */\nconst standardDeviation =(lst) => {\n  let mean = mean(lst)\n  let squareDifference = 0\n  for (let J = 0; J < lst.length; J++) {\n    squareDifference += (lst [ J ] - mean) * (lst [ J ] - mean)\n  }\n  return Math.sqrt(squareDifference / lst.length)\n}\n\n/* Create a function that returns the variance of the values in a list.\n  Example: variance([1, 2, 3]) == 2\n  */\nconst variance =(lst) => {\n  let mean = mean(lst)\n  let squareDifference = 0\n  for (let J = 0; J < lst.length; J++) {\n    squareDifference += (lst [ J ] - mean) * (lst [ J ] - mean)\n  }\n  return squareDifference / lst.length\n}\n\n/* Create a function that returns the sample mean of the values in a list.\n  Example: sampleMean([1, 2, 3]) == 2\n  */\nconst sampleMean =(lst) => {\n  let sum = 0\n  for (let J = 0; J < lst.length; J++) {\n    sum += lst [ J ]}\n  return sum / lst.length\n}\n\n/* Create a function that returns the sample variance of the values in a list.\n  Example: sampleVariance([1, 2, 3]) == 1\n  */\nconst sampleVariance =(lst) => {\n  let mean = sampleMean(lst)\n  let squareDifference = 0\n  for (let J = 0; J < lst.length; J++) {\n    squareDifference += (lst [ J ] - mean) * (lst [ J ] - mean)\n  }\n  return squareDifference / (lst.length - 1)\n}\n\n/* Create a function that returns the sample standard deviation of the values in a list.\n  Example: sampleStandardDeviation([1, 2, 3]) == 1\n  */\nconst sampleStandardDeviation =(lst) => {\n  let mean = sampleMean(lst)\n  let squareDiff"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(p) => {\n  if (p == 0 || p == 1)\n  return 0;\n  if (p == 2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fibfib(p - 1) + fibfib(p - 2) + fibfib(p - 3);\n  }\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(p) => {\n  if (p == 0 || p == 1)\n  return 0;\n  if (p == 2)\n \n  return 1;\n  if (p == 3)\n \n  return 2;\n  return fibfib(p - 1) + fibfib(p - 2) + fibfib(p - 3);\n}\n\nconst fibfib_iter =(p) => {\n  if (p == 0 || p == 1)\n  return 0;\n  if (p == 2)\n \n  return 1;\n  if (p == 3)\n \n  return 2;\n  return fibfib(p - 1) + fibfib(p - 2) + fibfib(p - 3);\n}\n\nconst fibfib_recur =(p) => {\n  if (p == 0 || p == 1)\n  return 0;\n  if (p == 2)\n \n  return 1;\n  if (p == 3)\n \n  return 2;\n  return fibfib(p - 1) + fibfib(p - 2) + fibfib(p - 3);\n}\n\nconst fibfib_func =(p) => {\n  if (p == 0 || p == 1)\n  return 0;\n  if (p == 2)\n \n  return 1;\n  if (p == 3)\n \n  return 2;\n  return fibfib(p - 1) + fibfib(p - 2) + fibfib(p - 3);\n}\n\nconst fibfib_func_iter =(p) => {\n  if (p == 0 || p == 1)\n  return 0;\n  if (p == 2)\n \n  return 1;\n  if (p == 3)\n \n  return 2;\n  return fibfib(p - 1) + fibfib(p - 2) + fibfib(p - 3);\n}\n\nconst fibfib_func_recur =(p) => {\n  if (p == 0 || p == 1)\n  return 0;\n  if (p == 2)\n \n  return 1;\n  if (p == 3)\n \n  return 2;\n  return fibfib(p - 1) + fibfib(p - 2) + fibfib(p - 3);\n}\n\nconsole.log(fibfib(10));\nconsole.log(fibfib_iter(10));\nconsole.log(fibfib_recur(10));\nconsole.log(fibfib_func(10));\nconsole.log(fibfib_func_iter(10));\nconsole.log(fibfib_func_recur(10));\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, sA486) => sA486 % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, sA486) =>(sA486 % 3 == 0 ? three [ sA486 / 3 ] : item));\n  }\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, sA486) => sA486 % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n  var sorted = [...l];\n  var index = 0;\n  sorted.forEach(item => {\n    while (index < sorted.length - 1 && sorted[index] < sorted[index + 1]) {\n      var item = sorted[index];\n      sorted[index] = sorted[index + 1];\n      sorted[index + 1] = item;\n      index++;\n    }\n  });\n  return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var G72cW0747 = 0, prod_value = 1;\n  for (const n of numbers) {\n    G72cW0747+=n;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    prod_value *= n;\n    }\n  return [ G72cW0747, prod_value ];\n  }\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var G72cW0747 = 0, prod_value = 1;\n  for (const n of numbers) {\n    G72cW0747+=n;\n   \n    prod_value *= n;\n  }\n  \n  return [G72cW0747, prod_value];\n};\n\n/*\n  A program to find the sum and the product of all the elements of a list.\n  >>> sumProduct([1, 2, 3, 4])\n  [10, 24]\n  >>> sumProduct([])\n  [0, 1]\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [55, 1890]\n  */\nconst sumProduct = (numbers) => {\n  const sum = numbers.reduce((prev, next) => prev + next);\n  const prod = numbers.reduce((prev, next) => prev * next);\n  return [sum, prod];\n};\n\n/*\n  A program to find the sum of all the even numbers in a list.\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 4, 6, 8]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> sumEven([])\n  []\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10, 12]\n  */\nconst sumEven = (numbers) => {\n  var sum = 0;\n  for (const number of numbers) {\n    if (number % 2 === 0) {\n      sum += number;\n    }\n  }\n  return sum;\n};\n\n/*\n  A program to find the product of all the even numbers in a list.\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 4, 6, 8]\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10]\n  >>> sumEven([])\n  []\n  >>> sumEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10, 12]\n  */\nconst sumEven = (numbers) => {\n  const prod = 1;\n  for (const number of numbers) {\n    if (number % 2 === 0) {\n      prod *= number;\n    }\n  }\n  return prod;\n};\n\n/*\n  A program to find the sum and product of all the even numbers and even\n  numbers in a list.\n  >>> sumEvenProd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [2, 4, 6, 8, 10, 12]\n  >>> sumEvenProd([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 4, 6, 8, 10]\n  >>> sumEvenProd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18]\n  >>> sumEvenProd([])\n  []\n  >>> sumEvenProd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 4, 6, 8, 10, 12, 14, 16, 18]\n  */\nconst sumEvenProd = (numbers) => {\n  const sumEven = sumEven(numbers);\n  const prodEven = sumEvenProd(numbers);\n  return [sumEven, prodEven];\n};\n\nconst sumProduct = (numbers) => {\n  const [sum, prod] = sumEvenProd(numbers);\n  return [sum, prod];\n};\n\nconst sumProduct = (numbers) => {\n  return sumEvenProd(numbers);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let D = 0; D < s.length; D++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s [ D ] == c [ j ]) {\n        y = 0\n        }\n      }\n    if (y == 1) {\n      t+=s [ D ]\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let z = 1\n  for (let D = 0; D < t.length; D++) {\n    if (t [ D ] != t [ t.length - D - 1 ]) {\n      z = 0\n      }\n    }\n  if (z == 0) {\n    return(z, false)\n    }\n  return(z, true)\n  }\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let D = 0; D < s.length; D++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s [ D ] == c [ j ]) {\n        y = 0\n        }\n      }\n    if (y == 1) {\n      t+=s [ D ]\n      }\n   \n  }\n  let x = t.length\n  let z = t.substring(0, x/2)\n  let y = t.substring(x/2)\n  return [ z, y, t, x ]\n}\n\nconst isPalindrome = (s) => {\n  return reverseDelete(s, s)[2] === s\n}\n\nmodule.exports = isPalindrome<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(j2) => {\n  for (let i = 0; i < j2.length; i++)\n  for (let j = i + 1; j < j2.length; j++)\n  for (let k = j + 1; k < j2.length; k++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (j2 [ i ] + j2 [ j ] + j2 [ k ] == 0)\n  return true;\n  return false;\n  }\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(j2) => {\n  for (let i = 0; i < j2.length; i++)\n  for (let j = i + 1; j < j2.length; j++)\n  for (let k = j + 1; k < j2.length; k++)\n \n  if ((j2[i] + j2[j] + j2[k]) === 0)\n  return false;\n  return true;\n}\n\n/*\n  isPossibleDivide takes a list of numbers as an input.\n  it returns true if the sum of all the numbers is divisible by another number\n  in the list, and false otherwise.\n\n  >>> isPossibleDivide([1, 3, 5, 0])\n  false\n  >>> isPossibleDivide([1, 3, -2, 1])\n  true\n  >>> isPossibleDivide([1, 2, 3, 7])\n  true\n  >>> isPossibleDivide([2, 4, -5, 3, 9, 7])\n  true\n  >>> isPossibleDivide([1])\n  true\n  */\nconst isPossibleDivide =(j2) => {\n  for (let i = 0; i < j2.length; i++)\n  for (let j = i + 1; j < j2.length; j++)\n  for (let k = j + 1; k < j2.length; k++)\n \n  if ((j2[i] + j2[j] + j2[k]) % j2[i]!== 0)\n  return false;\n  return true;\n}\n\n/*\n  isPossibleSqrt takes a list of numbers as an input.\n  it returns true if the square root of the sum of all the numbers is equal to\n  the sum of the squares of the numbers.\n  and false otherwise.\n\n  >>> isPossibleSqrt([1, 3, 5, 0])\n  false\n  >>> isPossibleSqrt([1, 3, -2, 1])\n  false\n  >>> isPossibleSqrt([1, 2, 3, 7])\n  true\n  >>> isPossibleSqrt([2, 4, -5, 3, 9, 7])\n  false\n  >>> isPossibleSqrt([1])\n  true\n  */\nconst isPossibleSqrt =(j2) => {\n  let total = 0;\n  for (let i = 0; i < j2.length; i++)\n  for (let j = i + 1; j < j2.length; j++)\n  for (let k = j + 1; k < j2.length; k++)\n  total += (j2[i] + j2[j] + j2[k]);\n\n  let a = total;\n  let b = total * total;\n\n  return ((Math.sqrt(a) + Math.sqrt(b)) === a);\n}\n\n/*\n  isPossiblePow takes a list of numbers as an input.\n  it returns true if the power of the sum of all the numbers is equal to the\n  sum of the squares of the numbers.\n  and false otherwise.\n\n  >>> isPossiblePow([1, 3, 5, 0])\n  false\n  >>> isPossiblePow([1, 3, -2, 1])\n  false\n  >>> isPossiblePow([1, 2, 3, 7])\n  false\n  >>> isPossiblePow([2, 4, -5, 3, 9, 7])\n  true\n  >>> isPossiblePow([1])\n  true\n  */\nconst isPossiblePow =(j2) => {\n  let total = 0;\n  for (let i = 0; i < j2.length; i++)\n  for (let j = i + 1; j < j2.length; j++)\n  for (let k = j + 1; k < j2.length; k++)\n  total += (j2[i] + j2[j] + j2[k]);\n\n  let a = total;\n  let b = total * total;\n  return ((Math.pow(a, 2) + Math.pow(b, 2)) === a * b);\n}\n\n/*\n  main takes a list of numbers as an input.\n  it returns true if the sum of the elements of the list is equal to zero,\n  and false otherwise.\n\n  >>> main([1, 3, 5, 0])\n  false\n  >>> main([1, 3, -2, 1])\n  false\n  >>> main([1, 2, 3, 7])\n  true\n  >>> main([2, 4, -5, 3, 9, 7])\n  false\n  >>> main([1])\n  true\n  */\nconst main =(j2) => {\n  if (triplesSumToZero(j2) && isPossibleDivide(j2) && isPossibleSqrt(j2) && isPossiblePow(j2))\n  return true;\n  return false;\n}\n\nmodule.exports = main;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return music_string.split(' ').filter(P => P != '').map(P => note_map [ P ]);\n  }\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n  const notes = music_string.split(' o |. | ');\n  const beat_list = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    if (note.length === 0) {\n      continue;\n    }\n    const note_length = note_map[note];\n    if (note_length === undefined) {\n      throw new Error('Not a valid note:'+ note);\n    }\n    beat_list.push(note_length);\n  }\n  return beat_list;\n};\n\nconsole.log(parseMusic('o o|.| o| o|.|.|.|.| o o'));<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  for (let H = arr.length - 1; H > 0; H--) {\n    if (arr [ H ] < arr [ H - 1 ]) {\n      return H}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return - 1\n  }\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  for (let H = arr.length - 1; H > 0; H--) {\n    if (arr [ H ] < arr [ H - 1 ]) {\n      return H}\n   \n  }\n  return - 1}\n  \n  \n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1;\n  while (i < j) {\n    if (d [ i ] != d [ j ])\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false;\n    i++;\n    j--;\n    }\n  return true;\n  }\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1;\n  while (i < j) {\n    if (d [ i ]!= d [ j ])\n   \n    return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1;\n  while (i < j) {\n    if (d [ i ]!= d [ j ])\n    return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1;\n  while (i < j) {\n    if (d [ i ]!= d [ j ])\n   \n    return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1;\n  while (i < j) {\n    if (d [ i ]!= d [ j ])\n   \n    return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1;\n  while (i < j) {\n    if (d [ i ]!= d [ j ])\n   \n    return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1;\n  while (i < j) {\n    if (d [ i ]!= d [ j ])\n   \n    return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1;\n  while (i < j) {\n    if (d [ i ]!= d [ j ])\n   \n    return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1;\n  while (i < j) {\n    if (d [ i ]!= d [ j ])\n   \n    return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1;\n  while (i < j) {\n    if (d [ i ]!= d [ j ])\n   \n    return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1;\n  while (i < j) {\n    if (d [ i ]!= d [ j ])\n   \n    return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1;\n  while (i < j) {\n    if (d [ i ]!= d [ j ])\n   \n    return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1;\n  while (i < j) {\n    if (d [ i ]!= d [ j ])\n   \n    return false;\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst willItFly =(d, w) => {\n  if (d.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = d.length - 1"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(I) => {\n  return encodeCyclic(encodeCyclic(I));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(I) => {\n  return encodeCyclic(encodeCyclic(I));\n \n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 =(I) => {\n  return encodeCyclic(encodeCyclic(I));\n}\n\n/*\n  encodes given string using encode_cyclic function.\n  */\nconst encodeCyclicWithCustom = (s, custom) => {\n  if (!custom) {\n    return encodeCyclic(s);\n  }\n  return encodeCyclic(encodeCyclic(s));\n}\n\n/*\n  decodes given string using decode_cyclic function.\n  */\nconst decodeCyclicWithCustom = (s, custom) => {\n  if (!custom) {\n    return decodeCyclic(s);\n  }\n  return decodeCyclic(decodeCyclic(s));\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic,\n  decodeCyclicWithCustom,\n  encodeCyclicWithCustom\n}<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(z7 => String.fromCharCode(\n  ((z7.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )).join(\"\");\n  }\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(z7 => String.fromCharCode(\n  ((z7.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n )).join(\"\");\n}\n\n/*\n  encodes given string with encode_shift\n  */\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  decodes given string with decode_shift\n  */\nconst decode =(s) => {\n  return decodeShift(s);\n}\n\nconst shift = encodeShift;\nconst unshift = decodeShift;\n\nexport {\n  encode,\n  decode,\n  shift,\n  unshift\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let q59 = 0\n  if (hi > lo) {\n    q59 = hi - lo}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (q59 == 1 || q59 == 0) {\n    return 'NO'}\n  for (let i = 2; i * i <= q59; i++) {\n    if (q59 % i == 0) {\n      return 'NO'}\n    }\n  return 'YES'}\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let q59 = 0\n  if (hi > lo) {\n    q59 = hi - lo}\n \n  let r59 = Math.sqrt(q59)\n  if (r59 < 2) {\n    return \"NO\"}\n  if (q59 % r59 === 0) {\n    return \"YES\"}\n  else {\n    return \"NO\"}\n}\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"NO\"\n  intersection((1, 2), (2, 3), (3, 4)) ==> \"YES\"\n*/\nconst intersection3 =(interval1, interval2, interval3) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  if (interval3 [ 0 ] > lo) {\n    lo = interval3 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  if (interval3 [ 1 ] < hi) {\n    hi = interval3 [ 1 ]}\n  let q59 = 0\n  if (hi > lo) {\n    q59 = hi - lo}\n \n  let r59 = Math.sqrt(q59)\n  if (r59 < 2) {\n    return \"NO\"}\n  if (q59 % r59 === 0) {\n    return \"YES\"}\n  else {\n    return \"NO\"}\n}\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"NO\"\n  intersection((1, 2), (2, 3), (3, 4)) ==> \"YES\"\n*/\nconst intersection4 =(interval1, interval2, interval3, interval4) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  if (interval3 [ 0 ] > lo) {\n    lo = interval3 [ 0 ]}\n  if (interval4 [ 0 ] > lo) {\n    lo = interval4 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  if (interval3 [ 1 ] < hi) {\n    hi = interval3 [ 1 ]}\n  if (interval4 [ 1 ] < hi) {\n    hi = interval4 [ 1 ]}\n  let q59 = 0\n  if (hi > lo) {\n    q59 = hi - lo}\n \n  let r59 = Math.sqrt(q59)\n  if (r59 < 2) {\n    return \"NO\"}\n  if (q59 % r59 === 0) {\n    return \"YES\"}\n  else {\n    return \"NO\"}\n}\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"NO\"\n  intersection((1, 2), (2, 3), (3, 4)) ==> \"YES\"\n*/\nconst intersection5 =(interval1, interval2, interval3, interval4, interval5) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  if (interval3 [ 0 ] > lo) {\n    lo = interval3 [ 0 ]}\n  if (interval4 [ 0 ] > lo) {\n    lo = interval4 [ 0 ]}\n  if (interval5 [ 0 ] > lo) {\n    lo = interval5 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  if (interval3 [ 1 ] < hi) {\n    hi = interval3 [ 1 ]}\n  if (interval4 [ 1 ] < hi) {\n    hi = interval4 [ 1 ]}\n  if (interval5 [ 1 ] < hi) {\n    hi = interval5 [ 1 ]}\n  let q59 = 0\n  if (hi > lo) {\n    q59 = hi - lo}\n \n  let r59 = Math.sqrt(q59)\n  if (r59 < 2) {\n    return \"NO\"}\n  if (q59 % r59 === 0) {\n    return \"YES\"}\n  else {\n    return \"NO"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(m) => {\n  return m *(m + 1) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(m) => {\n  return m *(m + 1) / 2;\n \n};\n\n//console.log(sumToN(3));\n//console.log(sumToN(100));\n//console.log(sumToN(5));\n//console.log(sumToN(10));\n//console.log(sumToN(1));\n\n/*\n  sumOfSquare is a function that sums the squares of numbers from 1 to n.\n  >>> sumOfSquare(30)\n  1365\n  >>> sumOfSquare(100)\n  40000\n  >>> sumOfSquare(5)\n  25\n  >>> sumOfSquare(10)\n  550\n  >>> sumOfSquare(1)\n  1\n  */\nconst sumOfSquare =(m) => {\n  return m *(m + 1) *(2*m + 1) / 6;\n \n};\n\n//console.log(sumOfSquare(3));\n//console.log(sumOfSquare(100));\n//console.log(sumOfSquare(5));\n//console.log(sumOfSquare(10));\n//console.log(sumOfSquare(1));\n\n/*\n  sumOfCube is a function that sums the cubes of numbers from 1 to n.\n  >>> sumOfCube(30)\n  1365\n  >>> sumOfCube(100)\n  50000\n  >>> sumOfCube(5)\n  25\n  >>> sumOfCube(10)\n  550\n  >>> sumOfCube(1)\n  1\n  */\nconst sumOfCube =(m) => {\n  return m *(m + 1) *(2*m + 1) *(3*m + 1) / 24;\n \n};\n\n//console.log(sumOfCube(3));\n//console.log(sumOfCube(100));\n//console.log(sumOfCube(5));\n//console.log(sumOfCube(10));\n//console.log(sumOfCube(1));\n\n/*\n  sumOfSquaresAndCubes is a function that sums the squares, cubes and squares of numbers from 1 to n.\n  >>> sumOfSquaresAndCubes(30)\n  1365\n  >>> sumOfSquaresAndCubes(100)\n  50000\n  >>> sumOfSquaresAndCubes(5)\n  25\n  >>> sumOfSquaresAndCubes(10)\n  550\n  >>> sumOfSquaresAndCubes(1)\n  1\n  */\nconst sumOfSquaresAndCubes =(m) => {\n  return m *(m + 1) *(2*m + 1) *(3*m + 1) / 6;\n \n};\n\n//console.log(sumOfSquaresAndCubes(3));\n//console.log(sumOfSquaresAndCubes(100));\n//console.log(sumOfSquaresAndCubes(5));\n//console.log(sumOfSquaresAndCubes(10));\n//console.log(sumOfSquaresAndCubes(1));\n\n/*\n  sumOfAll is a function that sums the numbers from 1 to n.\n  >>> sumOfAll(30)\n  465\n  >>> sumOfAll(100)\n  5050\n  >>> sumOfAll(5)\n  15\n  >>> sumOfAll(10)\n  55\n  >>> sumOfAll(1)\n  1\n  */\nconst sumOfAll =(m) => {\n  return sumToN(m) + sumOfSquare(m) + sumOfCube(m) + sumOfSquaresAndCubes(m);\n \n};\n\n//console.log(sumOfAll(3));\n//console.log(sumOfAll(100));\n//console.log(sumOfAll(5));\n//console.log(sumOfAll(10));\n//console.log(sumOfAll(1));\n\n/*\n  sumOfSquaresAndCubesWithRange is a function that sums the squares, cubes and squares of numbers in a range.\n  >>> sumOfSquaresAndCubesWithRange(5, 15)\n  1365\n  >>> sumOfSquaresAndCubesWithRange(10, 30)\n  40000\n  >>> sumOfSquaresAndCubesWithRange(1, 1)\n  1\n  >>> sumOfSquaresAndCubesWithRange(5, 10)\n  550\n  >>> sumOfSquaresAndCubesWithRange(5, 1)\n  25\n  */\nconst sumOfSquaresAndCubesWithRange =(m1, m2) => {\n  return sumOfAll(m1) + sumOfAll(m2);\n \n};\n\n//console.log(sumOfSquaresAndCubesWithRange(5, 15));\n//console.log(sumOfSquaresAndCubesWithRange(10, 30));\n//console.log(sumOfSquaresAndCubesWithRange(1, 1));\n//console.log(sumOfSquaresAndCubesWithRange(5, 10));\n//console.log(sumOfSquaresAndCubesWithRange(5, 1));\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(U) => {\n  if (U < 2)\n  return false;\n  for (let k = 2; k < U - 1; k++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (U % k == 0)\n  return false;\n  return true;\n  }\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(U) => {\n  if (U < 2)\n  return false;\n  for (let k = 2; k < U - 1; k++)\n \n  {\n    if (U % k === 0)\n    return false;\n  }\n  return true;\n};\n\nconsole.log(isPrime(6));\nconsole.log(isPrime(101));\nconsole.log(isPrime(11));\nconsole.log(isPrime(13441));\nconsole.log(isPrime(61));\nconsole.log(isPrime(4));\nconsole.log(isPrime(1));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  for (let w = 0; w < t.length; w++) {\n    let l = 0\n    for (let j = 0; j < t [ w ].length; j++) {\n      if (t [ w ] [ j ] != 'a' && t [ w ] [ j ] != 'e' && t [ w ] [ j ] != 'i' && t [ w ] [ j ] != 'o' && t [ w ] [ j ] != 'u' && t [ w ] [ j ] != 'A' &&\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t [ w ] [ j ] != 'U' && t [ w ] [ j ] != 'O' && t [ w ] [ j ] != 'I' && t [ w ] [ j ] != 'E') {\n        l++\n        }\n      }\n    if (l == n) {\n      k.push(t [ w ])}\n    }\n  return k\n  }\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  for (let w = 0; w < t.length; w++) {\n    let l = 0\n    for (let j = 0; j < t [ w ].length; j++) {\n      if (t [ w ] [ j ]!= 'a' && t [ w ] [ j ]!= 'e' && t [ w ] [ j ]!= 'i' && t [ w ] [ j ]!= 'o' && t [ w ] [ j ]!= 'u' && t [ w ] [ j ]!= 'A' &&\n     \n      t [ w ] [ j ]!= 'E' && t [ w ] [ j ]!= 'I' && t [ w ] [ j ]!= 'O' && t [ w ] [ j ]!= 'U') {\n        l++\n        if (l == n) {\n          k.push(t [ w ])\n        }\n      }\n    }\n  }\n  return k\n}\n\n/*\nGiven a string s, you have been tasked to implement a function that returns\nan integer count of how many words are contained in the string s, and each word\nis composed of exactly two consonants.\n\nIf the string s is empty, then the function should return 0.\n\nExample:\n\nselectConsonants(\"Hello world\") ==> 3\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectConsonants(\"Hello world\") ==> 1\nselectCons"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var c62 = [ ];\n  for (const i of s.split(\" \"))\n  if ( !isNaN(i))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  c62.push(Number(i))\n  return n - c62.reduce(((prev, item) => prev + item), 0);\n  }\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var c62 = [ ];\n  for (const i of s.split(\" \"))\n  if (!isNaN(i))\n \n    c62.push(parseInt(i));\n  var c63 = Math.max(...c62);\n  return c63 - n;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let u2 = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (u2 < 0) {\n        y = - 1; u2 = - u2;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      while (u2 >= 10) {\n        m+=u2 % 10;\n        u2 =(u2 - u2 % 10) / 10;\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      m+=y * u2\n      while (d >= 10) {\n        n+=d % 10;\n        d =(d - d % 10) / 10;\n        }\n      n+=u * d\n      if (m > n) {\n        let tmp = p [ k ]\n        p [ k ] = p [ k + 1 ]\n        p [ k + 1 ] = tmp\n        }\n      }\n    }\n  return p\n  }\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let u2 = p [ k ]\n      let d = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (u2 < 0) {\n        y = - 1; u2 = - u2;}\n      if (d < 0) {\n        u = - 1; d = - d;}\n      while (u2 >= 10) {\n        m+=u2 % 10;\n        u2 =(u2 - u2 % 10) / 10;\n        }\n     \n      while (d >= 10) {\n        n+=d % 10;\n        d =(d - d % 10) / 10;\n        }\n\n      if (m > n) {\n        p [ k ] = y * p [ k ]\n        p [ k + 1 ] = y * p [ k + 1 ]\n        p [ k ] = u * p [ k ]\n        p [ k + 1 ] = u * p [ k + 1 ]\n        }\n      }\n    }\n  return p\n}\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12]))<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a * g / 2.0;\n \n};\n \n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(a, g) => {\n  return a"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var b485U3885h4, result = [ ];\n  for (const n of numbers) {\n    if (b485U3885h4 == undefined)\n    b485U3885h4 = n;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    b485U3885h4 = Math.max(b485U3885h4, n);\n    result.push(b485U3885h4);\n    }\n  return result;\n  }\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var b485U3885h4, result = [ ];\n  for (const n of numbers) {\n    if (b485U3885h4 == undefined)\n    b485U3885h4 = n;\n    else\n   \n    if (n > b485U3885h4)\n      b485U3885h4 = n;\n    result.push(b485U3885h4);\n  }\n  return result;\n}\n\n// From a given list of integers, generate a list of rolling minimum element found until given moment in the sequence.\nconst rollingMin = (numbers) => {\n  var b485U3885h4, result = [ ];\n  for (const n of numbers) {\n    if (b485U3885h4 == undefined)\n    b485U3885h4 = n;\n    else\n   \n    if (n < b485U3885h4)\n      b485U3885h4 = n;\n    result.push(b485U3885h4);\n  }\n  return result;\n}\n\nconst max = (numbers) => {\n  const max = numbers.sort( (a, b) => a - b );\n  return max[numbers.length - 1];\n}\n\nconst min = (numbers) => {\n  const min = numbers.sort( (a, b) => b - a );\n  return min[0];\n}\n\nmodule.exports = {\n  rollingMax,\n  rollingMin,\n  max,\n  min\n};\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var P59j6 = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    P59j6+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    P59j6-=1;\n    if (P59j6 < 0)\n    return false;\n    }\n  return P59j6 == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var P59j6 = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    P59j6+=1;\n    else\n   \n    if (b == \")\")\n    P59j6-=1;\n    else\n    if (P59j6 < 0)\n      return false;\n  }\n  return (P59j6 == 0);\n};\n\n/*\n  Given a string, determine if it is a palindrome, considering only\n  alphabetic characters and ignoring cases.\n\n  >>> isPalindrome(\"A man, a plan, a canal: Panama\")\n  true\n  >>> isPalindrome(\"race a car\")\n  false\n  >>> isPalindrome(\"A man, a plan, a canal: Panama\")\n  true\n  >>> isPalindrome(\"race a car\")\n  false\n  >>> isPalindrome(\"A man, a plan, a canal: Panama\")\n  true\n  >>> isPalindrome(\"race a car\")\n  false\n  */\nconst isPalindrome = (str) => {\n  var s = \"\";\n  for (const a of str.toLowerCase().split(\"\"))\n  s += a;\n  return str == s;\n};\n\n/*\n  Write a function that prints a two-dimensional array of int values\n  in a row-major order. For example, given the following array:\n\n  [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ]\n\n  print the values in the array as:\n\n  1 2 3\n  4 5 6\n  7 8 9\n\n  For challenge purposes, the array is 2x3.\n\n  >>> [\n ...   [1, 2, 3],\n ...   [4, 5, 6],\n ...   [7, 8, 9]\n ... ]\n  >>>\n  >>> printRowMajor(\n ...   [\n ...     [1, 2, 3],\n ...     [4, 5, 6],\n ...     [7, 8, 9]\n ...   ]\n ... )\n  1 2 3\n  4 5 6\n  7 8 9\n\n  */\nconst printRowMajor =(array) => {\n  for (var i = 0; i < array.length; i++) {\n    for (var j = 0; j < array[i].length; j++) {\n      console.log(array[i][j]);\n    }\n    console.log(\"\");\n  }\n};\n\n/*\n  Write a function that takes in a string and returns a boolean\n  indicating whether the string is a valid filename, based on the\n  regular expression given in the challenge. For example, if the\n  challenge was \"^[a-zA-Z0-9_\\\\-]{1,100}$\", the function should return\n  true for \"alpha\" and \"alphanumeric\" and false for other strings.\n\n  >>> filenameRegex(\"alpha\")\n  true\n  >>> filenameRegex(\"alphanumeric\")\n  true\n  >>> filenameRegex(\"somethingElse\")\n  false\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-zA-Z0-9_\\\\-]{1,100}$\")\n  true\n  >>> filenameRegex(\"^[a-"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  for (let x = 0; x < guess.length; x++) {\n    game [ x ]-=guess [ x ]\n    if (game [ x ] < 0)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    game [ x ] = - game [ x ];}\n  return game\n  }\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  for (let x = 0; x < guess.length; x++) {\n    game [ x ]-=guess [ x ]\n    if (game [ x ] < 0)\n   \n    \n  }\n  return game\n}\n\nexport default compare<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, h, c) => {\n  if (a + h <= c || a + c <= h || h + c <= a)\n  return - 1;\n  var s =(a + h + c) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var area = Math.pow(s *(s - a) *(s - h) *(s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, h, c) => {\n  if (a + h <= c || a + c <= h || h + c <= a)\n  return - 1;\n  var s =(a + h + c) / 2;\n \n  return Math.round(Math.sqrt(s * (s - a) * (s - h) * (s - c)) * 100) / 100;\n}\n\nconst testTriangleArea =(a, h, c) => {\n  return triangleArea(a, h, c);\n}\n\nconst test =(a, h, c) => {\n  var res = testTriangleArea(a, h, c);\n  if (res!== -1)\n  console.log(`The area of the triangle is ${res}`);\n  else\n  console.log(`The triangle is not a valid triangle.`);\n}\n\ntest(3, 4, 5);\ntest(3, 4, 7);\ntest(3, 5, 7);\ntest(3, 6, 5);\ntest(3, 6, 7);\ntest(3, 6, 9);\ntest(4, 5, 7);\ntest(4, 5, 9);\ntest(4, 6, 7);\ntest(4, 6, 9);\ntest(4, 7, 9);\ntest(4, 8, 9);\ntest(4, 9, 9);\ntest(4, 10, 9);\ntest(5, 6, 7);\ntest(5, 6, 9);\ntest(5, 7, 9);\ntest(5, 8, 9);\ntest(5, 9, 9);\ntest(5, 10, 9);\ntest(6, 6, 7);\ntest(6, 6, 9);\ntest(6, 7, 9);\ntest(6, 8, 9);\ntest(6, 9, 9);\ntest(6, 10, 9);\ntest(7, 6, 7);\ntest(7, 6, 9);\ntest(7, 7, 9);\ntest(7, 8, 9);\ntest(7, 9, 9);\ntest(7, 10, 9);\ntest(8, 8, 9);\ntest(8, 9, 9);\ntest(8, 10, 9);\ntest(9, 9, 9);\ntest(9, 10, 9);\ntest(10, 10, 9);\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(f) => {\n  for (let i = 0; i < f.length; i++)\n  for (let j = i + 1; j < f.length; j++)\n  if (f [ i ] + f [ j ] == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return true;\n  return false;\n  }\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(f) => {\n  for (let i = 0; i < f.length; i++)\n  for (let j = i + 1; j < f.length; j++)\n  if (f [ i ] + f [ j ] == 0)\n \n    return false;\n  return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(oej) => {\n  if (oej.length == 0) {\n    return true}\n  let dup = 1\n  let pre = oej [ 0 ]\n  for (let i = 1; i < oej.length; i++) {\n    if (oej [ i ] < pre) {\n      return false}\n    if (oej [ i ] == pre) {\n      dup+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (dup == 3) {\n        return false}\n      }\n    else {\n      pre = oej [ i ]\n      dup = 1\n      }\n    }\n  return true\n  }\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(oej) => {\n  if (oej.length == 0) {\n    return true}\n  let dup = 1\n  let pre = oej [ 0 ]\n  for (let i = 1; i < oej.length; i++) {\n    if (oej [ i ] < pre) {\n      return false}\n    if (oej [ i ] == pre) {\n      dup+=1;\n     \n    }\n    pre = oej [ i ]\n    if (dup>1) {\n      return false}\n  }\n  return true\n}\n\nmodule.exports = isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(cJ9) => {\n  if (cJ9.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  for (let i = 0; i < cJ9.length; i++) {\n    s+=cJ9 [ i ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (cJ9 [ i ] == 0) {\n      return 0}\n    if (cJ9 [ i ] < 0) {\n      n = - n; s-=2 * cJ9 [ i ]}\n    }\n  return s * n\n  }\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(cJ9) => {\n  if (cJ9.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  for (let i = 0; i < cJ9.length; i++) {\n    s+=cJ9 [ i ]\n   \n    if (cJ9 [ i ] > 0) {\n      n*=1}\n    else if (cJ9 [ i ] < 0) {\n      n*= -1}\n  }\n  return n*s\n}\n\nmodule.exports = prodSigns\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let S = 18\n  for (let i = 2; i < n; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    S = S * 10\n    }\n  return S\n  }\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let S = 18\n  for (let i = 2; i < n; i++) {\n   \n    for (let j = 1; j < i; j++) {\n      if (i + j > n) {\n        break\n      }\n      let r = i * i + j\n      if (r < n) {\n        S += (i - j)\n      }\n    }\n  }\n  return S\n}\n\n//console.log(startsOneEnds(1))\n//console.log(startsOneEnds(2))\n//console.log(startsOneEnds(3))\n//console.log(startsOneEnds(4))\n//console.log(startsOneEnds(5))\n//console.log(startsOneEnds(6))\n//console.log(startsOneEnds(7))\n//console.log(startsOneEnds(8))\n//console.log(startsOneEnds(9))\n//console.log(startsOneEnds(10))\n//console.log(startsOneEnds(11))\n//console.log(startsOneEnds(12))\n//console.log(startsOneEnds(13))\n//console.log(startsOneEnds(14))\n//console.log(startsOneEnds(15))\n//console.log(startsOneEnds(16))\n//console.log(startsOneEnds(17))\n//console.log(startsOneEnds(18))\n//console.log(startsOneEnds(19))\n//console.log(startsOneEnds(20))\n//console.log(startsOneEnds(21))\n//console.log(startsOneEnds(22))\n//console.log(startsOneEnds(23))\n//console.log(startsOneEnds(24))\n//console.log(startsOneEnds(25))\n//console.log(startsOneEnds(26))\n//console.log(startsOneEnds(27))\n//console.log(startsOneEnds(28))\n//console.log(startsOneEnds(29))\n//console.log(startsOneEnds(30))\n//console.log(startsOneEnds(31))\n//console.log(startsOneEnds(32))\n//console.log(startsOneEnds(33))\n//console.log(startsOneEnds(34))\n//console.log(startsOneEnds(35))\n//console.log(startsOneEnds(36))\n//console.log(startsOneEnds(37))\n//console.log(startsOneEnds(38))\n//console.log(startsOneEnds(39))\n//console.log(startsOneEnds(40))\n//console.log(startsOneEnds(41))\n//console.log(startsOneEnds(42))\n//console.log(startsOneEnds(43))\n//console.log(startsOneEnds(44))\n//console.log(startsOneEnds(45))\n//console.log(startsOneEnds(46))\n//console.log(startsOneEnds(47))\n//console.log(startsOneEnds(48))\n//console.log(startsOneEnds(49))\n//console.log(startsOneEnds(50))\n//console.log(startsOneEnds(51))\n//console.log(startsOneEnds(52))\n//console.log(startsOneEnds(53))\n//console.log(startsOneEnds(54))\n//console.log(startsOneEnds(55))\n//console.log(startsOneEnds(56))\n//console.log(startsOneEnds(57))\n//console.log(startsOneEnds(58))\n//console.log(startsOneEnds(59))\n//console.log(startsOneEnds(60))\n//console.log(startsOneEnds(61))\n//console.log(startsOneEnds(62))\n//console.log(startsOneEnds(63))\n//console.log(startsOneEnds(64))\n//console.log(startsOneEnds(65))\n//console.log(startsOneEnds(66))\n//console.log(startsOneEnds(67))\n//console.log(startsOneEnds(68))\n//console.log(startsOneEnds(69))\n//console.log(startsOneEnds(70))\n//console.log(startsOneEnds(71))\n//console.log(startsOneEnds(72))\n//console.log(startsOneEnds(73))\n//console.log(startsOneEnds(74))\n//console.log(startsOneEnds(75))\n//console.log(startsOneEnds(76))\n//console.log(startsOneEnds(77))\n//console.log(startsOneEnds(78))\n//console.log(startsOneEnds(79))\n//console.log(startsOneEnds(80))\n//console.log(startsOneEnds(81))\n//console.log(startsOneEnds(82))\n//console.log(startsOneEnds(83))\n//console.log(startsOneEnds(84))\n//console.log(startsOneEnds(85))\n//console.log(startsOneEnds(86))\n//console.log(startsOneEnds(87))\n//console.log(startsOneEnds(88))\n//console.log(startsOneEnds(89))\n//console.log(startsOneEnds(90))\n//console.log(startsOneEnds(91))\n//console.log(startsOneEnds(92))\n//console.log(startsOneEnds(93))\n//console.log(startsOneEnds(94))\n//console.log(startsOneEnds(95))\n//console.log(startsOneEnds(96))\n//console.log(startsOneEnds(97))\n//console.log(startsOneEnds(98))\n//console."}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(P) => {\n  let p = 1;\n  let t = 1;\n  while (P > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t *= P;\n      }\n    p++;\n    P--;\n    }\n  return t\n  }\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(P) => {\n  let p = 1;\n  let t = 1;\n  while (P > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n      p = t * p;\n    }\n    t = t + 1;\n    P--;\n  }\n  return p;\n};\n\n//------------------------------------------------------------------------------\n//  The Fibonacci sequence is defined as:\n//  Fibonacci(n) = (n - 1) + n.\n//\n//  For example:\n//  >>> fibonacci(4)\n//  5\n//\n//  The function will receive an integer as input and should return the Fibonacci\n//  sequence of this integer.\n//------------------------------------------------------------------------------\nconst fibonacci = (P) => {\n  let f = 0;\n  let t = 1;\n  while (P > 1) {\n    let y = f;\n    while (y > 0) {\n      y--;\n      f = t * f + t;\n    }\n    t = t + 1;\n    P--;\n  }\n  return f;\n};\n\n//------------------------------------------------------------------------------\n//  The Golden Ratio is defined as:\n//  GoldenRatio(n) = (1 + sqrt(5))^n / 2\n//\n//  For example:\n//  >>> goldenRatio(4)\n//  3\n//\n//  The function will receive an integer as input and should return the Golden\n//  Ratio of this integer.\n//------------------------------------------------------------------------------\nconst goldenRatio = (P) => {\n  let a = 1;\n  let b = 1;\n  while (P > 1) {\n    let y = a;\n    while (y > 0) {\n      y--;\n      a = a + b;\n    }\n    b = a + b;\n    a = b - a;\n    P--;\n  }\n  return a;\n};\n\n//------------------------------------------------------------------------------\n//  The Number of primes below n is defined as:\n//  NumberOfPrimes(n) = n * (n + 1) / 2\n//\n//  For example:\n//  >>> numberOfPrimes(12)\n//  5\n//\n//  The function will receive an integer as input and should return the number of\n//  primes below this integer.\n//------------------------------------------------------------------------------\nconst numberOfPrimes = (P) => {\n  let i = 2;\n  let j = 2;\n  let k = 0;\n  while (i <= P) {\n    while (j <= P) {\n      k = k + 2;\n      j = j + i;\n    }\n    j = i + 1;\n    i = i + 1;\n  }\n  return k;\n};\n\n//------------------------------------------------------------------------------\n//  The Sieve of Eratosthenes is defined as:\n//  SieveOfEratosthenes(n) = n * (n + 1) / 2\n//\n//  For example:\n//  >>> sieveOfEratosthenes(12)\n//  15\n//\n//  The function will receive an integer as input and should return the Sieve of\n//  Eratosthenes of this integer.\n//------------------------------------------------------------------------------\nconst sieveOfEratosthenes = (P) => {\n  let i = 2;\n  let j = 2;\n  let k = 0;\n  while (i <= P) {\n    while (j <= P) {\n      k = k + 2;\n      j = j + i;\n    }\n    j = i + 1;\n    i = i + 1;\n  }\n  return k;\n};\n\n//------------------------------------------------------------------------------\n//  The number of integers in the range [0, n) is defined as:\n//  N(n) = n * (n + 1) / 2\n//\n//  For example:\n//  >>> N(12)\n//  7\n//\n//  The function will receive an integer as input and should return the number of\n//  integers in the range [0, n).\n//------------------------------------------------------------------------------\nconst N = (P) => {\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i <= P) {\n    while (j <= P) {\n      k = k + 2;\n      j = j + i;\n    }\n    j = i + 1;\n    i = i + 1;\n  }\n  return k;\n};\n\n//------------------------------------------------------------------------------\n//  The number of permutations of n items is defined as:\n//  n!\n//\n//  For example:\n//  >>> nPermutations(3)\n//  6\n//\n//  The function will receive an integer as input and should return the number of\n//  permutations of this integer.\n//------------------------------------------------------------------------------\nconst nPermutations = (P) => {\n  let p = 1;\n  while (P > 1) {\n    let y = P;\n    while (y > 0) {\n      y--;\n      p = p * P;\n    }\n    P--;\n  }\n  return p;\n};\n\n//------------------------------------------------------------------------------\n//  The number of unique permutations of n items are defined as:\n//  (n - 1)!\n//\n//  For example:\n//  >>> nUniquePermutations(3)\n//  3\n//\n//  The function will receive an integer as input and should return the number of\n//  unique permutations of this integer.\n//------------------------------------------------------------------------------\nconst nUniquePermutations = (P) => {\n  let p = 1;\n  while (P > 1) {\n    let y = P;\n    while (y > 0) {\n      y--;\n      p = p * (P - 1);\n    }\n    P--;\n  }\n  return p;\n};\n\n//------------------------------------------------------------------------------\n//  The number of combinations of n items is defined as:\n//  n! / (n - k)!\n//\n//  For example:\n//  >>> nCombinations(3, 2)\n//  2\n//\n//  The function will receive two integers as input and should return the number of\n//  combinations of this"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    return max_depth;\n    }\n  return paren_string.split(' ')\n  .filter(R => R != '')\n  .map(R => parseParenGroup(R));\n  }\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n      }\n      }\n    return max_depth;\n  }\n  const array = []\n  var cur_depth = parseParenGroup(paren_string);\n  while (cur_depth >= 0) {\n    array.push(cur_depth);\n    cur_depth = parseParenGroup(paren_string.slice(0, paren_string.length - 1));\n  }\n  return array;\n}\n\n/*\n  Input: string represented multiple groups for nested parentheses separated by spaces.\n  Output: the longest string that contains no parentheses.\n  E.g. ((())) has maximum two levels of nesting while ((())()) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  '()()()'\n  */\nconst parseNestedParens2 =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n      }\n      }\n    return max_depth;\n  }\n  const array = []\n  var cur_depth = parseParenGroup(paren_string);\n  while (cur_depth >= 0) {\n    array.push(paren_string.slice(0, paren_string.length - 1));\n    cur_depth = parseParenGroup(paren_string.slice(0, paren_string.length - 1));\n  }\n  return array.sort(function(a, b) {\n    return b.length - a.length;\n  }).pop();\n}\n\nconst parseNestedParens3 =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n      }\n      }\n    return max_depth;\n  }\n  const array = []\n  var cur_depth = parseParenGroup(paren_string);\n  while (cur_depth >= 0) {\n    array.push(cur_depth);\n    cur_depth = parseParenGroup(paren_string.slice(0, paren_string.length - 1));\n  }\n  return array.sort(function(a, b) {\n    return b.length - a.length;\n  }).pop();\n}\n\nconst parseNestedParens4 =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n      }\n      }\n    return max_depth;\n  }\n  var array = []\n  var cur_depth = parseParenGroup(paren_string);\n  while (cur_depth >= 0) {\n    array.push(cur_depth);\n    cur_depth = parseParenGroup(paren_string.slice(0, paren_string.length - 1));\n  }\n  return array.sort(function(a, b) {\n    return b.length - a.length;\n  }).pop();\n}\n\n/*\n  Input: string represented multiple groups for nested parentheses separated by spaces.\n  Output: the longest string that contains no parentheses.\n  E.g. ((())) has maximum two levels of nesting while ((())()) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  '()()()()()()'\n  */\nconst parseNestedParens5 =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n      }\n      }\n    return max_depth;\n  }\n  const array = []\n  var cur_depth = parseParenGroup(paren_string);\n  while (cur_depth >= 0) {\n    array.push(paren_string.slice(0, paren_string.length - 1));\n    cur_depth = parseParenGroup(paren_string.slice(0, paren_string.length - 1));\n  }\n  return array.sort(function(a, b) {\n    return b.length - a.length;\n  }).pop();\n}\n\nconst parseNestedParens6 =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max_depth = Math.max(max_depth, depth);\n        }\n      else {\n        depth-=1;\n       \n      }\n      }\n    return max_depth;\n  }\n  var array = []\n  var cur_depth = parseParenGroup(paren_string);\n  while (cur_depth >= 0) {"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let V = 1; V <= n; V++) {\n    y.push(V * V - V + 1)\n    }\n  let u = 0\n  for (let V = 0; V < n - 2; V++) {\n    for (let j = V + 1; j < n - 1; j++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y [ V ] + y [ j ] + y [ k ]) % 3 == 0) {\n          u++}\n        }\n      }\n    }\n  return u\n  }\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let V = 1; V <= n; V++) {\n    y.push(V * V - V + 1)\n    }\n  let u = 0\n  for (let V = 0; V < n - 2; V++) {\n    for (let j = V + 1; j < n - 1; j++) {\n     \n      if (y[V] + y[j] + y[n - 1] === (3 * V * V - V) + (3 * j * j - j) + (3 * (n - 1) * (n - 1) - (n - 1))) {\n        u++\n      }\n    }\n  }\n  return u\n}\n\nexport default getMaxTriples\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(U7K) => {\n  if (U7K.length == 0) {\n    return true}\n  let k = 0\n  let len = U7K.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (U7K [ j ] < U7K [ j - 1 ]) {\n        t = 0;\n        break;\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (t == 1) {\n      k = 1;\n      break;\n      }\n    U7K.push(U7K [ 0 ]);\n    U7K.shift()\n    }\n  if (k == 1) {\n    return true}\n  return false\n  }\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(U7K) => {\n  if (U7K.length == 0) {\n    return true}\n  let k = 0\n  let len = U7K.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (U7K [ j ] < U7K [ j - 1 ]) {\n        t = 0;\n        break;\n        }\n     \n    }\n    if (t) {\n      U7K.splice(k, 1)\n      k = k - 1\n      len = len - 1\n      i--\n    }\n  }\n  return U7K.every((x) => x >= 0)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(ITdx6T) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm' ]\n  let i = 12\n  let res = ''\nwhile (ITdx6T) {\n    let div =(ITdx6T - ITdx6T % num [ i ]) / num [ i ]\n    ITdx6T = ITdx6T % num [ i ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (div) {\n      res+=sym [ i ]\n      div-=1\n      }\n    i-=1\n    }\n  return res\n  }\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(ITdx6T) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m' ]\n  let i = 12\n  let res = ''\nwhile (ITdx6T) {\n    let div =(ITdx6T - ITdx6T % num [ i ]) / num [ i ]\n    ITdx6T = ITdx6T % num [ i ]\n   \n    if (div > 0) {\n        res = sym [ div ] + res\n    }\n    i--\n}\nreturn res\n}\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  t = x.toString();\n  if (shift > t.length)\n  return t.split('').reverse().join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else\n  return t.slice( - shift) + t.slice(0, - shift);\n  }\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  t = x.toString();\n  if (shift > t.length)\n  return t.split('').reverse().join('');\n \n  var r = t.substr(0, shift);\n  var l = t.substr(shift, t.length - shift);\n  return r + l;\n}\n\nconsole.log(circularShift(12, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let N = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      N.push(lst [ i ])\n      }\n    }\n  for (let j = N.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (N [ k ].length > N [ k + 1 ].length) {\n        f = 1}\n      if (N [ k ].length == N [ k + 1 ].length) {\n        let r = N [ k ].length\n        for (let l = 0; l < r; l++) {\n          if (N [ k ] [ l ].charCodeAt() > N [ k + 1 ] [ l ].charCodeAt()) {\n            f = 1;\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            break;\n            }\n          if (N [ k ] [ l ].charCodeAt() < N [ k + 1 ] [ l ].charCodeAt()) {\n            break;\n            }\n          }\n        }\n      if (f == 1) {\n        let tmp = N [ k ]\n        N [ k ] = N [ k + 1 ]\n        N [ k + 1 ] = tmp\n        }\n      }\n    }\n  return N\n  }\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let N = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      N.push(lst [ i ])\n      }\n    }\n  for (let j = N.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (N [ k ].length > N [ k + 1 ].length) {\n        f = 1}\n      if (N [ k ].length == N [ k + 1 ].length) {\n        let r = N [ k ].length\n        for (let l = 0; l < r; l++) {\n          if (N [ k ] [ l ].charCodeAt() > N [ k + 1 ] [ l ].charCodeAt()) {\n            f = 1;\n           \n          }\n        }\n      }\n      if (f) {\n        N.splice(k, 1);\n      }\n    }\n  }\n  N.sort()\n  return N;\n}\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]))\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]))\n<|endoftext|>"}
