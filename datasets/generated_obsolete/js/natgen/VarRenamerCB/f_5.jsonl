{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var i = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    i+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i-=1;\n    if (i < 0)\n    return false;\n    }\n  return i == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var i = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n    i+=1;\n    else\n   \n    if (b == \">\")\n      i-=1;\n    if (i<0)\n      return false;\n  }\n  return true;\n}\n\n/*\n  Check if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\">\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  true\n  >>> correctBracketing(\"><<>\")\n  false\n  >>> correctBracketing(\"<<<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true\n  >>> correctBracketing(\"<><>\")\n  true"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(e) => {\n  return Math.max(... e);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement =(e) => {\n  return Math.max(... e);\n \n}\n\n/*\n  Given a list of n integers, return the sum of the elements in the list.\n  >>> sumList([1, 2, 3, 4, 5])\n  15\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  45\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  76\n  */\nconst sumList =(nums) => {\n  return nums.reduce((pre, curr) => (pre + curr), 0);\n}\n\n/*\n  Given two lists of n integers, return a list of the products of the elements in the lists.\n  >>> multiply([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1121, 1262]\n  */\nconst multiply =(nums1, nums2) => {\n  return nums1.reduce((pre, curr) => (pre + curr * nums2[curr]), [0]);\n}\n\n/*\n  Given two lists of n integers, return the list of the differences between the elements in the lists.\n  >>> subtract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> subtract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> subtract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  */\nconst subtract =(nums1, nums2) => {\n  return nums1.filter((curr, index) => (nums2[index] - curr) > 0);\n}\n\n/*\n  Given a list of n integers, return the list of the nth differences between the elements in the list.\n  >>> diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 2)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 2)\n  [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]\n  >>> diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], -1)\n  [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst diff =(nums, n) => {\n  return nums.slice(0, n).concat(nums.slice(n));\n}\n\n/*\n  Given a list of n integers, return the list of the largest n elements in the list.\n  >>> largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst largest =(nums) => {\n  return nums.slice(0, nums.length - 1);\n}\n\n/*\n  Given a list of n integers, return the list of the smallest n elements in the list.\n  >>> smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  */\nconst smallest =(nums) => {\n  return nums.slice(1);\n}\n\nexport { maxElement, sumList, multiply,"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let t = '' let p = [ ]\n  let k = 0\n  for (let i2 = 0; i2 < s.length; i2++) {\n    if (s [ i2 ] == ' ' || s [ i2 ] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    else {\n      k = 0;\n      t+=s [ i2 ]\n      }\n    }\n  if (t != '') {\n    p.push(t);\n    }\n  return p\n  }\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString =(s) => {\n  let t = '' let p = [ ]\n  let k = 0\n  for (let i2 = 0; i2 < s.length; i2++) {\n    if (s [ i2 ] =='' || s [ i2 ] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n        }\n     \n      else {\n        t += s [ i2 ];\n      }\n    }\n    else {\n      t += s [ i2 ];\n    }\n  }\n  p.push(t);\n  return p;\n};\n\nmodule.exports = wordsString;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(line, base) => {\n  var ret = \"\";\n  while (line > 0) {\n    ret =(line % base).toString() + ret;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    line = Math.floor(line / base);\n    }\n  return ret;\n  }\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase =(line, base) => {\n  var ret = \"\";\n  while (line > 0) {\n    ret =(line % base).toString() + ret;\n   \n    line = Math.floor(line/base);\n  }\n  return ret;\n}\n\n/*\n  >>> changeBase(10, 3)\n  '23'\n  >>> changeBase(8, 3)\n  '23'\n  >>> changeBase(7, 3)\n  '22'\n  >>> changeBase(10, 2)\n  '1010'\n  >>> changeBase(9, 2)\n  '1111'\n  >>> changeBase(10, 1)\n  '1010'\n  >>> changeBase(11, 1)\n  '1111'\n  >>> changeBase(12, 1)\n  '1212'\n  >>> changeBase(999, 1)\n  '999'\n  >>> changeBase(999, 3)\n  '22'\n  >>> changeBase(999, 9)\n  '1111'\n  >>> changeBase(999, 99)\n  '22'\n  >>> changeBase(999, 999)\n  '22'\n  >>> changeBase(999, 9999)\n  '22'\n  >>> changeBase(9999, 9999)\n  '22'\n  >>> changeBase(9999, 99999)\n  '22'\n  >>> changeBase(99999, 99999)\n  '22'\n  >>> changeBase(99999, 99999999)\n  '22'\n  >>> changeBase(99999, 999999999)\n  '22'\n  >>> changeBase(99999, 999999999999)\n  '22'\n  >>> changeBase(99999, 9999999999999999)\n  '22'\n  >>> changeBase(99999, 99999999999999999999)\n  '22'\n  >>> changeBase(99999, 999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 9999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 99999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 9999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 99999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 9999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 99999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 9999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 99999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 9999999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 99999999999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 999999999999999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 999999999999999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)\n  '22'\n  >>> changeBase(99999, 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999)\n"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(line) => {\n  return(new Set(line.toLowerCase())).size;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  }\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters =(line) => {\n  return(new Set(line.toLowerCase())).size;\n \n};\n\n// Given a string, find out how many distinct words does it consist of\nconst countDistinctWords =(line) => {\n  const words = line.split(' ');\n  return(new Set(words)).size;\n};\n\n// Given a string, find out how many characters does it consist of\nconst countCharacters =(line) => {\n  return(line.length);\n};\n\n// Given a string, find out how many words does it consist of\nconst countWords =(line) => {\n  return(line.split(' ').length);\n};\n\n// Given a string, find out how many lines does it consist of\nconst countLines =(line) => {\n  return(1);\n};\n\n// Given a string, find out how many tabs does it consist of\nconst countTabs =(line) => {\n  return(line.split('\\t').length);\n};\n\n// Given a string, find out how many spaces does it consist of\nconst countSpaces =(line) => {\n  return(line.split(' ').length);\n};\n\n// Given a string, find out how many paragraphs does it consist of\nconst countParagraphs =(line) => {\n  return(line.split('\\n').length);\n};\n\n// Given a string, find out how many non-whitespace characters does it consist of\nconst countNonWhitespace =(line) => {\n  return(line.replace(/\\s/g, '').length);\n};\n\n// Given a string, find out how many whitespace characters does it consist of\nconst countWhitespace =(line) => {\n  return(line.replace(/\\s/g, '').length);\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countPunctuation =(line) => {\n  return(line.split('').length);\n};\n\n// Given a string, find out how many non-punctuation marks does it consist of\nconst countNonPunctuation =(line) => {\n  return(line.split('').length);\n};\n\n// Given a string, find out how many words does it consist of\nconst countWordsInString =(line) => {\n  return(countWords(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countPunctuationInString =(line) => {\n  return(countPunctuation(line));\n};\n\n// Given a string, find out how many non-punctuation marks does it consist of\nconst countNonPunctuationInString =(line) => {\n  return(countNonPunctuation(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countNonWhitespaceInString =(line) => {\n  return(countNonWhitespace(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countWhitespaceInString =(line) => {\n  return(countWhitespace(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countParagraphsInString =(line) => {\n  return(countParagraphs(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countLinesInString =(line) => {\n  return(countLines(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countTabsInString =(line) => {\n  return(countTabs(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countSpacesInString =(line) => {\n  return(countSpaces(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countPunctuationInString =(line) => {\n  return(countPunctuation(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countNonPunctuationInString =(line) => {\n  return(countNonPunctuation(line));\n};\n\n// Given a string, find out how many non-punctuation marks does it consist of\nconst countWhitespaceInString =(line) => {\n  return(countWhitespace(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countNonWhitespaceInString =(line) => {\n  return(countNonWhitespace(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countWordsInString =(line) => {\n  return(countWords(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countWordsInString =(line) => {\n  return(countWords(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countWordsInString =(line) => {\n  return(countWords(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countWordsInString =(line) => {\n  return(countWords(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countWordsInString =(line) => {\n  return(countWords(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countWordsInString =(line) => {\n  return(countWords(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countWordsInString =(line) => {\n  return(countWords(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countWordsInString =(line) => {\n  return(countWords(line));\n};\n\n// Given a string, find out how many punctuation marks does it consist of\nconst countWordsInString =(line) => {\n  return(countWords(line));\n};\n\n// Given a string, find out"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let p = date.split( / - /)\n  if (p.length != 3) {\n    return false}\n  if (p [ 0 ] < 1 || p [ 0 ] > 12 || p [ 1 ] < 1) {\n    return false}\n  if (p [ 0 ] == 2 && p [ 1 ] > 29) {\n    return false}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if ((p [ 0 ] == 1 || p [ 0 ] == 3 || p [ 0 ] == 5 || p [ 0 ] == 7 || p [ 0 ] == 8 || p [ 0 ] == 10 || p [ 0 ] == 12) && p [ 1 ] > 31) {\n    return false}\n  if ((p [ 0 ] == 4 || p [ 0 ] == 6 || p [ 0 ] == 9 || p [ 0 ] == 11) && p [ 1 ] > 30) {\n    return false}\n  return true\n  }\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate =(date) => {\n  let p = date.split( / - /)\n  if (p.length!= 3) {\n    return false}\n  if (p [ 0 ] < 1 || p [ 0 ] > 12 || p [ 1 ] < 1) {\n    return false}\n  if (p [ 0 ] == 2 && p [ 1 ] > 29) {\n    return false}\n \n  if (p [ 0 ] == 4 || p [ 0 ] == 6 || p [ 0 ] == 9 || p [ 0 ] == 11) {\n    if (p [ 1 ] < 1 || p [ 1 ] > 30) {\n      return false}\n  }\n  \n  if (p [ 0 ] == 1 || p [ 0 ] == 3 || p [ 0 ] == 5 || p [ 0 ] == 7 || p [ 0 ] == 8 || p [ 0 ] == 10 || p [ 0 ] == 12) {\n    if (p [ 1 ] < 1 || p [ 1 ] > 31) {\n      return false}\n  }\n  \n  return true\n}\n\nconst test1 = \"03-11-2000\"\nconst test2 = \"15-01-2012\"\nconst test3 = \"04-0-2040\"\nconst test4 = \"06-04-2020\"\nconst test5 = \"06/04/2020\"\n\nconsole.log(validDate(test1))\nconsole.log(validDate(test2))\nconsole.log(validDate(test3))\nconsole.log(validDate(test4))\nconsole.log(validDate(test5))\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var count = 0;\n  for (const op of operations) {\n    count+=op;\n    if (count < 0) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      return true;\n      }\n    }\n  return false;\n  }\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero =(operations) => {\n  var count = 0;\n  for (const op of operations) {\n    count+=op;\n    if (count < 0) {\n     \n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const key of numbers) {\n    if (key in dict) {\n      dict [ key ]+=1;\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      dict [ key ] = 1;\n      }\n    }\n  return numbers.filter(x => dict [ x ] <= 1);\n  }\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates =(numbers) => {\n  var dict = new Object();\n  for (const key of numbers) {\n    if (key in dict) {\n      dict [ key ]+=1;\n      }\n    else {\n     \n    }\n  }\n  var result = [];\n  for (const key of Object.keys(dict)) {\n    result.push(key);\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(suffix) => {\n  if (suffix == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  while ( !isPalindrome(suffix.slice(beginning_of_suffix)))\n  beginning_of_suffix+=1;\n  return suffix + suffix.slice(0, beginning_of_suffix).split('').reverse().join('');\n  }\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome =(suffix) => {\n  if (suffix == '')\n  return '';\n  var beginning_of_suffix = 0;\n \n  var length_of_suffix = suffix.length;\n  \n  var i = 0;\n  while(isPalindrome(suffix.slice(beginning_of_suffix, beginning_of_suffix + length_of_suffix)) === false) {\n    i++;\n    beginning_of_suffix = beginning_of_suffix + length_of_suffix;\n    length_of_suffix = length_of_suffix - 1;\n  }\n  var ending_of_suffix = beginning_of_suffix + length_of_suffix;\n  var prefix = suffix.slice(0, ending_of_suffix);\n  suffix = suffix.slice(ending_of_suffix, suffix.length);\n  return prefix + makePalindrome(suffix);\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(i2) => {\n  var fact = [ ], i = 2;\n  while (i <= Math.sqrt(i2) + 1) {\n    if (i2 % i == 0) {\n      fact.push(i);\n      i2 = i2 / i;\n      }\n    else {\n      i+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  \n  if (i2 > 1)\n  fact.push(i2);\n  return fact;\n  }\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize =(i2) => {\n  var fact = [ ], i = 2;\n  while (i <= Math.sqrt(i2) + 1) {\n    if (i2 % i == 0) {\n      fact.push(i);\n      i2 = i2 / i;\n      }\n    else {\n      i+=1;\n     \n    }\n    }\n  return fact;\n  }\n\n/* Given an integer, return all the permutations of that integer.\n  >>> permute([2, 3, 4])\n  [2, 3, 4, 2, 3, 4, 2, 4, 3, 2, 4]\n  >>> permute([2, 4, 5, 3])\n  [2, 2, 3, 3, 4, 4, 5, 5]\n  */\nconst permute = (i) => {\n  var perm = [ ], i2 = i.sort(), res = \"\", i2len = i2.length;\n  for (var j = 0; j < i2len; j++) {\n    res = \"\" + i2[j] + res;\n  }\n  for (var i = 0; i < res.length; i++) {\n    perm.push(res.charAt(i));\n  }\n  return perm;\n}\n\n/* Given two integers, return all the combinations of those integers.\n  >>> combine([2, 3, 4], [2, 3, 4])\n  [[2, 2, 2], [2, 3, 2], [2, 3, 3], [2, 4, 2], [2, 4, 3], [3, 2, 2], [3, 2, 3], [3, 3, 3], [4, 2, 2], [4, 2, 3], [4, 3, 2], [4, 3, 3]]\n  >>> combine([2, 3, 4], [4, 5, 3])\n  [[2, 2, 2], [2, 3, 2], [2, 3, 3], [2, 4, 2], [2, 4, 3], [3, 2, 2], [3, 2, 3], [3, 3, 3], [4, 2, 2], [4, 2, 3], [4, 3, 2], [4, 3, 3]]\n  */\nconst combine = (a, b) => {\n  var res = [ ], c = [ ], i, j, i2len = a.length, j2len = b.length, a2len = a.sort().length, b2len = b.sort().length;\n  for (i = 0; i < a2len; i++) {\n    c.push(a[i]);\n  }\n  for (j = 0; j < b2len; j++) {\n    c.push(b[j]);\n  }\n  for (i = 0; i < c.length; i++) {\n    for (j = 0; j < c.length; j++) {\n      res.push([c[i], c[j]]);\n    }\n  }\n  return res;\n}\n\n/* Given two arrays, return all the combinations of those arrays.\n  >>> combineArrays([1, 2, 3], [2, 3, 4])\n  [[1, 2, 2], [1, 2, 3], [1, 2, 4], [1, 3, 2], [1, 3, 3], [1, 3, 4], [1, 4, 2], [1, 4, 3], [2, 2, 2], [2, 2, 3], [2, 2, 4], [2, 3, 2], [2, 3, 3], [2, 3, 4], [2, 4, 2], [2, 4, 3], [3, 2, 2], [3, 2, 3], [3, 2, 4], [3, 3, 2], [3, 3, 3], [3, 3, 4], [3, 4, 2], [3, 4, 3], [4, 2, 2], [4, 2, 3], [4, 2, 4], [4, 3, 2], [4, 3, 3], [4, 3, 4], [4, 4, 2], [4, 4, 3]]\n  >>> combineArrays([1, 2, 3], [4, 5, 3])\n  [[1, 2, 2], [1, 2, 3], [1, 2, 4], [1, 3, 2], [1, 3, 3], [1, 3, 4], [1, 4, 2], [1, 4, 3], [2, 2, 2], [2, 2, 3], [2, 2, 4], [2, 3, 2], [2, 3, 3], [2, 3, 4], [2, 4, 2], [2, 4, 3], [3, 2, 2], [3, 2, 3], [3, 2, 4], [3, 3, 2], [3, 3, 3], [3, 3, 4], [3, 4, 2], [3, 4, 3], [4, 2, 2], [4, 2, 3], [4, 2, 4], [4, 3, 2], [4, 3, 3], [4, 3, 4], [4, 4, 2], [4, 4, 3]]\n  */\nconst combineArrays = (a, b) => {\n  var res = [ ], c = [ ], i, j, i2len = a.length, j2len = b.length, a2len = a.sort().length, b2len = b.sort().length;\n  for (i = 0; i < a2len; i++) {\n    c.push(a[i]);\n  }\n  for (j = 0; j < b2len; j++) {\n    c.push(b[j]);\n  }\n  for (i = 0; i < c.length; i++) {\n    for (j = 0; j < c.length; j++) {\n      res.push([c[i], c[j]]);\n    }\n  }\n  return res;\n}\n\n// test cases\nconsole.log(factorize(8));\nconsole.log(permute(["}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(t2) => {\n  let t = 0\n  while (t2 > 0) {\n    t+=t2 % 10\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    t2 =(t2 - t2 % 10) / 10\n    }\n  return t.toString(2)\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve =(t2) => {\n  let t = 0\n  while (t2 > 0) {\n    t+=t2 % 10\n   \n    t2 = t2/10\n  }\n  return t\n}\n\nexport { solve }<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(pl) => {\n  pl.sort((a, b) => a - b);\n  var len = pl.length;\n  if (pl.length % 2 == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return pl [ Math.floor(len / 2) ];\n  else\n  return(pl [ len / 2 - 1 ] + pl [ len / 2 ]) / 2.0;\n  }\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median =(pl) => {\n  pl.sort((a, b) => a - b);\n  var len = pl.length;\n  if (pl.length % 2 == 1)\n \n  {\n    return pl[len / 2];\n  }\n  else {\n    var middle = pl.length / 2;\n    return (pl[middle - 1] + pl[middle]) / 2;\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var i2 = 1;\n  for (let i = 0; i < n; i++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  i2 =(2 * i2) % p;\n  return i2;\n  }\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp =(n, p) => {\n  var i2 = 1;\n  for (let i = 0; i < n; i++)\n \n  i2 = (i2 * 2) % p;\n  return i2;\n}\n\n/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp2 =(n, p) => {\n  var i = 1;\n  for (let i = 0; i < n; i++)\n \n  i = (i * 2) % p;\n  return i;\n}\n\n/*Return n-th root of a number modulo p.\n  >>> modroot(3, 5)\n  3\n  >>> modroot(1101, 101)\n  2\n  >>> modroot(0, 101)\n  1\n  >>> modroot(3, 11)\n  8\n  >>> modroot(100, 101)\n  1\n  */\nconst modroot =(n, p) => {\n  var i = 1;\n  var r = 1;\n  var b = (p - 1) / 2;\n  for (let i = 0; i < b; i++)\n \n  r = (r * 2) % p;\n  return r;\n}\n\n/*Return n-th root of a number modulo p.\n  >>> modroot(3, 5)\n  3\n  >>> modroot(1101, 101)\n  2\n  >>> modroot(0, 101)\n  1\n  >>> modroot(3, 11)\n  8\n  >>> modroot(100, 101)\n  1\n  */\nconst modroot2 =(n, p) => {\n  var i = 1;\n  var r = 1;\n  var b = (p - 1) / 2;\n  var i2 = 1;\n  for (let i = 0; i < b; i++)\n \n  r = (r * 2) % p;\n  return r;\n}\n\n/*\n  >>> modroot2(3, 5)\n  3\n  >>> modroot2(1101, 101)\n  2\n  >>> modroot2(0, 101)\n  1\n  >>> modroot2(3, 11)\n  8\n  >>> modroot2(100, 101)\n  1\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(e2) => {\n      let o = 0\n      let e = 0\n      if (e2 < 0) {\n            e2 = - e2}\n      while (e2 > 0) {\n            if (e2 % 2 == 0) {\n                  e++}\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            else {\n                  o++}\n            e2 =(e2 - e2 % 10) / 10\n            }\n      return(e, o)\n      }\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount =(e2) => {\n      let o = 0\n      let e = 0\n      if (e2 < 0) {\n            e2 = - e2}\n      while (e2 > 0) {\n            if (e2 % 2 == 0) {\n                  e++}\n           \n            else {\n                  o++}\n            e2 = e2 / 2}\n      return (e, o)\n}\n\n// Your evenOddCount object will be instantiated and called as such:\n// var obj = Object.create(evenOddCount);\n// obj.apply(e2);\n// see below for invocations\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var start = - 1.0, end = 1.0;\n  while (poly(xs, start) * poly(xs, end) > 0) {\n    start *= 2.0;\n    end *= 2.0;\n    }\n  while (end - start > 1e-10) {\n    let center =(start + end) / 2.0;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, start) > 0)\n    start = center;\n    else\n    end = center;\n    }\n  return start;\n  }\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero =(xs) => {\n  var start = - 1.0, end = 1.0;\n  while (poly(xs, start) * poly(xs, end) > 0) {\n    start *= 2.0;\n    end *= 2.0;\n    }\n  while (end - start > 1e-10) {\n    let center =(start + end) / 2.0;\n   \n    if (poly(xs, center) == 0) {\n      return center;\n    } else if (poly(xs, center) < 0) {\n      start = center;\n    } else {\n      end = center;\n    }\n  }\n  return start;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst eval = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Find the largest non zero coefficient.\nconst findMax =(xs) => {\n  return Math.max.apply(Math, xs);\n}\n\n// Find the smallest non zero coefficient.\nconst findMin =(xs) => {\n  return Math.min.apply(Math, xs);\n}\n\nconst findMinAndMax =(xs) => {\n  return [findMin(xs), findMax(xs)];\n}\n\n// find smallest x such that xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n = x\nconst findX =(xs, x) => {\n  var start = - 1.0, end = 1.0;\n  while (eval(xs, start) * eval(xs, end) > 0) {\n    start *= 2.0;\n    end *= 2.0;\n    }\n  while (end - start > 1e-10) {\n    let center =(start + end) / 2.0;\n   \n    if (eval(xs, center) == x) {\n      return center;\n    } else if (eval(xs, center) < x) {\n      start = center;\n    } else {\n      end = center;\n    }\n  }\n  return start;\n}\n\n// Find x such that eval(xs, x) = x\nconst findXForEval =(xs, x) => {\n  var start = - 1.0, end = 1.0;\n  while (eval(xs, start) * eval(xs, end) > 0) {\n    start *= 2.0;\n    end *= 2.0;\n    }\n  while (end - start > 1e-10) {\n    let center =(start + end) / 2.0;\n   \n    if (eval(xs, center) == x) {\n      return center;\n    } else if (eval(xs, center) < x) {\n      start = center;\n    } else {\n      end = center;\n    }\n  }\n  return start;\n}\n\n// Find x such that xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n = x\nconst findXForPoly =(xs, x) => {\n  var start = - 1.0, end = 1.0;\n  while (poly(xs, start) * poly(xs, end) > 0) {\n    start *= 2.0;\n    end *= 2.0;\n    }\n  while (end - start > 1e-10) {\n    let center =(start + end) / 2.0;\n   \n    if (poly(xs, center) == x) {\n      return center;\n    } else if (poly(xs, center) < x) {\n      start = center;\n    } else {\n      end = center;\n    }\n  }\n  return start;\n}\n\n// Find x such that xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n = x\nconst findXForPoly2 =(xs, x) => {\n  var start = - 1.0, end = 1.0;\n  while (poly(xs, start) * poly(xs, end) > 0) {\n    start *= 2.0;\n    end *= 2.0;\n    }\n  while (end - start > 1e-10) {\n    let center =(start + end) / 2.0;\n   \n    if (poly(xs, center) == x) {\n      return center;\n    } else if (poly(xs, center) < x) {\n      start = center;\n    } else {\n      end = center;\n    }\n  }\n  return start;\n}\n\nmodule.exports = {\n  findMax,\n  findMin,\n  findMaxAndMin,\n  findX,\n  findXForEval,\n  findXForPoly,\n  findXForPoly2,\n  eval,\n  poly\n}\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let i2 = 0; i2 < string.length; i2++) {\n    result.push(string.slice(0, i2 + 1));\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return result;\n  }\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes =(string) => {\n  var result = [ ];\n  for (let i2 = 0; i2 < string.length; i2++) {\n    result.push(string.slice(0, i2 + 1));\n   \n    var is_first_word = i2 === 0;\n    for (let i = i2 + 1; i < string.length; i++) {\n      if (is_first_word) {\n        result.push(string.slice(i, i2 + 1));\n      }\n      else {\n        var j = i2 + 1;\n        for (; j < string.length; j++) {\n          if (string[j]!== string[i2]) {\n            break;\n          }\n        }\n        if (j === string.length) {\n          result.push(string.slice(i, i2 + 1));\n        }\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  findCommonPrefixes,\n  commonPrefixes,\n  allPrefixes\n};<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let pp = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < pp.length; i++) {\n      if (t == pp [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      pp.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let j = 0; j < pp.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < pp.length; k++) {\n      if (pp [ k ] < pp [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = pp [ j ]\n      pp [ j ] = pp [ ind ]\n      pp [ ind ] = tmp\n      }\n    }\n  return pp\n  }\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz =(n) => {\n  let pp = [ ]\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < pp.length; i++) {\n      if (t == pp [ i ]) {\n        u = 1\n        break;\n        }\n      }\n    if (u == 1) {\n      break}\n    if (t % 2 == 1) {\n      pp.push(t); t = 3 * t + 1}\n    else {\n      t = t / 2}\n    }\n \n  }\n  return pp\n}\n\nconsole.log(getOddCollatz(5))<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(j) => {\n  return Math.pow(j, 2);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision =(j) => {\n  return Math.pow(j, 2);\n \n}\n\n/*\n  Given the starting position of the left car (the starting position of the\n  right car is (x,y)) and the speed of the car, output the next position\n  of the car in the trajectory.\n  */\nconst carRaceSteering = (x, y, carSpeed) => {\n  return carSpeed * (x + y);\n}\n\nconst carRaceTime = (x, y, carSpeed) => {\n  return carSpeed * Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\n\nconst carRaceDistance = (x, y, carSpeed) => {\n  return carSpeed * Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\n\nconst carRaceLength = (x, y, carSpeed) => {\n  return carSpeed * (x + y);\n}\n\nconst carRaceLanes = (carSpeed) => {\n  return carSpeed;\n}\n\nconst carRaceCollisions = (x, y, carSpeed) => {\n  return x + y;\n}\n\nconst carRaceTimeForSpeed = (speed, x, y) => {\n  return speed * Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\n\nconst carRaceDistanceForSpeed = (speed, x, y) => {\n  return speed * Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n}\n\nconst carRaceLengthForSpeed = (speed, x, y) => {\n  return speed * (x + y);\n}\n\nconst carRaceLanesForSpeed = (speed) => {\n  return speed;\n}\n\nconst carRaceCollisionsForSpeed = (speed) => {\n  return speed;\n}\n\nconst carRaceTimeForPosition = (x, y, carSpeed) => {\n  return carSpeed * (x + y);\n}\n\nconst carRaceDistanceForPosition = (x, y, carSpeed) => {\n  return carSpeed * (x + y);\n}\n\nconst carRaceLengthForPosition = (x, y, carSpeed) => {\n  return carSpeed * (x + y);\n}\n\nconst carRaceLanesForPosition = (x, y, carSpeed) => {\n  return carSpeed;\n}\n\nconst carRaceCollisionsForPosition = (x, y, carSpeed) => {\n  return x + y;\n}\n\nconst carRaceTimeForPosition2 = (x, y, carSpeed) => {\n  return carSpeed * (x + y);\n}\n\nconst carRaceDistanceForPosition2 = (x, y, carSpeed) => {\n  return carSpeed * (x + y);\n}\n\nconst carRaceLengthForPosition2 = (x, y, carSpeed) => {\n  return carSpeed * (x + y);\n}\n\nconst carRaceLanesForPosition2 = (x, y, carSpeed) => {\n  return carSpeed;\n}\n\nconst carRaceCollisionsForPosition2 = (x, y, carSpeed) => {\n  return x + y;\n}\n\nconst carRaceTimeForSpeed2 = (speed, x, y) => {\n  return speed * (x + y);\n}\n\nconst carRaceDistanceForSpeed2 = (speed, x, y) => {\n  return speed * (x + y);\n}\n\nconst carRaceLengthForSpeed2 = (speed, x, y) => {\n  return speed * (x + y);\n}\n\nconst carRaceLanesForSpeed2 = (speed) => {\n  return speed;\n}\n\nconst carRaceCollisionsForSpeed2 = (speed) => {\n  return speed;\n}\n\nconst carRaceTimeForPosition3 = (x, y, carSpeed) => {\n  return carSpeed * (x + y);\n}\n\nconst carRaceDistanceForPosition3 = (x, y, carSpeed) => {\n  return carSpeed * (x + y);\n}\n\nconst carRaceLengthForPosition3 = (x, y, carSpeed) => {\n  return carSpeed * (x + y);\n}\n\nconst carRaceLanesForPosition3 = (x, y, carSpeed) => {\n  return carSpeed;\n}\n\nconst carRaceCollisionsForPosition3 = (x, y, carSpeed) => {\n  return x + y;\n}\n\nconst carRaceTimeForSpeed3 = (speed, x, y) => {\n  return speed * (x + y);\n}\n\nconst carRaceDistanceForSpeed3 = (speed, x, y) => {\n  return speed * (x + y);\n}\n\nconst carRaceLengthForSpeed3 = (speed, x, y) => {\n  return speed * (x + y);\n}\n\nconst carRaceLanesForSpeed3 = (speed) => {\n  return speed;\n}\n\nconst carRaceCollisionsForSpeed3 = (speed) => {\n  return speed;\n}\n\nconst carRaceTimeForPosition4 = (x, y, carSpeed) => {\n  return carSpeed * (x + y);\n}\n\nconst carRaceDistanceForPosition4 = (x, y, carSpeed) => {\n  return carSpeed * (x + y);\n}\n\nconst carRaceLengthForPosition4 = (x, y, carSpeed) => {\n  return carSpeed * (x + y);\n}\n\nconst carRaceLanesForPosition4 = (x, y, carSpeed) => {\n  return carSpeed;\n}\n\nconst carRaceCollisionsForPosition4 = (x, y, carSpeed) => {\n  return x + y;\n}\n\nconst carRaceTimeForSpeed4 = (speed, x, y) => {\n  return speed * (x + y);"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let i2 = 0; i2 < lst.length; i2++) {\n        for (let j = lst [ i2 ].length - 1; j >= 0; j--) {\n            if (lst [ i2 ] [ j ] == x) {\n                t.push((i2, j))\n               \n", "canonical_solution": "# print('@@this is the line to split##')\n                }\n            }\n        }\n    return t\n    }\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow =(lst, x) => {\n    let t = [ ]\n    for (let i2 = 0; i2 < lst.length; i2++) {\n        for (let j = lst [ i2 ].length - 1; j >= 0; j--) {\n            if (lst [ i2 ] [ j ] == x) {\n                t.push((i2, j))\n               \n            }\n        }\n    }\n    return t.sort((a,b) => {\n        if (a[0] > b[0]) return -1\n        if (a[0] < b[0]) return 1\n        if (a[1] > b[1]) return -1\n        if (a[1] < b[1]) return 1\n        return 0\n    })\n}\n\nconst getRow2 =(lst, x) => {\n    let t = [ ]\n    for (let i2 = 0; i2 < lst.length; i2++) {\n        for (let j = lst [ i2 ].length - 1; j >= 0; j--) {\n            if (lst [ i2 ] [ j ] == x) {\n                t.push((i2, j))\n            }\n        }\n    }\n    return t.sort((a,b) => {\n        if (a[1] > b[1]) return -1\n        if (a[1] < b[1]) return 1\n        if (a[0] > b[0]) return -1\n        if (a[0] < b[0]) return 1\n        return 0\n    })\n}\n\nconst getRow3 =(lst, x) => {\n    let t = [ ]\n    for (let i2 = 0; i2 < lst.length; i2++) {\n        for (let j = lst [ i2 ].length - 1; j >= 0; j--) {\n            if (lst [ i2 ] [ j ] == x) {\n                t.push((i2, j))\n            }\n        }\n    }\n    return t.sort((a,b) => {\n        if (a[1] < b[1]) return -1\n        if (a[1] > b[1]) return 1\n        if (a[0] < b[0]) return -1\n        if (a[0] > b[0]) return 1\n        return 0\n    })\n}\n\nconsole.log(getRow([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 3))\nconsole.log(getRow([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 3))\nconsole.log(getRow([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 5))\nconsole.log(getRow([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 2))\nconsole.log(getRow([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 5))\nconsole.log(getRow([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let m = [ ]\n  for (let i = 0; i < x.length; i++) {\n    let h = x [ i ]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n        }\n      h =(h - r) / 10\n      }\n    if (boo) {\n      m.push(x [ i ])\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  for (let j = 0; j < m.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < m.length; k++) {\n      if (m [ k ] < m [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = m [ j ]\n      m [ j ] = m [ ind ]\n      m [ ind ] = tmp\n      }\n    }\n  return m\n  }\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits =(x) => {\n  let m = [ ]\n  for (let i = 0; i < x.length; i++) {\n    let h = x [ i ]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n        }\n      h =(h - r) / 10\n      }\n    if (boo) {\n      m.push(x [ i ])\n      }\n   \n    }\n  return m\n}\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]))\nconsole.log(uniqueDigits([152, 323, 1422, 10]))<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let n2 =(n + m) / 2\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (n2 % 1 != 0) {\n    n2 =(n + m + 1) / 2}\n  return '0b' + n2.toString(2)\n  }\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg =(n, m) => {\n  if (n > m) {\n    return - 1}\n  let n2 =(n + m) / 2\n \n  const intToBin = (num, str) => {\n    let binary = \"\"\n    let remainder = num\n    while (remainder > 0) {\n      let remainderMod = remainder % 2\n      binary += remainderMod? \"1\" : \"0\"\n      remainder = remainder / 2\n    }\n    return str + binary\n  }\n  return intToBin(n2, \"\") + intToBin(n2, \"0\") + intToBin(m, \"\") + intToBin(m, \"0\")\n}\n\nconst test =(roundedAvg(1, 5), roundedAvg(7, 5), roundedAvg(10, 20), roundedAvg(20, 33))\n\nconsole.log(test)\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let g2 = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in g2) {\n      g2 [ t [ m ] ]++\n      }\n    else {\n      g2 [ t [ m ] ] = 1\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  s = Object.keys(g2).sort(function(a, b) {\n    return - g2 [ a ] + g2 [ b ];}\n  );\n  if (s.length == 0) {\n    return {\n      }\n    }\n  let g = g2 [ s [ 0 ] ]\n  let l = {\n    }\n  for (let ss = 0; ss < s.length; ss++) {\n    if (g2 [ s [ ss ] ] == g) {\n      l [ s [ ss ] ] = g2 [ s [ ss ] ]\n      }\n    }\n  return l\n  }\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram =(test) => {\n  let g2 = {\n    }\n  let t = test.split( / s /)\n  if (test == '') {\n    t = [ ]}\n  for (m in t) {\n    if (t [ m ] in g2) {\n      g2 [ t [ m ] ]++\n      }\n    else {\n      g2 [ t [ m ] ] = 1\n      }\n    }\n \n  return g2\n}\n\n/* Given a string representing a space separated lowercase letters, return the number of words of length 2.\n */\nconst wordsOfLength2 = (test) => {\n  let words = 0\n  let t = test.split( /s/ )\n  for (let i = 0; i < t.length; i++) {\n    for (let j = 0; j < t.length; j++) {\n      if (i!== j) {\n        let p = t [i] + t [j]\n        if (p in g2) {\n          words++\n          }\n        }\n      }\n    }\n  return words\n}\n\n/* Given a string, return the number of lowercase letters.\n */\nconst letters = (test) => {\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test [ i ] in g2) {\n      count++\n      }\n    }\n  return count\n}\n\n/* Given a string, return the number of uppercase letters.\n */\nconst uppercaseLetters = (test) => {\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test [ i ] in g2) {\n      count++\n      }\n    }\n  return count\n}\n\n/* Given a string, return the number of spaces.\n */\nconst spaces = (test) => {\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test [ i ] ==='') {\n      count++\n      }\n    }\n  return count\n}\n\n/* Given a string, return the number of words.\n */\nconst words = (test) => {\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test [ i ] ==='') {\n      count++\n      }\n    }\n  return count\n}\n\n/* Given a string, return the number of non-empty words.\n */\nconst nonEmptyWords = (test) => {\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test [ i ]!=='') {\n      count++\n      }\n    }\n  return count\n}\n\n/* Given a string, return the number of words of length 2.\n */\nconst wordsOfLength2 = (test) => {\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test [ i ] ==='') {\n      count++\n      }\n    }\n  return count\n}\n\n/* Given a string, return the number of lowercase letters.\n */\nconst lowercaseLetters = (test) => {\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test [ i ] in g2) {\n      count++\n      }\n    }\n  return count\n}\n\n/* Given a string, return the number of uppercase letters.\n */\nconst uppercaseLetters = (test) => {\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test [ i ] in g2) {\n      count++\n      }\n    }\n  return count\n}\n\n/* Given a string, return the number of spaces.\n */\nconst spaces = (test) => {\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test [ i ] ==='') {\n      count++\n      }\n    }\n  return count\n}\n\n/* Given a string, return the number of words.\n */\nconst words = (test) => {\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test [ i ] ==='') {\n      count++\n      }\n    }\n  return count\n}\n\n/* Given a string, return the number of non-empty words.\n */\nconst nonEmptyWords = (test) => {\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test [ i ]!=='') {\n      count++\n      }\n    }\n  return count\n}\n\n/* Given a string, return the number of words of length 2.\n */\nconst wordsOfLength2 = (test) => {\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test [ i ] ==='') {\n      count++\n      }\n    }\n  return count\n}\n\n/* Given a string, return the number of lowercase letters.\n */\nconst lowercaseLetters = (test) => {\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test [ i ] in g2) {\n      count++\n      }\n    }\n  return count\n}\n\n/* Given a string, return the number of uppercase letters.\n */\nconst uppercaseLetters = (test) => {\n  let count = 0\n  for (let i = 0; i < test.length; i++) {\n    if (test [ i ] in g2) {\n"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = ''\nfor (let i2 = 0; i2 < s.length; i2++) {\n    let p = s [ i2 ].charCodeAt() + 4\n    if (p > 122) {\n      p-=26}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    t+=String.fromCharCode(p)\n    }\n  return t\n  }\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt =(s) => {\n  let t = ''\nfor (let i2 = 0; i2 < s.length; i2++) {\n    let p = s [ i2 ].charCodeAt() + 4\n    if (p > 122) {\n      p-=26}\n   \n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nconst decrypt =(s) => {\n  let t = ''\nfor (let i2 = 0; i2 < s.length; i2++) {\n    let p = s [ i2 ].charCodeAt() - 4\n    if (p < 0) {\n      p+=26}\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nlet encrypted = encrypt('abcdefghijklmnopqrstuvwxyz')\nlet decrypted = decrypt(encrypted)\nconsole.log(decrypted)<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let code = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((code >= 65 && code <= 90) ||(code >= 97 && code <= 122)) {\n      return true}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false\n    }\n  if (txt [ len - 2 ] == ' ' &&((code >= 65 && code <= 90) ||(code >= 97 && code <= 122))) {\n    return true}\n  return false\n  }\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let code = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((code >= 65 && code <= 90) ||(code >= 97 && code <= 122)) {\n      return true}\n   \n  }\n  else {\n    let code = txt [ len - 2 ].charCodeAt()\n    if ((code >= 65 && code <= 90) ||(code >= 97 && code <= 122)) {\n      return true}\n  }\n  return false\n}\n\nconst checkIfLastCharIsALetter =(txt) => {\n  let len = txt.length\n  if (len == 0) {\n    return false}\n  let code = txt [ len - 1 ].charCodeAt()\n  if (len == 1) {\n    if ((code >= 65 && code <= 90) ||(code >= 97 && code <= 122)) {\n      return true}\n   \n  }\n  else {\n    let code = txt [ len - 2 ].charCodeAt()\n    if ((code >= 65 && code <= 90) ||(code >= 97 && code <= 122)) {\n      return true}\n  }\n  return false\n}\n\n// A function that checks if a string contains only numbers.\nconst checkIfNumber = (txt) => {\n  let len = txt.length\n  for (let i = 0; i < len; i++) {\n    if (!(txt [i] >= 48 && txt [i] <= 57)) {\n      return false}\n  }\n  return true\n}\n\n// A function that checks if a string contains only alphabetic characters.\nconst checkIfAlpha = (txt) => {\n  let len = txt.length\n  for (let i = 0; i < len; i++) {\n    if (!(txt [i] >= 65 && txt [i] <= 90) &&!(txt [i] >= 97 && txt [i] <= 122)) {\n      return false}\n  }\n  return true\n}\n\n// A function that checks if a string contains only numbers.\nconst checkIfAlphaNumeric = (txt) => {\n  let len = txt.length\n  for (let i = 0; i < len; i++) {\n    if (!(txt [i] >= 48 && txt [i] <= 57) &&!(txt [i] >= 65 && txt [i] <= 90) &&!(txt [i] >= 97 && txt [i] <= 122)) {\n      return false}\n  }\n  return true\n}\n\n// A function that checks if a string contains only letters.\nconst checkIfAlphaOnly = (txt) => {\n  let len = txt.length\n  for (let i = 0; i < len; i++) {\n    if (!(txt [i] >= 65 && txt [i] <= 90) &&!(txt [i] >= 97 && txt [i] <= 122)) {\n      return false}\n  }\n  return true\n}\n\n// A function that checks if a string contains only alphabetic characters.\nconst checkIfNumeric = (txt) => {\n  let len = txt.length\n  for (let i = 0; i < len; i++) {\n    if (!(txt [i] >= 48 && txt [i] <= 57)) {\n      return false}\n  }\n  return true\n}\n\n// A function that checks if a string contains only alphabetic characters.\nconst checkIfNumeric = (txt) => {\n  let len = txt.length\n  for (let i = 0; i < len; i++) {\n    if (!(txt [i] >= 48 && txt [i] <= 57)) {\n      return false}\n  }\n  return true\n}\n\n// A function that checks if a string contains only alphabetic characters.\nconst checkIfNumeric = (txt) => {\n  let len = txt.length\n  for (let i = 0; i < len; i++) {\n    if (!(txt [i] >= 48 && txt [i] <= 57)) {\n      return false}\n  }\n  return true\n}\n\n// A function that checks if a string contains only alphabetic characters.\nconst checkIfNumeric = (txt) => {\n  let len = txt.length\n  for (let i = 0; i < len; i++) {\n    if (!(txt [i] >= 48 && txt [i] <= 57)) {\n      return false}\n  }\n  return true\n}\n\n// A function that checks if a string contains only alphabetic characters.\nconst checkIfNumeric = (txt) => {\n  let len = txt.length\n  for (let i = 0; i < len; i++) {\n    if (!(txt [i] >= 48 && txt [i] <= 57)) {\n      return false}\n  }\n  return true\n}\n\n// A function that checks if a string contains only alphabetic characters.\nconst checkIfNumeric = (txt) => {\n  let len = txt.length\n  for (let i = 0; i < len; i++) {\n    if (!(txt [i] >= 48 && txt [i] <= 57)) {\n      return false}\n  }\n  return true\n}\n\n// A function that checks if a string contains only alphabetic characters.\nconst checkIfNumeric = (txt) => {\n  let len = txt.length\n  for (let i = 0; i < len; i++) {\n    if (!(txt [i] >= 48 && txt [i] <= 57)) {\n      return false}\n  }\n  return true\n}\n\n// A function that checks if a string contains only alphabetic characters.\nconst checkIfNumeric = (txt) => {\n  let len = txt.length\n  for (let i = 0; i < len; i++) {\n    if (!("}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  for (let i2 = word.length - 2; i2 > 0; i2--) {\n    if (\n     !(word [ i2 ] != 'a' && word [ i2 ] != 'e' && word [ i2 ] != 'i' && word [ i2 ] != 'o' && word [ i2 ] != 'u' && word [ i2 ] != 'A' &&\n    word [ i2 ] != 'U' && word [ i2 ] != 'O' && word [ i2 ] != 'I' && word [ i2 ] != 'E')\n     &&\n    (word [ i2 + 1 ] != 'a' && word [ i2 + 1 ] != 'e' && word [ i2 + 1 ] != 'i' && word [ i2 + 1 ] != 'o' && word [ i2 + 1 ] != 'u' && word [ i2 + 1 ] != 'A' &&\n    word [ i2 + 1 ] != 'U' && word [ i2 + 1 ] != 'O' && word [ i2 + 1 ] != 'I' && word [ i2 + 1 ] != 'E')\n     &&\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    (word [ i2 - 1 ] != 'a' && word [ i2 - 1 ] != 'e' && word [ i2 - 1 ] != 'i' && word [ i2 - 1 ] != 'o' && word [ i2 - 1 ] != 'u' && word [ i2 - 1 ] != 'A' &&\n    word [ i2 - 1 ] != 'U' && word [ i2 - 1 ] != 'O' && word [ i2 - 1 ] != 'I' && word [ i2 - 1 ] != 'E')\n    ) {\n      return word [ i2 ]\n      }\n    }\n  return ''}\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel =(word) => {\n  for (let i2 = word.length - 2; i2 > 0; i2--) {\n    if (\n    !(word [ i2 ]!= 'a' && word [ i2 ]!= 'e' && word [ i2 ]!= 'i' && word [ i2 ]!= 'o' && word [ i2 ]!= 'u' && word [ i2 ]!= 'A' &&\n    word [ i2 ]!= 'U' && word [ i2 ]!= 'O' && word [ i2 ]!= 'I' && word [ i2 ]!= 'E')\n     &&\n    (word [ i2 + 1 ]!= 'a' && word [ i2 + 1 ]!= 'e' && word [ i2 + 1 ]!= 'i' && word [ i2 + 1 ]!= 'o' && word [ i2 + 1 ]!= 'u' && word [ i2 + 1 ]!= 'A' &&\n    word [ i2 + 1 ]!= 'U' && word [ i2 + 1 ]!= 'O' && word [ i2 + 1 ]!= 'I' && word [ i2 + 1 ]!= 'E')\n     &&\n   \n    (word [ i2 + 1 ]!= 'y' && word [ i2 + 1 ]!= 'Y' && word [ i2 + 1 ]!= 'z' && word [ i2 + 1 ]!= 'Z')) {\n      return word [ i2 + 1 ];\n    }\n  }\n  return \"\";\n}\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  for (let p2 = 0; p2 < s.length; p2+=2) {\n    if (s [ p2 ] == 'A' || s [ p2 ] == 'E' || s [ p2 ] == 'I' || s [ p2 ] == 'O' || s [ p2 ] == 'U') {\n      p++}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return p\n  }\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper =(s) => {\n  let p = 0\n  for (let p2 = 0; p2 < s.length; p2+=2) {\n    if (s [ p2 ] == 'A' || s [ p2 ] == 'E' || s [ p2 ] == 'I' || s [ p2 ] == 'O' || s [ p2 ] == 'U') {\n      p++}\n   \n  }\n  return p\n}\n\n/*\n  Given a string s, return the number of lowercase letters in the string.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 3\n  countLower('dBBE') returns 1\n  */\nconst countLower =(s) => {\n  let p = 0\n  for (let p2 = 0; p2 < s.length; p2++) {\n    if (s [ p2 ] == 'a' || s [ p2 ] == 'e' || s [ p2 ] == 'i' || s [ p2 ] == 'o' || s [ p2 ] == 'u') {\n      p++}\n   \n  }\n  return p\n}\n\n/*\n  Given a string s, return the number of uppercase vowels in the string.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countVowel =(s) => {\n  let p = 0\n  for (let p2 = 0; p2 < s.length; p2++) {\n    if (s [ p2 ] == 'A' || s [ p2 ] == 'E' || s [ p2 ] == 'I' || s [ p2 ] == 'O' || s [ p2 ] == 'U') {\n      p++}\n   \n  }\n  return p\n}\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 3\n  countConsonant('dBBE') returns 1\n  */\nconst countConsonant =(s) => {\n  let p = 0\n  for (let p2 = 0; p2 < s.length; p2++) {\n    if (s [ p2 ]!= 'a' && s [ p2 ]!= 'e' && s [ p2 ]!= 'i' && s [ p2 ]!= 'o' && s [ p2 ]!= 'u' && s [ p2 ]!= 'A' && s [ p2 ]!= 'E' && s [ p2 ]!= 'I' && s [ p2 ]!= 'O' && s [ p2 ]!= 'U') {\n      p++}\n   \n  }\n  return p\n}\n\n/*\n  Given a string s, return the number of vowels in the string.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 1\n  */\nconst countVowel2 =(s) => {\n  let p = 0\n  for (let p2 = 0; p2 < s.length; p2++) {\n    if (s [ p2 ]!= 'a' && s [ p2 ]!= 'e' && s [ p2 ]!= 'i' && s [ p2 ]!= 'o' && s [ p2 ]!= 'u') {\n      p++}\n   \n  }\n  return p\n}\n\n/*\n  Given a string s, return the number of consonants in the string.\n  \n  For example:\n  countConsonant('aBCdEf') returns 1\n  countConsonant('abcdefg') returns 3\n  countConsonant('dBBE') returns 1\n  */\nconst countConsonant2 =(s) => {\n  let p = 0\n  for (let p2 = 0; p2 < s.length; p2++) {\n    if (s [ p2 ]!= 'a' && s [ p2 ]!= 'e' && s [ p2 ]!= 'i' && s [ p2 ]!= 'o' && s [ p2 ]!= 'u' && s [ p2 ]!= 'A' && s [ p2 ]!= 'E' && s [ p2 ]!= 'I' && s [ p2 ]!= 'O' && s [ p2 ]!= 'U') {\n      p++}\n   \n  }\n  return p\n}\n\n/*\n  Given a string s, return the number of consonants and vowels in the string.\n  \n  For example:\n  countConsonantVowel('aBCdEf') returns 1\n  countConsonantVowel('abcdefg') returns 1\n  countConsonantVowel('dBBE') returns 2\n  */\nconst countConsonantVowel =(s) => {\n  let p = 0\n  for (let p2 = 0; p2 < s.length; p2++) {\n    if (s [ p2 ]!= 'a' && s [ p2 ]!= 'e' && s [ p2 ]!= 'i' && s [ p2 ]!= 'o' && s [ p2 ]!= 'u' && s [ p2 ]!= 'A' && s [ p2 ]!= 'E' && s [ p2 ]!= 'I' && s [ p2 ]!= 'O' && s [ p2 ]!= 'U') {\n      p++}\n   \n  }\n  return p\n}\n\n/*\n  Given a string s, return the number of consonants and vowels in the string.\n  \n  For example:\n  countConsonantVowel('aBCdEf') returns 1\n  countConsonantVowel('abcdefg') returns 1\n  countConsonantVowel('dBBE') returns 2\n  */\nconst countConsonantVowel2 =(s) => {\n  let p = 0\n  for (let p2 = 0; p2 < s.length; p2++)"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(nums) => {\n  let min = nums [ 0 ]\n  for (let i2 = 0; i2 < nums.length; i2++) {\n    for (let j = i2 + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i2; k < j; k++) {\n        s+=nums [ k ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (s < min) {\n        min = s}\n      }\n    }\n  return min\n  }\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum =(nums) => {\n  let min = nums [ 0 ]\n  for (let i2 = 0; i2 < nums.length; i2++) {\n    for (let j = i2 + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i2; k < j; k++) {\n        s+=nums [ k ]\n       \n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\nconst minSubArraySum2 = (nums) => {\n  let min = nums [ 0 ]\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums [ j ];\n      if (sum < min) {\n        min = sum\n      }\n    }\n  }\n  return min\n}\n\nconst minSubArraySum3 = (nums) => {\n  let min = nums [ 0 ]\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums [ j ];\n      if (sum > min) {\n        min = sum\n      }\n    }\n  }\n  return min\n}\n\nconst minSubArraySum4 = (nums) => {\n  let min = nums [ 0 ]\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums [ j ];\n      if (sum < min) {\n        min = sum\n      }\n    }\n  }\n  return min\n}\n\nconst minSubArraySum5 = (nums) => {\n  let min = nums [ 0 ]\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums [ j ];\n      if (sum > min) {\n        min = sum\n      }\n    }\n  }\n  return min\n}\n\nconst minSubArraySum6 = (nums) => {\n  let min = nums [ 0 ]\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums [ j ];\n      if (sum < min) {\n        min = sum\n      }\n    }\n  }\n  return min\n}\n\nconst minSubArraySum7 = (nums) => {\n  let min = nums [ 0 ]\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums [ j ];\n      if (sum < min) {\n        min = sum\n      }\n    }\n  }\n  return min\n}\n\nconst minSubArraySum8 = (nums) => {\n  let min = nums [ 0 ]\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums [ j ];\n      if (sum > min) {\n        min = sum\n      }\n    }\n  }\n  return min\n}\n\nconst minSubArraySum9 = (nums) => {\n  let min = nums [ 0 ]\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums [ j ];\n      if (sum > min) {\n        min = sum\n      }\n    }\n  }\n  return min\n}\n\nconst minSubArraySum10 = (nums) => {\n  let min = nums [ 0 ]\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums [ j ];\n      if (sum < min) {\n        min = sum\n      }\n    }\n  }\n  return min\n}\n\nconst minSubArraySum11 = (nums) => {\n  let min = nums [ 0 ]\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums [ j ];\n      if (sum > min) {\n        min = sum\n      }\n    }\n  }\n  return min\n}\n\nconst minSubArraySum12 = (nums) => {\n  let min = nums [ 0 ]\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums [ j ];\n      if (sum > min) {\n        min = sum\n      }\n    }\n  }\n  return min\n}\n\nconst minSubArraySum13 = (nums) => {\n  let min = nums [ 0 ]\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = i; j < nums.length; j++) {\n      sum += nums [ j ];\n      if (sum < min) {\n        min = sum\n      }\n    }\n  }\n  return min\n}\n\nconst minSubArraySum14 = (nums) => {\n  let min = nums [ 0 ]\n  for (let i"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, c2, c) => {\n  return(a * a + c2 * c2 == c * c || a * a == c2 * c2 + c * c || c2 * c2 == a * a + c * c)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle =(a, c2, c) => {\n  return(a * a + c2 * c2 == c * c || a * a == c2 * c2 + c * c || c2 * c2 == a * a + c * c)\n \n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a equilateral triangle, false otherwise.\n  A equilateral triangle is a triangle in which all angles are equal.\n  Example:\n  equilateralTriangle(3, 4, 5) == true\n  equilateralTriangle(1, 2, 3) == false\n  */\nconst equilateralTriangle =(a, b, c) => {\n  return(a * a == b * b && a * a == c * c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the triangle\n  is a right-angled triangle or an equilateral triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  An equilateral triangle is a triangle in which all angles are equal.\n  Example:\n  isRightAngledTriangle(3, 4, 5) == true\n  isRightAngledTriangle(1, 2, 3) == true\n  isEquilateralTriangle(3, 4, 5) == true\n  isEquilateralTriangle(1, 2, 3) == true\n  */\nconst isRightAngledTriangle =(a, b, c) => {\n  return(rightAngleTriangle(a, b, c) || equilateralTriangle(a, b, c))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the sum of the\n  sides if the triangle is a right-angled triangle or an equilateral triangle,\n  false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  An equilateral triangle is a triangle in which all angles are equal.\n  Example:\n  sidesSum(3, 4, 5) == 9\n  sidesSum(1, 2, 3) == false\n  sidesSum(3, 4, 5) == 9\n  sidesSum(1, 2, 3) == false\n  */\nconst sidesSum =(a, b, c) => {\n  return(rightAngledTriangle(a, b, c) || equilateralTriangle(a, b, c))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of\n  the triangle if the triangle is a right-angled triangle or an equilateral\n  triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  An equilateral triangle is a triangle in which all angles are equal.\n  Example:\n  perimeter(3, 4, 5) == 7\n  perimeter(1, 2, 3) == false\n  perimeter(3, 4, 5) == 7\n  perimeter(1, 2, 3) == false\n  */\nconst perimeter =(a, b, c) => {\n  return(rightAngledTriangle(a, b, c) || equilateralTriangle(a, b, c))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n triangle if the triangle is a right-angled triangle or an equilateral triangle,\n false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  An equilateral triangle is a triangle in which all angles are equal.\n  Example:\n  area(3, 4, 5) == 8\n  area(1, 2, 3) == false\n  area(3, 4, 5) == 8\n  area(1, 2, 3) == false\n  */\nconst area =(a, b, c) => {\n  return(rightAngledTriangle(a, b, c) || equilateralTriangle(a, b, c))\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n triangle if the triangle is a right-angled triangle or an equilateral triangle,\n false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  An equilateral triangle is a triangle in which all angles are equal.\n  Example:\n  area(3, 4, 5) == 8\n  area(1, 2, 3) == false\n  area(3, 4, 5) == 8\n  area(1, 2, 3) == false\n  */\nconst area2 =(a, b, c) => {\n  return(sidesSum(a, b, c) === a * b + b * c + c * a)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of\n  the triangle if the triangle is a right-angled triangle or an equilateral\n  triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  An equilateral triangle is a triangle in which all angles are equal.\n  Example:\n  perimeter(3, 4, 5) == 7\n  perimeter(1, 2, 3) == false\n  perimeter(3, 4, 5) == 7\n  perimeter(1, 2, 3) == false\n  */\nconst perimeter2 =(a, b, c) => {\n  return(perimeter(a, b, c) === a * b + b * c + c * a)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n triangle if the triangle is a right-angled triangle or an equilateral\n triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  An equilateral triangle is a triangle in which all angles are equal.\n  Example:\n  area(3, 4, 5) == 8\n  area(1, 2, 3) == false\n  area(3, 4, 5) == 8\n  area(1, 2, 3) == false\n  */\nconst area"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, y2) => {\n  return x + y2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add =(x, y2) => {\n  return x + y2;\n \n};\n\n/*\n  *  Multiply two numbers x and y\n  *  Note that if you want to multiply by zero, you have to return zero\n  *  >>> multiply(2, 3)\n  6\n  *  >>> multiply(5, 7)\n  21\n  *  >>> multiply(5, 0)\n  0\n  *  >>> multiply(0, 7)\n  0\n  *  >>> multiply(0, 0)\n  0\n  *  >>> multiply(0, 0)\n  0\n  *  >>> multiply(0, 0)\n  0\n  */\nconst multiply =(x, y) => {\n  if(y === 0) {\n    return 0;\n  }\n  return x * y;\n};\n\n/*\n  *  Divide two numbers x and y\n  *  Note that if you want to divide by zero, you have to return zero\n  *  >>> divide(2, 3)\n  1\n  *  >>> divide(5, 7)\n  2\n  *  >>> divide(5, 0)\n  0\n  *  >>> divide(0, 7)\n  0\n  *  >>> divide(0, 0)\n  0\n  *  >>> divide(0, 0)\n  0\n  */\nconst divide =(x, y) => {\n  return x / y;\n};\n\nmodule.exports = {\n  add,\n  multiply,\n  divide\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n  .map(string2 =>(string2.toUpperCase() == string2 ? string2.toLowerCase() : string2.toUpperCase()))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  .join('');\n  }\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase =(string) => {\n  return string.split('')\n .map(string2 =>(string2.toUpperCase() == string2? string2.toLowerCase() : string2.toUpperCase()))\n \n .join('');\n}\n\n/* \n  >>> flipCase('hELLO')\n  'HELLo'\n  */\nconst flipCase2 =(string) => {\n  const arr = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    arr.push(flipCase(string[i]));\n  }\n  return arr.join('');\n}\n\n/*\n  >>> flipCase2('hELLO')\n  'HELLo'\n  */\nconst flipCase3 =(string) => {\n  const arr = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    arr.push(string[i].toUpperCase() === string[i]? string[i].toLowerCase() : string[i].toUpperCase());\n  }\n  return arr.join('');\n}\n\nconst flipCase4 =(string) => {\n  const arr = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    arr.push(string[i].toUpperCase() === string[i]? string[i].toLowerCase() : string[i].toUpperCase());\n  }\n  return arr.join('');\n}\n\nconst flipCase5 =(string) => {\n  const arr = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    arr.push(string[i].toUpperCase() === string[i]? string[i].toUpperCase() : string[i].toLowerCase());\n  }\n  return arr.join('');\n}\n\nconst flipCase6 =(string) => {\n  const arr = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    arr.push(string[i].toUpperCase() === string[i]? string[i].toUpperCase() : string[i].toLowerCase());\n  }\n  return arr.join('');\n}\n\nconst flipCase7 =(string) => {\n  const arr = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    arr.push(string[i].toUpperCase() === string[i]? string[i].toUpperCase() : string[i].toUpperCase());\n  }\n  return arr.join('');\n}\n\nconst flipCase8 =(string) => {\n  const arr = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    arr.push(string[i].toUpperCase() === string[i]? string[i].toUpperCase() : string[i].toLowerCase());\n  }\n  return arr.join('');\n}\n\nconst flipCase9 =(string) => {\n  const arr = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    arr.push(string[i].toUpperCase() === string[i]? string[i].toLowerCase() : string[i].toUpperCase());\n  }\n  return arr.join('');\n}\n\nconst flipCase10 =(string) => {\n  const arr = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    arr.push(string[i].toUpperCase() === string[i]? string[i].toUpperCase() : string[i].toUpperCase());\n  }\n  return arr.join('');\n}\n\nconst flipCase11 =(string) => {\n  const arr = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    arr.push(string[i].toUpperCase() === string[i]? string[i].toUpperCase() : string[i].toLowerCase());\n  }\n  return arr.join('');\n}\n\nconst flipCase12 =(string) => {\n  const arr = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    arr.push(string[i].toUpperCase() === string[i]? string[i].toUpperCase() : string[i].toUpperCase());\n  }\n  return arr.join('');\n}\n\nconst flipCase13 =(string) => {\n  const arr = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    arr.push(string[i].toUpperCase() === string[i]? string[i].toUpperCase() : string[i].toLowerCase());\n  }\n  return arr.join('');\n}\n\nconst flipCase14 =(string) => {\n  const arr = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    arr.push(string[i].toUpperCase() === string[i]? string[i].toUpperCase() : string[i].toUpperCase());\n  }\n  return arr.join('');\n}\n\nconst flipCase15 =(string) => {\n  const arr = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    arr.push(string[i].toUpperCase() === string[i]? string[i].toUpperCase() : string[i].toUpperCase());\n  }\n  return arr.join('');\n}\n\nconst flipCase16 =(string) => {\n  const arr = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    arr.push(string[i].toUpperCase"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  for (let i2 = 0; i2 < string.length; i2++) {\n    if (string [ i2 ] == '[') {\n      opening_bracket_index.push(i2)\n      }\n    else {\n      closing_bracket_index1.push(i2)\n      }\n    }\n  let closing_bracket_index = [ ]\n  for (let i2 = 0; i2 < closing_bracket_index1.length; i2++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1 [ closing_bracket_index1.length - i2 - 1 ])\n    }\n  let cnt = 0\n  let i2 = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i2 < l && opening_bracket_index [ k ] < closing_bracket_index [ i2 ]) {\n      cnt+=1;\n      i2+=1;\n      }\n    }\n  return cnt >= 2\n  }\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested =(string) => {\n  let opening_bracket_index = [ ]\n  let closing_bracket_index1 = [ ]\n  for (let i2 = 0; i2 < string.length; i2++) {\n    if (string [ i2 ] == '[') {\n      opening_bracket_index.push(i2)\n      }\n    else {\n      closing_bracket_index1.push(i2)\n      }\n    }\n  let closing_bracket_index = [ ]\n  for (let i2 = 0; i2 < closing_bracket_index1.length; i2++) {\n   \n    let closing_bracket_index2 = closing_bracket_index1 [ i2 ]\n    while (closing_bracket_index2 < string.length) {\n      if (string [ closing_bracket_index2 ] == ']') {\n        closing_bracket_index.push(closing_bracket_index2)\n        }\n      closing_bracket_index2++\n      }\n    }\n  if (opening_bracket_index.length == 0 ||\n    closing_bracket_index.length == 0) {\n      return false\n    }\n  let opening_bracket_index2 = opening_bracket_index [ 0 ]\n  let closing_bracket_index2 = closing_bracket_index [ 0 ]\n  let first_closing_bracket_index = closing_bracket_index [ 0 ]\n  let opening_bracket_index_count = 0\n  while (opening_bracket_index2 < string.length) {\n    if (string [ opening_bracket_index2 ] == '[') {\n      opening_bracket_index_count++\n      }\n    else {\n      if (opening_bracket_index_count == 0) {\n        return false\n        }\n      else {\n        opening_bracket_index_count--\n        }\n      }\n    opening_bracket_index2++\n    }\n  if (opening_bracket_index_count == 0) {\n    return true\n    }\n  else {\n    return false\n    }\n  }\n\n\n  // console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('[][]'));\n// console.log(isNested('"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i2 = 0; i2 < s.length; i2++) {\n    let y = s [ i2 ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    p+=String.fromCharCode(y)\n    }\n  if (t == 1) {\n    return p}\n  let u = ''\nfor (let i2 = 0; i2 < p.length; i2++) {\n    u+=p [ p.length - i2 - 1 ]\n    }\n  return u\n  }\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve =(s) => {\n  let t = 0\n  let p = ''\nfor (let i2 = 0; i2 < s.length; i2++) {\n    let y = s [ i2 ].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y+=32;\n      t = 1;\n      }\n    else\nif (y >= 97 && y <= 122) {\n      y-=32;\n      t = 1;\n     \n      }\n    else t = 0;\n    p = p + String.fromCharCode(y)\n    }\n  if (t === 1) {\n  return p.toUpperCase()\n    }\n    else {\n      return p.toLowerCase()\n    }\n  }\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const y of l)\n  if (y >= t)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold =(l, t) => {\n  for (const y of l)\n  if (y >= t)\n \n    return false\n  return true\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3])\n  3\n  >>> largest([4, 10, 50])\n  50\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  */\nconst largest =(l) => {\n  for (const y of l)\n  return y\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([4, 10, 50, 10, 50])\n  50\n  */\nconst largest2 =(l) => {\n  for (const y of l)\n  if (y > largest(l))\n    return y\n  return largest(l)\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([4, 10, 50, 10, 50])\n  50\n  */\nconst largest3 =(l) => {\n  for (const y of l)\n  if (y > largest(l))\n    return largest(l)\n  return largest(l)\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([4, 10, 50, 10, 50])\n  50\n  */\nconst largest4 =(l) => {\n  for (const y of l)\n  if (y > largest(l))\n    return largest(l)\n  return largest(l)\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([4, 10, 50, 10, 50])\n  50\n  */\nconst largest5 =(l) => {\n  for (const y of l)\n  if (y > largest(l))\n    return largest(l)\n  return largest(l)\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([4, 10, 50, 10, 50])\n  50\n  */\nconst largest6 =(l) => {\n  for (const y of l)\n  if (y > largest(l))\n    return largest(l)\n  return largest(l)\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([4, 10, 50, 10, 50])\n  50\n  */\nconst largest7 =(l) => {\n  for (const y of l)\n  if (y > largest(l))\n    return largest(l)\n  return largest(l)\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([4, 10, 50, 10, 50])\n  50\n  */\nconst largest8 =(l) => {\n  for (const y of l)\n  if (y > largest(l))\n    return largest(l)\n  return largest(l)\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([4, 10, 50, 10, 50])\n  50\n  */\nconst largest9 =(l) => {\n  for (const y of l)\n  if (y > largest(l))\n    return largest(l)\n  return largest(l)\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([4, 10, 50, 10, 50])\n  50\n  */\nconst largest10 =(l) => {\n  for (const y of l)\n  if (y > largest(l))\n    return largest(l)\n  return largest(l)\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([4, 10, 50, 10, 50])\n  50\n  */\nconst largest11 =(l) => {\n  for (const y of l)\n  if (y > largest(l))\n    return largest(l)\n  return largest(l)\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([4, 10, 50, 10, 50])\n  50\n  */\nconst largest12 =(l) => {\n  for (const y of l)\n  if (y > largest(l))\n    return largest(l)\n  return largest(l)\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([4, 10, 50, 10, 50])\n  50\n  */\nconst largest13 =(l) => {\n  for (const y of l)\n  if (y > largest(l))\n    return largest(l)\n  return largest(l)\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([4, 10, 50, 10, 50])\n  50\n  */\nconst largest14 =(l) => {\n  for (const y of l)\n  if (y > largest(l))\n    return largest(l)\n  return largest(l)\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([4, 10, 50, 10, 50])\n  50\n  */\nconst largest15 =(l) => {\n  for (const y of l)\n  if (y > largest(l))\n    return largest(l)\n  return largest(l)\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 3, 4, 5"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let s = i.toString()\n    let p = 1\n    for (let j = 0; j < s.length; j++) {\n      if (s [ j ] != s [ s.length - j - 1 ]) {\n        p = 0;\n        break;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    if (p == 1) {\n      if (s % 2 == 0) {\n        e++}\n      else {\n        o++}\n      }\n    }\n  return(e, o)\n  }\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome =(n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let s = i.toString()\n    let p = 1\n    for (let j = 0; j < s.length; j++) {\n      if (s [ j ]!= s [ s.length - j - 1 ]) {\n        p = 0;\n        break;\n       \n      } else {\n        p = 1;\n      }\n    }\n    if (p === 1) {\n      e++;\n    } else {\n      o++;\n    }\n  }\n  return [e, o]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  for (let n2 = n - 1; n2 >= 0; n2--)\n  if (n % n2 == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return n2;\n  }\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor =(n) => {\n  for (let n2 = n - 1; n2 >= 0; n2--)\n  if (n % n2 == 0)\n \n  return n2;\n};\n\n/*\n * @param a number\n * @param b number\n * @return number\n */\nconst multiply = (a, b) => {\n  return a * b;\n};\n\nconst test = () => {\n  let a = 1;\n  let b = 3;\n  let c = multiply(a, b);\n  let d = largestDivisor(c);\n  return c / d;\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let i2 = 2; i2 < n; i2++)\n    if (n % i2 == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if ( !isPrime(i)) continue;\n    for (let i2 = 2; i2 < 101; i2++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if ( !isPrime(i2)) continue;\n      for (let k = 2; k < 101; k++) {\n        if ( !isPrime(k)) continue;\n        if (i * i2 * k == a)\n        return true;\n        }\n      }\n    }\n  return false;\n  }\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime =(a) => {\n  var isPrime = function(n) {\n    for (let i2 = 2; i2 < n; i2++)\n    if (n % i2 == 0)\n    return false;\n    return true;\n    }\n  \n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let i2 = 2; i2 < 101; i2++) {\n     \n        if (!isPrime(i2)) continue;\n      \n        if (i2 * i > a) break;\n        if (i * i2 > a) break;\n        if (i * i2 * i > a) break;\n        \n        if (i2 * i2 > a) break;\n        if (i2 * i2 * i > a) break;\n        if (i * i2 * i2 > a) break;\n        \n        if (i2 * i2 * i2 > a) break;\n        \n        if (a % i2 * i * i2 > a) break;\n        \n        if (a % i2 * i2 * i > a) break;\n        if (a % i2 * i2 * i2 > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i2 * i * i2 > a) break;\n        if (a % i2 * i2 * i2 > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i2 * i * i2 > a) break;\n        if (a % i2 * i * i2 > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i2 * i * i2 > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i2 * i * i2 > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i2 * i * i2 > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i2 * i * i2 > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i2 * i * i2 > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i2 * i * i2 > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i2 * i * i2 > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i2 * i * i2 > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i2 * i * i2 > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i * i2 * i2 > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if (a % i * i2 * i > a) break;\n        if (a % i2 * i * i > a) break;\n        if"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(ver) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = ver.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n  , 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (ver.at( - 1) == 'y' || ver.at( - 1) == 'Y')\n  n_vowels+=1;\n  return n_vowels;\n  }\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount =(ver) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = ver.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n , 0);\n \n  return n_vowels;\n}\n\n/*Write a function which takes a string as input and returns the\n  number of vowel-diphthongs in the string. A vowel-diphthong is\n  defined as a vowel followed by another vowel.\n\n  Example:\n  >>> vowelDiphthongsCount(\"a\")\n  1\n  >>> vowelDiphthongsCount(\"ae\")\n  1\n  >>> vowelDiphthongsCount(\"bce\")\n  3\n  >>> vowelDiphthongsCount(\"ABCDE\")\n  5\n  >>> vowelDiphthongsCount(\"A\")\n  1\n  */\nconst vowelDiphthongsCount =(ver) => {\n  var vowelDiphthongs = \"aaeiouAEIOU\";\n  var n_vowels = ver.split('').reduce((prev, item) => {\n    return prev +(vowelDiphthongs.includes(item));\n    }\n , 0);\n \n  return n_vowels;\n}\n\n/*Write a function to return the sum of the values of all the\n  characters in a string.\n\n  Example:\n  >>> sum('aB')\n  'AB'\n  >>> sum('abcd')\n  'ABCD'\n  >>> sum('123')\n  '123'\n  >>> sum('')\n  ''\n  */\nconst sum =(ver) => {\n  var chars = ver.split('');\n  var n_chars = chars.length;\n  return chars.reduce((prev, item) => {\n    return prev +(item);\n    }\n , 0);\n}\n\n/*Write a function to return the number of vowels in a string.\n\n  Example:\n  >>> vowelsCount('abc')\n  2\n  >>> vowelsCount('a')\n  1\n  >>> vowelsCount('y')\n  1\n  >>> vowelsCount('yee')\n  2\n  */\nconst vowelsCount =(ver) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = ver.split('').reduce((prev, item) => {\n    return prev +(vowels.includes(item));\n    }\n , 0);\n \n  return n_vowels;\n}\n\n/*Write a function which takes a string as input and returns the\n  number of consonants in the string. A consonant is a\n  non-vowel character.\n\n  Example:\n  >>> consonantsCount('a')\n  0\n  >>> consonantsCount('ae')\n  0\n  >>> consonantsCount('aa')\n  1\n  >>> consonantsCount('b')\n  1\n  >>> consonantsCount('b')\n  1\n  >>> consonantsCount('abc')\n  3\n  >>> consonantsCount('123')\n  3\n  >>> consonantsCount('')\n  0\n  */\nconst consonantsCount =(ver) => {\n  var consonants = \"bcdfghjklmnpqrstvwxz\";\n  var n_consonants = ver.split('').reduce((prev, item) => {\n    return prev +(consonants.includes(item));\n    }\n , 0);\n \n  return n_consonants;\n}\n\n/*Write a function to return the number of consonant-vowel\n  combinations in a string.\n\n  Example:\n  >>> vvcCount('a')\n  0\n  >>> vvcCount('ae')\n  0\n  >>> vvcCount('aa')\n  1\n  >>> vvcCount('b')\n  1\n  >>> vvcCount('b')\n  1\n  >>> vvcCount('abc')\n  1\n  >>> vvcCount('123')\n  3\n  >>> vvcCount('')\n  0\n  */\nconst vvcCount =(ver) => {\n  var vvc = \"bcdfghjklmnpqrstvwxz\";\n  var n_vowels = ver.split('').reduce((prev, item) => {\n    return prev +(vvc.includes(item));\n    }\n , 0);\n \n  return n_vowels;\n}\n\n/*Write a function to return the number of consonant-diphthong\n  combinations in a string.\n\n  Example:\n  >>> vvcCount('a')\n  0\n  >>> vvcCount('ae')\n  0\n  >>> vvcCount('aa')\n  1\n  >>> vvcCount('b')\n  1\n  >>> vvcCount('b')\n  1\n  >>> vvcCount('abc')\n  1\n  >>> vvcCount('123')\n  1\n  >>> vvcCount('')\n  0\n  */\nconst vvcCount =(ver) => {\n  var vvc = \"bcdfghjklmnpqrstvwxz\";\n  var n_vowels = ver.split('').reduce((prev, item) => {\n    return prev +(vvc.includes(item));\n    }\n , 0);\n \n  return n_vowels;\n}\n\n/*Write a function to return the number of consonant-diphthong\n  combinations in a string.\n\n  Example:\n  >>> vvcCount('a')\n  0\n  >>> vvcCount('ae')\n  0\n  >>> vvcCount('aa')\n  1\n  >>> vvcCount('b')\n  1\n  >>> vvcCount('b')\n  1\n  >>> vvcCount('abc')\n  1\n  >>> vvcCount('123')\n  1\n  >>> vvcCount('')\n  0\n  */\nconst vvcCount =(ver) => {\n  var vvc"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i2 = 0; i2 < 8; i2++) {\n    if (y [ i2 ] == planet1) {\n      lo = i2}\n    }\n  for (let i2 = 0; i2 < 8; i2++) {\n    if (y [ i2 ] == planet2) {\n      hi = i2}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (lo == - 1 || hi == - 1 || lo == hi) {\n    return [ ]}\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n    }\n  for (let i2 = lo + 1; i2 < hi; i2++) {\n    u.push(y [ i2 ])\n    }\n  return u\n  }\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf =(planet1, planet2) => {\n  let y = [ 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune' ]\n  let u = [ ]\n  let lo = - 1\n  let hi = - 1\n  for (let i2 = 0; i2 < 8; i2++) {\n    if (y [ i2 ] == planet1) {\n      lo = i2}\n    }\n  for (let i2 = 0; i2 < 8; i2++) {\n    if (y [ i2 ] == planet2) {\n      hi = i2}\n    }\n \n  if (lo == - 1 || hi == - 1) return []\n  \n  let i1 = hi + 1\n  while (i1 < 8) {\n    if (y [ i1 ] == planet1) {\n      u.push(y [ i1 ])\n      i1++\n    }\n    if (y [ i1 ] == planet2) {\n      u.push(y [ i1 ])\n      break\n    }\n    i1++\n  }\n  return u\n}\n\nconst p = bf(\"Mercury\", \"Jupiter\")\nconsole.log(p)\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a2, b) => {\n  if (a2 < 0) {\n    a2 = - a2}\n  if (b < 0) {\n    b = - b}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(a2 % 10) *(b % 10)\n  }\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply =(a2, b) => {\n  if (a2 < 0) {\n    a2 = - a2}\n  if (b < 0) {\n    b = - b}\n \n  let a = a2 / 10;\n  let b = b / 10;\n \n  if (a === 0) {\n    return b\n  } else if (b === 0) {\n    return a\n  }\n \n  let i = 0;\n  let temp = 0;\n \n  do {\n    temp = a * b;\n    i++;\n    a = temp / 10;\n    b = temp % 10;\n  } while (a!== 0);\n \n  return temp\n}\n\nconst sum = (a,b) => {\n  let a = Math.abs(a);\n  let b = Math.abs(b);\n  let sum = 0;\n  do {\n    sum = sum + a % 10;\n    a = a / 10;\n  } while (a > 0);\n \n  do {\n    sum = sum + b % 10;\n    b = b / 10;\n  } while (b > 0);\n \n  return sum;\n}\n\nconst main = () => {\n  let a = 1234;\n  let b = -1234;\n  let c = 2;\n  let d = -2;\n  let e = 3;\n  let f = -3;\n  let g = 4;\n  let h = -4;\n \n  console.log(multiply(a, b));\n  console.log(multiply(c, d));\n  console.log(multiply(e, f));\n  console.log(multiply(g, h));\n  console.log(sum(a, b));\n  console.log(sum(c, d));\n  console.log(sum(e, f));\n  console.log(sum(g, h));\n}\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(pro) => {\n  pro = Math.abs(pro);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return(Math.pow(Math.round(Math.pow(pro, 1.0 / 3.0)), 3) == pro);\n  }\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube =(pro) => {\n  pro = Math.abs(pro);\n \n  return pro == Math.pow(pro, 3) || pro == Math.pow(pro, 6) || pro == Math.pow(pro, 9);\n};\n\nconst getInput =(pro) => {\n  let ans = \"\";\n  pro = Math.abs(pro);\n  \n  for (let i = 0; i < pro; i++) {\n    ans += Math.floor(Math.random() * 9);\n  }\n\n  return ans;\n};\n\nlet a = getInput(1);\nconsole.log(iscube(a));<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const numbers2 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n    'six' : 6,\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n    }\n  ;\n  return numbers.split(' ')\n  .filter(x => x != '')\n  .sort((a, b) => numbers2 [ a ] - numbers2 [ b ])\n  .join(' ');\n  }\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers =(numbers) => {\n  const numbers2 = {\n    'zero' : 0,\n    'one' : 1,\n    'two' : 2,\n    'three' : 3,\n    'four' : 4,\n    'five' : 5,\n   'six' : 6,\n   \n   'seven' : 7,\n    'eight' : 8,\n    'nine' : 9\n  }\n  return (numbers.split(\" \").map(n => numbers2[n]).sort()).join(\" \")\n}\n\n/* Input is a space-delimited string of numbers.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the number that occurs first in the string.\n  >>> firstNumber('one two three four')\n  1\n  */\nconst firstNumber = (numbers) => {\n    return (numbers.split(\" \").sort()[0]).toString()\n}\n\n/* Input is a space-delimited string of numbers.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the number that occurs last in the string.\n  >>> lastNumber('one two three four')\n  4\n  */\nconst lastNumber = (numbers) => {\n    return (numbers.split(\" \").sort()[1]).toString()\n}\n\n/* Input is a space-delimited string of numbers.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the sum of all the numbers in the string.\n  >>> sumNumbers('zero one two three four')\n  15\n  */\nconst sumNumbers = (numbers) => {\n    let sum = 0\n    numbers.split(\" \").forEach(n => {\n        sum += parseInt(n)\n    })\n    return sum\n}\n\n/* Input is a space-delimited string of numbers.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the difference between the last two numbers in the string.\n  >>> differenceNumbers('two three four')\n  2\n  */\nconst differenceNumbers = (numbers) => {\n    const two = parseInt(lastNumber(numbers))\n    const three = parseInt(firstNumber(numbers))\n    return two - three\n}\n\n/* Input is a space-delimited string of numbers.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the product of all the numbers in the string.\n  >>> productNumbers('zero one two three four')\n  24\n  */\nconst productNumbers = (numbers) => {\n    let product = 1\n    numbers.split(\" \").forEach(n => {\n        product *= parseInt(n)\n    })\n    return product\n}\n\n/* Input is a space-delimited string of numbers.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the largest number in the string.\n  >>> largestNumber('three one five')\n  5\n  */\nconst largestNumber = (numbers) => {\n    let largest = 0\n    numbers.split(\" \").forEach(n => {\n        if (parseInt(n) > largest) {\n            largest = parseInt(n)\n        }\n    })\n    return largest\n}\n\n/* Input is a space-delimited string of numbers.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the smallest number in the string.\n  >>> smallestNumber('three one five')\n  3\n  */\nconst smallestNumber = (numbers) => {\n    let smallest = 99999999\n    numbers.split(\" \").forEach(n => {\n        if (parseInt(n) < smallest) {\n            smallest = parseInt(n)\n        }\n    })\n    return smallest\n}\n\n/* Input is a space-delimited string of numbers.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the average of all the numbers in the string.\n  >>> averageNumbers('zero one two three four')\n  4.5\n  */\nconst averageNumbers = (numbers) => {\n    let sum = 0\n    numbers.split(\" \").forEach(n => {\n        sum += parseInt(n)\n    })\n    return sum / 5\n}\n\n/* Input is a space-delimited string of numbers.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the median of all the numbers in the string.\n  >>> medianNumbers('three one five')\n  4\n  */\nconst medianNumbers = (numbers) => {\n    let median = 0\n    numbers.split(\" \").forEach(n => {\n        if (parseInt(n) > median) {\n            median = parseInt(n)\n        }\n    })\n    return median\n}\n\n/* Input is a space-delimited string of numbers.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the mode of all the numbers in the string.\n  >>> modeNumbers('zero one two three four')\n  4\n  */\nconst modeNumbers = (numbers) => {\n    let max = 0\n    let mode = 0\n    numbers.split(\" \").forEach(n => {\n        if (parseInt"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, i) => i % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, i) =>(i % 2 == 0 ? even [ i / 2 ] : item));\n  }\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven =(l) => {\n  var even = l.filter((item, i) => i % 2 == 0);\n  even.sort((a, b) =>(a - b));\n \n  return l.filter((item, i) => i % 2 == 1).concat(even);\n}\n\n//TODO: Add a function to sortEven that takes a list of lists, and returns a list of lists\n//TODO: that is sorted by the odd index, and then reversed, so that the odd indices are sorted\n//TODO: the even indices are sorted, but in the same order.\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  for (let i2 = n; i2 < n * 3; i2+=2) {\n    t.push(i2)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return t\n  }\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile =(n) => {\n  let t = [ ]\n  for (let i2 = n; i2 < n * 3; i2+=2) {\n    t.push(i2)\n   \n  }\n  return t\n}\n\n//console.log(makeAPile(3))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let result = [ ]\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades [ i ]\n    if (gpa == 4.0) {\n      result.push('A+')\n      }\n    else\nif (gpa > 3.7) {\n      result.push('A')\n      }\n    else\nif (gpa > 3.3) {\n      result.push('A-')\n      }\n    else\nif (gpa > 3.0) {\n      result.push('B+')\n      }\n    else\nif (gpa > 2.7) {\n      result.push('B')\n      }\n    else\nif (gpa > 2.3) {\n      result.push('B-')\n      }\n    else\nif (gpa > 2.0) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      result.push('C+')\n      }\n    else\nif (gpa > 1.7) {\n      result.push('C')\n      }\n    else\nif (gpa > 1.3) {\n      result.push('C-')\n      }\n    else\nif (gpa > 1.0) {\n      result.push('D+')\n      }\n    else\nif (gpa > 0.7) {\n      result.push('D')\n      }\n    else\nif (gpa > 0.0) {\n      result.push('D-')\n      }\n    else {\n      result.push('E')\n      }\n    }\n  return result\n  }\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade =(grades) => {\n  let result = [ ]\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades [ i ]\n    if (gpa == 4.0) {\n      result.push('A+')\n      }\n    else\nif (gpa > 3.7) {\n      result.push('A')\n      }\n    else\nif (gpa > 3.3) {\n      result.push('A-')\n      }\n    else\nif (gpa > 3.0) {\n      result.push('B+')\n      }\n    else\nif (gpa > 2.7) {\n      result.push('B')\n      }\n    else\nif (gpa > 2.3) {\n      result.push('B-')\n      }\n    else\nif (gpa > 2.0) {\n     \n      result.push('C+')\n      }\n    else\nif (gpa > 1.7) {\n      result.push('C')\n      }\n    else\nif (gpa > 1.3) {\n      result.push('C-')\n      }\n    else\nif (gpa > 1.0) {\n      result.push('D+')\n      }\n    else\nif (gpa > 0.7) {\n      result.push('D')\n      }\n    else\nif (gpa > 0.0) {\n      result.push('D-')\n      }\n    else {\n      result.push('E')\n      }\n  }\n  return result\n}\n\n/*\n  There are N students in the class. You are given their GPA scores.\n  Your task is to print the list of grades of the class as a string.\n  Your code has to be efficient and not slow down the program.\n  */\nconst printClass = (grades) => {\n  let result = \"\"\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades [ i ]\n    result += `${gpa}\\t`\n  }\n  return result\n}\n\n/*\n  Write a function that takes a string and returns a new string with a capital\n  letter at the beginning of every word.\n\n  Example:\n  capitalize(\"I have a dream\") ===> \"I Have A Dream\"\n  */\nconst capitalize = (string) => {\n  return string.split(' ').map((word) => {\n    return word.substr(0, 1).toUpperCase() + word.slice(1)\n  }).join(' ')\n}\n\n/*\n  Write a function that takes a string and returns a new string with the\n  first letter of every word capitalized.\n\n  Example:\n  capitalize(\"I have a dream\") ===> \"I Have A Dream\"\n  */\nconst capitalize2 = (string) => {\n  return string.split(' ').map((word) => {\n    return word.substr(0, 1).toUpperCase() + word.slice(1)\n  }).join(' ')\n}\n\n/*\n  Write a function that takes a string and returns a new string with a\n  hyphenated string for every pair of adjacent words.\n\n  Example:\n  hyphenate(\"I have a dream\") ===> \"I have a-dream\"\n  */\nconst hyphenate = (string) => {\n  return string.split(' ').reduce((previous, current) => {\n    return previous + current.substr(0, 1) + '-' + current.substr(1, 1) +''\n  })\n}\n\n/*\n  Write a function that takes a string and returns a new string with a\n  space in every pair of adjacent words.\n\n  Example:\n  spaceize(\"I have a dream\") ===> \"I have a dream\"\n  */\nconst spaceize = (string) => {\n  return string.split(' ').reduce((previous, current) => {\n    return previous +'' + current\n  })\n}\n\n/*\n  Write a function that takes a string and returns a new string with a\n  space in every pair of adjacent words.\n\n  Example:\n  spaceize(\"I have a dream\") ===> \"I have a dream\"\n  */\nconst spaceize2 = (string) => {\n  return string.split(' ').reduce((previous, current) => {\n    return previous +'' + current\n  })\n}\n\n/*\n  Write a function that takes a string and returns a new string with a\n  hyphenated string for every pair of adjacent words, and with a space\n  between each pair of words.\n\n  Example:\n  spaceize(\"I have a dream\") ===> \"I have a-dream\"\n  */\nconst spaceize3 = (string) => {\n  return string.split(' ').reduce((previous, current) => {\n    return previous +'' + current\n  })\n}\n\n/*\n  Write a function that takes a string and returns a new string with a\n  hyphenated string for every pair of adjacent words, and with a space\n  between each pair of words, and then with a space in between the\n  hyphenated strings.\n\n  Example:\n  spaceize(\"I have a dream\") ===> \"I have a-dream\"\n  */\nconst spaceize4 = (string) => {\n  return string.split(' ').reduce((previous, current) =>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var x2 = 1;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  while (x2 < x)\n  x2 = x2 * n;\n  return(x2 == x);\n  }\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower =(x, n) => {\n  if (n == 1)\n  return(x == 1);\n  var x2 = 1;\n \n  while(x2 < x)\n  {\n    x2 *= n;\n  }\n  return(x2 == x);\n}\n\n/*\n  Your task is to write a function that returns true if a number x is a perfect number\n  and false in other cases.\n  x is a perfect number if it is the power of some positive integer\n  For example:\n  isPerfectNumber(6) => false\n  isPerfectNumber(1) => true\n  isPerfectNumber(2) => false\n  isPerfectNumber(3) => true\n  isPerfectNumber(8) => false\n  isPerfectNumber(9) => true\n  isPerfectNumber(15) => false\n  */\nconst isPerfectNumber = (x) => {\n  var a = 1;\n  var b = 1;\n  while (b < x)\n  {\n    a = a + 1;\n    b = a*b;\n  }\n  return b == x;\n}\n\n/*\n  Your task is to write a function that returns true if a number x is a prime number\n  and false in other cases.\n  x is a prime number if it is the only number that divides every number from 1 to n\n  For example:\n  isPrimeNumber(1) => false\n  isPrimeNumber(2) => true\n  isPrimeNumber(3) => false\n  isPrimeNumber(4) => true\n  isPrimeNumber(5) => false\n  isPrimeNumber(6) => true\n  isPrimeNumber(7) => false\n  isPrimeNumber(8) => true\n  isPrimeNumber(9) => false\n  isPrimeNumber(10) => true\n  isPrimeNumber(11) => false\n  isPrimeNumber(12) => true\n  isPrimeNumber(13) => false\n  isPrimeNumber(14) => true\n  isPrimeNumber(15) => false\n  isPrimeNumber(16) => true\n  isPrimeNumber(17) => false\n  isPrimeNumber(18) => true\n  isPrimeNumber(19) => false\n  isPrimeNumber(20) => true\n  isPrimeNumber(21) => false\n  isPrimeNumber(22) => true\n  */\nconst isPrimeNumber =(x) => {\n  var num = 2;\n  var a = 2;\n  var flag = 1;\n  while (num <= x)\n  {\n    if (x % num == 0)\n    {\n      flag = 0;\n      break;\n    }\n    num += 1;\n  }\n  return flag;\n}\n\n/*\n  Your task is to write a function that returns the number of divisors of a number x.\n  If x is zero, the function should return 0.\n  Otherwise, the function should return the number of divisors of x minus one.\n  For example:\n  numberOfDivisors(4) => 1\n  numberOfDivisors(5) => 2\n  numberOfDivisors(6) => 2\n  numberOfDivisors(7) => 3\n  numberOfDivisors(8) => 2\n  numberOfDivisors(9) => 2\n  numberOfDivisors(10) => 3\n  numberOfDivisors(11) => 3\n  numberOfDivisors(12) => 3\n  numberOfDivisors(13) => 3\n  numberOfDivisors(14) => 4\n  numberOfDivisors(15) => 3\n  numberOfDivisors(16) => 2\n  numberOfDivisors(17) => 3\n  numberOfDivisors(18) => 3\n  numberOfDivisors(19) => 3\n  numberOfDivisors(20) => 3\n  numberOfDivisors(21) => 3\n  numberOfDivisors(22) => 4\n  */\nconst numberOfDivisors =(x) => {\n  if (x == 0)\n  {\n    return 0;\n  }\n  var num = 1;\n  var i = 2;\n  while (i < x)\n  {\n    if (x % i == 0)\n    {\n      num += 1;\n    }\n    i += 1;\n  }\n  return num;\n}\n\n/*\n  Your task is to write a function that returns the number of perfect numbers less than a number n.\n  If n is zero, the function should return 0.\n  Otherwise, the function should return the number of perfect numbers less than n.\n  For example:\n  numberOfPerfectNumbersLessThan(4) => 0\n  numberOfPerfectNumbersLessThan(5) => 1\n  numberOfPerfectNumbersLessThan(6) => 1\n  numberOfPerfectNumbersLessThan(7) => 1\n  numberOfPerfectNumbersLessThan(8) => 2\n  numberOfPerfectNumbersLessThan(9) => 2\n  numberOfPerfectNumbersLessThan(10) => 2\n  numberOfPerfectNumbersLessThan(11) => 3\n  numberOfPerfectNumbersLessThan(12) => 3\n  numberOfPerfectNumbersLessThan(13) => 3\n  numberOfPerfectNumbersLessThan(14) => 4\n  numberOfPerfectNumbersLessThan(15) => 4\n  numberOfPerfectNumbersLessThan(16) => 4\n  numberOfPerfectNumbersLessThan(17) => 4\n  numberOfPerfectNumbersLessThan(18) => 4\n  numberOfPerfectNumbersLessThan(19) => 4\n  numberOfPerfectNumbersLessThan(20) => 4\n  numberOfPerfectNumbersLessThan(21) => 4\n  numberOfPerfectNumbersLessThan(22) => 5\n  */\nconst numberOfPerfectNumbersLessThan = (x) => {\n  var num = 0;\n  var i = 2;\n  while (i < x)\n  {\n    if (isPerfectNumber(i))\n    {\n      num += 1;\n    }\n    i += 1;"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(Get) => {\n  return Get.filter(e => e > 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive =(Get) => {\n  return Get.filter(e => e > 0);\n \n}\n\nmodule.exports = getPositive;\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  for (let i2 = 0; i2 < lst.length; i2++) {\n    if (i2 % 3 == 0) {\n      y+=lst [ i2 ] * lst [ i2 ]}\n    else\nif (i2 % 4 == 0) {\n      y+=lst [ i2 ] * lst [ i2 ] * lst [ i2 ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    else {\n      y+=lst [ i2 ]}\n    }\n  return y\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares =(lst) => {\n  let y = 0\n  for (let i2 = 0; i2 < lst.length; i2++) {\n    if (i2 % 3 == 0) {\n      y+=lst [ i2 ] * lst [ i2 ]}\n    else\nif (i2 % 4 == 0) {\n      y+=lst [ i2 ] * lst [ i2 ] * lst [ i2 ]}\n   \n    }\n  }\n  return y\n}\n  \nconst sumSquares2 = (lst) => {\n  let y = 0\n  for (let i2 = 0; i2 < lst.length; i2++) {\n    if (i2 % 3 == 0) {\n      y+=lst [ i2 ]}\n    else\nif (i2 % 4 == 0) {\n      y+=lst [ i2 ] * lst [ i2 ]}\n   \n    }\n  }\n  return y\n}\n  \nconst sumSquares3 = (lst) => {\n  let y = 0\n  for (let i2 = 0; i2 < lst.length; i2++) {\n    if (i2 % 3 == 0) {\n      y+=lst [ i2 ]}\n    else\nif (i2 % 4 == 0) {\n      y+=lst [ i2 ] * lst [ i2 ]}\n   \n    }\n  }\n  return y\n}\n  \nconst sumSquares4 = (lst) => {\n  let y = 0\n  for (let i2 = 0; i2 < lst.length; i2++) {\n    if (i2 % 3 == 0) {\n      y+=lst [ i2 ]}\n    else\nif (i2 % 4 == 0) {\n      y+=lst [ i2 ] * lst [ i2 ]}\n   \n    }\n  }\n  return y\n}\n  \nconst sumSquares5 = (lst) => {\n  let y = 0\n  for (let i2 = 0; i2 < lst.length; i2++) {\n    if (i2 % 3 == 0) {\n      y+=lst [ i2 ]}\n    else\nif (i2 % 4 == 0) {\n      y+=lst [ i2 ] * lst [ i2 ]}\n   \n    }\n  }\n  return y\n}\n  \n  \nconst sumSquares6 = (lst) => {\n  let y = 0\n  for (let i2 = 0; i2 < lst.length; i2++) {\n    if (i2 % 3 == 0) {\n      y+=lst [ i2 ]}\n    else\nif (i2 % 4 == 0) {\n      y+=lst [ i2 ] * lst [ i2 ]}\n   \n    }\n  }\n  return y\n}\n  \n  \nconst sumSquares7 = (lst) => {\n  let y = 0\n  for (let i2 = 0; i2 < lst.length; i2++) {\n    if (i2 % 3 == 0) {\n      y+=lst [ i2 ]}\n    else\nif (i2 % 4 == 0) {\n      y+=lst [ i2 ] * lst [ i2 ]}\n   \n    }\n  }\n  return y\n}\n  \n  \nconst sumSquares8 = (lst) => {\n  let y = 0\n  for (let i2 = 0; i2 < lst.length; i2++) {\n    if (i2 % 3 == 0) {\n      y+=lst [ i2 ]}\n    else\nif (i2 % 4 == 0) {\n      y+=lst [ i2 ] * lst [ i2 ]}\n   \n    }\n  }\n  return y\n}\n  \n  \n  \n  \n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  for (let i2 = 2; i2 <= n; i2++) {\n    if (i2 % 2 == 0) {\n      p.push(1 + i2 / 2)\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    else {\n      p.push(p [ i2 - 2 ] + p [ i2 - 1 ] + 1 +(i2 + 1) / 2)\n      }\n    }\n  return p\n  }\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri =(n) => {\n  if (n == 0) {\n    return [ 1 ]}\n  if (n == 1) {\n    return [ 1, 3 ]}\n  let p = [ 1, 3 ]\n  for (let i2 = 2; i2 <= n; i2++) {\n    if (i2 % 2 == 0) {\n      p.push(1 + i2 / 2)\n     \n    } else {\n      p.push(3 + i2 / 2)\n    }\n  }\n  return p\n}\nconst tri_last = (n) => {\n  if (n == 0) {\n    return 0}\n  if (n == 1) {\n    return 1}\n  let p = 1\n  for (let i = 2; i <= n; i++) {\n    p += i / 2\n  }\n  return p\n}\nconst tri_sum = (n) => {\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += tri(i)\n  }\n  return sum\n}\n\nconst check_tri = (n) => {\n  if (n == 0) {\n    return true}\n  if (n == 1) {\n    return false}\n  for (let i = 2; i <= n; i++) {\n    if (tri(i) == tri(i - 1) + tri(i - 2) + tri(i + 1)) {\n      return true\n    }\n  }\n  return false\n}\n\nconst check_tri_last = (n) => {\n  if (n == 0) {\n    return true}\n  if (n == 1) {\n    return false}\n  let p = tri_last(n)\n  for (let i = 0; i < n; i++) {\n    if (tri(i) == p) {\n      return true\n    }\n  }\n  return false\n}\n\nconst check_tri_sum = (n) => {\n  let sum = tri_sum(n)\n  if (check_tri(sum) && check_tri_last(sum)) {\n    return true\n  }\n  return false\n}\n\nmodule.exports = { check_tri, check_tri_last, check_tri_sum }\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var i2 = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return i2 [ n ];\n  for (let i = 4; i < n + 1; i++) {\n    i2.push(i2.at( - 1) + i2.at( - 2) +\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i2.at( - 3) + i2.at( - 4));\n    i2.shift();\n    }\n  return i2.pop();\n  }\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 =(n) => {\n  var i2 = [ 0, 0, 2, 0 ];\n  if (n < 4)\n  return i2 [ n ];\n  for (let i = 4; i < n + 1; i++) {\n    i2.push(i2.at( - 1) + i2.at( - 2) +\n   \n   i2.at( - 1) + i2.at( - 2) +\n   \n   i2.at( - 1) + i2.at( - 2) +\n   \n   i2.at( - 1) + i2.at( - 2));\n  }\n  return i2.at( - 1);\n};\n\nmodule.exports = fib4;<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  for (let y2 = y; y2 >= x; y2--) {\n    if (y2 % 2 == 0) {\n      return y2}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return - 1\n  }\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum =(x, y) => {\n  for (let y2 = y; y2 >= x; y2--) {\n    if (y2 % 2 == 0) {\n      return y2}\n   \n  }\n  return -1\n};\n\nmodule.exports = chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  for (let i2 = 0; i2 < lst.length; i2++) {\n    if (lst [ i2 ] % 2 == 1 && lst [ i2 ] > 0) {\n      p+=lst [ i2 ] * lst [ i2 ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return p\n  }\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference =(lst) => {\n  let p = 0\n  for (let i2 = 0; i2 < lst.length; i2++) {\n    if (lst [ i2 ] % 2 == 1 && lst [ i2 ] > 0) {\n      p+=lst [ i2 ] * lst [ i2 ]\n     \n    }\n  }\n  return p\n}\n\n\n//\n// doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// doubleTheDifference([-1, -2, 0]) == 0\n// doubleTheDifference([9, -2]) == 81\n// doubleTheDifference([0]) == 0\n//\n//\n//\n// doubleTheDifference([1, 3, 2, 0, -1, -2, 0, 9, -2, 0]) == 81\n// doubleTheDifference([1, 3, 2, 0, -1, -2, 0, 9, -2, 0, 9]) == 2 + 81 + 2 + 81 = 88\n// doubleTheDifference([1, 3, 2, 0, -1, -2, 0, 9, -2, 0, 9, -2]) == 2 + 2 = 4\n// doubleTheDifference([1, 3, 2, 0, -1, -2, 0, 9, -2, 0, 9, -2, 0, 9]) == 0\n// doubleTheDifference([1, 3, 2, 0, -1, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2]) == 0\n// doubleTheDifference([1, 3, 2, 0, -1, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2]) == 0\n// doubleTheDifference([1, 3, 2, 0, -1, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2]) == 0\n// doubleTheDifference([1, 3, 2, 0, -1, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0, 9, -2, 0"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(e2) => {\n  return e2.map(e => e + 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList =(e2) => {\n  return e2.map(e => e + 1);\n \n}\n\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [2, 3, 4]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 4, 5, 3, 4, 4, 9, 1, 122]\n  */\nconst decrList =(e2) => {\n  return e2.map(e => e - 1);\n \n}\n\n\n/*Return list with elements reversed.\n  >>> revList([1, 2, 3])\n  [3, 2, 1]\n  >>> revList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [9, 3, 5, 3, 2, 3, 5, 2, 0]\n  */\nconst revList =(e2) => {\n  return e2.slice().reverse();\n \n}\n\n\n/*Return list with elements reversed.\n  >>> revList2([1, 2, 3])\n  [3, 2, 1]\n  >>> revList2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [9, 3, 5, 3, 2, 3, 5, 2, 0]\n  */\nconst revList2 =(e2) => {\n  return e2.slice().reverse();\n \n}\n\n\n/*Return list with elements reversed.\n  >>> revList3([1, 2, 3])\n  [3, 2, 1]\n  >>> revList3([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [9, 3, 5, 3, 2, 3, 5, 2, 0]\n  */\nconst revList3 =(e2) => {\n  return e2.slice().reverse();\n \n}\n\n\n/*Return list with elements reversed.\n  >>> revList4([1, 2, 3])\n  [3, 2, 1]\n  >>> revList4([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [9, 3, 5, 3, 2, 3, 5, 2, 0]\n  */\nconst revList4 =(e2) => {\n  return e2.slice().reverse();\n \n}\n\n\n/*Return list with elements reversed.\n  >>> revList5([1, 2, 3])\n  [3, 2, 1]\n  >>> revList5([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [9, 3, 5, 3, 2, 3, 5, 2, 0]\n  */\nconst revList5 =(e2) => {\n  return e2.slice().reverse();\n \n}\n\n\n/*Return list with elements reversed.\n  >>> revList6([1, 2, 3])\n  [3, 2, 1]\n  >>> revList6([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [9, 3, 5, 3, 2, 3, 5, 2, 0]\n  */\nconst revList6 =(e2) => {\n  return e2.slice().reverse();\n \n}\n\n\n/*Return list with elements reversed.\n  >>> revList7([1, 2, 3])\n  [3, 2, 1]\n  >>> revList7([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [9, 3, 5, 3, 2, 3, 5, 2, 0]\n  */\nconst revList7 =(e2) => {\n  return e2.slice().reverse();\n \n}\n\n\n/*Return list with elements reversed.\n  >>> revList8([1, 2, 3])\n  [3, 2, 1]\n  >>> revList8([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [9, 3, 5, 3, 2, 3, 5, 2, 0]\n  */\nconst revList8 =(e2) => {\n  return e2.slice().reverse();\n \n}\n\n\n/*Return list with elements reversed.\n  >>> revList9([1, 2, 3])\n  [3, 2, 1]\n  >>> revList9([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [9, 3, 5, 3, 2, 3, 5, 2, 0]\n  */\nconst revList9 =(e2) => {\n  return e2.slice().reverse();\n \n}\n\n\n/*Return list with elements reversed.\n  >>> revList10([1, 2, 3])\n  [3, 2, 1]\n  >>> revList10([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [9, 3, 5, 3, 2, 3, 5, 2, 0]\n  */\nconst revList10 =(e2) => {\n  return e2.slice().reverse();\n \n}\n\n\n/*Return list with elements reversed.\n  >>> revList11([1, 2, 3])\n  [3, 2, 1]\n  >>> revList11([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [9, 3, 5, 3, 2, 3, 5, 2, 0]\n  */\nconst revList11 =(e2) => {\n  return e2.slice().reverse();\n \n}\n\n\n/*Return list with elements reversed.\n  >>> revList12([1, 2, 3])\n  [3, 2, 1]\n  >>> revList12([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [9, 3, 5, 3, 2, 3, 5, 2, 0]\n  */\nconst revList12 =(e2) => {\n  return e2.slice().reverse();\n \n}\n\n\n/*Return list with elements reversed.\n  >>> revList13([1, 2, 3])\n  [3, 2, 1]\n  >>> revList13([5, 3, 5"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  for (let i2 = 0; i2 < s.length - 2; i2++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (s [ i2 ] == s [ i2 + 1 ] || s [ i2 + 1 ] == s [ i2 + 2 ] || s [ i2 ] == s [ i2 + 2 ])\n  return false;\n  return true;\n  }\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy =(s) => {\n  if (s.length < 3)\n  return false;\n  for (let i2 = 0; i2 < s.length - 2; i2++)\n \n  {\n    let i1 = i2 + 1;\n    let i3 = i2 + 2;\n    if (s[i2] == s[i1] && s[i2] == s[i3])\n    {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(x2) => {\n  return x2.filter(x => Number.isInteger(x));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers =(x2) => {\n  return x2.filter(x => Number.isInteger(x));\n \n}\n\n\n/*\n  Filter list of any python values only for floats\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  []\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  */\nconst filterFloats =(x2) => {\n  return x2.filter(x => Number.isFinite(x));\n\n}\n\n\n/*\n  Filter list of any python values only for strings\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  []\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  */\nconst filterStrings =(x2) => {\n  return x2.filter(x => String.isString(x));\n\n}\n\n\n/*\n  Filter list of any python values only for lists\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  []\n  >>> filterLists(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  */\nconst filterLists =(x2) => {\n  return x2.filter(x => x instanceof Array);\n\n}\n\n\n/*\n  Filter list of any python values only for dictionaries\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  []\n  >>> filterDictionaries(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  */\nconst filterDictionaries =(x2) => {\n  return x2.filter(x => x instanceof Object);\n\n}\n\n/*\n  Filter list of any python values only for functions\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  []\n  >>> filterFunctions(['a', 3.14, 5])\n  []\n  */\nconst filterFunctions =(x2) => {\n  return x2.filter(x => typeof x === 'function');\n\n}\n\n\n/*\n  Filter list of any python values only for None\n  >>> filterNone([1, 2, 3, 'abc', {}, []])\n  []\n  >>> filterNone(['a', 3.14, 5])\n  []\n  */\nconst filterNone =(x2) => {\n  return x2.filter(x => x === undefined || x === null);\n\n}\n\n/*\n  Filter list of any python values only for a class\n  >>> filterClass([1, 2, 3, 'abc', {}, []])\n  []\n  >>> filterClass(['a', 3.14, 5])\n  []\n  */\nconst filterClass =(x2) => {\n  return x2.filter(x => typeof x === 'object' && x.constructor === Object);\n\n}\n\n/*\n  Filter list of any python values only for a class\n  >>> filterClass([1, 2, 3, 'abc', {}, []])\n  []\n  >>> filterClass(['a', 3.14, 5])\n  []\n  */\nconst filterClass =(x2) => {\n  return x2.filter(x => typeof x === 'object' && x.constructor === Object);\n\n}\n\nmodule.exports = {\n  filterIntegers,\n  filterFloats,\n  filterStrings,\n  filterLists,\n  filterDictionaries,\n  filterFunctions,\n  filterNone,\n  filterClass\n}\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let arr2 = arr\n  for (let j = 0; j < arr2.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr2.length; k++) {\n      if (arr2 [ k ] < arr2 [ ind ]) {\n        ind = k\n        }\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = arr2 [ j ]\n      arr2 [ j ] = arr2 [ ind ]\n      arr2 [ ind ] = tmp\n      }\n    }\n  if (k == 0) {\n    return [ ]}\n  return arr2.slice( - k)\n  }\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum =(arr, k) => {\n  let arr2 = arr\n  for (let j = 0; j < arr2.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr2.length; k++) {\n      if (arr2 [ k ] < arr2 [ ind ]) {\n        ind = k\n        }\n      }\n   \n    if (k === arr2.length) {\n      k = arr2.length - 1\n    }\n    arr2.splice(ind, 1)\n  }\n  return arr2.slice(0, k)\n}\n\nconst maximum2 =(arr, k) => {\n  let arr2 = arr\n  for (let i = 0; i < arr2.length - k; i++) {\n    let j = i + k - 1\n    if (arr2 [ i ] < arr2 [ j ]) {\n      arr2.splice(j, 1)\n    }\n  }\n  return arr2\n}\n\nconst maximum3 =(arr, k) => {\n  let arr2 = arr\n  for (let i = 0; i < arr2.length - k; i++) {\n    let j = i + k - 1\n    let index = arr2.indexOf(arr2[i])\n    if (index < arr2.indexOf(arr2[j])) {\n      arr2.splice(j, 1)\n    }\n  }\n  return arr2\n}\n\nconst maximum4 =(arr, k) => {\n  let arr2 = arr\n  for (let i = 0; i < arr2.length - k; i++) {\n    let j = i + k - 1\n    let index = arr2.indexOf(arr2[i])\n    if (index > arr2.indexOf(arr2[j])) {\n      arr2.splice(j, 1)\n    }\n  }\n  return arr2\n}\n\nconst maximum5 =(arr, k) => {\n  let arr2 = arr\n  for (let i = 0; i < arr2.length - k; i++) {\n    let j = i + k - 1\n    let index = arr2.indexOf(arr2[i])\n    if (index < arr2.indexOf(arr2[j])) {\n      arr2.splice(j, 1)\n    }\n  }\n  return arr2\n}\n\nconst maximum6 =(arr, k) => {\n  let arr2 = arr\n  for (let i = 0; i < arr2.length - k; i++) {\n    let j = i + k - 1\n    let index = arr2.indexOf(arr2[i])\n    if (index > arr2.indexOf(arr2[j])) {\n      arr2.splice(j, 1)\n    }\n  }\n  return arr2\n}\n\nconst maximum7 =(arr, k) => {\n  let arr2 = arr\n  for (let i = 0; i < arr2.length - k; i++) {\n    let j = i + k - 1\n    let index = arr2.indexOf(arr2[i])\n    if (index < arr2.indexOf(arr2[j])) {\n      arr2.splice(j, 1)\n    }\n  }\n  return arr2\n}\n\nconst maximum8 =(arr, k) => {\n  let arr2 = arr\n  for (let i = 0; i < arr2.length - k; i++) {\n    let j = i + k - 1\n    let index = arr2.indexOf(arr2[i])\n    if (index > arr2.indexOf(arr2[j])) {\n      arr2.splice(j, 1)\n    }\n  }\n  return arr2\n}\n\nconst maximum9 =(arr, k) => {\n  let arr2 = arr\n  for (let i = 0; i < arr2.length - k; i++) {\n    let j = i + k - 1\n    let index = arr2.indexOf(arr2[i])\n    if (index < arr2.indexOf(arr2[j])) {\n      arr2.splice(j, 1)\n    }\n  }\n  return arr2\n}\n\nconst maximum10 =(arr, k) => {\n  let arr2 = arr\n  for (let i = 0; i < arr2.length - k; i++) {\n    let j = i + k - 1\n    let index = arr2.indexOf(arr2[i])\n    if (index > arr2.indexOf(arr2[j])) {\n      arr2.splice(j, 1)\n    }\n  }\n  return arr2\n}\n\nconst maximum11 =(arr, k) => {\n  let arr2 = arr\n  for (let i = 0; i < arr2.length - k; i++) {\n    let j = i + k - 1\n    let index = arr2.indexOf(arr2[i])\n    if (index < arr2.indexOf(arr2[j])) {\n      arr2.splice(j, 1)\n    }\n  }\n  return arr2\n}\n\nconst maximum12 =(arr, k) => {\n  let arr2 = arr\n  for (let i = 0; i < arr2.length - k; i++) {\n    let j = i + k - 1\n    let index = arr2.indexOf(arr2[i])\n    if (index > arr2.indexOf(arr2[j])) {\n      arr2.splice(j, 1)\n    }\n  "}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(x2) => {\n  return x2.map((x, i) => x * i).slice(1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative =(x2) => {\n  return x2.map((x, i) => x * i).slice(1);\n \n};\n\n/*\n  Calculate the factorial of an integer n\n  >>> factorial(5)\n  120\n  >>> factorial(0)\n  1\n  >>> factorial(5.5)\n  NaN\n  >>> factorial(0.5)\n  2.0\n  */\nconst factorial =(x) => {\n  if(x < 0) {\n    throw new Error(\"Factorial of negative numbers is undefined\");\n  }\n\n  if(x === 0) {\n    return 1;\n  }\n\n  return x * factorial(x - 1);\n};\n\n/*\n  Calculate the sum of the sequence of integers.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  56\n  >>> sum([])\n  0\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  45\n  */\nconst sum =(xs) => {\n  return xs.reduce((a, x) => a + x, 0);\n};\n\n/*\n  Calculate the sum of squares of the sequence of integers.\n  >>> sum([1, 2, 3, 4, 5])\n  25\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  328\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  4759\n  >>> sum([])\n  0\n  */\nconst sumOfSquares =(xs) => {\n  return xs.reduce((a, x) => a + x * x, 0);\n};\n\n/*\n  Calculate the sum of the values of the sequence of pairs (x, y)\n  >>> sum([(1, 2), (3, 4), (5, 6)])\n  15\n  >>> sum([(1, 2), (3, 4), (5, 6), (7, 8)])\n  60\n  >>> sum([])\n  0\n  >>> sum([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])\n  45\n  */\nconst sumOfPairs =(xs) => {\n  return xs.reduce((a, x) => a + x[0] * x[1], 0);\n};\n\n/*\n  Calculate the sum of the values of the sequence of pairs (x, y)\n  >>> sum([(1, 2), (3, 4)])\n  7\n  >>> sum([(1, 2), (3, 4), (5, 6)])\n  20\n  >>> sum([])\n  0\n  >>> sum([(1, 2), (3, 4), (5, 6), (7, 8)])\n  48\n  */\nconst sumOfSquaresOfPairs =(xs) => {\n  return xs.reduce((a, x) => a + x[0] * x[1] * x[0] * x[1], 0);\n};\n\n/*\n  Calculate the sum of the values of the sequence of pairs (x, y)\n  >>> sum([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])\n  45\n  >>> sum([])\n  0\n  >>> sum([(1, 2), (3, 4), (5, 6), (7, 8)])\n  28\n  */\nconst sumOfSquaresOfSquares =(xs) => {\n  return xs.reduce((a, x) => a + x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1], 0);\n};\n\n/*\n  Calculate the sum of the values of the sequence of pairs (x, y)\n  >>> sum([(1, 2), (3, 4), (5, 6)])\n  20\n  >>> sum([])\n  0\n  >>> sum([(1, 2), (3, 4), (5, 6), (7, 8)])\n  48\n  */\nconst sumOfSquaresOfPairsOfSquares =(xs) => {\n  return xs.reduce((a, x) => a + x[0] * x[1] * x[0] * x[1] * x[0] * x[1] * x[0] * x[1], 0);\n};\n\n/*\n  Calculate the average value of the sequence of integers.\n  >>> average([1, 2, 3])\n  2.0\n  >>> average([1, 2, 3, 4, 5])\n  3.5\n  >>> average([])\n  NaN\n  >>> average([1, 2, 3, 4, 5, 6, 7, 8])\n  4.5\n  */\nconst average =(xs) => {\n  return sum(xs) / xs.length;\n};\n\n/*\n  Calculate the median of the sequence of integers.\n  >>> median([1, 2, 3])\n  2\n  >>> median([1, 2, 3, 4, 5])\n  3\n  >>> median([])\n  NaN\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8])\n  4.0\n  */\nconst median =(xs) => {\n  const size = xs.length;\n\n  if(size === 0) {\n    throw new Error(\"Median of an empty list is undefined\");\n  }\n\n  if(size === 1) {\n    return xs[0];\n  }\n\n  const halfSize = Math.floor(size / 2);\n  return (xs[halfSize - 1] + xs[halfSize]) / 2;\n};\n\n/*\n  Calculate the mode of the sequence of integers.\n  >>> mode([1, 2"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(string) => {\n  if (string == '') {\n    return null}\n  var md5 = require('js-md5')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return md5(string)\n  }\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 =(string) => {\n  if (string == '') {\n    return null}\n  var md5 = require('js-md5')\n \n  var md5hash = md5(string)\n  return md5hash\n}\n\nconst stringToHash = (string) => {\n  var sha1 = require('js-sha1')\n  var sha1hash = sha1(string)\n  return sha1hash\n}\n\nmodule.exports = {\n  stringToMd5,\n  stringToHash\n}\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    for (let j = 0; j < arr [ i2 ].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr [ i2 ].length; k++) {\n        if (arr [ i2 ] [ k ].charCodeAt() < arr [ i2 ] [ ind ].charCodeAt()) {\n          ind = k\n          }\n        }\n      if (ind > j) {\n        arr [ i2 ] = arr [ i2 ].slice(0, j) + arr [ i2 ] [ ind ] + arr [ i2 ].slice(j + 1, ind) + arr [ i2 ] [ j ] + arr [ i2 ].slice(ind + 1, arr [ i2 ].length)\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    }\n  let t = ''\nfor (let i2 = 0; i2 < arr.length; i2++) {\n    if (i2 > 0) {\n      t = t + ' '}\n    t = t + arr [ i2 ]\n    }\n  return t\n  }\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle =(s) => {\n  let arr = s.split( / s /)\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    for (let j = 0; j < arr [ i2 ].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr [ i2 ].length; k++) {\n        if (arr [ i2 ] [ k ].charCodeAt() < arr [ i2 ] [ ind ].charCodeAt()) {\n          ind = k\n          }\n        }\n      if (ind > j) {\n        arr [ i2 ] = arr [ i2 ].slice(0, j) + arr [ i2 ] [ ind ] + arr [ i2 ].slice(j + 1, ind) + arr [ i2 ] [ j ] + arr [ i2 ].slice(ind + 1, arr [ i2 ].length)\n       \n        }\n      }\n    }\n  return arr.join(\"\")\n}\n\nconsole.log(antiShuffle(\"Hi\"))\nconsole.log(antiShuffle(\"Hello World!!!\"))\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(lines, prefix) => {\n  return lines.filter(x => x.startsWith(prefix));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix =(lines, prefix) => {\n  return lines.filter(x => x.startsWith(prefix));\n \n}\n\n\n/*\n  Returns the longest common prefix of two strings.\n  >>> longestCommonPrefix('abc', 'abc')\n  'abc'\n  >>> longestCommonPrefix('abc', 'abcde')\n  'abc'\n  >>> longestCommonPrefix('abc', 'abcd')\n  ''\n  >>> longestCommonPrefix('abc', 'a')\n  ''\n  >>> longestCommonPrefix('abc', 'ab')\n  'ab'\n  */\nconst longestCommonPrefix =(str1, str2) => {\n  if(str1.length === 0 || str2.length === 0) {\n    return '';\n  }\n\n  let i = 0;\n  let j = 0;\n  while(i < str1.length && j < str2.length) {\n    if(str1[i]!== str2[j]) {\n      break;\n    }\n    i++;\n    j++;\n  }\n  return str1.slice(0, i);\n};\n\n\n/*\n  Returns the longest common suffix of two strings.\n  >>> longestCommonSuffix('abc', 'abc')\n  'abc'\n  >>> longestCommonSuffix('abc', 'abcde')\n  'abc'\n  >>> longestCommonSuffix('abc', 'abcd')\n  ''\n  >>> longestCommonSuffix('abc', 'a')\n  ''\n  >>> longestCommonSuffix('abc', 'ab')\n  'ab'\n  */\nconst longestCommonSuffix =(str1, str2) => {\n  if(str1.length === 0 || str2.length === 0) {\n    return '';\n  }\n\n  let i = 0;\n  let j = 0;\n  while(i < str1.length && j < str2.length) {\n    if(str1[i]!== str2[j]) {\n      break;\n    }\n    i++;\n    j++;\n  }\n  return str1.slice(i);\n};\n\n/*\n  Given two lists of strings, returns the set of all possible permutations of the strings.\n  >>> permute([], [])\n  []\n  >>> permute(['abc'], [])\n  []\n  >>> permute(['abc'], ['a'])\n  ['abc', 'a']\n  >>> permute(['abc'], ['c'])\n  ['abc', 'c']\n  >>> permute(['abc'], ['b', 'c'])\n  ['abc', 'b', 'c']\n  >>> permute(['abc', 'abcd'], ['c', 'd'])\n  ['abc', 'abcd', 'c', 'd', 'cd', 'abcd', 'd', 'cabd', 'acd', 'abcd', 'abdc', 'acbd', 'adc', 'abcd', 'abcdb', 'abd', 'acbd', 'adc', 'acdb', 'ad', 'abcd', 'ab', 'abcd', 'ac', 'abcd', 'a', 'abcd', 'aacd', 'aabd', 'abdc', 'abd', 'acbd', 'adc', 'acdb', 'ad', 'acdb', 'adc', 'adb', 'abdc', 'abd', 'acbd', 'adc', 'abd', 'abcd', 'ab', 'abcd', 'ac', 'abcd', 'a', 'abcd', 'aacd', 'aabd', 'abdc', 'abd', 'acbd', 'adc', 'acdb', 'ad', 'acdb', 'adc', 'adb', 'abdc', 'abd', 'acbd', 'adc', 'abd', 'abcd', 'ab', 'abcd', 'ac', 'abcd', 'a', 'abcd', 'aacd', 'aabd', 'abdc', 'abd', 'acbd', 'adc', 'acdb', 'ad', 'acdb', 'adc', 'adb', 'abdc', 'abd', 'acbd', 'adc', 'abd', 'abcd', 'ab', 'abcd', 'ac', 'abcd', 'a', 'abcd', 'aacd', 'aabd', 'abdc', 'abd', 'acbd', 'adc', 'acdb', 'ad', 'acdb', 'adc', 'adb', 'abdc', 'abd', 'abcd', 'ab', 'abcd', 'ac', 'abcd', 'a', 'abcd', 'aacd', 'aabd', 'abdc', 'abd', 'acbd', 'adc', 'acdb', 'ad', 'acdb', 'adc', 'adb', 'abdc', 'abd', 'abcd', 'ab', 'abcd', 'ac', 'abcd', 'a', 'abcd', 'aacd', 'aabd', 'abdc', 'abd', 'acbd', 'adc', 'acdb', 'ad', 'acdb', 'adc', 'adb', 'abdc', 'abd', 'abcd', 'ab', 'abcd', 'ac', 'abcd', 'a', 'abcd', 'aacd', 'aabd', 'abdc', 'abd', 'acbd', 'adc', 'acdb', 'ad', 'acdb', 'adc', 'adb', 'abdc', 'abd', 'abcd', 'ab', 'abcd', 'ac', 'abcd', 'a', 'abcd', 'aacd', 'aabd', 'abdc', 'abd', 'acbd', 'adc', 'acdb', 'ad', 'acdb', 'adc', 'adb', 'abdc', 'abd', 'abcd', 'ab', 'abcd', 'ac', 'abcd', 'a', 'abcd', 'aacd', 'aabd', 'abdc', 'abd', 'acbd', 'adc', 'acdb', 'ad', 'acdb', 'adc', 'adb', 'abdc', 'abd', 'abcd', 'ab', 'abcd"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let arr2 = lst\n  for (let j = 0; j < arr2.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr2.length; k++) {\n      if (arr2 [ k ] < arr2 [ ind ]) {\n        ind = k\n        }\n      }\n    let tmp = arr2 [ j ]\n    arr2 [ j ] = arr2 [ ind ]\n    arr2 [ ind ] = tmp\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let smallest = arr2 [ 0 ]\n  let pt = 1\n  while (pt < arr2.length) {\n    if (arr2 [ pt ] > smallest) {\n      return arr2 [ pt ]\n      }\n    pt++\n    }\n  return null\n  }\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest =(lst) => {\n  let arr2 = lst\n  for (let j = 0; j < arr2.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr2.length; k++) {\n      if (arr2 [ k ] < arr2 [ ind ]) {\n        ind = k\n        }\n      }\n    let tmp = arr2 [ j ]\n    arr2 [ j ] = arr2 [ ind ]\n    arr2 [ ind ] = tmp\n   \n  }\n  return arr2\n}\n\nconst testArray = [1, 2, 3, 4, 5, 6, 7]\nconsole.log(nextSmallest(testArray))<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let t2 = message [ i ].charCodeAt()\n    if (t2 > 96) {\n      t2-=32}\n    else\nif (t2 != 32 && t2 < 96) {\n      t2+=32}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (t2 == 65 || t2 == 97 || t2 == 69 || t2 == 101 || t2 == 73 || t2 == 105 || t2 == 79 || t2 == 111 || t2 == 85 || t2 == 117) {\n      t2+=2}\n    t+=String.fromCharCode(t2)\n    }\n  return t\n  }\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode =(message) => {\n  let t = ''\nfor (let i = 0; i < message.length; i++) {\n    let t2 = message [ i ].charCodeAt()\n    if (t2 > 96) {\n      t2-=32}\n    else\nif (t2!= 32 && t2 < 96) {\n      t2+=32}\n   \n    t+=String.fromCharCode(t2)\n  }\n  return t\n}\n\nconsole.log(encode('This is a message'))<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let u2 = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      u2++}\n    else {\n      u2--}\n    if (u2 < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && u2 == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  u2 = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      u2++}\n    else {\n      u2--}\n    if (u2 < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && u2 == 0) {\n    return 'Yes'}\n  return 'No'}\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens =(lst) => {\n  let w1 = lst [ 0 ] + lst [ 1 ]\n  let u2 = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1 [ i ] == '(') {\n      u2++}\n    else {\n      u2--}\n    if (u2 < 0) {\n      u = 0;\n      break;\n      }\n    }\n  if (u == 1 && u2 == 0) {\n    return 'Yes'}\n  w1 = lst [ 1 ] + lst [ 0 ]\n \n  return 'No';\n}\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let s = 0;\n    let h = lst [ i ].length\n    for (let j = 0; j < h; j++) {\n      if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n        s++}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    s = s.toString()\n    d.push('the number of odd elements ' + s + 'n the str' + s + 'ng ' + s + ' of the ' + s + 'nput.')\n    }\n  return d\n  }\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount =(lst) => {\n  let d = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    let s = 0;\n    let h = lst [ i ].length\n    for (let j = 0; j < h; j++) {\n      if (lst [ i ] [ j ].charCodeAt() % 2 == 1) {\n        s++}\n     \n    }\n    d.push(s)\n  }\n  return d\n}\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i2 = 0; i2 < key.length; i2++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (key [ i2 ].charCodeAt() < 65 || key [ i2 ].charCodeAt() > 90) {\n        hi = 0}\n      if (key [ i2 ].charCodeAt() < 97 || key [ i2 ].charCodeAt() > 122) {\n        lo = 0}\n      }\n    }\n  if ((lo == 0 && hi == 0) || c == 0) {\n    return false}\n  return true\n  }\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i2 = 0; i2 < key.length; i2++) {\n     \n      if (key[i2] >= 97 && key[i2] <= 122) {\n        if (lo == 1) {\n          lo = 0\n        } else {\n          lo = 1\n        }\n      } else if (key[i2] >= 65 && key[i2] <= 90) {\n        if (hi == 1) {\n          hi = 0\n        } else {\n          hi = 1\n        }\n      } else {\n        return false\n      }\n    }\n  }\n  return c == Object.keys(dict).length\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseNoBrackets =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i2 = 0; i2 < key.length; i2++) {\n     \n      if (key[i2] >= 97 && key[i2] <= 122) {\n        if (lo == 1) {\n          lo = 0\n        } else {\n          lo = 1\n        }\n      } else if (key[i2] >= 65 && key[i2] <= 90) {\n        if (hi == 1) {\n          hi = 0\n        } else {\n          hi = 1\n        }\n      } else {\n        return false\n      }\n    }\n  }\n  return c == Object.keys(dict).length\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseNoBracketsNoBrackets =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i2 = 0; i2 < key.length; i2++) {\n     \n      if (key[i2] >= 97 && key[i2] <= 122) {\n        if (lo == 1) {\n          lo = 0\n        } else {\n          lo = 1\n        }\n      } else if (key[i2] >= 65 && key[i2] <= 90) {\n        if (hi == 1) {\n          hi = 0\n        } else {\n          hi = 1\n        }\n      } else {\n        return false\n      }\n    }\n  }\n  return c == Object.keys(dict).length\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseNoBracketsNoBracketsNoBrackets =(dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i2 = 0; i2 < key.length; i2++) {\n     \n      if (key[i2] >= 97 && key[i2] <= 122) {\n        if (lo == 1) {\n          lo = 0\n        } else {\n          lo = 1\n        }\n      } else if (key[i2] >= 65 && key[i2] <= 90) {\n        if (hi == 1) {\n          hi = 0\n        } else {\n          hi = 1\n        }\n      } else {\n        return false\n      }\n    }\n  }\n  return c == Object.keys(dict).length\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkD"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let i2 = 0; i2 < t.length; i2++) {\n    let len = t [ i2 ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    for (let i = 2; i * i <= len; i++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (len % i == 0) {\n        u = 0}\n      }\n    if (u == 0) {\n      continue}\n    if (p == '') {\n      p+=t [ i2 ]}\n    else {\n      p = p + ' ' + t [ i2 ]}\n    }\n  return p\n  }\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence =(sentence) => {\n  let t = sentence.split( / s /)\n  let p = ''\nfor (let i2 = 0; i2 < t.length; i2++) {\n    let len = t [ i2 ].length;\n    let u = 1\n    if (len == 1 || len == 0) {\n      continue}\n    for (let i = 2; i * i <= len; i++) {\n     \n        if (u * i <= len) {\n            p += t [ i2 ][ i * i - len ]\n            u *= i\n            \n        }\n        \n    }\n    p += t [ i2 ][0]\n    \n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const conc of paren_string) {\n    if (conc == '(') {\n      current_depth+=1;\n      current_string.push(conc);\n      }\n    else\nif (conc == ')') {\n      current_depth-=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      current_string.push(conc);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [ ];\n        }\n      }\n    }\n  \n  return result;\n  }\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const conc of paren_string) {\n    if (conc == '(') {\n      current_depth+=1;\n      current_string.push(conc);\n      }\n    else\nif (conc == ')') {\n      current_depth-=1;\n     \n      if (current_depth < 0) {\n        // Error, found a closing paren before the opening paren\n        // that was opened earlier\n        throw new Error(`Unexpected paren: ${conc}`);\n        }\n      else if (current_depth == 0) {\n        // End of the stack reached. We have a group of nested parentheses,\n        // so we add it to the result and start a new stack\n        result.push(current_string.join(''));\n        current_string = [ ];\n        current_depth = 0;\n        }\n      else {\n        current_string.pop();\n        }\n      }\n    else if (conc == '(') {\n      current_string.push(conc);\n      }\n    else if (conc == ')') {\n      if (current_depth == 0) {\n        // Error, found a closing paren before the opening paren\n        // that was opened earlier\n        throw new Error(`Unexpected paren: ${conc}`);\n        }\n      else {\n        current_string.pop();\n        }\n      }\n    }\n  \n  return result;\n  };\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('((()(()))')\n  ['()()()', '(())()']\n  */\nconst separateParenGroups2 =(paren_string) => {\n  var result = [ ];\n  var current_string = [ ];\n  var current_depth = 0;\n  \n  for (const conc of paren_string) {\n    if (conc == '(') {\n      current_depth+=1;\n      current_string.push(conc);\n      }\n    else\nif (conc == ')') {\n      current_depth-=1;\n     \n      if (current_depth < 0) {\n        // Error, found a closing paren before the opening paren\n        // that was opened earlier\n        throw new Error(`Unexpected paren: ${conc}`);\n        }\n      else if (current_depth == 0) {\n        // End of the stack reached. We have a group of nested parentheses,\n        // so we add it to the result and start a new stack\n        result.push(current_string.join(''));\n        current_string = [ ];\n        current_depth = 0;\n        }\n      else {\n        current_string.pop();\n        }\n      }\n    else if (conc == '(') {\n      current_string.push(conc);\n      }\n    else if (conc == ')') {\n      if (current_depth == 0) {\n        // Error, found a closing paren before the opening paren\n        // that was opened earlier\n        throw new Error(`Unexpected paren: ${conc}`);\n        }\n      else {\n        current_string.pop();\n        }\n      }\n    }\n  \n  return result;\n  };\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(numbers, delimeter) => {\n  if ( !Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  var result2 = [ ];\n  for (const n of numbers) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    result2.push(n, delimeter);\n    }\n  result2.pop();\n  return result2;\n  }\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse =(numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n  return [ ];\n  var result2 = [ ];\n  for (const n of numbers) {\n   \n    if (result2.length == 0) {\n      result2.push(n);\n    } else {\n      result2.push(delimeter);\n      result2.push(n);\n    }\n  }\n  return result2;\n}\n\n/**\n  * Remove duplicate elements from an array\n  * @param numbers an array\n  * @returns a new array with no duplicate elements\n  * @example\n  * ```\n  * remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9]) // returns [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  * ```\n  * @memberof module:list_tools\n  */\nconst remove_duplicates =(numbers) => {\n  const result = [];\n  const new_array = [];\n  for (const n of numbers) {\n    if (new_array.indexOf(n) === -1) {\n      new_array.push(n);\n    }\n  }\n  for (const n of new_array) {\n    result.push(n);\n  }\n  return result;\n}\n\n/**\n  * Find the maximum value in an array\n  * @param numbers an array\n  * @returns the maximum value in the array\n  * @example\n  * ```\n  * max([1, 2, 3]) // returns 3\n  * ```\n  * @memberof module:list_tools\n  */\nconst max =(numbers) => {\n  if (!Array.isArray(numbers)) return null;\n  const result = numbers[0];\n  for (const n of numbers) {\n    if (result < n) result = n;\n  }\n  return result;\n}\n\n/**\n  * Find the minimum value in an array\n  * @param numbers an array\n  * @returns the minimum value in the array\n  * @example\n  * ```\n  * min([1, 2, 3]) // returns 1\n  * ```\n  * @memberof module:list_tools\n  */\nconst min =(numbers) => {\n  if (!Array.isArray(numbers)) return null;\n  const result = numbers[0];\n  for (const n of numbers) {\n    if (result > n) result = n;\n  }\n  return result;\n}\n\n/**\n  * Find the median value in an array\n  * @param numbers an array\n  * @returns the median value in the array\n  * @example\n  * ```\n  * median([1, 2, 3, 4, 5, 6, 7]) // returns 4\n  * ```\n  * @memberof module:list_tools\n  */\nconst median =(numbers) => {\n  if (!Array.isArray(numbers)) return null;\n  const half = Math.floor(numbers.length / 2);\n  return (numbers.length % 2 === 0)? (numbers[half - 1] + numbers[half]) / 2 : numbers[half];\n}\n\n/**\n  * Sort an array using a stable sort algorithm\n  * @param numbers an array\n  * @returns the sorted array\n  * @example\n  * ```\n  * sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) // returns [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  * ```\n  * @memberof module:list_tools\n  */\nconst sort =(numbers) => {\n  const new_numbers = [];\n  const sorted_numbers = [];\n  for (const n of numbers) {\n    sorted_numbers.push(n);\n  }\n  stable_sort(sorted_numbers, (a, b) => {\n    return a - b;\n  });\n  for (const n of sorted_numbers) {\n    new_numbers.push(n);\n  }\n  return new_numbers;\n}\n\nexport default {\n  remove_duplicates,\n  intersperse,\n  max,\n  min,\n  median,\n  sort\n};<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(arr) => {\n  var mean = arr.reduce((prev, item) => {\n    return prev + item;\n    }\n  , 0) / arr.length;\n  return arr.reduce((prev, item) => {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n    }\n  , 0) / arr.length;\n  \n  }\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation =(arr) => {\n  var mean = arr.reduce((prev, item) => {\n    return prev + item;\n    }\n , 0) / arr.length;\n  return arr.reduce((prev, item) => {\n   \n    return Math.abs(item - mean);\n  }\n , 0);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let w = arr [ i ]\n    if (w > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    w = - w\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (w >= 10) {\n      k+=w % 10;\n      w =(w - w % 10) / 10;\n      }\n    k-=w;\n    if (k > 0) {\n      p++}\n    }\n  return p\n  }\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums =(arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let w = arr [ i ]\n    if (w > 0) {\n      p++;\n      continue;\n      }\n    let k = 0\n    w = - w\n   \n    while (w > 0) {\n      k++;\n      w = w / 10\n    }\n    p = p + (k > 0? 1 : 0)\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  for (let i2 = 0; i2 < nums.length; i2++) {\n    if (nums [ i2 ] < 10) {\n      continue}\n    let y = nums [ i2 ].toString()\n    if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      p++\n      }\n    }\n  return p\n  }\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter =(nums) => {\n  let p = 0\n  for (let i2 = 0; i2 < nums.length; i2++) {\n    if (nums [ i2 ] < 10) {\n      continue}\n    let y = nums [ i2 ].toString()\n    if (Number(y [ 0 ]) % 2 == 1 && Number(y [ y.length - 1 ]) % 2 == 1) {\n     \n      p++\n    }\n  }\n  return p\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  for (let su = 0; su < string.length - substring.length + 1; su++) {\n    if (string.slice(su, su + substring.length) == substring) {\n      times+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return times;\n  }\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes =(string, substring) => {\n  var times = 0;\n  for (let su = 0; su < string.length - substring.length + 1; su++) {\n    if (string.slice(su, su + substring.length) == substring) {\n      times+=1;\n     \n    }\n  }\n  return times;\n};\n\n/*\n  Given a string, find the longest substring that contains all the letters in the alphabet.\n  >>> longestCommonSubstring('Hello World!')\n  'Hello'\n  >>> longestCommonSubstring('abcabc')\n  'abc'\n  >>> longestCommonSubstring('abcde')\n  'abc'\n  >>> longestCommonSubstring('a')\n  'a'\n  >>> longestCommonSubstring('aab')\n  'ab'\n  >>> longestCommonSubstring('aabcc')\n  'aab'\n  >>> longestCommonSubstring('aaabc')\n  'aa'\n  >>> longestCommonSubstring('aaaa')\n  'aaa'\n  >>> longestCommonSubstring('aaaaa')\n  'aaa'\n  >>> longestCommonSubstring('aaaaaa')\n  'aaaa'\n  >>> longestCommonSubstring('aaaab')\n  'aaa'\n  >>> longestCommonSubstring('aaaaa')\n  'aaa'\n  >>> longestCommonSubstring('aabccc')\n  'abcc'\n  >>> longestCommonSubstring('aaabcc')\n  'aaab'\n  >>> longestCommonSubstring('aaabbcc')\n  'aaab'\n  >>> longestCommonSubstring('aaabccc')\n  'aaab'\n  >>> longestCommonSubstring('aaabccdd')\n  'aaab'\n  >>> longestCommonSubstring('aabccd')\n  'aab'\n  >>> longestCommonSubstring('aaabcc')\n  'aaab'\n  >>> longestCommonSubstring('aaabccd')\n  'aaab'\n  >>> longestCommonSubstring('aaabcccc')\n  'aaab'\n  >>> longestCommonSubstring('aaabccccd')\n  'aaab'\n  >>> longestCommonSubstring('aaabccdddd')\n  'aaab'\n  >>> longestCommonSubstring('aaabccddddee')\n  'aaab'\n  >>> longestCommonSubstring('aaabccddddeee')\n  'aaab'\n  >>> longestCommonSubstring('a')\n  'a'\n  >>> longestCommonSubstring('aa')\n  'aa'\n  >>> longestCommonSubstring('aaabcccc')\n  'aaab'\n  >>> longestCommonSubstring('aaabccccd')\n  'aaab'\n  >>> longestCommonSubstring('aaabccdd')\n  'aaab'\n  >>> longestCommonSubstring('aaabccdde')\n  'aaab'\n  >>> longestCommonSubstring('aaabccddee')\n  'aaab'\n  >>> longestCommonSubstring('aaabccddddeee')\n  'aaab'\n  >>> longestCommonSubstring('aaabccddddddee')\n  'aaab'\n  >>> longestCommonSubstring('aaabccddddddeee')\n  'aaab'\n  >>> longestCommonSubstring('a')\n  'a'\n  >>> longestCommonSubstring('aaa')\n  'aaa'\n  >>> longestCommonSubstring('aabccccd')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccdee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccdd')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccdddd')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccdddddd')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccdddddddd')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddeee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddddee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddddeee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddddeee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddddeeeee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddddeee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddddeeee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddddeee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddddee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddddee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddddee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddddeeee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddddeee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddddee')\n  'aabcc'\n  >>> longestCommonSubstring('aabccccddddddddddddee')"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  for (let i2 = 0; i2 < text.length; i2++)\n  if (text [ i2 ] != text.at( - i2 - 1))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return false;\n  return true;\n  }\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome =(text) => {\n  for (let i2 = 0; i2 < text.length; i2++)\n  if (text [ i2 ]!= text.at( - i2 - 1))\n \n    return false;\n  return true;\n};\n\n/*\n  Finds the longest palindrome from given string\n  >>> findLongestPalindrome('abcd')\n  'bcd'\n  >>> findLongestPalindrome('abcdcba')\n  'abcd'\n  >>> findLongestPalindrome('abcdd')\n  'abcd'\n  >>> findLongestPalindrome('bbcd')\n  'bbcd'\n  >>> findLongestPalindrome('abbcd')\n  'abcd'\n  */\nconst findLongestPalindrome = (text) => {\n  let longest = text;\n  for (let i = 0; i < text.length - 1; i++)\n  for (let j = i + 1; j < text.length; j++)\n  if (text.at(i) == text.at(j) && text.length - i - j > longest.length)\n    longest = text.substring(i, j + 1);\n  return longest;\n};\n\n/*\n  Finds the shortest palindrome from given string\n  >>> findShortestPalindrome('abcd')\n  'abcd'\n  >>> findShortestPalindrome('abcdcba')\n  'abcd'\n  >>> findShortestPalindrome('abcdd')\n  'abcdd'\n  >>> findShortestPalindrome('abbcd')\n  'abbcd'\n  */\nconst findShortestPalindrome = (text) => {\n  let shortest = text;\n  for (let i = 0; i < text.length - 1; i++)\n  for (let j = i + 1; j < text.length; j++)\n  if (text.at(i) == text.at(j) && text.length - i - j < shortest.length)\n    shortest = text.substring(i, j + 1);\n  return shortest;\n};\n\n/*\n  Returns the number of palindromes in given string\n  >>> countPalindromes('abcd')\n  3\n  >>> countPalindromes('abccd')\n  2\n  >>> countPalindromes('abccbc')\n  0\n  */\nconst countPalindromes = (text) => {\n  let count = 0;\n  for (let i = 0; i < text.length; i++)\n  for (let j = i + 1; j < text.length; j++)\n  if (text.at(i) == text.at(j) && text.length - i - j == text.length - j + i)\n    count++;\n  return count;\n};\n\n/*\n  Returns the number of words in given string\n  >>> countWords('Hello World!')\n  2\n  >>> countWords('Hello World')\n  1\n  >>> countWords('Hello World!')\n  1\n  */\nconst countWords = (text) => {\n  let count = 0;\n  for (let i = 0; i < text.length; i++)\n  if (text.at(i)!='')\n    count++;\n  return count;\n};\n\n/*\n  Returns the number of lines in given string\n  >>> countLines('Hello World!')\n  2\n  >>> countLines('Hello World')\n  1\n  >>> countLines('Hello World!')\n  1\n  */\nconst countLines = (text) => {\n  let count = 0;\n  for (let i = 0; i < text.length; i++)\n  if (text.at(i) == '\\n')\n    count++;\n  return count;\n};\n\n/*\n  Returns the number of lines in given string\n  >>> countWords('Hello World!')\n  2\n  >>> countWords('Hello World')\n  1\n  >>> countWords('Hello World!')\n  1\n  */\nconst countWords = (text) => {\n  let count = 0;\n  for (let i = 0; i < text.length; i++)\n  if (text.at(i)!='')\n    count++;\n  return count;\n};\n\n/*\n  Returns the number of words in given string\n  >>> countWords('Hello World!')\n  2\n  >>> countWords('Hello World')\n  1\n  >>> countWords('Hello World!')\n  1\n  */\nconst countWords = (text) => {\n  let count = 0;\n  for (let i = 0; i < text.length; i++)\n  if (text.at(i)!='')\n    count++;\n  return count;\n};\n\n/*\n  Returns the number of words in given string\n  >>> countWords('Hello World!')\n  2\n  >>> countWords('Hello World')\n  1\n  >>> countWords('Hello World!')\n  1\n  */\nconst countWords = (text) => {\n  let count = 0;\n  for (let i = 0; i < text.length; i++)\n  if (text.at(i)!='')\n    count++;\n  return count;\n};\n\n/*\n  Returns the number of lines in given string\n  >>> countLines('Hello World!')\n  2\n  >>> countLines('Hello World')\n  1\n  >>> countLines('Hello World!')\n  1\n  */\nconst countLines = (text) => {\n  let count = 0;\n  for (let i = 0; i < text.length; i++)\n  if (text.at(i) == '\\n')\n    count++;\n  return count;\n};\n\n/*\n  Returns the number of words in given string\n  >>> countWords('Hello World!')\n  2\n  >>> countWords('Hello World')\n  1\n  >>> countWords('Hello World!')\n  1\n  */\nconst countWords = (text) => {\n  let count = 0;\n  for (let i = 0; i < text.length; i++)\n  if (text.at(i)!='')\n    count++;\n  return count"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(m) => {\n  if ( !Array.isArray(m) || m.length == 0)\n  return null;\n  var maxlen = Math.max(... m.map(x => x.length));\n  for (const s of m) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n      }\n    }\n  }\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest =(m) => {\n  if (!Array.isArray(m) || m.length == 0)\n  return null;\n  var maxlen = Math.max(... m.map(x => x.length));\n  for (const s of m) {\n   \n    if (s.length > maxlen)\n    return s;\n  }\n  return m[0];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  for (let it = extensions.length - 1; it >= 0; it--) {\n    let y = 0\n    for (let j = 0; j < extensions [ it ].length; j++) {\n      let k = extensions [ it ] [ j ].charCodeAt()\n      if (k >= 65 && k <= 90) {\n        y+=1}\n      if (k >= 97 && k <= 122) {\n        y-=1}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (y >= s) {\n      s = y;\n      u = it;\n      }\n    }\n  return class_name + '.' + extensions [ u ]\n  }\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension =(class_name, extensions) => {\n  let u = 0\n  let s = - Infinity\n  for (let it = extensions.length - 1; it >= 0; it--) {\n    let y = 0\n    for (let j = 0; j < extensions [ it ].length; j++) {\n      let k = extensions [ it ] [ j ].charCodeAt()\n      if (k >= 65 && k <= 90) {\n        y+=1}\n      if (k >= 97 && k <= 122) {\n        y-=1}\n     \n    }\n    if (y > s) {\n      s = y\n      u = extensions [ it ]\n    }\n    \n  }\n  return class_name + \".\" + u\n}\n\nmodule.exports = strongestExtension<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 100 && arr [ i2 ] > - 100) {\n      p+=arr [ i2 ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return p\n  }\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 100 && arr [ i2 ] > - 100) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements2 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 1000 && arr [ i2 ] > - 1000) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements3 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 1000000 && arr [ i2 ] > - 1000000) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements4 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 1000000000000 && arr [ i2 ] > - 1000000000000) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements5 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 1000000000000000 && arr [ i2 ] > - 1000000000000000) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements6 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 100000000000000000 && arr [ i2 ] > - 100000000000000000) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements7 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 1000000000000000000 && arr [ i2 ] > - 1000000000000000000) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements8 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 1000000000000000000000 && arr [ i2 ] > - 1000000000000000000000) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements9 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 100000000000000000000000 && arr [ i2 ] > - 100000000000000000000000) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements10 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 1000000000000000000000000 && arr [ i2 ] > - 1000000000000000000000000) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements11 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 10000000000000000000000000 && arr [ i2 ] > - 10000000000000000000000000) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements12 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 100000000000000000000000000 && arr [ i2 ] > - 100000000000000000000000000) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements13 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 1000000000000000000000000000 && arr [ i2 ] > - 1000000000000000000000000000) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements14 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 10000000000000000000000000000 && arr [ i2 ] > - 10000000000000000000000000000) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements15 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 100000000000000000000000000000 && arr [ i2 ] > - 100000000000000000000000000000) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements16 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k; i2++) {\n    if (arr [ i2 ] < 1000000000000000000000000000000 && arr [ i2 ] > - 1000000000000000000000000000000) {\n      p+=arr [ i2 ]}\n   \n  }\n  return p\n}\n\nconst addElements17 =(arr, k) => {\n  let p = 0\n  for (let i2 = 0; i2 < k;"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let arr2 = array\n  let tot = arr2 [ 0 ] + arr2 [ arr2.length - 1 ]\n  for (let j = 0; j < arr2.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr2.length; k++) {\n      if ((tot % 2 == 1 && arr2 [ k ] < arr2 [ ind ]) ||(tot % 2 == 0 && arr2 [ k ] > arr2 [ ind ])) {\n        ind = k\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    let tmp = arr2 [ j ]\n    arr2 [ j ] = arr2 [ ind ]\n    arr2 [ ind ] = tmp\n    }\n  return arr2\n  }\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray =(array) => {\n  let arr2 = array\n  let tot = arr2 [ 0 ] + arr2 [ arr2.length - 1 ]\n  for (let j = 0; j < arr2.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr2.length; k++) {\n      if ((tot % 2 == 1 && arr2 [ k ] < arr2 [ ind ]) ||(tot % 2 == 0 && arr2 [ k ] > arr2 [ ind ])) {\n        ind = k\n       \n      }\n    }\n    if (j!= ind) {\n      let temp = arr2 [ j ]\n      arr2 [ j ] = arr2 [ ind ]\n      arr2 [ ind ] = temp\n    }\n  }\n  return arr2\n}\n\nconst sortArray2 =(array) => {\n  let arr2 = array\n  for (let j = 1; j < arr2.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr2.length; k++) {\n      if (arr2 [ k ] < arr2 [ ind ]) {\n        ind = k\n      }\n    }\n    if (j!= ind) {\n      let temp = arr2 [ j ]\n      arr2 [ j ] = arr2 [ ind ]\n      arr2 [ ind ] = temp\n    }\n  }\n  return arr2\n}\n\nconsole.log(sortArray([5, 4, 3, 2, 1, 0]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]))\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7,"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let i2 = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] == ' ') {\n      i2++}\n    else\nif (i2 > 0) {\n      if (i2 == 1) {\n        t+='_'}\n      if (i2 == 2) {\n        t+='__'}\n      if (i2 > 2) {\n        t+='-'}\n      t+=text [ i ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      i2 = 0;\n      }\n    else {\n      t+=text [ i ]\n      }\n    }\n  if (i2 == 1) {\n    t+='_'}\n  if (i2 == 2) {\n    t+='__'}\n  if (i2 > 2) {\n    t+='-'}\n  return t\n  }\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces =(text) => {\n  let t = '' let i2 = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] =='') {\n      i2++}\n    else\nif (i2 > 0) {\n      if (i2 == 1) {\n        t+='_'}\n      if (i2 == 2) {\n        t+='__'}\n      if (i2 > 2) {\n        t+='-'}\n      t+=text [ i ]\n     \n      i2 = 0}\n    else{\n      t+=text [ i ]\n      }\n    }\n  return t\n}\n\n/*\n  Given a string text, replace all instances of a single\n  space with a hyphen and all instances of two or more\n  spaces with a hyphen-hyphen\n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example-1\"\n  fixSpaces(\" Example 2\") == \"Example--2\"\n  fixSpaces(\" Example   3\") == \"Example--3\"\n  */\nconst fixDoubleSpaces =(text) => {\n  let t = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text [ i ] =='') {\n      if (i + 1 < text.length) {\n        if (text [ i + 1 ] =='') {\n          t+='--'}\n        else\n        {\n          t+='-'}\n        }\n      }\n    else\n      t+=text [ i ]\n    }\n  return t\n}\n\nmodule.exports.fixSpaces = fixSpaces\nmodule.exports.fixDoubleSpaces = fixDoubleSpaces\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, b2) =>(a - b2));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique =(l) => {\n  return Array.from(new Set(l)).sort((a, b2) =>(a - b2));\n \n};\n \n \n \n \n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(b2) => {\n  var sort1 = [ ... b2 ].sort((a, b) => a - b);\n  var sort2 = [ ... b2 ].sort((a, b) => b - a);\n  if (JSON.stringify(b2) === JSON.stringify(sort1) ||\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  JSON.stringify(b2) === JSON.stringify(sort2))\n  return true;\n  return false;\n  }\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic =(b2) => {\n  var sort1 = [... b2 ].sort((a, b) => a - b);\n  var sort2 = [... b2 ].sort((a, b) => b - a);\n  if (JSON.stringify(b2) === JSON.stringify(sort1) ||\n \n  JSON.stringify(b2) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst pareto =(b2) => {\n  var sort1 = [... b2 ].sort((a, b) => a - b);\n  var sort2 = [... b2 ].sort((a, b) => b - a);\n  if (JSON.stringify(b2) === JSON.stringify(sort1) ||\n \n  JSON.stringify(b2) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst pareto1 =(b2) => {\n  var sort1 = [... b2 ].sort((a, b) => a - b);\n  var sort2 = [... b2 ].sort((a, b) => b - a);\n  if (JSON.stringify(b2) === JSON.stringify(sort1) ||\n \n  JSON.stringify(b2) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst lexicographic =(b2) => {\n  var sort1 = [... b2 ].sort((a, b) => a - b);\n  var sort2 = [... b2 ].sort((a, b) => b - a);\n  if (JSON.stringify(b2) === JSON.stringify(sort1) ||\n \n  JSON.stringify(b2) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst lexicographic1 =(b2) => {\n  var sort1 = [... b2 ].sort((a, b) => a - b);\n  var sort2 = [... b2 ].sort((a, b) => b - a);\n  if (JSON.stringify(b2) === JSON.stringify(sort1) ||\n \n  JSON.stringify(b2) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst lexicographic2 =(b2) => {\n  var sort1 = [... b2 ].sort((a, b) => a - b);\n  var sort2 = [... b2 ].sort((a, b) => b - a);\n  if (JSON.stringify(b2) === JSON.stringify(sort1) ||\n \n  JSON.stringify(b2) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst lexicographic3 =(b2) => {\n  var sort1 = [... b2 ].sort((a, b) => a - b);\n  var sort2 = [... b2 ].sort((a, b) => b - a);\n  if (JSON.stringify(b2) === JSON.stringify(sort1) ||\n \n  JSON.stringify(b2) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst lexicographic4 =(b2) => {\n  var sort1 = [... b2 ].sort((a, b) => a - b);\n  var sort2 = [... b2 ].sort((a, b) => b - a);\n  if (JSON.stringify(b2) === JSON.stringify(sort1) ||\n \n  JSON.stringify(b2) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst lexicographic5 =(b2) => {\n  var sort1 = [... b2 ].sort((a, b) => a - b);\n  var sort2 = [... b2 ].sort((a, b) => b - a);\n  if (JSON.stringify(b2) === JSON.stringify(sort1) ||\n \n  JSON.stringify(b2) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst lexicographic6 =(b2) => {\n  var sort1 = [... b2 ].sort((a, b) => a - b);\n  var sort2 = [... b2 ].sort((a, b) => b - a);\n  if (JSON.stringify(b2) === JSON.stringify(sort1) ||\n \n  JSON.stringify(b2) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst lexicographic7 =(b2) => {\n  var sort1 = [... b2 ].sort((a, b) => a - b);\n  var sort2 = [... b2 ].sort((a, b) => b - a);\n  if (JSON.stringify(b2) === JSON.stringify(sort1) ||\n \n  JSON.stringify(b2) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst lexicographic8 =(b2) => {\n  var sort1 = [... b2 ].sort((a, b) => a - b);\n  var sort2 = [... b2 ].sort((a, b) => b - a);\n  if (JSON.stringify(b2) === JSON.stringify(sort1) ||\n \n  JSON.stringify(b2) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst lex"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(lines) => {\n  return lines.join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate =(lines) => {\n  return lines.join('');\n \n};\n\n/* Create a map of words with frequencies\n  >>> word_frequency('the', 'dog', 'the', 'cat', 'is', 'the', 'dog')\n  {'dog': 2, 'cat': 1, 'is': 1}\n  */\nconst word_frequency =(words) => {\n  let words_map = {};\n  for (let i = 0; i < words.length; i++) {\n    words_map[words[i]] = (words_map[words[i]] || 0) + 1;\n  }\n  return words_map;\n};\n\n/*\n  >>> word_frequency('the', 'dog', 'the', 'cat', 'is', 'the', 'dog')\n  {'dog': 2, 'cat': 1, 'is': 1}\n  */\nconst top_words = (words_map) => {\n  let top_words = [];\n  for (let word in words_map) {\n    top_words.push(word);\n    if (words_map[word] === words_map.length - 1) {\n      top_words.push(word);\n    }\n  }\n  return top_words;\n};\n\n/*\n  >>> top_words('the', 'dog', 'the', 'cat', 'is', 'the', 'dog')\n  ['dog', 'is']\n  */\n\nconst average =(array) => {\n  return array.reduce(function(previous, current) {\n    return previous + current;\n  });\n};\n\n/*\n  >>> average([1, 2, 3, 4, 5, 6])\n  5\n  */\n\n/*\n  >>> average([1, 2, 3, 4, 5, 6])\n  5\n  */\n\nconst random_number = (min, max) => {\n  return Math.floor(Math.random() * (max - min) + min);\n};\n\n/*\n  >>> random_number(1, 5)\n  3\n  >>> random_number(1, 5)\n  4\n  >>> random_number(1, 5)\n  3\n  */\n\nconst get_word = (array) => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\n/*\n  >>> get_word(['the', 'dog', 'the', 'cat', 'is', 'the', 'dog'])\n  'dog'\n  */\n\nconst capitalize =(word) => {\n  return word.charAt(0).toUpperCase() + word.slice(1);\n};\n\n/*\n  >>> capitalize('dog')\n  'dog'\n  >>> capitalize('the')\n  'the'\n  */\n\nconst get_first_word = (array) => {\n  return array[0];\n};\n\n/*\n  >>> get_first_word(['the', 'dog', 'the', 'cat', 'is', 'the', 'dog'])\n  'the'\n  */\n\nconst split =(string) => {\n  return string.split('');\n};\n\n/*\n  >>> split('the dog')\n  ['the', 'dog']\n  */\n\nconst replace_spaces = (string) => {\n  return string.replace(/\\s/g, '');\n};\n\n/*\n  >>> replace_spaces('the dog')\n  'the dog'\n  */\n\nconst get_words = (string) => {\n  return split(string);\n};\n\n/*\n  >>> get_words('the dog')\n  ['the', 'dog']\n  */\n\nconst get_nth_word = (array, n) => {\n  return array[n];\n};\n\n/*\n  >>> get_nth_word(['the', 'dog', 'the', 'cat', 'is', 'the', 'dog'], 2)\n  'the'\n  */\n\nconst get_nth_word_from_string = (string, n) => {\n  return split(string)[n];\n};\n\n/*\n  >>> get_nth_word_from_string('the dog', 2)\n  'the'\n  */\n\nconst shuffle = (array) => {\n  let shuffled = array.slice(0);\n  for (let i = 0; i < array.length; i++) {\n    let j = Math.floor(Math.random() * array.length);\n    let item = shuffled[i];\n    shuffled[i] = shuffled[j];\n    shuffled[j] = item;\n  }\n  return shuffled;\n};\n\n/*\n  >>> shuffle([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> shuffle([1, 2, 3, 4, 5, 6])\n  [2, 3, 4, 5, 6, 1]\n  >>> shuffle([1, 2, 3, 4, 5, 6])\n  [3, 4, 5, 6, 1, 2]\n  */\n\nconst find_nth_from_string = (string, n) => {\n  return split(string)[n];\n};\n\n/*\n  >>> find_nth_from_string('the dog', 2)\n  'the'\n  */\n\nconst find_nth_from_list = (list, n) => {\n  return list[n];\n};\n\n/*\n  >>> find_nth_from_list([1, 2, 3, 4, 5, 6], 2)\n  2\n  */\n\nconst find_nth_from_list_with_index = (list, n) => {\n  return list[n - 1];\n};\n\n/*\n  >>> find_nth_from_list_with_index([1, 2, 3, 4, 5, 6], 2)\n  2\n  */\n\nconst find_nth_from_list_with_index_of_index = (list, n) => {\n  return list[list.indexOf(n)];\n};\n\n/*\n  >>> find_nth_from_list_with_index_of_index([1, 2, 3, 4, 5, 6], 2)\n  2\n  */\n\nconst reverse = (list) => {\n  let reversed ="}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let t2 = 0; t2 < lst1.length; t2++) {\n    if (lst1 [ t2 ] % 2 == 0) {\n      t++}\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  for (let t2 = 0; t2 < lst2.length; t2++) {\n    if (lst2 [ t2 ] % 2 == 0) {\n      t++}\n    }\n  if (t >= k) {\n    return 'YES'}\n  return 'NO'}\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange =(lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let t2 = 0; t2 < lst1.length; t2++) {\n    if (lst1 [ t2 ] % 2 == 0) {\n      t++}\n    }\n \n    if (t >= k) {\n      return \"YES\"\n    }\n    else {\n      if (lst2.indexOf(lst1[t]) >= 0) {\n        return \"YES\"\n      }\n      else {\n        return \"NO\"\n      }\n    }\n}\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n// → \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\n// → \"NO\"\nexchange([1, 2, 3, 4], [1, 2, 3])\n// → \"NO\"\nexchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7])\n// → \"NO\"\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(line) => {\n  return line.length;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen =(line) => {\n  return line.length;\n \n};\n\nmodule.exports = strlen;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let y2 = 0; y2 < l; y2++) {\n        if (a [ i + y2 ] != pat [ j + y2 ]) {\n          y = 0}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (y == 1) {\n        return true\n        }\n      }\n    }\n  return false\n  }\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck =(a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let y2 = 0; y2 < l; y2++) {\n        if (a [ i + y2 ]!= pat [ j + y2 ]) {\n          y = 0}\n       \n        }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nconsole.log(cycpatternCheck(\"abcd\",\"abd\"))\nconsole.log(cycpatternCheck(\"hello\",\"ell\"))\nconsole.log(cycpatternCheck(\"whassup\",\"psus\"))\nconsole.log(cycpatternCheck(\"abab\",\"baa\"))\nconsole.log(cycpatternCheck(\"efef\",\"eeff\"))\nconsole.log(cycpatternCheck(\"himenss\",\"simen\"))\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(n) => {\n  return n % 1.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber =(n) => {\n  return n % 1.0;\n \n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger =(n) => {\n  return n - truncateNumber(n);\n}\n\n/* Given a number, it can be converted to a string.\n\n  Return a string representation of the given number.\n  >>> truncateInteger(3.5)\n  '3'\n  >>> truncateNumber(3.5)\n  '3.5'\n  >>> truncateNumber(1.1)\n  '1.1'\n  >>> truncateNumber(-1.1)\n  '-1.1'\n  */\nconst truncateNumberToString =(n) => {\n  if (n > 0) {\n    return (n.toFixed(3));\n  }\n  if (n < 0) {\n    return (n.toFixed(3) + '-');\n  }\n  return '';\n}\n\n/* Given a string, it can be converted to a number.\n\n  Return a number representation of the given string.\n  >>> truncateNumberToString('3.5')\n  3.5\n  >>> truncateNumberToString('3')\n  3\n  >>> truncateNumberToString('3.5')\n  3.5\n  >>> truncateNumberToString('-1.1')\n  -1.1\n  >>> truncateNumberToString('-1.1.1')\n  -1.1.1\n  */\nconst truncateStringToNumber =(n) => {\n  const floatNum = parseFloat(n);\n  if (floatNum > 0) {\n    return floatNum;\n  }\n  if (floatNum < 0) {\n    return floatNum * -1;\n  }\n  return 0;\n}\n\n/* Given a number, it can be converted to a string.\n\n  Return a string representation of the given number.\n  >>> truncateNumberToString(3.5)\n  '3.5'\n  >>> truncateNumberToString(1.1)\n  '1.1'\n  >>> truncateNumberToString(-1.1)\n  '-1.1'\n  */\nconst truncateNumberToString =(n) => {\n  if (n > 0) {\n    return (n.toFixed(3));\n  }\n  if (n < 0) {\n    return (n.toFixed(3) + '-');\n  }\n  return '';\n}\n\n/* Given a string, it can be converted to a number.\n\n  Return a number representation of the given string.\n  >>> truncateStringToNumber('3.5')\n  3.5\n  >>> truncateStringToNumber('3')\n  3\n  >>> truncateStringToNumber('3.5')\n  3.5\n  >>> truncateStringToNumber('-1.1')\n  -1.1\n  >>> truncateStringToNumber('-1.1.1')\n  -1.1.1\n  */\nconst truncateStringToNumber =(n) => {\n  const floatNum = parseFloat(n);\n  if (floatNum > 0) {\n    return floatNum;\n  }\n  if (floatNum < 0) {\n    return floatNum * -1;\n  }\n  return 0;\n}\n\n/* Given a string, it can be converted to a number.\n\n  Return a number representation of the given string.\n  >>> truncateStringToNumber('3.5')\n  3.5\n  >>> truncateStringToNumber('3')\n  3\n  >>> truncateStringToNumber('3.5')\n  3.5\n  >>> truncateStringToNumber('-1.1')\n  -1.1\n  >>> truncateStringToNumber('-1.1.1')\n  -1.1.1\n  */\nconst truncateStringToNumber =(n) => {\n  const floatNum = parseFloat(n);\n  if (floatNum > 0) {\n    return floatNum;\n  }\n  if (floatNum < 0) {\n    return floatNum * -1;\n  }\n  return 0;\n}\n\nmodule.exports = {\n  truncateNumber,\n  truncateNumberToString,\n  truncateStringToNumber\n};<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(p2) => {\n  let p = 1\n  let k = 1\n  while (p2 > 0) {\n    let y = p2 % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    p2 =(p2 - p2 % 10) / 10\n    }\n  if (k == 0) {\n    return p}\n  return 0\n  }\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits =(p2) => {\n  let p = 1\n  let k = 1\n  while (p2 > 0) {\n    let y = p2 % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n     \n    } else {\n      p *= 10; k++\n    }\n    p2 /= 10;\n  }\n  return p;\n}\n\nconst isValid =(p) => {\n  let count = 0\n  for (let i = 1; i <= 9; i++) {\n    if (digits(i)!= 0) {\n      count++\n    }\n  }\n  if (count!= 9) {\n    return false\n  } else {\n    return true\n  }\n}\n\nconst isValidS =(p) => {\n  let count = 0\n  for (let i = 1; i <= 9; i++) {\n    if (digits(p % 10)!= 0) {\n      count++\n    }\n    p /= 10\n  }\n  if (count!= 9) {\n    return false\n  } else {\n    return true\n  }\n}\n\nconst isValidR =(p) => {\n  let count = 0\n  for (let i = 1; i <= 9; i++) {\n    if (digits(p % 10)!= 0) {\n      count++\n    }\n    p /= 10\n  }\n  if (count!= 1) {\n    return false\n  } else {\n    return true\n  }\n}\n\n/*\n  Given an array of digits, return a string representing the number.\n  The digits are stored such that the most significant digit is last.\n  */\nconst convert =(p) => {\n  let s = ''\n  for (let i = 9; i >= 0; i--) {\n    let y = p % 10\n    p /= 10\n    s = y + s\n  }\n  return s\n}\n\nconst isValidB =(p) => {\n  let count = 0\n  for (let i = 1; i <= 9; i++) {\n    if (digits(p % 10)!= 0) {\n      count++\n    }\n    p /= 10\n  }\n  if (count!= 1) {\n    return false\n  } else {\n    return true\n  }\n}\n\n/*\n  Given an integer, return true if it is a palindrome, false otherwise.\n  */\nconst isPalindrome =(p) => {\n  let count = 0\n  let x = p\n  while (x > 0) {\n    count++\n    x /= 10\n  }\n  x = p\n  while (x > 0) {\n    if (p % 10!= x % 10) {\n      return false\n    }\n    x /= 10\n  }\n  return true\n}\n\nconst isPalindromeB =(p) => {\n  let count = 0\n  let x = p\n  while (x > 0) {\n    count++\n    x /= 10\n  }\n  x = p\n  while (x > 0) {\n    if (x % 10!= p % 10) {\n      return false\n    }\n    x /= 10\n  }\n  return true\n}\n\nconst isPalindromeR =(p) => {\n  let count = 0\n  let x = p\n  while (x > 0) {\n    count++\n    x /= 10\n  }\n  x = p\n  while (x > 0) {\n    if (p % 10!= x % 10) {\n      return false\n    }\n    x /= 10\n  }\n  return true\n}\n\nconst isPalindromeS =(p) => {\n  let count = 0\n  let x = p\n  while (x > 0) {\n    count++\n    x /= 10\n  }\n  x = p\n  while (x > 0) {\n    if (p % 10!= x % 10) {\n      return false\n    }\n    x /= 10\n  }\n  return true\n}\n\nconst isPalindromeC =(p) => {\n  let count = 0\n  let x = p\n  while (x > 0) {\n    count++\n    x /= 10\n  }\n  x = p\n  while (x > 0) {\n    if (p % 10!= x % 10) {\n      return false\n    }\n    x /= 10\n  }\n  return true\n}\n\nconst isPalindromeD =(p) => {\n  let count = 0\n  let x = p\n  while (x > 0) {\n    count++\n    x /= 10\n  }\n  x = p\n  while (x > 0) {\n    if (p % 10!= x % 10) {\n      return false\n    }\n    x /= 10\n  }\n  return true\n}\n\nconst isPalindromeE =(p) => {\n  let count = 0\n  let x = p\n  while (x > 0) {\n    count++\n    x /= 10\n  }\n  x = p\n  while (x > 0) {\n    if (p % 10!= x % 10) {\n      return false\n    }\n    x /= 10\n  }\n  return true\n}\n\nconst isPalindromeF =(p) => {\n  let count = 0\n  let x = p\n  while (x > 0) {\n    count++\n    x /= 10\n  }\n  x = p\n  while (x > 0) {\n    if (p % 10!= x % 10) {\n      return false\n    }\n    x /= 10\n  }\n  return true\n}\n\nconst isPalindromeG =(p) => {\n  let count = 0\n  let x = p\n  while (x > 0) {\n    count++\n    x /= 10\n  }\n  x = p\n  while (x > 0) {\n    if (p % 10!= x % 10) {\n      return false\n    }\n    x /= 10\n  }\n  return true\n}\n\nconst isPalindromeH =(p) => {\n  let count = 0\n"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let x = txt.split( / s /)\n  if (x.length > 1) {\n    return x\n    }\n  else {\n    x = txt.split( /, /)\n    if (x.length > 1) {\n      return x\n      }\n    else {\n      let p = 0\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt [ i ].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n          }\n        }\n      return p\n      }\n    }\n  }\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords =(txt) => {\n  let x = txt.split( / s /)\n  if (x.length > 1) {\n    return x\n    }\n  else {\n    x = txt.split( /, /)\n    if (x.length > 1) {\n      return x\n      }\n    else {\n      let p = 0\n     \n      let a = []\n      let b = []\n      let c = []\n      let d = []\n      let e = []\n      let f = []\n      let g = []\n      let h = []\n      let i = []\n      let j = []\n      let k = []\n      let l = []\n      let m = []\n      let n = []\n      let o = []\n      let p = []\n      let q = []\n      let r = []\n      let s = []\n      let t = []\n      let u = []\n      let v = []\n      let w = []\n      let x = []\n      let y = []\n      let z = []\n      let A = []\n      let B = []\n      let C = []\n      let D = []\n      let E = []\n      let F = []\n      let G = []\n      let H = []\n      let I = []\n      let J = []\n      let K = []\n      let L = []\n      let M = []\n      let N = []\n      let O = []\n      let P = []\n      let Q = []\n      let R = []\n      let S = []\n      let T = []\n      let U = []\n      let V = []\n      let W = []\n      let X = []\n      let Y = []\n      let Z = []\n      let aa = []\n      let ab = []\n      let ac = []\n      let ad = []\n      let ae = []\n      let af = []\n      let ag = []\n      let ah = []\n      let ai = []\n      let aj = []\n      let ak = []\n      let al = []\n      let am = []\n      let an = []\n      let ao = []\n      let ap = []\n      let aq = []\n      let ar = []\n      let as = []\n      let at = []\n      let au = []\n      let av = []\n      let aw = []\n      let ax = []\n      let ay = []\n      let az = []\n      let ba = []\n      let bb = []\n      let bc = []\n      let bd = []\n      let be = []\n      let bf = []\n      let bg = []\n      let bh = []\n      let bi = []\n      let bj = []\n      let bk = []\n      let bl = []\n      let bm = []\n      let bn = []\n      let bo = []\n      let bp = []\n      let bq = []\n      let br = []\n      let bs = []\n      let bt = []\n      let bu = []\n      let bv = []\n      let bw = []\n      let bx = []\n      let by = []\n      let bz = []\n      let aA = []\n      let aB = []\n      let aC = []\n      let aD = []\n      let aE = []\n      let aF = []\n      let aG = []\n      let aH = []\n      let aI = []\n      let aJ = []\n      let aK = []\n      let aL = []\n      let aM = []\n      let aN = []\n      let aO = []\n      let aP = []\n      let aQ = []\n      let aR = []\n      let aS = []\n      let aT = []\n      let aU = []\n      let aV = []\n      let aW = []\n      let aX = []\n      let aY = []\n      let aZ = []\n      let baA = []\n      let baB = []\n      let baC = []\n      let baD = []\n      let baE = []\n      let baF = []\n      let baG = []\n      let baH = []\n      let baI = []\n      let baJ = []\n      let baK = []\n      let baL = []\n      let baM = []\n      let baN = []\n      let baO = []\n      let baP = []\n      let baQ = []\n      let baR = []\n      let baS = []\n      let baT = []\n      let baU = []\n      let baV = []\n      let baW = []\n      let baX = []\n      let baY = []\n      let baZ = []\n      let baa = []\n      let bab = []\n      let bac = []\n      let bad = []\n      let bae = []\n      let baf = []\n      let bag = []\n      let bah = []\n      let bii = []\n      let bij = []\n      let bik = []\n      let bil = []\n      let bim = []\n      let bin = []\n      let bio = []\n      let bip = []\n      let biq = []\n      let bir = []\n      let bis = []\n      let bit = []\n      let biu = []\n      let biv = []\n      let biw = []\n      let bix = []\n      let biy = []\n      let biz = []\n      let bba = []\n      let bbb = []\n      let bbc = []\n      let bbd = []\n      let bbe = []\n      let bbf = []\n      let bbg = []\n      let bbh = []\n      let bii = []\n      let bij = []\n      let bik = []\n      let bil = []\n      let bim = []\n      let bin = []\n      let bio = []\n      let bip = []\n      let biq = []\n      let bir = []\n      let bis ="}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var result = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (e1 == e2)\n  result.add(e1);\n  return [ ... result ].sort();\n  }\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common =(l1, l2) => {\n  var result = new Set();\n  for (const e1 of l1)\n  for (const e2 of l2)\n \n    if (e1 === e2)\n    result.add(e1);\n\n  return Array.from(result);\n}\n\n/*\n  Given a set of words, return all the permutations of these words.\n  e.g. words = ['foo', 'bar', 'baz']\n  permutations(words) -> [['foo', 'bar', 'baz'], ['foo', 'baz', 'bar'], ['bar', 'foo', 'baz'], ['bar', 'baz', 'foo'], ['baz', 'foo', 'bar'], ['baz', 'bar', 'foo']]\n\n  */\nconst permutations = (words) => {\n  var result = [];\n  const all_permutations = _.shuffle(words);\n\n  for (const permutation of all_permutations) {\n    result.push(permutation);\n  }\n  return result;\n}\n\n/*\n  Given a list of words, return the list of unique words.\n  e.g. words = ['foo', 'bar', 'baz']\n  unique_words(words) -> ['foo', 'bar', 'baz']\n\n  */\nconst unique_words = (words) => {\n  return new Set(words).values();\n}\n\nmodule.exports = {\n  common,\n  permutations,\n  unique_words\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  for (let i2 = 0; i2 < n; i2++)\n  if (i2 % 11 == 0 || i2 % 13 == 0)\n  ns.push(i2);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n  ans+=(c == '7');\n  return ans;\n  }\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz =(n) => {\n  var ns = [ ], ans = 0;\n  for (let i2 = 0; i2 < n; i2++)\n  if (i2 % 11 == 0 || i2 % 13 == 0)\n  ns.push(i2);\n \n  ns.sort(function(a,b) {return a-b});\n  for (let i3 = 0; i3 < ns.length; i3++)\n  {\n    ans++;\n    console.log(ns[i3]);\n  }\n  return ans;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n  for (let j = 0; j < numbers.length; j++)\n  if (i != j) {\n    let a = numbers [ i ], distance2 = numbers [ j ];\n    if (distance == null) {\n      distance = Math.abs(a - distance2);\n      closest_pair = [ Math.min(a, distance2), Math.max(a, distance2) ];\n      }\n    else {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let new_distance = Math.abs(a - distance2);\n      if (new_distance < distance) {\n        distance = new_distance;\n        closest_pair = [ Math.min(a, distance2), Math.max(a, distance2) ];\n        }\n      }\n    }\n  return closest_pair;\n  }\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements =(numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n  for (let j = 0; j < numbers.length; j++)\n  if (i!= j) {\n    let a = numbers [ i ], distance2 = numbers [ j ];\n    if (distance == null) {\n      distance = Math.abs(a - distance2);\n      closest_pair = [ Math.min(a, distance2), Math.max(a, distance2) ];\n      }\n    else {\n     \n      distance = Math.abs(a - distance2);\n      if (distance < distance) {\n        distance = Math.abs(a - distance2);\n        closest_pair = [ Math.min(a, distance2), Math.max(a, distance2) ];\n      }\n    }\n  }\n  return closest_pair;\n}\n\nconst findClosestElements2 =(numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n  for (let j = 0; j < numbers.length; j++)\n  if (i!= j) {\n    let a = numbers [ i ], distance2 = numbers [ j ];\n    if (distance == null) {\n      distance = Math.abs(a - distance2);\n      closest_pair = [ Math.min(a, distance2), Math.max(a, distance2) ];\n      }\n    else {\n     \n      distance = Math.abs(a - distance2);\n      if (distance < distance) {\n        distance = Math.abs(a - distance2);\n        closest_pair = [ Math.min(a, distance2), Math.max(a, distance2) ];\n      }\n    }\n  }\n  return closest_pair;\n}\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p2 = lst [ i ]\n    if (p2 % 1 != 0) {\n      if (p2 > 0) {\n        p2 = p2 - p2 % 1 + 1}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      else {\n        p2 = - p2; p2 = p2 - p2 % 1}\n      }\n    p+=p2 * p2\n    }\n  return p\n  }\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares =(lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p2 = lst [ i ]\n    if (p2 % 1!= 0) {\n      if (p2 > 0) {\n        p2 = p2 - p2 % 1 + 1}\n     \n      else {\n        p2 = p2 + p2 % 1 - 1\n      }\n    }\n    p = p + p2 * p2\n  }\n  return p\n}\n\nexport default sumSquares\n<|endoftext|>"}
{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j2 = 0; j2 < numbers.length; j2++) {\n      if (i != j2) {\n        let distance = Math.abs(numbers [ i ] - numbers [ j2 ]);\n        if (distance < threshold) {\n          return true;\n         \n", "canonical_solution": "# print('@@this is the line to split##')\n          }\n        }\n      }\n    }\n  return false;\n  }\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements =(numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j2 = 0; j2 < numbers.length; j2++) {\n      if (i!= j2) {\n        let distance = Math.abs(numbers [ i ] - numbers [ j2 ]);\n        if (distance < threshold) {\n          return true;\n         \n        }\n      }\n    }\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  for (let i2 = 2; i2 < n; i2++) {\n    let p = 1\n    for (let j = 2; j * j <= i2; j++) {\n      if (i2 % j == 0) {\n        p = 0; break}\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (p == 1) {\n      t.push(i2)}\n    }\n  return t\n  }\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo =(n) => {\n  let t = [ ]\n  for (let i2 = 2; i2 < n; i2++) {\n    let p = 1\n    for (let j = 2; j * j <= i2; j++) {\n      if (i2 % j == 0) {\n        p = 0; break}\n     \n    }\n    if (p == 1) {\n      t.push(i2)\n    }\n  }\n  return t\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(res2) => {\n  var res = [ ], sw = true;\n  while (res2.length) {\n    res.push(sw ? Math.min(... res2) : Math.max(... res2));\n    res2.splice(res2.indexOf(res.at( - 1)), 1);\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    sw = !sw;\n    }\n  return res;\n  }\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList =(res2) => {\n  var res = [ ], sw = true;\n  while (res2.length) {\n    res.push(sw? Math.min(... res2) : Math.max(... res2));\n    res2.splice(res2.indexOf(res.at( - 1)), 1);\n   \n    sw =!sw;\n  }\n  return res;\n};\n\nconst test = (n) => {\n  console.log(strangeSortList([n]));\n}\n\ntest(1);\ntest(2);\ntest(3);\ntest(4);\ntest(5);\ntest(6);\ntest(7);\ntest(8);\ntest(9);\ntest(10);\ntest(11);\ntest(12);\ntest(13);\ntest(14);\ntest(15);\ntest(16);\ntest(17);\ntest(18);\ntest(19);\ntest(20);\ntest(21);\ntest(22);\ntest(23);\ntest(24);\ntest(25);\ntest(26);\ntest(27);\ntest(28);\ntest(29);\ntest(30);\ntest(31);\ntest(32);\ntest(33);\ntest(34);\ntest(35);\ntest(36);\ntest(37);\ntest(38);\ntest(39);\ntest(40);\ntest(41);\ntest(42);\ntest(43);\ntest(44);\ntest(45);\ntest(46);\ntest(47);\ntest(48);\ntest(49);\ntest(50);\ntest(51);\ntest(52);\ntest(53);\ntest(54);\ntest(55);\ntest(56);\ntest(57);\ntest(58);\ntest(59);\ntest(60);\ntest(61);\ntest(62);\ntest(63);\ntest(64);\ntest(65);\ntest(66);\ntest(67);\ntest(68);\ntest(69);\ntest(70);\ntest(71);\ntest(72);\ntest(73);\ntest(74);\ntest(75);\ntest(76);\ntest(77);\ntest(78);\ntest(79);\ntest(80);\ntest(81);\ntest(82);\ntest(83);\ntest(84);\ntest(85);\ntest(86);\ntest(87);\ntest(88);\ntest(89);\ntest(90);\ntest(91);\ntest(92);\ntest(93);\ntest(94);\ntest(95);\ntest(96);\ntest(97);\ntest(98);\ntest(99);\ntest(100);\ntest(101);\ntest(102);\ntest(103);\ntest(104);\ntest(105);\ntest(106);\ntest(107);\ntest(108);\ntest(109);\ntest(110);\ntest(111);\ntest(112);\ntest(113);\ntest(114);\ntest(115);\ntest(116);\ntest(117);\ntest(118);\ntest(119);\ntest(120);\ntest(121);\ntest(122);\ntest(123);\ntest(124);\ntest(125);\ntest(126);\ntest(127);\ntest(128);\ntest(129);\ntest(130);\ntest(131);\ntest(132);\ntest(133);\ntest(134);\ntest(135);\ntest(136);\ntest(137);\ntest(138);\ntest(139);\ntest(140);\ntest(141);\ntest(142);\ntest(143);\ntest(144);\ntest(145);\ntest(146);\ntest(147);\ntest(148);\ntest(149);\ntest(150);\ntest(151);\ntest(152);\ntest(153);\ntest(154);\ntest(155);\ntest(156);\ntest(157);\ntest(158);\ntest(159);\ntest(160);\ntest(161);\ntest(162);\ntest(163);\ntest(164);\ntest(165);\ntest(166);\ntest(167);\ntest(168);\ntest(169);\ntest(170);\ntest(171);\ntest(172);\ntest(173);\ntest(174);\ntest(175);\ntest(176);\ntest(177);\ntest(178);\ntest(179);\ntest(180);\ntest(181);\ntest(182);\ntest(183);\ntest(184);\ntest(185);\ntest(186);\ntest(187);\ntest(188);\ntest(189);\ntest(190);\ntest(191);\ntest(192);\ntest(193);\ntest(194);\ntest(195);\ntest(196);\ntest(197);\ntest(198);\ntest(199);\ntest(200);\ntest(201);\ntest(202);\ntest(203);\ntest(204);\ntest(205);\ntest(206);\ntest(207);\ntest(208);\ntest(209);\ntest(210);\ntest(211);\ntest(212);\ntest(213);\ntest(214);\ntest(215);\ntest(216);\ntest(217);\ntest(218);\ntest(219);\ntest(220);\ntest(221);\ntest(222);\ntest(223);\ntest(224);\ntest(225);\ntest(226);\ntest(227);\ntest(228);\ntest(229);\ntest(230);\ntest(231);\ntest(232);\ntest(233);\ntest(234);\ntest(235);\ntest(236);\ntest(237);\ntest(238);\ntest(239);\ntest(240);\ntest(241);\ntest(242);\ntest(243);\ntest(244);\ntest(245);\ntest(246);\ntest(247);\ntest(248);\ntest(249);\ntest(250);\ntest(251);\ntest(252);\ntest(253);\ntest(254);\ntest(255);\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, x2) => {\n  if (x % 1 === 0 && y % 1 === 0 && x2 % 1 === 0 &&(x + y === x2 || x + x2 === y || x === y + x2)) {\n    return true\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return false\n  }\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt =(x, y, x2) => {\n  if (x % 1 === 0 && y % 1 === 0 && x2 % 1 === 0 &&(x + y === x2 || x + x2 === y || x === y + x2)) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/* Create a function that takes two numbers.\n  Returns true if one of the numbers is equal to the sum of the other, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  sumInt(5, 2) ➞ true\n  sumInt(3, 2) ➞ false\n  sumInt(3, -2) ➞ true\n  sumInt(3.6, -2.2) ➞ false\n  */\nconst sumInt =(x, y) => {\n  if (x % 1 === 0 && y % 1 === 0 && x + y === x) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/* Create a function that takes a number.\n  Returns true if it is a multiple of 3.\n  Returns false in any other cases.\n  Examples\n  multipleOfThree(3) ➞ true\n  multipleOfThree(6) ➞ false\n  */\nconst multipleOfThree =(x) => {\n  if (x % 3 === 0) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/* Create a function that takes a number.\n  Returns true if it is a multiple of 5.\n  Returns false in any other cases.\n  Examples\n  multipleOfFive(5) ➞ true\n  multipleOfFive(9) ➞ false\n  */\nconst multipleOfFive =(x) => {\n  if (x % 5 === 0) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/* Create a function that takes two numbers.\n  Returns true if they are equal.\n  Returns false in any other cases.\n  Examples\n  equalInt(5, 5) ➞ true\n  equalInt(5, 6) ➞ false\n  */\nconst equalInt =(x, y) => {\n  if (x === y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/* Create a function that takes two numbers.\n  Returns true if they are not equal.\n  Returns false in any other cases.\n  Examples\n  notEqualInt(5, 5) ➞ false\n  notEqualInt(5, 6) ➞ true\n  */\nconst notEqualInt =(x, y) => {\n  if (x!== y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/* Create a function that takes two numbers.\n  Returns true if one of the numbers is less than the other.\n  Returns false in any other cases.\n  Examples\n  lessThanInt(5, 2) ➞ true\n  lessThanInt(5, 4) ➞ false\n  lessThanInt(4, 5) ➞ false\n  */\nconst lessThanInt =(x, y) => {\n  if (x < y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/* Create a function that takes two numbers.\n  Returns true if one of the numbers is less than or equal to the other.\n  Returns false in any other cases.\n  Examples\n  lessThanOrEqualInt(5, 2) ➞ true\n  lessThanOrEqualInt(5, 4) ➞ true\n  lessThanOrEqualInt(4, 5) ➞ true\n  */\nconst lessThanOrEqualInt =(x, y) => {\n  if (x <= y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/* Create a function that takes two numbers.\n  Returns true if one of the numbers is greater than the other.\n  Returns false in any other cases.\n  Examples\n  greaterThanInt(5, 2) ➞ false\n  greaterThanInt(5, 4) ➞ true\n  greaterThanInt(4, 5) ➞ false\n  */\nconst greaterThanInt =(x, y) => {\n  if (x > y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/* Create a function that takes two numbers.\n  Returns true if one of the numbers is greater than or equal to the other.\n  Returns false in any other cases.\n  Examples\n  greaterThanOrEqualInt(5, 2) ➞ true\n  greaterThanOrEqualInt(5, 4) ➞ true\n  greaterThanOrEqualInt(4, 5) ➞ true\n  */\nconst greaterThanOrEqualInt =(x, y) => {\n  if (x >= y) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/* Create a function that takes two numbers.\n  Returns true if the first number is a perfect square.\n  Returns false in any other cases.\n  Examples\n  isPerfectSquare(5) ➞ true\n  isPerfectSquare(6) ➞ false\n  isPerfectSquare(8) ➞ true\n  */\nconst isPerfectSquare =(x) => {\n  if (Math.sqrt(x) === Math.round(Math.sqrt(x))) {\n    return true\n   \n  } else {\n    return false\n  }\n}\n\n/* Create a function that takes two numbers.\n  Returns true if the first number is a perfect square.\n  Returns false in any other cases.\n  Examples\n  isPerfectSquare(5) ➞ true\n  isPerfectSquare(6) ➞ false\n  isPerfectSquare(8) ➞ true\n  */"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(i) => {\n  if (i == 0)\n  return 0;\n  if (i == 1)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fib(i - 1) + fib(i - 2);\n  }\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib =(i) => {\n  if (i == 0)\n  return 0;\n  if (i == 1)\n \n  return 1;\n  return fib(i-1) + fib(i-2);\n}\n\n\n/* Return the first 10 fibonacci numbers.\n  >>> [fib(x) for x in range(10)]\n  [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fib10 =() => {\n  let f = fib(9);\n  for (let i=10; i>0; i--) {\n    f = fib(i-1) + fib(i-2);\n    console.log(f);\n  }\n}\n\n// const fib10 = fib;\n// const fib =(i) => {\n//   if (i == 0)\n//   return 0;\n//   if (i == 1)\n//     return 1;\n//   return fib(i-1) + fib(i-2);\n// }\n\n// const fib = fib;\n// fib(5);\n\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n// fib(9);\n\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib(2);\n// fib(1);\n// fib(0);\n\n// fib(9);\n// fib(8);\n// fib(7);\n// fib(6);\n// fib(5);\n// fib(4);\n// fib(3);\n// fib("}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, s1) => {\n  return JSON.stringify([ ... new Array(s0) ].sort()) === JSON.stringify([ ... new Array(s1) ].sort());\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars =(s0, s1) => {\n  return JSON.stringify([... new Array(s0) ].sort()) === JSON.stringify([... new Array(s1) ].sort());\n \n};\n\n\nmodule.exports = {\n  isPalindrome,\n  findPalindrome,\n  hasDuplicate,\n  sameChars\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(p2) => {\n  let s = - 1\n  let u = - 1\n  if (p2.length == 0) {\n    return ''}\n  for (let i = 0; i < p2.length; i++) {\n    let p = 0\n    for (let j = 0; j < p2 [ i ].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (p2 [ i ] [ j ] == p2 [ i ] [ k ]) {\n          y = 0}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (y == 1) {\n        p++}\n      }\n    if (p > s ||(p == s && p2 [ i ] < p2 [ u ])) {\n      u = i;\n      s = p;\n      }\n    }\n  return p2 [ u ]\n  }\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax =(p2) => {\n  let s = - 1\n  let u = - 1\n  if (p2.length == 0) {\n    return ''}\n  for (let i = 0; i < p2.length; i++) {\n    let p = 0\n    for (let j = 0; j < p2 [ i ].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (p2 [ i ] [ j ] == p2 [ i ] [ k ]) {\n          y = 0}\n       \n      }\n      if (y == 1) {\n        p++\n      }\n    }\n    if (p > u) {\n      s = i\n      u = p}\n  }\n  return p2 [ s ]}\n\n\n\n//Find the first number which appears in an array of numbers.\nconst findFirstNumber = (p2) => {\n  for (let i = 0; i < p2.length; i++) {\n    let p = 0\n    for (let j = 0; j < p2 [ i ].length; j++) {\n      if (p2 [ i ] [ j ] === p2 [ i ]) {\n        p++}\n    }\n    if (p > 0) {\n      return i}\n  }\n  return - 1}\n\n//Find the first number which appears in an array of numbers.\nconst findFirstNumber = (p2) => {\n  let x = - 1\n  for (let i = 0; i < p2.length; i++) {\n    let p = 0\n    for (let j = 0; j < p2 [ i ].length; j++) {\n      if (p2 [ i ] [ j ] === p2 [ i ]) {\n        p++\n      }\n    }\n    if (p > 0) {\n      x = i\n      break}\n  }\n  return x}\n\n//Find the last number which appears in an array of numbers.\nconst findLastNumber = (p2) => {\n  let x = - 1\n  for (let i = 0; i < p2.length; i++) {\n    let p = 0\n    for (let j = 0; j < p2 [ i ].length; j++) {\n      if (p2 [ i ] [ j ] === p2 [ i ]) {\n        p++\n      }\n    }\n    if (p > 0) {\n      x = i\n      break}\n  }\n  return x}\n\n//Find the largest number in an array of numbers.\nconst findLargestNumber = (p2) => {\n  let x = - 1\n  let y = 0\n  for (let i = 0; i < p2.length; i++) {\n    let p = 0\n    for (let j = 0; j < p2 [ i ].length; j++) {\n      if (p2 [ i ] [ j ] > p2 [ i ]) {\n        p++\n      }\n    }\n    if (p > y) {\n      x = i\n      y = p}\n  }\n  return x}\n\n//Find the smallest number in an array of numbers.\nconst findSmallestNumber = (p2) => {\n  let x = - 1\n  let y = 0\n  for (let i = 0; i < p2.length; i++) {\n    let p = 0\n    for (let j = 0; j < p2 [ i ].length; j++) {\n      if (p2 [ i ] [ j ] < p2 [ i ]) {\n        p++\n      }\n    }\n    if (p > y) {\n      x = i\n      y = p}\n  }\n  return x}\n\n\n\n//Find the largest number in an array of numbers.\nconst findLargestNumber = (p2) => {\n  let x = - 1\n  let y = 0\n  for (let i = 0; i < p2.length; i++) {\n    let p = 0\n    for (let j = 0; j < p2 [ i ].length; j++) {\n      if (p2 [ i ] [ j ] > p2 [ i ]) {\n        p++\n      }\n    }\n    if (p > y) {\n      x = i\n      y = p}\n  }\n  return x}\n\n//Find the smallest number in an array of numbers.\nconst findSmallestNumber = (p2) => {\n  let x = - 1\n  let y = 0\n  for (let i = 0; i < p2.length; i++) {\n    let p = 0\n    for (let j = 0; j < p2 [ i ].length; j++) {\n      if (p2 [ i ] [ j ] < p2 [ i ]) {\n        p++\n      }\n    }\n    if (p > y) {\n      x = i\n      y = p}\n  }\n  return x}\n\n//Find the largest number in an array of numbers.\nconst findLargestNumber = (p2) => {\n  let x = - 1\n  let y = 0\n  for (let i = 0; i < p2.length; i++) {\n    let p = 0\n    for (let j = 0; j < p2 [ i ].length; j++) {\n      if (p2 [ i ] [ j ] < p2 [ i ]) {\n        p++\n      }\n    }\n    if (p > y) {\n      x = i\n      y = p}\n  }\n  return x}\n\n//Find the smallest number in an array of numbers.\nconst findSmallestNumber = (p2) => {\n  let x = - 1\n  let y = 0\n  for (let i = 0; i < p2.length; i++) {\n    let p = 0\n    for (let j = 0; j < p2 [ i ].length; j++) {\n      if (p2 [ i ] [ j ] < p2 [ i ]) {\n        p++\n      }\n    }"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, next) => prev + next.length), 0);\n  var l2 = lst2.reduce(((prev, next) => prev + next.length), 0);\n  if (l1 <= l2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return lst1;\n  else\n  return lst2;\n  }\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch =(lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, next) => prev + next.length), 0);\n  var l2 = lst2.reduce(((prev, next) => prev + next.length), 0);\n  if (l1 <= l2)\n \n    return lst1;\n  else\n    return lst2;\n}\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  for (let i2 = 0; i2 < Math.floor(arr.length / 2); i2++)\n  if (arr [ i2 ] != arr.at( - i2 - 1))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  ans++;\n  return ans;\n  }\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange =(arr) => {\n  var ans = 0;\n  for (let i2 = 0; i2 < Math.floor(arr.length / 2); i2++)\n  if (arr [ i2 ]!= arr.at( - i2 - 1))\n \n  {\n    ans++;\n  }\n  return ans;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  \n  var i = [ 0, 1 ];\n  while (true) {\n    i.push(i.at( - 1) + i.at( - 2));\n    if (isPrime(i.at( - 1)))\n    n-=1;\n    if (n == 0)\n    return i.at( - 1);\n    }\n  }\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib =(n) => {\n  var isPrime = function(p) {\n    if (p < 2)\n    return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n      return false;\n      }\n    return true;\n    }\n \n  let fib = function(n) {\n    if (n < 2)\n    return 1;\n    return fib(n - 1) + fib(n - 2);\n    }\n  let ans = fib(n);\n  while (!isPrime(ans))\n  ans = fib(ans);\n  return ans;\n  }\n  \n  \n\nexport default primeFib;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  \n  var largest = 1;\n  for (let i2 = 2; i2 < n + 1; i2++)\n  if (n % i2 == 0 && isPrime(i2))\n  largest = Math.max(largest, i2);\n  return largest;\n  }\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor =(n) => {\n  var isPrime = function(k) {\n    if (k < 2)\n    return false;\n    for (let i = 2; i < k - 1; i++)\n    if (k % i == 0)\n    return false;\n    return true;\n   \n  };\n  let k = 2;\n  while (k < n && isPrime(k))\n  k++;\n  return k;\n};\n\nlet largestPrimeFactor = (n) => {\n  let k = 2;\n  while (k < n && n % k == 0)\n  k++;\n  return k;\n};\n\nlet largestPrimeFactor = (n) => {\n  let k = 2;\n  while (k < n && n % k == 0)\n  k++;\n  return k;\n};\n\nlet largestPrimeFactor = (n) => {\n  let k = 2;\n  while (k < n && n % k == 0)\n  k++;\n  return k;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(i) => {\n  return(i >= 8 && i % 2 == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven =(i) => {\n  return(i >= 8 && i % 2 == 0)\n \n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  Example\n  isEqualToSumEven(5) == true\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(9) == false\n  */\nconst isEqualToSumEven2 =(i) => {\n  return(i >= 8 && i % 2 == 0) && (i >= 9 && i % 3 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive even numbers\n  Example\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(14) == false\n  */\nconst isEqualToSumEven3 =(i) => {\n  return(i >= 8 && i % 2 == 0) && (i >= 9 && i % 3 == 0) && (i >= 10 && i % 5 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 7 positive even numbers\n  Example\n  isEqualToSumEven(7) == true\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(15) == false\n  */\nconst isEqualToSumEven4 =(i) => {\n  return(i >= 8 && i % 2 == 0) && (i >= 9 && i % 3 == 0) && (i >= 10 && i % 5 == 0) && (i >= 11 && i % 7 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive even numbers\n  Example\n  isEqualToSumEven(8) == true\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(15) == false\n  isEqualToSumEven(16) == false\n  */\nconst isEqualToSumEven5 =(i) => {\n  return(i >= 8 && i % 2 == 0) && (i >= 9 && i % 3 == 0) && (i >= 10 && i % 5 == 0) && (i >= 11 && i % 7 == 0) && (i >= 12 && i % 9 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 9 positive even numbers\n  Example\n  isEqualToSumEven(9) == true\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(15) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(17) == false\n  isEqualToSumEven(18) == false\n  isEqualToSumEven(19) == false\n  */\nconst isEqualToSumEven6 =(i) => {\n  return(i >= 8 && i % 2 == 0) && (i >= 9 && i % 3 == 0) && (i >= 10 && i % 5 == 0) && (i >= 11 && i % 7 == 0) && (i >= 12 && i % 9 == 0) && (i >= 13 && i % 11 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 10 positive even numbers\n  Example\n  isEqualToSumEven(10) == true\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(15) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(17) == false\n  isEqualToSumEven(18) == false\n  isEqualToSumEven(19) == false\n  isEqualToSumEven(20) == false\n  */\nconst isEqualToSumEven7 =(i) => {\n  return(i >= 8 && i % 2 == 0) && (i >= 9 && i % 3 == 0) && (i >= 10 && i % 5 == 0) && (i >= 11 && i % 7 == 0) && (i >= 12 && i % 9 == 0) && (i >= 13 && i % 11 == 0) && (i >= 14 && i % 13 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 11 positive even numbers\n  Example\n  isEqualToSumEven(11) == true\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(15) == false\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(17) == false\n  isEqualToSum"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    f *= f2;\n    if (f2 % 2 == 0) {\n      k.push(f)}\n    else {\n      k.push(p)}\n    }\n  return k\n  }\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f =(n) => {\n  let f = 1\n  let p = 0\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      f = f * p;\n      k.push(f);\n    }\n    else {\n      k.push(f);\n    }\n  }\n  return k\n}\n\nconst p =(n) => {\n  let p = 1\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      k.push(p);\n    }\n  }\n  return k\n}\n\nconst fp =(n) => {\n  let f = 1\n  let p = 1\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      f = f * p;\n      k.push(f);\n    }\n    else {\n      k.push(f);\n    }\n  }\n  return k\n}\n\nconst s =(n) => {\n  let p = 1\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      k.push(p);\n    }\n  }\n  return k\n}\n\nconst a =(n) => {\n  let p = 1\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      k.push(p);\n    }\n  }\n  return k\n}\n\nconst pfp =(n) => {\n  let p = 1\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      k.push(p);\n    }\n  }\n  return k\n}\n\nconst t =(n) => {\n  let p = 1\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      k.push(p);\n    }\n  }\n  return k\n}\n\nconst pfpfp =(n) => {\n  let p = 1\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      k.push(p);\n    }\n  }\n  return k\n}\n\nconst aa =(n) => {\n  let p = 1\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      k.push(p);\n    }\n  }\n  return k\n}\n\nconst pfpfpfp =(n) => {\n  let p = 1\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      k.push(p);\n    }\n  }\n  return k\n}\n\nconst e =(n) => {\n  let p = 1\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      k.push(p);\n    }\n  }\n  return k\n}\n\nconst ee =(n) => {\n  let p = 1\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      k.push(p);\n    }\n  }\n  return k\n}\n\nconst fff =(n) => {\n  let p = 1\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      k.push(p);\n    }\n  }\n  return k\n}\n\nconst fffff =(n) => {\n  let p = 1\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      k.push(p);\n    }\n  }\n  return k\n}\n\nconst fffffff =(n) => {\n  let p = 1\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      k.push(p);\n    }\n  }\n  return k\n}\n\nconst aaaaaaa =(n) => {\n  let p = 1\n  let k = [ ]\n  for (let f2 = 1; f2 <= n; f2++) {\n    p+=f2;\n   \n    if (f2 % 2 === 0) {\n      k.push(p);\n    }\n  }\n  return k\n}\n\nconst aaaaaaaaaaa =(n) => {\n  let p = 1\n  let k"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, j2) {\n    if (i == j2)\n    return '0';\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return '1';\n    }\n  return a.split('').map((item, index) => xor(item, b [ index ])).join('');\n  }\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor =(a, b) => {\n  var xor = function(i, j2) {\n    if (i == j2)\n    return '0';\n    else\n   \n    return '1';\n  }\n  var i = a.length;\n  var j = b.length;\n  var output = '';\n  for(var i = 0; i < i; i++){\n    for(var j = 0; j < j; j++){\n      output = xor(i,j);\n    }\n  }\n  return output;\n};\n\n/*\n  Create an array of n numbers ranging from 0 to n - 1,\n  using a for loop\n  >>> createArray(4)\n  [0,1,2,3]\n  */\nconst createArray = (n) => {\n  var a = [];\n  for(var i = 0; i < n; i++){\n    a.push(i);\n  }\n  return a;\n};\n\n/*\n  Perform binary XOR on two arrays of n numbers and return the result\n  as a new array\n  >>> arrayXor(createArray(4), createArray(4))\n  [1,2,3,4]\n  */\nconst arrayXor = (a, b) => {\n  var output = [];\n  for(var i = 0; i < a.length; i++){\n    for(var j = 0; j < b.length; j++){\n      output.push(xor(a[i], b[j]));\n    }\n  }\n  return output;\n};\n\n/*\n  Perform binary XOR on two arrays of n numbers and return the result\n  as a new array\n  >>> arrayXor(createArray(4), createArray(4))\n  [1,2,3,4]\n  */\nconst arrayXor = (a, b) => {\n  var output = [];\n  for(var i = 0; i < a.length; i++){\n    for(var j = 0; j < b.length; j++){\n      output.push(xor(a[i], b[j]));\n    }\n  }\n  return output;\n};\n\n/*\n  Perform binary XOR on two arrays of n numbers and return the result\n  as a new array\n  >>> arrayXor(createArray(4), createArray(4))\n  [1,2,3,4]\n  */\nconst arrayXor = (a, b) => {\n  var output = [];\n  for(var i = 0; i < a.length; i++){\n    for(var j = 0; j < b.length; j++){\n      output.push(xor(a[i], b[j]));\n    }\n  }\n  return output;\n};\n\n/*\n  Perform binary XOR on two arrays of n numbers and return the result\n  as a new array\n  >>> arrayXor(createArray(4), createArray(4))\n  [1,2,3,4]\n  */\nconst arrayXor = (a, b) => {\n  var output = [];\n  for(var i = 0; i < a.length; i++){\n    for(var j = 0; j < b.length; j++){\n      output.push(xor(a[i], b[j]));\n    }\n  }\n  return output;\n};\n\n/*\n  Perform binary XOR on two arrays of n numbers and return the result\n  as a new array\n  >>> arrayXor(createArray(4), createArray(4))\n  [1,2,3,4]\n  */\nconst arrayXor = (a, b) => {\n  var output = [];\n  for(var i = 0; i < a.length; i++){\n    for(var j = 0; j < b.length; j++){\n      output.push(xor(a[i], b[j]));\n    }\n  }\n  return output;\n};\n\n/*\n  Perform binary XOR on two arrays of n numbers and return the result\n  as a new array\n  >>> arrayXor(createArray(4), createArray(4))\n  [1,2,3,4]\n  */\nconst arrayXor = (a, b) => {\n  var output = [];\n  for(var i = 0; i < a.length; i++){\n    for(var j = 0; j < b.length; j++){\n      output.push(xor(a[i], b[j]));\n    }\n  }\n  return output;\n};\n\n/*\n  Perform binary XOR on two arrays of n numbers and return the result\n  as a new array\n  >>> arrayXor(createArray(4), createArray(4))\n  [1,2,3,4]\n  */\nconst arrayXor = (a, b) => {\n  var output = [];\n  for(var i = 0; i < a.length; i++){\n    for(var j = 0; j < b.length; j++){\n      output.push(xor(a[i], b[j]));\n    }\n  }\n  return output;\n};\n\n/*\n  Perform binary XOR on two arrays of n numbers and return the result\n  as a new array\n  >>> arrayXor(createArray(4), createArray(4))\n  [1,2,3,4]\n  */\nconst arrayXor = (a, b) => {\n  var output = [];\n  for(var i = 0; i < a.length; i++){\n    for(var j = 0; j < b.length; j++){\n      output.push(xor(a[i], b[j]));\n    }\n  }\n  return output;\n};\n\n/*\n  Perform binary XOR on two arrays of n numbers and return the result\n  as a new array\n  >>> arrayXor(createArray(4), createArray(4))\n  [1,2,3,4]\n  */\nconst arrayXor = (a, b) => {\n  var output = [];\n  for(var i = 0; i < a.length; i++){\n    for(var j = 0;"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(x2) => {\n  var min_number = Math.min(... x2);\n  var max_number = Math.max(... x2);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return x2.map(x =>(x - min_number) /(max_number - min_number));\n  }\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit =(x2) => {\n  var min_number = Math.min(... x2);\n  var max_number = Math.max(... x2);\n \n  if (min_number > 0) {\n    var new_x = x2.map(num => num / max_number);\n    return new_x;\n  }\n  else if (max_number < 1) {\n    var new_x = x2.map(num => num * max_number);\n    return new_x;\n  }\n  else {\n    return x2;\n  }\n}\n\n/**\n  * Return the list of two-dimensional numbers as a list of two-dimensional vectors, one for each row\n  *\n  *  >>> flatten([[1,2,3],[4,5,6]])\n  *  [1,2,3,4,5,6]\n  *\n  */\nconst flatten = (x) => {\n  return x.reduce((x, y) => x.concat(y), []);\n}\n\n/**\n  * Given a list of numbers, calculate the list of the differences between the first and\n  * subsequent values, i.e. the list of changes between the first number and the second\n  *\n  *  >>> diff([1, 2, 3, 4])\n  *  [1, 1, 2, 3]\n  *\n  */\nconst diff = (x) => {\n  return x.slice(1).reduce((x, y) => x.concat(y - x), []);\n}\n\n/**\n  * Given a list of numbers, calculate the sum of the first and subsequent values, i.e. the list of sums\n  *\n  *  >>> sum([1, 2, 3, 4])\n  *  5\n  *\n  */\nconst sum = (x) => {\n  return x.slice(1).reduce((x, y) => x + y, 0);\n}\n\n/**\n  * Given a list of numbers, calculate the mean of the first and subsequent values, i.e. the list of means\n  *\n  *  >>> mean([1, 2, 3, 4])\n  *  2.5\n  *\n  */\nconst mean = (x) => {\n  return x.slice(1).reduce((x, y) => x + y, 0) / x.length;\n}\n\n/**\n  * Given a list of numbers, calculate the median of the first and subsequent values, i.e. the list of medians\n  *\n  *  >>> median([1, 2, 3, 4])\n  *  2.5\n  *\n  */\nconst median = (x) => {\n  return x.slice(1).reduce((x, y) => x + y, 0) / x.length;\n}\n\n/**\n  * Given a list of numbers, calculate the mode of the first and subsequent values, i.e. the list of modes\n  *\n  *  >>> mode([1, 2, 3, 4])\n  *  2\n  *\n  */\nconst mode = (x) => {\n  var unique = x.reduce((x, y) => x.concat(y), []);\n  var sorted = unique.sort((a, b) => a - b);\n  var modes = [];\n  for (var i = 1; i < sorted.length; i++) {\n    if (i % 2 === 1) {\n      modes.push(sorted[i]);\n    }\n  }\n  return modes[0];\n}\n\n/**\n  * Given a list of numbers, calculate the standard deviation of the first and subsequent values, i.e. the list of standard deviations\n  *\n  *  >>> std([1, 2, 3, 4])\n  *  2.8284271247461903\n  *\n  */\nconst std = (x) => {\n  var x_squared = x.map(x => x * x);\n  var mean_of_squares = sum(x_squared) / x.length;\n  return Math.sqrt(mean_of_squares);\n}\n\n/**\n  * Given a list of numbers, calculate the standard deviation of the first and subsequent values, i.e. the list of standard deviations\n  *\n  *  >>> std([1, 2, 3, 4])\n  *  2.8284271247461903\n  *\n  */\nconst stddev = (x) => {\n  return std(x).sub(mean(x));\n}\n\nmodule.exports = {\n  diff,\n  flatten,\n  sum,\n  mean,\n  median,\n  mode,\n  std,\n  stddev\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let mp = file_name.split( / . /)\n  if (mp.length != 2) {\n    return 'No'}\n  if (mp [ 1 ] != 'txt' && mp [ 1 ] != 'dll' && mp [ 1 ] != 'exe') {\n    return 'No'}\n  if (mp [ 0 ] == '') {\n    return 'No'}\n  let a = mp [ 0 ] [ 0 ].charCodeAt()\n  if ( !((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < mp [ 0 ].length; i++) {\n    if (mp [ 0 ] [ i ].charCodeAt() >= 48 && mp [ 0 ] [ i ].charCodeAt() <= 57) {\n      y++}\n    if (y > 3) {\n      return 'No'}\n    }\n  return 'Yes'}\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck =(file_name) => {\n  let mp = file_name.split( /. /)\n  if (mp.length!= 2) {\n    return 'No'}\n  if (mp [ 1 ]!= 'txt' && mp [ 1 ]!= 'dll' && mp [ 1 ]!= 'exe') {\n    return 'No'}\n  if (mp [ 0 ] == '') {\n    return 'No'}\n  let a = mp [ 0 ] [ 0 ].charCodeAt()\n  if (!((a >= 65 && a <= 90) ||(a >= 97 && a <= 122))) {\n    return 'No'}\n \n  return 'Yes'}\n\n/* Given a string containing only digits, return a new string with the digits \n  in reverse order. For example, given the string \"1234\", the function should return \"4321\".\n  Example 1:\n  stringReverse(\"1234\") # => \"4321\"\n  Example 2:\n  stringReverse(\"1\") # => \"1\"\n  */\nconst stringReverse =(string) => {\n  let m = string.split('')\n  for (let i = 0; i < m.length / 2; i++) {\n    let temp = m[ i ]\n    m[ i ] = m[ m.length - 1 - i ]\n    m[ m.length - 1 - i ] = temp\n  }\n  return m.join('')\n}\n\n/* Given two strings, return a new string that contains the characters in the first string followed by the characters in the second string. For example, given the strings \"abc\" and \"xyz\", the function should return \"abcxyz\".\n  Example 1:\n  concat(\"abc\", \"xyz\") # => \"abcxyz\"\n  Example 2:\n  concat(\"xyz\", \"abc\") # => \"abcxyz\"\n  */\nconst concat =(s1, s2) => {\n  let m = []\n  for (let i = 0; i < s1.length; i++) {\n    m.push(s1 [ i ])\n  }\n  for (let i = 0; i < s2.length; i++) {\n    m.push(s2 [ i ])\n  }\n  return m.join('')\n}\n\n/* Given two strings, return a new string that contains the characters in the second string followed by the characters in the first string. For example, given the strings \"abc\" and \"xyz\", the function should return \"xyzabc\".\n  Example 1:\n  concat(\"abc\", \"xyz\") # => \"xyzabc\"\n  Example 2:\n  concat(\"xyz\", \"abc\") # => \"xyzabc\"\n  */\nconst reverse =(s1, s2) => {\n  let m = []\n  for (let i = 0; i < s2.length; i++) {\n    m.push(s2 [ i ])\n  }\n  for (let i = 0; i < s1.length; i++) {\n    m.push(s1 [ i ])\n  }\n  return m.join('')\n}\n\n/* Given a string and a string containing a replacement character, return a new string with every instance of the first string replaced by the second string. For example, given the string \"cat\" and \"hat\", the function should return \"that\".\n  Example 1:\n  replace(\"cat\", \"hat\") # => \"that\"\n  Example 2:\n  replace(\"hat\", \"cat\") # => \"that\"\n  */\nconst replace =(s1, s2) => {\n  let m = []\n  for (let i = 0; i < s1.length; i++) {\n    m.push(s1 [ i ])\n  }\n  for (let i = 0; i < s2.length; i++) {\n    m.push(s2 [ i ])\n  }\n  return m.join('')\n}\n\n/* Given two strings, return a new string with the first string followed by the second string, with any common characters between the two strings replaced by '*'. For example, given the strings \"cat\" and \"hat\", the function should return \"cathat\".\n  Example 1:\n  concat(\"cat\", \"hat\") # => \"cathat\"\n  Example 2:\n  concat(\"hat\", \"cat\") # => \"cathat\"\n  */\nconst concatWithStar =(s1, s2) => {\n  let m = []\n  for (let i = 0; i < s1.length; i++) {\n    m.push(s1 [ i ])\n  }\n  for (let i = 0; i < s2.length; i++) {\n    m.push(s2 [ i ])\n  }\n  return m.join('')\n}\n\n/* Given two strings, return a new string with the first string followed by the second string, with common characters between the two strings replaced by''. For example, given the strings \"cat\" and \"hat\", the function should return \"cat hat\".\n  Example 1:\n  concat(\"cat\", \"hat\") # => \"cat hat\"\n  Example 2:\n  concat(\"hat\", \"cat\") # => \"cat hat\"\n  */\nconst concatWithSpace =(s1, s2) => {\n  let m = []\n  for (let i = 0; i < s1.length; i++) {\n    m.push(s1 [ i ])\n  }\n  for (let i = 0; i < s2.length; i++) {\n    m.push(s2 [ i ])\n  }\n  return m.join('')"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let code = char.charCodeAt(0)\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            return prev +(code > 64 && code < 91 ? code : 0);\n            }\n      , 0);\n      }\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum =(s) => {\n      if (s == '') return 0;\n      return s.split('').reduce((prev, char) => {\n            let code = char.charCodeAt(0)\n           \n            if (code >= 97 && code <= 122) {\n                return prev + (code - 97)\n            }\n            return prev\n      }, 0);\n};\n\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(arr, substring) => {\n  return arr.filter(x => x.indexOf(substring) != - 1);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring =(arr, substring) => {\n  return arr.filter(x => x.indexOf(substring)!= - 1);\n \n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring2 =(arr, substring) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].indexOf(substring)!= - 1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n \n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring3 =(arr, substring) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let index = arr[i].indexOf(substring);\n    if (index!= -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n \n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring4 =(arr, substring) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let index = arr[i].indexOf(substring);\n    if (index!= -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n \n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring5 =(arr, substring) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let index = arr[i].indexOf(substring);\n    if (index!= -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n \n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring6 =(arr, substring) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let index = arr[i].indexOf(substring);\n    if (index!= -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n \n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring7 =(arr, substring) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let index = arr[i].indexOf(substring);\n    if (index!= -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n \n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring8 =(arr, substring) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let index = arr[i].indexOf(substring);\n    if (index!= -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n \n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring9 =(arr, substring) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let index = arr[i].indexOf(substring);\n    if (index!= -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n \n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring10 =(arr, substring) => {\n  let result = [];\n  for (let i = 0; i < arr.length; i++) {\n    let index = arr[i].indexOf(substring);\n    if (index!= -1) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n \n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring11 =(arr, substring) => {\n  let result = [];\n  for (let i = 0; i <"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr2) => {\n  if (arr2.length == 0) return [ ];\n  var evens = arr2.filter(x => x % 2 == 0);\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (evens.length == 0) return [ ];\n  return [ Math.min(... evens), arr2.indexOf(Math.min(... evens)) ];\n  }\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck =(arr2) => {\n  if (arr2.length == 0) return [ ];\n  var evens = arr2.filter(x => x % 2 == 0);\n \n  var min = evens[0];\n  var min_index = evens.indexOf(min);\n  var result = [min, min_index];\n  \n  var len = evens.length;\n  for (var i = 1; i < len; i++) {\n    var next = evens[i];\n    if (next > min) {\n      min = next;\n      min_index = i;\n    }\n  }\n  result[1] = min_index;\n  return result;\n};\n\nconsole.log(pluck([1,2,3]));\nconsole.log(pluck([4,2,3]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2, 5, 0, 3, 0, 4, 2, 5, 0, 3, 0, 4, 2]));<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i2 = operator.length - 1; i2 >= 0; i2--) {\n      if (operator [ i2 ] == '**') {\n        let u = operand [ i2 ]\n        while (operand [ i2 + 1 ] > 1) {\n          operand [ i2 + 1 ]--;\n          operand [ i2 ] *= u;\n          }\n        operand.splice(i2 + 1, 1)\n        operator.splice(i2, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let i2 = 0; i2 < operator.length; i2++) {\n      if (operator [ i2 ] == '*') {\n        operand [ i2 ] *= operand [ i2 + 1 ]\n        operand.splice(i2 + 1, 1)\n        operator.splice(i2, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i2 ] == '//') {\n        operand [ i2 ] =(operand [ i2 ] - operand [ i2 ] % operand [ i2 + 1 ]) / operand [ i2 + 1 ]\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        operand.splice(i2 + 1, 1)\n        operator.splice(i2, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let i2 = 0; i2 < operator.length; i2++) {\n      if (operator [ i2 ] == '+') {\n        operand [ i2 ]+=operand [ i2 + 1 ]\n        operand.splice(i2 + 1, 1)\n        operator.splice(i2, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i2 ] == '-') {\n        operand [ i2 ]-=operand [ i2 + 1 ]\n        operand.splice(i2 + 1, 1)\n        operator.splice(i2, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    }\n  return operand [ 0 ]\n  }\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i2 = operator.length - 1; i2 >= 0; i2--) {\n      if (operator [ i2 ] == '**') {\n        let u = operand [ i2 ]\n        while (operand [ i2 + 1 ] > 1) {\n          operand [ i2 + 1 ]--;\n          operand [ i2 ] *= u;\n          }\n        operand.splice(i2 + 1, 1)\n        operator.splice(i2, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let i2 = 0; i2 < operator.length; i2++) {\n      if (operator [ i2 ] == '*') {\n        operand [ i2 ] *= operand [ i2 + 1 ]\n        operand.splice(i2 + 1, 1)\n        operator.splice(i2, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i2 ] == '//') {\n        operand [ i2 ] =(operand [ i2 ] - operand [ i2 ] % operand [ i2 + 1 ]) / operand [ i2 + 1 ]\n       \n        operand.splice(i2 + 1, 1)\n        operator.splice(i2, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i2 ] == '-') {\n        operand [ i2 ] = operand [ i2 ] - operand [ i2 + 1 ]\n        operand.splice(i2 + 1, 1)\n        operator.splice(i2, 1)\n        y = 1;\n        break;\n        }\n      else\nif (operator [ i2 ] == '+') {\n        operand [ i2 ] = operand [ i2 ] + operand [ i2 + 1 ]\n        operand.splice(i2 + 1, 1)\n        operator.splice(i2, 1)\n        y = 1;\n        break;\n        }\n      }\n    if (y == 1) {\n      continue\n      }\n    break\n    }\n  if (operand.length == 1) {\n    return operand [ 0 ]\n    }\n  if (operand.length == 0) {\n    return 0\n    }\n  let result = 0\n  for (let i = 0; i < operand.length; i++) {\n    result = result + (operand [ i ] * operator [ i ])\n    }\n  return result\n  }\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra2 =(operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i2 = operator.length - 1; i2 >= 0; i2--) {\n      if (operator [ i2 ] == '**') {\n        let u = operand [ i2 ]\n        while (operand [ i2 + 1 ] > 1) {\n          operand [ i2 + 1 ]--;\n          operand [ i2 ] *= u;\n          }\n        operand.splice(i2 + 1, 1)\n        operator.splice(i2, 1)\n        y = 1\n        break\n        }\n      }\n    if (y == 1) {\n      continue}\n    for (let i2 = 0; i2 < operator.length; i2++) {\n      if (operator [ i2 ] == '*') {\n        operand [ i2 ] *= operand [ i2 + 1 ]\n        operand.splice(i2 + 1, 1)\n        operator.splice(i2, 1)\n        y = 1\n        break\n        }\n      else\nif (operator [ i2 ] == '//') {\n        operand [ i2 ] =(operand [ i2 ] - operand [ i2 ] % operand [ i2 + 1 ]) / operand [ i2 + 1 ]\n       \n        operand.splice(i2 + 1, 1)\n        operator.splice(i2, 1)\n        y = 1\n        break\n        }\n      else\nif (operator [ i2 ] == '-') {\n        operand [ i2 ] = operand [ i2 ] - operand [ i2 + 1 ]\n        operand.splice(i2 + 1, 1)\n        operator.splice(i2, 1)\n        y = 1\n        break\n        }\n      else\nif (operator [ i"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, need2) => {\n  if (need <= need2) {\n    return [ need + number, need2 - need ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return [ need2 + number, 0 ]\n  }\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat =(number, need, need2) => {\n  if (need <= need2) {\n    return [ need + number, need2 - need ]\n   \n  } else {\n    return [ number, need2 - need ]\n  }\n}\n\nconst result = (number, need, remaining) => {\n  const [ eaten, left ] = eat(number, need, remaining)\n  console.log(`you ate ${eaten} carrots and still need ${left}`)\n}\n\nresult(2, 3, 4)\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let x2 = n\n  if (x2 == 1 || x2 == 0) {\n    return y}\n  for (let i = 2; i * i <= x2; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (x2 % i == 0) {\n      return y}\n    }\n  return x\n  }\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY =(n, x, y) => {\n  let x2 = n\n  if (x2 == 1 || x2 == 0) {\n    return y}\n  for (let i = 2; i * i <= x2; i++) {\n   \n    if (x2 % i == 0) {\n      return y\n    }\n  }\n  return x\n}\n\nconsole.log(xOrY(13, 12, 17))\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let k2 = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst [ i ]; j++) {\n      if (lst [ i ] % j == 0) {\n        p = 0; break}\n      }\n    if (p == 1 && lst [ i ] > k2) {\n      k2 = lst [ i ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let k = 0\n  while (k2 != 0) {\n    k+=k2 % 10\n    k2 =(k2 - k2 % 10) / 10\n    }\n  return k\n  }\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd =(lst) => {\n  let k2 = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst [ i ]; j++) {\n      if (lst [ i ] % j == 0) {\n        p = 0; break}\n      }\n    if (p == 1 && lst [ i ] > k2) {\n      k2 = lst [ i ]}\n   \n  }\n  return k2\n}\n\nconst main =(lst) => {\n  return skjkasdkd(lst)\n}\n\nmain(lst)\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let i2 = 0; i2 < p.length; i2++) {\n    let ind = i2\n    for (let k = i2 + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > i2) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      let tmp = p [ i2 ]\n      p [ i2 ] = p [ ind ]\n      p [ ind ] = tmp\n      }\n    }\n  let l = [ 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine' ]\n  let t = [ ]\n  for (let i2 = 0; i2 < p.length; i2++) {\n    t.push(l [ p [ i2 ] - 1 ])\n    }\n  return t\n  }\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let i2 = 0; i2 < p.length; i2++) {\n    let ind = i2\n    for (let k = i2 + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > i2) {\n     \n      p [ i2 ] = p [ ind ]\n      p [ ind ] = p [ i2 ]\n      }\n    }\n  return p\n};\nconst reverse =(arr) => {\n  p = [ ]\n  for (let i = 0; i < arr.length; i++) {\n    if (arr [ i ] > 0 && arr [ i ] < 10) {\n      p.push(arr [ i ])}\n    }\n  for (let i2 = 0; i2 < p.length; i2++) {\n    let ind = p.length - i2 - 1\n    for (let k = i2 + 1; k < p.length; k++) {\n      if (p [ k ] > p [ ind ]) {\n        ind = k\n        }\n      }\n    if (ind > i2) {\n     \n      p [ i2 ] = p [ ind ]\n      p [ ind ] = p [ i2 ]\n      }\n    }\n  return p\n};\nconst byLengthThenReverse =(arr) => {\n  p = byLength(arr)\n  for (let i = 0; i < p.length; i++) {\n    p [ i ] = reverse(p [ i ])\n    }\n  return p\n};\nconst sort =(arr) => {\n  return byLengthThenReverse(arr)\n};\n\nlet test = [0,1,2,3,4,5,6,7,8,9]\ntest = sort(test)\nconsole.log(test)\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(n) => {\n  n = Number(n)\n  let t = n % 1\n  if (t < 0.5 && t > - 0.5) {\n    n-=t}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else {\n    n+=t}\n  return n\n  }\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger =(n) => {\n  n = Number(n)\n  let t = n % 1\n  if (t < 0.5 && t > - 0.5) {\n    n-=t}\n \n  return n\n}\n\n\n/* Create a function that returns the number of rows in a table.\n  The table is specified by the number of rows (n), the number of columns\n  (m), and the number of rows per column (r).\n  Examples\n  >>> rows(3, 3, 2)\n  6\n  >>> rows(2, 3, 4)\n  3\n  >>> rows(3, 3, 1)\n  1\n  Note:\n  This function returns the number of rows in a table, not the number of\n  columns in the table.\n  */\nconst rows = (n, m, r) => {\n  return m * (Math.ceil(n / r) - 1) + (n % r == 0? 0 : 1)\n}\n\n/* Create a function that returns the number of columns in a table.\n  The table is specified by the number of rows (n), the number of columns\n  (m), and the number of rows per column (r).\n  Examples\n  >>> columns(3, 3, 2)\n  3\n  >>> columns(3, 3, 1)\n  2\n  >>> columns(2, 3, 4)\n  1\n  Note:\n  This function returns the number of columns in a table, not the number of\n  rows in the table.\n  */\nconst columns = (n, m, r) => {\n  return m * (Math.ceil(n / r) - 1) + (n % r == 0? 0 : 1)\n}\n\n/* Create a function that returns the product of the elements of an array.\n  Examples\n  >>> product([1, 2, 3, 4])\n  24\n  >>> product([5, 6, 7])\n  210\n  */\nconst product = (n) => {\n  return Math.reduce(n, (previous, current) => previous * current, 1)\n}\n\n/* Create a function that returns the square root of a number.\n  Examples\n  >>> squareRoot(9)\n  3\n  >>> squareRoot(3)\n  3\n  */\nconst squareRoot = (n) => {\n  return Math.sqrt(n)\n}\n\n/* Create a function that returns the sum of the elements of an array.\n  Examples\n  >>> sum([1, 2, 3, 4])\n  9\n  >>> sum([5, 6, 7])\n  22\n  */\nconst sum = (n) => {\n  return n.reduce((previous, current) => previous + current, 0)\n}\n\n/* Create a function that returns the sum of squares of the elements of an array.\n  Examples\n  >>> sumSquares([1, 2, 3, 4])\n  25\n  >>> sumSquares([5, 6, 7])\n  42\n  */\nconst sumSquares = (n) => {\n  return n.reduce((previous, current) => previous + current * current, 0)\n}\n\n/* Create a function that returns the mean of the elements of an array.\n  Examples\n  >>> mean([1, 2, 3, 4])\n  2.5\n  >>> mean([5, 6, 7])\n  5.5\n  */\nconst mean = (n) => {\n  return sum(n) / n.length\n}\n\n/* Create a function that returns the median of the elements of an array.\n  Examples\n  >>> median([1, 2, 3, 4])\n  3\n  >>> median([5, 6, 7])\n  6\n  */\nconst median = (n) => {\n  let sortedArray = n.sort((a, b) => a - b)\n  return sortedArray[Math.floor(sortedArray.length / 2)]\n}\n\n/* Create a function that returns the mode of the elements of an array.\n  Examples\n  >>> mode([1, 2, 3, 4])\n  2\n  >>> mode([5, 6, 7])\n  7\n  */\nconst mode = (n) => {\n  let uniqueArray = n.filter((element, index, array) => array.indexOf(element) == index)\n  return uniqueArray[0]\n}\n\n/* Create a function that returns the mode of the elements of an array.\n  Examples\n  >>> mode([1, 2, 3, 4])\n  2\n  >>> mode([5, 6, 7])\n  7\n  */\nconst modeArray = (n) => {\n  let uniqueArray = n.filter((element, index, array) => array.indexOf(element) == index)\n  return uniqueArray.length\n}\n\n/* Create a function that returns the mode of the elements of an array.\n  Examples\n  >>> modeArray([1, 2, 3, 4])\n  2\n  >>> modeArray([5, 6, 7])\n  7\n  */\nconst modeArray2 = (n) => {\n  let uniqueArray = n.filter((element, index, array) => array.indexOf(element) == index)\n  return uniqueArray.map(x => x).sort((a, b) => a - b)\n}\n\n/* Create a function that returns the mode of the elements of an array.\n  Examples\n  >>> modeArray([1, 2, 3, 4])\n  2\n  >>> modeArray([5, 6, 7])\n  7\n  */\nconst modeArray3 = (n) => {\n  let uniqueArray = n.filter((element, index, array) => array.indexOf(element) == index)\n  return uniqueArray.map(x => x).sort((a, b) => a - b).map(x => x.toString())\n}\n\n/* Create a function that returns the mode of the elements of an array.\n  Examples\n  >>> modeArray([1, 2, 3, 4])\n  "}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b2) => {\n  let aa = Number(a)\n  if (typeof a == 'string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b2)\n  if (typeof b2 == 'string') {\n    bb = Number(b2.replace(',', '.'))}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (aa > bb) {\n    return a}\n  if (aa < bb) {\n    return b2}\n  return null\n  }\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne =(a, b2) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b2)\n  if (typeof b2 =='string') {\n    bb = Number(b2.replace(',', '.'))}\n \n  if (aa == bb) return null\n  if (aa > bb) return a\n  return b\n}\n\nconst compareTwo = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') {\n    aa = Number(a.replace(',', '.'))}\n  let bb = Number(b)\n  if (typeof b =='string') {\n    bb = Number(b.replace(',', '.'))}\n \n  if (aa == bb) return null\n  if (aa > bb) return a\n  return b\n}\n\n// console.log(compareOne('1', '2.5'))\n// console.log(compareOne('1', '2,3'))\n// console.log(compareOne('1', '5,1'))\n// console.log(compareOne('1', '1'))\n// console.log(compareTwo('1', '2'))\n// console.log(compareTwo('1.1', '1.2'))\n// console.log(compareTwo('1.1', '1.0'))\n// console.log(compareTwo('1', '1.0'))\n// console.log(compareTwo('1.2', '1.0'))\n// console.log(compareTwo('1.1', '1.1'))\n// console.log(compareTwo('1.2', '1.2'))\n// console.log(compareTwo('1.1', '1.2'))\n// console.log(compareTwo('1.2', '1.1'))\n// console.log(compareTwo('1.2', '1.2'))\n// console.log(compareTwo('1.2', '1.3'))\n// console.log(compareTwo('1.3', '1.2'))\n// console.log(compareTwo('1.2', '1.3'))\n// console.log(compareTwo('1.3', '1.3'))\n// console.log(compareTwo('1.3', '1.4'))\n// console.log(compareTwo('1.4', '1.3'))\n// console.log(compareTwo('1.3', '1.4'))\n// console.log(compareTwo('1.4', '1.4'))\n// console.log(compareTwo('1.4', '1.5'))\n// console.log(compareTwo('1.5', '1.4'))\n// console.log(compareTwo('1.4', '1.5'))\n// console.log(compareTwo('1.5', '1.5'))\n// console.log(compareTwo('1.5', '1.6'))\n// console.log(compareTwo('1.6', '1.5'))\n// console.log(compareTwo('1.5', '1.6'))\n// console.log(compareTwo('1.6', '1.6'))\n// console.log(compareTwo('1.6', '1.7'))\n// console.log(compareTwo('1.7', '1.6'))\n// console.log(compareTwo('1.6', '1.7'))\n// console.log(compareTwo('1.7', '1.7'))\n// console.log(compareTwo('1.7', '1.8'))\n// console.log(compareTwo('1.8', '1.7'))\n// console.log(compareTwo('1.7', '1.8'))\n// console.log(compareTwo('1.8', '1.8'))\n// console.log(compareTwo('1.8', '1.9'))\n// console.log(compareTwo('1.9', '1.8'))\n// console.log(compareTwo('1.8', '1.9'))\n// console.log(compareTwo('1.9', '1.9'))\n// console.log(compareTwo('1.9', '2'))\n// console.log(compareTwo('2', '1.9'))\n// console.log(compareTwo('1.9', '2'))\n// console.log(compareTwo('2', '2'))\n// console.log(compareTwo('2', '3'))\n// console.log(compareTwo('3', '2'))\n// console.log(compareTwo('2', '3'))\n// console.log(compareTwo('3', '3'))\n// console.log(compareTwo('3', '4'))\n// console.log(compareTwo('4', '3'))\n// console.log(compareTwo('3', '4'))\n// console.log(compareTwo('4', '4'))\n// console.log(compareTwo('4', '5'))\n// console.log(compareTwo('5', '4'))\n// console.log(compareTwo('4', '5'))\n// console.log(compareTwo('5', '5'))\n// console.log(compareTwo('5', '6'))\n// console.log(compareTwo('6', '5'))\n// console.log(compareTwo('5', '6'))\n// console.log(compareTwo('6', '6'))\n// console.log("}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(n2, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < n2.length; i++) {\n    for (let j = 0; j < n2.length; j++) {\n      if (n2 [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let min = n2.length * n2.length\n  if (m > 0 && n2 [ m - 1 ] [ n ] < min) {\n    min = n2 [ m - 1 ] [ n ]}\n  if (n > 0 && n2 [ m ] [ n - 1 ] < min) {\n    min = n2 [ m ] [ n - 1 ]}\n  if (m < n2.length - 1 && n2 [ m + 1 ] [ n ] < min) {\n    min = n2 [ m + 1 ] [ n ]}\n  if (n < n2.length - 1 && n2 [ m ] [ n + 1 ] < min) {\n    min = n2 [ m ] [ n + 1 ]}\n  let p = [ ]\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) {\n      p.push(1)}\n    else {\n      p.push(min)}\n    }\n  return p\n  }\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath =(n2, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < n2.length; i++) {\n    for (let j = 0; j < n2.length; j++) {\n      if (n2 [ i ] [ j ] == 1) {\n        m = i;\n        n = j;\n        break;\n        }\n      }\n    }\n \n    let ans = [];\n    while (m > 0) {\n      let temp = [m, n];\n      ans.push(n2 [ m ] [ n ]);\n      m--;\n      n--;\n      if (m > 0) {\n        m--;\n        n++;\n      }\n      if (n > 0) {\n        n--;\n        m++;\n      }\n    }\n    ans.reverse();\n    return ans;\n  }\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = Number2(a [ 0 ]) * Number2(b [ 0 ])\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let r = Number2(a [ 1 ]) * Number2(b [ 1 ])\n  return m % r == 0\n  }\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify =(x, n) => {\n  let a = x.split( / / /)\n  let b = n.split( / / /)\n  let m = Number2(a [ 0 ]) * Number2(b [ 0 ])\n \n  if (b[0] === '0') return false\n  if (Number2(a [ 1 ]) === 0) return true\n  if (Number2(b [ 1 ]) === 0) return false\n  if (Number2(a [ 0 ]) === 0) return true\n\n  return m % Number2(b [ 0 ]) === 0\n}\n\n// console.log(simplify(\"1/5\", \"5/1\"))\n// console.log(simplify(\"1/6\", \"2/1\"))\n// console.log(simplify(\"7/10\", \"10/2\"))\n\n// function Number2(x) {\n//   if (x === '0') return 0\n//   let a = x.split( / / /)\n//   return a [ 0 ] * 1 + a [ 1 ] * 0\n// }\n//\n// console.log(Number2(\"1/5\"))\n// console.log(Number2(\"1/6\"))\n// console.log(Number2(\"7/10\"))\n\n// https://www.hackerrank.com/challenges/simplify-fraction\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  for (let i2 = 0; i2 < lst.length; i2+=2) {\n    if (lst [ i2 ] % 2 == 1) {\n      p+=lst [ i2 ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return p\n  }\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution =(lst) => {\n  let p = 0\n  for (let i2 = 0; i2 < lst.length; i2+=2) {\n    if (lst [ i2 ] % 2 == 1) {\n      p+=lst [ i2 ]\n     \n    }\n  }\n  return p\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(line) => {\n  let t = 0\n  if (line [ 0 ] == 'I' && line [ 1 ] == ' ') {\n    t = 1}\n  for (let i = 0; i < line.length; i++) {\n    if (line [ i ] == '.' || line [ i ] == '!' || line [ i ] == '?') {\n      if (line [ i + 1 ] == ' ' && line [ i + 2 ] == 'I' && line [ i + 3 ] == ' ') {\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        t++\n        }\n      }\n    }\n  return t\n  }\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored =(line) => {\n  let t = 0\n  if (line [ 0 ] == 'I' && line [ 1 ] =='') {\n    t = 1}\n  for (let i = 0; i < line.length; i++) {\n    if (line [ i ] == '.' || line [ i ] == '!' || line [ i ] == '?') {\n      if (line [ i + 1 ] =='' && line [ i + 2 ] == 'I' && line [ i + 3 ] =='') {\n       \n        t = t + 1}\n      }\n    }\n  return t\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n  .filter(subs => ![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n  .includes(subs.toLowerCase())\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )\n  .join(\"\")\n  }\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels =(text) => {\n  return text.split(\"\")\n .filter(subs =>![ \"a\", \"e\", \"i\", \"o\", \"u\" ]\n .includes(subs.toLowerCase())\n \n  )\n .join(\"\");\n}\n\n/*\n  getTextWithVowels is a function that takes string and returns string without vowels.\n  >>> getTextWithVowels('')\n  ''\n  >>> getTextWithVowels(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> getTextWithVowels('abcdef')\n  'abcdef'\n  >>> getTextWithVowels('aaaaa')\n  'aaaaa'\n  >>> getTextWithVowels('aaBAA')\n  'aaBAA'\n  >>> getTextWithVowels('zbcd')\n  'zbcd'\n  */\nconst getTextWithVowels =(text) => {\n  return text.replace(/[aeiou]/g, \"\")\n .toLowerCase();\n}\n\n/*\n  getTextWithVowels is a function that takes string and returns string without vowels.\n  >>> getTextWithVowels('')\n  ''\n  >>> getTextWithVowels(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> getTextWithVowels('abcdef')\n  'abcdef'\n  >>> getTextWithVowels('aaaaa')\n  'aaaaa'\n  >>> getTextWithVowels('aaBAA')\n  'aaBAA'\n  >>> getTextWithVowels('zbcd')\n  'zbcd'\n  */\nconst getTextWithVowels =(text) => {\n  return text.replace(/[aeiou]/g, \"\")\n .toUpperCase();\n}\n\n/*\n  getTextWithVowels is a function that takes string and returns string without vowels.\n  >>> getTextWithVowels('')\n  ''\n  >>> getTextWithVowels(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> getTextWithVowels('abcdef')\n  'abcdef'\n  >>> getTextWithVowels('aaaaa')\n  'aaaaa'\n  >>> getTextWithVowels('aaBAA')\n  'aaBAA'\n  >>> getTextWithVowels('zbcd')\n  'zbcd'\n  */\nconst getTextWithVowels =(text) => {\n  return text.replace(/[aeiou]/g, \"\")\n .toUpperCase();\n}\n\n/*\n  removeAllVowels is a function that takes string and returns string without vowels.\n  >>> removeAllVowels('')\n  ''\n  >>> removeAllVowels(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeAllVowels('abcdef')\n  'abcdef'\n  >>> removeAllVowels('aaaaa')\n  'aaaaa'\n  >>> removeAllVowels('aaBAA')\n  'aaBAA'\n  >>> removeAllVowels('zbcd')\n  'zbcd'\n  */\nconst removeAllVowels =(text) => {\n  return text.replace(/[aeiou]/g, \"\")\n .toUpperCase();\n}\n\n/*\n  getTextWithoutVowels is a function that takes string and returns string without vowels.\n  >>> getTextWithoutVowels('')\n  ''\n  >>> getTextWithoutVowels(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> getTextWithoutVowels('abcdef')\n  'abcdef'\n  >>> getTextWithoutVowels('aaaaa')\n  'aaaaa'\n  >>> getTextWithoutVowels('aaBAA')\n  'aaBAA'\n  >>> getTextWithoutVowels('zbcd')\n  'zbcd'\n  */\nconst getTextWithoutVowels =(text) => {\n  return text.replace(/[aeiou]/g, \"\")\n .toLowerCase();\n}\n\n/*\n  removeAllVowels is a function that takes string and returns string without vowels.\n  >>> removeAllVowels('')\n  ''\n  >>> removeAllVowels(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeAllVowels('abcdef')\n  'abcdef'\n  >>> removeAllVowels('aaaaa')\n  'aaaaa'\n  >>> removeAllVowels('aaBAA')\n  'aaBAA'\n  >>> removeAllVowels('zbcd')\n  'zbcd'\n  */\nconst removeAllVowels =(text) => {\n  return text.replace(/[aeiou]/g, \"\")\n .toLowerCase();\n}\n\n/*\n  removeAllVowels is a function that takes string and returns string without vowels.\n  >>> removeAllVowels('')\n  ''\n  >>> removeAllVowels(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeAllVowels('abcdef')\n  'abcdef'\n  >>> removeAllVowels('aaaaa')\n  'aaaaa'\n  >>> removeAllVowels('aaBAA')\n  'aaBAA'\n  >>> removeAllVowels('zbcd')\n  'zbcd'\n  */\nconst removeAllVowels =(text) => {\n  return text.replace(/[aeiou]/g, \"\")\n .toUpperCase();\n}\n\n/*\n  removeAllVowels is"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(i) => {\n  return [ ... Array(i).keys(), i ].join(' ')\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence =(i) => {\n  return [... Array(i).keys(), i ].join(' ')\n \n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(3)\n  '0 1 2'\n  */\nconst stringSequence2 =(i) => {\n  return [... Array(i).keys(), i ].join('')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 =(i) => {\n  return [... Array(i).keys(), i ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(3)\n  '0 1 2'\n  */\nconst stringSequence4 =(i) => {\n  return [... Array(i).keys(), i ].join('')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 =(i) => {\n  return [... Array(i).keys(), i ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(3)\n  '0 1 2'\n  */\nconst stringSequence6 =(i) => {\n  return [... Array(i).keys(), i ].join('')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 =(i) => {\n  return [... Array(i).keys(), i ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(3)\n  '0 1 2'\n  */\nconst stringSequence8 =(i) => {\n  return [... Array(i).keys(), i ].join('')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence9 =(i) => {\n  return [... Array(i).keys(), i ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(3)\n  '0 1 2'\n  */\nconst stringSequence10 =(i) => {\n  return [... Array(i).keys(), i ].join('')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence11 =(i) => {\n  return [... Array(i).keys(), i ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(3)\n  '0 1 2'\n  */\nconst stringSequence12 =(i) => {\n  return [... Array(i).keys(), i ].join('')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence13 =(i) => {\n  return [... Array(i).keys(), i ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(3)\n  '0 1 2'\n  */\nconst stringSequence14 =(i) => {\n  return [... Array(i).keys(), i ].join('')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence15 =(i) => {\n  return [... Array(i).keys(), i ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(3)\n  '0 1 2'\n  */\nconst stringSequence16 =(i) => {\n  return [... Array(i).keys(), i ].join('')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence17 =(i) => {\n  return [... Array(i).keys(), i ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(3)\n  '0 1 2'\n  */\nconst stringSequence18 =(i) => {\n  return [... Array(i).keys(), i ].join('')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence19 =(i) => {\n  return [... Array(i).keys(), i ].join(' ')\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, b2) => {\n  while (b2 != 0) {\n    let temp = a;\n    a = b2;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    b2 = temp % b2;\n    }\n  return a;\n  }\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor =(a, b2) => {\n  while (b2!= 0) {\n    let temp = a;\n    a = b2;\n   \n    b2 = b2 % a;\n    if (b2 == 0) return a;\n    if (temp % b2!= 0) {\n      return b2;\n    }\n  }\n  return a;\n};\n\n/* Return a smallest common multiple of two integers a and b\n  >>> smallestCommonMultiple(3, 5)\n  15\n  >>> smallestCommonMultiple(25, 15)\n  225\n  */\nconst smallestCommonMultiple =(a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a square root of a number\n  >>> sqrt(3)\n  1.7320508\n  >>> sqrt(3)\n  1.7320508\n  >>> sqrt(10)\n  3.1622777\n  >>> sqrt(5)\n  2\n  >>> sqrt(0)\n  0\n  */\nconst sqrt =(a) => {\n  let b = 1;\n  while (b < a) {\n    b = (b + a / b) / 2;\n  }\n  return b;\n};\n\n/* Return a number of factorial\n  >>> factorial(0)\n  1\n  >>> factorial(1)\n  1\n  >>> factorial(2)\n  2\n  >>> factorial(3)\n  6\n  >>> factorial(4)\n  24\n  >>> factorial(5)\n  120\n  >>> factorial(10)\n  3628800\n  >>> factorial(100)\n  1030262560\n  */\nconst factorial =(n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result = result * i;\n  }\n  return result;\n};\n\n/* Return a number of permutations\n  >>> permutations(2)\n  2\n  >>> permutations(3)\n  3\n  >>> permutations(4)\n  24\n  >>> permutations(5)\n  120\n  >>> permutations(10)\n  3628800\n  >>> permutations(100)\n  1030262560\n  */\nconst permutations =(n) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result = result * i;\n  }\n  return result;\n};\n\n/* Return a number of combinations\n  >>> combinations(2, 2)\n  4\n  >>> combinations(3, 2)\n  6\n  >>> combinations(3, 3)\n  9\n  >>> combinations(3, 4)\n  10\n  >>> combinations(3, 5)\n  10\n  >>> combinations(10, 10)\n  3628800\n  */\nconst combinations =(n, k) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result = result * (n - i + 1);\n  }\n  for (let i = 1; i <= k; i++) {\n    result = result / (i + 1);\n  }\n  return result;\n};\n\n/* Return a number of combinations\n  >>> combinations(2, 2)\n  4\n  >>> combinations(3, 2)\n  6\n  >>> combinations(3, 3)\n  9\n  >>> combinations(3, 4)\n  10\n  >>> combinations(3, 5)\n  10\n  >>> combinations(10, 10)\n  3628800\n  */\nconst combinations =(n, k) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result = result * (n - i + 1);\n  }\n  for (let i = 1; i <= k; i++) {\n    result = result / (i + 1);\n  }\n  return result;\n};\n\n/* Return a number of combinations\n  >>> combinations(2, 2)\n  4\n  >>> combinations(3, 2)\n  6\n  >>> combinations(3, 3)\n  9\n  >>> combinations(3, 4)\n  10\n  >>> combinations(3, 5)\n  10\n  >>> combinations(10, 10)\n  3628800\n  */\nconst combinations =(n, k) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result = result * (n - i + 1);\n  }\n  for (let i = 1; i <= k; i++) {\n    result = result / (i + 1);\n  }\n  return result;\n};\n\n/* Return a number of combinations\n  >>> combinations(2, 2)\n  4\n  >>> combinations(3, 2)\n  6\n  >>> combinations(3, 3)\n  9\n  >>> combinations(3, 4)\n  10\n  >>> combinations(3, 5)\n  10\n  >>> combinations(10, 10)\n  3628800\n  */\nconst combinations =(n, k) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result = result * (n - i + 1);\n  }\n  for (let i = 1; i <= k; i++) {\n    result = result / (i + 1);\n  }\n  return result;\n};\n\n/* Return a number of combinations\n  >>> combinations(2, 2)\n  4\n  >>> combinations(3, 2)\n  6\n  >>> combinations(3, 3)\n  9\n  >>> combinations(3, 4)\n  10\n  >>> combinations(3, 5)\n  10\n  >>> combinations(10, 10)\n  3628800\n  */\nconst combinations =(n, k) => {\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result = result * (n - i + 1);\n  }\n  for (let i = 1; i <= k; i++) {\n    result = result / (i + 1);\n  }\n  return result;\n};\n\n/* Return a number of combinations\n  >>> combinations(2, 2)\n  4\n  >>> combinations(3, 2)\n  6\n"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  for (let i2 = 0; i2 < grid.length; i2++) {\n    let m = 0\n    for (let j = 0; j < grid [ i2 ].length; j++) {\n      if (grid [ i2 ] [ j ] == 1) {\n        m++}\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (m > 0) {\n      m-=capacity;\n      p++;\n      }\n    }\n  return p\n  }\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill =(grid, capacity) => {\n  let p = 0\n  for (let i2 = 0; i2 < grid.length; i2++) {\n    let m = 0\n    for (let j = 0; j < grid [ i2 ].length; j++) {\n      if (grid [ i2 ] [ j ] == 1) {\n        m++}\n      }\n   \n    p += Math.min(m, capacity)\n  }\n  return p\n}\n\nconst p = () => {\n  let grid = [[0, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]\n  let capacity = 2\n\n  let result = 0\n  let i = 0\n  let j = 0\n  while (i < grid.length) {\n    while (j < grid [ i ].length) {\n      if (grid [ i ] [ j ] == 0) {\n        grid [ i ] [ j ] = 1\n        if (grid [ i ][ j ] == 1) {\n          result++\n        }\n      }\n      j++\n    }\n    i++\n    j = 0\n  }\n\n  return result\n}\n\nconst p2 = () => {\n  let grid = [[0, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]\n  let capacity = 5\n\n  let result = 0\n  let i = 0\n  let j = 0\n  while (i < grid.length) {\n    while (j < grid [ i ].length) {\n      if (grid [ i ] [ j ] == 0) {\n        grid [ i ] [ j ] = 1\n        if (grid [ i ][ j ] == 1) {\n          result++\n        }\n      }\n      j++\n    }\n    i++\n    j = 0\n  }\n\n  return result\n}\n\nconst p3 = () => {\n  let grid = [[0, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]\n  let capacity = 1\n\n  let result = 0\n  let i = 0\n  let j = 0\n  while (i < grid.length) {\n    while (j < grid [ i ].length) {\n      if (grid [ i ] [ j ] == 0) {\n        grid [ i ] [ j ] = 1\n        if (grid [ i ][ j ] == 1) {\n          result++\n        }\n      }\n      j++\n    }\n    i++\n    j = 0\n  }\n\n  return result\n}\n\nconst p4 = () => {\n  let grid = [[0, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]\n  let capacity = 2\n\n  let result = 0\n  let i = 0\n  let j = 0\n  while (i < grid.length) {\n    while (j < grid [ i ].length) {\n      if (grid [ i ] [ j ] == 0) {\n        grid [ i ] [ j ] = 1\n        if (grid [ i ][ j ] == 1) {\n          result++\n        }\n      }\n      j++\n    }\n    i++\n    j = 0\n  }\n\n  return result\n}\n\nconst p5 = () => {\n  let grid = [[0, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]\n  let capacity = 3\n\n  let result = 0\n  let i = 0\n  let j = 0\n  while (i < grid.length) {\n    while (j < grid [ i ].length) {\n      if (grid [ i ] [ j ] == 0) {\n        grid [ i ] [ j ] = 1\n        if (grid [ i ][ j ] == 1) {\n          result++\n        }\n      }\n      j++\n    }\n    i++\n    j = 0\n  }\n\n  return result\n}\n\nconst p6 = () => {\n  let grid = [[0, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]\n  let capacity = 4\n\n  let result = 0\n  let i = 0\n  let j = 0\n  while (i < grid.length) {\n    while (j < grid [ i ].length) {\n      if (grid [ i ] [ j ] == 0) {\n        grid [ i ] [ j ] = 1\n        if (grid [ i ][ j ] == 1) {\n          result++\n        }\n      }\n      j++\n    }\n    i++\n    j = 0\n  }\n\n  return result\n}\n\nconst p7 = () => {\n  let grid = [[0, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]]\n  let capacity = 5\n\n  let result = 0\n  let i = 0\n"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let length = string.length\n  if (length == 1 || length == 0) {\n    return false}\n  for (let i = 2; i * i <= length; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (length % i == 0) {\n      return false}\n    }\n  return true\n  }\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength =(string) => {\n  let length = string.length\n  if (length == 1 || length == 0) {\n    return false}\n  for (let i = 2; i * i <= length; i++) {\n   \n    if (string.indexOf(i) == -1) {\n      return false}\n  }\n  return true\n}\n\n/*\nGiven a string, write a function that returns the index of the first\nnon-primer char\n\nExamples\nfirstNonPrime('abc') == 1\nfirstNonPrime('abcdcba') == 2\nfirstNonPrime('kittens') == -1\n*/\nconst firstNonPrime =(string) => {\n  for (let i = 0; i < string.length; i++) {\n    if (!primeLength(string.slice(i))) {\n      return i}\n  }\n  return -1\n}\n\n/*\nGiven a string, write a function that returns the index of the last\nprimer char\n\nExamples\nlastPrime('abc') == 2\nlastPrime('abcdcba') == 5\nlastPrime('kittens') == -1\n*/\nconst lastPrime =(string) => {\n  let length = string.length\n  let i = length - 1\n  while (i >= 0 && primeLength(string.slice(i))) {\n    i--\n  }\n  return i + 1\n}\n\nconst primeFactors =(string) => {\n  let primeFactors = []\n  let length = string.length\n  for (let i = 0; i < length; i++) {\n    let primeLength = primeLength(string.slice(i))\n    if (primeLength) {\n      primeFactors.push(primeLength)\n    }\n  }\n  return primeFactors\n}\n\nconst numberOfPrimeFactors =(string) => {\n  let length = string.length\n  let primeFactors = primeFactors(string)\n  let number = 1\n  for (let i = 0; i < primeFactors.length; i++) {\n    number *= primeFactors[i]\n  }\n  return number\n}\n\nconst divisibleBy =(string) => {\n  let length = string.length\n  let primeFactors = primeFactors(string)\n  let divisors = 1\n  for (let i = 0; i < primeFactors.length; i++) {\n    divisors *= primeFactors[i]\n  }\n  return divisors\n}\n\nconst divisibleByPrimeFactors =(string) => {\n  let length = string.length\n  let primeFactors = primeFactors(string)\n  let divisors = 1\n  for (let i = 0; i < primeFactors.length; i++) {\n    divisors *= divisibleBy(string.slice(i))\n  }\n  return divisors\n}\n\nconst divisibleByDivisors =(string) => {\n  let length = string.length\n  let primeFactors = primeFactors(string)\n  let divisors = 1\n  for (let i = 0; i < primeFactors.length; i++) {\n    divisors *= divisibleByPrimeFactors(string.slice(i))\n  }\n  return divisors\n}\n\nconst divisibleByPrimeFactorsPrimeFactors =(string) => {\n  let length = string.length\n  let primeFactors = primeFactors(string)\n  let divisors = 1\n  for (let i = 0; i < primeFactors.length; i++) {\n    divisors *= primeFactors[i]\n  }\n  return divisors\n}\n\nconst divisibleByPrimeFactorsDivisors =(string) => {\n  let length = string.length\n  let primeFactors = primeFactors(string)\n  let divisors = 1\n  for (let i = 0; i < primeFactors.length; i++) {\n    divisors *= divisibleByPrimeFactorsPrimeFactors(string.slice(i))\n  }\n  return divisors\n}\n\nconst primeFactorsPrimeFactors =(string) => {\n  let length = string.length\n  let primeFactors = primeFactors(string)\n  let primeFactorsPrimeFactors = 1\n  for (let i = 0; i < primeFactors.length; i++) {\n    primeFactorsPrimeFactors *= primeFactors[i]\n  }\n  return primeFactorsPrimeFactors\n}\n\nconst primeFactorsDivisors =(string) => {\n  let length = string.length\n  let primeFactors = primeFactors(string)\n  let primeFactorsPrimeFactors = 1\n  for (let i = 0; i < primeFactors.length; i++) {\n    primeFactorsPrimeFactors *= primeFactorsPrimeFactors(string.slice(i))\n  }\n  return primeFactorsPrimeFactors\n}\n\nconst divisibleByDivisorsPrimeFactors =(string) => {\n  let length = string.length\n  let primeFactors = primeFactors(string)\n  let primeFactorsPrimeFactors = 1\n  for (let i = 0; i < primeFactors.length; i++) {\n    primeFactorsPrimeFactors *= primeFactorsPrimeFactors(string.slice(i))\n  }\n  return primeFactorsPrimeFactors\n}\n\nconst divisibleByPrimeFactorsPrimeFactorsPrimeFactors =(string) => {\n  let length = string.length\n  let primeFactors = primeFactors(string)\n  let primeFactorsPrimeFactors = 1\n  for (let i = 0; i < primeFactors.length; i++) {\n    primeFactorsPrimeFactors *= primeFactorsPrimeFactors(string.slice(i))\n  }\n  return primeFactorsPrimeFactors\n}\n\nconst divisibleByPrimeFactorsDivisorsPrimeFactors =(string) => {\n  let length = string.length\n  let primeFactors = primeFactors(string)\n  let primeFactorsPrimeFactors = 1\n  for (let i = 0; i < primeFactors.length; i++) {\n    primeFactorsPrimeFactors *= primeFactorsPrimeFactors(string"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let i2 = 1; i2 < lst.length; i2+=2) {\n    if (lst [ i2 ] % 2 == 0) {\n      t+=lst [ i2 ]\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    }\n  return t\n  }\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let i2 = 1; i2 < lst.length; i2+=2) {\n    if (lst [ i2 ] % 2 == 0) {\n      t+=lst [ i2 ]\n     \n    }\n  }\n  return t\n}\n\nconsole.log(add([4, 2, 6, 7]))\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let i2 = 1; i2 < lst.length; i2+=2) {\n    if (lst [ i2 ] % 2 == 0) {\n      t+=lst [ i2 ]\n     \n    }\n  }\n  return t\n}\n\nconsole.log(add([4, 2, 6, 7]))\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let i2 = 1; i2 < lst.length; i2+=2) {\n    if (lst [ i2 ] % 2 == 0) {\n      t+=lst [ i2 ]\n     \n    }\n  }\n  return t\n}\n\nconsole.log(add([4, 2, 6, 7]))\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let i2 = 1; i2 < lst.length; i2+=2) {\n    if (lst [ i2 ] % 2 == 0) {\n      t+=lst [ i2 ]\n     \n    }\n  }\n  return t\n}\n\nconsole.log(add([4, 2, 6, 7]))\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let i2 = 1; i2 < lst.length; i2+=2) {\n    if (lst [ i2 ] % 2 == 0) {\n      t+=lst [ i2 ]\n     \n    }\n  }\n  return t\n}\n\nconsole.log(add([4, 2, 6, 7]))\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let i2 = 1; i2 < lst.length; i2+=2) {\n    if (lst [ i2 ] % 2 == 0) {\n      t+=lst [ i2 ]\n     \n    }\n  }\n  return t\n}\n\nconsole.log(add([4, 2, 6, 7]))\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let i2 = 1; i2 < lst.length; i2+=2) {\n    if (lst [ i2 ] % 2 == 0) {\n      t+=lst [ i2 ]\n     \n    }\n  }\n  return t\n}\n\nconsole.log(add([4, 2, 6, 7]))\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let i2 = 1; i2 < lst.length; i2+=2) {\n    if (lst [ i2 ] % 2 == 0) {\n      t+=lst [ i2 ]\n     \n    }\n  }\n  return t\n}\n\nconsole.log(add([4, 2, 6, 7]))\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let i2 = 1; i2 < lst.length; i2+=2) {\n    if (lst [ i2 ] % 2 == 0) {\n      t+=lst [ i2 ]\n     \n    }\n  }\n  return t\n}\n\nconsole.log(add([4, 2, 6, 7]))\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let i2 = 1; i2 < lst.length; i2+=2) {\n    if (lst [ i2 ] % 2 == 0) {\n      t+=lst [ i2 ]\n     \n    }\n  }\n  return t\n}\n\nconsole.log(add([4, 2, 6, 7]))\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add =(lst) => {\n  let t = 0\n  for (let i2 = 1; i2 < lst.length; i2+=2) {"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  let y = [ ]\n  for (let k = a; k <= b; k++) {\n    if (k == 2 || k == 4 || k == 6 || k == 8) {\n      y.push(k)}\n    }\n  return y\n  }\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers =(a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n    }\n \n  let i = a;\n  let result = [];\n  while (i <= b) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    i = i + 1;\n  }\n  return result;\n}\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let w = arr\n  for (let j = 0; j < w.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < w.length; k++) {\n      let w1 = w [ ind ].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1 [ u ] == '1') {\n          f1++}\n        }\n      let w2 = w [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      if (f2 < f1 ||(f1 == f2 && w [ k ] < w [ ind ])) {\n        ind = k\n        }\n      }\n    if (ind > j) {\n      let tmp = w [ j ]\n      w [ j ] = w [ ind ]\n      w [ ind ] = tmp\n      }\n    }\n  return w\n  }\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray =(arr) => {\n  let w = arr\n  for (let j = 0; j < w.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < w.length; k++) {\n      let w1 = w [ ind ].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1 [ u ] == '1') {\n          f1++}\n        }\n      let w2 = w [ k ].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2 [ u ] == '1') {\n          f2++}\n       \n        }\n      if (f1 < f2) {\n        ind = k}\n      }\n    }\n    w [ ind ] = w.splice ( ind, 1) }\n  return w}\n\nconsole.log(sortArray([1, 5, 2, 3, 4]))\n\n//console.log(sortArray([1, 5, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const i2 of lst)\n      frq [ i2 ]+=1;\n      var ans = - 1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let i2 = 1; i2 < frq.length; i2++)\n      if (frq [ i2 ] >= i2)\n      ans = i2;\n      return ans;\n      }\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search =(lst) => {\n      var frq = new Array(Math.max(... lst) + 1).fill(0);\n      for (const i2 of lst)\n      frq [ i2 ]+=1;\n      var ans = - 1;\n     \n      for (const i of frq)\n      {\n          if (i > 0 && i > ans)\n          {\n              ans = i;\n          }\n      }\n      return ans;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  for (let i2 = 0; i2 < num.length; i2++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (primes.includes(num [ i2 ]))\n  total++;\n  return total;\n  }\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey =(num) => {\n  var primes = \"2357BD\",\n  total = 0;\n  for (let i2 = 0; i2 < num.length; i2++)\n \n}\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(convert) => {\n  return \"db\" + convert.toString(2) + \"db\";\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary =(convert) => {\n  return \"db\" + convert.toString(2) + \"db\";\n \n}\n\nconst binaryToDecimal =(convert) => {\n  return parseInt(convert.slice(2,convert.length-2),2);\n}\n\nmodule.exports = {\n  decimalToBinary,\n  binaryToDecimal\n}\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  for (let i2 = 0; i2 < lst.length; i2++) {\n    if (lst [ i2 ] > 0 && lst [ i2 ] < a) {\n      a = lst [ i2 ]}\n    if (lst [ i2 ] < 0 && lst [ i2 ] > b) {\n      b = lst [ i2 ]}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  if (a == Infinity) {\n    a = null}\n  if (b == - Infinity) {\n    b = null}\n  return(b, a)\n  }\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers =(lst) => {\n  let a = Infinity\n  let b = - Infinity\n  for (let i2 = 0; i2 < lst.length; i2++) {\n    if (lst [ i2 ] > 0 && lst [ i2 ] < a) {\n      a = lst [ i2 ]}\n    if (lst [ i2 ] < 0 && lst [ i2 ] > b) {\n      b = lst [ i2 ]}\n   \n  }\n  return [a, b]\n}\n\n/*\n  Create a function that returns a list of the first 20 numbers from a list of numbers.\n  The number list can be in any order.\n  Examples:\n  takeTwentyFirstNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  takeTwentyFirstNumbers([9, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  takeTwentyFirstNumbers([9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  takeTwentyFirstNumbers([9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  takeTwentyFirstNumbers([9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n  takeTwentyFirstNumbers([9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n  takeTwentyFirstNumbers([9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]\n  takeTwentyFirstNumbers([9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\n  takeTwentyFirstNumbers([9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n  takeTwentyFirstNumbers([9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n  takeTwentyFirstNumbers([9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]\n*/\nconst takeTwentyFirstNumbers = (lst) => {\n  let list = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(i) => {\n  if (i == 0 || i == 1)\n  return 0;\n  if (i == 2)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return 1;\n  return fibfib(i - 1) + fibfib(i - 2) + fibfib(i - 3);\n  }\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib =(i) => {\n  if (i == 0 || i == 1)\n  return 0;\n  if (i == 2)\n \n  return 1;\n  return fibfib(i - 1) + fibfib(i - 2) + fibfib(i - 3);\n};\n\nconsole.log(fibfib(4));\n\n/*\n  The fibonacci number sequence is a sequence similar to the Fibonacci sequence that's defined as follows:\n  fib(0) == 0\n  fib(1) == 1\n  fib(n) = fib(n-1) + fib(n-2) + fib(n-3)\n  Please write a function to efficiently compute the n-th element of the fibonacci number sequence.\n  >>> fib(1)\n  0\n  >>> fib(5)\n  1\n  >>> fib(8)\n  3\n  */\nconst fib =(i) => {\n  if (i == 0 || i == 1)\n  return 0;\n  return fib(i - 1) + fib(i - 2) + fib(i - 3);\n};\n\nconsole.log(fib(4));\n\n/*\n  The prime number sequence is a sequence similar to the Fibonacci number sequence that's defined as follows:\n  p(0) == 0\n  p(1) == 1\n  p(n) = p(n-1) + p(n-2) + p(n-3) + 2**(n-1)\n  Please write a function to efficiently compute the n-th element of the prime number sequence.\n  >>> p(1)\n  0\n  >>> p(5)\n  1\n  >>> p(8)\n  2\n  */\nconst p =(i) => {\n  if (i == 0 || i == 1)\n  return 0;\n  return p(i - 1) + p(i - 2) + p(i - 3) + 2**(i - 1);\n};\n\nconsole.log(p(4));\n\n/*\n  The prime number sequence is a sequence similar to the Fibonacci number sequence that's defined as follows:\n  p(0) == 0\n  p(1) == 1\n  p(n) = p(n-1) + p(n-2) + p(n-3) + 2**(n-1)\n  Please write a function to efficiently compute the n-th element of the prime number sequence.\n  >>> p(1)\n  0\n  >>> p(5)\n  1\n  >>> p(8)\n  2\n  */\nconst primes =(i) => {\n  if (i == 0 || i == 1)\n  return 0;\n  if (i > 2) {\n    for (let k = 2; k * k <= i; k++) {\n      if (i % k == 0)\n        return 0;\n    }\n  }\n  return p(i);\n};\n\nconsole.log(primes(4));\n\n/*\n  The prime number sequence is a sequence similar to the Fibonacci number sequence that's defined as follows:\n  p(0) == 0\n  p(1) == 1\n  p(n) = p(n-1) + p(n-2) + p(n-3) + 2**(n-1)\n  Please write a function to efficiently compute the n-th element of the prime number sequence.\n  >>> p(1)\n  0\n  >>> p(5)\n  1\n  >>> p(8)\n  2\n  */\nconst primes2 =(i) => {\n  if (i == 0 || i == 1)\n  return 0;\n  let prime = p(i);\n  let counter = 2;\n  for (let k = 2; k * k <= i; k++) {\n    if (i % k == 0)\n      return 0;\n  }\n  return prime;\n};\n\nconsole.log(primes2(4));<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, i) => i % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return l.map((item, i) =>(i % 3 == 0 ? three [ i / 3 ] : item));\n  }\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird =(l) => {\n  var three = l.filter((item, i) => i % 3 == 0);\n  three.sort((a, b) =>(a - b));\n \n  var sortedList = [];\n  var k = 0;\n  l.forEach((item, i) => {\n    if (i % 3!= 0) {\n      sortedList.push(item);\n    } else {\n      sortedList.push(three[k]);\n      k += 1;\n    }\n  });\n  return sortedList;\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFifth =(l) => {\n  var five = l.filter((item, i) => i % 5 == 0);\n  five.sort((a, b) =>(a - b));\n \n  var sortedList = [];\n  var k = 0;\n  l.forEach((item, i) => {\n    if (i % 5!= 0) {\n      sortedList.push(item);\n    } else {\n      sortedList.push(five[k]);\n      k += 1;\n    }\n  });\n  return sortedList;\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by two, while its values at the indicies that are divisible by two are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortSecond([1, 2, 3])\n  [1, 2, 3]\n  >>> sortSecond([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortSecond =(l) => {\n  var two = l.filter((item, i) => i % 2 == 0);\n  two.sort((a, b) =>(a - b));\n \n  var sortedList = [];\n  var k = 0;\n  l.forEach((item, i) => {\n    if (i % 2!= 0) {\n      sortedList.push(item);\n    } else {\n      sortedList.push(two[k]);\n      k += 1;\n    }\n  });\n  return sortedList;\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by ten, while its values at the indicies that are divisible by ten are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTen([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTen([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTen =(l) => {\n  var ten = l.filter((item, i) => i % 10 == 0);\n  ten.sort((a, b) =>(a - b));\n \n  var sortedList = [];\n  var k = 0;\n  l.forEach((item, i) => {\n    if (i % 10!= 0) {\n      sortedList.push(item);\n    } else {\n      sortedList.push(ten[k]);\n      k += 1;\n    }\n  });\n  return sortedList;\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by eleven, while its values at the indicies that are divisible by eleven are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortEleven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEleven([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortEleven =(l) => {\n  var eleven = l.filter((item, i) => i % 11 == 0);\n  eleven.sort((a, b) =>(a - b));\n \n  var sortedList = [];\n  var k = 0;\n  l.forEach((item, i) => {\n    if (i % 11!= 0) {\n      sortedList.push(item);\n    } else {\n      sortedList.push(eleven[k]);\n      k += 1;\n    }\n  });\n  return sortedList;\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by twenty, while its values at the indicies that are divisible by twenty are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortTwenty([1, 2, 3])\n  [1, 2, 3]\n  >>> sortTwenty([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortTwenty =(l) => {\n  var twenty = l.filter((item, i) => i % 20 == 0);\n  twenty.sort((a, b) =>(a - b));\n \n  var sortedList = [];\n  var k = 0;\n  l.forEach((item, i) => {\n    if (i % 20!= 0) {\n      sorted"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum+=n;\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    prod_value *= n;\n    }\n  return [ sum, prod_value ];\n  }\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct =(numbers, int) => {\n  var sum = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum+=n;\n   \n    prod_value *= n;\n  }\n  return sum, prod_value;\n};\n\n/*\n  Let's start with some basic examples\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4, 5, 6])\n  (30, 720)\n  \n  Now let's add a little more complexity\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8])\n  (66, 40320)\n  \n  And a bit of randomness\n  >>> sumProduct([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  (44, 1144841600)\n  \n  The first one is the same as before\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8])\n  (66, 40320)\n  \n  And the second one is the same as before\n  >>> sumProduct([3, 5, 7, 9, 11, 13, 15, 17, 19])\n  (44, 1144841600)\n  \n  And the third one is a bit different, because we can't figure out the number of factors of the number in advance\n  >>> sumProduct([9, 11, 13, 15, 17, 19])\n  (48, 40320)\n  \n  But since the number has only two factors, we can simply multiply all the numbers together\n  >>> sumProduct([9, 11, 13, 15, 17, 19, 23, 29, 31])\n  (150, 22441600)\n  \n  And we can do the same thing with the number with three factors\n  >>> sumProduct([23, 29, 31, 37, 41, 43, 47, 53, 59])\n  (220, 276416000)\n  \n  And with a four factor number, we can simply sum the factors together\n  >>> sumProduct([53, 59, 61, 67, 71, 73, 79, 83, 89])\n  (130, 51728000)\n  \n  And with a five factor number, we can simply sum the factors together\n  >>> sumProduct([87, 97, 101, 103, 107, 109, 113, 127, 131])\n  (192, 714572800)\n  \n  But with a six factor number, we can only do the sum and then multiply it by one (since we can't figure out the number of factors in advance)\n  >>> sumProduct([123, 131, 137, 139, 143, 149, 151, 157, 163, 167, 169, 173])\n  (330, 53512800)\n  \n  And with a seven factor number, we can only do the sum and then multiply it by one (since we can't figure out the number of factors in advance)\n  >>> sumProduct([167, 169, 173, 179, 181, 191, 193, 197])\n  (420, 61536000)\n  \n  And with a eight factor number, we can only do the sum and then multiply it by one (since we can't figure out the number of factors in advance)\n  >>> sumProduct([199, 203, 207, 209, 211, 223, 227, 229, 233])\n  (630, 91536000)\n  \n  But with a nine factor number, we can simply sum the factors together\n  >>> sumProduct([233, 239, 241, 251, 257, 263, 269, 271, 277, 281])\n  (1035, 207057600)\n  \n  And with a ten factor number, we can simply sum the factors together\n  >>> sumProduct([251, 257, 263, 269, 271, 277, 281, 283, 293, 299])\n  (1180, 221920000)\n  \n  And with a eleven factor number, we can simply sum the factors together\n  >>> sumProduct([299, 301, 303, 307, 311, 313, 317, 331, 337, 347, 349])\n  (1430, 266864000)\n  \n  And with a twelve factor number, we can simply sum the factors together\n  >>> sumProduct([347, 349, 373, 379, 383, 389, 397, 401, 409, 419, 433, 439, 443])\n  (1830, 393712000)\n  \n  And with a thirteen factor number, we can only do the sum and then multiply it by one (since we can't figure out the number of factors in advance)\n  >>> sumProduct([443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521])\n  (1350, 238713600)\n  \n  And with a fourteen factor number, we can only do the sum and then multiply it by one (since we can't figure out the number of factors in advance)\n  >>> sumProduct([509, 521, 523, 541, 547, 557, 563, 569, 587, 593, 599, 607, 613, 617])\n  (1730, 353413600)\n  \n  And with a fifteen factor number, we can only do the sum and then multiply it by one (since we can't figure out the number of factors in advance)\n  >>> sumProduct([613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691])\n  (1890, 4471808000)\n  \n  And with a sixteen factor number, we can only do the sum and then multiply it by one (since we can't figure out the number of factors in advance)\n  >>> sumProduct([691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787])\n  (2190, 5454400000)\n  \n  And with a seventeen factor number, we can only do the sum and then multiply it by one (since we can't figure out the number of factors in advance)\n  >>> sumProduct([743, 787, 797, 809"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let i2 = 0; i2 < s.length; i2++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s [ i2 ] == c [ j ]) {\n        y = 0\n        }\n      }\n    if (y == 1) {\n      t+=s [ i2 ]\n      }\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  let z = 1\n  for (let i2 = 0; i2 < t.length; i2++) {\n    if (t [ i2 ] != t [ t.length - i2 - 1 ]) {\n      z = 0\n      }\n    }\n  if (z == 0) {\n    return(z, false)\n    }\n  return(z, true)\n  }\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete =(s, c) => {\n  let t = ''\nfor (let i2 = 0; i2 < s.length; i2++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s [ i2 ] == c [ j ]) {\n        y = 0\n        }\n      }\n    if (y == 1) {\n      t+=s [ i2 ]\n      }\n   \n  }\n  let k = t.length -1\n  let kk = t.length - 1\n  while (k >= 0 && k < kk) {\n    if (t [ k ]!= t [ kk ]) {\n      return (t,false)\n      }\n    k--\n    kk--\n  }\n  return (t,true)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(bl) => {\n  for (let i = 0; i < bl.length; i++)\n  for (let j = i + 1; j < bl.length; j++)\n  for (let k = j + 1; k < bl.length; k++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (bl [ i ] + bl [ j ] + bl [ k ] == 0)\n  return true;\n  return false;\n  }\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(bl) => {\n  for (let i = 0; i < bl.length; i++)\n  for (let j = i + 1; j < bl.length; j++)\n  for (let k = j + 1; k < bl.length; k++)\n \n  if ((bl[i] + bl[j] + bl[k]) === 0) return true;\n  return false;\n}\n\n/*\n  tripletsSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(bl) => {\n  for (let i = 0; i < bl.length; i++)\n  for (let j = i + 1; j < bl.length; j++)\n  for (let k = j + 1; k < bl.length; k++)\n \n  if ((bl[i] + bl[j] + bl[k]) === 0) return true;\n  return false;\n}\n\n/*\n  tripletsSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(bl) => {\n  for (let i = 0; i < bl.length; i++)\n  for (let j = i + 1; j < bl.length; j++)\n  for (let k = j + 1; k < bl.length; k++)\n \n  if ((bl[i] + bl[j] + bl[k]) === 0) return true;\n  return false;\n}\n\n/*\n  tripletsSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(bl) => {\n  for (let i = 0; i < bl.length; i++)\n  for (let j = i + 1; j < bl.length; j++)\n  for (let k = j + 1; k < bl.length; k++)\n \n  if ((bl[i] + bl[j] + bl[k]) === 0) return true;\n  return false;\n}\n\n/*\n  tripletsSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(bl) => {\n  for (let i = 0; i < bl.length; i++)\n  for (let j = i + 1; j < bl.length; j++)\n  for (let k = j + 1; k < bl.length; k++)\n \n  if ((bl[i] + bl[j] + bl[k]) === 0) return true;\n  return false;\n}\n\n/*\n  tripletsSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero =(bl) => {\n  for (let i = 0; i < bl.length; i++)\n  for (let j = i + 1; j < bl.length; j++)\n  for (let k = j + 1; k < bl.length; k++)\n \n  if ((bl[i] + bl[j] + bl[k]) === 0) return true;\n  return false;\n}\n\n/*\n  tripletsSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSum"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return music_string.split(' ').filter(note => note != '').map(note => note_map [ note ]);\n  }\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic =(music_string) => {\n  const note_map = {\n    'o' : 4, 'o|' : 2, '.|' : 1}\n  ;\n \n  const notes = music_string.split(' ');\n  const result = []\n  for (let i = 0; i < notes.length; i++) {\n    const note = notes[i];\n    const beat = note_map[note];\n    result.push(beat);\n  }\n  return result;\n}\n\n// TEST CODE\n\n// parseMusic('o o|.| o| o|.|.|.|.| o o')\n// parseMusic('o o|.| o| o|.|.|.|.| o o')\n\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n// console.log(parseMusic('o o|.| o|"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  for (let i2 = arr.length - 1; i2 > 0; i2--) {\n    if (arr [ i2 ] < arr [ i2 - 1 ]) {\n      return i2}\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    }\n  return - 1\n  }\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange =(arr) => {\n  if (arr.length == 0) {\n    return - 1}\n  for (let i2 = arr.length - 1; i2 > 0; i2--) {\n    if (arr [ i2 ] < arr [ i2 - 1 ]) {\n      return i2}\n   \n  }\n  return -1\n}\n\nexport default canArrange\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(lines, w) => {\n  if (lines.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = lines.length - 1;\n  while (i < j) {\n    if (lines [ i ] != lines [ j ])\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    return false;\n    i++;\n    j--;\n    }\n  return true;\n  }\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly =(lines, w) => {\n  if (lines.reduce(((prev, item) => prev + item), 0) > w)\n  return false;\n  var i = 0, j = lines.length - 1;\n  while (i < j) {\n    if (lines [ i ]!= lines [ j ])\n   \n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\nconsole.log(willItFly([1, 2, 3, 2, 3], 1));\nconsole.log(willItFly([1, 2, 3, 2, 3], 2));\nconsole.log(willItFly([1, 2, 3, 2, 3], 3));\nconsole.log(willItFly([1, 2, 3, 2, 3], 4));\nconsole.log(willItFly([1, 2, 3, 2, 3], 5));\nconsole.log(willItFly([1, 2, 3, 2, 3], 6));\nconsole.log(willItFly([1, 2, 3, 2, 3], 7));\nconsole.log(willItFly([1, 2, 3, 2, 3], 8));\nconsole.log(willItFly([1, 2, 3, 2, 3], 9));\nconsole.log(willItFly([1, 2, 3, 2, 3], 10));\nconsole.log(willItFly([1, 2, 3, 2, 3], 11));\nconsole.log(willItFly([1, 2, 3, 2, 3], 12));\nconsole.log(willItFly([1, 2, 3, 2, 3], 13));\nconsole.log(willItFly([1, 2, 3, 2, 3], 14));\nconsole.log(willItFly([1, 2, 3, 2, 3], 15));\nconsole.log(willItFly([1, 2, 3, 2, 3], 16));\nconsole.log(willItFly([1, 2, 3, 2, 3], 17));\nconsole.log(willItFly([1, 2, 3, 2, 3], 18));\nconsole.log(willItFly([1, 2, 3, 2, 3], 19));\nconsole.log(willItFly([1, 2, 3, 2, 3], 20));\nconsole.log(willItFly([1, 2, 3, 2, 3], 21));\nconsole.log(willItFly([1, 2, 3, 2, 3], 22));\nconsole.log(willItFly([1, 2, 3, 2, 3], 23));\nconsole.log(willItFly([1, 2, 3, 2, 3], 24));\nconsole.log(willItFly([1, 2, 3, 2, 3], 25));\nconsole.log(willItFly([1, 2, 3, 2, 3], 26));\nconsole.log(willItFly([1, 2, 3, 2, 3], 27));\nconsole.log(willItFly([1, 2, 3, 2, 3], 28));\nconsole.log(willItFly([1, 2, 3, 2, 3], 29));\nconsole.log(willItFly([1, 2, 3, 2, 3], 30));\nconsole.log(willItFly([1, 2, 3, 2, 3], 31));\nconsole.log(willItFly([1, 2, 3, 2, 3], 32));\nconsole.log(willItFly([1, 2, 3, 2, 3], 33));\nconsole.log(willItFly([1, 2, 3, 2, 3], 34));\nconsole.log(willItFly([1, 2, 3, 2, 3], 35));\nconsole.log(willItFly([1, 2, 3, 2, 3], 36));\nconsole.log(willItFly([1, 2, 3, 2, 3], 37));\nconsole.log(willItFly([1, 2, 3, 2, 3], 38));\nconsole.log(willItFly([1, 2, 3, 2, 3], 39));\nconsole.log(willItFly([1, 2, 3, 2, 3], 40));\nconsole.log(willItFly([1, 2, 3, 2, 3], 41));\nconsole.log(willItFly([1, 2, 3, 2, 3], 42));\nconsole.log(willItFly([1, 2, 3, 2, 3], 43));\nconsole.log(willItFly([1, 2, 3, 2, 3], 44));\nconsole.log(willItFly([1, 2, 3, 2, 3], 45));\nconsole.log(willItFly([1, 2, 3, 2, 3], 46));\nconsole.log(willItFly([1, 2, 3, 2, 3], 47));\nconsole.log(willItFly([1, 2, 3, 2, 3], 48));\nconsole.log(willItFly([1, 2, 3, 2, 3], 49));\nconsole.log(willItFly([1, 2, 3, 2, 3], 50));\nconsole.log(willItFly([1, 2, 3, 2, 3], 51));\nconsole.log(willItFly([1, 2, 3, 2, 3], 52));\nconsole.log(willItFly([1, 2, 3, 2, 3], 53));\nconsole.log(willItFly([1, 2, 3, 2, 3], 54));\nconsole.log(willItFly([1, 2, 3, 2, 3], 55));\nconsole.log(willItFly([1, 2, 3, 2, 3], 56));\nconsole.log(willItFly([1, 2, 3, 2, 3], 57));\nconsole.log(willItFly([1, 2, 3, 2, 3], 58));\nconsole"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(s) => {\n  return decode(decode(s));\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic =(s) => {\n  return decode(decode(s));\n \n}\n\nconst decode = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(2 * i, Math.min((2 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 2) + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst validate = (s) => {\n  if (typeof s!='string')\n    throw new TypeError(\"must be a string\");\n  if (s.length > 3)\n    throw new RangeError(\"must be length 3\");\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n  validate: validate\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(s2 => String.fromCharCode(\n  ((s2.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  )).join(\"\");\n  }\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift =(s) => {\n  return s.split(\"\").map(s2 => String.fromCharCode(\n  ((s2.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n \n  )).join(\"\");\n}\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst encode = (s) => encodeShift(s);\nconst decode ="}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let i2 = 0\n  if (hi > lo) {\n    i2 = hi - lo}\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (i2 == 1 || i2 == 0) {\n    return 'NO'}\n  for (let i = 2; i * i <= i2; i++) {\n    if (i2 % i == 0) {\n      return 'NO'}\n    }\n  return 'YES'}\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection =(interval1, interval2) => {\n  let lo = interval1 [ 0 ]\n  if (interval2 [ 0 ] > lo) {\n    lo = interval2 [ 0 ]}\n  let hi = interval1 [ 1 ]\n  if (interval2 [ 1 ] < hi) {\n    hi = interval2 [ 1 ]}\n  let i2 = 0\n  if (hi > lo) {\n    i2 = hi - lo}\n \n  let prime = (new Array(i2 + 1)).fill(0)\n  for (let i = 2; i <= i2; i++) {\n    let j = 2\n    while (j <= i2) {\n      if (i * j > hi + lo) {\n        break}\n      if (prime [ j - 1 ]) {\n        break}\n      prime [ j - 1 ] = 1\n      j++}\n  }\n  if (prime [ i2 ]) {\n    return \"YES\"}\n  return \"NO\"\n}\n\n//console.log(intersection((-1, 1), (0, 4)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-1, 0), (0, 4)))\n//console.log(intersection((-3, -1), (0, 4)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(intersection((-3, -1), (-5, 5)))\n//console.log(inter"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(n2) => {\n  return n2 *(n2 + 1) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN =(n2) => {\n  return n2 *(n2 + 1) / 2;\n \n}\n\n/*\n  The sum of the digits in the number n.\n  >>> sumDigits(10)\n  10\n  >>> sumDigits(20)\n  30\n  >>> sumDigits(50)\n  60\n  >>> sumDigits(100)\n  100\n  >>> sumDigits(5)\n  5\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(0)\n  0\n  */\nconst sumDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result = result + n % 10;\n    n = n / 10;\n  }\n  return result;\n}\n\n/*\n  The sum of the squares of the digits in the number n.\n  >>> sumSquares(10)\n  10\n  >>> sumSquares(20)\n  100\n  >>> sumSquares(50)\n  200\n  >>> sumSquares(100)\n  500\n  >>> sumSquares(5)\n  25\n  >>> sumSquares(1)\n  1\n  >>> sumSquares(0)\n  0\n  */\nconst sumSquares = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result = result + n % 10 * n % 10;\n    n = n / 10;\n  }\n  return result;\n}\n\n/*\n  Find the sum of all the numbers from 1 to n.\n  >>> sumNumbers(10)\n  45\n  >>> sumNumbers(20)\n  505\n  >>> sumNumbers(50)\n  7165\n  >>> sumNumbers(100)\n  10101\n  >>> sumNumbers(1)\n  1\n  >>> sumNumbers(0)\n  0\n  */\nconst sumNumbers = (n2) => {\n  let sum = 0;\n  while (n2 > 0) {\n    sum = sum + n2;\n    n2 = n2 - 1;\n  }\n  return sum;\n}\n\n/*\n  Find the sum of all the squares of the numbers from 1 to n.\n  >>> sumSquaresNumbers(10)\n  45\n  >>> sumSquaresNumbers(20)\n  500\n  >>> sumSquaresNumbers(50)\n  7165\n  >>> sumSquaresNumbers(100)\n  10101\n  >>> sumSquaresNumbers(1)\n  1\n  >>> sumSquaresNumbers(0)\n  0\n  */\nconst sumSquaresNumbers = (n2) => {\n  let sum = 0;\n  while (n2 > 0) {\n    sum = sum + n2 * n2;\n    n2 = n2 - 1;\n  }\n  return sum;\n}\n\n/*\n  Find the sum of all the multiples of 3 or 5 below n.\n  >>> sumMultiples(10)\n  3\n  >>> sumMultiples(20)\n  15\n  >>> sumMultiples(50)\n  75\n  >>> sumMultiples(100)\n  165\n  >>> sumMultiples(5)\n  15\n  >>> sumMultiples(1)\n  1\n  >>> sumMultiples(0)\n  0\n  */\nconst sumMultiples = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum = sum + n * (n + 1) / 2;\n    n = n - 1;\n  }\n  return sum;\n}\n\n/*\n  Find the sum of all the multiples of 3 or 5 above n.\n  >>> sumMultiples(10)\n  15\n  >>> sumMultiples(20)\n  75\n  >>> sumMultiples(50)\n  165\n  >>> sumMultiples(100)\n  1025\n  >>> sumMultiples(5)\n  15\n  >>> sumMultiples(1)\n  1\n  >>> sumMultiples(0)\n  0\n  */\nconst sumMultiples = (n2) => {\n  let sum = 0;\n  while (n2 > 0) {\n    sum = sum + n2 * (n2 + 1) / 2;\n    n2 = n2 - 1;\n  }\n  return sum;\n}\n\n/*\n  Find the sum of all the multiples of 3 or 5 below n.\n  >>> sumMultiples(10)\n  15\n  >>> sumMultiples(20)\n  75\n  >>> sumMultiples(50)\n  165\n  >>> sumMultiples(100)\n  1025\n  >>> sumMultiples(5)\n  15\n  >>> sumMultiples(1)\n  1\n  >>> sumMultiples(0)\n  0\n  */\nconst sumMultiples = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum = sum + n * (n + 1) / 2;\n    n = n - 1;\n  }\n  return sum;\n}\n\n/*\n  Find the sum of all the multiples of 3 or 5 above n.\n  >>> sumMultiples(10)\n  15\n  >>> sumMultiples(20)\n  75\n  >>> sumMultiples(50)\n  165\n  >>> sumMultiples(100)\n  1025\n  >>> sumMultiples(5)\n  15\n  >>> sumMultiples(1)\n  1\n  >>> sumMultiples(0)\n  0\n  */\nconst sumMultiples = (n2) => {\n  let sum = 0;\n  while (n2 > 0) {\n    sum = sum + n2 * (n2 + 1) / 2;\n    n2 = n2 - 1;\n  }\n  return sum;\n}\n\n/*\n  Find the sum of all the multiples of 3 or 5 below n.\n  >>> sumMultiples(10)\n  15\n  >>> sumMultiples(20)\n  75\n  >>> sumMultiples(50)\n  165\n  >>> sumMultiples(100)\n  1025\n  >>> sumMultiples(5)\n  15\n  >>> sumMultiples(1)\n  1\n  >>> sumMultiples(0)\n  0\n  */"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(i) => {\n  if (i < 2)\n  return false;\n  for (let k = 2; k < i - 1; k++)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  if (i % k == 0)\n  return false;\n  return true;\n  }\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime =(i) => {\n  if (i < 2)\n  return false;\n  for (let k = 2; k < i - 1; k++)\n \n  if (i % k == 0)\n  return false;\n  return true;\n}\n\n//What is the difference between \"return false;\" and \"return false;\"\nconst isPrime2 =(i) => {\n  if (i < 2)\n  return false;\n  for (let k = 2; k < i - 1; k++)\n \n  if (i % k == 0)\n  return false;\n  return true;\n}\n\nconsole.log(isPrime(6));\nconsole.log(isPrime(101));\nconsole.log(isPrime(11));\nconsole.log(isPrime(13441));\nconsole.log(isPrime(61));\nconsole.log(isPrime(4));\nconsole.log(isPrime(1));\nconsole.log(isPrime2(6));\nconsole.log(isPrime2(101));\nconsole.log(isPrime2(11));\nconsole.log(isPrime2(13441));\nconsole.log(isPrime2(61));\nconsole.log(isPrime2(4));\nconsole.log(isPrime2(1));<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  for (let i2 = 0; i2 < t.length; i2++) {\n    let l = 0\n    for (let j = 0; j < t [ i2 ].length; j++) {\n      if (t [ i2 ] [ j ] != 'a' && t [ i2 ] [ j ] != 'e' && t [ i2 ] [ j ] != 'i' && t [ i2 ] [ j ] != 'o' && t [ i2 ] [ j ] != 'u' && t [ i2 ] [ j ] != 'A' &&\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t [ i2 ] [ j ] != 'U' && t [ i2 ] [ j ] != 'O' && t [ i2 ] [ j ] != 'I' && t [ i2 ] [ j ] != 'E') {\n        l++\n        }\n      }\n    if (l == n) {\n      k.push(t [ i2 ])}\n    }\n  return k\n  }\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  for (let i2 = 0; i2 < t.length; i2++) {\n    let l = 0\n    for (let j = 0; j < t [ i2 ].length; j++) {\n      if (t [ i2 ] [ j ]!= 'a' && t [ i2 ] [ j ]!= 'e' && t [ i2 ] [ j ]!= 'i' && t [ i2 ] [ j ]!= 'o' && t [ i2 ] [ j ]!= 'u' && t [ i2 ] [ j ]!= 'A' &&\n     \n        t [ i2 ] [ j ]!= 'E' && t [ i2 ] [ j ]!= 'I' && t [ i2 ] [ j ]!= 'O' && t [ i2 ] [ j ]!= 'U' && t [ i2 ] [ j ]!='') {\n          l++\n        }\n    }\n    if (l == n) {\n      k.push(t [ i2 ])\n    }\n  }\n  return k\n}\n\n// Another solution:\n\nconst selectWords =(s, n) => {\n  let t = s.split( / s /)\n  if (s == '') {\n    return [ ]}\n  let k = [ ]\n  let l = 0\n  for (let i2 = 0; i2 < t.length; i2++) {\n    for (let j = 0; j < t [ i2 ].length; j++) {\n      if (t [ i2 ] [ j ]!= 'a' && t [ i2 ] [ j ]!= 'e' && t [ i2 ] [ j ]!= 'i' && t [ i2 ] [ j ]!= 'o' && t [ i2 ] [ j ]!= 'u' && t [ i2 ] [ j ]!= 'A' &&\n        t [ i2 ] [ j ]!= 'E' && t [ i2 ] [ j ]!= 'I' && t [ i2 ] [ j ]!= 'O' && t [ i2 ] [ j ]!= 'U' && t [ i2 ] [ j ]!='') {\n        l++\n      }\n    }\n    if (l == n) {\n      k.push(t [ i2 ])\n    }\n  }\n  return k\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var lis = [ ];\n  for (const n2 of s.split(\" \"))\n  if ( !isNaN(n2))\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  lis.push(Number(n2))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n  }\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution =(s, n) => {\n  var lis = [ ];\n  for (const n2 of s.split(\" \"))\n  if (!isNaN(n2))\n \n  if (n2 > 0)\n    lis.push(n2);\n  else\n    lis.splice(lis.indexOf(n2), 1);\n  return lis.reduce((a, b) => a + b, 0);\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));\n\n/*\n  Given a non-empty string containing digits from 0-9 representing a fraction,\n  return the fraction's numerator.\n\n  Note: The string may contain an arbitrary number of spaces,\n  but only two consecutive spaces are counted as one\n  space.\n  */\nconst fractionNumerator =(n) => {\n  return n.split(\" \").reduce((a, b) => a + b, 0);\n}\n\nconsole.log(fractionNumerator(\"1 2/3\"));\nconsole.log(fractionNumerator(\"1 2/3 4/5\"));\nconsole.log(fractionNumerator(\"1 2/3 4/5 6/7\"));\nconsole.log(fractionNumerator(\"1 2/3 4/5 6/7 8/9\"));\nconsole.log(fractionNumerator(\"1 2/3 4/5 6/7 8/9 9/10\"));\nconsole.log(fractionNumerator(\"1 2/3 4/5 6/7 8/9 9/10 11/12\"));\n\n/*\n  Given two non-empty string s and t, return the larger string of the two.\n  If the two string are of different length, return the string of the shortest length.\n  If the two strings are of the same length, return a string that contains the larger\n  of the first two characters of the two strings.\n\n  Note:\n  The length of both strings s and t must be greater than 1.\n  The length of the returned string should be less than or equal to lenght of the two strings.\n  */\nconst maxString = (s, t) => {\n  if (s.length > t.length)\n    return t;\n  if (s.length < t.length)\n    return s;\n  if (s.length == t.length)\n    return s.length > 1? s[0] + s[1] : s[0];\n}\n\nconsole.log(maxString(\"2/3\", \"1 2/3 4/5\"));\nconsole.log(maxString(\"1 2/3 4/5 6/7\", \"2/3 4/5 6/7 8/9\"));\nconsole.log(maxString(\"1 2/3 4/5 6/7 8/9 9/10\", \"2/3 4/5 6/7 8/9 9/10 11/12\"));\nconsole.log(maxString(\"1 2/3 4/5 6/7 8/9 9/10 11/12\", \"2/3 4/5 6/7 8/9 9/10 11/12\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p [ k ]\n      let u2 = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (h < 0) {\n        y = - 1; h = - h;}\n      if (u2 < 0) {\n        u = - 1; u2 = - u2;}\n      while (h >= 10) {\n        m+=h % 10;\n        h =(h - h % 10) / 10;\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      m+=y * h\n      while (u2 >= 10) {\n        n+=u2 % 10;\n        u2 =(u2 - u2 % 10) / 10;\n        }\n      n+=u * u2\n      if (m > n) {\n        let tmp = p [ k ]\n        p [ k ] = p [ k + 1 ]\n        p [ k + 1 ] = tmp\n        }\n      }\n    }\n  return p\n  }\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints =(nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p [ k ]\n      let u2 = p [ k + 1 ]\n      let y = 1\n      let u = 1\n      if (h < 0) {\n        y = - 1; h = - h;}\n      if (u2 < 0) {\n        u = - 1; u2 = - u2;}\n      while (h >= 10) {\n        m+=h % 10;\n        h =(h - h % 10) / 10;\n        }\n     \n      while (u2 >= 10) {\n        n+=u2 % 10;\n        u2 =(u2 - u2 % 10) / 10;\n        }\n      \n      if (m < n) {\n        p [ k ] = u * y + m\n        p [ k + 1 ] = u2 * y + n\n        break\n        }\n      }\n    }\n  return p\n  }\n\nconsole.log(orderByPoints([3, 2, 1, 2, 3]))\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(i, h) => {\n  return i * h / 2.0;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea =(i, h) => {\n  return i * h / 2.0;\n \n}\n \n/*Given length of a side and high return area for a rectangle.\n  >>> rectangleArea(4, 5)\n  25.0\n  */\nconst rectangleArea =(l, w) => {\n  return l * w;\n}\n\n/*Given length of a side and high return volume for a cylinder.\n  >>> cylinderVolume(5, 3)\n  12.5\n  */\nconst cylinderVolume =(h, d) => {\n  return (3.14 * Math.pow(h, 2) * d);\n}\n\n/*Given length of a side and high return volume for a sphere.\n  >>> sphereVolume(4, 3)\n  63.5\n  */\nconst sphereVolume =(r) => {\n  return (4.0/3.0 * Math.pow(r, 3));\n}\n\n/*Given length of a side and high return surface area for a cylinder.\n  >>> cylinderSurfaceArea(5, 3)\n  17.0\n  */\nconst cylinderSurfaceArea =(h, d) => {\n  return (3.14 * h * d);\n}\n\n/*Given length of a side and high return surface area for a sphere.\n  >>> sphereSurfaceArea(4, 3)\n  46.0\n  */\nconst sphereSurfaceArea =(r) => {\n  return (4.0/3.0 * Math.pow(r, 2));\n}\n\n/*Given length of a side and high return volume for a triangle.\n  >>> triangleVolume(4, 3)\n  9.0\n  */\nconst triangleVolume =(i, h) => {\n  return i * h / 3.0;\n}\n\n/*Given length of a side and high return volume for a rectangle.\n  >>> rectangleVolume(4, 5)\n  20.0\n  */\nconst rectangleVolume =(l, w) => {\n  return l * w * 2.0;\n}\n\n/*Given length of a side and high return volume for a cylinder.\n  >>> cylinderVolume(5, 3)\n  12.5\n  */\nconst cylinderVolume =(h, d) => {\n  return (3.14 * Math.pow(h, 2) * d);\n}\n\n/*Given length of a side and high return volume for a sphere.\n  >>> sphereVolume(4, 3)\n  63.5\n  */\nconst sphereVolume =(r) => {\n  return (4.0/3.0 * Math.pow(r, 3));\n}\n\n/*Given length of a side and high return volume for a cylinder.\n  >>> cylinderSurfaceArea(5, 3)\n  17.0\n  */\nconst cylinderSurfaceArea =(h, d) => {\n  return (3.14 * h * d);\n}\n\n/*Given length of a side and high return volume for a sphere.\n  >>> sphereSurfaceArea(4, 3)\n  46.0\n  */\nconst sphereSurfaceArea =(r) => {\n  return (4.0/3.0 * Math.pow(r, 2));\n}\n\n/*Given length of a side and high return volume for a cylinder.\n  >>> cylinderVolume(5, 3)\n  12.5\n  */\nconst cylinderVolume =(h, d) => {\n  return (3.14 * Math.pow(h, 2) * d);\n}\n\n/*Given length of a side and high return volume for a sphere.\n  >>> sphereVolume(4, 3)\n  63.5\n  */\nconst sphereVolume =(r) => {\n  return (4.0/3.0 * Math.pow(r, 3));\n}\n\n/*Given length of a side and high return volume for a cylinder.\n  >>> cylinderVolume(5, 3)\n  12.5\n  */\nconst cylinderVolume =(h, d) => {\n  return (3.14 * Math.pow(h, 2) * d);\n}\n\n/*Given length of a side and high return volume for a sphere.\n  >>> sphereVolume(4, 3)\n  63.5\n  */\nconst sphereVolume =(r) => {\n  return (4.0/3.0 * Math.pow(r, 3));\n}\n\n/*Given length of a side and high return volume for a cylinder.\n  >>> cylinderVolume(5, 3)\n  12.5\n  */\nconst cylinderVolume =(h, d) => {\n  return (3.14 * Math.pow(h, 2) * d);\n}\n\n/*Given length of a side and high return volume for a sphere.\n  >>> sphereVolume(4, 3)\n  63.5\n  */\nconst sphereVolume =(r) => {\n  return (4.0/3.0 * Math.pow(r, 3));\n}\n\n/*Given length of a side and high return volume for a cylinder.\n  >>> cylinderVolume(5, 3)\n  12.5\n  */\nconst cylinderVolume =(h, d) => {\n  return (3.14 * Math.pow(h, 2) * d);\n}\n\n/*Given length of a side and high return volume for a sphere.\n  >>> sphereVolume(4, 3)\n  63.5\n  */\nconst sphereVolume =(r) => {\n  return (4.0/3.0 * Math.pow(r, 3));\n}\n\n/*Given length of a side and high return volume for a cylinder.\n  >>> cylinderVolume(5, 3)\n  12.5\n  */\nconst cylinderVolume =(h, d) => {\n  return (3.14 * Math.pow(h, 2) * d);\n}\n\n/*Given length of a side and high return volume for a sphere.\n  >>> sphereVolume(4, 3)\n  63.5\n  */\nconst sphereVolume =(r) => {\n  return (4.0/3.0 * Math.pow(r, 3));\n}\n\n/*Given length of a side and high return volume for a cylinder.\n  >>> cylinderVolume(5, 3)\n  12.5\n  */\nconst cylinderVolume =(h, d) => {\n  return (3.14 * Math.pow(h, 2) * d);\n}\n\n/*Given length of a side and high return volume for a sphere.\n  "}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var n2, result = [ ];\n  for (const n of numbers) {\n    if (n2 == undefined)\n    n2 = n;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    n2 = Math.max(n2, n);\n    result.push(n2);\n    }\n  return result;\n  }\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax =(numbers) => {\n  var n2, result = [ ];\n  for (const n of numbers) {\n    if (n2 == undefined)\n    n2 = n;\n    else\n   \n    if (n2 > n) {\n      result.push(n2);\n      n2 = n;\n    }\n  }\n  if (n2!= undefined) {\n    result.push(n2);\n  }\n  return result;\n}\n\n// From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n// Test Case\n// rollingMax([1, 2, 3, 2, 3, 4, 2])\n// -> [1, 2, 3, 3, 3, 4, 4]\n// Test Case\n// rollingMax([1, 2, 3, 2, 3, 4, 2, 3])\n// -> [1, 2, 3, 3, 3, 4, 4]\nconst rollingMax2 =(numbers) => {\n  const result = [ ];\n  let currentMax = 0;\n  let currentIndex = 0;\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      currentMax = max;\n      currentIndex = i;\n      max = numbers[i];\n    }\n  }\n  let tmp = [ ];\n  for (let i = 0; i < currentIndex; i++) {\n    tmp.push(numbers[i]);\n  }\n  tmp.push(max);\n  tmp.push(numbers[currentIndex]);\n  result.push(...tmp);\n  return result;\n}\n\n// From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n// Test Case\n// rollingMax([1, 2, 3, 2, 3, 4, 2, 3])\n// -> [1, 2, 3, 3, 3, 4, 4]\nconst rollingMax3 =(numbers) => {\n  const result = [ ];\n  let currentMax = 0;\n  let currentIndex = 0;\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      currentMax = max;\n      currentIndex = i;\n      max = numbers[i];\n    }\n  }\n  let tmp = [ ];\n  for (let i = 0; i < currentIndex; i++) {\n    tmp.push(numbers[i]);\n  }\n  tmp.push(max);\n  tmp.push(numbers[currentIndex]);\n  result.push(...tmp);\n  return result;\n}\n\n// From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n// Test Case\n// rollingMax([1, 2, 3, 2, 3, 4, 2, 3])\n// -> [1, 2, 3, 3, 3, 4, 4]\nconst rollingMax4 =(numbers) => {\n  const result = [ ];\n  let currentMax = 0;\n  let currentIndex = 0;\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      currentMax = max;\n      currentIndex = i;\n      max = numbers[i];\n    }\n  }\n  let tmp = [ ];\n  for (let i = 0; i < currentIndex; i++) {\n    tmp.push(numbers[i]);\n  }\n  tmp.push(max);\n  tmp.push(numbers[currentIndex]);\n  result.push(...tmp);\n  return result;\n}\n\n// From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n// Test Case\n// rollingMax([1, 2, 3, 2, 3, 4, 2, 3])\n// -> [1, 2, 3, 3, 3, 4, 4]\nconst rollingMax5 =(numbers) => {\n  const result = [ ];\n  let currentMax = 0;\n  let currentIndex = 0;\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      currentMax = max;\n      currentIndex = i;\n      max = numbers[i];\n    }\n  }\n  let tmp = [ ];\n  for (let i = 0; i < currentIndex; i++) {\n    tmp.push(numbers[i]);\n  }\n  tmp.push(max);\n  tmp.push(numbers[currentIndex]);\n  result.push(...tmp);\n  return result;\n}\n\n// From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n// Test Case\n// rollingMax([1, 2, 3, 2, 3, 4, 2, 3])\n// -> [1, 2, 3, 3, 3, 4, 4]\nconst rollingMax6 =(numbers) => {\n  const result = [ ];\n  let currentMax = 0;\n  let currentIndex = 0;\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      currentMax = max;\n      currentIndex = i;\n      max = numbers[i];\n    }\n  }\n  let tmp = [ ];\n  for (let i = 0; i < currentIndex; i++) {\n    tmp.push(numbers[i]);\n  }\n  tmp.push(max);\n  tmp.push(numbers[currentIndex]);\n  result.push(...tmp);\n  return result;\n}\n\n// From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n// Test Case\n// rollingMax([1, 2, 3, 2, 3, 4, 2, 3])\n// -> [1, 2, 3, 3, 3, 4, 4]\nconst rollingMax7 =(numbers) => {\n  const result = [ ];\n  let currentMax"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var i = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    i+=1;\n    else\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    i-=1;\n    if (i < 0)\n    return false;\n    }\n  return i == 0;\n  }\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing =(brackets) => {\n  var i = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n    i+=1;\n    else\n   \n    if (b == \")\")\n    i-=1;\n    if (i < 0)\n    return false;\n  }\n  return true;\n}\n\n/*\n  Given a string, returns the string with all brackets removed.\n\n  >>> removeBrackets(\"(()())\")\n  '()()'\n  >>> removeBrackets(\"\")\n  ''\n  >>> removeBrackets(\"()()\")\n  '()()'\n  >>> removeBrackets(\"(\")\n  '()'\n  >>> removeBrackets(\")\")\n  ''\n  >>> removeBrackets(\"(a)\")\n  'a'\n  >>> removeBrackets(\"\")\n  ''\n  >>> removeBrackets(\"(())\")\n  '()()'\n  >>> removeBrackets(\"(()())\")\n  '()()()'\n  >>> removeBrackets(\"(())\")\n  '()()'\n  >>> removeBrackets(\"(()()\")\n  '()()'\n  >>> removeBrackets(\"()()\")\n  '()()'\n  >>> removeBrackets(\"(()()\")\n  '()()'\n  >>> removeBrackets(\"(())\")\n  '()()'\n  >>> removeBrackets(\"(())\")\n  '()()'\n  >>> removeBrackets(\"(())\")\n  '()()'\n  >>> removeBrackets(\"(()())\")\n  '()()()'\n  >>> removeBrackets(\"(()())\")\n  '()()()'\n  >>> removeBrackets(\"()(\")\n  '()()'\n  >>> removeBrackets(\"())\")\n  ''\n  >>> removeBrackets(\"(a)\")\n  'a'\n  >>> removeBrackets(\"(a)\")\n  'a'\n  >>> removeBrackets(\"(a)\")\n  'a'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a)\")\n  'a'\n  >>> removeBrackets(\"(\")\n  '()'\n  >>> removeBrackets(\")\")\n  ''\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b)c)\")\n  'a(b)c'\n  >>> removeBrackets(\"(a(b"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  for (let i2 = 0; i2 < guess.length; i2++) {\n    game [ i2 ]-=guess [ i2 ]\n    if (game [ i2 ] < 0)\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    game [ i2 ] = - game [ i2 ];}\n  return game\n  }\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare =(game, guess) => {\n  for (let i2 = 0; i2 < guess.length; i2++) {\n    game [ i2 ]-=guess [ i2 ]\n    if (game [ i2 ] < 0)\n   \n  }\n}\n\nconsole.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([4,1,1,0,0,6],[0,5,0,0,0,4]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,0]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,7]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0,6],[4,1,1,0,0,6]))\nconsole.log(compare([4,1,1,0,0"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b2, c) => {\n  if (a + b2 <= c || a + c <= b2 || b2 + c <= a)\n  return - 1;\n  var s =(a + b2 + c) / 2;\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  var area = Math.pow(s *(s - a) *(s - b2) *(s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n  }\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea =(a, b2, c) => {\n  if (a + b2 <= c || a + c <= b2 || b2 + c <= a)\n  return - 1;\n  var s =(a + b2 + c) / 2;\n \n  return Math.sqrt(s*(s-a)*(s-b2)*(s-c));\n}\n\nconst sumOfSquares =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares2 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst triangleArea2 =(a, b2, c) => {\n  if (a + b2 <= c || a + c <= b2 || b2 + c <= a)\n  return - 1;\n  var s =(a + b2 + c) / 2;\n \n  return Math.sqrt(s*(s-a)*(s-b2)*(s-c));\n}\n\nconst triangleArea3 =(a, b2, c) => {\n  if (a + b2 <= c || a + c <= b2 || b2 + c <= a)\n  return - 1;\n  var s =(a + b2 + c) / 2;\n \n  return Math.sqrt(s*(s-a)*(s-b2)*(s-c));\n}\n\nconst sumOfSquares3 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares4 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares5 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares6 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares7 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares8 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares9 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares10 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares11 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares12 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares13 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares14 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares15 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares16 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares17 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares18 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares19 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares20 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares21 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares22 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares23 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares24 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares25 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares26 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares27 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares28 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares29 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares30 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares31 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares32 =(n) => {\n  return n*(n+1)*(2*n+1)/6;\n}\n\nconst sumOfSquares33 =(n) => {\n  return n*(n+1)*(2*n+1)/6;"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(l) => {\n  for (let i2 = 0; i2 < l.length; i2++)\n  for (let j = i2 + 1; j < l.length; j++)\n  if (l [ i2 ] + l [ j ] == 0)\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  return true;\n  return false;\n  }\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero =(l) => {\n  for (let i2 = 0; i2 < l.length; i2++)\n  for (let j = i2 + 1; j < l.length; j++)\n  if (l [ i2 ] + l [ j ] == 0)\n \n  return true;\n  return false;\n};\n\n/*\n  findFirstZero finds the first zero element in a list.\n  it returns the index of the zero element, or -1 if there is no zero element.\n  >>> findFirstZero([1, 3, 5, 0])\n  -1\n  >>> findFirstZero([1, 3, -2, 1])\n  2\n  >>> findFirstZero([1, 2, 3, 7])\n  -1\n  >>> findFirstZero([2, 4, -5, 3, 5, 7])\n  2\n  >>> findFirstZero([1])\n  -1\n  */\nconst findFirstZero =(l) => {\n  for (let i = 0; i < l.length; i++)\n  if (l [ i ] == 0)\n  return i;\n  return -1;\n};\n\n/*\n  findMax finds the largest element in a list.\n  it returns the largest element, or 0 if there are no elements.\n  >>> findMax([1, 3, 5, 0])\n  5\n  >>> findMax([1, 3, -2, 1])\n  3\n  >>> findMax([1, 2, 3, 7])\n  7\n  >>> findMax([2, 4, -5, 3, 5, 7])\n  7\n  >>> findMax([1])\n  0\n  */\nconst findMax =(l) => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++)\n  if (l [ i ] > max)\n  max = l [ i ];\n  return max;\n};\n\n/*\n  findMin finds the smallest element in a list.\n  it returns the smallest element, or 0 if there are no elements.\n  >>> findMin([1, 3, 5, 0])\n  0\n  >>> findMin([1, 3, -2, 1])\n  -2\n  >>> findMin([1, 2, 3, 7])\n  1\n  >>> findMin([2, 4, -5, 3, 5, 7])\n  -5\n  >>> findMin([1])\n  0\n  */\nconst findMin =(l) => {\n  let min = 0;\n  for (let i = 0; i < l.length; i++)\n  if (l [ i ] < min)\n  min = l [ i ];\n  return min;\n};\n\n/*\n  findPairsSumToZero finds all pairs that sum to zero.\n  it returns a list of tuples, or an empty list if there are no pairs.\n  >>> findPairsSumToZero([1, 3, 5, 0])\n  [(1, 3), (1, 5), (3, 5)]\n  >>> findPairsSumToZero([1, 3, -2, 1])\n  []\n  >>> findPairsSumToZero([1, 2, 3, 7])\n  []\n  >>> findPairsSumToZero([2, 4, -5, 3, 5, 7])\n  [(2, 4), (2, 5), (4, 5)]\n  >>> findPairsSumToZero([1])\n  []\n  */\nconst findPairsSumToZero =(l) => {\n  let i1 = 0;\n  let i2 = 0;\n  let s = 0;\n  let result = [];\n  while (i1 < l.length) {\n    i2 = 0;\n    while (i2 < l.length) {\n      s = l [ i1 ] + l [ i2 ];\n      if (s == 0) {\n        result.push( (l [ i1 ], l [ i2 ]) );\n      }\n      i2++;\n    }\n    i1++;\n  }\n  return result;\n};\n\n/*\n  main takes an array of ints and returns the sum of all the even elements.\n  >>> main([1, 3, 5, 0])\n  6\n  >>> main([1, 3, -2, 1])\n  3\n  >>> main([1, 2, 3, 7])\n  10\n  >>> main([2, 4, -5, 3, 5, 7])\n  23\n  >>> main([1])\n  0\n  */\nconst main =(a) => {\n  let sum = 0;\n  for (let i = 0; i < a.length; i++)\n  if (a [ i ] % 2 == 0)\n  sum += a [ i ];\n  return sum;\n};\n\nmodule.exports = {\n  pairsSumToZero,\n  findFirstZero,\n  findMax,\n  findMin,\n  findPairsSumToZero,\n  main\n};<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(lines) => {\n  if (lines.length == 0) {\n    return true}\n  let dup = 1\n  let pre = lines [ 0 ]\n  for (let i = 1; i < lines.length; i++) {\n    if (lines [ i ] < pre) {\n      return false}\n    if (lines [ i ] == pre) {\n      dup+=1;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      if (dup == 3) {\n        return false}\n      }\n    else {\n      pre = lines [ i ]\n      dup = 1\n      }\n    }\n  return true\n  }\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted =(lines) => {\n  if (lines.length == 0) {\n    return true}\n  let dup = 1\n  let pre = lines [ 0 ]\n  for (let i = 1; i < lines.length; i++) {\n    if (lines [ i ] < pre) {\n      return false}\n    if (lines [ i ] == pre) {\n      dup+=1;\n     \n    } else {\n      pre = lines [ i ]\n      dup = 1}\n  }\n  return true}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted2 =(lines) => {\n  if (lines.length == 0) {\n    return true}\n  let dup = 1\n  let pre = lines [ 0 ]\n  for (let i = 1; i < lines.length; i++) {\n    if (lines [ i ] <= pre) {\n      return false}\n    pre = lines [ i ]\n    dup=1}\n  return true}\n\nconst isSorted3 =(lines) => {\n  if (lines.length == 0) {\n    return true}\n  let pre = lines [ 0 ]\n  for (let i = 1; i < lines.length; i++) {\n    if (lines [ i ] < pre) {\n      return false}\n    pre = lines [ i ]\n  }\n  return true}\n\nconst isSorted4 =(lines) => {\n  if (lines.length == 0) {\n    return true}\n  let pre = lines [ 0 ]\n  let mid = lines [ 1 ]\n  let post = lines [ lines.length - 1 ]\n  if (post < mid) {\n    return false}\n  for (let i = 2; i < lines.length; i++) {\n    if (lines [ i ] < mid) {\n      return false}\n    if (lines [ i ] > post) {\n      return false}\n    pre = mid\n    mid = lines [ i ]\n  }\n  return true}\n\nconst isSorted5 =(lines) => {\n  if (lines.length == 0) {\n    return true}\n  let pre = lines [ 0 ]\n  let mid = lines [ 1 ]\n  let post = lines [ lines.length - 1 ]\n  if (post < mid) {\n    return false}\n  for (let i = 2; i < lines.length; i++) {\n    if (lines [ i ] < mid) {\n      return false}\n    if (lines [ i ] > post) {\n      return false}\n    pre = mid\n    mid = lines [ i ]\n  }\n  return true}\n\nconst isSorted6 =(lines) => {\n  if (lines.length == 0) {\n    return true}\n  let pre = lines [ 0 ]\n  let mid = lines [ 1 ]\n  let post = lines [ lines.length - 1 ]\n  if (post < mid) {\n    return false}\n  for (let i = 2; i < lines.length; i++) {\n    if (lines [ i ] < mid) {\n      return false}\n    if (lines [ i ] > post) {\n      return false}\n    pre = mid\n    mid = lines [ i ]\n  }\n  return true}\n\nconst isSorted7 =(lines) => {\n  if (lines.length == 0) {\n    return true}\n  let pre = lines [ 0 ]\n  let mid = lines [ 1 ]\n  let post = lines [ lines.length - 1 ]\n  if (post < mid) {\n    return false}\n  for (let i = 2; i < lines.length; i++) {\n    if (lines [ i ] < mid) {\n      return false}\n    if (lines [ i ] > post) {\n      return false}\n    pre = mid\n    mid = lines [ i ]\n  }\n  return true}\n\nconst isSorted8 =(lines) => {\n  if (lines.length == 0) {\n    return true}\n  let pre = lines [ 0 ]\n  let mid = lines [ 1 ]\n  let post = lines [ lines.length - 1 ]\n  if (post < mid) {\n    return false}\n  for (let i = 2; i < lines.length; i++) {\n    if (lines [ i ] < mid) {\n      return false}\n    if (lines [ i ] > post) {\n      return false}\n    pre = mid\n    mid = lines [ i ]\n  }\n  return true}\n\nconst isSorted9 =(lines) => {\n  if (lines.length == 0) {\n    return true}\n  let pre = lines [ 0 ]\n  let mid = lines [ 1 ]\n  let"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(arr) => {\n  if (arr.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    s+=arr [ i2 ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    if (arr [ i2 ] == 0) {\n      return 0}\n    if (arr [ i2 ] < 0) {\n      n = - n; s-=2 * arr [ i2 ]}\n    }\n  return s * n\n  }\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns =(arr) => {\n  if (arr.length == 0) {\n    return null}\n  let n = 1\n  let s = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    s+=arr [ i2 ]\n   \n    if (arr [ i2 ] > 0) {\n      n+=1}\n    else if (arr [ i2 ] < 0) {\n      n-=1}\n  }\n  return s*n\n}\n\nconst sumOfSquares =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares2 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares3 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares4 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares5 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares6 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares7 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares8 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares9 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares10 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares11 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares12 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares13 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares14 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares15 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares16 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares17 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares18 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares19 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares20 =(arr) => {\n  let sum = 0\n  for (let i2 = 0; i2 < arr.length; i2++) {\n    sum+=arr [ i2 ]*arr [ i2 ]\n  }\n  return sum\n}\n\nconst sumOfSquares21"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let Sep = 18\n  for (let i = 2; i < n; i++) {\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    Sep = Sep * 10\n    }\n  return Sep\n  }\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds =(n) => {\n  if (n == 1) {\n    return 1}\n  let Sep = 18\n  for (let i = 2; i < n; i++) {\n   \n  }\n  return Sep\n}\n\nconsole.log(startsOneEnds(1))\nconsole.log(startsOneEnds(2))\nconsole.log(startsOneEnds(3))\nconsole.log(startsOneEnds(4))\nconsole.log(startsOneEnds(5))\nconsole.log(startsOneEnds(6))\nconsole.log(startsOneEnds(7))\nconsole.log(startsOneEnds(8))\nconsole.log(startsOneEnds(9))\nconsole.log(startsOneEnds(10))\nconsole.log(startsOneEnds(11))\nconsole.log(startsOneEnds(12))\nconsole.log(startsOneEnds(13))\nconsole.log(startsOneEnds(14))\nconsole.log(startsOneEnds(15))\nconsole.log(startsOneEnds(16))\nconsole.log(startsOneEnds(17))\nconsole.log(startsOneEnds(18))\nconsole.log(startsOneEnds(19))\nconsole.log(startsOneEnds(20))\nconsole.log(startsOneEnds(21))\nconsole.log(startsOneEnds(22))\nconsole.log(startsOneEnds(23))\nconsole.log(startsOneEnds(24))\nconsole.log(startsOneEnds(25))\nconsole.log(startsOneEnds(26))\nconsole.log(startsOneEnds(27))\nconsole.log(startsOneEnds(28))\nconsole.log(startsOneEnds(29))\nconsole.log(startsOneEnds(30))\nconsole.log(startsOneEnds(31))\nconsole.log(startsOneEnds(32))\nconsole.log(startsOneEnds(33))\nconsole.log(startsOneEnds(34))\nconsole.log(startsOneEnds(35))\nconsole.log(startsOneEnds(36))\nconsole.log(startsOneEnds(37))\nconsole.log(startsOneEnds(38))\nconsole.log(startsOneEnds(39))\nconsole.log(startsOneEnds(40))\nconsole.log(startsOneEnds(41))\nconsole.log(startsOneEnds(42))\nconsole.log(startsOneEnds(43))\nconsole.log(startsOneEnds(44))\nconsole.log(startsOneEnds(45))\nconsole.log(startsOneEnds(46))\nconsole.log(startsOneEnds(47))\nconsole.log(startsOneEnds(48))\nconsole.log(startsOneEnds(49))\nconsole.log(startsOneEnds(50))\nconsole.log(startsOneEnds(51))\nconsole.log(startsOneEnds(52))\nconsole.log(startsOneEnds(53))\nconsole.log(startsOneEnds(54))\nconsole.log(startsOneEnds(55))\nconsole.log(startsOneEnds(56))\nconsole.log(startsOneEnds(57))\nconsole.log(startsOneEnds(58))\nconsole.log(startsOneEnds(59))\nconsole.log(startsOneEnds(60))\nconsole.log(startsOneEnds(61))\nconsole.log(startsOneEnds(62))\nconsole.log(startsOneEnds(63))\nconsole.log(startsOneEnds(64))\nconsole.log(startsOneEnds(65))\nconsole.log(startsOneEnds(66))\nconsole.log(startsOneEnds(67))\nconsole.log(startsOneEnds(68))\nconsole.log(startsOneEnds(69))\nconsole.log(startsOneEnds(70))\nconsole.log(startsOneEnds(71))\nconsole.log(startsOneEnds(72))\nconsole.log(startsOneEnds(73))\nconsole.log(startsOneEnds(74))\nconsole.log(startsOneEnds(75))\nconsole.log(startsOneEnds(76))\nconsole.log(startsOneEnds(77))\nconsole.log(startsOneEnds(78))\nconsole.log(startsOneEnds(79))\nconsole.log(startsOneEnds(80))\nconsole.log(startsOneEnds(81))\nconsole.log(startsOneEnds(82))\nconsole.log(startsOneEnds(83))\nconsole.log(startsOneEnds(84))\nconsole.log(startsOneEnds(85))\nconsole.log(startsOneEnds(86))\nconsole.log(startsOneEnds(87))\nconsole.log(startsOneEnds(88))\nconsole.log(startsOneEnds(89))\nconsole.log(startsOneEnds(90))\nconsole.log(startsOneEnds(91))\nconsole.log(startsOneEnds(92))\nconsole.log(startsOneEnds(93))\nconsole.log(startsOneEnds(94))\nconsole.log(startsOneEnds(95))\nconsole.log(startsOneEnds(96))\nconsole.log(startsOneEnds(97))\nconsole.log(startsOneEnds(98))\nconsole.log(startsOneEnds(99))\nconsole.log(startsOneEnds(100))\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(y2) => {\n  let p = 1;\n  let t = 1;\n  while (y2 > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      t *= y2;\n      }\n    p++;\n    y2--;\n    }\n  return t\n  }\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial =(y2) => {\n  let p = 1;\n  let t = 1;\n  while (y2 > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n     \n      p = p * y;\n      t = t + p;\n    }\n    y2 = y2 - 1;\n  }\n  return t;\n}\n\nconst test = (x) => {\n  console.log(\"Testando...\\n\", x, specialFactorial(x));\n}\n\nconst start = () => {\n  test(1);\n  test(2);\n  test(3);\n  test(4);\n  test(5);\n  test(6);\n  test(7);\n  test(8);\n  test(9);\n  test(10);\n  test(11);\n  test(12);\n  test(13);\n  test(14);\n  test(15);\n  test(16);\n  test(17);\n  test(18);\n  test(19);\n  test(20);\n  test(21);\n  test(22);\n  test(23);\n  test(24);\n  test(25);\n  test(26);\n  test(27);\n  test(28);\n  test(29);\n  test(30);\n  test(31);\n  test(32);\n  test(33);\n  test(34);\n  test(35);\n  test(36);\n  test(37);\n  test(38);\n  test(39);\n  test(40);\n  test(41);\n  test(42);\n  test(43);\n  test(44);\n  test(45);\n  test(46);\n  test(47);\n  test(48);\n  test(49);\n  test(50);\n  test(51);\n  test(52);\n  test(53);\n  test(54);\n  test(55);\n  test(56);\n  test(57);\n  test(58);\n  test(59);\n  test(60);\n  test(61);\n  test(62);\n  test(63);\n  test(64);\n  test(65);\n  test(66);\n  test(67);\n  test(68);\n  test(69);\n  test(70);\n  test(71);\n  test(72);\n  test(73);\n  test(74);\n  test(75);\n  test(76);\n  test(77);\n  test(78);\n  test(79);\n  test(80);\n  test(81);\n  test(82);\n  test(83);\n  test(84);\n  test(85);\n  test(86);\n  test(87);\n  test(88);\n  test(89);\n  test(90);\n  test(91);\n  test(92);\n  test(93);\n  test(94);\n  test(95);\n  test(96);\n  test(97);\n  test(98);\n  test(99);\n  test(100);\n  test(101);\n  test(102);\n  test(103);\n  test(104);\n  test(105);\n  test(106);\n  test(107);\n  test(108);\n  test(109);\n  test(110);\n  test(111);\n  test(112);\n  test(113);\n  test(114);\n  test(115);\n  test(116);\n  test(117);\n  test(118);\n  test(119);\n  test(120);\n  test(121);\n  test(122);\n  test(123);\n  test(124);\n  test(125);\n  test(126);\n  test(127);\n  test(128);\n  test(129);\n  test(130);\n  test(131);\n  test(132);\n  test(133);\n  test(134);\n  test(135);\n  test(136);\n  test(137);\n  test(138);\n  test(139);\n  test(140);\n  test(141);\n  test(142);\n  test(143);\n  test(144);\n  test(145);\n  test(146);\n  test(147);\n  test(148);\n  test(149);\n  test(150);\n  test(151);\n  test(152);\n  test(153);\n  test(154);\n  test(155);\n  test(156);\n  test(157);\n  test(158);\n  test(159);\n  test(160);\n  test(161);\n  test(162);\n  test(163);\n  test(164);\n  test(165);\n  test(166);\n  test(167);\n  test(168);\n  test(169);\n  test(170);\n  test(171);\n  test(172);\n  test(173);\n  test(174);\n  test(175);\n  test(176);\n  test(177);\n  test(178);\n  test(179);\n  test(180);\n  test(181);\n  test(182);\n  test(183);\n  test(184);\n  test(185);\n  test(186);\n  test(187);\n  test(188);\n  test(189);\n  test(190);\n  test(191);\n  test(192);\n  test(193);\n  test(194);\n  test(195);\n  test(196);\n  test(197);\n  test(198);\n  test(199);\n  test(200);\n  test(201);\n  test(202);\n  test(203);\n  test(204);\n  test(205);\n  test(206);\n  test(207);\n  test(208);\n  test(209);\n  test(210);\n  test(211);\n  test(212);\n  test(213);\n  test(214);\n  test(215);\n  test(216);\n  test(217);\n  test(218);\n"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max = Math.max(max, depth);\n        }\n      else {\n        depth-=1;\n       \n", "canonical_solution": "# print('@@this is the line to split##')\n        }\n      }\n    return max;\n    }\n  return paren_string.split(' ')\n  .filter(x => x != '')\n  .map(x => parseParenGroup(x));\n  }\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens =(paren_string) => {\n  var parseParenGroup = function(s) {\n    let depth = 0, max = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth+=1;\n        max = Math.max(max, depth);\n        }\n      else {\n        depth-=1;\n       \n        max = Math.max(max, depth);\n      }\n    }\n    return max;\n  };\n  const parens = paren_string.split(/\\s+/);\n  const max = parens.reduce(parseParenGroup, 0);\n  return parens.map(n => n.split(/\\(/).reduce(parseParenGroup, 0));\n};\n\n/*\n  Input:\n    \"x(y) = 3 + 4\"\n\n  Output:\n    [\n      'x',\n      'y',\n      '=',\n      '3',\n      '+',\n      '4'\n    ]\n  */\nconst tokenize = (expression) => {\n  return expression.split(/\\s*=\\s*/)\n   .map(x => x.split('('))\n   .map(x => x.map(x => x.replace(/\\s*=\\s*/, '')))\n   .reduce((acc, x) => acc.concat(x), []);\n};\n\n/*\n  Input:\n    [\n      ['x', 'y'],\n      ['x(y)'],\n      ['x(y) = 3 + 4']\n    ]\n  \n  Output:\n    [\n      [\n        ['x', 'y'],\n        ['x', 'y']\n      ],\n      [\n        ['x', 'y'],\n        ['x', 'y']\n      ],\n      [\n        ['x', 'y'],\n        ['x', 'y'],\n        ['3', '+', '4']\n      ]\n    ]\n  */\nconst flatten = (expressions) => {\n  return expressions.reduce((acc, x) => acc.concat(x), []);\n};\n\nconst flattenWithParenthesis = (expressions) => {\n  return expressions.reduce((acc, x) => acc.concat(x.map(x => x.replace(/\\(/g, '').replace(/\\)/g, ''))), []);\n};\n\nconst isTokenEqual = (tokens) => {\n  return tokens.length == 1 && tokens[0] == '';\n};\n\nconst isParenEqual = (tokens) => {\n  return tokens.length == 1 && tokens[0] == '(';\n};\n\nconst isOperatorEqual = (tokens) => {\n  return tokens.length == 1 && tokens[0] == '=';\n};\n\nconst isOperandEqual = (tokens) => {\n  return tokens.length == 1 && tokens[0] == '3' && tokens[0] == '+' && tokens[0] == '4';\n};\n\nconst getToken = (tokens) => {\n  return tokens[0];\n};\n\nconst getParentheses = (tokens) => {\n  return tokens.slice(1, tokens.length-1);\n};\n\nconst getOperator = (tokens) => {\n  return tokens[0];\n};\n\nconst getOperand = (tokens) => {\n  return tokens[1];\n};\n\nconst getExpression = (tokens) => {\n  return tokens.slice(2, tokens.length-1);\n};\n\nconst isNestedParensEqual = (tokens) => {\n  return tokens.length == 1 && tokens[0] == '()';\n};\n\nconst getNestedParens = (tokens) => {\n  return tokens.slice(1, tokens.length-1);\n};\n\nconst isNumber = (x) => {\n  return typeof x === 'number' &&!isNaN(x) &&!isNaN(parseInt(x));\n};\n\nconst getNumber = (tokens) => {\n  return tokens[0];\n};\n\nconst isBoolean = (x) => {\n  return typeof x === 'boolean';\n};\n\nconst getBoolean = (tokens) => {\n  return tokens[0];\n};\n\nconst getFirst = (tokens) => {\n  return tokens[0];\n};\n\nconst getLast = (tokens) => {\n  return tokens[tokens.length-1];\n};\n\nconst getLastParentheses = (tokens) => {\n  return tokens[tokens.length-1];\n};\n\nconst getLastOperator = (tokens) => {\n  return tokens[tokens.length-1];\n};\n\nconst getLastOperand = (tokens) => {\n  return tokens[tokens.length-2];\n};\n\nconst getLastExpression = (tokens) => {\n  return tokens[tokens.length-1];\n};\n\nconst getTokens = (tokens) => {\n  return tokens;\n};\n\nconst getNumberTokens = (tokens) => {\n  return tokens.filter(isNumber);\n};\n\nconst getOperators = (tokens) => {\n  return tokens.filter(isOperator);\n};\n\nconst getOperands = (tokens) => {\n  return tokens.filter(isOperand);\n};\n\nconst getParens = (tokens) => {\n  return tokens.filter(isParen);\n};\n\nconst getNestedParens = (tokens) => {\n  return tokens.filter(isNestedParens);\n};\n\nconst getNestedParentheses = (tokens) => {\n  return tokens.filter(isNestedParensEqual);\n};\n\nconst getParenthesesOperators = (tokens) => {\n  return tokens.filter(isParenEqual"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let i2 = 1; i2 <= n; i2++) {\n    y.push(i2 * i2 - i2 + 1)\n    }\n  let u = 0\n  for (let i2 = 0; i2 < n - 2; i2++) {\n    for (let j = i2 + 1; j < n - 1; j++) {\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y [ i2 ] + y [ j ] + y [ k ]) % 3 == 0) {\n          u++}\n        }\n      }\n    }\n  return u\n  }\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples =(n) => {\n  let y = [ ]\n  for (let i2 = 1; i2 <= n; i2++) {\n    y.push(i2 * i2 - i2 + 1)\n    }\n  let u = 0\n  for (let i2 = 0; i2 < n - 2; i2++) {\n    for (let j = i2 + 1; j < n - 1; j++) {\n     \n    for (let k = j + 1; k < n; k++) {\n      if (y[i2] + y[j] + y[k] === (3 * u)) {\n        return 1\n      }\n    }\n  }\n  u++\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(balls) => {\n  if (balls.length == 0) {\n    return true}\n  let k = 0\n  let len = balls.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (balls [ j ] < balls [ j - 1 ]) {\n        t = 0;\n        break;\n        }\n     \n", "canonical_solution": "# print('@@this is the line to split##')\n      }\n    if (t == 1) {\n      k = 1;\n      break;\n      }\n    balls.push(balls [ 0 ]);\n    balls.shift()\n    }\n  if (k == 1) {\n    return true}\n  return false\n  }\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall =(balls) => {\n  if (balls.length == 0) {\n    return true}\n  let k = 0\n  let len = balls.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (balls [ j ] < balls [ j - 1 ]) {\n        t = 0;\n        break;\n        }\n     \n      }\n    if (t) {\n      balls [ k ] = balls [ i ]\n      k++\n      }\n  }\n  return (k == len)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(number) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm' ]\n  let v = 12\n  let res = ''\nwhile (number) {\n    let div =(number - number % num [ v ]) / num [ v ]\n    number = number % num [ v ]\n   \n", "canonical_solution": "# print('@@this is the line to split##')\n    while (div) {\n      res+=sym [ v ]\n      div-=1\n      }\n    v-=1\n    }\n  return res\n  }\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman =(number) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m' ]\n  let v = 12\n  let res = ''\nwhile (number) {\n    let div =(number - number % num [ v ]) / num [ v ]\n    number = number % num [ v ]\n   \n    if (v === 1) {\n        res = sym [ div ] + res\n    } else {\n        res = sym [ div ] + res\n    }\n    v--\n}\nreturn res\n}\n\nconst miniRomanToInt =(number) => {\n  let num = [ 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000 ]\n  let sym = [ 'i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m' ]\n  let v = 12\n  let res = 0\nwhile (number) {\n    let div = (number - res) / num [ v ]\n    number = (number - res) % num [ v ]\n    res = res + num [ v ] * sym [ div ]\n    v--\n}\nreturn res\n}\n\nconsole.log(intToMiniRoman(12))\nconsole.log(miniRomanToInt(intToMiniRoman(12)))\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  opens = x.toString();\n  if (shift > opens.length)\n  return opens.split('').reverse().join('');\n \n", "canonical_solution": "# print('@@this is the line to split##')\n  else\n  return opens.slice( - shift) + opens.slice(0, - shift);\n  }\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift =(x, shift) => {\n  opens = x.toString();\n  if (shift > opens.length)\n  return opens.split('').reverse().join('');\n \n  return opens.substr(0, opens.length-shift) + opens.substr(opens.length - shift, shift);\n};\n\n/* \n  * Prints the input number in base 10\n  */\nconst printInBase10 = (x) => {\n  opens = x.toString();\n  return opens.split('').reverse().join('');\n};\n\n/*\n  * Prints the input number in base 2\n  */\nconst printInBase2 = (x) => {\n  opens = x.toString();\n  return opens.split('').reverse().join('');\n};\n\n/*\n  * Prints the input number in base 4\n  */\nconst printInBase4 = (x) => {\n  opens = x.toString();\n  return opens.split('').reverse().join('');\n};\n\n/*\n  * Prints the input number in base 8\n  */\nconst printInBase8 = (x) => {\n  opens = x.toString();\n  return opens.split('').reverse().join('');\n};\n\n/*\n  * Prints the input number in base 16\n  */\nconst printInBase16 = (x) => {\n  opens = x.toString();\n  return opens.split('').reverse().join('');\n};\n\n/*\n  * Prints the input number in base 32\n  */\nconst printInBase32 = (x) => {\n  opens = x.toString();\n  return opens.split('').reverse().join('');\n};\n\n/*\n  * Prints the input number in base 64\n  */\nconst printInBase64 = (x) => {\n  opens = x.toString();\n  return opens.split('').reverse().join('');\n};\n\n/*\n  * Prints the input number in base 256\n  */\nconst printInBase256 = (x) => {\n  opens = x.toString();\n  return opens.split('').reverse().join('');\n};\n\n\nconst main = async () => {\n  const input = parseInt(process.argv[2]);\n  const answer = await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\";\n\n  const printInBase = process.argv[3];\n\n  const ans = await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\";\n\n  const opens = await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\";\n\n  console.log(await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\", answer, input, process.argv[3]);\n  console.log(opens);\n  console.log(await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\");\n  if (printInBase === '16') {\n    console.log(await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\", await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\", await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\");\n  }\n  if (printInBase === '32') {\n    console.log(await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\", await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\", await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\");\n  }\n  if (printInBase === '64') {\n    console.log(await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\", await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\", await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\");\n  }\n  if (printInBase === '256') {\n    console.log(await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\", await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\", await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\");\n  }\n\n  const answer = await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\";\n\n  const ans = await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost\";\n\n  console.log(answer, ans, input);\n  console.log(await process.env.OPENSHIFT_NODEJS_IP || await process.env.OPENSHIFT_NODEJS_IP_OLD || \"localhost"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let lines = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      lines.push(lst [ i ])\n      }\n    }\n  for (let j = lines.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (lines [ k ].length > lines [ k + 1 ].length) {\n        f = 1}\n      if (lines [ k ].length == lines [ k + 1 ].length) {\n        let r = lines [ k ].length\n        for (let l = 0; l < r; l++) {\n          if (lines [ k ] [ l ].charCodeAt() > lines [ k + 1 ] [ l ].charCodeAt()) {\n            f = 1;\n           \n", "canonical_solution": "# print('@@this is the line to split##')\n            break;\n            }\n          if (lines [ k ] [ l ].charCodeAt() < lines [ k + 1 ] [ l ].charCodeAt()) {\n            break;\n            }\n          }\n        }\n      if (f == 1) {\n        let tmp = lines [ k ]\n        lines [ k ] = lines [ k + 1 ]\n        lines [ k + 1 ] = tmp\n        }\n      }\n    }\n  return lines\n  }\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum =(lst) => {\n  let lines = [ ]\n  for (let i = 0; i < lst.length; i++) {\n    if (lst [ i ].length % 2 == 0) {\n      lines.push(lst [ i ])\n      }\n    }\n  for (let j = lines.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (lines [ k ].length > lines [ k + 1 ].length) {\n        f = 1}\n      if (lines [ k ].length == lines [ k + 1 ].length) {\n        let r = lines [ k ].length\n        for (let l = 0; l < r; l++) {\n          if (lines [ k ] [ l ].charCodeAt() > lines [ k + 1 ] [ l ].charCodeAt()) {\n            f = 1;\n           \n          }\n        }\n      }\n      if (f == 1) {\n        lines.splice(k, 1)\n        }\n    }\n  }\n  return lines\n}\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\", \"ab\", \"cd\"]))\n<|endoftext|>"}
