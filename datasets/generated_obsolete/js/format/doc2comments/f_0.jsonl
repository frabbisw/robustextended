{"task_id": "JavaScript/0", "prompt": "// Check if in given list of numbers, are any two numbers closer to each other than\n//   given threshold.\n//   >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n//   false\n//   >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n//   true\n// const hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n", "canonical_solution": "        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "// Check if in given list of numbers, are any two numbers closer to each other than\n//   given threshold.\n//   >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n//   false\n//   >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n//   true\n// const hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n// }\n// const findClosestElement = (numbers, target) => {\n//   const closest = -1;\n//   let closestDistance = 10000000;\n//   for (let i = 0; i < numbers.length; i++) {\n//     if (numbers[i] == target) {\n//       return i;\n//     }\n//     let distance = Math.abs(numbers[i] - target);\n//     if (distance < closestDistance) {\n//       closestDistance = distance;\n//       closest = i;\n//     }\n//   }\n//   return closest;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n//   separate those group into separate strings and return the list of those.\n//   Separate groups are balanced (each open brace is properly closed) and not nested within each other\n//   Ignore any spaces in the input string.\n//   >>> separateParenGroups('( ) (( )) (( )( ))')\n//   ['()', '(())', '(()())']\n// const separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n", "canonical_solution": "      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n//   separate those group into separate strings and return the list of those.\n//   Separate groups are balanced (each open brace is properly closed) and not nested within each other\n//   Ignore any spaces in the input string.\n//   >>> separateParenGroups('( ) (( )) (( )( ))')\n//   ['()', '(())', '(()())']\n// const separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n    }\n    if (current_depth == 0) {\n      result.push(current_string.join(''));\n      current_string = [];\n    }\n  }\n\n  return result.join('');\n};\n\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n//   separate those group into separate strings and return the list of those.\n//   Separate groups are balanced (each open brace is properly closed) and not nested within each other\n//   Ignore any spaces in the input string.\n//   >>> separateParenGroups('()()')\n//   ['()()']\n// const separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n    }\n    if (current_depth == 0) {\n      result.push(current_string.join(''));\n      current_string = [];\n    }\n  }\n\n  return result.join('');\n};\n\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n//   separate those group into separate strings and return the list of those.\n//   Separate groups are balanced (each open brace is properly closed) and not nested within each other\n//   Ignore any spaces in the input string.\n//   >>> separateParenGroups('()()()')\n//   ['()()()']\n// const separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n    }\n    if (current_depth == 0) {\n      result.push(current_string.join(''));\n      current_string = [];\n    }\n  }\n\n  return result.join('');\n};\n\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n//   separate those group into separate strings and return the list of those.\n//   Separate groups are balanced (each open brace is properly closed) and not nested within each other\n//   Ignore any spaces in the input string.\n//   >>> separateParenGroups('()()()()')\n//   ['()()()()']\n// const separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n    }\n    if (current_depth == 0) {\n      result.push(current_string.join(''));\n      current_string = [];\n    }\n  }\n\n  return result.join('');\n};\n\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n//   separate those group into separate strings and return the list of those.\n//   Separate groups are balanced (each open brace is properly closed) and not nested within each other\n//   Ignore any spaces in the input string.\n//   >>> separateParenGroups('()()())')\n//   ['()()())', '()()()()']\n// const separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n    }\n    if (current_depth == 0) {\n      result.push(current_string.join(''));\n      current_string = [];\n    }\n  }\n\n  return result.join('');\n};\n\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n//   separate those group into separate strings and return the list of those.\n//   Separate groups are balanced (each open brace is properly closed) and not nested within each other\n//   Ignore any spaces in the input string.\n//   >>> separateParenGroups('()()())()')\n//   ['()()())', '()()()()', '()()()()']\n// const separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n    }\n    if (current_depth == 0) {\n      result.push(current_string.join"}
{"task_id": "JavaScript/2", "prompt": "// Given a positive floating point number, it can be decomposed into\n//   and integer part (largest integer smaller than given number) and decimals\n//   (leftover part always smaller than 1).\n// \n//   Return the decimal part of the number.\n//   >>> truncateNumber(3.5)\n//   0.5\n// const truncateNumber = (number) => {\n  return number % 1.0;\n", "canonical_solution": "}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Given a positive floating point number, it can be decomposed into\n//   and integer part (largest integer smaller than given number) and decimals\n//   (leftover part always smaller than 1).\n// \n//   Return the decimal part of the number.\n//   >>> truncateNumber(3.5)\n//   0.5\n// const truncateNumber = (number) => {\n  return number % 1.0;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 10.0;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 100.0;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 1000.0;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 10000.0;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 100000.0;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 1000000.0;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 10000000.0;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 100000000.0;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 1000000000.0;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 100000000000.0;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 1000000000000.0;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 100000000000;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 10000000000;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 1000000000;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 100000000;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 10000000;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 1000000;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 100000;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 10000;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 1000;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 100;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number % 10;\n//   }\n// \n// const truncateNumber = (number) => {\n  return number;\n//   }\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "// You're given a list of deposit and withdrawal operations on a bank account that starts with\n//   zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n//   at that point function should return true. Otherwise it should return false.\n//   >>> belowZero([1, 2, 3])\n//   false\n//   >>> belowZero([1, 2, -4, 5])\n//   true\n// const belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n", "canonical_solution": "      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "// You're given a list of deposit and withdrawal operations on a bank account that starts with\n//   zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n//   at that point function should return true. Otherwise it should return false.\n//   >>> belowZero([1, 2, 3])\n//   false\n//   >>> belowZero([1, 2, -4, 5])\n//   true\n// const belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n//   }\n// };\n\n// const belowZero = (operations) => {\n//   const balance = 0;\n//   for (const op of operations) {\n//     balance += op;\n//     if (balance < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   const balance = 0;\n//   for (const op of operations) {\n//     balance += op;\n//     if (balance < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   const balance = 0;\n//   let lastOp = 0;\n//   for (const op of operations) {\n//     balance += op;\n//     if (balance < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n\n// const belowZero = (operations) => {\n//   let sum = 0;\n//   for (const op of operations) {\n//     sum += op;\n//     if (sum < 0) {\n//       return true;\n//     }\n//   }\n//   "}
{"task_id": "JavaScript/4", "prompt": "// For a given list of input numbers, calculate Mean Absolute Deviation\n//   around the mean of this dataset.\n//   Mean Absolute Deviation is the average absolute difference between each\n//   element and a centerpoint (mean in this case):\n//   MAD = average | x - x_mean |\n//   >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n//   1.0\n// const meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n", "canonical_solution": "    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "// For a given list of input numbers, calculate Mean Absolute Deviation\n//   around the mean of this dataset.\n//   Mean Absolute Deviation is the average absolute difference between each\n//   element and a centerpoint (mean in this case):\n//   MAD = average | x - x_mean |\n//   >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n//   1.0\n// const meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return Math.abs(item - mean);\n  }, 0) / numbers.length;\n}\n\n// For a given list of input numbers, calculate Standard Deviation\n//   around the mean of this dataset.\n//   Standard Deviation is the square root of the mean of the absolute\n//   differences between each element and the mean:\n//   >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n//   1.0\n// const standardDeviation = (numbers) => {\n  var sumSquared = numbers.reduce((prev, item) => {\n    return prev + Math.pow(item - mean, 2);\n  }, 0) / numbers.length;\n  var meanSquared = sumSquared / numbers.length;\n  return Math.sqrt(meanSquared);\n}\n\n// For a given list of input numbers, calculate the range of values\n//   that a given percentile can take.\n//   The first percentile is 1.0, and the second is 50.0.\n//   For instance, if the input numbers are [1, 2, 3, 4, 5], the\n//   range would be:\n//   [1, 5]\n//   >>> percentileRange([1, 2, 3, 4, 5], 0.5)\n//   [2, 3]\n//   >>> percentileRange([1, 2, 3, 4, 5], 1.5)\n//   [3, 4]\n// const percentileRange = (numbers, percentile) => {\n  var sorted = numbers.sort();\n  var index = sorted.length * (percentile - 1);\n  return [sorted[index - 1], sorted[index]];\n}\n\n// For a given list of input numbers, calculate the mean\n//   of all the numbers in the dataset.\n//   >>> mean([1, 2, 3, 4, 5])\n//   3.0\n// const mean = (numbers) => {\n  return numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n}\n\n// For a given list of input numbers, calculate the standard deviation\n//   of all the numbers in the dataset.\n//   >>> standardDeviation([1, 2, 3, 4, 5])\n//   1.0\n// const standardDeviation = (numbers) => {\n  var sumSquared = numbers.reduce((prev, item) => {\n    return prev + Math.pow(item - mean, 2);\n  }, 0) / numbers.length;\n  var meanSquared = sumSquared / numbers.length;\n  return Math.sqrt(meanSquared);\n}\n\n// For a given list of input numbers, calculate the median\n//   of all the numbers in the dataset.\n//   >>> median([1, 2, 3, 4, 5])\n//   3.0\n// const median = (numbers) => {\n  var sorted = numbers.sort();\n  var half = sorted.length / 2;\n  return sorted[half];\n}\n\n// For a given list of input numbers, calculate the mode\n//   of all the numbers in the dataset.\n//   >>> mode([1, 2, 3, 4, 5])\n//   5\n// const mode = (numbers) => {\n  var max = Math.max(...numbers);\n  var min = Math.min(...numbers);\n  var sorted = numbers.sort();\n  var index = sorted.indexOf(max);\n  return sorted[index];\n}\n\n// For a given list of input numbers, calculate the median\n//   of all the numbers in the dataset.\n//   >>> median([1, 2, 3, 4, 5])\n//   3.0\n// const median = (numbers) => {\n  var sorted = numbers.sort();\n  var half = sorted.length / 2;\n  return sorted[half];\n}\n\n// For a given list of input numbers, calculate the mode\n//   of all the numbers in the dataset.\n//   >>> mode([1, 2, 3, 4, 5])\n//   5\n// const mode = (numbers) => {\n  var max = Math.max(...numbers);\n  var min = Math.min(...numbers);\n  var sorted = numbers.sort();\n  var index = sorted.indexOf(max);\n  return sorted[index];\n}\n\n// For a given list of input numbers, calculate the median\n//   of all the numbers in the dataset.\n//   >>> median([1, 2, 3, 4, 5])\n//   3.0\n// const median = (numbers) => {\n  var sorted = numbers.sort();\n  var half = sorted.length / 2;\n  return sorted[half];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n//   >>> intersperse([], 4)\n//   []\n//   >>> intersperse([1, 2, 3], 4)\n//   [1, 4, 2, 4, 3]\n// const intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n", "canonical_solution": "    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n//   >>> intersperse([], 4)\n//   []\n//   >>> intersperse([1, 2, 3], 4)\n//   [1, 4, 2, 4, 3]\n// const intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n);\n    if (numbers.length - 1!= index) {\n      result.push(delimeter);\n    }\n  }\n  return result;\n// }\n\n// const intersperse = (numbers, delimeter) => {\n//   if (!Array.isArray(numbers))\n//     return [];\n//   var result = [];\n//   const first = numbers[0];\n//   const last = numbers[numbers.length - 1];\n//   const result = [first];\n//   for (let i = 1; i < numbers.length; i++) {\n//     result.push(delimeter);\n//     result.push(numbers[i]);\n//   }\n//   result.push(last);\n//   return result;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n//   For each of the group, output the deepest level of nesting of parentheses.\n//   E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// \n//   >>> parseNestedParens('(()()) ((())) () ((())()())')\n//   [2, 3, 1, 3]\n// const parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n", "canonical_solution": "      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n//   For each of the group, output the deepest level of nesting of parentheses.\n//   E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// \n//   >>> parseNestedParens('(()()) ((())) () ((())()())')\n//   [2, 3, 1, 3]\n// const parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  };\n  // const parseNestedParens = (paren_string) => {\n  //   let depth = 0, max_depth = 0;\n  //   for (const c of paren_string) {\n  //     if (c == '(') {\n  //       depth += 1;\n  //       max_depth = Math.max(max_depth, depth);\n  //     } else {\n  //       depth -= 1;\n  //     }\n  //   }\n  //   return max_depth;\n  // };\n\n  //  (()()) ((())) () ((())()())\n  const parens = parseNestedParens('(()()) ((())) () ((())()())');\n  console.log(parens);\n}\n\n//  >>> parseNestedParens('(()()) ((())) () ((())()())')\n//  [2, 3, 1, 3]\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "// Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n", "canonical_solution": "}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n// }\n\n// // filter an input list of strings only for ones that contain a given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n// }\n\n// // Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n// }\n\n// const x = [1,2,3,4,5,6,7,8,9]\n// const y = [10,20,30,40,50,60,70,80,90]\n// const z = [1,2,3,4,5,6,7,8,9]\n// const a = [10,20,30,40,50,60,70,80,90]\n// const b = [1,2,3,4,5,6,7,8,9]\n// const c = [1,2,3,4,5,6,7,8,9]\n// const d = [1,2,3,4,5,6,7,8,9]\n\n// // Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n// }\n\n// // Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n// }\n\n// // Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n// }\n\n// // Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n// }\n\n// // Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n// }\n\n// // Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n// }\n\n// // Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n// }\n\n// // Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n// }\n\n// // Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBy"}
{"task_id": "JavaScript/8", "prompt": "// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n//   Empty sum should be equal to 0 and empty product should be equal to 1.\n//   >>> sumProduct([])\n//   (0, 1)\n//   >>> sumProduct([1, 2, 3, 4])\n//   (10, 24)\n// const sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n", "canonical_solution": "    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n//   Empty sum should be equal to 0 and empty product should be equal to 1.\n//   >>> sumProduct([])\n//   (0, 1)\n//   >>> sumProduct([1, 2, 3, 4])\n//   (10, 24)\n// const sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "// From a given list of integers, generate a list of rolling maximum element found until given moment\n//   in the sequence.\n//   >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n//   [1, 2, 3, 3, 3, 4, 4]\n// const rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n", "canonical_solution": "      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "// From a given list of integers, generate a list of rolling maximum element found until given moment\n//   in the sequence.\n//   >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n//   [1, 2, 3, 3, 3, 4, 4]\n// const rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = (n > running_max)? n : running_max;\n    result.push(running_max);\n  }\n  return result;\n}\n\n// From a given list of numbers, generate a list of rolling minimum element found until given moment\n//   in the sequence.\n//   >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n//   [1, 2, 2, 2, 3, 3, 3]\n// const rollingMin = (numbers) => {\n  var running_min, result = [];\n  for (const n of numbers) {\n    if (running_min == undefined)\n      running_min = n;\n    else\n      running_min = (n < running_min)? n : running_min;\n    result.push(running_min);\n  }\n  return result;\n}\n\n// From a given list of numbers, generate a list of rolling median element found until given moment\n//   in the sequence.\n//   >>> rollingMedian([1, 2, 3, 2, 3, 4, 2])\n//   [2, 3, 3, 3, 4, 4, 4]\n// const rollingMedian = (numbers) => {\n  var running_median, result = [];\n  for (const n of numbers) {\n    if (running_median == undefined)\n      running_median = n;\n    else\n      running_median = (n > running_median)? n : running_median;\n    result.push(running_median);\n  }\n  return result;\n}\n\n// From a given list of numbers, generate a list of rolling mean element found until given moment\n//   in the sequence.\n//   >>> rollingMean([1, 2, 3, 2, 3, 4, 2])\n//   [2, 3, 3, 3, 4, 4, 4]\n// const rollingMean = (numbers) => {\n  var running_mean, result = [];\n  for (const n of numbers) {\n    if (running_mean == undefined)\n      running_mean = n;\n    else\n      running_mean = (n > running_mean)? n : running_mean;\n    result.push(running_mean);\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "// Test if gniven strig is a palindrome \n// const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n", "canonical_solution": "  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "// Test if gniven strig is a palindrome \n// const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  var end_of_suffix = 0;\n  while (beginning_of_suffix < string.length &&!isPalindrome(string.slice(0, beginning_of_suffix + 1)))\n    beginning_of_suffix++;\n\n  end_of_suffix = beginning_of_suffix + 1;\n  while (end_of_suffix < string.length &&!isPalindrome(string.slice(end_of_suffix - 1, end_of_suffix + 1)))\n    end_of_suffix++;\n\n  return string.slice(beginning_of_suffix, end_of_suffix);\n}\n\n// Test if two strings are anagrams\n// const areAnagrams = (string1, string2) => {\n  return string1 == string2;\n//}\n\n// Given a string and a dictionary, return a dictionary whose keys are the \n// permutation of the original string and whose values are the string itself.\n// Note: You may assume that both string contain only lowercase letters.\n// const permutation = (string, dictionary) => {\n  return string.split('').reduce((acc, letter) => {\n    if (dictionary.hasOwnProperty(acc.concat(letter)))\n      acc.push(dictionary[acc.concat(letter)]);\n    return acc;\n  }, []);\n//}\n\n// Given two lists, return their intersection.\n// const intersect = (list1, list2) => {\n  return list1.filter(el => list2.includes(el));\n//}\n\n// Given a sorted array, find the starting and ending position of a given target\n// const findPosition = (array, target) => {\n  var start = 0;\n  var end = array.length - 1;\n  while (start + 1 < end) {\n    var mid = (start + end) / 2;\n    if (array[mid] < target)\n      start = mid;\n    else\n      end = mid;\n  }\n  return {start, end};\n//}\n\n// Find the contiguous subarray within an array (containing at least one number) which has the largest product.\n// For example, given the array [2,3,-2,4],\n// the contiguous subarray [2,3] has the largest product = 6.\n// const findLargestProduct = (nums) => {\n  return nums.reduce((acc, num) => {\n    var start = 0;\n    var end = nums.length - 1;\n    while (start + 1 < end) {\n      var mid = (start + end) / 2;\n      if (nums[mid] * nums[mid + 1] < 0)\n        start = mid;\n      else\n        end = mid;\n    }\n    return acc > nums[start] * nums[end]? acc : nums[start] * nums[end];\n  }, 1);\n//}\n\n// Find the largest product of a contiguous subarray within an array.\n// For example, given the array [2,3,-2,4],\n// the contiguous subarray [2,3] has the largest product = 6.\n// const findLargestProduct = (nums) => {\n  return nums.reduce((acc, num) => {\n    var start = 0;\n    var end = nums.length - 1;\n    while (start + 1 < end) {\n      var mid = (start + end) / 2;\n      if (nums[mid] * nums[mid + 1] < 0)\n        start = mid;\n      else\n        end = mid;\n    }\n    return acc > nums[start] * nums[end]? acc : nums[start] * nums[end];\n  }, 1);\n//}\n\n// https://www.hackerrank.com/challenges/sherlock-and-the-beast/problem\nconst getPair = (str) => {\n  var pairs = [];\n  for (let i = 0; i < str.length; i++) {\n    for (let j = i + 1; j < str.length; j++) {\n      if (str[i] === str[j]) {\n        pairs.push([str[i], str[j]]);\n      }\n    }\n  }\n  return pairs;\n}\n\n/*\n// https://www.hackerrank.com/challenges/sherlock-and-the-beast/problem\nconst getPair = (str) => {\n  var pairs = [];\n  for (let i = 0; i < str.length; i++) {\n    for (let j = i + 1; j < str.length; j++) {\n      if (str[i] === str[j]) {\n        pairs.push([str[i], str[j]]);\n      }\n    }\n  }\n  return pairs;\n}\n*/\n\nconst isPalindrome = (string) => {\n  return string.split('').reverse().join('') === string;\n}\n\n// const isPalindrome = (string) => {\n  // return string.split('').reduce((acc, letter) => {\n  //   if (acc.concat(letter)!== acc.concat(letter.split('').reverse().join('')))\n  //     return false;\n  //   return acc;\n  // }, true);\n//}\n\n// const isPalindrome = (string) => {\n  // return string.split('').reduce((acc, letter) => {\n  //   if (acc.concat(letter.split('').reverse().join(''))!== acc.concat(letter))\n"}
{"task_id": "JavaScript/11", "prompt": "// Input are two strings a and b consisting only of 1s and 0s.\n//   Perform binary XOR on these inputs and return result also as a string.\n//   >>> stringXor('010', '110')\n//   '100'\n// const stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n", "canonical_solution": "      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "// Input are two strings a and b consisting only of 1s and 0s.\n//   Perform binary XOR on these inputs and return result also as a string.\n//   >>> stringXor('010', '110')\n//   '100'\n// const stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').reduce((a, b) => a.concat(xor(a.charAt(i), b.charAt(j))));\n}\n\nconsole.log(stringXor('010', '110'));\n\n// const stringXor = (a, b) => {\n//   return a.split('').reduce((a, b) => a.concat(xor(a.charAt(i), b.charAt(j))));\n// };\n// console.log(stringXor('010', '110'));<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "// Out of list of strings, return the longest one. Return the first one in case of multiple\n//   strings of the same length. Return null in case the input list is empty.\n//   >>> longest([])\n// \n//   >>> longest(['a', 'b', 'c'])\n//   'a'\n//   >>> longest(['a', 'bb', 'ccc'])\n//   'ccc'\n// const longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n", "canonical_solution": "    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "// Out of list of strings, return the longest one. Return the first one in case of multiple\n//   strings of the same length. Return null in case the input list is empty.\n//   >>> longest([])\n// \n//   >>> longest(['a', 'b', 'c'])\n//   'a'\n//   >>> longest(['a', 'bb', 'ccc'])\n//   'ccc'\n// const longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length === maxlen)\n      return s;\n  }\n}\n\n// const find = (array, f) => {\n//   const i = (x, i, a) => f(x, i, a)? i : -1;\n//   return array.findIndex(i);\n// }\n// \n// const remove = (array, item) => {\n//   const i = (x, i, a) => x === item? -1 : i + 1;\n//   return array.reduce(i, array);\n// }\n// \n// const remove_duplicates = (array) => {\n//   const i = (x, i, a) => x === a[i]? -1 : i + 1;\n//   return array.reduce(i, array);\n// }\n\n// const main = () => {\n//   let list = ['a', 'b', 'c'];\n//   const longest = longest(list);\n//   console.log(longest);\n//   list = ['a', 'b', 'c'];\n//   const longest = longest(list);\n//   console.log(longest);\n//   list = ['a', 'b', 'c'];\n//   const longest = longest(list);\n//   console.log(longest);\n//   list = ['a', 'b', 'c'];\n//   const longest = longest(list);\n//   console.log(longest);\n// }\n\n// main();\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "// Return a greatest common divisor of two integers a and b\n//   >>> greatestCommonDivisor(3, 5)\n//   1\n//   >>> greatestCommonDivisor(25, 15)\n//   5\n// const greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n", "canonical_solution": "    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "// Return a greatest common divisor of two integers a and b\n//   >>> greatestCommonDivisor(3, 5)\n//   1\n//   >>> greatestCommonDivisor(25, 15)\n//   5\n// const greatestCommonDivisor = (a, b) => {\n  while (b!= 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n//   return Math.abs(a);\n// }\n\n// Return a remainder of a divided by b\n//   >>> remainder(5, 3)\n//   2\n//   >>> remainder(25, 15)\n//   5\nconst remainder = (a, b) => {\n  return a % b;\n}\n\n// Return a power of two that is equal to or greater than n\n//   >>> powerOfTwo(3)\n//   3\n//   >>> powerOfTwo(15)\n//   4\nconst powerOfTwo = (n) => {\n  let result = 1;\n  while (result < n) {\n    result *= 2;\n  }\n  return result;\n}\n\n// Return the number of bits needed to represent n\n//   >>> numberOfBits(15)\n//   4\n//   >>> numberOfBits(2147483647)\n//   31\nconst numberOfBits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 2;\n    n = n / 2;\n  }\n  return result;\n}\n\n// Return a number of bits needed to represent n (n must be a positive integer)\n//   >>> numberOfBits(2147483647)\n//   31\n// const numberOfBits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 2;\n    n = n / 2;\n  }\n  return result;\n// }\n\n// Return the number of bytes needed to represent n (n must be a positive integer)\n//   >>> numberOfBytes(2147483647)\n//   7\n// const numberOfBytes = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 2;\n    n = n / 2;\n  }\n  return result;\n// }\n\n// Return the number of characters needed to represent n (n must be a positive integer)\n//   >>> numberOfChars(2147483647)\n//   7\n// const numberOfChars = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 2;\n    n = n / 2;\n  }\n  return result;\n// }\n\n// Return the number of bytes needed to represent n (n must be a positive integer)\n//   >>> numberOfBytes(2147483647)\n//   7\nconst numberOfBytes = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 2;\n    n = n / 2;\n  }\n  return result;\n}\n\n// Return the number of characters needed to represent n (n must be a positive integer)\n//   >>> numberOfChars(2147483647)\n//   7\nconst numberOfChars = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 2;\n    n = n / 2;\n  }\n  return result;\n}\n\n// Return the number of characters needed to represent n (n must be a positive integer)\n//   >>> numberOfChars(2147483647)\n//   7\nconst numberOfBytes = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 2;\n    n = n / 2;\n  }\n  return result;\n}\n\n// Return a string of n characters\n//   >>> string(2, 'a')\n//   'aa'\n//   >>> string(4, 'a')\n//   'aaaa'\n//   >>> string(4, 'b')\n//   'bbbb'\n//   >>> string(4, 'c')\n//   'cccc'\nconst string = (n, s) => {\n  let result = '';\n  while (n > 0) {\n    result += s;\n    n--;\n  }\n  return result;\n}\n\n// Return a string of n characters\n//   >>> string(2, 'a')\n//   'aa'\n//   >>> string(4, 'a')\n//   'aaaa'\n//   >>> string(4, 'b')\n//   'bbbb'\n//   >>> string(4, 'c')\n//   'cccc'\nconst string = (n, s) => {\n  let result = '';\n  while (n > 0) {\n    result += s;\n    n--;\n  }\n  return result;\n}\n\n// Return a string of n characters\n//   >>> string(2, 'a')\n//   'aa'\n//   >>> string(4, 'a')\n//   'aaaa'\n//   >>> string(4, 'b')\n//   'bbbb'\n//   >>> string(4, 'c')\n//   'cccc'\nconst string = (n, s) => {\n  let result = '';\n  while (n > 0) {\n    result += s;\n    n--;\n  }\n  return result;\n}\n\n// Return a string of n characters\n//   >>> string(2, 'a')\n//   'aa'\n//   >>> string(4, 'a')\n//   'aaaa'\n//   >>> string(4, 'b')\n//   'bbbb'\n//   >>> string(4, 'c')\n//   'cccc'\nconst string = (n, s) => {\n  let result = '';\n  while (n > 0) {\n    result += s;\n    n--;\n  }\n  return result;\n}\n\n// Return a string of n characters\n//   >>> string(2, 'a')\n//   'aa'\n//   >>> string(4, 'a')\n//   'aaaa'\n//   >>> string(4, 'b')\n//   'bbbb'\n//   >>> string(4, 'c')\n//   'cccc'\nconst string = (n, s) => {\n  let result = '';\n  while (n > 0)"}
{"task_id": "JavaScript/14", "prompt": "// Return list of all prefixes from shortest to longest of the input string\n//   >>> allPrefixes('abc')\n//   ['a', 'ab', 'abc']\n// const allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n", "canonical_solution": "  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "// Return list of all prefixes from shortest to longest of the input string\n//   >>> allPrefixes('abc')\n//   ['a', 'ab', 'abc']\n// const allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n// Return list of all suffixes from shortest to longest of the input string\n//   >>> allSuffixes('abc')\n//   ['', 'b', 'c', 'cb', 'cc', 'cba', 'abc']\n// const allSuffixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, string.length));\n  }\n  return result;\n}\n\n// Return list of all prefixes, suffixes and combinations of prefix and suffix\n//   >>> allPermutations('abc')\n//   [['a', 'b', 'c'], ['ab', 'ac', 'bc'], ['abc']]\n// const allPermutations = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    var suffixes = allSuffixes(string.slice(0, i));\n    for (let j = 0; j < suffixes.length; j++) {\n      var prefixes = allPrefixes(string.slice(i, string.length));\n      for (let k = 0; k < prefixes.length; k++) {\n        result.push([prefixes[k], suffixes[j], string]);\n      }\n    }\n  }\n  return result;\n}\n\n// Print all prefixes, suffixes and combinations of prefix and suffix\n//   >>> print(allPermutations('abc'))\n//   ['a', 'ab', 'abc']\n//   ['', 'b', 'c', 'cb', 'cc', 'cba']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['a', 'b', 'c']\n//   ['"}
{"task_id": "JavaScript/15", "prompt": "// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n//   >>> stringSequence(0)\n//   '0'\n//   >>> stringSequence(5)\n//   '0 1 2 3 4 5'\n// const stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n", "canonical_solution": "}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n//   >>> stringSequence(0)\n//   '0'\n//   >>> stringSequence(5)\n//   '0 1 2 3 4 5'\n// const stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n}\n\nfunction stringSequence(n) {\n  return stringSequence.call(this, n)\n}\n\nexport default stringSequence\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "// Given a string, find out how many distinct characters (regardless of case) does it consist of\n//   >>> countDistinctCharacters('xyzXYZ')\n//   3\n//   >>> countDistinctCharacters('Jerry')\n//   4\n// const countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n", "canonical_solution": "\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "// Given a string, find out how many distinct characters (regardless of case) does it consist of\n//   >>> countDistinctCharacters('xyzXYZ')\n//   3\n//   >>> countDistinctCharacters('Jerry')\n//   4\n// const countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n}\n\nconst countDistinctLetters = (string) => {\n  let count = 0;\n  let letters = string.toLowerCase();\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (isUpperCase(letter)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nconst countDistinctLettersWithUpperCase = (string) => {\n  let count = 0;\n  let letters = string.toLowerCase();\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (isLowerCase(letter)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\n// Given a string, find out how many words does it consist of\n//   >>> countWords('xyzXYZ')\n//   2\n//   >>> countWords('Jerry')\n//   1\nconst countWords = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\n// Given a string, find out how many lowercase letters does it consist of\n//   >>> countLowerCaseLetters('xyzXYZ')\n//   3\n//   >>> countLowerCaseLetters('Jerry')\n//   4\nconst countLowerCaseLetters = (string) => {\n  let count = 0;\n  let letters = string.toLowerCase();\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (isLowerCase(letter)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nconst countUpperCaseLetters = (string) => {\n  let count = 0;\n  let letters = string.toLowerCase();\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i];\n    if (isUpperCase(letter)) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nconst countSymbols = (string) => {\n  let count = 0;\n  let symbols = string.split('#');\n  for (let i = 0; i < symbols.length; i++) {\n    let symbol = symbols[i];\n    if (symbol.length > 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nconst countSymbolsWithSpace = (string) => {\n  let count = 0;\n  let symbols = string.split(' ');\n  for (let i = 0; i < symbols.length; i++) {\n    let symbol = symbols[i];\n    if (symbol.length > 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nconst countSymbolsWithCapitalLetters = (string) => {\n  let count = 0;\n  let symbols = string.split('#');\n  for (let i = 0; i < symbols.length; i++) {\n    let symbol = symbols[i];\n    if (symbol.length > 0) {\n      if (isUpperCase(symbol[0])) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\nconst countWordsWithCapitalLetters = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      if (isUpperCase(word[0])) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\nconst countWordsWithUpperCaseLetters = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      if (isUpperCase(word[0])) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\nconst countWordsWithUpperCaseLettersInSingleWord = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      if (isUpperCase(word[0])) {\n        count += 1;\n        break;\n      }\n    }\n  }\n  return count;\n}\n\nconst countWordsWithLowerCaseLetters = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      if (isLowerCase(word[0])) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\nconst countWordsWithLowerCaseLettersInSingleWord = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    if (word.length > 0) {\n      if (isLowerCase(word[0])) {\n        count += 1;\n        break;\n      }\n    }\n  }\n  return count;\n}\n\nconst countWordsWithNumber = (string) => {\n  let count = 0;\n  let words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    let word = words["}
{"task_id": "JavaScript/17", "prompt": "// Input to this function is a string representing musical notes in a special ASCII format.\n//   Your task is to parse this string and return list of integers corresponding to how many beats does each\n//   not last.\n// \n//   Here is a legend:\n//   'o' - whole note, lasts four beats\n//   'o|' - half note, lasts two beats\n//   '.|' - quater note, lasts one beat\n// \n//   >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n//   [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n// const parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n", "canonical_solution": "  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "// Input to this function is a string representing musical notes in a special ASCII format.\n//   Your task is to parse this string and return list of integers corresponding to how many beats does each\n//   not last.\n// \n//   Here is a legend:\n//   'o' - whole note, lasts four beats\n//   'o|' - half note, lasts two beats\n//   '.|' - quater note, lasts one beat\n// \n//   >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n//   [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n// const parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  const note_list = music_string.split(' ');\n  const beat_list = [];\n  for (let i = 0; i < note_list.length; i++) {\n    let note = note_list[i];\n    if (note in note_map) {\n      beat_list.push(note_map[note]);\n    }\n  }\n  return beat_list;\n// }\n\n\n// const parseMusic = (music_string) => {\n//   let beat_list = [];\n//   music_string.split(' ').forEach(note => {\n//     if (note.includes('|')) {\n//       beat_list.push(2);\n//     } else if (note.includes('.')) {\n//       beat_list.push(1);\n//     } else {\n//       beat_list.push(4);\n//     }\n//   });\n//   return beat_list;\n// };\n\n\n// const parseMusic = (music_string) => {\n//   let beat_list = [];\n//   music_string.split(' ').forEach(note => {\n//     if (note.includes('|')) {\n//       beat_list.push(2);\n//     } else if (note.includes('.')) {\n//       beat_list.push(1);\n//     } else {\n//       beat_list.push(4);\n//     }\n//   });\n//   return beat_list;\n// };\n\n\n// const parseMusic = (music_string) => {\n//   let beat_list = [];\n//   music_string.split(' ').forEach(note => {\n//     if (note.includes('|')) {\n//       beat_list.push(2);\n//     } else if (note.includes('.')) {\n//       beat_list.push(1);\n//     } else {\n//       beat_list.push(4);\n//     }\n//   });\n//   return beat_list;\n// };\n\n\n// const parseMusic = (music_string) => {\n//   let beat_list = [];\n//   music_string.split(' ').forEach(note => {\n//     if (note.includes('|')) {\n//       beat_list.push(2);\n//     } else if (note.includes('.')) {\n//       beat_list.push(1);\n//     } else {\n//       beat_list.push(4);\n//     }\n//   });\n//   return beat_list;\n// };\n\n\n// const parseMusic = (music_string) => {\n//   let beat_list = [];\n//   music_string.split(' ').forEach(note => {\n//     if (note.includes('|')) {\n//       beat_list.push(2);\n//     } else if (note.includes('.')) {\n//       beat_list.push(1);\n//     } else {\n//       beat_list.push(4);\n//     }\n//   });\n//   return beat_list;\n// };\n\n\n// const parseMusic = (music_string) => {\n//   let beat_list = [];\n//   music_string.split(' ').forEach(note => {\n//     if (note.includes('|')) {\n//       beat_list.push(2);\n//     } else if (note.includes('.')) {\n//       beat_list.push(1);\n//     } else {\n//       beat_list.push(4);\n//     }\n//   });\n//   return beat_list;\n// };\n\n\n// const parseMusic = (music_string) => {\n//   let beat_list = [];\n//   music_string.split(' ').forEach(note => {\n//     if (note.includes('|')) {\n//       beat_list.push(2);\n//     } else if (note.includes('.')) {\n//       beat_list.push(1);\n//     } else {\n//       beat_list.push(4);\n//     }\n//   });\n//   return beat_list;\n// };\n\n\n// const parseMusic = (music_string) => {\n//   let beat_list = [];\n//   music_string.split(' ').forEach(note => {\n//     if (note.includes('|')) {\n//       beat_list.push(2);\n//     } else if (note.includes('.')) {\n//       beat_list.push(1);\n//     } else {\n//       beat_list.push(4);\n//     }\n//   });\n//   return beat_list;\n// };\n\n\n// const parseMusic = (music_string) => {\n//   let beat_list = [];\n//   music_string.split(' ').forEach(note => {\n//     if (note.includes('|')) {\n//       beat_list.push(2);\n//     } else if (note.includes('.')) {\n//       beat_list.push(1);\n//     } else {\n//       beat_list.push(4);\n//     }\n//   });\n//   return beat_list;\n// };\n\n\n// const parseMusic = (music_string) => {\n//   let beat_list = [];\n//   music_string.split(' ').forEach(note => {\n//     if (note.includes('|')) {\n//       beat_list.push(2);\n//     } else if (note.includes('.')) {\n//       beat_list.push(1);\n//     } else {\n//       beat_list.push(4);\n//     }\n//   });\n//   return beat_list;\n// };\n"}
{"task_id": "JavaScript/18", "prompt": "// Find how many times a given substring can be found in the original string. Count overlaping cases.\n//   >>> howManyTimes('', 'a')\n//   0\n//   >>> howManyTimes('aaa', 'a')\n//   3\n//   >>> howManyTimes('aaaa', 'aa')\n//   3\n// const howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n", "canonical_solution": "    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "// Find how many times a given substring can be found in the original string. Count overlaping cases.\n//   >>> howManyTimes('', 'a')\n//   0\n//   >>> howManyTimes('aaa', 'a')\n//   3\n//   >>> howManyTimes('aaaa', 'aa')\n//   3\n// const howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n// }\n\n// const howManyTimes = (string, substring) => {\n//   let times = 0;\n//   for (let i = 0; i < string.length - substring.length + 1; i++) {\n//     if (string.slice(i, i + substring.length) == substring) {\n//       times += 1;\n//     }\n//   }\n//   return times;\n// }\n\n// console.log(howManyTimes('aaa', 'aa'));\n// console.log(howManyTimes('aaaa', 'aa'));\n// console.log(howManyTimes('aaaa', 'aaa'));\n// console.log(howManyTimes('aaaaa', 'aaa'));\n// console.log(howManyTimes('aaaaa', 'aa'));\n// console.log(howManyTimes('aaaaa', 'a'));\n// console.log(howManyTimes('aaaaa', 'a'));\n// console.log(howManyTimes('aaaaa', 'aa'));\n// console.log(howManyTimes('aaaaa', 'aaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log(howManyTimes('aaaaa', 'aaaa'));\n// console.log"}
{"task_id": "JavaScript/19", "prompt": "// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n//   Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n//   Return the string with numbers sorted from smallest to largest\n//   >>> sortNumbers('three one five')\n//   'one three five'\n// const sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n", "canonical_solution": "    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n//   Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n//   Return the string with numbers sorted from smallest to largest\n//   >>> sortNumbers('three one five')\n//   'one three five'\n// const sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n  }\n  let sort_map = Object.keys(value_map).map((x) => {\n    return {\n      'key': x,\n      'value': value_map[x]\n    }\n  })\n  sort_map = sort_map.sort((a, b) => {\n    if (a.value > b.value) return -1\n    if (a.value < b.value) return 1\n    return 0\n  })\n  let output = sort_map.map((x) => {\n    return x.key\n  }).join('')\n  return output\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n//   other and return them in order (smaller number, larger number).\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n//   (2.0, 2.2)\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//   (2.0, 2.0)\n// const findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n", "canonical_solution": "          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n//   other and return them in order (smaller number, larger number).\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n//   (2.0, 2.2)\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//   (2.0, 2.0)\n// const findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i!= j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "// Given list of numbers (of at least two elements), apply a linear transform to that list,\n//   such that the smallest number will become 0 and the largest will become 1\n//   >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n//   [0.0, 0.25, 0.5, 0.75, 1.0]\n// const rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n", "canonical_solution": "  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "// Given list of numbers (of at least two elements), apply a linear transform to that list,\n//   such that the smallest number will become 0 and the largest will become 1\n//   >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n//   [0.0, 0.25, 0.5, 0.75, 1.0]\n// const rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var range = max_number - min_number;\n  var scaled_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    var number = numbers[i];\n    var scaled_number = number - min_number;\n    scaled_number = scaled_number / range;\n    scaled_numbers.push(scaled_number);\n  }\n  return scaled_numbers;\n// }\n// const linearTransformed = (numbers, transform) => {\n  // const rescaled = rescaleToUnit(numbers);\n  // const transformed = rescaled.map(transform);\n  // const min = Math.min(...transformed);\n  // const max = Math.max(...transformed);\n  // const scaled_range = max - min;\n  // const scaled_min = min * scaled_range;\n  // const scaled_max = max * scaled_range;\n  // const scaled_transform = (n) => {\n    // return (n - scaled_min) / scaled_range;\n  // }\n  // return transformed;\n// }\n// const transformed = linearTransformed(range, linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation);\n// const transformed = transformed.map(linearTransformation"}
{"task_id": "JavaScript/22", "prompt": "// Filter given list of any python values only for integers\n//   >>> filterIntegers(['a', 3.14, 5])\n//   [5]\n//   >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n", "canonical_solution": "}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Filter given list of any python values only for integers\n//   >>> filterIntegers(['a', 3.14, 5])\n//   [5]\n//   >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n}\n\n// Filter given list of any python values only for strings\n//   >>> filterStrings(['a', 3.14, 5])\n//   ['a', 3.14]\n//   >>> filterStrings([1, 2, 3, 'abc', {}, []])\n//   ['1', '2', '3']\n// const filterStrings = (values) => {\n  return values.filter(x => typeof x ==='string');\n}\n\n// Filter given list of any python values only for numbers\n//   >>> filterNumbers(['a', 3.14, 5])\n//   [3.14, 5]\n//   >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterNumbers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n}\n\n// Filter given list of any python values only for booleans\n//   >>> filterBooleans(['a', 3.14, 5])\n//   [true, false]\n//   >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterBooleans = (values) => {\n  return values.filter(x => Boolean(x));\n}\n\n// Filter given list of any python values only for strings\n//   >>> filterStrings(['a', 3.14, 5])\n//   ['a', 3.14]\n//   >>> filterStrings([1, 2, 3, 'abc', {}, []])\n//   ['1', '2', '3']\n// const filterStrings = (values) => {\n  return values.filter(x => typeof x ==='string');\n}\n\n// Filter given list of any python values only for numbers\n//   >>> filterNumbers(['a', 3.14, 5])\n//   [3.14, 5]\n//   >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterNumbers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n}\n\n// Filter given list of any python values only for booleans\n//   >>> filterBooleans(['a', 3.14, 5])\n//   [true, false]\n//   >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterBooleans = (values) => {\n  return values.filter(x => Boolean(x));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "// Return length of given string\n//   >>> strlen('')\n//   0\n//   >>> strlen('abc')\n//   3\n// const strlen = (string) => {\n  return string.length;\n", "canonical_solution": "}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return length of given string\n//   >>> strlen('')\n//   0\n//   >>> strlen('abc')\n//   3\n// const strlen = (string) => {\n  return string.length;\n// }\n\n// Return index of given string\n//   >>> index('abc', 'a')\n//   0\n//   >>> index('abc', 'd')\n//   -1\n// const index = (string, substr) => {\n  return string.indexOf(substr);\n// }\n\n// Return last index of given string\n//   >>> lastIndex('abc', 'a')\n//   1\n//   >>> lastIndex('abc', 'd')\n//   -1\n// const lastIndex = (string, substr) => {\n  return string.lastIndexOf(substr);\n// }\n\n// Return if string contains given substring\n//   >>> contains('abc', 'a')\n//   true\n//   >>> contains('abc', 'd')\n//   false\n// const contains = (string, substr) => {\n  return string.indexOf(substr) > -1;\n// }\n\n// Return string with spaces in the front and end\n//   >>> pad('abc', 2)\n//  'abc '\n//   >>> pad('abc', 1)\n//   'abc '\n// const pad = (string, length) => {\n  return `${string} `.slice(-length);\n// }\n\n// Return a substring of given string\n//   >>> substr('abc', 2)\n//   'bc'\n//   >>> substr('abc', 1)\n//   'a'\n// const substr = (string, start, length) => {\n  return string.slice(start, start + length);\n// }\n\n// Return first n characters of a string\n//   >>> first('abc', 2)\n//   'ab'\n// const first = (string, n) => {\n  return string.slice(0, n);\n// }\n\n// Return last n characters of a string\n//   >>> last('abc', 2)\n//   'c'\n// const last = (string, n) => {\n  return string.slice(-n);\n// }\n\n// Return a random number in range\n//   >>> rand(10, 20)\n//   13\n// const rand = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1)) + start;\n// }\n\n// Return a random boolean\n//   >>> randbool()\n//   true\n// const randbool = () => {\n  return Math.random() > 0.5;\n// }\n\n// Return a random integer\n//   >>> randint(0, 10)\n//   3\n// const randint = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1)) + start;\n// }\n\n// Return a random string\n//   >>> randstr(10)\n//   'DqHc'\n// const randstr = (length) => {\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += Math.floor(Math.random() * 256).toString(16);\n  }\n  return result;\n// }\n\n// Return a random string of given length\n//   >>> randstr(10)\n//   'DqHc'\n// const randstr = (length) => {\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += Math.floor(Math.random() * 256).toString(16);\n  }\n  return result;\n// }\n\n// Return a random integer in given range\n//   >>> randint(0, 10)\n//   3\n// const randint = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1)) + start;\n// }\n\n// Return a random integer in given range\n//   >>> randint(1, 10)\n//   1\n// const randint = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1)) + start;\n// }\n\n// Return a random integer in given range\n//   >>> randint(1, 10)\n//   1\n// const randint = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1)) + start;\n// }\n\n// Return a random integer in given range\n//   >>> randint(1, 10)\n//   1\n// const randint = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1)) + start;\n// }\n\n// Return a random integer in given range\n//   >>> randint(1, 10)\n//   1\n// const randint = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1)) + start;\n// }\n\n// Return a random integer in given range\n//   >>> randint(1, 10)\n//   1\n// const randint = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1)) + start;\n// }\n\n// Return a random integer in given range\n//   >>> randint(1, 10)\n//   1\n// const randint = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1)) + start;\n// }\n\n// Return a random integer in given range\n//   >>> randint(1, 10)\n//   1\n// const randint = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1)) + start;\n// }\n\n// Return a random integer in given range\n//   >>> randint(1, 10)\n//   1\n// const randint = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1)) + start;\n// }\n\n// Return a random integer in given range\n//   >>> randint(1, 10)\n//   1\n// const randint = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1)) + start;\n// }\n\n// Return a random integer in given range\n//   >>> randint(1, 10)\n//   1\n// const randint = (start, end) => {\n  return Math.floor(Math.random() * (end - start + 1"}
{"task_id": "JavaScript/24", "prompt": "// For a given number n, find the largest number that divides n evenly, smaller than n\n//   >>> largestDivisor(15)\n//   5\n// const largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n", "canonical_solution": "      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "// For a given number n, find the largest number that divides n evenly, smaller than n\n//   >>> largestDivisor(15)\n//   5\n// const largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n  return -1;\n// }\n\n// For a given number n, find the largest number that divides n evenly, larger than n\n//   >>> largestDivisor(15)\n//   7\n// const largestDivisor = (n) => {\n  for (let i = n + 1; i < n * n; i++)\n    if (n % i == 0)\n      return i;\n  return -1;\n// }\n\n// Given two positive numbers n and m, return the largest number that divides both of them evenly\n//   >>> largestDivisorTwo(15, 16)\n//   8\n// const largestDivisorTwo = (n, m) => {\n  let a = Math.floor(n / m);\n  let b = Math.floor(n % m);\n  if (a > b)\n    return largestDivisor(n)\n  return largestDivisor(m)\n// }\n\n// Given two positive numbers n and m, return the largest number that divides both of them evenly\n//   >>> largestDivisorTwo(15, 16)\n//   16\n// const largestDivisorTwo = (n, m) => {\n  let a = Math.floor(n / m);\n  let b = Math.floor(n % m);\n  if (a > b)\n    return largestDivisor(n)\n  return largestDivisor(m)\n// }\n\n// Given two positive numbers n and m, return the largest number that divides both of them evenly\n//   >>> largestDivisorTwo(15, 16)\n//   16\n// const largestDivisorTwo = (n, m) => {\n  let a = Math.floor(n / m);\n  let b = Math.floor(n % m);\n  if (a > b)\n    return largestDivisor(n)\n  return largestDivisor(m)\n// }\n\n// Given two positive numbers n and m, return the largest number that divides both of them evenly\n//   >>> largestDivisorTwo(15, 16)\n//   16\n// const largestDivisorTwo = (n, m) => {\n  let a = Math.floor(n / m);\n  let b = Math.floor(n % m);\n  if (a > b)\n    return largestDivisor(n)\n  return largestDivisor(m)\n// }\n\n// Given two positive numbers n and m, return the largest number that divides both of them evenly\n//   >>> largestDivisorTwo(15, 16)\n//   16\n// const largestDivisorTwo = (n, m) => {\n  let a = Math.floor(n / m);\n  let b = Math.floor(n % m);\n  if (a > b)\n    return largestDivisor(n)\n  return largestDivisor(m)\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "// Return list of prime factors of given integer in the order from smallest to largest.\n//   Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n//   Input number should be equal to the product of all factors\n//   >>> factorize(8)\n//   [2, 2, 2]\n//   >>> factorize(25)\n//   [5, 5]\n//   >>> factorize(70)\n//   [2, 5, 7]\n// const factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n", "canonical_solution": "    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "// Return list of prime factors of given integer in the order from smallest to largest.\n//   Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n//   Input number should be equal to the product of all factors\n//   >>> factorize(8)\n//   [2, 2, 2]\n//   >>> factorize(25)\n//   [5, 5]\n//   >>> factorize(70)\n//   [2, 5, 7]\n// const factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    fact.push(n);\n  }\n  return fact;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "// From a list of integers, remove all elements that occur more than once.\n//   Keep order of elements left the same as in the input.\n//   >>> removeDuplicates([1, 2, 3, 2, 4])\n//   [1, 3, 4]\n// const removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n", "canonical_solution": "      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "// From a list of integers, remove all elements that occur more than once.\n//   Keep order of elements left the same as in the input.\n//   >>> removeDuplicates([1, 2, 3, 2, 4])\n//   [1, 3, 4]\n// const removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return Object.keys(dict).map(num => dict[num]);\n}\n\n// Given a string, find the first non-repeating substring.\n//   >>> findLongestSubstring(\"abcabcbb\")\n//   \"abc\"\n// const findLongestSubstring = (s) => {\n  var start = 0;\n  var length = 0;\n  var dict = new Object();\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) in dict) {\n      dict[s.charAt(i)] += 1;\n      if (dict[s.charAt(i)] > 1) {\n        start = i;\n        length = dict[s.charAt(i)];\n      }\n    } else {\n      dict[s.charAt(i)] = 1;\n    }\n  }\n  return s.slice(start, start + length);\n}\n\n// Given a string, find the first repeating substring.\n//   >>> findRepeatingSubstring(\"aaabaacabbb\")\n//   \"aacba\"\n// const findRepeatingSubstring = (s) => {\n  var start = 0;\n  var length = 0;\n  var dict = new Object();\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) in dict) {\n      dict[s.charAt(i)] += 1;\n      if (dict[s.charAt(i)] > 1) {\n        start = i;\n        length = dict[s.charAt(i)];\n      }\n    } else {\n      dict[s.charAt(i)] = 1;\n    }\n  }\n  return s.slice(start, start + length);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n//   >>> flipCase('Hello')\n//   'hELLO'\n// const flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n", "canonical_solution": "          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n//   >>> flipCase('Hello')\n//   'hELLO'\n// const flipCase = (string) => {\n  return string.split('')\n         .map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n         .join('');\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "// Concatenate list of strings into a single string\n//   >>> concatenate([])\n//   ''\n//   >>> concatenate(['a', 'b', 'c'])\n//   'abc'\n// const concatenate = (strings) => {\n  return strings.join('');\n", "canonical_solution": "}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Concatenate list of strings into a single string\n//   >>> concatenate([])\n//   ''\n//   >>> concatenate(['a', 'b', 'c'])\n//   'abc'\n// const concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return strings.join('');\n}\n\nconst concatenate = (strings) => {\n  return"}
{"task_id": "JavaScript/29", "prompt": "// Filter an input list of strings only for ones that start with a given prefix.\n//   >>> filterByPrefix([], 'a')\n//   []\n//   >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n//   ['abc', 'array']\n// const filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n", "canonical_solution": "}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Filter an input list of strings only for ones that start with a given prefix.\n//   >>> filterByPrefix([], 'a')\n//   []\n//   >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n//   ['abc', 'array']\n// const filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n// };\n\n// const hasDuplicates = list => {\n//   let dupCount = 0;\n//   for (let i = 0; i < list.length - 1; i++) {\n//     if (list[i] === list[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount > 0;\n// };\n\n// const findDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   }\n//   return dupCount;\n// };\n\n// const hasDuplicates = (strings, dupCount) => {\n//   for (let i = 0; i < strings.length - 1; i++) {\n//     if (strings[i] === strings[i + 1]) {\n//       dupCount++;\n//     }\n//   "}
{"task_id": "JavaScript/30", "prompt": "// Return only positive numbers in the list.\n//   >>> getPositive([-1, 2, -4, 5, 6])\n//   [2, 5, 6]\n//   >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   [5, 3, 2, 3, 9, 123, 1]\n// const getPositive = (l) => {\n  return l.filter(e => e > 0);\n", "canonical_solution": "}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return only positive numbers in the list.\n//   >>> getPositive([-1, 2, -4, 5, 6])\n//   [2, 5, 6]\n//   >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   [5, 3, 2, 3, 9, 123, 1]\n// const getPositive = (l) => {\n  return l.filter(e => e > 0);\n// };\n\n// Return the number of characters in the string.\n//   >>> getLength('hello')\n//   5\n// const getLength = (s) => {\n  return s.length;\n// };\n\n// Return the number of vowels in the string.\n//   >>> getVowels('hello')\n//   1\n// const getVowels = (s) => {\n  return s.match(/[aeiou]/g).length;\n// };\n\n// Return the number of consonants in the string.\n//   >>> getConsonants('hello')\n//   3\n// const getConsonants = (s) => {\n  return s.match(/[bcdfghjklmnpqrstvwxz]/g).length;\n// };\n\n// Return the number of consonants in the string.\n//   >>> getVowels('hello')\n//   1\n// const getVowels = (s) => {\n  return s.match(/[aeiou]/g).length;\n// };\n\n// Return the number of consonants in the string.\n//   >>> getConsonants('hello')\n//   3\n// const getConsonants = (s) => {\n  return s.match(/[bcdfghjklmnpqrstvwxz]/g).length;\n// };\n\n// Return the number of vowels in the string.\n//   >>> getVowels('hello')\n//   1\n// const getVowels = (s) => {\n  return s.match(/[aeiou]/g).length;\n// };\n\n// Return the number of consonants in the string.\n//   >>> getConsonants('hello')\n//   3\n// const getConsonants = (s) => {\n  return s.match(/[bcdfghjklmnpqrstvwxz]/g).length;\n// };\n\n// Return the number of vowels in the string.\n//   >>> getVowels('hello')\n//   1\n// const getVowels = (s) => {\n  return s.match(/[aeiou]/g).length;\n// };\n\n// Return the number of consonants in the string.\n//   >>> getConsonants('hello')\n//   3\n// const getConsonants = (s) => {\n  return s.match(/[bcdfghjklmnpqrstvwxz]/g).length;\n// };\n\n// Return the number of consonants in the string.\n//   >>> getVowels('hello')\n//   1\n// const getVowels = (s) => {\n  return s.match(/[aeiou]/g).length;\n// };\n\n// Return the number of consonants in the string.\n//   >>> getConsonants('hello')\n//   3\n// const getConsonants = (s) => {\n  return s.match(/[bcdfghjklmnpqrstvwxz]/g).length;\n// };\n\n// Return the number of vowels in the string.\n//   >>> getVowels('hello')\n//   1\n// const getVowels = (s) => {\n  return s.match(/[aeiou]/g).length;\n// };\n\n// Return the number of consonants in the string.\n//   >>> getConsonants('hello')\n//   3\n// const getConsonants = (s) => {\n  return s.match(/[bcdfghjklmnpqrstvwxz]/g).length;\n// };\n\n// Return the number of consonants in the string.\n//   >>> getVowels('hello')\n//   1\n// const getVowels = (s) => {\n  return s.match(/[aeiou]/g).length;\n// };\n\n// Return the number of consonants in the string.\n//   >>> getConsonants('hello')\n//   3\n// const getConsonants = (s) => {\n  return s.match(/[bcdfghjklmnpqrstvwxz]/g).length;\n// };\n\n// Return the number of vowels in the string.\n//   >>> getVowels('hello')\n//   1\n// const getVowels = (s) => {\n  return s.match(/[aeiou]/g).length;\n// };\n\n// Return the number of consonants in the string.\n//   >>> getConsonants('hello')\n//   3\n// const getConsonants = (s) => {\n  return s.match(/[bcdfghjklmnpqrstvwxz]/g).length;\n// };\n\n// Return the number of vowels in the string.\n//   >>> getVowels('hello')\n//   1\n// const getVowels = (s) => {\n  return s.match(/[aeiou]/g).length;\n// };\n\n// Return the number of consonants in the string.\n//   >>> getConsonants('hello')\n//   3\n// const getConsonants = (s) => {\n  return s.match(/[bcdfghjklmnpqrstvwxz]/g).length;\n// };\n\n// Return the number of vowels in the string.\n//   >>> getVowels('hello')\n//   1\n// const getVowels = (s) => {\n  return s.match(/[aeiou]/g).length;\n// };\n\n// Return the number of consonants in the string.\n//   >>> getConsonants('hello')\n//   3\n// const getConsonants = (s) => {\n  return s.match(/[bcdfghjklmnpqrstvwxz]/g).length;\n// };\n\n// Return the number of vowels in the string.\n//   >>> getVowels('hello')\n//   1\n// const get"}
{"task_id": "JavaScript/31", "prompt": "// Return true if a given number is prime, and false otherwise.\n//   >>> isPrime(6)\n//   false\n//   >>> isPrime(101)\n//   true\n//   >>> isPrime(11)\n//   true\n//   >>> isPrime(13441)\n//   true\n//   >>> isPrime(61)\n//   true\n//   >>> isPrime(4)\n//   false\n//   >>> isPrime(1)\n//   false\n// const isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n", "canonical_solution": "    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "// Return true if a given number is prime, and false otherwise.\n//   >>> isPrime(6)\n//   false\n//   >>> isPrime(101)\n//   true\n//   >>> isPrime(11)\n//   true\n//   >>> isPrime(13441)\n//   true\n//   >>> isPrime(61)\n//   true\n//   >>> isPrime(4)\n//   false\n//   >>> isPrime(1)\n//   false\n// const isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k === 0)\n      return false;\n  return true;\n//   return true;\n// }\n\n// // Return the largest prime factor of a given number,\n// // or return 0 if the number is not prime.\n// //\n// // Note: The number will be less than 1000.\n// // const largestPrimeFactor = (n) => {\n  // if (n < 2)\n    // return 0;\n  // for (let i = 2; i * i < n; i++)\n    // if (n % i === 0)\n      // return i;\n  // return 0;\n// }\n\n// // Return the number of prime factors of a given number.\n// //\n// // Note: The number will be less than 1000.\n// const numberOfPrimeFactors = (n) => {\n  // if (n < 2)\n    // return 0;\n  // let count = 0;\n  // for (let i = 2; i * i < n; i++)\n    // if (n % i === 0)\n      // count += 1;\n  // return count;\n}\n\n// // Return true if a given number is a perfect square, and false otherwise.\n// //\n// // A perfect square is a number that is the square root of a number.\n// // For example, the number 24 is a perfect square, because the square root of 24 is 12.\n// //\n// // Note: The number will be less than 1000.\n// const isPerfectSquare = (n) => {\n  // return (Math.sqrt(n) === Math.floor(Math.sqrt(n)));\n// }\n\n// // Return the sum of all the primes below a given number,\n// // or return 0 if the number is not prime.\n// //\n// // Note: The number will be less than 1000.\n// const sumOfPrimesBelow = (n) => {\n  // if (n < 2)\n    // return 0;\n  // let sum = 0;\n  // for (let i = 2; i < n; i++)\n    // if (isPrime(i))\n      // sum += i;\n  // return sum;\n// }\n\n// // Return the sum of the multiples of 3 below a given number,\n// // or return 0 if the number is not prime.\n// //\n// // Note: The number will be less than 1000.\n// const sumOfMultiplesOf3Below = (n) => {\n  // if (n < 3)\n    // return 0;\n  // let sum = 0;\n  // for (let i = 3; i < n; i += 3)\n    // sum += i;\n  // return sum;\n// }\n\n// // Return the sum of the multiples of 5 below a given number,\n// // or return 0 if the number is not prime.\n// //\n// // Note: The number will be less than 1000.\n// const sumOfMultiplesOf5Below = (n) => {\n  // if (n < 5)\n    // return 0;\n  // let sum = 0;\n  // for (let i = 5; i < n; i += 5)\n    // sum += i;\n  // return sum;\n// }\n\n// // Return the sum of the multiples of 7 below a given number,\n// // or return 0 if the number is not prime.\n// //\n// // Note: The number will be less than 1000.\n// const sumOfMultiplesOf7Below = (n) => {\n  // if (n < 7)\n    // return 0;\n  // let sum = 0;\n  // for (let i = 7; i < n; i += 7)\n    // sum += i;\n  // return sum;\n// }\n\n// // Return the sum of the multiples of 11 below a given number,\n// // or return 0 if the number is not prime.\n// //\n// // Note: The number will be less than 1000.\n// const sumOfMultiplesOf11Below = (n) => {\n  // if (n < 11)\n    // return 0;\n  // let sum = 0;\n  // for (let i = 11; i < n; i += 11)\n    // sum += i;\n  // return sum;\n// }\n\n// // Return the sum of the multiples of 13 below a given number,\n// // or return 0 if the number is not prime.\n// //\n// // Note: The number will be less than 1000.\n// const sumOfMultiplesOf13Below = (n) => {\n  // if (n < 13)\n    // return 0;\n  // let sum = 0;\n  // for (let i = 13; i < n; i += 13)\n    // sum += i;\n  // return sum;\n// }\n\n// // Return the sum of the multiples of 17 below a given number,\n// // or return 0 if the number is not prime.\n// //\n// // Note: The number will be less than 1000.\n// const sumOfMultiplesOf17Below = (n) => {\n  // if (n < 17)\n    // return 0;\n  // let sum = 0;\n  // for (let i = 17; i < n; i += 17)\n    // sum += i;\n  // return sum;\n// }\n\n// // Return the sum of the multiples of 19 below a given number,\n// // or return 0 if the number is not prime.\n// //\n// // Note: The number will be less than 1000.\n// const sumOfMultiplesOf19Below = (n) => {\n  // if (n < 19)\n    // return 0;\n  // let sum = 0;\n  // for (let i = 19; i < n; i += 19)\n    // sum += i;\n  // return sum;\n// }\n\n// // Return the sum of the multiples of 23 below a given number,\n// // or return 0 if the number is not prime.\n// //\n// // Note: The number will be less than 1000.\n//"}
{"task_id": "JavaScript/32", "prompt": "//   Evaluates polynomial with coefficients xs at point x.\n//   return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n// const poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n", "canonical_solution": "    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "//   Evaluates polynomial with coefficients xs at point x.\n//   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n// const poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) === 0) {\n      return center;\n    } else {\n      if (poly(xs, begin) * poly(xs, center) < 0) {\n        begin = center;\n      } else {\n        end = center;\n      }\n    }\n  }\n  return 0.0;\n};\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n//  1.0\n\n//  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x"}
{"task_id": "JavaScript/33", "prompt": "// This function takes a list l and returns a list l' such that\n//   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n//   to the values of the corresponding indicies of l, but sorted.\n//   >>> sortThird([1, 2, 3])\n//   [1, 2, 3]\n//   >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n//   [2, 6, 3, 4, 8, 9, 5]\n// const sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "// This function takes a list l and returns a list l' such that\n//   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n//   to the values of the corresponding indicies of l, but sorted.\n//   >>> sortThird([1, 2, 3])\n//   [1, 2, 3]\n//   >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n//   [2, 6, 3, 4, 8, 9, 5]\n// const sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  var notThree = l.filter((item, index) => index % 3!= 0);\n  notThree.sort((a, b) => (a - b));\n  return [...notThree,...three];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "// Return sorted unique elements in a list\n//   >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//   [0, 2, 3, 5, 9, 123]\n// const unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n", "canonical_solution": "}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return sorted unique elements in a list\n//   >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//   [0, 2, 3, 5, 9, 123]\n// const unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n//   }\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "// Return maximum element in the list.\n//   >>> maxElement([1, 2, 3])\n//   3\n//   >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   123\n// const maxElement = (l) => {\n  return Math.max(...l);\n", "canonical_solution": "}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return maximum element in the list.\n//   >>> maxElement([1, 2, 3])\n//   3\n//   >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   123\n// const maxElement = (l) => {\n  return Math.max(...l);\n}\n\n// Return maximum element in the list.\n//   >>> maxElement([1, 2, 3])\n//   3\n//   >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   9\nconst maxElement = (l) => {\n  return Math.max(...l);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\n// Return maximum element in the list.\n//   >>> maxElement([1, 2, 3])\n//   3\n//   >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   9\nconst maxElement = (l) => {\n  return Math.max(...l);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = (a, b) => {\n  return maxElement(a);\n};\n\nconst max = ("}
{"task_id": "JavaScript/36", "prompt": "// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n//   >>> fizzBuzz(50)\n//   0\n//   >>> fizzBuzz(78)\n//   2\n//   >>> fizzBuzz(79)\n//   3\n// const fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n", "canonical_solution": "  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n//   >>> fizzBuzz(50)\n//   0\n//   >>> fizzBuzz(78)\n//   2\n//   >>> fizzBuzz(79)\n//   3\n// const fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n    else\n      ans++;\n  ns.forEach((n) => console.log(n));\n  return ans;\n}\n\n// ----------------------------------------------------------------------------\n//  Problem #6\n// ----------------------------------------------------------------------------\n// Return the number of times the digit 5 appears in integers less than n which are divisible by both 7 and 11.\n//   >>> fizzBuzz(100)\n//   0\n//   >>> fizzBuzz(120)\n//   1\n//   >>> fizzBuzz(131)\n//   2\n// const fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 7 == 0 && i % 11 == 0)\n      ns.push(i);\n    else\n      ans++;\n  ns.forEach((n) => console.log(n));\n  return ans;\n}\n\n// ----------------------------------------------------------------------------\n//  Problem #7\n// ----------------------------------------------------------------------------\n// Return the number of integers less than n which are evenly divisible by both 7 and 11.\n//   >>> fizzBuzz(100)\n//   0\n//   >>> fizzBuzz(120)\n//   1\n//   >>> fizzBuzz(131)\n//   2\n// const fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 7 == 0 && i % 11 == 0)\n      ns.push(i);\n    else\n      ans++;\n  ns.forEach((n) => console.log(n));\n  return ans;\n}\n\n// ----------------------------------------------------------------------------\n//  Problem #8\n// ----------------------------------------------------------------------------\n// Return the largest number that can be divided by each of the numbers 1 to 20.\n//   >>> fizzBuzz(20)\n//   19\n//   >>> fizzBuzz(40)\n//   12\n// const fizzBuzz = (n) => {\n  var ans = 1;\n  for (let i = 2; i < n; i++)\n    ans = Math.max(ans, Math.floor(n / i));\n  return ans;\n}\n\n// ----------------------------------------------------------------------------\n//  Problem #9\n// ----------------------------------------------------------------------------\n// Return the number of integers less than n which are divisible by both 7 and 11,\n// and also by both 5 and 13.\n//   >>> fizzBuzz(100)\n//   0\n//   >>> fizzBuzz(120)\n//   1\n//   >>> fizzBuzz(131)\n//   2\n// const fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 7 == 0 && i % 11 == 0 && i % 5 == 0 && i % 13 == 0)\n      ns.push(i);\n    else\n      ans++;\n  ns.forEach((n) => console.log(n));\n  return ans;\n}\n\n// ----------------------------------------------------------------------------\n//  Problem #10\n// ----------------------------------------------------------------------------\n// Return the sum of all the even-valued terms in the sequence 1 to n.\n//   >>> fizzBuzz(100)\n//   0\n//   >>> fizzBuzz(120)\n//   10\n//   >>> fizzBuzz(131)\n//   11\n// const fizzBuzz = (n) => {\n  var ans = 0;\n  for (let i = 1; i <= n; i++)\n    if (i % 2 == 0)\n      ans += i;\n  return ans;\n}\n\n// ----------------------------------------------------------------------------\n//  Problem #11\n// ----------------------------------------------------------------------------\n// Return the number of integers less than n which are evenly divisible by\n// both 7 and 11, and also by both 5 and 13.\n//   >>> fizzBuzz(100)\n//   0\n//   >>> fizzBuzz(120)\n//   1\n//   >>> fizzBuzz(131)\n//   2\n// const fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 7 == 0 && i % 11 == 0 && i % 5 == 0 && i % 13 == 0)\n      ns.push(i);\n    else\n      ans++;\n  ns.forEach((n) => console.log(n));\n  return ans;\n}\n\n// ----------------------------------------------------------------------------\n//  Problem #12\n// ----------------------------------------------------------------------------\n// Return the sum of all the multiples of 3 or 5 below n which are not divisible by 11.\n//   >>> fizzBuzz(100)\n//   0\n//   >>> fizzBuzz(120)\n//   0\n//   >>> fizzBuzz(131)\n//   0\n// const fizzBuzz = (n) => {\n  var ans = 0;\n  for (let i = 1; i < n; i++)\n    if (i % 3 == 0 || i % 5 == 0 && i % 11!= 0)\n      ans += i;\n  return ans;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "// This function takes a list l and returns a list l' such that\n//   l' is identical to l in the odd indicies, while its values at the even indicies are equal\n//   to the values of the even indicies of l, but sorted.\n//   >>> sortEven([1, 2, 3])\n//   [1, 2, 3]\n//   >>> sortEven([5, 6, 3, 4])\n//   [3, 6, 5, 4]\n// const sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "// This function takes a list l and returns a list l' such that\n//   l' is identical to l in the odd indicies, while its values at the even indicies are equal\n//   to the values of the even indicies of l, but sorted.\n//   >>> sortEven([1, 2, 3])\n//   [1, 2, 3]\n//   >>> sortEven([5, 6, 3, 4])\n//   [3, 6, 5, 4]\n// const sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return even;\n// };\n\n// const sortOdd = (l) => {\n//   var odd = l.filter((item, index) => index % 2 == 1);\n//   odd.sort((a, b) => (a - b));\n//   return odd;\n// };\n//\n// const sortEven = (l) => {\n//   var even = l.filter((item, index) => index % 2 == 0);\n//   var odd = l.filter((item, index) => index % 2 == 1);\n//   odd.sort((a, b) => (a - b));\n//   return [even, odd];\n// };\n\n// sortOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561,"}
{"task_id": "JavaScript/38", "prompt": "//   returns encoded string by cycling groups of three characters.\n// const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n", "canonical_solution": "}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "//   returns encoded string by cycling groups of three characters.\n// const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n}\n\n// ------------------------------------------\n\n/*\n  takes as input string and returns array of strings.\n  */\nconst tokenize = (s) => {\n  const result = [];\n  let sb = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == '-') {\n      if (i < s.length - 1)\n        result.push(s.slice(sb, i + 1));\n      sb = i + 1;\n    }\n  }\n  if (sb < s.length)\n    result.push(s.slice(sb, s.length));\n  return result;\n}\n\n/*\n  takes as input string and returns encoded string.\n  */\nconst encode = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='')\n      result.push('-');\n    else if (s[i] == '-')\n      result.push(' ');\n    else\n      result.push(s[i]);\n  }\n  return result.join('');\n}\n\n/*\n  takes as input string and returns decoded string.\n  */\nconst decode = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == '-') {\n      if (i < s.length - 1)\n        result.push(s[i + 1]);\n      i++;\n    } else if (s[i] =='')\n      result.push('-');\n    else\n      result.push(s[i]);\n  }\n  return result.join('');\n}\n\n// ------------------------------------------\n\n/*\n  takes as input string and returns array of strings.\n  */\nconst normalize = (s) => {\n  const result = [];\n  let sb = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == '-') {\n      if (i < s.length - 1)\n        result.push(s.slice(sb, i + 1));\n      sb = i + 1;\n    }\n  }\n  if (sb < s.length)\n    result.push(s.slice(sb, s.length));\n  return result;\n}\n\n// ------------------------------------------\n\n/*\n  takes as input string and returns array of strings.\n  */\nconst parse = (s) => {\n  const result = [];\n  let sb = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='')\n      result.push(s.slice(sb, i + 1));\n    sb = i + 1;\n  }\n  if (sb < s.length)\n    result.push(s.slice(sb, s.length));\n  return result;\n}\n\n// ------------------------------------------\n\n/*\n  takes as input string and returns array of strings.\n  */\nconst normalizeAndParse = (s) => {\n  const result = [];\n  let sb = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='') {\n      result.push(s.slice(sb, i + 1));\n      sb = i + 1;\n    }\n  }\n  if (sb < s.length)\n    result.push(s.slice(sb, s.length));\n  return result;\n}\n\n// ------------------------------------------\n\n// console.log(decodeCyclic('abc-de-fghi'));\n// console.log(decodeCyclic('abc-de-fghi-'));\n// console.log(decodeCyclic('abc-de-fghi- '));\n// console.log(decodeCyclic('abc-de-fghi- -'));\n// console.log(decodeCyclic('abc-de-fghi- - -'));\n// console.log(decodeCyclic('abc-de-fghi- - - -'));\n// console.log(decodeCyclic('abc-de-fghi- - - - -'));\n// console.log(decodeCyclic('abc-de-fghi- - - - - -'));\n// console.log(decodeCyclic('abc-de-fghi- - - - - - -'));\n// console.log(decodeCyclic('abc-de-fghi- - - - - - - -'));\n// console.log(decodeCyclic('abc-de-fghi- - - - - - - - -'));\n// console.log(decodeCyclic('abc-de-fghi- - - - - - - - - -'));\n// console.log(decodeCyclic('abc-de-fghi- - - - - - - - - - -'));\n// console.log(decodeCyclic('abc-de-fghi- - - - - - - - - - - -'));\n// console.log(decodeCyclic('abc-de-fghi- - - - - - - - - - - - -'));\n// console.log(decodeCyclic('abc-de-fghi- - - - - - - - - - - - - -'));\n// console.log(decodeCyclic('abc-de-fghi-"}
{"task_id": "JavaScript/39", "prompt": "//   primeFib returns n-th number that is a Fibonacci number and it's also prime.\n//   >>> primeFib(1)\n//   2\n//   >>> primeFib(2)\n//   3\n//   >>> primeFib(3)\n//   5\n//   >>> primeFib(4)\n//   13\n//   >>> primeFib(5)\n//   89\n// const primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n", "canonical_solution": "\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "//   primeFib returns n-th number that is a Fibonacci number and it's also prime.\n//   >>> primeFib(1)\n//   2\n//   >>> primeFib(2)\n//   3\n//   >>> primeFib(3)\n//   5\n//   >>> primeFib(4)\n//   13\n//   >>> primeFib(5)\n//   89\n// const primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  var fib = function (n) {\n    if (n < 2)\n      return n;\n    return fib(n - 1) + fib(n - 2);\n  }\n  var primeFib = function (n) {\n    if (isPrime(fib(n)))\n      return fib(n);\n  }\n  return primeFib(n);\n}\n\n//   >>> primeFib(1)\n//   2\n//   >>> primeFib(2)\n//   3\n//   >>> primeFib(3)\n//   5\n//   >>> primeFib(4)\n//   13\n//   >>> primeFib(5)\n//   89\nconst primeFib = (n) => {\n  var fib = function (n) {\n    if (n < 2)\n      return n;\n    return fib(n - 1) + fib(n - 2);\n  }\n  var primeFib = function (n) {\n    if (isPrime(fib(n)))\n      return fib(n);\n  }\n  return primeFib(n);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "//   triplesSumToZero takes a list of integers as an input.\n//   it returns true if there are three distinct elements in the list that\n//   sum to zero, and false otherwise.\n// \n//   >>> triplesSumToZero([1, 3, 5, 0])\n//   false\n//   >>> triplesSumToZero([1, 3, -2, 1])\n//   true\n//   >>> triplesSumToZero([1, 2, 3, 7])\n//   false\n//   >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n//   true\n//   >>> triplesSumToZero([1])\n//   false\n// const triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n", "canonical_solution": "        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "//   triplesSumToZero takes a list of integers as an input.\n//   it returns true if there are three distinct elements in the list that\n//   sum to zero, and false otherwise.\n// \n//   >>> triplesSumToZero([1, 3, 5, 0])\n//   false\n//   >>> triplesSumToZero([1, 3, -2, 1])\n//   true\n//   >>> triplesSumToZero([1, 2, 3, 7])\n//   false\n//   >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n//   true\n//   >>> triplesSumToZero([1])\n//   false\n// const triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0) return true;\n  return false;\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "//   Imagine a road that's a perfectly straight infinitely long line.\n//   n cars are driving left to right;  simultaneously, a different set of n cars\n//   are driving right to left.   The two sets of cars start out being very far from\n//   each other.  All cars move in the same speed.  Two cars are said to collide\n//   when a car that's moving left to right hits a car that's moving right to left.\n//   However, the cars are infinitely sturdy and strong; as a result, they continue moving\n//   in their trajectory as if they did not collide.\n// \n//   This function outputs the number of such collisions.\n// const carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n", "canonical_solution": "}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "//   Imagine a road that's a perfectly straight infinitely long line.\n//   n cars are driving left to right;  simultaneously, a different set of n cars\n//   are driving right to left.   The two sets of cars start out being very far from\n//   each other.  All cars move in the same speed.  Two cars are said to collide\n//   when a car that's moving left to right hits a car that's moving right to left.\n//   However, the cars are infinitely sturdy and strong; as a result, they continue moving\n//   in their trajectory as if they did not collide.\n// \n//   This function outputs the number of such collisions.\n// const carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n// }\n// \n// const carRaceCollision = (n) => {\n  return (n - 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n - 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n - 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n - 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n - 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n - 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n - 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n - 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n - 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n - 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n - 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n - 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n - 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n + 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n - 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n - 1) * (n + 1) / 2;\n// }\n// \n// const carRaceCollision = (n) => {\n  return (2 * n - 1) * (n + 1"}
{"task_id": "JavaScript/42", "prompt": "// Return list with elements incremented by 1.\n//   >>> incrList([1, 2, 3])\n//   [2, 3, 4]\n//   >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//   [6, 4, 6, 3, 4, 4, 10, 1, 124]\n// const incrList = (l) => {\n  return l.map(e => e + 1);\n", "canonical_solution": "}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return list with elements incremented by 1.\n//   >>> incrList([1, 2, 3])\n//   [2, 3, 4]\n//   >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//   [6, 4, 6, 3, 4, 4, 10, 1, 124]\n// const incrList = (l) => {\n  return l.map(e => e + 1);\n  // }\n}\n\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n}\n\nconsole.log(incrList([1, 2, 3])); //=> [2, 3, 4]\nconsole.log(incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])); //=> [6, 4, 6, 3, 4, 4, 10, 1, 124]\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "//   pairsSumToZero takes a list of integers as an input.\n//   it returns true if there are two distinct elements in the list that\n//   sum to zero, and false otherwise.\n//   >>> pairsSumToZero([1, 3, 5, 0])\n//   false\n//   >>> pairsSumToZero([1, 3, -2, 1])\n//   false\n//   >>> pairsSumToZero([1, 2, 3, 7])\n//   false\n//   >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n//   true\n//   >>> pairsSumToZero([1])\n//   false\n// const pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n", "canonical_solution": "        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "//   pairsSumToZero takes a list of integers as an input.\n//   it returns true if there are two distinct elements in the list that\n//   sum to zero, and false otherwise.\n//   >>> pairsSumToZero([1, 3, 5, 0])\n//   false\n//   >>> pairsSumToZero([1, 3, -2, 1])\n//   false\n//   >>> pairsSumToZero([1, 2, 3, 7])\n//   false\n//   >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n//   true\n//   >>> pairsSumToZero([1])\n//   false\n// const pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n// };\n\n//   pairsSumToZero takes a list of integers as an input.\n//   it returns true if there are two distinct elements in the list that\n//   sum to zero, and false otherwise.\n//   >>> pairsSumToZero([1, 3, 5, 0])\n//   false\n//   >>> pairsSumToZero([1, 3, -2, 1])\n//   false\n//   >>> pairsSumToZero([1, 2, 3, 7])\n//   false\n//   >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n//   true\n//   >>> pairsSumToZero([1])\n//   false\n// const pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length - 1; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n// };\n\n//   pairsSumToZero takes a list of integers as an input.\n//   it returns true if there are two distinct elements in the list that\n//   sum to zero, and false otherwise.\n//   >>> pairsSumToZero([1, 3, 5, 0])\n//   false\n//   >>> pairsSumToZero([1, 3, -2, 1])\n//   false\n//   >>> pairsSumToZero([1, 2, 3, 7])\n//   false\n//   >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n//   true\n//   >>> pairsSumToZero([1])\n//   false\n// const pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length - 1; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n// };\n\n//   pairsSumToZero takes a list of integers as an input.\n//   it returns true if there are two distinct elements in the list that\n//   sum to zero, and false otherwise.\n//   >>> pairsSumToZero([1, 3, 5, 0])\n//   false\n//   >>> pairsSumToZero([1, 3, -2, 1])\n//   false\n//   >>> pairsSumToZero([1, 2, 3, 7])\n//   false\n//   >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n//   true\n//   >>> pairsSumToZero([1])\n//   false\n// const pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length - 1; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n// };\n\n//   pairsSumToZero takes a list of integers as an input.\n//   it returns true if there are two distinct elements in the list that\n//   sum to zero, and false otherwise.\n//   >>> pairsSumToZero([1, 3, 5, 0])\n//   false\n//   >>> pairsSumToZero([1, 3, -2, 1])\n//   false\n//   >>> pairsSumToZero([1, 2, 3, 7])\n//   false\n//   >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n//   true\n//   >>> pairsSumToZero([1])\n//   false\n// const pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length - 1; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "// Change numerical base of input number x to base.\n//   return string representation after the conversion.\n//   base numbers are less than 10.\n//   >>> changeBase(8, 3)\n//   '22'\n//   >>> changeBase(8, 2)\n//   '1000'\n//   >>> changeBase(7, 2)\n//   '111'\n// const changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n", "canonical_solution": "    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "// Change numerical base of input number x to base.\n//   return string representation after the conversion.\n//   base numbers are less than 10.\n//   >>> changeBase(8, 3)\n//   '22'\n//   >>> changeBase(8, 2)\n//   '1000'\n//   >>> changeBase(7, 2)\n//   '111'\n// const changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n};\n\n// Converts a decimal number to base X.\n//   return string representation after the conversion.\n//   base numbers are less than 10.\n//   >>> changeBase(2, 8)\n//   '100'\n//   >>> changeBase(8, 2)\n//   '1000'\n//   >>> changeBase(7, 2)\n//   '111'\n// const changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n", "canonical_solution": "}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the side length and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n}\n\n// Given the length of a side and the height of a triangle.\n// Return the area.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) =>"}
{"task_id": "JavaScript/46", "prompt": "// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fib4(0) -> 0\n//   fib4(1) -> 0\n//   fib4(2) -> 2\n//   fib4(3) -> 0\n//   fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n//   Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n//   >>> fib4(5)\n//   4\n//   >>> fib4(6)\n//   8\n//   >>> fib4(7)\n//   14\n// const fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n", "canonical_solution": "                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fib4(0) -> 0\n//   fib4(1) -> 0\n//   fib4(2) -> 2\n//   fib4(3) -> 0\n//   fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n//   Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n//   >>> fib4(5)\n//   4\n//   >>> fib4(6)\n//   8\n//   >>> fib4(7)\n//   14\n// const fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                 results.at(-3) + results.at(-4));\n  }\n  return results[n - 1];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "// Return median of elements in the list l.\n//   >>> median([3, 1, 2, 4, 5])\n//   3\n//   >>> median([-10, 4, 6, 1000, 10, 20])\n//   8.0\n// const median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n", "canonical_solution": "    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "// Return median of elements in the list l.\n//   >>> median([3, 1, 2, 4, 5])\n//   3\n//   >>> median([-10, 4, 6, 1000, 10, 20])\n//   8.0\n// const median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[len / 2];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2;\n//   };\n//\n// Return the median of the elements in the list l.\n//   >>> median([3, 1, 2, 4, 5])\n//   3\n//   >>> median([-10, 4, 6, 1000, 10, 20])\n//   8.0\n// const median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[len / 2];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2;\n//   };\n//\n// Return the sum of the elements in the list l.\n//   >>> sum([3, 1, 2, 4, 5])\n//   9\n// const sum = (l) => {\n  var sum = 0;\n  for (var i = 0; i < l.length; i++)\n    sum += l[i];\n  return sum;\n//   };\n//\n// Return the average of the elements in the list l.\n//   >>> average([3, 1, 2, 4, 5])\n//   3.5\n// const average = (l) => {\n  var sum = 0;\n  for (var i = 0; i < l.length; i++)\n    sum += l[i];\n  return sum / l.length;\n//   };\n//\n// Return the product of the elements in the list l.\n//   >>> product([3, 1, 2, 4, 5])\n//   15\n// const product = (l) => {\n  var product = 1;\n  for (var i = 0; i < l.length; i++)\n    product *= l[i];\n  return product;\n//   };\n//\n// Return the min of the elements in the list l.\n//   >>> min([3, 1, 2, 4, 5])\n//   1\n// const min = (l) => {\n  var min = l[0];\n  for (var i = 0; i < l.length; i++)\n    if (l[i] < min)\n      min = l[i];\n  return min;\n//   };\n//\n// Return the max of the elements in the list l.\n//   >>> max([3, 1, 2, 4, 5])\n//   5\n// const max = (l) => {\n  var max = l[0];\n  for (var i = 0; i < l.length; i++)\n    if (l[i] > max)\n      max = l[i];\n  return max;\n//   };\n//\n// Return the sum of the squares of the elements in the list l.\n//   >>> sumOfSquares([3, 1, 2, 4, 5])\n//   29\n// const sumOfSquares = (l) => {\n  var sum = 0;\n  for (var i = 0; i < l.length; i++)\n    sum += l[i] * l[i];\n  return sum;\n//   };\n//\n// Return the sum of the squares of the elements in the list l.\n//   >>> sumOfSquares([3, 1, 2, 4, 5])\n//   29\n// const sumOfSquares = (l) => {\n  var sum = 0;\n  for (var i = 0; i < l.length; i++)\n    sum += l[i] * l[i];\n  return sum;\n//   };\n//\n// Return the difference of the squares of the elements in the list l.\n//   >>> differenceOfSquares([3, 1, 2, 4, 5])\n//   0\n// const differenceOfSquares = (l) => {\n  var sum = 0;\n  for (var i = 0; i < l.length; i++)\n    sum += (l[i] * l[i]) - (sumOfSquares(l));\n  return sum;\n//   };\n//\n// Return the sum of the powers of the elements in the list l.\n//   >>> sumOfPowers([3, 1, 2, 4, 5])\n//   45\n// const sumOfPowers = (l) => {\n  var sum = 0;\n  for (var i = 0; i < l.length; i++)\n    sum += Math.pow(l[i], 2);\n  return sum;\n//   };\n//\n// Return the sum of the powers of the elements in the list l.\n//   >>> sumOfPowers([3, 1, 2, 4, 5])\n//   45\n// const sumOfPowers = (l) => {\n  var sum = 0;\n  for (var i = 0; i < l.length; i++)\n    sum += Math.pow(l[i], 2);\n  return sum;\n//   };\n//\n// Return the sum of the powers of the elements in the list l.\n//   >>> sumOfPowers([3, 1, 2, 4, 5])\n//   45\n// const sumOfPowers = (l) => {\n  var sum = 0;\n  for (var i = 0; i < l.length; i++)\n    sum += Math.pow(l[i], 2);\n  return sum;\n//   };\n//\n// Return the sum of the cubes of the elements in the list l.\n//   >>> sumOfCubes([3, 1, 2, 4, 5])\n//   72\n// const sumOfCubes = (l) => {\n  var sum = 0;\n  for (var i = 0; i < l.length; i++)\n    sum += Math.pow(l[i], 3);\n  return sum;\n//   };\n//\n// Return the sum of the cubes of the elements in the list l.\n//   >>> sumOfCubes([3, 1, 2, 4, 5])\n//   72\n// const sumOfCubes = (l) => {\n  var sum = 0;\n  for (var i = 0; i <"}
{"task_id": "JavaScript/48", "prompt": "//   Checks if given string is a palindrome\n//   >>> isPalindrome('')\n//   true\n//   >>> isPalindrome('aba')\n//   true\n//   >>> isPalindrome('aaaaa')\n//   true\n//   >>> isPalindrome('zbcd')\n//   false\n// const isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "//   Checks if given string is a palindrome\n//   >>> isPalindrome('')\n//   true\n//   >>> isPalindrome('aba')\n//   true\n//   >>> isPalindrome('aaaaa')\n//   true\n//   >>> isPalindrome('zbcd')\n//   false\n// const isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n// }\n\n// const palindrome = (text) => {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     let char = text[i];\n//     if (isPalindrome(char))\n//       result += char;\n//     else\n//       result += '#';\n//   }\n//   return result;\n// }\n\n// const isPalindrome = (text) => {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     let char = text[i];\n//     if (isPalindrome(char))\n//       result += char;\n//     else\n//       result += '#';\n//   }\n//   return result;\n// }\n\n// const isPalindrome = (text) => {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     let char = text[i];\n//     if (isPalindrome(char))\n//       result += char;\n//     else\n//       result += '#';\n//   }\n//   return result;\n// }\n\n// const isPalindrome = (text) => {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     let char = text[i];\n//     if (isPalindrome(char))\n//       result += char;\n//     else\n//       result += '#';\n//   }\n//   return result;\n// }\n\n// const isPalindrome = (text) => {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     let char = text[i];\n//     if (isPalindrome(char))\n//       result += char;\n//     else\n//       result += '#';\n//   }\n//   return result;\n// }\n\n// const isPalindrome = (text) => {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     let char = text[i];\n//     if (isPalindrome(char))\n//       result += char;\n//     else\n//       result += '#';\n//   }\n//   return result;\n// }\n\n// const isPalindrome = (text) => {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     let char = text[i];\n//     if (isPalindrome(char))\n//       result += char;\n//     else\n//       result += '#';\n//   }\n//   return result;\n// }\n\n// const isPalindrome = (text) => {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     let char = text[i];\n//     if (isPalindrome(char))\n//       result += char;\n//     else\n//       result += '#';\n//   }\n//   return result;\n// }\n\n// const isPalindrome = (text) => {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     let char = text[i];\n//     if (isPalindrome(char))\n//       result += char;\n//     else\n//       result += '#';\n//   }\n//   return result;\n// }\n\n// const isPalindrome = (text) => {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     let char = text[i];\n//     if (isPalindrome(char))\n//       result += char;\n//     else\n//       result += '#';\n//   }\n//   return result;\n// }\n\n// const isPalindrome = (text) => {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     let char = text[i];\n//     if (isPalindrome(char))\n//       result += char;\n//     else\n//       result += '#';\n//   }\n//   return result;\n// }\n\n// const isPalindrome = (text) => {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     let char = text[i];\n//     if (isPalindrome(char))\n//       result += char;\n//     else\n//       result += '#';\n//   }\n//   return result;\n// }\n\n// const isPalindrome = (text) => {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     let char = text[i];\n//     if (isPalindrome(char))\n//       result += char;\n//     else\n//       result += '#';\n//   }\n//   return result;\n// }\n\n// const isPalindrome = (text) => {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     let char = text[i];\n//     if (isPalindrome(char))\n//       result += char;\n//     else\n//       result += '#';\n//   }\n//   return result;\n// }\n\n// const isPalindrome = (text) => {\n//   let result = '';\n//   for (let i = 0; i < text.length; i++) {\n//     let char = text[i];\n//     if (isPalindrome(char))\n//       result += char;\n//     "}
{"task_id": "JavaScript/49", "prompt": "// Return 2^n modulo p (be aware of numerics).\n//   >>> modp(3, 5)\n//   3\n//   >>> modp(1101, 101)\n//   2\n//   >>> modp(0, 101)\n//   1\n//   >>> modp(3, 11)\n//   8\n//   >>> modp(100, 101)\n//   1\n// const modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n", "canonical_solution": "    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "// Return 2^n modulo p (be aware of numerics).\n//   >>> modp(3, 5)\n//   3\n//   >>> modp(1101, 101)\n//   2\n//   >>> modp(0, 101)\n//   1\n//   >>> modp(3, 11)\n//   8\n//   >>> modp(100, 101)\n//   1\n// const modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (ret * p) % p;\n  return ret;\n//   return modp(n - 1, p);\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "//   returns encoded string by shifting every character by 5 in the alphabet.\n// const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n", "canonical_solution": "  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "//   returns encoded string by shifting every character by 5 in the alphabet.\n// const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n// encode_shift(\"hello\") === \"zsajb\"\n// decode_shift(\"zsajb\") === \"hello\"\n\n/*\n  Shows that each character of the string is shifted 5 times,\n  and then shifted back to its original position.\n  */\nconst encodeAndDecode = (s) => {\n  let enc = encodeShift(s);\n  let dec = decodeShift(enc);\n\n  return enc === dec;\n}\n\nencodeAndDecode(\"hello\")\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "//   removeVowels is a function that takes string and returns string without vowels.\n//   >>> removeVowels('')\n//   ''\n//   >>> removeVowels(\"abcdef\\nghijklm\")\n//   'bcdf\\nghjklm'\n//   >>> removeVowels('abcdef')\n//   'bcdf'\n//   >>> removeVowels('aaaaa')\n//   ''\n//   >>> removeVowels('aaBAA')\n//   'B'\n//   >>> removeVowels('zbcd')\n//   'zbcd'\n// const removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n", "canonical_solution": "                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "//   removeVowels is a function that takes string and returns string without vowels.\n//   >>> removeVowels('')\n//   ''\n//   >>> removeVowels(\"abcdef\\nghijklm\")\n//   'bcdf\\nghjklm'\n//   >>> removeVowels('abcdef')\n//   'bcdf'\n//   >>> removeVowels('aaaaa')\n//   ''\n//   >>> removeVowels('aaBAA')\n//   'B'\n//   >>> removeVowels('zbcd')\n//   'zbcd'\n// const removeVowels = (text) => {\n  return text.split(\"\")\n            .filter(s =>![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                     .includes(s.toLowerCase())\n                     .includes(s.toUpperCase()))\n            .join(\"\");\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "// Return true if all numbers in the list l are below threshold t.\n//   >>> belowThreshold([1, 2, 4, 10], 100)\n//   true\n//   >>> belowThreshold([1, 20, 4, 10], 5)\n//   false\n// const belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "// Return true if all numbers in the list l are below threshold t.\n//   >>> belowThreshold([1, 2, 4, 10], 100)\n//   true\n//   >>> belowThreshold([1, 20, 4, 10], 5)\n//   false\n// const belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      return false\n  return true\n}\n\nfunction isListInString(s: string, l: Array<string>): boolean {\n  return s.includes(...l)\n}\n\nfunction isListInArray(s: string, l: Array<string>): boolean {\n  return l.includes(...s)\n}\n\nfunction isListInArray2(s: string, l: Array<string>): boolean {\n  return l.includes(s)\n}\n\nfunction isListInStringOrArray(s: string, l: Array<string>): boolean {\n  return isListInString(s, l) || isListInArray(s, l)\n}\n\n// Given a string s and an array l of strings, returns a string where each\n// element is an integer.\n//\n// Example:\n//   >>> s = \"abcde\"\n//   >>> l = [\"a\", \"b\", \"c\"]\n//   >>> getIntegerList(s, l)\n//   'abcde'\n//   >>> s = \"abc\"\n//   >>> l = [\"c\"]\n//   >>> getIntegerList(s, l)\n//   'abc'\n// const getIntegerList = (s: string, l: Array<string>): string {\n  let res = ''\n  for (const e of l)\n    res += s[e.length]\n  return res\n}\n\n// Given an array of strings, returns a string with each string concatenated\n// to form a new string.\n//\n// Example:\n//   >>> s = [\"abc\", \"def\"]\n//   >>> getConcatenated(s)\n//   'abcdef'\n// const getConcatenated = (s: Array<string>): string {\n  let res = ''\n  for (const e of s)\n    res += e\n  return res\n}\n\n// Given an array of strings, returns a string where each element is replaced\n// by the next element in the array.\n//\n// Example:\n//   >>> s = [\"abc\", \"def\"]\n//   >>> getReplaced(s)\n//   'adb'\n// const getReplaced = (s: Array<string>): string {\n  let res = ''\n  for (const e of s)\n    res += e\n  return res\n}\n\n// Given a string, returns a string where each letter is replaced by the\n// letter in its position in the given array.\n//\n// Example:\n//   >>> s = \"abc\"\n//   >>> getReplacedArray(s, ['a', 'b', 'c'])\n//   'b'\n// const getReplacedArray = (s: string, l: Array<string>): string {\n  let res = ''\n  for (const e of s)\n    res += l[e.charCodeAt(0)]\n  return res\n}\n\n// Given a string, returns a string where each letter is replaced by the\n// letter in its position in the given array, except where that letter is\n// repeated.\n//\n// Example:\n//   >>> s = \"abc\"\n//   >>> getRepeatedArray(s, ['a', 'b', 'c'])\n//   'ba'\n// const getRepeatedArray = (s: string, l: Array<string>): string {\n  let res = ''\n  for (const e of s)\n    res += l[e.charCodeAt(0)]\n  return res\n}\n\n// Given a string and an array of strings, returns the result of replacing\n// every element in the string by the first element in the array.\n//\n// Example:\n//   >>> s = \"abc\"\n//   >>> l = ['a', 'b', 'c']\n//   >>> getReplacement(s, l)\n//   'aa'\n// const getReplacement = (s: string, l: Array<string>): string {\n  let res = ''\n  for (const e of l)\n    res += e\n  return res\n}\n\n// Given a string and an array of strings, returns the result of replacing\n// every element in the string by the last element in the array.\n//\n// Example:\n//   >>> s = \"abc\"\n//   >>> l = ['a', 'b', 'c']\n//   >>> getReplacement2(s, l)\n//   'c'\n// const getReplacement2 = (s: string, l: Array<string>): string {\n  let res = ''\n  for (const e of l)\n    res += e\n  return res\n}\n\n// Given a string and an array of strings, returns the result of replacing\n// every element in the string by the next element in the array.\n//\n// Example:\n//   >>> s = \"abc\"\n//   >>> l = ['a', 'b', 'c']\n//   >>> getReplacement3(s, l)\n//   'ac'\n// const getReplacement3 = (s: string, l: Array<string>): string {\n  let res = ''\n  for (const e of l)\n    res += e\n  return res\n}\n\n// Given a string and an array of strings, returns the result of replacing\n// every element in the string by the previous element in the array.\n//\n// Example:\n//   >>> s = \"abc\"\n//   >>> l = ['a', 'b', 'c']\n//   >>> getReplacement4(s, l)\n//   'cb'\n// const getReplacement4 = (s: string, l: Array<string>): string {\n  let res = ''\n  for (const e of l)\n    res += e\n  return res\n}\n\n// Given a string and an array of strings, returns the result of replacing\n// every element in the string by the previous element in the array, except\n// where the element is repeated.\n//\n// Example:\n//   >>> s = \"abc\"\n//   >>> l = ['a', 'b', 'c']\n//   >>> getReplacement5(s, l)\n//   'cb'\n// const getReplacement5 = (s: string, l: Array<string>): string {\n  let res = ''\n  for (const e of l)\n    res += e\n  return res"}
{"task_id": "JavaScript/53", "prompt": "// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n", "canonical_solution": "}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// >>> add(2,"}
{"task_id": "JavaScript/54", "prompt": "//   Check if two words have the same characters.\n//   >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n//   true\n//   >>> sameChars('abcd', 'dddddddabc')\n//   true\n//   >>> sameChars('dddddddabc', 'abcd')\n//   true\n//   >>> sameChars('eabcd', 'dddddddabc')\n//   false\n//   >>> sameChars('abcd', 'dddddddabce')\n//   false\n//   >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n//   false\n// const sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n", "canonical_solution": "}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "//   Check if two words have the same characters.\n//   >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n//   true\n//   >>> sameChars('abcd', 'dddddddabc')\n//   true\n//   >>> sameChars('dddddddabc', 'abcd')\n//   true\n//   >>> sameChars('eabcd', 'dddddddabc')\n//   false\n//   >>> sameChars('abcd', 'dddddddabce')\n//   false\n//   >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n//   false\n// const sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n//   Check if two strings have the same length.\n//   >>> sameLength('eabcd', 'dddddddabc')\n//   true\n//   >>> sameLength('abcd', 'dddddddabc')\n//   false\n//   >>> sameLength('abcd', 'dddddddabce')\n//   false\n//   >>> sameLength('eabcdzzzz', 'dddzzzzzzzddddabc')\n//   false\n// const sameLength = (s0, s1) => {\n  return s0.length === s1.length;\n}\n\n//   Check if two strings have the same characters.\n//   >>> sameChars('eabcd', 'dddddddabc')\n//   true\n//   >>> sameChars('abcd', 'dddddddabc')\n//   false\n//   >>> sameChars('abcd', 'dddddddabce')\n//   false\n// const sameChars = (s0, s1) => {\n  return JSON.stringify(new Set(s0).sort()) === JSON.stringify(new Set(s1).sort());\n}\n\n//   Check if two words have the same characters.\n//   >>> sameChars('eabcd', 'dddddddabc')\n//   true\n//   >>> sameChars('abcd', 'dddddddabc')\n//   false\n// const sameChars = (s0, s1) => {\n  return JSON.stringify(new Set(s0).sort()) === JSON.stringify(new Set(s1).sort());\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "// Return n-th Fibonacci number.\n//   >>> fib(10)\n//   55\n//   >>> fib(1)\n//   1\n//   >>> fib(8)\n//   21\n// const fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n", "canonical_solution": "    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "// Return n-th Fibonacci number.\n//   >>> fib(10)\n//   55\n//   >>> fib(1)\n//   1\n//   >>> fib(8)\n//   21\n// const fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n// Return the n-th Fibonacci number.\n//   >>> fib(10)\n//   55\n//   >>> fib(1)\n//   1\n//   >>> fib(8)\n//   21\n// const fib = (n) => {\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n}\n\n// Return the n-th Fibonacci number.\n//   >>> fib(10)\n//   55\n//   >>> fib(1)\n//   1\n//   >>> fib(8)\n//   21\n// const fib = (n) => {\n  const n = parseInt(n);\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i < n; i++) {\n    a = b;\n    b = a + b;\n  }\n  return a;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "// brackets is a string of \"<\" and \">\".\n//   return false if every opening bracket has a corresponding closing bracket.\n// \n//   >>> correctBracketing(\"<\")\n//   false\n//   >>> correctBracketing(\"<>\")\n//   false\n//   >>> correctBracketing(\"<<><>>\")\n//   false\n//   >>> correctBracketing(\"><<>\")\n//   false\n// const correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "// brackets is a string of \"<\" and \">\".\n//   return false if every opening bracket has a corresponding closing bracket.\n// \n//   >>> correctBracketing(\"<\")\n//   false\n//   >>> correctBracketing(\"<>\")\n//   false\n//   >>> correctBracketing(\"<<><>>\")\n//   false\n//   >>> correctBracketing(\"><<>\")\n//   false\n// const correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n// \n// @param {string} brackets\n// \n// @return {string}\n// \n// @explanation\n// Given a string brackets, return brackets string with nested brackets removed.\n// \n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n//   >>> removeNestedBrackets(\"<><>\")\n//   '<><>'\n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n// \n// @complexity\n// O(1) time.\n// \n// @strawman\n// Removes all nested brackets from a string.\n// \n// @see\n// [http://stackoverflow.com/a/15018963/383592](http://stackoverflow.com/a/15018963/383592)\n// \n// @example\n// \n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n//   >>> removeNestedBrackets(\"<><>\")\n//   '<><>'\n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n// \n// @complexity\n// O(1) time.\n// \n// @strawman\n// Removes all nested brackets from a string.\n// \n// @see\n// [http://stackoverflow.com/a/15018963/383592](http://stackoverflow.com/a/15018963/383592)\n// \n// @example\n// \n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n//   >>> removeNestedBrackets(\"<><>\")\n//   '<><>'\n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n// \n// @complexity\n// O(1) time.\n// \n// @strawman\n// Removes all nested brackets from a string.\n// \n// @see\n// [http://stackoverflow.com/a/15018963/383592](http://stackoverflow.com/a/15018963/383592)\n// \n// @example\n// \n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n//   >>> removeNestedBrackets(\"<><>\")\n//   '<><>'\n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n// \n// @complexity\n// O(1) time.\n// \n// @strawman\n// Removes all nested brackets from a string.\n// \n// @see\n// [http://stackoverflow.com/a/15018963/383592](http://stackoverflow.com/a/15018963/383592)\n// \n// @example\n// \n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n//   >>> removeNestedBrackets(\"<><>\")\n//   '<><>'\n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n// \n// @complexity\n// O(1) time.\n// \n// @strawman\n// Removes all nested brackets from a string.\n// \n// @see\n// [http://stackoverflow.com/a/15018963/383592](http://stackoverflow.com/a/15018963/383592)\n// \n// @example\n// \n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n//   >>> removeNestedBrackets(\"<><>\")\n//   '<><>'\n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n// \n// @complexity\n// O(1) time.\n// \n// @strawman\n// Removes all nested brackets from a string.\n// \n// @see\n// [http://stackoverflow.com/a/15018963/383592](http://stackoverflow.com/a/15018963/383592)\n// \n// @example\n// \n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n//   >>> removeNestedBrackets(\"<><>\")\n//   '<><>'\n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n// \n// @complexity\n// O(1) time.\n// \n// @strawman\n// Removes all nested brackets from a string.\n// \n// @see\n// [http://stackoverflow.com/a/15018963/383592](http://stackoverflow.com/a/15018963/383592)\n// \n// @example\n// \n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n//   >>> removeNestedBrackets(\"<><>\")\n//   '<><>'\n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n// \n// @complexity\n// O(1) time.\n// \n// @strawman\n// Removes all nested brackets from a string.\n// \n// @see\n// [http://stackoverflow.com/a/15018963/383592](http://stackoverflow.com/a/15018963/383592)\n// \n// @example\n// \n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n//   >>> removeNestedBrackets(\"<><>\")\n//   '<><>'\n//   >>> removeNestedBrackets(\"<>\")\n//   '<>'\n// "}
{"task_id": "JavaScript/57", "prompt": "// Return true is list elements are monotonically increasing or decreasing.\n//   >>> monotonic([1, 2, 4, 20])\n//   true\n//   >>> monotonic([1, 20, 4, 10])\n//   false\n//   >>> monotonic([4, 1, 0, -10])\n//   true\n// const monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n", "canonical_solution": "      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "// Return true is list elements are monotonically increasing or decreasing.\n//   >>> monotonic([1, 2, 4, 20])\n//   true\n//   >>> monotonic([1, 20, 4, 10])\n//   false\n//   >>> monotonic([4, 1, 0, -10])\n//   true\n// const monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return sort1 === sort2;\n  } else {\n    return false;\n  }\n}\n\nfunction * fib() {\n  var a = 0;\n  var b = 1;\n  var counter = 0;\n  while (true) {\n    yield a;\n    yield b;\n    var c = a + b;\n    a = b;\n    b = c;\n    counter += 1;\n  }\n}\n\nfunction * fib2() {\n  var a = 0;\n  var b = 1;\n  var c = 0;\n  while (true) {\n    yield a;\n    yield b;\n    var d = a + b;\n    a = b;\n    b = c;\n    c = d;\n  }\n}\n\nfunction * fib3() {\n  var a = 0;\n  var b = 1;\n  var c = 0;\n  while (true) {\n    yield a;\n    yield b;\n    var d = a + b;\n    a = b;\n    b = c;\n    c = d;\n  }\n}\n\nfunction * fib4() {\n  var a = 0;\n  var b = 1;\n  var c = 0;\n  var d = 0;\n  while (true) {\n    yield a;\n    yield b;\n    var e = a + b;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n  }\n}\n\nfunction * fib5() {\n  var a = 0;\n  var b = 1;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  while (true) {\n    yield a;\n    yield b;\n    var f = a + b;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = f;\n  }\n}\n\nfunction * fib6() {\n  var a = 0;\n  var b = 1;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  while (true) {\n    yield a;\n    yield b;\n    var g = a + b;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = f;\n    f = g;\n  }\n}\n\nfunction * fib7() {\n  var a = 0;\n  var b = 1;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  while (true) {\n    yield a;\n    yield b;\n    var h = a + b;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = f;\n    f = g;\n    g = h;\n  }\n}\n\nfunction * fib8() {\n  var a = 0;\n  var b = 1;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  while (true) {\n    yield a;\n    yield b;\n    var i = a + b;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = f;\n    f = g;\n    g = h;\n    h = i;\n  }\n}\n\nfunction * fib9() {\n  var a = 0;\n  var b = 1;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  while (true) {\n    yield a;\n    yield b;\n    var j = a + b;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = f;\n    f = g;\n    g = h;\n    h = i;\n    i = j;\n  }\n}\n\nfunction * fib10() {\n  var a = 0;\n  var b = 1;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  while (true) {\n    yield a;\n    yield b;\n    var k = a + b;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = f;\n    f = g;\n    g = h;\n    h = i;\n    i = j;\n    j = k;\n  }\n}\n\nfunction * fib11() {\n  var a = 0;\n  var b = 1;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  while (true) {\n    yield a;\n    yield b;\n    var l = a + b;\n    a = b;\n    b = c;\n    c = d;\n    d = e;\n    e = f;\n    f = g;\n    g = h;\n    h = i;\n    i = j;\n    j = k;\n    k = l;\n"}
{"task_id": "JavaScript/58", "prompt": "// Return sorted unique common elements for two lists.\n//   >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n//   [1, 5, 653]\n//   >>> common([5, 3, 2, 8], [3, 2])\n//   [2, 3]\n// \n// const common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n", "canonical_solution": "      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "// Return sorted unique common elements for two lists.\n//   >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n//   [1, 5, 653]\n//   >>> common([5, 3, 2, 8], [3, 2])\n//   [2, 3]\n// \n// const common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 === e2)\n        ret.add(e1);\n  return Array.from(ret);\n}\n\nconsole.log(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]));\nconsole.log(common([5, 3, 2, 8], [3, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n//   >>> largestPrimeFactor(13195)\n//   29\n//   >>> largestPrimeFactor(2048)\n//   2\n// const largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n", "canonical_solution": "  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n//   >>> largestPrimeFactor(13195)\n//   29\n//   >>> largestPrimeFactor(2048)\n//   2\n// const largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  };\n  var largestPrimeFactor = function (n) {\n    var max = 1;\n    var k = n;\n    while (k!= 1) {\n      if (isPrime(k))\n        max = k;\n      k = k * 2;\n    }\n    return max;\n  };\n  return largestPrimeFactor(n);\n}\n\n// Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n//   >>> smallestPrimeFactor(13195)\n//   29\n//   >>> smallestPrimeFactor(2048)\n//   2\n// const smallestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  };\n  var smallestPrimeFactor = function (n) {\n    var min = n;\n    var k = n;\n    while (k!= 1) {\n      if (isPrime(k))\n        min = k;\n      k = k * 2;\n    }\n    return min;\n  };\n  return smallestPrimeFactor(n);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "// sumToN is a function that sums numbers from 1 to n.\n//   >>> sumToN(30)\n//   465\n//   >>> sumToN(100)\n//   5050\n//   >>> sumToN(5)\n//   15\n//   >>> sumToN(10)\n//   55\n//   >>> sumToN(1)\n//   1\n// const sumToN = (n) => {\n  return n * (n + 1) / 2;\n", "canonical_solution": "}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// sumToN is a function that sums numbers from 1 to n.\n//   >>> sumToN(30)\n//   465\n//   >>> sumToN(100)\n//   5050\n//   >>> sumToN(5)\n//   15\n//   >>> sumToN(10)\n//   55\n//   >>> sumToN(1)\n//   1\n// const sumToN = (n) => {\n  return n * (n + 1) / 2;\n  // return (n * (n + 1) / 2) | 0;\n}\n\n// sumToN2 is a function that sums numbers from 1 to n, including n.\n//   >>> sumToN2(30)\n//   465\n//   >>> sumToN2(100)\n//   5050\n//   >>> sumToN2(5)\n//   15\n//   >>> sumToN2(10)\n//   55\n//   >>> sumToN2(1)\n//   1\n// const sumToN2 = (n) => {\n  return (n * (n + 1) / 2) + n;\n  // return (n * (n + 1) / 2) + n;\n}\n\n// sumToN3 is a function that sums numbers from 1 to n, including n and n+1.\n//   >>> sumToN3(30)\n//   465\n//   >>> sumToN3(100)\n//   5050\n//   >>> sumToN3(5)\n//   15\n//   >>> sumToN3(10)\n//   55\n//   >>> sumToN3(1)\n//   1\n// const sumToN3 = (n) => {\n  return (n * (n + 1) / 2) + (n + 1);\n  // return (n * (n + 1) / 2) + (n + 1);\n}\n\n// sumToN4 is a function that sums numbers from 1 to n, including n, n+1, and n+2.\n//   >>> sumToN4(30)\n//   465\n//   >>> sumToN4(100)\n//   5050\n//   >>> sumToN4(5)\n//   15\n//   >>> sumToN4(10)\n//   55\n//   >>> sumToN4(1)\n//   1\n// const sumToN4 = (n) => {\n  return (n * (n + 1) / 2) + (n + 1) + (n + 2);\n  // return (n * (n + 1) / 2) + (n + 1) + (n + 2);\n}\n\n// sumToN5 is a function that sums numbers from 1 to n, including n, n+1, n+2, and n+3.\n//   >>> sumToN5(30)\n//   465\n//   >>> sumToN5(100)\n//   5050\n//   >>> sumToN5(5)\n//   15\n//   >>> sumToN5(10)\n//   55\n//   >>> sumToN5(1)\n//   1\n// const sumToN5 = (n) => {\n  return (n * (n + 1) / 2) + (n + 1) + (n + 2) + (n + 3);\n  // return (n * (n + 1) / 2) + (n + 1) + (n + 2) + (n + 3);\n}\n\n// sumToN6 is a function that sums numbers from 1 to n, including n, n+1, n+2, n+3, and n+4.\n//   >>> sumToN6(30)\n//   465\n//   >>> sumToN6(100)\n//   5050\n//   >>> sumToN6(5)\n//   15\n//   >>> sumToN6(10)\n//   55\n//   >>> sumToN6(1)\n//   1\n// const sumToN6 = (n) => {\n  return (n * (n + 1) / 2) + (n + 1) + (n + 2) + (n + 3) + (n + 4);\n  // return (n * (n + 1) / 2) + (n + 1) + (n + 2) + (n + 3) + (n + 4);\n}\n\n// sumToN7 is a function that sums numbers from 1 to n, including n, n+1, n+2, n+3, n+4, and n+5.\n//   >>> sumToN7(30)\n//   465\n//   >>> sumToN7(100)\n//   5050\n//   >>> sumToN7(5)\n//   15\n//   >>> sumToN7(10)\n//   55\n//   >>> sumToN7(1)\n//   1\n// const sumToN7 = (n) => {\n  return (n * (n + 1) / 2) + (n + 1) + (n + 2) + (n + 3) + (n + 4) + (n + 5);\n  // return (n * (n + 1) / 2) + (n + 1) + (n + 2) + (n + 3) + (n + 4) + (n + 5);\n}\n\n// sumToN8 is a function that sums numbers from 1 to n, including n, n+1, n+2, n+3, n+4, n+5, and n+6.\n//   >>> sumToN8(30)\n//   465\n//   >>> sumToN8(100)\n//   5050\n//   >>> sumToN8(5)\n//   15\n//   >>> sumToN8(10)\n//   55\n//   >>> sumToN8(1)\n//   1\n// const sumToN8 = (n) => {\n  return (n * (n + 1) / 2) + (n + 1) + (n + 2) + (n + 3) + (n + 4) + (n + 5) + (n + 6);\n  // return (n * (n + 1) / 2) + (n + 1) + (n + 2) + (n + 3) + (n + 4) + (n + 5) + (n + 6);\n}\n\n// sumToN9 is a function that sums numbers from 1 to n, including n, n+1, n+2, n+3, n+4, n+5, n+6, and n+7.\n//   >>> sumToN9(30)\n//   465\n//   >>> sumTo"}
{"task_id": "JavaScript/61", "prompt": "// brackets is a string of \"(\" and \")\".\n//   return true if every opening bracket has a corresponding closing bracket.\n// \n//   >>> correctBracketing(\"(\")\n//   false\n//   >>> correctBracketing(\"()\")\n//   true\n//   >>> correctBracketing(\"(()())\")\n//   true\n//   >>> correctBracketing(\")(()\")\n//   false\n// const correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "// brackets is a string of \"(\" and \")\".\n//   return true if every opening bracket has a corresponding closing bracket.\n// \n//   >>> correctBracketing(\"(\")\n//   false\n//   >>> correctBracketing(\"()\")\n//   true\n//   >>> correctBracketing(\"(()())\")\n//   true\n//   >>> correctBracketing(\")(()\")\n//   false\n// const correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "// xs represent coefficients of a polynomial.\n//   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n//    Return derivative of this polynomial in the same form.\n//   >>> derivative([3, 1, 2, 4, 5])\n//   [1, 4, 12, 20]\n//   >>> derivative([1, 2, 3])\n//   [2, 6]\n// const derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n", "canonical_solution": "}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// xs represent coefficients of a polynomial.\n//   xs[0] + xs[1] * x + xs[2] * x^2 +....\n//    Return derivative of this polynomial in the same form.\n//   >>> derivative([3, 1, 2, 4, 5])\n//   [1, 4, 12, 20]\n//   >>> derivative([1, 2, 3])\n//   [2, 6]\n// const derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n}\n\n// const dxs = derivative([3, 1, 2, 4, 5]);\n// const ys = [3, 1, 2, 4, 5];\n// const n = dxs.length;\n// const derivative = (ys) => {\n  // ys.forEach((x, i) => {\n  //   ys[i] = dxs[i] * x;\n  // });\n  // return ys;\n// };\n\n// console.log(derivative([3, 1, 2, 4, 5]));\n\n// const derivative = (xs) => {\n  // return xs.map((x, i) => x * i);\n};\n\n// const derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n};\n\nconsole.log(derivative([3, 1, 2, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fibfib(0) == 0\n//   fibfib(1) == 0\n//   fibfib(2) == 1\n//   fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n//   Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n//   >>> fibfib(1)\n//   0\n//   >>> fibfib(5)\n//   4\n//   >>> fibfib(8)\n//   24\n// const fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n", "canonical_solution": "    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fibfib(0) == 0\n//   fibfib(1) == 0\n//   fibfib(2) == 1\n//   fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n//   Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n//   >>> fibfib(1)\n//   0\n//   >>> fibfib(5)\n//   4\n//   >>> fibfib(8)\n//   24\n// const fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  //return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconsole.log(fibfib(0));\nconsole.log(fibfib(1));\nconsole.log(fibfib(2));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\nconsole.log(fibfib(100000000));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "// Write a function vowelsCount which takes a string representing\n//   a word as input and returns the number of vowels in the string.\n//   Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n//   vowel, but only when it is at the end of the given word.\n// \n//   Example:\n//   >>> vowelsCount(\"abcde\")\n//   2\n//   >>> vowelsCount(\"ACEDY\")\n//   3\n// const vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n", "canonical_solution": "  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "// Write a function vowelsCount which takes a string representing\n//   a word as input and returns the number of vowels in the string.\n//   Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n//   vowel, but only when it is at the end of the given word.\n// \n//   Example:\n//   >>> vowelsCount(\"abcde\")\n//   2\n//   >>> vowelsCount(\"ACEDY\")\n//   3\n// const vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_vowels;\n}\n\n// Test the function\nvowelsCount(\"abcde\")\n// Expected output: 2\n// Actual output: 2\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "// Circular shift the digits of the integer x, shift the digits right by shift\n//   and return the result as a string.\n//   If shift > number of digits, return digits reversed.\n//   >>> circularShift(12, 1)\n//   \"21\"\n//   >>> circularShift(12, 2)\n//   \"12\"\n// const circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n", "canonical_solution": "  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "// Circular shift the digits of the integer x, shift the digits right by shift\n//   and return the result as a string.\n//   If shift > number of digits, return digits reversed.\n//   >>> circularShift(12, 1)\n//   \"21\"\n//   >>> circularShift(12, 2)\n//   \"12\"\n// const circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else {\n    const result = s.substr(0, shift);\n    const rightShift = s.length - shift;\n    return result + s.substr(shift, rightShift);\n  }\n//   return x;\n// }\n\n// Convert a base 10 number to a base X number,\n//   using the digits of the given number.\n//   The number must be at least the number of digits of the target base.\n//   >>> convertBase(12, 10, 2)\n//   \"21\"\n//   >>> convertBase(12, 10, 3)\n//   \"210\"\n// const convertBase = (num, base, digits) => {\n  return num.toString(base).split('').reverse().join('');\n// }\n\n// Convert a base X number to a base 10 number,\n//   using the digits of the given number.\n//   The number must be at least the number of digits of the target base.\n//   >>> convertBase(210, 2, 10)\n//   \"21\"\n// const convertBase = (num, base, digits) => {\n  return num.toString(base).split('').join('');\n// }\n\n// The number of digits in the alphabet (A-Z, 0-9)\n//   >>> alphabetSize\n//   26\n// const alphabetSize = () => {\n  return 52;\n// }\n\n// The number of characters in the alphabet\n//   >>> alphabetSize\n//   26\n// const alphabetSize = () => {\n  return 52;\n// }\n\n// The alphabet used to encode the digits of the base X number\n//   >>> alphabet\n//   \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n// const alphabet = () => {\n  return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n// }\n\n// The number of characters in the alphabet\n//   >>> alphabetSize\n//   26\n// const alphabetSize = () => {\n  return 52;\n// }\n\n// The alphabet used to encode the digits of the base X number\n//   >>> alphabet\n//   \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n// const alphabet = () => {\n  return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n// }\n\n// Convert a base X number to a base 10 number,\n//   using the digits of the given number.\n//   The number must be at least the number of digits of the target base.\n//   >>> convertBase(21, 10, 2)\n//   \"21\"\n// const convertBase = (num, base, digits) => {\n  return num.toString(base).split('').join('');\n// }\n\n// Convert a base 10 number to a base X number,\n//   using the digits of the given number.\n//   The number must be at least the number of digits of the target base.\n//   >>> convertBase(21, 2, 10)\n//   \"21\"\n// const convertBase = (num, base, digits) => {\n  return num.toString(base).split('').reverse().join('');\n// }\n\n// Convert a base X number to a base 10 number,\n//   using the digits of the given number.\n//   The number must be at least the number of digits of the target base.\n//   >>> convertBase(210, 2, 10)\n//   \"21\"\n// const convertBase = (num, base, digits) => {\n  return num.toString(base).split('').reverse().join('');\n// }\n\n// Convert a base X number to a base 10 number,\n//   using the digits of the given number.\n//   The number must be at least the number of digits of the target base.\n//   >>> convertBase(210, 3, 10)\n//   \"210\"\n// const convertBase = (num, base, digits) => {\n  return num.toString(base).split('').join('');\n// }\n\n// Convert a base X number to a base 10 number,\n//   using the digits of the given number.\n//   The number must be at least the number of digits of the target base.\n//   >>> convertBase(21, 10, 3)\n//   \"21\"\n// const convertBase = (num, base, digits) => {\n  return num.toString(base).split('').join('');\n// }\n\n// Convert a base X number to a base 10 number,\n//   using the digits of the given number.\n//   The number must be at least the number of digits of the target base.\n//   >>> convertBase(21, 3, 10)\n//   \"21\"\n// const convertBase = (num, base, digits) => {\n  return num.toString(base).split('').reverse().join('');\n// }\n\n// Convert a base X number to a base 10 number,\n//   using the digits of the given number.\n//   The number must be at least the number of digits of the target base.\n//   >>> convertBase(210, 3, 10)\n//   \"210\"\n// const convertBase = (num, base, digits) => {\n  return num.toString(base).split('').reverse().join('');\n// }\n\n// Convert a base X number to a base 10 number,\n//   using the digits of the given number.\n//   The number must be at least the number of digits of the target base.\n//   >>> convertBase(210, 2, 3)\n//   \"210\"\n// const convertBase = (num, base, digits) => {\n  return num.toString(base).split('').join('');\n// }\n\n// Convert a base X number to a base 10 number,\n//   using the digits of the given number.\n//   The number must be at least the number of digits of the target base.\n//   >>> convertBase(210, 2, 2)\n//   \"210\"\n// const convertBase = (num, base, digits) => {\n  return num.toString("}
{"task_id": "JavaScript/66", "prompt": "// Task\n//   Write a function that takes a string as input and returns the sum of the upper characters only'\n//   ASCII codes.\n// \n//   Examples:\n//       digitSum(\"\") => 0\n//       digitSum(\"abAB\") => 131\n//       digitSum(\"abcCd\") => 67\n//       digitSum(\"helloE\") => 69\n//       digitSum(\"woArBld\") => 131\n//       digitSum(\"aAaaaXa\") => 153\n// const digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n", "canonical_solution": "    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "// Task\n//   Write a function that takes a string as input and returns the sum of the upper characters only'\n//   ASCII codes.\n// \n//   Examples:\n//       digitSum(\"\") => 0\n//       digitSum(\"abAB\") => 131\n//       digitSum(\"abcCd\") => 67\n//       digitSum(\"helloE\") => 69\n//       digitSum(\"woArBld\") => 131\n//       digitSum(\"aAaaaXa\") => 153\n// const digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91)\n  }, 0)\n}\n\n// Problem\n//   Write a function that takes a string as input and returns the sum of the lower characters only'\n//   ASCII codes.\n// \n//   Examples:\n//       digitSum(\"\") => 0\n//       digitSum(\"abAB\") => 10\n//       digitSum(\"abcCd\") => 34\n//       digitSum(\"helloE\") => 58\n//       digitSum(\"woArBld\") => 10\n//       digitSum(\"aAaaaXa\") => 42\n// const digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char < 64)\n  }, 0)\n}\n\n// Problem\n//   Write a function that takes a string as input and returns the sum of the characters'\n//   ASCII codes.\n// \n//   Examples:\n//       digitSum(\"\") => 0\n//       digitSum(\"abAB\") => 65\n//       digitSum(\"abcCd\") => 67\n//       digitSum(\"helloE\") => 97\n//       digitSum(\"woArBld\") => 65\n//       digitSum(\"aAaaaXa\") => 121\n// const digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char\n  }, 0)\n}\n\n// Problem\n//   Write a function that takes a string as input and returns the sum of the ASCII codes.\n// \n//   Examples:\n//       digitSum(\"\") => 0\n//       digitSum(\"abAB\") => 65\n//       digitSum(\"abcCd\") => 67\n//       digitSum(\"helloE\") => 97\n//       digitSum(\"woArBld\") => 65\n//       digitSum(\"aAaaaXa\") => 121\n// const digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + ord_char\n  }, 0)\n}\n\n// Problem\n//   Write a function that takes a string as input and returns the sum of the lowercase ASCII codes.\n// \n//   Examples:\n//       digitSum(\"\") => 0\n//       digitSum(\"abAB\") => 65\n//       digitSum(\"abcCd\") => 67\n//       digitSum(\"helloE\") => 97\n//       digitSum(\"woArBld\") => 65\n//       digitSum(\"aAaaaXa\") => 121\n// const digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char < 64)\n  }, 0)\n}\n\n// Problem\n//   Write a function that takes a string as input and returns the sum of the uppercase ASCII codes.\n// \n//   Examples:\n//       digitSum(\"\") => 0\n//       digitSum(\"abAB\") => 65\n//       digitSum(\"abcCd\") => 67\n//       digitSum(\"helloE\") => 97\n//       digitSum(\"woArBld\") => 65\n//       digitSum(\"aAaaaXa\") => 121\n// const digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91)\n  }, 0)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "//   In this task, you will be given a string that represents a number of apples and oranges\n//   that are distributed in a basket of fruit this basket contains\n//   apples, oranges, and mango fruits. Given the string that represents the total number of\n//   the oranges and apples and an integer that represent the total number of the fruits\n//   in the basket return the number of the mango fruits in the basket.\n//   for examble:\n//   fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n//   fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n//   fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n//   fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n// const fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n", "canonical_solution": "      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "//   In this task, you will be given a string that represents a number of apples and oranges\n//   that are distributed in a basket of fruit this basket contains\n//   apples, oranges, and mango fruits. Given the string that represents the total number of\n//   the oranges and apples and an integer that represent the total number of the fruits\n//   in the basket return the number of the mango fruits in the basket.\n//   for examble:\n//   fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n//   fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n//   fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n//   fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n// const fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(i);\n  const [n, m] = [...lis,...lis.slice(0, lis.length - 1)].sort();\n  const res = m - n;\n  return res;\n}\n\nvar apple = \"5 apples and 6 oranges\";\nvar orange = \"0 apples and 1 oranges\";\nvar mango = \"2 apples and 3 oranges\";\n\nconsole.log(appleDistribution(apple, 18));\nconsole.log(appleDistribution(apple, 19));\nconsole.log(appleDistribution(apple, 120));\nconsole.log(appleDistribution(apple, 121));\nconsole.log(appleDistribution(apple, 120));\n\nconsole.log(orangeDistribution(orange, 3));\nconsole.log(orangeDistribution(orange, 4));\nconsole.log(orangeDistribution(orange, 5));\nconsole.log(orangeDistribution(orange, 6));\nconsole.log(orangeDistribution(orange, 7));\nconsole.log(orangeDistribution(orange, 8));\n\nconsole.log(mangoDistribution(mango, 99));\nconsole.log(mangoDistribution(mango, 100));\nconsole.log(mangoDistribution(mango, 101));\nconsole.log(mangoDistribution(mango, 102));\nconsole.log(mangoDistribution(mango, 103));\nconsole.log(mangoDistribution(mango, 104));\nconsole.log(mangoDistribution(mango, 105));\nconsole.log(mangoDistribution(mango, 106));\nconsole.log(mangoDistribution(mango, 107));\nconsole.log(mangoDistribution(mango, 108));\nconsole.log(mangoDistribution(mango, 109));\nconsole.log(mangoDistribution(mango, 110));\nconsole.log(mangoDistribution(mango, 111));\nconsole.log(mangoDistribution(mango, 112));\nconsole.log(mangoDistribution(mango, 113));\nconsole.log(mangoDistribution(mango, 114));\nconsole.log(mangoDistribution(mango, 115));\nconsole.log(mangoDistribution(mango, 116));\nconsole.log(mangoDistribution(mango, 117));\nconsole.log(mangoDistribution(mango, 118));\nconsole.log(mangoDistribution(mango, 119));\nconsole.log(mangoDistribution(mango, 120));\nconsole.log(mangoDistribution(mango, 121));\nconsole.log(mangoDistribution(mango, 122));\nconsole.log(mangoDistribution(mango, 123));\nconsole.log(mangoDistribution(mango, 124));\nconsole.log(mangoDistribution(mango, 125));\nconsole.log(mangoDistribution(mango, 126));\nconsole.log(mangoDistribution(mango, 127));\nconsole.log(mangoDistribution(mango, 128));\nconsole.log(mangoDistribution(mango, 129));\nconsole.log(mangoDistribution(mango, 130));\nconsole.log(mangoDistribution(mango, 131));\nconsole.log(mangoDistribution(mango, 132));\nconsole.log(mangoDistribution(mango, 133));\nconsole.log(mangoDistribution(mango, 134));\nconsole.log(mangoDistribution(mango, 135));\nconsole.log(mangoDistribution(mango, 136));\nconsole.log(mangoDistribution(mango, 137));\nconsole.log(mangoDistribution(mango, 138));\nconsole.log(mangoDistribution(mango, 139));\nconsole.log(mangoDistribution(mango, 140));\nconsole.log(mangoDistribution(mango, 141));\nconsole.log(mangoDistribution(mango, 142));\nconsole.log(mangoDistribution(mango, 143));\nconsole.log(mangoDistribution(mango, 144));\nconsole.log(mangoDistribution(mango, 145));\nconsole.log(mangoDistribution(mango, 146));\nconsole.log(mangoDistribution(mango, 147));\nconsole.log(mangoDistribution(mango, 148));\nconsole.log(mangoDistribution(mango, 149));\nconsole.log(mangoDistribution(mango, 150));\nconsole.log(mangoDistribution(mango, 151));\nconsole.log(mangoDistribution(mango, 152));\nconsole.log(mangoDistribution(mango, 153));\nconsole.log(mangoDistribution(mango, 154));\nconsole.log(mangoDistribution(mango, 155));\nconsole.log(mangoDistribution(mango, 156));\nconsole.log(mangoDistribution(mango, 157));\nconsole.log(mangoDistribution(mango, 158));\nconsole.log(mangoDistribution(mango, 159));\nconsole.log(mangoDistribution(mango, 160));\nconsole.log(mangoDistribution(mango, 161));\nconsole.log(mangoDistribution(mango, 162));\nconsole.log(mangoDistribution(mango, 163));\nconsole.log(mangoDistribution(mango, 164));\nconsole.log(mangoDistribution(mango, 165));\nconsole.log(mangoDistribution(mango, 166));\nconsole.log(mangoDistribution(mango, 167));\nconsole.log(mangoDistribution(mango, 168));\nconsole.log(mangoDistribution(mango, 169));\nconsole.log("}
{"task_id": "JavaScript/68", "prompt": "//   \"Given an array representing a branch of a tree that has non-negative integer nodes\n//   your task is to pluck one of the nodes and return it.\n//   The plucked node should be the node with the smallest even value.\n//   If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// \n//   The plucked node should be returned in a list, [ smalest_value, its index ],\n//   If there are no even values or the given array is empty, return [].\n// \n//   Example 1:\n//       Input: [4,2,3]\n//       Output: [2, 1]\n//       Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \n//   Example 2:\n//       Input: [1,2,3]\n//       Output: [2, 1]\n//       Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \n//   Example 3:\n//       Input: []\n//       Output: []\n// \n//   Example 4:\n//       Input: [5, 0, 3, 0, 4, 2]\n//       Output: [0, 1]\n//       Explanation: 0 is the smallest value, but  there are two zeros,\n//                    so we will choose the first zero, which has the smallest index.\n// \n//   Constraints:\n//       * 1 <= nodes.length <= 10000\n//       * 0 <= node.value\n// const pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n", "canonical_solution": "  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "//   \"Given an array representing a branch of a tree that has non-negative integer nodes\n//   your task is to pluck one of the nodes and return it.\n//   The plucked node should be the node with the smallest even value.\n//   If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// \n//   The plucked node should be returned in a list, [ smalest_value, its index ],\n//   If there are no even values or the given array is empty, return [].\n// \n//   Example 1:\n//       Input: [4,2,3]\n//       Output: [2, 1]\n//       Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \n//   Example 2:\n//       Input: [1,2,3]\n//       Output: [2, 1]\n//       Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \n//   Example 3:\n//       Input: []\n//       Output: []\n// \n//   Example 4:\n//       Input: [5, 0, 3, 0, 4, 2]\n//       Output: [0, 1]\n//       Explanation: 0 is the smallest value, but  there are two zeros,\n//                    so we will choose the first zero, which has the smallest index.\n// \n//   Constraints:\n//       * 1 <= nodes.length <= 10000\n//       * 0 <= node.value\n// const pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  return evens.length? evens[0] : arr[0];\n  // return evens.length? evens[0] : arr[0];\n// };\n// \n// console.log(pluck([4,2,3]));\n// console.log(pluck([1,2,3]));\n// console.log(pluck([]));\n// console.log(pluck([5,0,3,0,4,2]));\n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n"}
{"task_id": "JavaScript/69", "prompt": "//   You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n//   zero, and has a frequency greater than or equal to the value of the integer itself.\n//   The frequency of an integer is the number of times it appears in the list.\n//   If no such a value exist, return -1.\n//   Examples:\n//       search([4, 1, 2, 2, 3, 1])) == 2\n//       search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n//       search([5, 5, 4, 4, 4])) == -1\n// const search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n", "canonical_solution": "  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "//   You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n//   zero, and has a frequency greater than or equal to the value of the integer itself.\n//   The frequency of an integer is the number of times it appears in the list.\n//   If no such a value exist, return -1.\n//   Examples:\n//       search([4, 1, 2, 2, 3, 1])) == 2\n//       search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n//       search([5, 5, 4, 4, 4])) == -1\n// const search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (const i of lst)\n    if (frq[i] > frq[ans])\n      ans = i;\n  return ans;\n}\n\n//   Given a list of positive integers, return the greatest integer that is not a substring of a larger integer.\n//   If there is no such integer, return -1.\n//   Examples:\n//       search([1, 2, 3, 4, 5, 6])) == 4\n//       search([1, 2, 3, 4, 5, 6, 7, 8, 9])) == -1\n// const search = (lst) => {\n  var ans = -1;\n  for (const i of lst)\n    for (const j of lst)\n      if (i >= j && j > ans)\n        ans = j;\n  return ans;\n}\n\n//   Given a list of positive integers, return the largest integer that is less than the number of the smallest\n//   number in the list. If there is no such integer, return -1.\n//   Examples:\n//       search([1, 2, 3, 4, 5, 6])) == 2\n//       search([1, 2, 3, 4, 5, 6, 7, 8, 9])) == 7\n// const search = (lst) => {\n  var ans = -1;\n  for (const i of lst)\n    for (const j of lst)\n      if (i <= j && j < ans)\n        ans = j;\n  return ans;\n}\n\n//   Given a list of positive integers, return the largest integer that is less than the sum of the smallest\n//   numbers in the list. If there is no such integer, return -1.\n//   Examples:\n//       search([1, 2, 3, 4, 5, 6])) == 5\n//       search([1, 2, 3, 4, 5, 6, 7, 8, 9])) == 9\n// const search = (lst) => {\n  var ans = -1;\n  for (const i of lst)\n    for (const j of lst)\n      if (i <= j && j < ans)\n        ans = j;\n  return ans;\n}\n\n//   Given a list of positive integers, return the smallest number that is greater than the number of the largest\n//   number in the list. If there is no such integer, return -1.\n//   Examples:\n//       search([1, 2, 3, 4, 5, 6])) == 5\n//       search([1, 2, 3, 4, 5, 6, 7, 8, 9])) == 9\n// const search = (lst) => {\n  var ans = -1;\n  for (const i of lst)\n    for (const j of lst)\n      if (i > j && j > ans)\n        ans = j;\n  return ans;\n}\n\n//   Given a list of positive integers, return the smallest number that is greater than the sum of the largest\n//   numbers in the list. If there is no such integer, return -1.\n//   Examples:\n//       search([1, 2, 3, 4, 5, 6])) == 6\n//       search([1, 2, 3, 4, 5, 6, 7, 8, 9])) == 7\n// const search = (lst) => {\n  var ans = -1;\n  for (const i of lst)\n    for (const j of lst)\n      if (i > j && j > ans)\n        ans = j;\n  return ans;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "//   Given list of integers, return list in strange order.\n//   Strange sorting, is when you start with the minimum value,\n//   then maximum of the remaining integers, then minimum and so on.\n// \n//   Examples:\n//   strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n//   strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n//   strangeSortList([]) == []\n// const strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n", "canonical_solution": "    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "//   Given list of integers, return list in strange order.\n//   Strange sorting, is when you start with the minimum value,\n//   then maximum of the remaining integers, then minimum and so on.\n// \n//   Examples:\n//   strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n//   strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n//   strangeSortList([]) == []\n// const strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw =!sw;\n  }\n  return res;\n// };\n\n// var a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n// var b = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\n// console.log(strangeSortList(a));\n// console.log(strangeSortList(b));\n\n// var a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n// var b = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\n// console.log(strangeSortList(a));\n// console.log(strangeSortList(b));\n\n// const strangeSortList = (lst) => {\n//   const odd = (x, y) => x % 2!== y % 2;\n//   const max = (x, y) => x > y? x : y;\n//   const min = (x, y) => x < y? x : y;\n//   const oddSum = (lst) => lst.reduce((acc, x) => acc + odd(acc, x), 0);\n//   const sum = (lst) => lst.reduce((acc, x) => acc + x, 0);\n//   const oddMax = (lst) => lst.reduce((acc, x) => acc + odd(acc, x), 0);\n//   const sumMax = (lst) => lst.reduce((acc, x) => acc + x, 0);\n//   const oddMin = (lst) => lst.reduce((acc, x) => acc + odd(acc, x), 0);\n//   const sumMin = (lst) => lst.reduce((acc, x) => acc + x, 0);\n//   return oddSum(lst) > sum(lst)? oddMax(lst) : sumMax(lst);\n// };\n// console.log(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n// console.log(strangeSortList([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n// console.log(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n// console.log(strangeSortList([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "//   Given the lengths of the three sides of a triangle. Return the area of\n//   the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n//   Otherwise return -1\n//   Three sides make a valid triangle when the sum of any two sides is greater\n//   than the third side.\n//   Example:\n//   triangleArea(3, 4, 5) == 6.00\n//   triangleArea(1, 2, 10) == -1\n// const triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n", "canonical_solution": "  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "//   Given the lengths of the three sides of a triangle. Return the area of\n//   the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n//   Otherwise return -1\n//   Three sides make a valid triangle when the sum of any two sides is greater\n//   than the third side.\n//   Example:\n//   triangleArea(3, 4, 5) == 6.00\n//   triangleArea(1, 2, 10) == -1\n// const triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "//   Write a function that returns true if the object q will fly, and false otherwise.\n//   The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// \n//   Example:\n//   willItFly([1, 2], 5) ➞ false\n//   # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// \n//   willItFly([3, 2, 3], 1) ➞ false\n//   # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// \n//   willItFly([3, 2, 3], 9) ➞ true\n//   # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// \n//   willItFly([3], 5) ➞ true\n//   # 3 is less than the maximum possible weight, and it's balanced.\n// const willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n", "canonical_solution": "      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "//   Write a function that returns true if the object q will fly, and false otherwise.\n//   The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// \n//   Example:\n//   willItFly([1, 2], 5) ➞ false\n//   # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// \n//   willItFly([3, 2, 3], 1) ➞ false\n//   # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// \n//   willItFly([3, 2, 3], 9) ➞ true\n//   # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// \n//   willItFly([3], 5) ➞ true\n//   # 3 is less than the maximum possible weight, and it's balanced.\n// const willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i]!= q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n//   return q.reduce(((prev, item) => prev + item), 0) <= w;\n// };\n// \n// console.log(willItFly([1, 2, 3, 4, 5], 5)); // false\n// console.log(willItFly([3, 2, 3], 9)); // true\n// console.log(willItFly([3], 5)); // true\n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// "}
{"task_id": "JavaScript/73", "prompt": "//   Given an array arr of integers, find the minimum number of elements that\n//   need to be changed to make the array palindromic. A palindromic array is an array that\n//   is read the same backwards and forwards. In one change, you can change one element to any other element.\n// \n//   For example:\n//   smallestChange([1,2,3,5,4,7,9,6]) == 4\n//   smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n//   smallestChange([1, 2, 3, 2, 1]) == 0\n// const smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n", "canonical_solution": "      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "//   Given an array arr of integers, find the minimum number of elements that\n//   need to be changed to make the array palindromic. A palindromic array is an array that\n//   is read the same backwards and forwards. In one change, you can change one element to any other element.\n// \n//   For example:\n//   smallestChange([1,2,3,5,4,7,9,6]) == 4\n//   smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n//   smallestChange([1, 2, 3, 2, 1]) == 0\n// const smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n// \n//   Given an array arr of integers, find the minimum number of elements that\n//   need to be changed to make the array even. A even array is one that\n//   consists of the same number of positive and negative numbers. In one change,\n//   you can change one element to any other element.\n// \n//   For example:\n//   smallestEven([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6, -7, -8, -9]) == 2\n//   smallestEven([1, 2, 3, 2, 1]) == 0\n// const smallestEven = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n// \n//   Given an array arr of integers, find the minimum number of elements that\n//   need to be changed to make the array prime. A prime array is one that\n//   consists of the same number of positive and negative numbers. In one change,\n//   you can change one element to any other element.\n// \n//   For example:\n//   smallestPrime([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6, -7, -8, -9]) == 3\n//   smallestPrime([1, 2, 3, 2, 1]) == 0\n// const smallestPrime = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n// \n//   Given an array arr of integers, find the minimum number of elements that\n//   need to be changed to make the array divisible by all the integers.\n// \n//   For example:\n//   smallestDivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5\n//   smallestDivisible([1, 2, 3, 2, 1]) == 0\n// const smallestDivisible = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let divisible = 1;\n    for (let j = 0; j < arr.length; j++)\n      if (i!= j)\n        if (arr[i] % arr[j] == 0)\n          divisible++;\n    if (divisible == arr.length)\n      ans++;\n  }\n  return ans;\n}\n\n// \n//   Given an array arr of integers, find the minimum number of elements that\n//   need to be changed to make the array divisible by all the integers.\n// \n//   For example:\n//   smallestDivisible([1, 2, 3, 2, 1]) == 0\n// const smallestDivisible = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let divisible = 1;\n    for (let j = 0; j < arr.length; j++)\n      if (i!= j)\n        if (arr[i] % arr[j] == 0)\n          divisible++;\n    if (divisible == arr.length)\n      ans++;\n  }\n  return ans;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "//   Write a function that accepts two lists of strings and returns the list that has\n//   total number of chars in the all strings of the list less than the other list.\n// \n//   if the two lists have the same number of chars, return the first list.\n// \n//   Examples\n//   totalMatch([], []) ➞ []\n//   totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n//   totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n//   totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n//   totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n// const totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n", "canonical_solution": "    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "//   Write a function that accepts two lists of strings and returns the list that has\n//   total number of chars in the all strings of the list less than the other list.\n// \n//   if the two lists have the same number of chars, return the first list.\n// \n//   Examples\n//   totalMatch([], []) ➞ []\n//   totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n//   totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n//   totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n//   totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n// const totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n\n//   // You can improve your code to do the same thing using recursion:\n//   var totalMatch = (lst1, lst2) => {\n//     if (lst1.length === 0 || lst2.length === 0)\n//       return lst1;\n//     if (lst1.length === lst2.length)\n//       return lst1;\n//     var l1 = lst1.reduce((prev, item) => prev + item.length, 0);\n//     var l2 = lst2.reduce((prev, item) => prev + item.length, 0);\n//     return l1 <= l2? lst1 : lst2;\n//   };\n//   return totalMatch([], [])\n//     || totalMatch(['hi', 'admin'], ['hI', 'Hi'])\n//     || totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n//     || totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])\n//     || totalMatch(['4'], ['1', '2', '3', '4', '5'])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch([], [])\n//     || totalMatch"}
{"task_id": "JavaScript/75", "prompt": "// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n//   and false otherwise.\n//   Knowing that (a) is less then 100.\n//   Example:\n//   isMultiplyPrime(30) == true\n//   30 = 2 * 3 * 5\n// const isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n", "canonical_solution": "      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n//   and false otherwise.\n//   Knowing that (a) is less then 100.\n//   Example:\n//   isMultiplyPrime(30) == true\n//   30 = 2 * 3 * 5\n// const isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      if (i * j > 100) break;\n      if (i * j % 3 == 0 || j * i % 3 == 0) return false;\n    }\n  }\n  return true;\n\n// Write a function that returns true if the given number is a perfect square\n//   and false otherwise.\n//   Example:\n//   isPerfectSquare(10) == true\n//   10 = 4 * 4\n// const isPerfectSquare = (n) => {\n  var isSquare = function (n) {\n    var sqrt = Math.sqrt(n);\n    if (sqrt * sqrt!= n) return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isSquare(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isSquare(j)) continue;\n      if (i * j > 100) break;\n      if (i * j % 3 == 0 || j * i % 3 == 0) return false;\n    }\n  }\n  return true;\n\n// Write a function that returns true if the given number is a perfect cube\n//   and false otherwise.\n//   Example:\n//   isCube(100) == true\n//   100 = 3 * 3 * 3\n// const isCube = (n) => {\n  var isCube = function (n) {\n    var cube = n * n * n;\n    if (cube % 3!= 0) return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isCube(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isCube(j)) continue;\n      if (i * j * j > 100) break;\n      if (i * j * j % 3!= 0) return false;\n    }\n  }\n  return true;\n\n// Write a function that returns true if the given number is a perfect cube\n//   and false otherwise.\n//   Example:\n//   isCube(10) == true\n//   10 = 3 * 3 * 3\n// const isCube = (n) => {\n  var isCube = function (n) {\n    var cube = n * n * n;\n    if (cube % 3!= 0) return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isCube(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isCube(j)) continue;\n      if (i * j * j > 100) break;\n      if (i * j * j % 3!= 0) return false;\n    }\n  }\n  return true;\n\n// Write a function that returns true if the given number is a perfect cube\n//   and false otherwise.\n//   Example:\n//   isCube(10) == true\n//   10 = 3 * 3 * 3\n// const isCube = (n) => {\n  var isCube = function (n) {\n    var cube = n * n * n;\n    if (cube % 3!= 0) return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isCube(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isCube(j)) continue;\n      if (i * j * j > 100) break;\n      if (i * j * j % 3!= 0) return false;\n    }\n  }\n  return true;\n\n// Write a function that returns true if the given number is a perfect cube\n//   and false otherwise.\n//   Example:\n//   isCube(10) == true\n//   10 = 3 * 3 * 3\n// const isCube = (n) => {\n  var isCube = function (n) {\n    var cube = n * n * n;\n    if (cube % 3!= 0) return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isCube(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isCube(j)) continue;\n      if (i * j * j > 100) break;\n      if (i * j * j % 3!= 0) return false;\n    }\n  }\n  return true;\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "// Your task is to write a function that returns true if a number x is a simple\n//   power of n and false in other cases.\n//   x is a simple power of n if n**int=x\n//   For example:\n//   isSimplePower(1, 4) => true\n//   isSimplePower(2, 2) => true\n//   isSimplePower(8, 2) => true\n//   isSimplePower(3, 2) => false\n//   isSimplePower(3, 1) => false\n//   isSimplePower(5, 3) => false\n// const isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n", "canonical_solution": "  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "// Your task is to write a function that returns true if a number x is a simple\n//   power of n and false in other cases.\n//   x is a simple power of n if n**int=x\n//   For example:\n//   isSimplePower(1, 4) => true\n//   isSimplePower(2, 2) => true\n//   isSimplePower(8, 2) => true\n//   isSimplePower(3, 2) => false\n//   isSimplePower(3, 1) => false\n//   isSimplePower(5, 3) => false\n// const isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  for (var i = 0; i < n - 1; i++) {\n    power *= n;\n  }\n  return (x === power);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "//   Write a function that takes an integer a and returns true\n//   if this ingeger is a cube of some integer number.\n//   Note: you may assume the input is always valid.\n//   Examples:\n//   iscube(1) ==> true\n//   iscube(2) ==> false\n//   iscube(-1) ==> true\n//   iscube(64) ==> true\n//   iscube(0) ==> true\n//   iscube(180) ==> false\n// const iscube = (a) => {\n  a = Math.abs(a);\n", "canonical_solution": "  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "//   Write a function that takes an integer a and returns true\n//   if this ingeger is a cube of some integer number.\n//   Note: you may assume the input is always valid.\n//   Examples:\n//   iscube(1) ==> true\n//   iscube(2) ==> false\n//   iscube(-1) ==> true\n//   iscube(64) ==> true\n//   iscube(0) ==> true\n//   iscube(180) ==> false\n// const iscube = (a) => {\n  a = Math.abs(a);\n  const max = Math.floor(Math.sqrt(a)) + 1;\n  let result = 0;\n  for (let i = 1; i <= max; i++) {\n    if (a % i === 0) {\n      result = 1;\n    }\n  }\n  return result === 1;\n}\n\n//   Write a function that takes a string and returns true\n//   if this string contains all the characters of another string.\n//   Note: both strings may contain the same number of characters.\n//   Examples:\n//   containsAll(\"hello\", \"leel\") ==> true\n//   containsAll(\"hello\", \"ell\") ==> false\n//   containsAll(\"hello\", \"ellh\") ==> true\n//   containsAll(\"hello\", \"leellh\") ==> true\n//   containsAll(\"hello\", \"hello\") ==> true\n//   containsAll(\"hello\", \"hellllo\") ==> false\n// const containsAll = (s1, s2) => {\n  let i = 0,\n    j = 0;\n  while (i < s1.length && j < s2.length) {\n    if (s1[i]!== s2[j]) {\n      return false;\n    }\n    i++;\n    j++;\n  }\n  return true;\n}\n\n//   Write a function that takes a string and returns the string reversed.\n//   Example:\n//   reverse(\"hello\") ==> olleh\n//   reverse(\"leetcode\") ==> dcede\n// const reverse = (s) => {\n  let newS = \"\",\n    i = 0,\n    j = s.length - 1;\n  for (i = 0; i < j; i++) {\n    newS += s[i];\n  }\n  return newS + s[i];\n}\n\n//   Write a function that takes a string and returns the string reversed.\n//   Example:\n//   reverse(\"hello\") ==> olleh\n//   reverse(\"leetcode\") ==> dcede\n// const reverse = (s) => {\n  let newS = \"\",\n    i = 0,\n    j = s.length - 1;\n  for (i = 0; i < j; i++) {\n    newS += s[i];\n  }\n  return newS + s[i];\n}\n\n//   Write a function that takes an integer and returns the integer\n//   and the number of digits in the integer.\n//   Example:\n//   intToDecimal(1000) ==> \"1,000\"\n//   intToDecimal(1) ==> \"1\"\n// const intToDecimal = (a) => {\n  let count = 0;\n  while (a > 0) {\n    a = Math.floor(a / 10);\n    count++;\n  }\n  let result = \"\";\n  for (let i = count - 1; i >= 0; i--) {\n    result = Math.floor(a % 10) + result;\n    a = Math.floor(a / 10);\n  }\n  return result;\n}\n\n//   Write a function that takes an integer and returns the integer\n//   and the number of digits in the integer.\n//   Example:\n//   intToDecimal(1000) ==> \"1,000\"\n//   intToDecimal(1) ==> \"1\"\n// const intToDecimal = (a) => {\n  let count = 0;\n  while (a > 0) {\n    a = Math.floor(a / 10);\n    count++;\n  }\n  let result = \"\";\n  for (let i = count - 1; i >= 0; i--) {\n    result = Math.floor(a % 10) + result;\n    a = Math.floor(a / 10);\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "// You have been tasked to write a function that receives\n//   a hexadecimal number as a string and counts the number of hexadecimal\n//   digits that are primes (prime number=== or a prime=== is a natural number\n//   greater than 1 that is not a product of two smaller natural numbers).\n//   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n//   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n//   So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n//   B (=decimal 11)=== D (=decimal 13).\n//   Note: you may assume the input is always correct or empty string===\n//   and symbols A===B===C===D===E===F are always uppercase.\n//   Examples:\n//   For num = \"AB\" the output should be 1.\n//   For num = \"1077E\" the output should be 2.\n//   For num = \"ABED1A33\" the output should be 4.\n//   For num = \"123456789ABCDEF0\" the output should be 6.\n//   For num = \"2020\" the output should be 2.\n// const hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n", "canonical_solution": "    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "// You have been tasked to write a function that receives\n//   a hexadecimal number as a string and counts the number of hexadecimal\n//   digits that are primes (prime number=== or a prime=== is a natural number\n//   greater than 1 that is not a product of two smaller natural numbers).\n//   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n//   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n//   So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n//   B (=decimal 11)=== D (=decimal 13).\n//   Note: you may assume the input is always correct or empty string===\n//   and symbols A===B===C===D===E===F are always uppercase.\n//   Examples:\n//   For num = \"AB\" the output should be 1.\n//   For num = \"1077E\" the output should be 2.\n//   For num = \"ABED1A33\" the output should be 4.\n//   For num = \"123456789ABCDEF0\" the output should be 6.\n//   For num = \"2020\" the output should be 2.\n// const hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n  {\n    let char = num[i];\n    if (char in primes)\n    {\n      total++;\n    }\n  }\n  return total;\n}\n\nconst hexKey = (num) => {\n  let count = 0;\n  for (let i = 0; i < num.length; i++)\n  {\n    if (num[i] in primes)\n    {\n      count++;\n    }\n  }\n  return count;\n}\n\nconst num = \"ABED1A33\";\nconst primes = \"2357BD\";\n\nconsole.log(hexKey(num));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "// You will be given a number in decimal form and your task is to convert it to\n//   binary format. The function should return a string, with each character representing a binary\n//   number. Each character in the string will be '0' or '1'.\n// \n//   There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n//   The extra characters are there to help with the format.\n// \n//   Examples:\n//   decimalToBinary(15)   # returns \"db1111db\"\n//   decimalToBinary(32)   # returns \"db100000db\"\n// const decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n", "canonical_solution": "}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// You will be given a number in decimal form and your task is to convert it to\n//   binary format. The function should return a string, with each character representing a binary\n//   number. Each character in the string will be '0' or '1'.\n// \n//   There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n//   The extra characters are there to help with the format.\n// \n//   Examples:\n//   decimalToBinary(15)   # returns \"db1111db\"\n//   decimalToBinary(32)   # returns \"db100000db\"\n// const decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n// }\n// \n//   For the decimal number 15, the binary string is \"db1111db\"\n// \n//   For the decimal number 32, the binary string is \"db100000db\"\n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n//"}
{"task_id": "JavaScript/80", "prompt": "// You are given a string s.\n//   Your task is to check if the string is happy or not.\n//   A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n//   For example:\n//   isHappy(a) => false\n//   isHappy(aa) => false\n//   isHappy(abcd) => true\n//   isHappy(aabb) => false\n//   isHappy(adb) => true\n//   isHappy(xyy) => false\n// const isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n", "canonical_solution": "    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "// You are given a string s.\n//   Your task is to check if the string is happy or not.\n//   A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n//   For example:\n//   isHappy(a) => false\n//   isHappy(aa) => false\n//   isHappy(abcd) => true\n//   isHappy(aabb) => false\n//   isHappy(adb) => true\n//   isHappy(xyy) => false\n// const isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] === s[i + 1] && s[i] === s[i + 2])\n      return false;\n  return true;\n}\n\n// const isHappy = (s) => {\n//   const arr = new Array(s.length);\n//   for (let i = 0; i < s.length; i++)\n//     arr[i] = s[i];\n//   const hash = {};\n//   let prev = 0;\n//   for (let i = 0; i < s.length; i++) {\n//     if (prev === hash[arr[i]])\n//       return false;\n//     hash[arr[i]] = i;\n//     prev = i;\n//   }\n//   return true;\n// }\n\n// const isHappy = (s) => {\n//   const arr = new Array(s.length);\n//   for (let i = 0; i < s.length; i++)\n//     arr[i] = s[i];\n//   const hash = {};\n//   let prev = 0;\n//   for (let i = 0; i < s.length; i++) {\n//     if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) {\n//       hash[arr[i]] = arr[i + 1];\n//       i += 2;\n//     } else {\n//       hash[arr[i]] = prev;\n//       prev = arr[i];\n//     }\n//   }\n//   return hash.length >= 3;\n// }\n\n// const isHappy = (s) => {\n//   const arr = new Array(s.length);\n//   for (let i = 0; i < s.length; i++)\n//     arr[i] = s[i];\n//   let prev = 0;\n//   for (let i = 0; i < s.length - 2; i++) {\n//     if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) {\n//       if (arr[i] === arr[i + 3]) {\n//         return false;\n//       }\n//       i += 3;\n//     } else {\n//       prev = arr[i];\n//     }\n//   }\n//   return true;\n// }\n\n// const isHappy = (s) => {\n//   const arr = new Array(s.length);\n//   for (let i = 0; i < s.length; i++)\n//     arr[i] = s[i];\n//   let prev = 0;\n//   let i = 0;\n//   while (i < s.length) {\n//     if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) {\n//       if (arr[i] === arr[i + 3]) {\n//         return false;\n//       }\n//       i += 3;\n//     } else {\n//       prev = arr[i];\n//       i++;\n//     }\n//   }\n//   return true;\n// }\n\n// const isHappy = (s) => {\n//   const arr = new Array(s.length);\n//   for (let i = 0; i < s.length; i++)\n//     arr[i] = s[i];\n//   let prev = 0;\n//   for (let i = 0; i < s.length - 3; i++) {\n//     if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) {\n//       if (arr[i + 1] === arr[i + 3]) {\n//         return false;\n//       }\n//       i += 3;\n//     } else {\n//       prev = arr[i];\n//       i++;\n//     }\n//   }\n//   return true;\n// }\n\n// const isHappy = (s) => {\n//   const arr = new Array(s.length);\n//   for (let i = 0; i < s.length; i++)\n//     arr[i] = s[i];\n//   let prev = 0;\n//   for (let i = 0; i < s.length - 3; i++) {\n//     if (arr[i] === arr[i + 1] && arr[i] === arr[i + 2]) {\n//       if (arr[i + 1] === arr[i + 3] && arr[i + 2] === arr[i + 4]) {\n//         return false;\n//       }\n//       i += 4;\n//     } else {\n//       prev = arr[i];\n//       i++;\n//     }\n//   }\n//   return true;\n// }\n\nconst isHappy = (s) => {\n  const arr = new Array(s.length);\n  for (let i = 0; i < s.length; i++)\n    arr[i] = s[i];\n  const hash = {};\n  let prev = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (prev === hash[arr[i]])\n      return false;\n    hash[arr[i]] = i;\n    prev = i;\n  }\n  return true;\n}\n\n// const isHappy = (s) => {\n//   const arr = new Array(s.length);\n//   for (let i = 0; i < s.length; i++)\n//     arr[i] = s[i];\n//   const hash = {};\n//   let prev = 0;\n//   for (let i = 0; i < s.length; i++) {\n//     if (prev === hash[arr[i]]) {\n//       if (i + 1 < s.length) {\n//         if (arr[i + 1"}
{"task_id": "JavaScript/81", "prompt": "// It is the last week of the semester and the teacher has to give the grades\n//   to students. The teacher has been making her own algorithm for grading.\n//   The only problem is, she has lost the code she used for grading.\n//   She has given you a list of GPAs for some students and you have to write\n//   a function that can output a list of letter grades using the following table:\n//            GPA       |    Letter grade\n//             4.0                A+\n//           > 3.7                A\n//           > 3.3                A-\n//           > 3.0                B+\n//           > 2.7                B\n//           > 2.3                B-\n//           > 2.0                C+\n//           > 1.7                C\n//           > 1.3                C-\n//           > 1.0                D+\n//           > 0.7                D\n//           > 0.0                D-\n//             0.0                E\n// \n// \n//   Example:\n//   numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n// const numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n", "canonical_solution": "      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "// It is the last week of the semester and the teacher has to give the grades\n//   to students. The teacher has been making her own algorithm for grading.\n//   The only problem is, she has lost the code she used for grading.\n//   She has given you a list of GPAs for some students and you have to write\n//   a function that can output a list of letter grades using the following table:\n//            GPA       |    Letter grade\n//             4.0                A+\n//           > 3.7                A\n//           > 3.3                A-\n//           > 3.0                B+\n//           > 2.7                B\n//           > 2.3                B-\n//           > 2.0                C+\n//           > 1.7                C\n//           > 1.3                C-\n//           > 1.0                D+\n//           > 0.7                D\n//           > 0.0                D-\n//             0.0                E\n// \n// \n//   Example:\n//   numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n// const numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\nconst letter_grade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n//\n//\n// const letter_grade = (grades) => {\n//   let letter_grade = []\n//   for (let i = 0, len = grades.length; i < len; i++) {\n//     let gpa = grades[i]\n//     if (gpa > 4.0) {\n//       letter_grade.push('A')\n//     } else if (gpa > 3.7) {\n//       letter_grade.push('A')\n//     } else if (gpa > 3.3) {\n//       letter_grade.push('A')\n//     } else if (gpa > 3.0) {\n//       letter_grade.push('B')\n//     } else if (gpa > 2.7) {\n//       letter_grade.push('B')\n//     } else if (gpa > 2.3) {\n//       letter_grade.push('B')\n//     } else if (gpa > 2.0) {\n//       letter_grade.push('C')\n//     } else if (gpa > 1.7) {\n//       letter_grade.push('C')\n//     } else if (gpa > 1.3) {\n//       letter_grade.push('C')\n//     } else if (gpa > 1.0) {\n//       letter_grade.push('D')\n//     } else if (gpa > 0.7) {\n//       letter_grade.push('D')\n//     } else if (gpa > 0.0) {\n//       letter_grade.push('D')\n//     } else {\n//       letter_grade.push('E')\n//     }\n//   }\n//   return letter_grade\n// }\n\n// console.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]))\n// console.log(letter_grade([4.0, 3, 1.7, 2, 3.5]))\n// console.log(letter_grade([4.0, 3, 1.7, 2, 3.5, 4.0]))\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "// Write a function that takes a string and returns true if the string\n//   length is a prime number or false otherwise\n//   Examples\n//   primeLength('Hello') == true\n//   primeLength('abcdcba') == true\n//   primeLength('kittens') == true\n//   primeLength('orange') == false\n// const primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "// Write a function that takes a string and returns true if the string\n//   length is a prime number or false otherwise\n//   Examples\n//   primeLength('Hello') == true\n//   primeLength('abcdcba') == true\n//   primeLength('kittens') == true\n//   primeLength('orange') == false\n// const primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (string.charAt(i) == string.charAt(i - 1)) {\n      return false\n    }\n  }\n  return true\n}\n\n// Write a function that takes a number and returns true if it is a prime number\n//   Examples\n//   primeNumber(1) == false\n//   primeNumber(12) == true\n//   primeNumber(13) == false\n// const primeNumber = (number) => {\n  for (let i = 2; i * i <= number; i++) {\n    if (number % i == 0) { return false }\n  }\n  return true\n}\n\n// Write a function that takes a string and returns the number of prime numbers\n//   in the string\n//   Examples\n//   primeCount('Hello') == 1\n//   primeCount('abcdcba') == 3\n//   primeCount('kittens') == 1\n// const primeCount = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (primeNumber(string.charAt(i))) { count++ }\n  }\n  return count\n}\n\n// Write a function that takes a number and returns the number of prime numbers\n//   before that number\n//   Examples\n//   primeBefore(1) == 0\n//   primeBefore(12) == 2\n//   primeBefore(13) == 1\n// const primeBefore = (number) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (primeNumber(string.charAt(i))) { count++ }\n  }\n  return count\n}\n\n// Write a function that takes a number and returns the number of prime numbers\n//   after that number\n//   Examples\n//   primeAfter(1) == 2\n//   primeAfter(12) == 4\n//   primeAfter(13) == 3\n// const primeAfter = (number) => {\n  let count = 0\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (primeNumber(string.charAt(i))) { count++ }\n  }\n  return count\n}\n\n// Write a function that takes a string and returns the number of prime numbers\n//   before that number\n//   Examples\n//   primeBefore('Hello') == 0\n//   primeBefore('abcdcba') == 2\n//   primeBefore('kittens') == 1\n// const primeBefore = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (primeNumber(string.charAt(i))) { count++ }\n  }\n  return count\n}\n\n// Write a function that takes a string and returns the number of prime numbers\n//   after that number\n//   Examples\n//   primeAfter('Hello') == 1\n//   primeAfter('abcdcba') == 3\n//   primeAfter('kittens') == 1\n// const primeAfter = (string) => {\n  let count = 0\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (primeNumber(string.charAt(i))) { count++ }\n  }\n  return count\n}\n\n// Write a function that takes a number and returns the prime number immediately\n//   before that number\n//   Examples\n//   primeBefore(1) == 1\n//   primeBefore(12) == 12\n//   primeBefore(13) == 13\n// const primeBefore = (number) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (primeNumber(string.charAt(i))) { count++ }\n  }\n  return count\n}\n\n// Write a function that takes a number and returns the prime number immediately\n//   after that number\n//   Examples\n//   primeAfter(1) == 2\n//   primeAfter(12) == 13\n//   primeAfter(13) == 13\n// const primeAfter = (number) => {\n  let count = 0\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (primeNumber(string.charAt(i))) { count++ }\n  }\n  return count\n}\n\n// Write a function that takes a string and returns the sum of the prime numbers\n//   before and after that number\n//   Examples\n//   primeSum('Hello') == 1\n//   primeSum('abcdcba') == 5\n//   primeSum('kittens') == 2\n// const primeSum = (string) => {\n  let sum = 0\n  for (let i = 0; i < string.length; i++) {\n    if (primeNumber(string.charAt(i))) { sum++ }\n  }\n  return sum\n}\n\n// Write a function that takes a string and returns the sum of the prime numbers\n//   before that number\n//   Examples\n//   primeSum('Hello') == 1\n//   primeSum('abcdcba') == 5\n//   primeSum('kittens') == 2\n// const primeSum = (string) => {\n  let sum = 0\n  for (let i = 0; i < string.length; i++) {\n    if (primeNumber(string.charAt(i))) { sum++ }\n  }\n  return sum\n}\n\n// Write a function that takes a string and returns the sum of the prime numbers\n//   after that number\n//   Examples\n//   primeSum('Hello') == 2\n//   primeSum('abcdcba') == 7\n//   primeSum('kittens') == 3\n// const primeSum = (string) => {\n  let sum = 0\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (primeNumber(string.charAt(i))) { sum++ }\n  }\n  return sum\n}\n\n// Write a function that takes a string and returns the sum of the prime numbers\n//   before and after that number\n//   Examples\n//   primeSum('Hello')"}
{"task_id": "JavaScript/83", "prompt": "//   Given a positive integer n, return the count of the numbers of n-digit\n//   positive integers that start or end with 1.\n// const startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n", "canonical_solution": "    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "//   Given a positive integer n, return the count of the numbers of n-digit\n//   positive integers that start or end with 1.\n// const startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds(i)\n  }\n  return t\n}\n\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t + startsOneEnds"}
{"task_id": "JavaScript/84", "prompt": "// Given a positive integer N, return the total sum of its digits in binary.\n//    \n//   Example\n//       For N = 1000, the sum of digits will be 1 the output should be \"1\".\n//       For N = 150, the sum of digits will be 6 the output should be \"110\".\n//       For N = 147, the sum of digits will be 12 the output should be \"1100\".\n//    \n//   Variables:\n//       @N integer\n//            Constraints: 0 ≤ N ≤ 10000.\n//   Output:\n//        a string of binary number\n// const solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n", "canonical_solution": "    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "// Given a positive integer N, return the total sum of its digits in binary.\n//    \n//   Example\n//       For N = 1000, the sum of digits will be 1 the output should be \"1\".\n//       For N = 150, the sum of digits will be 6 the output should be \"110\".\n//       For N = 147, the sum of digits will be 12 the output should be \"1100\".\n//    \n//   Variables:\n//       @N integer\n//            Constraints: 0 ≤ N ≤ 10000.\n//   Output:\n//        a string of binary number\n// const solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = N / 10\n  }\n  return t.toString()\n}\n\nconst solve = (N) => {\n  return '0' + (10 * solve(N - 1)) + solve(N - 10)\n}\n\nconsole.log(solve(1000))<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "// Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// \n// \n//   Examples:\n//       add([4, 2, 6, 7]) ==> 2 \n// const add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n", "canonical_solution": "    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "// Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// \n// \n//   Examples:\n//       add([4, 2, 6, 7]) ==> 2 \n// const add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  console.log(t)\n}\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] % 2 == 0) {\n//       result += lst[i]\n//     }\n//   }\n//   console.log(result)\n// }\n\n// const add = (lst) => {\n//   let result = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i"}
{"task_id": "JavaScript/86", "prompt": "//   Write a function that takes a string and returns an ordered version of it.\n//   Ordered version of string, is a string where all words (separated by space)\n//   are replaced by a new word where all the characters arranged in\n//   ascending order based on ascii value.\n//   Note: You should keep the order of words and blank spaces in the sentence.\n// \n//   For example:\n//   antiShuffle('Hi') returns 'Hi'\n//   antiShuffle('hello') returns 'ehllo'\n//   antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n// const antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n", "canonical_solution": "      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "//   Write a function that takes a string and returns an ordered version of it.\n//   Ordered version of string, is a string where all words (separated by space)\n//   are replaced by a new word where all the characters arranged in\n//   ascending order based on ascii value.\n//   Note: You should keep the order of words and blank spaces in the sentence.\n// \n//   For example:\n//   antiShuffle('Hi') returns 'Hi'\n//   antiShuffle('hello') returns 'ehllo'\n//   antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n// const antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        j = ind\n      }\n    }\n  }\n  return arr.join(' ')\n}\n\nlet test = (s) => {\n  console.log(antiShuffle(s))\n}\n\ntest('Hi')\ntest('hello')\ntest('Hello World!!!')\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "//   You are given a 2 dimensional data, as a nested lists,\n//   which is similar to matrix, however, unlike matrices,\n//   each row may contain a different number of columns.\n//   Given lst, and integer x, find integers x in the list,\n//   and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n//   each tuple is a coordinate - (row, columns), starting with 0.\n//   Sort coordinates initially by rows in ascending order.\n//   Also, sort coordinates of the row by columns in descending order.\n//    \n//   Examples:\n//   getRow([\n//     [1,2,3,4,5,6],\n//     [1,2,3,4,1,6],\n//     [1,2,3,4,5,1]\n//   ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n//   getRow([], 1) == []\n//   getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n// const getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n", "canonical_solution": "      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "//   You are given a 2 dimensional data, as a nested lists,\n//   which is similar to matrix, however, unlike matrices,\n//   each row may contain a different number of columns.\n//   Given lst, and integer x, find integers x in the list,\n//   and return list of tuples, [(x1, y1), (x2, y2)...] such that\n//   each tuple is a coordinate - (row, columns), starting with 0.\n//   Sort coordinates initially by rows in ascending order.\n//   Also, sort coordinates of the row by columns in descending order.\n//    \n//   Examples:\n//   getRow([\n//     [1,2,3,4,5,6],\n//     [1,2,3,4,1,6],\n//     [1,2,3,4,5,1]\n//   ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n//   getRow([], 1) == []\n//   getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n// const getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  \n  t = t.sort((a, b) => {\n    let x = a[0] - b[0]\n    if (x!= 0) {\n      return x\n    }\n    x = b[1] - a[1]\n    if (x!= 0) {\n      return x\n    }\n    return a[1] - b[1]\n  })\n  \n  return t.map(i => [i[0], i[1]])\n}\n\n// getRow(lst, x)\n//   lst = [\n//     [1,2,3,4,5,6],\n//     [1,2,3,4,1,6],\n//     [1,2,3,4,5,1]\n//   ]\n//   x = 3\n//   return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n//   lst = [\n//     [1,2,3,4,5,6],\n//     [1,2,3,4,1,6],\n//     [1,2,3,4,5,1]\n//   ]\n//   x = 3\n//   return [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "//   Given an array of non-negative integers, return a copy of the given array after sorting,\n//   you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n//   or sort it in descending order if the sum( first index value, last index value) is even.\n// \n//   Note:\n//   * don't change the given array.\n// \n//   Examples:\n//   * sortArray([]) => []\n//   * sortArray([5]) => [5]\n//   * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n//   * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n// const sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n", "canonical_solution": "      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "//   Given an array of non-negative integers, return a copy of the given array after sorting,\n//   you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n//   or sort it in descending order if the sum( first index value, last index value) is even.\n// \n//   Note:\n//   * don't change the given array.\n// \n//   Examples:\n//   * sortArray([]) => []\n//   * sortArray([5]) => [5]\n//   * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n//   * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n// const sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let temp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = temp\n  }\n  return arr\n}\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "// Create a function encrypt that takes a string as an argument and\n//   returns a string encrypted with the alphabet being rotated. \n//   The alphabet should be rotated in a manner such that the letters \n//   shift down by two multiplied to two places.\n//   For example:\n//   encrypt('hi') returns 'lm'\n//   encrypt('asdfghjkl') returns 'ewhjklnop'\n//   encrypt('gf') returns 'kj'\n//   encrypt('et') returns 'ix'\n// const encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n", "canonical_solution": "    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "// Create a function encrypt that takes a string as an argument and\n//   returns a string encrypted with the alphabet being rotated. \n//   The alphabet should be rotated in a manner such that the letters \n//   shift down by two multiplied to two places.\n//   For example:\n//   encrypt('hi') returns 'lm'\n//   encrypt('asdfghjkl') returns 'ewhjklnop'\n//   encrypt('gf') returns 'kj'\n//   encrypt('et') returns 'ix'\n// const encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n// Print the length of the longest substring of length n in s\n// const length = (n) => {\n  // const p = (s, n) => {\n    // const len = 0\n    // let t = ''\n    // while (t.length < n) {\n      // let m = 0\n      // for (let i = 0; i < n; i++) {\n        // if (s[i]!== t[i]) {\n          // m = i + 1\n          // break\n        // }\n      // }\n      // t = s.slice(m, n)\n      // len = Math.max(len, t.length)\n    // }\n    // return len\n  // }\n  // return p(s, n)\n// }\n\n// const encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n// Print the length of the longest substring of length n in s\n// const length = (n) => {\n  // const p = (s, n) => {\n    // const len = 0\n    // let t = ''\n    // while (t.length < n) {\n      // let m = 0\n      // for (let i = 0; i < n; i++) {\n        // if (s[i]!== t[i]) {\n          // m = i + 1\n          // break\n        // }\n      // }\n      // t = s.slice(m, n)\n      // len = Math.max(len, t.length)\n    // }\n    // return len\n  // }\n  // return p(s, n)\n// }\n\n// const encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p"}
{"task_id": "JavaScript/90", "prompt": "//   You are given a list of integers.\n//   Write a function nextSmallest() that returns the 2nd smallest element of the list.\n//   Return null if there is no such element.\n//    \n//   nextSmallest([1, 2, 3, 4, 5]) == 2\n//   nextSmallest([5, 1, 4, 3, 2]) == 2\n//   nextSmallest([]) == null\n//   nextSmallest([1, 1]) == null\n// const nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n", "canonical_solution": "  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "//   You are given a list of integers.\n//   Write a function nextSmallest() that returns the 2nd smallest element of the list.\n//   Return null if there is no such element.\n//    \n//   nextSmallest([1, 2, 3, 4, 5]) == 2\n//   nextSmallest([5, 1, 4, 3, 2]) == 2\n//   nextSmallest([]) == null\n//   nextSmallest([1, 1]) == null\n// const nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  \n  return arr[1]\n// }\n\n// const nextSmallest = (lst) => {\n//   let tmp = lst[0]\n//   let ind = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] < tmp) {\n//       tmp = lst[i]\n//       ind = i\n//     }\n//   }\n//   lst[ind] = lst[0]\n//   lst[0] = tmp\n//   return lst[1]\n// }\n\n// const nextSmallest = (lst) => {\n//   let tmp = lst[0]\n//   let ind = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] < tmp) {\n//       tmp = lst[i]\n//       ind = i\n//     }\n//   }\n//   return lst[ind]\n// }\n\nconst nextSmallest = (lst) => {\n  let tmp = lst[0]\n  let ind = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < tmp) {\n      tmp = lst[i]\n      ind = i\n    }\n  }\n  return lst[ind]\n}\n\nconst nextSmallest = (lst) => {\n  let tmp = lst[0]\n  let ind = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < tmp) {\n      tmp = lst[i]\n      ind = i\n    }\n  }\n  return lst[ind]\n}\n\nconst nextSmallest = (lst) => {\n  let tmp = lst[0]\n  let ind = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < tmp) {\n      tmp = lst[i]\n      ind = i\n    }\n  }\n  return lst[ind]\n}\n\nconst nextSmallest = (lst) => {\n  let tmp = lst[0]\n  let ind = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < tmp) {\n      tmp = lst[i]\n      ind = i\n    }\n  }\n  return lst[ind]\n}\n\nconst nextSmallest = (lst) => {\n  let tmp = lst[0]\n  let ind = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < tmp) {\n      tmp = lst[i]\n      ind = i\n    }\n  }\n  return lst[ind]\n}\n\nconst nextSmallest = (lst) => {\n  let tmp = lst[0]\n  let ind = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < tmp) {\n      tmp = lst[i]\n      ind = i\n    }\n  }\n  return lst[ind]\n}\n\nconst nextSmallest = (lst) => {\n  let tmp = lst[0]\n  let ind = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < tmp) {\n      tmp = lst[i]\n      ind = i\n    }\n  }\n  return lst[ind]\n}\n\nconst nextSmallest = (lst) => {\n  let tmp = lst[0]\n  let ind = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < tmp) {\n      tmp = lst[i]\n      ind = i\n    }\n  }\n  return lst[ind]\n}\n\nconst nextSmallest = (lst) => {\n  let tmp = lst[0]\n  let ind = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < tmp) {\n      tmp = lst[i]\n      ind = i\n    }\n  }\n  return lst[ind]\n}\n\nconst nextSmallest = (lst) => {\n  let tmp = lst[0]\n  let ind = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < tmp) {\n      tmp = lst[i]\n      ind = i\n    }\n  }\n  return lst[ind]\n}\n\nconst nextSmallest = (lst) => {\n  let tmp = lst[0]\n  let ind = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < tmp) {\n      tmp = lst[i]\n      ind = i\n    }\n  }\n  return lst[ind]\n}\n\nconst nextSmallest = (lst) => {\n  let tmp = lst[0]\n  let ind = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < tmp) {\n      tmp = lst["}
{"task_id": "JavaScript/91", "prompt": "//   You'll be given a string of words, and your task is to count the number\n//   of boredoms. A boredom is a sentence that starts with the word \"I\".\n//   Sentences are delimited by '.', '?' or '!'.\n//   \n//   For example:\n//   >>> isBored(\"Hello world\")\n//   0\n//   >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n//   1\n// const isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n", "canonical_solution": "        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "//   You'll be given a string of words, and your task is to count the number\n//   of boredoms. A boredom is a sentence that starts with the word \"I\".\n//   Sentences are delimited by '.', '?' or '!'.\n//   \n//   For example:\n//   >>> isBored(\"Hello world\")\n//   0\n//   >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n//   1\n// const isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n// const isBored = (S) => {\n//   let t = 0\n//   for (let i = 0; i < S.length; i++) {\n//     if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n//       if (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n//         t++\n//       }\n//     }\n//   }\n//   return t\n// }\n\n// const isBored = (S) => {\n//   let t = 0\n//   for (let i = 0; i < S.length; i++) {\n//     if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n//       if (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n//         t++\n//       }\n//     }\n//   }\n//   return t\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "// Create a function that takes 3 numbers.\n//   Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n//   Returns false in any other cases.\n//   Examples\n//   anyInt(5, 2, 7) ➞ true\n//   anyInt(3, 2, 2) ➞ false\n//   anyInt(3, -2, 1) ➞ true\n//   anyInt(3.6, -2.2, 2) ➞ false\n// const anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n", "canonical_solution": "  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "// Create a function that takes 3 numbers.\n//   Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n//   Returns false in any other cases.\n//   Examples\n//   anyInt(5, 2, 7) ➞ true\n//   anyInt(3, 2, 2) ➞ false\n//   anyInt(3, -2, 1) ➞ true\n//   anyInt(3.6, -2.2, 2) ➞ false\n// const anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n// const anyInt = (x, y, z) => {\n//   if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && y === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0) {\n    return true\n  }\n  return false\n}\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && y === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z && x % 1 === 0) {\n    return true\n  }\n  return false\n}\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\nconst anyInt = (x, y, z) => {\n  if (x === y && x === z && x % 1 === 0) {\n    return true\n  }\n  return false\n}\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z) => {\n//   if (x === y && x === z && x % 1 === 0) {\n//     return true\n//   }\n//   return false\n// }\n\n// const anyInt = (x, y, z"}
{"task_id": "JavaScript/93", "prompt": "//   Write a function that takes a message, and encodes in such a \n//   way that it swaps case of all letters, replaces all vowels in \n//   the message with the letter that appears 2 places ahead of that \n//   vowel in the english alphabet. \n//   Assume only letters. \n//    \n//   Examples:\n//   >>> encode('test')\n//   'TGST'\n//   >>> encode('This is a message')\n//   'tHKS KS C MGSSCGG'\n// const encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n", "canonical_solution": "    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "//   Write a function that takes a message, and encodes in such a \n//   way that it swaps case of all letters, replaces all vowels in \n//   the message with the letter that appears 2 places ahead of that \n//   vowel in the english alphabet. \n//   Assume only letters. \n//    \n//   Examples:\n//   >>> encode('test')\n//   'TGST'\n//   >>> encode('This is a message')\n//   'tHKS KS C MGSSCGG'\n// const encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n// \n//  Write a function that takes a message, and decodes in such a way that \n//   the letters are lower case, and the vowels are converted to the \n//   respective upper case letter. \n//   Assume only letters. \n//   \n//   Examples:\n//   >>> decode('TEST')\n//   'test'\n//   >>> decode('THKS KC MGSSCGG')\n//   'This is a message'\n// const decode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p < 97) { p += 32 }\n    else if (p > 122) { p -= 32 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "// You are given a list of integers.\n//   You need to find the largest prime value and return the sum of its digits.\n// \n//   Examples:\n//   For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n//   For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n//   For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n//   For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n//   For lst = [0,81,12,3,1,21] the output should be 3\n//   For lst = [0,8,1,2,1,7] the output should be 7\n// const skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n", "canonical_solution": "  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "// You are given a list of integers.\n//   You need to find the largest prime value and return the sum of its digits.\n// \n//   Examples:\n//   For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n//   For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n//   For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n//   For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n//   For lst = [0,81,12,3,1,21] the output should be 3\n//   For lst = [0,8,1,2,1,7] the output should be 7\n// const skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nconsole.log(largestPrimeSum(lst))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "//   Given a dictionary, return true if all keys are strings in lower \n//   case or all keys are strings in upper case, else return false.\n//   The function should return false is the given dictionary is empty.\n//   Examples:\n//   checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n//   checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n//   checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n//   checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n//   checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n// const checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n", "canonical_solution": "      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "//   Given a dictionary, return true if all keys are strings in lower \n//   case or all keys are strings in upper case, else return false.\n//   The function should return false is the given dictionary is empty.\n//   Examples:\n//   checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n//   checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n//   checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n//   checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n//   checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n// const checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].toLowerCase()!== key[i].toUpperCase()) {\n        return false\n      }\n    }\n    lo = lo * 2\n    hi = hi * 2\n  }\n  return (c === lo) && (c === hi)\n// }\n\n//   Given a sorted array, return the index of the first element that is not in\n//   the sorted array, or -1 if it is the last element in the array.\n//   If there are duplicate elements, the function should return the index of\n//   the first of the duplicate elements.\n//   For example:\n//   Given [1,2,3,1,2], the function should return 3,\n//   because the 3rd element is the first non-repeating element.\n//   Given [1,2,3,4,5], the function should return -1,\n//   because there is no repeating element.\n//   Given [1,1,1,2,2], the function should return 1.\n//   Given [1,2,3,4,5], the function should return -1.\n//   Given [4,5,6,7,8,9,10], the function should return 3.\n// const search = (array) => {\n  let i = 0\n  while (i < array.length) {\n    let j = 0\n    let tmp = array[i]\n    while (j < array.length) {\n      if (array[j] === tmp) {\n        return i\n      }\n      j++\n    }\n    i++\n  }\n  return -1\n// }\n\n// Given a string, return a string with all the vowels in upper case.\n//   If the string is empty, return an empty string.\n//   If the string contains only lower case letters,\n//   return the string in upper case.\n//   If the string contains only upper case letters,\n//   return the string in lower case.\n//   If the string contains both upper and lower case letters,\n//   return the string in lower case.\n//   Examples:\n//   uppercase(\"hello\") should return \"HELLO\".\n//   uppercase(\"lo\") should return \"LO\".\n//   uppercase(\"aA\") should return \"AA\".\n// const uppercase = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  let c = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].toLowerCase() === str[i].toUpperCase()) {\n      c++\n    }\n  }\n  if (c === 0) {\n    return str.toUpperCase()\n  }\n  if (c === str.length) {\n    return str.toLowerCase()\n  }\n  let result = \"\"\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].toLowerCase() === str[i].toUpperCase()) {\n      result += str[i].toLowerCase()\n    } else {\n      result += str[i].toUpperCase()\n    }\n  }\n  return result\n// }\n\n// Given a list of strings, return the list of all the strings in upper case.\n//   If the list is empty, return an empty list.\n//   If the list contains only lower case letters,\n//   return the list in upper case.\n//   If the list contains only upper case letters,\n//   return the list in lower case.\n//   If the list contains both upper and lower case letters,\n//   return the list in lower case.\n//   Examples:\n//   uppercase(\"hello\") should return [\"HELLO\"]\n//   uppercase(\"lo\") should return [\"LO\"]\n//   uppercase(\"aA\") should return [\"AA\"]\n// const uppercase = (list) => {\n  if (list.length === 0) {\n    return []\n  }\n  let result = []\n  for (let i = 0; i < list.length; i++) {\n    if (list[i].toLowerCase() === list[i].toUpperCase()) {\n      result.push(list[i].toLowerCase())\n    } else {\n      result.push(list[i].toUpperCase())\n    }\n  }\n  return result\n// }\n\n// Given a string, return the string with all the vowels in upper case.\n//   If the string is empty, return an empty string.\n//   If the string contains only lower case letters,\n//   return the string in upper case.\n//   If the string contains only upper case letters,\n//   return the string in lower case.\n//   If the string contains both upper and lower case letters,\n//   return the string in lower case.\n//   Examples:\n//   uppercase(\"hello\") should return \"HELLO\".\n//   uppercase(\"lo\") should return \"LO\".\n//   uppercase(\"aA\") should return \"AA\".\n// const uppercase = (str) => {\n  if (str.length === 0) {\n    return \"\"\n  }\n  let c = 0\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].toLowerCase() === str[i].toUpperCase()) {\n      c++\n    }\n  }\n  if (c === 0) {\n    return str.toUpperCase()\n  }\n  if ("}
{"task_id": "JavaScript/96", "prompt": "// Implement a function that takes an non-negative integer and returns an array of the first n\n//   integers that are prime numbers and less than n.\n//   for example:\n//   countUpTo(5) => [2,3]\n//   countUpTo(11) => [2,3,5,7]\n//   countUpTo(0) => []\n//   countUpTo(20) => [2,3,5,7,11,13,17,19]\n//   countUpTo(1) => []\n//   countUpTo(18) => [2,3,5,7,11,13,17]\n// const countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n", "canonical_solution": "    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "// Implement a function that takes an non-negative integer and returns an array of the first n\n//   integers that are prime numbers and less than n.\n//   for example:\n//   countUpTo(5) => [2,3]\n//   countUpTo(11) => [2,3,5,7]\n//   countUpTo(0) => []\n//   countUpTo(20) => [2,3,5,7,11,13,17,19]\n//   countUpTo(1) => []\n//   countUpTo(18) => [2,3,5,7,11,13,17]\n// const countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p) t.push(i)\n  }\n  return t\n}\n\n// A function that takes a positive integer and returns the largest prime number that is less than or equal to that number.\n//   for example:\n//   largestPrimeLessThan(3) => 2\n//   largestPrimeLessThan(4) => 3\n//   largestPrimeLessThan(6) => 5\n//   largestPrimeLessThan(7) => 7\n//   largestPrimeLessThan(8) => 7\n//   largestPrimeLessThan(9) => 7\n// const largestPrimeLessThan = (n) => {\n  let t = []\n  for (let i = 2; i * i <= n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p) t.push(i)\n  }\n  return t[t.length - 1]\n}\n\n// A function that takes a positive integer and returns the number of the least number of times that number is divisible by all prime numbers up to and including the largest prime less than or equal to that number.\n//   for example:\n//   leastPrimeDivisor(3) => 1\n//   leastPrimeDivisor(4) => 2\n//   leastPrimeDivisor(6) => 3\n//   leastPrimeDivisor(7) => 3\n//   leastPrimeDivisor(8) => 4\n//   leastPrimeDivisor(9) => 3\n// const leastPrimeDivisor = (n) => {\n  let t = []\n  for (let i = largestPrimeLessThan(n); i > 2; i--) {\n    let p = n\n    while (n % i == 0) { p /= i; n /= i }\n    t.push(p)\n  }\n  return t.length\n}\n\n// A function that takes a positive integer and returns the number of the least number of times that number is divisible by all prime numbers up to and including the largest prime less than or equal to that number.\n//   for example:\n//   leastPrimeDivisor(3) => 1\n//   leastPrimeDivisor(4) => 2\n//   leastPrimeDivisor(6) => 3\n//   leastPrimeDivisor(7) => 3\n//   leastPrimeDivisor(8) => 4\n//   leastPrimeDivisor(9) => 3\n// const leastPrimeDivisor = (n) => {\n  let t = []\n  for (let i = largestPrimeLessThan(n); i > 2; i--) {\n    let p = n\n    while (n % i == 0) { p /= i; n /= i }\n    t.push(p)\n  }\n  return t.length\n}\n\n// A function that takes a positive integer and returns a list of all prime numbers less than or equal to that number.\n//   for example:\n//   leastPrimesUpTo(3) => [2,3]\n//   leastPrimesUpTo(4) => [2,3,5]\n//   leastPrimesUpTo(6) => [2,3,5,7]\n//   leastPrimesUpTo(7) => [2,3,5,7,11]\n//   leastPrimesUpTo(8) => [2,3,5,7,11,13]\n//   leastPrimesUpTo(9) => [2,3,5,7,11,13,17]\n// const leastPrimesUpTo = (n) => {\n  let t = []\n  for (let i = 2; i <= n; i++) {\n    let p = 1\n    for (let j = 2; j <= largestPrimeLessThan(i); j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p) t.push(i)\n  }\n  return t\n}\n\n// A function that takes a positive integer and returns the number of prime numbers less than or equal to that number.\n//   for example:\n//   numberOfPrimesLessThan(3) => 2\n//   numberOfPrimesLessThan(4) => 3\n//   numberOfPrimesLessThan(6) => 4\n//   numberOfPrimesLessThan(7) => 4\n//   numberOfPrimesLessThan(8) => 5\n//   numberOfPrimesLessThan(9) => 5\n// const numberOfPrimesLessThan = (n) => {\n  let t = []\n  for (let i = 2; i <= n; i++) {\n    let p = 1\n    for (let j = 2; j <= largestPrimeLessThan(i); j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p) t.push(i)\n  }\n  return t.length\n}\n\n// A function that takes a positive integer and returns the largest prime number that is less than or equal to that number.\n//   for example:\n//   largestPrimeLessThan(3) => 2\n//   largestPrimeLessThan(4) => 3\n//   largestPrimeLessThan(6) => 5\n//   largestPrimeLessThan(7) => 7\n//   largestPrimeLessThan(8) => 7\n//   largestPrimeLessThan(9) => 7\n// const largestPrimeLessThan ="}
{"task_id": "JavaScript/97", "prompt": "// Complete the function that takes two integers and returns \n//   the product of their unit digits.\n//   Assume the input is always valid.\n//   Examples:\n//   multiply(148, 412) should return 16.\n//   multiply(19, 28) should return 72.\n//   multiply(2020, 1851) should return 0.\n//   multiply(14,-15) should return 20.\n// const multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n", "canonical_solution": "  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "// Complete the function that takes two integers and returns \n//   the product of their unit digits.\n//   Assume the input is always valid.\n//   Examples:\n//   multiply(148, 412) should return 16.\n//   multiply(19, 28) should return 72.\n//   multiply(2020, 1851) should return 0.\n//   multiply(14,-15) should return 20.\n// const multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  let result = 0\n  let aUnitDigits = 0\n  let bUnitDigits = 0\n  for (let i = 0; i < Math.min(a.length, b.length); i++) {\n    if (a.charAt(i) < '0') {\n      aUnitDigits++\n    } else if (a.charAt(i) > '9') {\n      aUnitDigits++\n    }\n    if (b.charAt(i) < '0') {\n      bUnitDigits++\n    } else if (b.charAt(i) > '9') {\n      bUnitDigits++\n    }\n    result += aUnitDigits * bUnitDigits\n  }\n  if (a.length > b.length) {\n    result += (a.length - b.length) * bUnitDigits\n  } else if (b.length > a.length) {\n    result += (b.length - a.length) * aUnitDigits\n  }\n  return result\n}\n\nconsole.log(multiply(19, 28))\nconsole.log(multiply(-19, -28))\nconsole.log(multiply(20, 1851))\nconsole.log(multiply(-20, -1851))\nconsole.log(multiply(14, -15))\nconsole.log(multiply(-14, 15))\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "//   Given a string s, count the number of uppercase vowels in even indices.\n//    \n//   For example:\n//   countUpper('aBCdEf') returns 1\n//   countUpper('abcdefg') returns 0\n//   countUpper('dBBE') returns 0\n// const countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "//   Given a string s, count the number of uppercase vowels in even indices.\n//    \n//   For example:\n//   countUpper('aBCdEf') returns 1\n//   countUpper('abcdefg') returns 0\n//   countUpper('dBBE') returns 0\n// const countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "// Create a function that takes a value (string) representing a number\n//   and returns the closest integer to it. If the number is equidistant\n//   from two integers, round it away from zero.\n//   Examples\n//   >>> closestInteger(\"10\")\n//   10\n//   >>> closestInteger(\"15.3\")\n//   15\n//   Note:\n//   Rounding away from zero means that if the given number is equidistant\n//   from two integers, the one you should return is the one that is the\n//   farthest from zero. For example closestInteger(\"14.5\") should\n//   return 15 and closestInteger(\"-14.5\") should return -15.\n// const closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n", "canonical_solution": "  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "// Create a function that takes a value (string) representing a number\n//   and returns the closest integer to it. If the number is equidistant\n//   from two integers, round it away from zero.\n//   Examples\n//   >>> closestInteger(\"10\")\n//   10\n//   >>> closestInteger(\"15.3\")\n//   15\n//   Note:\n//   Rounding away from zero means that if the given number is equidistant\n//   from two integers, the one you should return is the one that is the\n//   farthest from zero. For example closestInteger(\"14.5\") should\n//   return 15 and closestInteger(\"-14.5\") should return -15.\n// const closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return Math.floor(value)\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "//   Given a positive integer n, you have to make a pile of n levels of stones.\n//   The first level has n stones.\n//   The number of stones in the next level is:\n//       - the next odd number if n is odd.\n//       - the next even number if n is even.\n//   Return the number of stones in each level in a list, where element at index\n//   i represents the number of stones in the level (i+1).\n// \n//   Examples:\n//   >>> makeAPile(3)\n//   [3, 5, 7]\n// const makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n", "canonical_solution": "  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "//   Given a positive integer n, you have to make a pile of n levels of stones.\n//   The first level has n stones.\n//   The number of stones in the next level is:\n//       - the next odd number if n is odd.\n//       - the next even number if n is even.\n//   Return the number of stones in each level in a list, where element at index\n//   i represents the number of stones in the level (i+1).\n// \n//   Examples:\n//   >>> makeAPile(3)\n//   [3, 5, 7]\n// const makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "//   You will be given a string of words separated by commas or spaces. Your task is\n//   to split the string into words and return an array of the words.\n//    \n//   For example:\n//   wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n//   wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n// const wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n", "canonical_solution": "    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "//   You will be given a string of words separated by commas or spaces. Your task is\n//   to split the string into words and return an array of the words.\n//    \n//   For example:\n//   wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n//   wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n// const wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    } else {\n      t += s[i];\n    }\n  }\n  p.push(t);\n  return p;\n// }\n\n// function wordsString(s) {\n  // let t = ''\n  // let p = []\n  // let k = 0\n  // for (let i = 0; i < s.length; i++) {\n    // if (s[i] =='' || s[i] == ',') {\n      // if (k == 0) {\n        // k = 1;\n        // p.push(t)\n        // t = '';\n      // }\n    // } else {\n      // t += s[i];\n    // }\n  // }\n  // p.push(t)\n  // return p\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s+/)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*,\\s*/)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s+/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\,\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s+/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s+/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s+/)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*,\\s*/)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\,\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s+/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s+/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s+/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s+/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString(s) {\n  // const split = s.split(/\\s*?\\s*/g)\n  // return split\n// }\n\n// function wordsString("}
{"task_id": "JavaScript/102", "prompt": "// This function takes two positive numbers x and y and returns the\n//   biggest even integer number that is in the range [x, y] inclusive. If \n//   there's no such number, then the function should return -1.\n// \n//   For example:\n//   chooseNum(12, 15) = 14\n//   chooseNum(13, 12) = -1\n// const chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "// This function takes two positive numbers x and y and returns the\n//   biggest even integer number that is in the range [x, y] inclusive. If \n//   there's no such number, then the function should return -1.\n// \n//   For example:\n//   chooseNum(12, 15) = 14\n//   chooseNum(13, 12) = -1\n// const chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1;\n// }\n\n// const chooseNum = (x, y) => {\n//   let result = chooseNum(x, y - 1)\n//   if (result === -1) {\n//     return chooseNum(x + 1, y)\n//   }\n//   return result\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(y, x)\n// }\n\n// const chooseNum = (x, y) => {\n//   return (y - x) % 2 == 0? y : -1\n// }\n\n// const chooseNum = (x, y) => {\n//   if (y - x < 2) {\n//     return -1\n//   }\n//   if (y - x % 2 == 0) {\n//     return y\n//   }\n//   return y - 1\n// }\n\n// const chooseNum = (x, y) => {\n//   return (y - x) % 2 == 0? x : y - 1\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(y, x)\n// }\n\n// const chooseNum = (x, y) => {\n//   return (y - x) % 2 == 0? y : x\n// }\n\n// const chooseNum = (x, y) => {\n//   return y - x\n// }\n\n// const chooseNum = (x, y) => {\n//   return (y - x) % 2 == 0? x : y\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return x\n// }\n\n// const chooseNum = (x, y) => {\n//   return y\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum = (x, y) => {\n//   return Math.min(x, y)\n// }\n\n// const chooseNum ="}
{"task_id": "JavaScript/103", "prompt": "// You are given two positive integers n and m, and your task is to compute the\n//   average of the integers from n through m (including n and m). \n//   Round the answer to the nearest integer and convert that to binary.\n//   If n is greater than m, return -1.\n//   Example:\n//   roundedAvg(1, 5) => \"0b11\"\n//   roundedAvg(7, 5) => -1\n//   roundedAvg(10, 20) => \"0b1111\"\n//   roundedAvg(20, 33) => \"0b11010\"\n// const roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n", "canonical_solution": "  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "// You are given two positive integers n and m, and your task is to compute the\n//   average of the integers from n through m (including n and m). \n//   Round the answer to the nearest integer and convert that to binary.\n//   If n is greater than m, return -1.\n//   Example:\n//   roundedAvg(1, 5) => \"0b11\"\n//   roundedAvg(7, 5) => -1\n//   roundedAvg(10, 20) => \"0b1111\"\n//   roundedAvg(20, 33) => \"0b11010\"\n// const roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  let b = Number(k.toString(2)).toString()\n  return Number(b)\n\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "// Given a list of positive integers x. return a sorted list of all \n//   elements that hasn't any even digit.\n// \n//   Note: Returned list should be sorted in increasing order.\n//    \n//   For example:\n//   >>> uniqueDigits([15, 33, 1422, 1])\n//   [1, 15, 33]\n//   >>> uniqueDigits([152, 323, 1422, 10])\n//   []\n// const uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n", "canonical_solution": "  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "// Given a list of positive integers x. return a sorted list of all \n//   elements that hasn't any even digit.\n// \n//   Note: Returned list should be sorted in increasing order.\n//    \n//   For example:\n//   >>> uniqueDigits([15, 33, 1422, 1])\n//   [1, 15, 33]\n//   >>> uniqueDigits([152, 323, 1422, 10])\n//   []\n// const uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "//   Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n//   reverse the resulting array, and then replace each digit by its corresponding name from\n//   \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// \n//   For example:\n//     arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n//           -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n//           -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n//     return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n//    \n//     If the array is empty, return an empty array:\n//     arr = []\n//     return []\n//    \n//     If the array has any strange number ignore it:\n//     arr = [1, -1 , 55] \n//           -> sort arr -> [-1, 1, 55]\n//           -> reverse arr -> [55, 1, -1]\n//     return = ['One']\n// const byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n", "canonical_solution": "      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "//   Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n//   reverse the resulting array, and then replace each digit by its corresponding name from\n//   \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// \n//   For example:\n//     arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n//           -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n//           -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n//     return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n//    \n//     If the array is empty, return an empty array:\n//     arr = []\n//     return []\n//    \n//     If the array has any strange number ignore it:\n//     arr = [1, -1, 55] \n//           -> sort arr -> [-1, 1, 55]\n//           -> reverse arr -> [55, 1, -1]\n//     return = ['One']\n// const byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      p[j], p[ind] = p[ind], p[j]\n    }\n  }\n  return p.reverse()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "// Implement the function f that takes n as a parameter,\n//   and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n//   or the sum of numbers from 1 to i otherwise.\n//   i starts from 1.\n//   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n//   Example:\n//   f(5) == [1, 2, 6, 24, 15]\n// const f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n", "canonical_solution": "    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "// Implement the function f that takes n as a parameter,\n//   and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n//   or the sum of numbers from 1 to i otherwise.\n//   i starts from 1.\n//   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n//   Example:\n//   f(5) == [1, 2, 6, 24, 15]\n// const f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    k.push(f);\n    f = f * i;\n  }\n  return k\n}\n\n// Implement the function f that takes n as a parameter,\n//   and returns the number of primes less than n.\n//   i starts from 2.\n//   the number of primes is the number of numbers from 1 to n\n//   that are relatively prime to i.\n//   Example:\n//   f(5) == 3\nconst f = (n) => {\n  let i = 2\n  let p = 0\n  while (i <= n) {\n    p += i\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        return p\n      }\n    }\n    i++\n  }\n  return p\n}\n\n// Implement the function f that takes n as a parameter,\n//   and returns the largest number that is less than n.\n//   i starts from 1.\n//   the largest number is the nth number in the sequence of primes\n//   that are less than n.\n//   Example:\n//   f(5) == 5\nconst f = (n) => {\n  let i = 1\n  let k = []\n  while (k.length < n) {\n    k.push(f(i))\n    i++\n  }\n  return k[n - 1]\n}\n\n// Implement the function f that takes n as a parameter,\n//   and returns the smallest number that is greater than n.\n//   i starts from 1.\n//   the smallest number is the nth number in the sequence of primes\n//   that are less than n.\n//   Example:\n//   f(5) == 4\nconst f = (n) => {\n  let i = 1\n  let k = []\n  while (k.length < n) {\n    k.push(f(i))\n    i++\n  }\n  return k[n - 1]\n}\n\n// Implement the function f that takes n as a parameter,\n//   and returns the sum of the nth numbers in the sequence of primes.\n//   i starts from 1.\n//   the sum of the nth numbers in the sequence of primes is the nth number\n//   in the sequence of primes that is greater than n.\n//   Example:\n//   f(5) == 15\nconst f = (n) => {\n  let k = []\n  let sum = 0\n  while (k.length < n) {\n    k.push(f(sum))\n    sum += k[k.length - 1]\n  }\n  return sum\n}\n\n// Implement the function f that takes n as a parameter,\n//   and returns the largest number that is less than n.\n//   i starts from 1.\n//   the largest number is the nth number in the sequence of primes\n//   that are less than n.\n//   Example:\n//   f(5) == 3\nconst f = (n) => {\n  let i = 1\n  let k = []\n  while (k.length < n) {\n    k.push(f(i))\n    i++\n  }\n  return k[n - 1]\n}\n\n// Implement the function f that takes n as a parameter,\n//   and returns the smallest number that is greater than n.\n//   i starts from 1.\n//   the smallest number is the nth number in the sequence of primes\n//   that are less than n.\n//   Example:\n//   f(5) == 6\nconst f = (n) => {\n  let i = 1\n  let k = []\n  while (k.length < n) {\n    k.push(f(i))\n    i++\n  }\n  return k[n - 1]\n}\n\n// Implement the function f that takes n as a parameter,\n//   and returns the number of elements in the list k\n//   that are also in the list k2.\n//   i starts from 1.\n//   the number of elements in the list k that are also in the list k2\n//   is the number of elements in the list k2 that are also in the list k\n//   Example:\n//   f(5, [1, 2, 3, 4, 5]) == 2\nconst f = (n, k, k2) => {\n  let i = 0\n  while (k.length < n) {\n    k.push(k2[i])\n    i++\n  }\n  return k.filter(x => k2.includes(x)).length\n}\n\n// Implement the function f that takes n as a parameter,\n//   and returns the largest element in the list k.\n//   i starts from 1.\n//   the largest element is the largest element in the list k\n//   Example:\n//   f(5, [1, 2, 3, 4, 5]) == 5\nconst f = (n, k) => k[n - 1]\n\n// Implement the function f that takes n as a parameter,\n//   and returns the smallest element in the list k.\n//   i starts from 1.\n//   the smallest element is the smallest element in the list k\n//   Example:\n//   f(5, [1, 2, 3, 4, 5]) == 1\nconst f = (n, k) => k[0]\n\n// Implement the function f that takes n as a parameter,\n//   and returns the largest prime number that is less than n.\n//   i starts from 2.\n//   the largest prime number is the largest prime number that is less than n\n//   Example:\n//   f(5) == 5\nconst f = (n) => f(n, f(n - 1) + 1)\n\n// Implement the function f that takes n as a parameter,\n//   and returns the smallest prime number that is greater than n.\n//   i starts from 2.\n//"}
{"task_id": "JavaScript/107", "prompt": "//   Given a positive integer n, return a tuple that has the number of even and odd\n//   integer palindromes that fall within the range(1, n), inclusive.\n// \n//   Example 1:\n// \n//       Input: 3\n//       Output: (1, 2)\n//       Explanation:\n//       Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// \n//   Example 2:\n// \n//       Input: 12\n//       Output: (4, 6)\n//       Explanation:\n//       Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// \n//   Note:\n//       1. 1 <= n <= 10^3\n//       2. returned tuple has the number of even and odd integer palindromes respectively.\n// const evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n", "canonical_solution": "      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "//   Given a positive integer n, return a tuple that has the number of even and odd\n//   integer palindromes that fall within the range(1, n), inclusive.\n// \n//   Example 1:\n// \n//       Input: 3\n//       Output: (1, 2)\n//       Explanation:\n//       Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// \n//   Example 2:\n// \n//       Input: 12\n//       Output: (4, 6)\n//       Explanation:\n//       Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// \n//   Note:\n//       1. 1 <= n <= 10^3\n//       2. returned tuple has the number of even and odd integer palindromes respectively.\n// const evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j]!= k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p) {\n      e++\n    }\n    if (!p) {\n      o++\n    }\n  }\n  return [e, o]\n}\n\nexport default evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "//   Write a function countNums which takes an array of integers and returns\n//   the number of elements which has a sum of digits > 0.\n//   If a number is negative, then its first signed digit will be negative:\n//   e.g. -123 has signed digits -1, 2, and 3.\n//   >>> countNums([]) == 0\n//   >>> countNums([-1, 11, -11]) == 1\n//   >>> countNums([1, 1, 2]) == 3\n// const countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n", "canonical_solution": "    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "//   Write a function countNums which takes an array of integers and returns\n//   the number of elements which has a sum of digits > 0.\n//   If a number is negative, then its first signed digit will be negative:\n//   e.g. -123 has signed digits -1, 2, and 3.\n//   >>> countNums([]) == 0\n//   >>> countNums([-1, 11, -11]) == 1\n//   >>> countNums([1, 1, 2]) == 3\n// const countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h > 0) {\n      k++;\n      h -= p;\n    }\n    if (k > 0) p++;\n  }\n  return p;\n// }\n\n// Write a function:\n//   countNumsWithDigits(arr)\n//   which takes an array of integers and returns\n//   the number of elements in the array which has a sum of\n//   digits > 0.\n//   If a number is negative, then its first signed digit will be negative:\n//   e.g. -123 has signed digits -1, 2, and 3.\n//   >>> countNumsWithDigits([-1, 11, -11]) == 1\n//   >>> countNumsWithDigits([1, 1, 2]) == 3\n// const countNumsWithDigits = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h > 0) {\n      k++;\n      h -= p;\n    }\n    if (k > 0) p++;\n  }\n  return p;\n// }\n\n// Write a function:\n//   countNumsWithDigits(arr)\n//   which takes an array of integers and returns\n//   the number of elements in the array which has a sum of\n//   digits > 0.\n//   If a number is negative, then its first signed digit will be negative:\n//   e.g. -123 has signed digits -1, 2, and 3.\n//   >>> countNumsWithDigits([-1, 11, -11]) == 1\n//   >>> countNumsWithDigits([1, 1, 2]) == 3\n// const countNumsWithDigits = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h > 0) {\n      k++;\n      h -= p;\n    }\n    if (k > 0) p++;\n  }\n  return p;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n//   numbers in the array will be randomly ordered. Your task is to determine if\n//   it is possible to get an array sorted in non-decreasing order by performing \n//   the following operation on the given array:\n//       You are allowed to perform right shift operation any number of times.\n//    \n//   One right shift operation means shifting all elements of the array by one\n//   position in the right direction. The last element of the array will be moved to\n//   the starting position in the array i.e. 0th index. \n// \n//   If it is possible to obtain the sorted array by performing the above operation\n//   then return true else return false.\n//   If the given array is empty then return true.\n// \n//   Note: The given list is guaranteed to have unique elements.\n// \n//   For Example:\n//    \n//   moveOneBall([3, 4, 5, 1, 2])==>true\n//   Explanation: By performin 2 right shift operations, non-decreasing order can\n//                be achieved for the given array.\n//   moveOneBall([3, 5, 4, 1, 2])==>false\n//   Explanation:It is not possible to get non-decreasing order for the given\n//               array by performing any number of right shift operations.\n//                \n// const moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n", "canonical_solution": "    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "// We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n//   numbers in the array will be randomly ordered. Your task is to determine if\n//   it is possible to get an array sorted in non-decreasing order by performing \n//   the following operation on the given array:\n//       You are allowed to perform right shift operation any number of times.\n//    \n//   One right shift operation means shifting all elements of the array by one\n//   position in the right direction. The last element of the array will be moved to\n//   the starting position in the array i.e. 0th index. \n// \n//   If it is possible to obtain the sorted array by performing the above operation\n//   then return true else return false.\n//   If the given array is empty then return true.\n// \n//   Note: The given list is guaranteed to have unique elements.\n// \n//   For Example:\n//    \n//   moveOneBall([3, 4, 5, 1, 2])==>true\n//   Explanation: By performin 2 right shift operations, non-decreasing order can\n//                be achieved for the given array.\n//   moveOneBall([3, 5, 4, 1, 2])==>false\n//   Explanation:It is not possible to get non-decreasing order for the given\n//               array by performing any number of right shift operations.\n//                \n// const moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t) {\n      if (k == 0) {\n        k = j;\n      }\n      else {\n        let temp = arr[k]\n        arr[k] = arr[j - 1];\n        arr[j - 1] = temp;\n        k = j;\n      }\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "// In this problem, you will implement a function that takes two lists of numbers,\n//   and determines whether it is possible to perform an exchange of elements\n//   between them to make lst1 a list of only even numbers.\n//   There is no limit on the number of exchanged elements between lst1 and lst2.\n//   If it is possible to exchange elements between the lst1 and lst2 to make\n//   all the elements of lst1 to be even, return \"YES\".\n//   Otherwise, return \"NO\".\n//   For example:\n//   exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n//   exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n//   It is assumed that the input lists will be non-empty.\n// const exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n", "canonical_solution": "  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "// In this problem, you will implement a function that takes two lists of numbers,\n//   and determines whether it is possible to perform an exchange of elements\n//   between them to make lst1 a list of only even numbers.\n//   There is no limit on the number of exchanged elements between lst1 and lst2.\n//   If it is possible to exchange elements between the lst1 and lst2 to make\n//   all the elements of lst1 to be even, return \"YES\".\n//   Otherwise, return \"NO\".\n//   For example:\n//   exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n//   exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n//   It is assumed that the input lists will be non-empty.\n// const exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  let m = lst2.length\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  return (t == m)? \"YES\" : \"NO\"\n// }\n//\n// let exchange = (lst1, lst2) => {\n//   let t = 0\n//   for (let i = 0; i < lst1.length; i++) {\n//     if (lst1[i] % 2 == 0) { t++ }\n//   }\n//   let m = lst2.length\n//   for (let i = 0; i < lst2.length; i++) {\n//     if (lst2[i] % 2 == 0) { t++ }\n//   }\n//   return (t == m)? \"YES\" : \"NO\"\n// }\n//\n// let exchange = (lst1, lst2) => {\n//   return (lst1.length == lst2.length)? \"YES\" : \"NO\"\n// }\n//\n// let exchange = (lst1, lst2) => {\n//   let k = lst1.length\n//   let t = 0\n//   for (let i = 0; i < lst1.length; i++) {\n//     if (lst1[i] % 2 == 0) { t++ }\n//   }\n//   let m = lst2.length\n//   for (let i = 0; i < lst2.length; i++) {\n//     if (lst2[i] % 2 == 0) { t++ }\n//   }\n//   return (t == m)? \"YES\" : \"NO\"\n// }\n//\n// let exchange = (lst1, lst2) => {\n//   let k = lst1.length\n//   let t = 0\n//   for (let i = 0; i < lst1.length; i++) {\n//     if (lst1[i] % 2 == 0) { t++ }\n//   }\n//   let m = lst2.length\n//   for (let i = 0; i < lst2.length; i++) {\n//     if (lst2[i] % 2 == 0) { t++ }\n//   }\n//   return (t == m)? \"YES\" : \"NO\"\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "// Given a string representing a space separated lowercase letters, return a dictionary\n//   of the letter with the most repetition and containing the corresponding count.\n//   If several letters have the same occurrence, return all of them.\n//    \n//   Example:\n//   histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n//   histogram('a b b a') == {'a': 2, 'b': 2}\n//   histogram('a b c a b') == {'a': 2, 'b': 2}\n//   histogram('b b b b a') == {'b': 4}\n//   histogram('') == {}\n// \n// const histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n", "canonical_solution": "  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "// Given a string representing a space separated lowercase letters, return a dictionary\n//   of the letter with the most repetition and containing the corresponding count.\n//   If several letters have the same occurrence, return all of them.\n//    \n//   Example:\n//   histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n//   histogram('a b b a') == {'a': 2, 'b': 2}\n//   histogram('a b c a b') == {'a': 2, 'b': 2}\n//   histogram('b b b b a') == {'b': 4}\n//   histogram('') == {}\n// \n// const histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n// Given a list of words, return the words that appear the same number of times.\n//   Example:\n//   same(\"abc bcd bcd bca\") == [\"bcd\"]\n//   same(\"aaa bbb ccc\") == [\"aaa\", \"bbb\", \"ccc\"]\n//   same(\"\") == []\n// \n// const same = (test) => {\n  let t = test.split(/\\s+/)\n  let same = []\n  for (i in t) {\n    if (t[i] in t) {\n      if (t[i] not in same) {\n        same.push(t[i])\n      }\n    }\n  }\n  return same\n}\n\n// Given a string, return the number of distinct words in the string.\n//   Example:\n//   distinct(\"abc bcd bcd bca\") == 3\n//   distinct(\"aaa bbb ccc\") == 3\n//   distinct(\"\") == 0\n// \n// const distinct = (test) => {\n  let t = test.split(/\\s+/)\n  let distinct = []\n  for (i in t) {\n    if (t[i] in distinct) {\n      distinct.splice(distinct.indexOf(t[i]), 1)\n    }\n    else {\n      distinct.push(t[i])\n    }\n  }\n  return distinct.length\n}\n\n// Given a string and a list of words, return the number of words that appear in the string.\n//   Example:\n//   intersection(\"abc bcd bcd bca\", [\"bcd\", \"bca\"]) == 1\n//   intersection(\"aaa bbb ccc\", [\"aaa\", \"bbb\", \"ccc\"]) == 2\n//   intersection(\"\", [\"aaa\", \"bbb\", \"ccc\"]) == 0\n// \n// const intersection = (test, words) => {\n  let t = test.split(/\\s+/)\n  let intersection = []\n  for (i in words) {\n    if (words[i] in t) {\n      intersection.push(words[i])\n    }\n  }\n  return intersection.length\n}\n\n// Given a string and a list of words, return the number of words that do not appear in the string.\n//   Example:\n//   difference(\"abc bcd bcd bca\", [\"bcd\", \"bca\"]) == 2\n//   difference(\"aaa bbb ccc\", [\"aaa\", \"bbb\", \"ccc\"]) == 1\n//   difference(\"\", [\"aaa\", \"bbb\", \"ccc\"]) == 3\n// \n// const difference = (test, words) => {\n  let t = test.split(/\\s+/)\n  let difference = []\n  for (i in words) {\n    if (words[i] not in t) {\n      difference.push(words[i])\n    }\n  }\n  return difference.length\n}\n\n// Given a string and a list of words, return the number of words in the string that appear in the list of words.\n//   Example:\n//   subset(\"abc bcd bcd bca\", [\"bcd\", \"bca\"]) == 1\n//   subset(\"aaa bbb ccc\", [\"aaa\", \"bbb\", \"ccc\"]) == 1\n//   subset(\"\", [\"aaa\", \"bbb\", \"ccc\"]) == 0\n// \n// const subset = (test, words) => {\n  let t = test.split(/\\s+/)\n  let subset = []\n  for (i in words) {\n    if (words[i] in t) {\n      subset.push(words[i])\n    }\n  }\n  return subset.length\n}\n\n// Given a string and a list of words, return a list of all words that are in the string but not in the list.\n//   Example:\n//   setdiff(\"abc bcd bcd bca\", [\"bcd\", \"bca\"]) == [\"bcd\"]\n//   setdiff(\"aaa bbb ccc\", [\"aaa\", \"bbb\", \"ccc\"]) == [\"bbb\", \"ccc\"]\n//   setdiff(\"\", [\"aaa\", \"bbb\", \"ccc\"]) == [\"aaa\", \"bbb\", \"ccc\"]\n// \n// const setdiff = (test, words) => {\n  let t = test.split(/\\s+/)\n  let setdiff = []\n  for (i in words) {\n    if (words[i] not in t) {\n      setdiff.push(words[i])\n    }\n  }\n  return setdiff\n}\n\n// Given a string and a list of words, return the number of times that each word appears in the string.\n//   Example:\n//   count(\"abc bcd bcd bca\", [\"bcd\", \"bca\"]) == 2\n//   count(\"aaa bbb ccc\", [\"aaa\", \"bbb\", \"ccc\"]) == 3\n//   count(\"\", [\"aaa\", \"bbb\", \"ccc\"]) == 0\n// \n// const count = (test, words) => {\n  let t = test.split(/\\s+/)\n  let count = {}\n  for (i in words) {\n    if (words[i] in t) {\n      count[words[i]]++\n    }\n  }\n  return count\n}\n\n// Given"}
{"task_id": "JavaScript/112", "prompt": "// Task\n//   We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n//   then check if the result string is palindrome.\n//   A string is called palindrome if it reads the same backward as forward.\n//   You should return a tuple containing the result string and true/false for the check.\n//   Example\n//   For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n//   For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n//   For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n// const reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n", "canonical_solution": "  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "// Task\n//   We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n//   then check if the result string is palindrome.\n//   A string is called palindrome if it reads the same backward as forward.\n//   You should return a tuple containing the result string and true/false for the check.\n//   Example\n//   For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n//   For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n//   For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n// const reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let a = t\n  t = ''\n  for (let i = a.length - 1; i >= 0; i--) {\n    t += a[i]\n  }\n  return [t, (s === t)? true : false]\n// }\n\n// Test\n// let s = 'abcdedcba'\n// let c = 'ab'\n// console.log(reverseDelete(s, c))\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "// Given a list of strings, where each string consists of only digits, return a list.\n//   Each element i of the output should be \"the number of odd elements in the\n//   string i of the input.\" where all the i's should be replaced by the number\n//   of odd digits in the i'th string of the input.\n// \n//   >>> oddCount(['1234567'])\n//   [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n//   >>> oddCount(['3',\"11111111\"])\n//   [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n//    \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n// const oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n", "canonical_solution": "    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "// Given a list of strings, where each string consists of only digits, return a list.\n//   Each element i of the output should be \"the number of odd elements in the\n//   string i of the input.\" where all the i's should be replaced by the number\n//   of odd digits in the i'th string of the input.\n// \n//   >>> oddCount(['1234567'])\n//   [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n//   >>> oddCount(['3',\"11111111\"])\n//   [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n//    \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n// const oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\nconsole.log(oddCount(['1234567']));\nconsole.log(oddCount(['3',\"11111111\"]));\n\n/*\n  let p = 0\n  let h = lst.length\n  for (let i = 0; i < h; i++) {\n    p += lst[i].length % 2 == 1\n  }\n  return p\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "//   Given an array of integers nums, find the minimum sum of any non-empty sub-array\n//   of nums.\n//   Example\n//   minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n//   minSubArraySum([-1, -2, -3]) == -6\n// const minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n", "canonical_solution": "      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "//   Given an array of integers nums, find the minimum sum of any non-empty sub-array\n//   of nums.\n//   Example\n//   minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n//   minSubArraySum([-1, -2, -3]) == -6\n// const minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n\n// const minSubArraySum = (nums) => {\n  //   const maxIndex = -1\n  //   const minSum = Number.MAX_VALUE\n  //   for (let i = 0; i < nums.length; i++) {\n  //     const sum = 0\n  //     for (let j = i; j <= nums.length; j++) {\n  //       sum += nums[j]\n  //     }\n  //     if (sum < minSum) {\n  //       minSum = sum\n  //       maxIndex = i\n  //     }\n  //   }\n  //   return maxIndex\n  // }\n\n// const minSubArraySum = (nums) => {\n  //   const minSum = Number.MAX_VALUE\n  //   let index = -1\n  //   for (let i = 0; i < nums.length; i++) {\n  //     const sum = 0\n  //     for (let j = i; j < nums.length; j++) {\n  //       sum += nums[j]\n  //     }\n  //     if (sum < minSum) {\n  //       minSum = sum\n  //       index = i\n  //     }\n  //   }\n  //   return index\n  // }\n\n// const minSubArraySum = (nums) => {\n  //   const minSum = Number.MAX_VALUE\n  //   let minIndex = -1\n  //   for (let i = 0; i < nums.length; i++) {\n  //     const sum = 0\n  //     for (let j = i; j < nums.length; j++) {\n  //       sum += nums[j]\n  //     }\n  //     if (sum < minSum) {\n  //       minSum = sum\n  //       minIndex = i\n  //     }\n  //   }\n  //   return minIndex\n  // }\n\n// const minSubArraySum = (nums) => {\n  //   let minSum = Number.MAX_VALUE\n  //   let index = -1\n  //   for (let i = 0; i < nums.length; i++) {\n  //     let sum = 0\n  //     for (let j = i; j < nums.length; j++) {\n  //       sum += nums[j]\n  //     }\n  //     if (sum < minSum) {\n  //       minSum = sum\n  //       index = i\n  //     }\n  //   }\n  //   return index\n  // }\n\nconst minSubArraySum = (nums) => {\n  let minSum = Number.MAX_VALUE\n  let minIndex = -1\n  for (let i = 0; i < nums.length; i++) {\n    const sum = 0\n    for (let j = i; j < nums.length; j++) {\n      sum += nums[j]\n    }\n    if (sum < minSum) {\n      minSum = sum\n      minIndex = i\n    }\n  }\n  return minIndex\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "//   You are given a rectangular grid of wells. Each row represents a single well,\n//   and each 1 in a row represents a single unit of water.\n//   Each well has a corresponding bucket that can be used to extract water from it, \n//   and all buckets have the same capacity.\n//   Your task is to use the buckets to empty the wells.\n//   Output the number of times you need to lower the buckets.\n// \n//   Example 1:\n//       Input: \n//           grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n//           bucket_capacity : 1\n//       Output: 6\n// \n//   Example 2:\n//       Input: \n//           grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n//           bucket_capacity : 2\n//       Output: 5\n//    \n//   Example 3:\n//       Input: \n//           grid : [[0,0,0], [0,0,0]]\n//           bucket_capacity : 5\n//       Output: 0\n// \n//   Constraints:\n//       * all wells have the same length\n//       * 1 <= grid.length <= 10^2\n//       * 1 <= grid[:,1].length <= 10^2\n//       * grid[i][j] -> 0 | 1\n//       * 1 <= capacity <= 10\n// const maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n", "canonical_solution": "    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "//   You are given a rectangular grid of wells. Each row represents a single well,\n//   and each 1 in a row represents a single unit of water.\n//   Each well has a corresponding bucket that can be used to extract water from it, \n//   and all buckets have the same capacity.\n//   Your task is to use the buckets to empty the wells.\n//   Output the number of times you need to lower the buckets.\n// \n//   Example 1:\n//       Input: \n//           grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n//           bucket_capacity : 1\n//       Output: 6\n// \n//   Example 2:\n//       Input: \n//           grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n//           bucket_capacity : 2\n//       Output: 5\n//    \n//   Example 3:\n//       Input: \n//           grid : [[0,0,0], [0,0,0]]\n//           bucket_capacity : 5\n//       Output: 0\n// \n//   Constraints:\n//       * all wells have the same length\n//       * 1 <= grid.length <= 10^2\n//       * 1 <= grid[:,1].length <= 10^2\n//       * grid[i][j] -> 0 | 1\n//       * 1 <= capacity <= 10\n// const maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m > p) { p = m }\n  }\n  return p\n}\n\n// TESTS\n\n// let p = solve(grid, capacity)\n// console.log(p)\n\n// let grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n// let capacity = 1\n// let p = solve(grid, capacity)\n// console.log(p)\n\n// let grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// let capacity = 2\n// let p = solve(grid, capacity)\n// console.log(p)\n\n// let grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n// let capacity = 5\n// let p = solve(grid, capacity)\n// console.log(p)\n\n// let grid = [[0,0,0], [0,0,0]]\n// let capacity = 5\n// let p = solve(grid, capacity)\n// console.log(p)\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "//   In this Kata, you have to sort an array of non-negative integers according to\n//   number of ones in their binary representation in ascending order.\n//   For similar number of ones, sort based on decimal value.\n// \n//   It must be implemented like this:\n//   >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n//   >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n//   >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n// const sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n", "canonical_solution": "      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "//   In this Kata, you have to sort an array of non-negative integers according to\n//   number of ones in their binary representation in ascending order.\n//   For similar number of ones, sort based on decimal value.\n// \n//   It must be implemented like this:\n//   >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n//   >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n//   >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n// const sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1) {\n        ind = k\n      }\n    }\n    if (j!= ind) {\n      let temp = p[j]\n      p[j] = p[ind]\n      p[ind] = temp\n    }\n  }\n  return p\n}\n\n//   In this Kata, you have to print all the elements of the array in \n//   increasing order.\n//   It must be implemented like this:\n//   >>> printArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n//   >>> printArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n//   >>> printArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n// const printArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[ind] < p[k]) {\n        let temp = p[ind]\n        p[ind] = p[k]\n        p[k] = temp\n      }\n    }\n    console.log(p[ind])\n  }\n// }\n// \n//   In this Kata, you have to print all the elements of the array in \n//   decreasing order.\n//   It must be implemented like this:\n//   >>> printArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n//   >>> printArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n//   >>> printArray([1, 0, 2, 3, 4]) [4, 3, 2, 1, 0]\n// const printArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[ind] > p[k]) {\n        let temp = p[ind]\n        p[ind] = p[k]\n        p[k] = temp\n      }\n    }\n    console.log(p[ind])\n  }\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "// Given a string s and a natural number n, you have been tasked to implement \n//   a function that returns a list of all words from string s that contain exactly \n//   n consonants, in order these words appear in the string s.\n//   If the string s is empty then the function should return an empty list.\n//   Note: you may assume the input string contains only letters and spaces.\n//   Examples:\n//   selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n//   selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n//   selectWords(\"simple white space\", 2) ==> []\n//   selectWords(\"Hello world\", 4) ==> [\"world\"]\n//   selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n// const selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n", "canonical_solution": "        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "// Given a string s and a natural number n, you have been tasked to implement \n//   a function that returns a list of all words from string s that contain exactly \n//   n consonants, in order these words appear in the string s.\n//   If the string s is empty then the function should return an empty list.\n//   Note: you may assume the input string contains only letters and spaces.\n//   Examples:\n//   selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n//   selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n//   selectWords(\"simple white space\", 2) ==> []\n//   selectWords(\"Hello world\", 4) ==> [\"world\"]\n//   selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n// const selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n        t[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n        l++\n      }\n    }\n    if (l == n) {\n      k.push(t[i])\n    }\n  }\n  return k\n}\n\n// const selectWords = (s, n) => {\n//   let t = s.split(/\\s/)\n//   if (s == '') { return [] }\n//   let k = []\n//   for (let i = 0; i < t.length; i++) {\n//     let l = 0\n//     for (let j = 0; j < t[i].length; j++) {\n//       if (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n//         t[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n//         l++\n//       }\n//     }\n//     if (l == n) {\n//       k.push(t[i])\n//     }\n//   }\n//   return k\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "// You are given a word. Your task is to find the closest vowel that stands between \n//   two consonants from the right side of the word (case sensitive).\n//    \n//   Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n//   find any vowel met the above condition. \n// \n//   You may assume that the given string contains English letter only.\n// \n//   Example:\n//   getClosestVowel(\"yogurt\") ==> \"u\"\n//   getClosestVowel(\"FULL\") ==> \"U\"\n//   getClosestVowel(\"quick\") ==> \"\"\n//   getClosestVowel(\"ab\") ==> \"\"\n// const getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n", "canonical_solution": "      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "// You are given a word. Your task is to find the closest vowel that stands between \n//   two consonants from the right side of the word (case sensitive).\n//    \n//   Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n//   find any vowel met the above condition. \n// \n//   You may assume that the given string contains English letter only.\n// \n//   Example:\n//   getClosestVowel(\"yogurt\") ==> \"u\"\n//   getClosestVowel(\"FULL\") ==> \"U\"\n//   getClosestVowel(\"quick\") ==> \"\"\n//   getClosestVowel(\"ab\") ==> \"\"\n// const getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n     !(word[i]!= 'a' && word[i]!= 'e' && word[i]!= 'i' && word[i]!= 'o' && word[i]!= 'u' && word[i]!= 'A' &&\n        word[i]!= 'U' && word[i]!= 'O' && word[i]!= 'I' && word[i]!= 'E')\n      &&\n      (word[i + 1]!= 'a' && word[i + 1]!= 'e' && word[i + 1]!= 'i' && word[i + 1]!= 'o' && word[i + 1]!= 'u' && word[i + 1]!= 'A' &&\n        word[i + 1]!= 'U' && word[i + 1]!= 'O' && word[i + 1]!= 'I' && word[i + 1]!= 'E')\n      &&\n      (word[i]!= 'y' && word[i]!= 'Y' && word[i]!= 'b' && word[i]!= 'd' && word[i]!= 'g' && word[i]!= 'h' && word[i]!= 'j' &&\n        word[i]!= 'k' && word[i]!='m' && word[i]!= 'n' && word[i]!= 'p' && word[i]!= 'r' && word[i]!='s' &&\n        word[i]!= 't' && word[i]!= 'v' && word[i]!= 'x' && word[i]!= 'z' && word[i]!= 'A' && word[i]!= 'B' &&\n        word[i]!= 'D' && word[i]!= 'G' && word[i]!= 'H' && word[i]!= 'J' && word[i]!= 'K' && word[i]!= 'M' &&\n        word[i]!= 'N' && word[i]!= 'P' && word[i]!= 'R' && word[i]!= 'S' && word[i]!= 'T' && word[i]!= 'V' &&\n        word[i]!= 'X' && word[i]!= 'Z'\n      )\n    ) {\n      return word[i];\n    }\n  }\n  return '';\n};\n\n// https://www.hackerrank.com/challenges/the-smallest-element-in-the-stack/problem\n// const getSmallest = (array) => {\n  //   return array[0];\n// };\n// const isPalindrome = (word) => {\n  //   let reversed = '';\n  //   for (let i = word.length - 1; i >= 0; i--) {\n  //     reversed += word[i];\n  //   }\n  //   return word === reversed;\n// };\n// const test = (n) => {\n  //   let i = 0;\n  //   let stack = [];\n  //   while (i <= n) {\n  //     stack.push(i);\n  //     i++;\n  //   }\n  //   let smallest = stack[0];\n  //   for (let i = 1; i < stack.length; i++) {\n  //     if (smallest > stack[i]) {\n  //       smallest = stack[i];\n  //     }\n  //   }\n  //   return smallest;\n// };\n\n// const test = (n) => {\n  //   let stack = [];\n  //   let smallest = 0;\n  //   while (n > 0) {\n  //     stack.push(n);\n  //     n--;\n  //   }\n  //   while (stack.length > 0) {\n  //     let num = stack.pop();\n  //     if (num < smallest) {\n  //       smallest = num;\n  //     }\n  //   }\n  //   return smallest;\n// };\n\n// const test = (n) => {\n  //   let stack = [];\n  //   let smallest = Infinity;\n  //   while (n > 0) {\n  //     stack.push(n);\n  //     n--;\n  //   }\n  //   while (stack.length > 0) {\n  //     let num = stack.pop();\n  //     if (num < smallest) {\n  //       smallest = num;\n  //     }\n  //   }\n  //   return smallest;\n// };\n\n// const test = (n) => {\n  //   let stack = [];\n  //   let smallest = Infinity;\n  //   while (n > 0) {\n  //     stack.push(n);\n  //     n--;\n  //   }\n  //   while (stack.length > 0) {\n  //     let num = stack.pop();\n  //     if (num < smallest) {\n  //       smallest = num;\n  //     }\n  //   }\n  //   return smallest;\n// };\n\n// const test = (n) => {\n  //   let stack = [];\n  //   let smallest = Infinity;\n  //   while (n > 0) {\n  //     stack.push(n);\n  //     n--;\n  //   }\n  //   while (stack.length > 0) {\n  //     let num = stack.pop();\n  //     if (num < smallest) {\n  //       smallest = num;\n  //     }\n  //   }\n  //   return smallest;\n// };\n\n// const test = (n) => {"}
{"task_id": "JavaScript/119", "prompt": "// You are given a list of two strings, both strings consist of open\n//   parentheses '(' or close parentheses ')' only.\n//   Your job is to check if it is possible to concatenate the two strings in\n//   some order, that the resulting string will be good.\n//   A string S is considered to be good if and only if all parentheses in S\n//   are balanced. For example: the string '(())()' is good, while the string\n//   '())' is not.\n//   Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n//   Examples:\n//   matchParens(['()(', ')']) == 'Yes'\n//   matchParens([')', ')']) == 'No'\n// const matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n", "canonical_solution": "  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "// You are given a list of two strings, both strings consist of open\n//   parentheses '(' or close parentheses ')' only.\n//   Your job is to check if it is possible to concatenate the two strings in\n//   some order, that the resulting string will be good.\n//   A string S is considered to be good if and only if all parentheses in S\n//   are balanced. For example: the string '(())()' is good, while the string\n//   '())' is not.\n//   Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n//   Examples:\n//   matchParens(['()(', ')']) == 'Yes'\n//   matchParens([')', ')']) == 'No'\n// const matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  return u == 1 && y == 0? 'Yes' : 'No'\n\n// }\n\n// function matchParens(lst) {\n  //   let p1 = lst[0].split('')\n  //   let p2 = lst[1].split('')\n  //   let len1 = p1.length\n  //   let len2 = p2.length\n  //   let l = len1\n  //   let i = 0\n  //   let j = 0\n  //   while (i < l) {\n  //     if (p1[i] == '(') {\n  //       j = 0\n  //       while (j < len2) {\n  //         if (p2[j] == '(') {\n  //           l--\n  //           break;\n  //         }\n  //         j++\n  //       }\n  //     }\n  //     if (p1[i] == ')') {\n  //       j = 0\n  //       while (j < len2) {\n  //         if (p2[j] == ')') {\n  //           l--\n  //           break;\n  //         }\n  //         j++\n  //       }\n  //     }\n  //     i++\n  //   }\n  //   return l == 0? 'Yes' : 'No'\n  // }\n\n// function matchParens(lst) {\n  //   let p1 = lst[0].split('')\n  //   let p2 = lst[1].split('')\n  //   let len1 = p1.length\n  //   let len2 = p2.length\n  //   let l = len1\n  //   let i = 0\n  //   let j = 0\n  //   while (i < l) {\n  //     if (p1[i] == '(') {\n  //       j = 0\n  //       while (j < len2) {\n  //         if (p2[j] == ')') {\n  //           l--\n  //           break;\n  //         }\n  //         j++\n  //       }\n  //     }\n  //     if (p1[i] == ')') {\n  //       j = 0\n  //       while (j < len2) {\n  //         if (p2[j] == '(') {\n  //           l--\n  //           break;\n  //         }\n  //         j++\n  //       }\n  //     }\n  //     i++\n  //   }\n  //   return l == 0? 'Yes' : 'No'\n  // }\n\n// function matchParens(lst) {\n  //   let p1 = lst[0].split('')\n  //   let p2 = lst[1].split('')\n  //   let len1 = p1.length\n  //   let len2 = p2.length\n  //   let l = len1\n  //   let i = 0\n  //   let j = 0\n  //   while (i < l) {\n  //     if (p1[i] == '(') {\n  //       j = 0\n  //       while (j < len2) {\n  //         if (p2[j] == ')') {\n  //           l--\n  //           break;\n  //         }\n  //         j++\n  //       }\n  //     }\n  //     if (p1[i] == ')') {\n  //       j = 0\n  //       while (j < len2) {\n  //         if (p2[j] == '(') {\n  //           l--\n  //           break;\n  //         }\n  //         j++\n  //       }\n  //     }\n  //     i++\n  //   }\n  //   return l == 0? 'Yes' : 'No'\n  // }\n\n// function matchParens(lst) {\n  //   let p1 = lst[0].split('')\n  //   let p2 = lst[1].split('')\n  //   let len1 = p1.length\n  //   let len2 = p2.length\n  //   let l = len1\n  //   let i = 0\n  //   let j = 0\n  //   while (i < l) {\n  //     if (p1[i] == '(') {\n  //       j = 0\n  //       while (j < len2) {\n  //         if (p2[j] == ')') {\n  //           l--\n  //           break;\n  //         }\n  //         j++\n  //       }\n  //     }\n  //     "}
{"task_id": "JavaScript/120", "prompt": "//   Given an array arr of integers and a positive integer k, return a sorted list \n//   of length k with the maximum k numbers in arr.\n// \n//   Example 1:\n// \n//       Input: arr = [-3, -4, 5], k = 3\n//       Output: [-4, -3, 5]\n// \n//   Example 2:\n// \n//       Input: arr = [4, -4, 4], k = 2\n//       Output: [4, 4]\n// \n//   Example 3:\n// \n//       Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n//       Output: [2]\n// \n//   Note:\n//       1. The length of the array will be in the range of [1, 1000].\n//       2. The elements in the array will be in the range of [-1000, 1000].\n//       3. 0 <= k <= len(arr)\n// const maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n", "canonical_solution": "    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "//   Given an array arr of integers and a positive integer k, return a sorted list \n//   of length k with the maximum k numbers in arr.\n// \n//   Example 1:\n// \n//       Input: arr = [-3, -4, 5], k = 3\n//       Output: [-4, -3, 5]\n// \n//   Example 2:\n// \n//       Input: arr = [4, -4, 4], k = 2\n//       Output: [4, 4]\n// \n//   Example 3:\n// \n//       Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n//       Output: [2]\n// \n//   Note:\n//       1. The length of the array will be in the range of [1, 1000].\n//       2. The elements in the array will be in the range of [-1000, 1000].\n//       3. 0 <= k <= len(arr)\n// const maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (k!== j) {\n      [p[j], p[ind]] = [p[ind], p[j]]\n    }\n  }\n  return p\n  // console.log(p)\n}\n\n// const maximum = (arr, k) => {\n//   let res = []\n//   let max = 0\n//   let maxNum = 0\n//   for (let i = 0; i < k; i++) {\n//     let cur = arr[i]\n//     if (cur > max) {\n//       [max, maxNum] = [cur, i]\n//     }\n//   }\n//   for (let i = k; i < arr.length; i++) {\n//     if (arr[i] === maxNum) {\n//       res.push(arr[i])\n//     }\n//   }\n//   return res\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n//    \n// \n//   Examples\n//   solution([5, 8, 7, 1]) ==> 12\n//   solution([3, 3, 3, 3, 3]) ==> 9\n//   solution([30, 13, 24, 321]) ==>0\n// const solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n//    \n// \n//   Examples\n//   solution([5, 8, 7, 1]) ==> 12\n//   solution([3, 3, 3, 3, 3]) ==> 9\n//   solution([30, 13, 24, 321]) ==>0\n// const solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "//   Given a non-empty array of integers arr and an integer k, return\n//   the sum of the elements with at most two digits from the first k elements of arr.\n// \n//   Example:\n// \n//       Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n//       Output: 24 # sum of 21 + 3\n// \n//   Constraints:\n//       1. 1 <= len(arr) <= 100\n//       2. 1 <= k <= len(arr)\n// const addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "//   Given a non-empty array of integers arr and an integer k, return\n//   the sum of the elements with at most two digits from the first k elements of arr.\n// \n//   Example:\n// \n//       Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n//       Output: 24 # sum of 21 + 3\n// \n//   Constraints:\n//       1. 1 <= len(arr) <= 100\n//       2. 1 <= k <= len(arr)\n// const addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n// function addTwoNumbers(num1, num2) {\n//   let result = 0\n//   for (let i = 0; i < 2; i++) {\n//     result += (num1[i] - 48) + (num2[i] - 48)\n//   }\n//   return result\n// }\n\n// function addThreeNumbers(num1, num2, num3) {\n//   let result = 0\n//   for (let i = 0; i < 3; i++) {\n//     result += (num1[i] - 48) + (num2[i] - 48) + (num3[i] - 48)\n//   }\n//   return result\n// }\n\n// function addFourNumbers(num1, num2, num3, num4) {\n//   let result = 0\n//   for (let i = 0; i < 4; i++) {\n//     result += (num1[i] - 48) + (num2[i] - 48) + (num3[i] - 48) + (num4[i] - 48)\n//   }\n//   return result\n// }\n\n// function addFiveNumbers(num1, num2, num3, num4, num5) {\n//   let result = 0\n//   for (let i = 0; i < 5; i++) {\n//     result += (num1[i] - 48) + (num2[i] - 48) + (num3[i] - 48) + (num4[i] - 48) + (num5[i] - 48)\n//   }\n//   return result\n// }\n\n// function addSixNumbers(num1, num2, num3, num4, num5, num6) {\n//   let result = 0\n//   for (let i = 0; i < 6; i++) {\n//     result += (num1[i] - 48) + (num2[i] - 48) + (num3[i] - 48) + (num4[i] - 48) + (num5[i] - 48) + (num6[i] - 48)\n//   }\n//   return result\n// }\n\n// function addSevenNumbers(num1, num2, num3, num4, num5, num6, num7) {\n//   let result = 0\n//   for (let i = 0; i < 7; i++) {\n//     result += (num1[i] - 48) + (num2[i] - 48) + (num3[i] - 48) + (num4[i] - 48) + (num5[i] - 48) + (num6[i] - 48) + (num7[i] - 48)\n//   }\n//   return result\n// }\n\n// function addEightNumbers(num1, num2, num3, num4, num5, num6, num7, num8) {\n//   let result = 0\n//   for (let i = 0; i < 8; i++) {\n//     result += (num1[i] - 48) + (num2[i] - 48) + (num3[i] - 48) + (num4[i] - 48) + (num5[i] - 48) + (num6[i] - 48) + (num7[i] - 48) + (num8[i] - 48)\n//   }\n//   return result\n// }\n\n// function addNineNumbers(num1, num2, num3, num4, num5, num6, num7, num8, num9) {\n//   let result = 0\n//   for (let i = 0; i < 9; i++) {\n//     result += (num1[i] - 48) + (num2[i] - 48) + (num3[i] - 48) + (num4[i] - 48) + (num5[i] - 48) + (num6[i] - 48) + (num7[i] - 48) + (num8[i] - 48) + (num9[i] - 48)\n//   }\n//   return result\n// }\n\n// function addTenNumbers(num1, num2, num3, num4, num5, num6, num7, num8, num9, num10) {\n//   let result = 0\n//   for (let i = 0; i < 10; i++) {\n//     result += (num1[i] - 48) + (num2[i] - 48) + (num3[i] - 48) + (num4[i] - 48) + (num5[i] - 48) + (num6[i] - 48) + (num7[i] - 48) + (num8[i] - 48) + (num9[i] - 48) + (num10[i] - 48)\n//   }\n//   return result\n// }\n\n// function addElevenNumbers(num1, num2, num3, num4, num5, num6, num7, num8, num9, num10, num11) {\n//   let result = 0\n//   for (let i = 0; i < 11; i++) {\n//     result += (num1[i] - 48) + (num2[i] - 48) + (num3[i] - 48) + (num4[i] - 48) + (num5[i] - 48) + (num6[i] - 48) + (num7[i] - 48) + (num8[i] - 48) + (num9[i] - 48) + (num10[i] - 48) + (num11[i] - 48)\n//   }\n//   return result\n// }\n\n"}
{"task_id": "JavaScript/123", "prompt": "//   Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// \n//   The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n//   as follows: start with any positive integer n. Then each term is obtained from the \n//   previous term as follows: if the previous term is even, the next term is one half of \n//   the previous term. If the previous term is odd, the next term is 3 times the previous\n//   term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// \n//   Note: \n//       1. Collatz(1) is [1].\n//       2. returned list sorted in increasing order.\n// \n//   For example:\n//   getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// const getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n", "canonical_solution": "  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "//   Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// \n//   The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n//   as follows: start with any positive integer n. Then each term is obtained from the \n//   previous term as follows: if the previous term is even, the next term is one half of \n//   the previous term. If the previous term is odd, the next term is 3 times the previous\n//   term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// \n//   Note: \n//       1. Collatz(1) is [1].\n//       2. returned list sorted in increasing order.\n// \n//   For example:\n//   getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// const getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n\n// const getOddCollatz = (n) => {\n//   if (n === 1) { return [1] }\n//   if (n === 2) { return [2] }\n//   let t = n\n//   while (t % 2!= 0) {\n//     t = 3 * t + 1\n//   }\n//   return [t, t / 2]\n// }\n\n// const getOddCollatz = (n) => {\n//   if (n === 1) { return [1] }\n//   let t = n\n//   let c = 1\n//   while (t % 2!= 0) {\n//     t = 3 * t + 1\n//     c = 2 * c + 1\n//   }\n//   return [t, t / 2, c]\n// }\n\n// const getOddCollatz = (n) => {\n//   if (n === 1) { return [1] }\n//   if (n === 2) { return [2] }\n//   let t = n\n//   let c = 1\n//   while (t % 2!= 0) {\n//     t = 3 * t + 1\n//     c = 2 * c + 1\n//   }\n//   return [t, t / 2, c]\n// }\n\n// const getOddCollatz = (n) => {\n//   if (n === 1) { return [1] }\n//   let t = n\n//   let c = 1\n//   while (t % 2!= 0) {\n//     t = 3 * t + 1\n//     c = 2 * c + 1\n//   }\n//   return [t, t / 2, c]\n// }\n\n// const getOddCollatz = (n) => {\n//   if (n === 1) { return [1] }\n//   let t = n\n//   let c = 1\n//   while (t % 2!= 0) {\n//     t = 3 * t + 1\n//     c = 2 * c + 1\n//   }\n//   return [t, t / 2, c]\n// }\n\nconst getOddCollatz = (n) => {\n  let t = n\n  let c = 1\n  while (t % 2!= 0) {\n    t = 3 * t + 1\n    c = 2 * c + 1\n  }\n  return [t, t / 2, c]\n}\n\nconst getOddCollatz = (n) => {\n  let t = n\n  let c = 1\n  while (t % 2!= 0) {\n    t = 3 * t + 1\n    c = 2 * c + 1\n  }\n  return [t, t / 2, c]\n}\n\nconst getOddCollatz = (n) => {\n  let t = n\n  let c = 1\n  while (t % 2!= 0) {\n    t = 3 * t + 1\n    c = 2 * c + 1\n  }\n  return [t, t / 2, c]\n}\n\nconst getOddCollatz = (n) => {\n  let t = n\n  let c = 1\n  while (t % 2!= 0) {\n    t = 3 * t + 1\n    c = 2 * c + 1\n  }\n  return [t, t / 2, c]\n}\n\nconst getOddCollatz = (n) => {\n  let t = n\n  let c = 1\n  while (t % 2!= 0) {\n    t = 3 * t + 1\n    c = 2 * c + 1\n  }\n  return [t, t / 2, c]\n}\n\nconst getOddCollatz = (n) => {\n  let t = n\n  let c = 1\n  while (t % 2!= 0) {\n    t = 3 * t + 1\n    c = 2 * c + 1\n  }\n  return [t, t / 2, c]\n}\n\nconst getOddCollatz = (n) => {\n  let t = n\n  let c = 1\n  while (t % 2!= 0) {\n    t = 3 * t + 1\n    c = 2 * c + 1\n  }\n  return [t, t / 2, c]\n}\n\nconst getOddCollatz = (n) => {\n  let t = n\n  let c = 1\n  while (t % 2!= 0) {\n    t = 3 * t + 1\n    c = 2 * c + 1\n  }\n  return [t, t / 2, c]\n}\n\nconst getOddCollatz = (n) => {\n  let t = n\n  let c = 1\n  while (t % 2!= 0) {\n    t = 3 * t + 1\n    c = 2 * c + 1\n  }\n  return [t, t / 2, c]\n}\n\nconst getOddCollatz = (n) => {\n  let t = n\n  let c = 1\n  while (t %"}
{"task_id": "JavaScript/124", "prompt": "// You have to write a function which validates a given date string and\n//   returns true if the date is valid otherwise false.\n//   The date is valid if all of the following rules are satisfied:\n//   1. The date string is not empty.\n//   2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n//   3. The months should not be less than 1 or higher than 12.\n//   4. The date should be in the format: mm-dd-yyyy\n// \n//   for example: \n//   validDate('03-11-2000') => true\n// \n//   validDate('15-01-2012') => false\n// \n//   validDate('04-0-2040') => false\n// \n//   validDate('06-04-2020') => true\n// \n//   validDate('06/04/2020') => false\n// const validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n", "canonical_solution": "  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "// You have to write a function which validates a given date string and\n//   returns true if the date is valid otherwise false.\n//   The date is valid if all of the following rules are satisfied:\n//   1. The date string is not empty.\n//   2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n//   3. The months should not be less than 1 or higher than 12.\n//   4. The date should be in the format: mm-dd-yyyy\n// \n//   for example: \n//   validDate('03-11-2000') => true\n// \n//   validDate('15-01-2012') => false\n// \n//   validDate('04-0-2040') => false\n// \n//   validDate('06-04-2020') => true\n// \n//   validDate('06/04/2020') => false\n// const validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length!= 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if (t[0] == 2 && t[1] == 29) { return false }\n  if (t[1] == 2 && t[0] > 28) { return false }\n  if (t[1] == 2 && t[0] == 28) { return false }\n  if (t[1] > 12) { return false }\n  if (t[0] > 31) { return false }\n  if (t[1] > 31) { return false }\n  if (t[2] < '01' || t[2] > '31') { return false }\n  if (t[1] == '01' && t[2] > '31') { return false }\n  if (t[1] == '01' && t[2] == '31') { return false }\n  if (t[1] == '02' && t[2] < '01' || t[2] > '31') { return false }\n  if (t[1] == '02' && t[2] == '01' && t[2] > '31') { return false }\n  if (t[1] == '02' && t[2] == '31') { return false }\n  if (t[1] == '03' && t[2] < '01' || t[2] > '31') { return false }\n  if (t[1] == '03' && t[2] == '01' && t[2] > '31') { return false }\n  if (t[1] == '03' && t[2] == '31') { return false }\n  if (t[1] == '04' && t[2] < '01' || t[2] > '31') { return false }\n  if (t[1] == '04' && t[2] == '01' && t[2] > '31') { return false }\n  if (t[1] == '04' && t[2] == '31') { return false }\n  if (t[1] == '05' && t[2] < '01' || t[2] > '31') { return false }\n  if (t[1] == '05' && t[2] == '01' && t[2] > '31') { return false }\n  if (t[1] == '05' && t[2] == '31') { return false }\n  if (t[1] == '06' && t[2] < '01' || t[2] > '31') { return false }\n  if (t[1] == '06' && t[2] == '01' && t[2] > '31') { return false }\n  if (t[1] == '06' && t[2] == '31') { return false }\n  if (t[1] == '07' && t[2] < '01' || t[2] > '31') { return false }\n  if (t[1] == '07' && t[2] == '01' && t[2] > '31') { return false }\n  if (t[1] == '07' && t[2] == '31') { return false }\n  if (t[1] == '08' && t[2] < '01' || t[2] > '31') { return false }\n  if (t[1] == '08' && t[2] == '01' && t[2] > '31') { return false }\n  if (t[1] == '08' && t[2] == '31') { return false }\n  if (t[1] == '09' && t[2] < '01' || t[2] > '31') { return false }\n  if (t[1] == '09' && t[2] == '01' && t[2] > '31') { return false }\n  if (t[1] == '09' && t[2] == '31') { return false }\n  if (t[1] == '10' && t[2] < '01' || t[2] > '31') { return false }\n  if (t[1] == '10' && t[2] == '01' && t[2] > '31') { return false }\n  if (t[1] == '10' && t[2] == '31') { return false }\n  if (t[1] == '11' && t[2] < '01' || t[2] > '31') { return false }\n  if (t[1] == '11' && t[2] == '01' && t[2] > '31') { return false }\n  if (t[1] == '11' && t[2] == '31') { return false }\n  if (t[1] == '12' && t[2] < '01' || t[2] > '31') { return false }\n  if (t[1] == '12' && t[2] == '01' && t[2] > '31') { return"}
{"task_id": "JavaScript/125", "prompt": "// Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n//   should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n//   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n//   Examples\n//   splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n//   splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n//   splitWords(\"abcdef\") == 3\n// const splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n", "canonical_solution": "      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "// Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n//   should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n//   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n//   Examples\n//   splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n//   splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n//   splitWords(\"abcdef\") == 3\n// const splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      let r = []\n      let c = 0\n      let l = txt.length\n      while (p < l) {\n        if (txt[p] ==='') {\n          r.push(txt.slice(c, p))\n          c = p + 1\n        }\n        p++\n      }\n      r.push(txt.slice(c, l))\n      return r\n    }\n  }\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "// Given a list of numbers, return whether or not they are sorted\n//   in ascending order. If list has more than 1 duplicate of the same\n//   number, return false. Assume no negative numbers and only integers.\n//   Examples\n//   isSorted([5]) ➞ true\n//   isSorted([1, 2, 3, 4, 5]) ➞ true\n//   isSorted([1, 3, 2, 4, 5]) ➞ false\n//   isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n//   isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n//   isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n//   isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n//   isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n// const isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n", "canonical_solution": "      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "// Given a list of numbers, return whether or not they are sorted\n//   in ascending order. If list has more than 1 duplicate of the same\n//   number, return false. Assume no negative numbers and only integers.\n//   Examples\n//   isSorted([5]) ➞ true\n//   isSorted([1, 2, 3, 4, 5]) ➞ true\n//   isSorted([1, 3, 2, 4, 5]) ➞ false\n//   isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n//   isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n//   isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n//   isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n//   isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n// const isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup > 1) { return false }\n    }\n    pre = lst[i]\n  }\n  return true\n  // };\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "// You are given two intervals,\n//   where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n//   The given intervals are closed which means that the interval (start, end)\n//   includes both start and end.\n//   For each given interval, it is assumed that its start is less or equal its end.\n//   Your task is to determine whether the length of intersection of these two \n//   intervals is a prime number.\n//   Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n//   which its length is 1, which not a prime number.\n//   If the length of the intersection is a prime number, return \"YES\",\n//   otherwise, return \"NO\".\n//   If the two intervals don't intersect, return \"NO\".\n// \n// \n//   [input/output] samples:\n//   intersection((1, 2), (2, 3)) ==> \"NO\"\n//   intersection((-1, 1), (0, 4)) ==> \"NO\"\n//   intersection((-3, -1), (-5, 5)) ==> \"YES\"\n// const intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n", "canonical_solution": "  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "// You are given two intervals,\n//   where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n//   The given intervals are closed which means that the interval (start, end)\n//   includes both start and end.\n//   For each given interval, it is assumed that its start is less or equal its end.\n//   Your task is to determine whether the length of intersection of these two \n//   intervals is a prime number.\n//   Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n//   which its length is 1, which not a prime number.\n//   If the length of the intersection is a prime number, return \"YES\",\n//   otherwise, return \"NO\".\n//   If the two intervals don't intersect, return \"NO\".\n// \n// \n//   [input/output] samples:\n//   intersection((1, 2), (2, 3)) ==> \"NO\"\n//   intersection((-1, 1), (0, 4)) ==> \"NO\"\n//   intersection((-3, -1), (-5, 5)) ==> \"YES\"\n// const intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len === 0) { return \"NO\" }\n  let i = 2\n  while (i < hi - lo + 1) {\n    let j = i + 1\n    if (j > hi - lo) { break }\n    let cnt = 0\n    while (j <= hi - lo) {\n      if (interval1[0] <= j && j <= interval1[1] && interval2[0] <= j && j <= interval2[1]) {\n        cnt++\n      }\n      j += i\n    }\n    if (cnt % 2 === 0) { return \"NO\" }\n    i++\n  }\n  return \"YES\"\n}\n\nlet res = intersection((1, 2), (2, 3))\nconsole.log(res)\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "//   You are given an array arr of integers and you need to return\n//   sum of magnitudes of integers multiplied by product of all signs\n//   of each number in the array, represented by 1, -1 or 0.\n//   Note: return null for empty arr.\n// \n//   Example:\n//   >>> prodSigns([1, 2, 2, -4]) == -9\n//   >>> prodSigns([0, 1]) == 0\n//   >>> prodSigns([]) == null\n// const prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n", "canonical_solution": "    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "//   You are given an array arr of integers and you need to return\n//   sum of magnitudes of integers multiplied by product of all signs\n//   of each number in the array, represented by 1, -1 or 0.\n//   Note: return null for empty arr.\n// \n//   Example:\n//   >>> prodSigns([1, 2, 2, -4]) == -9\n//   >>> prodSigns([0, 1]) == 0\n//   >>> prodSigns([]) == null\n// const prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    n *= arr[i]\n  }\n  return s * n\n// }\n// console.log(prodSigns([1, 2, 2, -4]))\n// console.log(prodSigns([0, 1]))\n// console.log(prodSigns([]))\n// const prodSigns = (arr) => {\n//   const [first, second] = [1, 2]\n//   const [third, fourth] = [2, -4]\n//   const [five, six] = [2, -4]\n//   const [last,...rest] = arr\n//   const sum = sum(first, second, third, fourth, fifth, sixth, last)\n//   const sign = sign(first, second, third, fourth, fifth, sixth, last)\n//   return sum * sign\n// }\n// console.log(prodSigns([1, 2, 2, -4]))\n// console.log(prodSigns([0, 1]))\n// console.log(prodSigns([]))\n// const prodSigns = (arr) => {\n//   const [first, second] = [1, 2]\n//   const [third, fourth] = [2, -4]\n//   const [five, six] = [2, -4]\n//   const [last,...rest] = arr\n//   const sum = sum(first, second, third, fourth, fifth, sixth, last)\n//   const sign = sign(first, second, third, fourth, fifth, sixth, last)\n//   return sign * sum\n// }\n// console.log(prodSigns([1, 2, 2, -4]))\n// console.log(prodSigns([0, 1]))\n// console.log(prodSigns([]))\n// const prodSigns = (arr) => {\n//   const [first, second] = [1, 2]\n//   const [third, fourth] = [2, -4]\n//   const [fifth, sixth] = [2, -4]\n//   const [last,...rest] = arr\n//   const sum = sum(first, second, third, fourth, fifth, sixth, last)\n//   const sign = sign(first, second, third, fourth, fifth, sixth, last)\n//   return sign * sum\n// }\n// console.log(prodSigns([1, 2, 2, -4]))\n// console.log(prodSigns([0, 1]))\n// console.log(prodSigns([]))\n// const prodSigns = (arr) => {\n//   const [first, second] = [1, 2]\n//   const [third, fourth] = [2, -4]\n//   const [fifth, sixth] = [2, -4]\n//   const [last,...rest] = arr\n//   const sum = sum(first, second, third, fourth, fifth, sixth, last)\n//   const sign = sign(first, second, third, fourth, fifth, sixth, last)\n//   return sign * sum\n// }\n// console.log(prodSigns([1, 2, 2, -4]))\n// console.log(prodSigns([0, 1]))\n// console.log(prodSigns([]))\n// const prodSigns = (arr) => {\n//   const [first, second] = [1, 2]\n//   const [third, fourth] = [2, -4]\n//   const [fifth, sixth] = [2, -4]\n//   const [last,...rest] = arr\n//   const sum = sum(first, second, third, fourth, fifth, sixth, last)\n//   const sign = sign(first, second, third, fourth, fifth, sixth, last)\n//   return sign * sum\n// }\n// console.log(prodSigns([1, 2, 2, -4]))\n// console.log(prodSigns([0, 1]))\n// console.log(prodSigns([]))\n// const prodSigns = (arr) => {\n//   const [first, second] = [1, 2]\n//   const [third, fourth] = [2, -4]\n//   const [fifth, sixth] = [2, -4]\n//   const [last,...rest] = arr\n//   const sum = sum(first, second, third, fourth, fifth, sixth, last)\n//   const sign = sign(first, second, third, fourth, fifth, sixth, last)\n//   return sign * sum\n// }\n// console.log(prodSigns([1, 2, 2, -4]))\n// console.log(prodSigns([0, 1]))\n// console.log(prodSigns([]))\n// const prodSigns = (arr) => {\n//   const [first, second] = [1, 2]\n//   const [third, fourth] = [2, -4]\n//   const [fifth, sixth] = [2, -4]\n//   const [last,...rest] = arr\n//   const sum = sum(first, second, third, fourth, fifth, sixth, last)\n//   const sign = sign(first, second, third, fourth, fifth, sixth, last)\n//   return sign * sum\n// }\n// console.log(prodSigns([1, 2, 2, -4]))\n// console.log(prodSigns([0, 1]))\n// console.log(prodSigns([]))\n// const prodSigns = (arr) => {\n//   const [first, second] = [1, 2]\n//   const [third, fourth] = [2, -4]\n//   const [fifth, sixth] = [2, -4]\n//   const"}
{"task_id": "JavaScript/129", "prompt": "//   Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n//   each cell of the grid contains a value. Every integer in the range [1, N * N]\n//   inclusive appears exactly once on the cells of the grid.\n// \n//   You have to find the minimum path of length k in the grid. You can start\n//   from any cell, and in each step you can move to any of the neighbor cells,\n//   in other words, you can go to cells which share an edge with you current\n//   cell.\n//   Please note that a path of length k means visiting exactly k cells (not\n//   necessarily distinct).\n//   You CANNOT go off the grid.\n//   A path A (of length k) is considered less than a path B (of length k) if\n//   after making the ordered lists of the values on the cells that A and B go\n//   through (let's call them lst_A and lst_B), lst_A is lexicographically less\n//   than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n//   such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n//   lst_A[j] = lst_B[j].\n//   It is guaranteed that the answer is unique.\n//   Return an ordered list of the values on the cells that the minimum path go through.\n// \n//   Examples:\n// \n//       Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n//       Output: [1, 2, 1]\n// \n//       Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n//       Output: [1]\n// const minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n", "canonical_solution": "  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "//   Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n//   each cell of the grid contains a value. Every integer in the range [1, N * N]\n//   inclusive appears exactly once on the cells of the grid.\n// \n//   You have to find the minimum path of length k in the grid. You can start\n//   from any cell, and in each step you can move to any of the neighbor cells,\n//   in other words, you can go to cells which share an edge with you current\n//   cell.\n//   Please note that a path of length k means visiting exactly k cells (not\n//   necessarily distinct).\n//   You CANNOT go off the grid.\n//   A path A (of length k) is considered less than a path B (of length k) if\n//   after making the ordered lists of the values on the cells that A and B go\n//   through (let's call them lst_A and lst_B), lst_A is lexicographically less\n//   than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n//   such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n//   lst_A[j] = lst_B[j].\n//   It is guaranteed that the answer is unique.\n//   Return an ordered list of the values on the cells that the minimum path go through.\n// \n//   Examples:\n// \n//       Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n//       Output: [1, 2, 1]\n// \n//       Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n//       Output: [1]\n// const minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  \n  let a = grid[m]\n  let b = grid[n]\n  let len = a.length\n  let index = 0\n  \n  let max = 0\n  let min = 9999\n  \n  for (let i = 0; i < len; i++) {\n    let p = a[i]\n    \n    for (let j = 0; j < len; j++) {\n      let q = b[j]\n      \n      if (p < q) {\n        if (p < min) {\n          min = p\n          index = i\n        }\n      } else if (p > q) {\n        if (max < p) {\n          max = p\n          index = i\n        }\n      }\n    }\n  }\n  \n  let ans = []\n  \n  for (let i = index; i < len; i++) {\n    ans.push(a[i])\n  }\n  \n  for (let i = 0; i < index; i++) {\n    ans.push(b[i])\n  }\n  \n  return ans\n}\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, vector <int> p3) {\n\tcout << \"Test \" << testNum << \": [\" << p0 << \",\" << p1 << \",\" << p2;\n\tcout << \"]\" << endl;\n\tint allResult;\n\tvector <int> result;\n\tresult = minPath(p0, p1, p2);\n\tcout << \"Result: \";\n\tfor (int i = 0; int(result.size()) > i; i++) {\n\t\tif (i > 0) {\n\t\t\tcout << \" \";\n\t\t}\n\t\tcout << result[i];\n\t}\n\tcout << endl;\n\tif (hasAnswer) {\n\t\tcout << \"Expected: \";\n\t\tfor (int i = 0; int(p3.size()) > i; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\tcout << \" \";\n\t\t\t}\n\t\t\tcout << p3[i];\n\t\t}\n\t\tcout << endl;\n\t}\n\tcout << \"----------------------\" << endl;\n\tif (hasAnswer) {\n\t\tif (result == p3) {\n\t\t\tcout << \"Ok\" << endl;\n\t\t\treturn true;\n\t\t} else {\n\t\t\tcout << \"Not Ok\" << endl;\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n\tbool all_right;\n\tbool disabled;\n\tbool tests_disabled;\n\tall_right = true;\n\ttests_disabled = false;\n\t\n\tint p0;\n\tint p1;\n\tint p2;\n\tvector <int> p3;\n\t\n\t// ----- test 0 -----\n\tdisabled = false;\n\tp0 = 3;\n\tp1 = 2;\n\tp2 = 1;\n\tp3 = vector <int>(1,2);\n\tall_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 1 -----\n\tdisabled = false;\n\tp0 = 5;\n\tp1 = 2;\n\tp2 = 3;\n\tp3 = vector <int>(1,3);\n\tall_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 2 -----\n\tdisabled = false;\n\tp0 = 5;\n\tp1 = 5;\n\tp2 = 5;\n\tp3 = vector <int>(1,5);\n\tall_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2"}
{"task_id": "JavaScript/130", "prompt": "// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n//   the last couple centuries. However, what people don't know is Tribonacci sequence.\n//   Tribonacci sequence is defined by the recurrence:\n//   tri(1) = 3\n//   tri(n) = 1 + n / 2, if n is even.\n//   tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n//   For example:\n//   tri(2) = 1 + (2 / 2) = 2\n//   tri(4) = 3\n//   tri(3) = tri(2) + tri(1) + tri(4)\n//          = 2 + 3 + 3 = 8 \n//   You are given a non-negative integer number n, you have to a return a list of the \n//   first n + 1 numbers of the Tribonacci sequence.\n//   Examples:\n//   tri(3) = [1, 3, 2, 8]\n// const tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n", "canonical_solution": "    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n//   the last couple centuries. However, what people don't know is Tribonacci sequence.\n//   Tribonacci sequence is defined by the recurrence:\n//   tri(1) = 3\n//   tri(n) = 1 + n / 2, if n is even.\n//   tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n//   For example:\n//   tri(2) = 1 + (2 / 2) = 2\n//   tri(4) = 3\n//   tri(3) = tri(2) + tri(1) + tri(4)\n//          = 2 + 3 + 3 = 8 \n//   You are given a non-negative integer number n, you have to a return a list of the \n//   first n + 1 numbers of the Tribonacci sequence.\n//   Examples:\n//   tri(3) = [1, 3, 2, 8]\n// const tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    } else {\n      p.push(p[i - 1] + p[i - 2] + p[i + 1])\n    }\n  }\n  return p\n}\n\nlet t = tribonacci(4)\nconsole.log(t)<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "// Given a positive integer n, return the product of the odd digits.\n//   Return 0 if all digits are even.\n//   For example:\n//   digits(1)  == 1\n//   digits(4)  == 0\n//   digits(235) == 15\n// const digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n", "canonical_solution": "    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "// Given a positive integer n, return the product of the odd digits.\n//   Return 0 if all digits are even.\n//   For example:\n//   digits(1)  == 1\n//   digits(4)  == 0\n//   digits(235) == 15\n// const digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = Math.floor(n / 10)\n  }\n  return p * k\n}\n\nfunction digits(n) {\n  let d = n\n  let p = 1\n  while (d > 0) {\n    let y = d % 10\n    if (y % 2 == 1) {\n      p *= y\n    }\n    d = Math.floor(d / 10)\n  }\n  return p\n}\n\n// Given a positive integer n, return the sum of the even digits.\n//   Return 0 if all digits are odd.\n//   For example:\n//   sumDigits(1)  == 1\n//   sumDigits(4)  == 4\n//   sumDigits(235) == 12\n// const sumDigits = (n) => {\n  let s = 0\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      s += y\n    }\n    n = Math.floor(n / 10)\n  }\n  return s\n}\n\n// Given a positive integer n, return the sum of the odd digits.\n//   Return 0 if all digits are even.\n//   For example:\n//   sumDigits(1)  == 1\n//   sumDigits(4)  == 4\n//   sumDigits(235) == 23\n// const sumDigits = (n) => {\n  let s = 0\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      s += y\n    }\n    n = Math.floor(n / 10)\n  }\n  return s\n}\n\n// Given a positive integer n, return the sum of the even digits.\n//   Return 0 if all digits are odd.\n//   For example:\n//   sumDigits(1)  == 1\n//   sumDigits(4)  == 4\n//   sumDigits(235) == 23\n// const sumDigits = (n) => {\n  let s = 0\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      s += y\n    }\n    n = Math.floor(n / 10)\n  }\n  return s\n}\n\nfunction sumDigits(n) {\n  let s = 0\n  while (n > 0) {\n    let y = n % 10\n    s += y\n    n = Math.floor(n / 10)\n  }\n  return s\n}\n\nfunction sumDigits(n) {\n  let s = 0\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      s += y\n    }\n    n = Math.floor(n / 10)\n  }\n  return s\n}\n\nfunction sumDigits(n) {\n  let s = 0\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 0) {\n      s += y\n    }\n    n = Math.floor(n / 10)\n  }\n  return s\n}\n\n// Given a positive integer n, return the sum of the odd digits.\n//   Return 0 if all digits are even.\n//   For example:\n//   sumDigits(1)  == 1\n//   sumDigits(4)  == 4\n//   sumDigits(235) == 23\n// const sumDigits = (n) => {\n  let s = 0\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      s += y\n    }\n    n = Math.floor(n / 10)\n  }\n  return s\n}\n\n// Given a positive integer n, return the sum of the odd digits.\n//   Return 0 if all digits are even.\n//   For example:\n//   sumDigits(1)  == 1\n//   sumDigits(4)  == 4\n//   sumDigits(235) == 23\n// const sumDigits = (n) => {\n  let s = 0\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      s += y\n    }\n    n = Math.floor(n / 10)\n  }\n  return s\n}\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "//   Create a function that takes a string as input which contains only square brackets.\n//   The function should return true if and only if there is a valid subsequence of brackets\n//   where at least one bracket in the subsequence is nested.\n//   isNested('[[]]') ➞ true\n//   isNested('[]]]]]]][[[[[]') ➞ false\n//   isNested('[][]') ➞ false\n//   isNested('[]') ➞ false\n//   isNested('[[][]]') ➞ true\n//   isNested('[[]][[') ➞ true\n// const isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n", "canonical_solution": "    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "//   Create a function that takes a string as input which contains only square brackets.\n//   The function should return true if and only if there is a valid subsequence of brackets\n//   where at least one bracket in the subsequence is nested.\n//   isNested('[[]]') ➞ true\n//   isNested('[]]]]]]][[[[[]') ➞ false\n//   isNested('[][]') ➞ false\n//   isNested('[]') ➞ false\n//   isNested('[[][]]') ➞ true\n//   isNested('[[]][[') ➞ true\n// const isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    if (closing_bracket_index1[i] == 0) {\n      break\n    }\n    else {\n      closing_bracket_index.push(closing_bracket_index1[i])\n    }\n  }\n  let valid = true\n  for (let i = 0; i < opening_bracket_index.length; i++) {\n    if (closing_bracket_index.length > 0 && opening_bracket_index[i] > closing_bracket_index[0]) {\n      valid = false\n      break\n    }\n  }\n  return valid\n}\n\n//   Find the nth number that is also in the second list\n//   e.g. findNthInList(1, [1, 2, 3, 4, 5]) ➞ 4\n//   e.g. findNthInList(3, [1, 2, 3, 4, 5]) ➞ null\n// const findNthInList = (nth, list) => {\n//   if (nth > list.length) {\n//     return null\n//   }\n//   let index = 0\n//   for (let i = 0; i < list.length; i++) {\n//     if (list[i] == nth) {\n//       index = i\n//       break\n//     }\n//   }\n//   return list[index]\n// }\n\n//   Find the nth number that is also in the second list\n//   e.g. findNthInList(1, [1, 2, 3, 4, 5]) ➞ 4\n//   e.g. findNthInList(3, [1, 2, 3, 4, 5]) ➞ null\n// const findNthInList = (nth, list) => {\n//   if (nth > list.length) {\n//     return null\n//   }\n//   let index = 0\n//   for (let i = 0; i < list.length; i++) {\n//     if (list[i] == nth) {\n//       index = i\n//       break\n//     }\n//   }\n//   return list[index]\n// }\n\n//   Find the first element in the list that is equal to the second element\n//   e.g. findEqual(1, [1, 2, 3, 4, 5]) ➞ 4\n//   e.g. findEqual(2, [1, 2, 3, 4, 5]) ➞ null\n// const findEqual = (value, list) => {\n//   let index = list.indexOf(value)\n//   if (index == -1) {\n//     return null\n//   }\n//   return list[index]\n// }\n\n//   Find the first element in the list that is equal to the second element\n//   e.g. findEqual(1, [1, 2, 3, 4, 5]) ➞ 4\n//   e.g. findEqual(2, [1, 2, 3, 4, 5]) ➞ null\n// const findEqual = (value, list) => {\n//   let index = list.indexOf(value)\n//   if (index == -1) {\n//     return null\n//   }\n//   return list[index]\n// }\n\n//   Find the first element in the list that is equal to the second element\n//   e.g. findEqual(1, [1, 2, 3, 4, 5]) ➞ 4\n//   e.g. findEqual(2, [1, 2, 3, 4, 5]) ➞ null\n// const findEqual = (value, list) => {\n//   let index = list.indexOf(value)\n//   if (index == -1) {\n//     return null\n//   }\n//   return list[index]\n// }\n\n//   Find the first element in the list that is equal to the second element\n//   e.g. findEqual(1, [1, 2, 3, 4, 5]) ➞ 4\n//   e.g. findEqual(2, [1, 2, 3, 4, 5]) ➞ null\n// const findEqual = (value, list) => {\n//   let index = list.indexOf(value)\n//   if (index == -1) {\n//     return null\n//   }\n//   return list[index]\n// }\n\n//   Find the first element in the list that is equal to the second element\n//   e.g. findEqual(1, [1, 2, 3, 4, 5]) ➞ 4\n//   e.g. findEqual(2, [1, 2, 3, 4, 5]) ➞ null\n// const findEqual = (value, list) => {\n//   let index = list.indexOf(value)\n//   if (index == -1) {\n//     return null\n//   }\n//   return list[index]\n// }\n\n//   Find the first element in the list that is equal to the second element\n//   e.g. findEqual(1, [1, 2, 3, 4, 5]) ➞ 4\n//   e.g. findEqual(2, [1, 2, 3, 4, 5]) ➞ null\n// const findE"}
{"task_id": "JavaScript/133", "prompt": "// You are given a list of numbers.\n//   You need to return the sum of squared numbers in the given list,\n//   round each element in the list to the upper int(Ceiling) first.\n//   Examples:\n//   For lst = [1,2,3] the output should be 14\n//   For lst = [1,4,9] the output should be 98\n//   For lst = [1,3,5,7] the output should be 84\n//   For lst = [1.4,4.2,0] the output should be 29\n//   For lst = [-2.4,1,1] the output should be 6\n// const sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n", "canonical_solution": "      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "// You are given a list of numbers.\n//   You need to return the sum of squared numbers in the given list,\n//   round each element in the list to the upper int(Ceiling) first.\n//   Examples:\n//   For lst = [1,2,3] the output should be 14\n//   For lst = [1,4,9] the output should be 98\n//   For lst = [1,3,5,7] the output should be 84\n//   For lst = [1.4,4.2,0] the output should be 29\n//   For lst = [-2.4,1,1] the output should be 6\n// const sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      if (y < 0) { y = y - y % 1 - 1 }\n    }\n    y = Math.floor(Math.ceil(y))\n    p += y * y\n  }\n  return p\n}\n\n// You are given a list of numbers.\n//   You need to return the sum of the numbers in the given list,\n//   round each element in the list to the upper int(Ceiling) first.\n//   Examples:\n//   For lst = [1,2,3] the output should be 14\n//   For lst = [1,4,9] the output should be 98\n//   For lst = [1,3,5,7] the output should be 84\n//   For lst = [1.4,4.2,0] the output should be 29\n//   For lst = [-2.4,1,1] the output should be 6\n// const sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      if (y < 0) { y = y - y % 1 - 1 }\n    }\n    y = Math.floor(Math.ceil(y))\n    p += y\n  }\n  return p\n}\n\n// Given a list of ints, return the sum of the squares of the numbers\n// in the list.\n// const sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    p += y * y\n  }\n  return p\n}\n\n// Given a list of ints, return the product of the numbers in the list.\n// const product = (lst) => {\n  let p = 1\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    p *= y\n  }\n  return p\n}\n\n// Given a list of ints, return the sum of the numbers in the list.\n// const sum = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    p += y\n  }\n  return p\n}\n\n// Given a list of ints, return the product of the numbers in the list.\n// const product = (lst) => {\n  let p = 1\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    p *= y\n  }\n  return p\n}\n\n// Given a list of ints, return the sum of the numbers in the list.\n// const sum = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    p += y\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "// Create a function that returns true if the last character\n//   of a given string is an alphabetical character and is not\n//   a part of a word, and false otherwise.\n//   Note: \"word\" is a group of characters separated by space.\n//   Examples:\n//   checkIfLastCharIsALetter(\"apple pie\") ➞ false\n//   checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n//   checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n//   checkIfLastCharIsALetter(\"\") ➞ false\n// const checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n", "canonical_solution": "    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "// Create a function that returns true if the last character\n//   of a given string is an alphabetical character and is not\n//   a part of a word, and false otherwise.\n//   Note: \"word\" is a group of characters separated by space.\n//   Examples:\n//   checkIfLastCharIsALetter(\"apple pie\") ➞ false\n//   checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n//   checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n//   checkIfLastCharIsALetter(\"\") ➞ false\n// const checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  let y1 = txt[len - 2].charCodeAt()\n  if (y1 >= 65 && y1 <= 90) {\n    if ((y >= 97 && y <= 122) && (y1!= 95)) { return true }\n    return false\n  }\n  let y2 = txt[len - 3].charCodeAt()\n  if (y2 >= 97 && y2 <= 122) {\n    if ((y >= 97 && y <= 122) && (y1!= 95) && (y2!= 95)) { return true }\n    return false\n  }\n  return false\n}\n\n// const checkIfLastCharIsALetter = (txt) => {\n//   let len = txt.length\n//   if (len == 0) { return false }\n//   let y = txt[len - 1].charCodeAt()\n//   if (len == 1) {\n//     if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n//     return false\n//   }\n//   let y1 = txt[len - 2].charCodeAt()\n//   if (y1 >= 65 && y1 <= 90) {\n//     if ((y >= 97 && y <= 122) && (y1!= 95)) { return true }\n//     return false\n//   }\n//   let y2 = txt[len - 3].charCodeAt()\n//   if (y2 >= 97 && y2 <= 122) {\n//     if ((y >= 97 && y <= 122) && (y1!= 95) && (y2!= 95)) { return true }\n//     return false\n//   }\n//   return false\n// }\n\n// const checkIfLastCharIsALetter = (txt) => {\n//   let len = txt.length\n//   if (len == 0) { return false }\n//   let y = txt[len - 1].charCodeAt()\n//   if (len == 1) {\n//     if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n//     return false\n//   }\n//   let y1 = txt[len - 2].charCodeAt()\n//   if (y1 >= 65 && y1 <= 90) {\n//     if ((y >= 97 && y <= 122) && (y1!= 95)) { return true }\n//     return false\n//   }\n//   let y2 = txt[len - 3].charCodeAt()\n//   if (y2 >= 97 && y2 <= 122) {\n//     if ((y >= 97 && y <= 122) && (y1!= 95) && (y2!= 95)) { return true }\n//     return false\n//   }\n//   return false\n// }\n\n// Check if the last character of the string is an alphabetical character.\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  let y1 = txt[len - 2].charCodeAt()\n  if (y1 >= 65 && y1 <= 90) {\n    if ((y >= 97 && y <= 122) && (y1!= 95)) { return true }\n    return false\n  }\n  let y2 = txt[len - 3].charCodeAt()\n  if (y2 >= 97 && y2 <= 122) {\n    if ((y >= 97 && y <= 122) && (y1!= 95) && (y2!= 95)) { return true }\n    return false\n  }\n  return false\n}\n\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  let y1 = txt[len - 2].charCodeAt()\n  if (y1 >= 65 && y1 <= 90) {\n    if ((y >= 97 && y <= 122) && (y1!= 95)) { return true }\n    return false\n  }\n  let y2 = txt[len - 3].charCodeAt()\n  if (y2 >= 97 && y2 <= 122) {\n    if ((y >= 97 && y <= 122) && (y1!= 95) && (y2!= 95)) { return true }\n    return false\n  }\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "// Create a function which returns the largest index of an element which\n//   is not greater than or equal to the element immediately preceding it. If\n//   no such element exists then return -1. The given array will not contain\n//   duplicate values.\n// \n//   Examples:\n//   canArrange([1,2,4,3,5]) = 3\n//   canArrange([1,2,3]) = -1\n// const canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "// Create a function which returns the largest index of an element which\n//   is not greater than or equal to the element immediately preceding it. If\n//   no such element exists then return -1. The given array will not contain\n//   duplicate values.\n// \n//   Examples:\n//   canArrange([1,2,4,3,5]) = 3\n//   canArrange([1,2,3]) = -1\n// const canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n// }\n\nconst isPalindrome = (str) => {\n  const strLength = str.length\n  if (strLength % 2 == 0) {\n    return str.slice(0, strLength / 2) === str.slice(strLength / 2 - 1)\n  } else {\n    return str.slice(0, strLength / 2) + str.slice(strLength / 2) === str\n  }\n}\n\nconst canArrange = (arr) => {\n  const maxLength = arr.length\n  let minLength = arr.length\n  while (minLength >= 2) {\n    const max = arr.slice(0, minLength).reduce((a, b) => Math.max(a, b), -1)\n    const min = arr.slice(0, minLength).reduce((a, b) => Math.min(a, b), -1)\n    if (max >= min) {\n      return maxLength\n    }\n    minLength--\n  }\n  return -1\n}\n\nmodule.exports = {\n  canArrange\n}\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "// Create a function that returns a tuple (a, b), where 'a' is\n//   the largest of negative integers, and 'b' is the smallest\n//   of positive integers in a list.\n//   If there is no negative or positive integers, return them as null.\n//   Examples:\n//   largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n//   largestSmallestIntegers([]) == (null, null)\n//   largestSmallestIntegers([0]) == (null, null)\n// const largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n", "canonical_solution": "  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "// Create a function that returns a tuple (a, b), where 'a' is\n//   the largest of negative integers, and 'b' is the smallest\n//   of positive integers in a list.\n//   If there is no negative or positive integers, return them as null.\n//   Examples:\n//   largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n//   largestSmallestIntegers([]) == (null, null)\n//   largestSmallestIntegers([0]) == (null, null)\n// const largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return (a === Infinity)? null : [a, b]\n// }\n\n// The largest of the first n positive integers.\nconst largestPositive = (n) => {\n  let largest = -Infinity\n  for (let i = 1; i <= n; i++) {\n    largest = Math.max(largest, i)\n  }\n  return largest\n}\n\n// The largest of the first n negative integers.\nconst largestNegative = (n) => {\n  let largest = Infinity\n  for (let i = 1; i <= n; i++) {\n    largest = Math.min(largest, -i)\n  }\n  return largest\n}\n\n// The smallest of the first n positive integers.\nconst smallestPositive = (n) => {\n  let smallest = Infinity\n  for (let i = 1; i <= n; i++) {\n    smallest = Math.min(smallest, i)\n  }\n  return smallest\n}\n\n// The smallest of the first n negative integers.\nconst smallestNegative = (n) => {\n  let smallest = -Infinity\n  for (let i = 1; i <= n; i++) {\n    smallest = Math.max(smallest, -i)\n  }\n  return smallest\n}\n\n// The smallest of the first n integers.\nconst smallest = (n) => {\n  let smallest = -Infinity\n  for (let i = 1; i <= n; i++) {\n    smallest = Math.min(smallest, i)\n  }\n  return smallest\n}\n\n// The largest of the first n integers.\nconst largest = (n) => {\n  let largest = -Infinity\n  for (let i = 1; i <= n; i++) {\n    largest = Math.max(largest, i)\n  }\n  return largest\n}\n\n// The largest of the first n integers.\nconst smallestPositiveOfLength = (n) => {\n  let smallest = Infinity\n  for (let i = 1; i <= n; i++) {\n    smallest = Math.min(smallest, i)\n  }\n  return smallest\n}\n\n// The largest of the first n integers.\nconst smallestNegativeOfLength = (n) => {\n  let smallest = -Infinity\n  for (let i = 1; i <= n; i++) {\n    smallest = Math.max(smallest, -i)\n  }\n  return smallest\n}\n\n// The smallest of the first n integers.\nconst smallestOfLength = (n) => {\n  let smallest = -Infinity\n  for (let i = 1; i <= n; i++) {\n    smallest = Math.min(smallest, i)\n  }\n  return smallest\n}\n\n// The largest of the first n integers.\nconst largestOfLength = (n) => {\n  let largest = Infinity\n  for (let i = 1; i <= n; i++) {\n    largest = Math.max(largest, i)\n  }\n  return largest\n}\n\n// The largest of the first n integers.\nconst largestNegativeOfLength = (n) => {\n  let largest = Infinity\n  for (let i = 1; i <= n; i++) {\n    largest = Math.min(largest, -i)\n  }\n  return largest\n}\n\n// The smallest of the first n integers.\nconst largestPositiveOfLength = (n) => {\n  let largest = -Infinity\n  for (let i = 1; i <= n; i++) {\n    largest = Math.max(largest, i)\n  }\n  return largest\n}\n\n// The largest of the first n integers.\nconst largestNegativeOfLength = (n) => {\n  let largest = -Infinity\n  for (let i = 1; i <= n; i++) {\n    largest = Math.min(largest, -i)\n  }\n  return largest\n}\n\n// The smallest of the first n integers.\nconst largestNegativeOfLength = (n) => {\n  let largest = Infinity\n  for (let i = 1; i <= n; i++) {\n    largest = Math.min(largest, -i)\n  }\n  return largest\n}\n\n// The smallest of the first n integers.\nconst largestPositiveOfLength = (n) => {\n  let largest = Infinity\n  for (let i = 1; i <= n; i++) {\n    largest = Math.min(largest, i)\n  }\n  return largest\n}\n\n// The largest of the first n integers.\nconst largestPositiveOfLength = (n) => {\n  let largest = -Infinity\n  for (let i = 1; i <= n; i++) {\n    largest = Math.max(largest, i)\n  }\n  return largest\n}\n\n// The smallest of the first n integers.\nconst smallestPositiveOfLength = (n) => {\n  let smallest = -Infinity\n  for (let i = 1; i <= n; i++) {\n    smallest = Math.max(smallest, i)\n  }\n  return smallest\n}\n\n// The smallest of the first n integers.\nconst smallestNegativeOfLength = (n) => {\n  let smallest = -Infinity\n  for (let i = 1; i <= n; i++) {\n    smallest = Math.min(smallest, -i)\n  }\n  return smallest\n}\n\n// The smallest of the first n integers.\nconst smallestOfLength = (n) => {\n  let smallest = -Infinity\n  for (let i = 1; i <= n; i++) {\n"}
{"task_id": "JavaScript/137", "prompt": "//   Create a function that takes integers, floats, or strings representing\n//   real numbers, and returns the larger variable in its given variable type.\n//   Return null if the values are equal.\n//   Note: If a real number is represented as a string, the floating point might be . or ,\n// \n//   compareOne(1, 2.5) ➞ 2.5\n//   compareOne(1, \"2,3\") ➞ \"2,3\"\n//   compareOne(\"5,1\", \"6\") ➞ \"6\"\n//   compareOne(\"1\", 1) ➞ null\n// const compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n", "canonical_solution": "  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "//   Create a function that takes integers, floats, or strings representing\n//   real numbers, and returns the larger variable in its given variable type.\n//   Return null if the values are equal.\n//   Note: If a real number is represented as a string, the floating point might be. or,\n// \n//   compareOne(1, 2.5) ➞ 2.5\n//   compareOne(1, \"2,3\") ➞ \"2,3\"\n//   compareOne(\"5,1\", \"6\") ➞ \"6\"\n//   compareOne(\"1\", 1) ➞ null\n// const compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) {\n    return aa\n  } else if (aa < bb) {\n    return bb\n  } else {\n    return null\n  }\n// }\n\n// const compareTwo = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) {\n    return aa\n  } else if (aa < bb) {\n    return bb\n  } else {\n    return aa\n  }\n// }\n\n// const compareThree = (a, b, c) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  let cc = Number(c)\n  if (typeof c =='string') { cc = Number(c.replace(',', '.')) }\n  if (aa > bb) {\n    if (aa > cc) { return aa } else { return cc }\n  } else if (aa < bb) {\n    if (aa < cc) { return aa } else { return cc }\n  } else {\n    if (aa > cc) { return aa } else { return cc }\n  }\n// }\n\n// const compareFour = (a, b, c, d) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  let cc = Number(c)\n  if (typeof c =='string') { cc = Number(c.replace(',', '.')) }\n  let dd = Number(d)\n  if (typeof d =='string') { dd = Number(d.replace(',', '.')) }\n  if (aa > bb) {\n    if (aa > cc) { if (aa > dd) { return aa } else { return dd } }\n    else { if (aa > dd) { return aa } else { return dd } }\n  } else if (aa < bb) {\n    if (aa < cc) { if (aa < dd) { return aa } else { return dd } }\n    else { if (aa < dd) { return aa } else { return dd } }\n  } else {\n    if (aa > cc) { if (aa > dd) { return aa } else { return dd } }\n    else { if (aa < dd) { return aa } else { return dd } }\n  }\n// }\n\n// const compareFive = (a, b, c, d, e) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  let cc = Number(c)\n  if (typeof c =='string') { cc = Number(c.replace(',', '.')) }\n  let dd = Number(d)\n  if (typeof d =='string') { dd = Number(d.replace(',', '.')) }\n  let ee = Number(e)\n  if (typeof e =='string') { ee = Number(e.replace(',', '.')) }\n  if (aa > bb) {\n    if (aa > cc) { if (aa > dd) { if (aa > ee) { return aa } else { return dd } }\n      else { if (aa > ee) { return aa } else { return dd } }\n    }\n    else { if (aa > dd) { if (aa > ee) { return aa } else { return dd } }\n      else { if (aa > ee) { return aa } else { return dd } }\n  }\n  else if (aa < bb) {\n    if (aa < cc) { if (aa < dd) { if (aa < ee) { return aa } else { return dd } }\n      else { if (aa < ee) { return aa } else { return dd } }\n    }\n    else { if (aa < dd) { if (aa < ee) { return aa } else { return dd } }\n      else { if (aa < ee) { return aa } else { return dd } }\n  }\n  else {\n    if (aa > cc) { if (aa > dd) { if (aa > ee) { return aa } else { return dd } }\n      else { if (aa > ee) { return aa } else { return dd } }\n    }\n    else { if (aa > dd) { if (aa > ee) { return aa } else { return dd } }\n      else { if (aa > ee) { return aa } else { return dd } }\n  }\n// }\n\n// console.log"}
{"task_id": "JavaScript/138", "prompt": "// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n//   Example\n//   isEqualToSumEven(4) == false\n//   isEqualToSumEven(6) == false\n//   isEqualToSumEven(8) == true\n// const isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n", "canonical_solution": "}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n//   Example\n//   isEqualToSumEven(4) == false\n//   isEqualToSumEven(6) == false\n//   isEqualToSumEven(8) == true\n// const isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 3 positive even numbers\n//   Example\n//   isEqualToSumEven(3) == false\n//   isEqualToSumEven(5) == false\n//   isEqualToSumEven(7) == true\n// const isEqualToSumEven = (n) => {\n  return (n >= 5 && n % 2 == 0)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 3 positive odd numbers\n//   Example\n//   isEqualToSumOdd(3) == false\n//   isEqualToSumOdd(5) == true\n//   isEqualToSumOdd(7) == true\n// const isEqualToSumOdd = (n) => {\n  return (n >= 5 && n % 2 == 1)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n//   Example\n//   isEqualToSumEven(5) == true\n//   isEqualToSumEven(6) == false\n//   isEqualToSumEven(8) == false\n// const isEqualToSumEven = (n) => {\n  return (n >= 5 && n % 2 == 0)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 3 positive odd numbers\n//   Example\n//   isEqualToSumOdd(3) == true\n//   isEqualToSumOdd(5) == false\n//   isEqualToSumOdd(7) == true\n// const isEqualToSumOdd = (n) => {\n  return (n >= 5 && n % 2 == 1)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 7 positive even numbers\n//   Example\n//   isEqualToSumEven(7) == true\n//   isEqualToSumEven(8) == false\n// const isEqualToSumEven = (n) => {\n  return (n >= 7 && n % 2 == 0)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 7 positive odd numbers\n//   Example\n//   isEqualToSumOdd(7) == true\n//   isEqualToSumOdd(8) == false\n// const isEqualToSumOdd = (n) => {\n  return (n >= 7 && n % 2 == 1)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 15 positive even numbers\n//   Example\n//   isEqualToSumEven(15) == false\n//   isEqualToSumEven(16) == false\n// const isEqualToSumEven = (n) => {\n  return (n >= 15 && n % 2 == 0)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 15 positive odd numbers\n//   Example\n//   isEqualToSumOdd(15) == true\n//   isEqualToSumOdd(16) == false\n// const isEqualToSumOdd = (n) => {\n  return (n >= 15 && n % 2 == 1)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "// The Brazilian factorial is defined as:\n//   brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n//   where n > 0\n// \n//   For example:\n//   >>> specialFactorial(4)\n//   288\n// \n//   The function will receive an integer as input and should return the special\n//   factorial of this integer.\n// const specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n", "canonical_solution": "      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "// The Brazilian factorial is defined as:\n//   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n//   where n > 0\n// \n//   For example:\n//   >>> specialFactorial(4)\n//   288\n// \n//   The function will receive an integer as input and should return the special\n//   factorial of this integer.\n// const specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t = t * n;\n    }\n    p = t;\n    n--;\n  }\n  return t;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "//   Given a string text, replace all spaces in it with underscores, \n//   and if a string has more than 2 consecutive spaces, \n//   then replace all consecutive spaces with - \n//    \n//   fixSpaces(\"Example\") == \"Example\"\n//   fixSpaces(\"Example 1\") == \"Example_1\"\n//   fixSpaces(\" Example 2\") == \"_Example_2\"\n//   fixSpaces(\" Example   3\") == \"_Example-3\"\n// const fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n", "canonical_solution": "      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "//   Given a string text, replace all spaces in it with underscores, \n//   and if a string has more than 2 consecutive spaces, \n//   then replace all consecutive spaces with - \n//    \n//   fixSpaces(\"Example\") == \"Example\"\n//   fixSpaces(\"Example 1\") == \"Example_1\"\n//   fixSpaces(\" Example 2\") == \"_Example_2\"\n//   fixSpaces(\" Example   3\") == \"_Example-3\"\n// const fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0\n    } else { t += text[i] }\n  }\n  return t\n}\n\n//   Given a string text, split the string into an array, \n//   and if a string has more than 1 consecutive spaces, \n//   then remove all consecutive spaces, and add a new line\n//    \n//   split(\"Example\") == [\"Example\"]\n//   split(\"Example 1\") == [\"Example\", \"1\"]\n//   split(\" Example 2\") == [\"Example\", \"2\"]\n//   split(\" Example   3\") == [\"Example\", \"3\"]\n//   split(\"Example\\nExample\") == [\"Example\", \"Example\"]\n// const split = (text) => {\n  let t = []\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t.push(text[i]) }\n      if (c > 1) { t.push(text.substring(i-c+1, i+1)) }\n      c = 0\n    } else { t.push(text[i]) }\n  }\n  return t\n}\n\n//   Given a string text, check if a string has a leading space \n//   and if so, remove the leading space and return it\n//    \n//   removeSpaces(\"Example\") == \"Example\"\n//   removeSpaces(\"Example 1\") == \"Example 1\"\n//   removeSpaces(\" Example 2\") == \"Example 2\"\n//   removeSpaces(\" Example   3\") == \"Example 3\"\n//   removeSpaces(\"Example\\nExample\") == \"Example\\nExample\"\n// const removeSpaces = (text) => {\n  let t = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { t = text.substring(i+1) }\n  }\n  return t\n}\n\n//   Given a string text, check if a string has trailing spaces \n//   and if so, remove the trailing spaces and return it\n//    \n//   removeTrailingSpaces(\"Example\") == \"Example\"\n//   removeTrailingSpaces(\"Example 1\") == \"Example 1\"\n//   removeTrailingSpaces(\" Example 2\") == \"Example 2\"\n//   removeTrailingSpaces(\" Example   3\") == \"Example 3\"\n//   removeTrailingSpaces(\"Example\\nExample\") == \"Example\\nExample\"\n// const removeTrailingSpaces = (text) => {\n  let t = ''\n  for (let i = text.length-1; i >= 0; i--) {\n    if (text[i] =='') { t = text.substring(0, i+1) }\n  }\n  return t\n}\n\n//   Given a string text, check if a string has leading or trailing spaces\n//   and if so, remove both leading and trailing spaces and return it\n//    \n//   removeTrailingSpaces(\"Example\") == \"Example\"\n//   removeTrailingSpaces(\"Example 1\") == \"Example 1\"\n//   removeTrailingSpaces(\" Example 2\") == \"Example 2\"\n//   removeTrailingSpaces(\" Example   3\") == \"Example 3\"\n//   removeTrailingSpaces(\"Example\\nExample\") == \"Example\\nExample\"\n// const removeTrailingSpaces = (text) => {\n  let t = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { t = text.substring(0, i+1) }\n  }\n  for (let i = text.length-1; i >= 0; i--) {\n    if (text[i] =='') { t = text.substring(0, i+1) }\n  }\n  return t\n}\n\n//   Given a string text, check if a string has leading or trailing spaces\n//   and if so, remove all spaces and return it\n//    \n//   removeTrailingSpaces(\"Example\") == \"Example\"\n//   removeTrailingSpaces(\"Example 1\") == \"Example 1\"\n//   removeTrailingSpaces(\" Example 2\") == \"Example 2\"\n//   removeTrailingSpaces(\" Example   3\") == \"Example 3\"\n//   removeTrailingSpaces(\"Example\\nExample\") == \"Example\\nExample\"\n// const removeTrailingSpaces = (text) => {\n  let t = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text[i]!='') { t += text[i] }\n  }\n  return t\n}\n\n//   Given a string text, check if a string has leading or trailing spaces\n//   and if so, remove all spaces and return it\n//    \n//   removeTrailingSpaces(\"Example\") == \"Example\"\n//   removeTrailingSpaces(\"Example 1\") == \"Example 1\"\n//   removeTrailingSpaces(\" Example 2\") == \"Example 2\"\n//   removeTrailingSpaces(\" Example   3\") == \"Example 3\"\n//   removeTrailingSpaces(\"Example\\nExample\") == \"Example\\nExample\"\n// const removeTrailingSpaces = (text) => {\n  let t = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { t = text.substring(0, i) }\n  }\n  return t\n}\n\n//   "}
{"task_id": "JavaScript/141", "prompt": "// Create a function which takes a string representing a file's name, and returns\n//   'Yes' if the the file's name is valid, and returns 'No' otherwise.\n//   A file's name is considered to be valid if and only if all the following conditions \n//   are met:\n//   - There should not be more than three digits ('0'-'9') in the file's name.\n//   - The file's name contains exactly one dot '.'\n//   - The substring before the dot should not be empty, and it starts with a letter from \n//   the latin alphapet ('a'-'z' and 'A'-'Z').\n//   - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n//   Examples:\n//   fileNameCheck(\"example.txt\") # => 'Yes'\n//   fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n// const fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n", "canonical_solution": "  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "// Create a function which takes a string representing a file's name, and returns\n//   'Yes' if the the file's name is valid, and returns 'No' otherwise.\n//   A file's name is considered to be valid if and only if all the following conditions \n//   are met:\n//   - There should not be more than three digits ('0'-'9') in the file's name.\n//   - The file's name contains exactly one dot '.'\n//   - The substring before the dot should not be empty, and it starts with a letter from \n//   the latin alphapet ('a'-'z' and 'A'-'Z').\n//   - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n//   Examples:\n//   fileNameCheck(\"example.txt\") # => 'Yes'\n//   fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n// const fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  return 'Yes'\n// }\n\n// Create a function which takes a string representing a file's name, and returns\n//   'Yes' if the the file's name is valid, and returns 'No' otherwise.\n//   A file's name is considered to be valid if and only if all the following conditions \n//   are met:\n//   - There should not be more than three digits ('0'-'9') in the file's name.\n//   - The file's name contains exactly one dot '.'\n//   - The substring before the dot should not be empty, and it starts with a letter from \n//   the latin alphapet ('a'-'z' and 'A'-'Z').\n//   - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n//   Examples:\n//   fileNameCheck(\"example.txt\") # => 'Yes'\n//   fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n// const fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  return 'Yes'\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "// \"\n//   This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n//   multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n//   change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n//    \n//   Examples:\n//   For lst = [1,2,3] the output should be 6\n//   For lst = []  the output should be 0\n//   For lst = [-1,-5,2,-1,-5]  the output should be -126\n// const sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n", "canonical_solution": "    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "// \"\n//   This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n//   multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n//   change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n//    \n//   Examples:\n//   For lst = [1,2,3] the output should be 6\n//   For lst = []  the output should be 0\n//   For lst = [-1,-5,2,-1,-5]  the output should be -126\n// const sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n// \"\n//   The sum of the squares of the first 10 natural numbers is,\n//   1^2 + 2^2 +... + 9^2 = 385\n//   The sum of the squares of the first ten natural numbers is,\n//   1^2 + 2^2 +... + 10^2 = 3025\n//   The sum of the squares of the first ten natural numbers is,\n//   1^2 + 2^2 +... + 10^2 = 3025\n//   Therefore the difference of the sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   The difference of the sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   Hence the difference of the sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   The difference of the sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   Therefore the difference of the sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   which is an even number.\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   Therefore the difference of the sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   which is an even number.\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   Therefore the difference of the sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   which is an even number.\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   Therefore the difference of the sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   which is an even number.\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   Therefore the difference of the sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   which is an even number.\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   Therefore the difference of the sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   which is an even number.\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   Therefore the difference of the sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   which is an even number.\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   Therefore the difference of the sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   which is an even number.\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   Therefore the difference of the sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   which is an even number.\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   Therefore the difference of the sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   which is an even number.\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   Therefore the difference of the sum of the squares of the first ten natural numbers is,\n//   3025 - 385 = 3024\n//   which is an even number.\n//   \n//   The sum of the squares of the first ten natural numbers is,\n//"}
{"task_id": "JavaScript/143", "prompt": "//   You are given a string representing a sentence,\n//   the sentence contains some words separated by a space,\n//   and you have to return a string that contains the words from the original sentence,\n//   whose lengths are prime numbers,\n//   the order of the words in the new string should be the same as the original one.\n// \n//   Example 1:\n//       Input: sentence = \"This is a test\"\n//       Output: \"is\"\n// \n//   Example 2:\n//       Input: sentence = \"lets go for swimming\"\n//       Output: \"go for\"\n// \n//   Constraints:\n//       * 1 <= len(sentence) <= 100\n//       * sentence contains only letters\n// const wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "//   You are given a string representing a sentence,\n//   the sentence contains some words separated by a space,\n//   and you have to return a string that contains the words from the original sentence,\n//   whose lengths are prime numbers,\n//   the order of the words in the new string should be the same as the original one.\n// \n//   Example 1:\n//       Input: sentence = \"This is a test\"\n//       Output: \"is\"\n// \n//   Example 2:\n//       Input: sentence = \"lets go for swimming\"\n//       Output: \"go for\"\n// \n//   Constraints:\n//       * 1 <= len(sentence) <= 100\n//       * sentence contains only letters\n// const wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (t[j].indexOf(t[j].charAt(0)) >= 0) {\n        u *= i\n        if (u % i == 0) {\n          p += t[j].charAt(0)\n          break\n        }\n      }\n    }\n    if (p!= '') {\n      break\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "// Your task is to implement a function that will simplify the expression\n//   x * n. The function returns true if x * n evaluates to a whole number and false\n//   otherwise. Both x and n, are string representation of a fraction, and have the following format,\n//   <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// \n//   You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// \n//   simplify(\"1/5\", \"5/1\") = true\n//   simplify(\"1/6\", \"2/1\") = false\n//   simplify(\"7/10\", \"10/2\") = false\n// const simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n", "canonical_solution": "  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "// Your task is to implement a function that will simplify the expression\n//   x * n. The function returns true if x * n evaluates to a whole number and false\n//   otherwise. Both x and n, are string representation of a fraction, and have the following format,\n//   <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// \n//   You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// \n//   simplify(\"1/5\", \"5/1\") = true\n//   simplify(\"1/6\", \"2/1\") = false\n//   simplify(\"7/10\", \"10/2\") = false\n// const simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let n = Number(a[1]) * Number(b[1])\n  if (m % n === 0) return true\n  else return false\n  \n//   return m / n\n// }\n// \n// console.log(simplify(\"1/5\", \"5/1\"))\n// console.log(simplify(\"1/6\", \"2/1\"))\n// console.log(simplify(\"7/10\", \"10/2\"))\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "//   Write a function which sorts the given list of integers\n//   in ascending order according to the sum of their digits.\n//   Note: if there are several items with similar sum of their digits,\n//   order them based on their index in original list.\n// \n//   For example:\n//   >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n//   >>> orderByPoints([]) == []\n// const orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n", "canonical_solution": "      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "//   Write a function which sorts the given list of integers\n//   in ascending order according to the sum of their digits.\n//   Note: if there are several items with similar sum of their digits,\n//   order them based on their index in original list.\n// \n//   For example:\n//   >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n//   >>> orderByPoints([]) == []\n// const orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      if (m < n) {\n        p.splice(k + 1, 0, p[k + 1]);\n        p.splice(k, 1);\n      }\n    }\n  }\n  return p\n}\n\n//  orderByPoints(nums)\n//  \n//   Write a function which sorts the given list of words in ascending order\n//   of their length.\n//   Note: if there are several items with the same length,\n//   order them based on their indices in original list.\n// \n//   For example:\n//   >>> orderByWords([\"The\", \"first\", \"second\", \"third\"]) == [\"first\", \"second\", \"third\", \"The\"]\n//   >>> orderByWords([\"The\", \"first\", \"second\", \"third\"]) == [\"third\", \"second\", \"first\", \"The\"]\n// const orderByWords = (words) => {\n  let p = words\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k].length\n      let d = p[k + 1].length\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      if (m < n) {\n        p.splice(k + 1, 0, p[k + 1]);\n        p.splice(k, 1);\n      }\n    }\n  }\n  return p\n}\n\n//  orderByWords(words)\n//  \n//   Write a function which sorts the given list of words in ascending order\n//   of their individual characters.\n//   Note: if there are several items with the same characters,\n//   order them based on their indices in original list.\n// \n//   For example:\n//   >>> orderByWords([\"The\", \"first\", \"second\", \"third\"]) == [\"The\", \"first\", \"second\", \"third\"]\n//   >>> orderByWords([\"The\", \"first\", \"second\", \"third\"]) == [\"The\", \"first\", \"second\", \"third\"]\n// const orderByWords = (words) => {\n  let p = words\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k].charAt(0)\n      let d = p[k + 1].charAt(0)\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      if (m < n) {\n        p.splice(k + 1, 0, p[k + 1]);\n        p.splice(k, 1);\n      }\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "// Write a function that takes an array of numbers as input and returns \n//   the number of elements in the array that are greater than 10 and both \n//   first and last digits of a number are odd (1, 3, 5, 7, 9).\n//   For example:\n//   specialFilter([15, -73, 14, -15]) => 1 \n//   specialFilter([33, -2, -3, 45, 21, 109]) => 2\n// const specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n", "canonical_solution": "      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "// Write a function that takes an array of numbers as input and returns \n//   the number of elements in the array that are greater than 10 and both \n//   first and last digits of a number are odd (1, 3, 5, 7, 9).\n//   For example:\n//   specialFilter([15, -73, 14, -15]) => 1 \n//   specialFilter([33, -2, -3, 45, 21, 109]) => 2\n// const specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n\n// 3. Write a function that takes a string as input and returns the number of \n//   occurrences of vowels in the string. For example:\n//   wordCount('HelloWorld') => 3\n//   wordCount('HellOwOrLD') => 3\n//   wordCount('HelloWorld') => 3\n// const wordCount = (word) => {\n  let p = 0\n  for (let i = 0; i < word.length; i++) {\n    let y = word[i].toString()\n    if (y == 'a' || y == 'e' || y == 'i' || y == 'o' || y == 'u') {\n      p++\n    }\n  }\n  return p\n}\nconsole.log(wordCount('HelloWorld'))\nconsole.log(wordCount('HellOwOrLD'))\nconsole.log(wordCount('HelloWorld'))\n\n// 4. Write a function that takes a string as input and returns the number of \n//   non-digit characters in the string. For example:\n//   wordCount('HelloWorld') => 6\n//   wordCount('HelloWorld') => 6\n// const wordCount = (word) => {\n  let p = 0\n  for (let i = 0; i < word.length; i++) {\n    if (Number.isInteger(word[i])) { continue }\n    p++\n  }\n  return p\n}\nconsole.log(wordCount('HelloWorld'))\nconsole.log(wordCount('HelloWorld'))\n\n// 5. Write a function that takes an array of strings as input and returns \n//   the number of strings in the array that contain 5 or more vowels. For \n//   example:\n//   wordCount([ 'HelloWorld', 'HellOwOrLD' ]) => 1\n//   wordCount([ 'HelloWorld', 'HellOwOrLD' ]) => 1\n//   wordCount([ 'HelloWorld', 'HellOwOrLD' ]) => 1\n// const wordCount = (word) => {\n  let p = 0\n  for (let i = 0; i < word.length; i++) {\n    let y = word[i].toString()\n    if (y.indexOf('a') >= 0 || y.indexOf('e') >= 0 || y.indexOf('i') >= 0 || y.indexOf('o') >= 0 || y.indexOf('u') >= 0) {\n      p++\n    }\n  }\n  return p\n}\nconsole.log(wordCount([ 'HelloWorld', 'HellOwOrLD' ]))\nconsole.log(wordCount([ 'HelloWorld', 'HellOwOrLD' ]))\nconsole.log(wordCount([ 'HelloWorld', 'HellOwOrLD' ]))\n\n// 6. Write a function that takes a string as input and returns the number of \n//   strings in the string that contain 5 or more vowels. For example:\n//   wordCount('HelloWorld') => 1\n//   wordCount('HelloWorld') => 1\n// const wordCount = (word) => {\n  let p = 0\n  for (let i = 0; i < word.length; i++) {\n    if (word.indexOf('a') >= 0 || word.indexOf('e') >= 0 || word.indexOf('i') >= 0 || word.indexOf('o') >= 0 || word.indexOf('u') >= 0) {\n      p++\n    }\n  }\n  return p\n}\nconsole.log(wordCount('HelloWorld'))\nconsole.log(wordCount('HelloWorld'))\n\n// 7. Write a function that takes an array of strings as input and returns the \n//   number of strings in the array that contain 5 or more vowels. For example:\n//   wordCount([ 'HelloWorld', 'HellOwOrLD' ]) => 1\n//   wordCount([ 'HelloWorld', 'HellOwOrLD' ]) => 1\n// const wordCount = (word) => {\n  let p = 0\n  for (let i = 0; i < word.length; i++) {\n    if (word.indexOf('a') >= 0 || word.indexOf('e') >= 0 || word.indexOf('i') >= 0 || word.indexOf('o') >= 0 || word.indexOf('u') >= 0) {\n      p++\n    }\n  }\n  return p\n}\nconsole.log(wordCount([ 'HelloWorld', 'HellOwOrLD' ]))\nconsole.log(wordCount([ 'HelloWorld', 'HellOwOrLD' ]))\nconsole.log(wordCount([ 'HelloWorld', 'HellOwOrLD' ]))\n\n// 8. Write a function that takes an array of strings as input and returns the \n//   number of strings in the array that contain 3 or more consonants and one \n//   vowel. For example:\n//   wordCount([ 'HelloWorld', 'HellOwOrLD' ]) => 2\n//   wordCount([ 'HelloWorld', 'HellOwOrLD' ]) => 2\n//   wordCount([ 'HelloWorld', 'HellOwOrLD' ]) => 2\n// const wordCount = (word) => {\n  let p = 0\n  for (let i = 0; i < word.length; i++) {\n    let y = word[i].toString()\n    if (y.indexOf('a') >= 0 || y.indexOf('e') >= 0 || y.indexOf('i') >= 0 || y.indexOf('o') >= 0 || y."}
{"task_id": "JavaScript/147", "prompt": "//   You are given a positive integer n. You have to create an integer array a of length n.\n//       For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n//       Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n//   and a[i] + a[j] + a[k] is a multiple of 3.\n// \n//   Example :\n//       Input: n = 5\n//       Output: 1\n//       Explanation: \n//       a = [1, 3, 7, 13, 21]\n//       The only valid triple is (1, 7, 13).\n// const getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n", "canonical_solution": "      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "//   You are given a positive integer n. You have to create an integer array a of length n.\n//       For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n//       Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n//   and a[i] + a[j] + a[k] is a multiple of 3.\n// \n//   Example :\n//       Input: n = 5\n//       Output: 1\n//       Explanation: \n//       a = [1, 3, 7, 13, 21]\n//       The only valid triple is (1, 7, 13).\n// const getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] + y[j] + y[n - 1] % 3 === 0) {\n        u++\n      }\n    }\n  }\n  return u\n}\n\n// const getMaxTriples = (n) => {\n//   return 0\n// }\n\nconst getMaxTriples = (n) => {\n  const arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1)\n  }\n  const ans = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      const t = arr[i] + arr[j] + arr[n - 1]\n      if (t % 3 === 0) {\n        ans++\n      }\n    }\n  }\n  return ans\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "// There are eight planets in our solar system: the closerst to the Sun\n//   is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n//   Uranus, Neptune.\n//   Write a function that takes two planet names as strings planet1 and planet2.\n//   The function should return a tuple containing all planets whose orbits are\n//   located between the orbit of planet1 and the orbit of planet2, sorted by\n//   the proximity to the sun.\n//   The function should return an empty tuple if planet1 or planet2\n//   are not correct planet names.\n//   Examples\n//   bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n//   bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n//   bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// const bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n", "canonical_solution": "  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "// There are eight planets in our solar system: the closerst to the Sun\n//   is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n//   Uranus, Neptune.\n//   Write a function that takes two planet names as strings planet1 and planet2.\n//   The function should return a tuple containing all planets whose orbits are\n//   located between the orbit of planet1 and the orbit of planet2, sorted by\n//   the proximity to the sun.\n//   The function should return an empty tuple if planet1 or planet2\n//   are not correct planet names.\n//   Examples\n//   bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n//   bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n//   bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// const bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo < 0) return u\n  if (hi < 0) return u\n  while (lo < hi) {\n    u.push(y[lo])\n    lo++\n  }\n  return u\n// }\n\n// // ====================================================================\n\n// const planet = (planet) => {\n//   switch (planet) {\n//   case 'Mercury': return 1\n//   case 'Venus': return 2\n//   case 'Earth': return 3\n//   case 'Mars': return 4\n//   case 'Jupiter': return 5\n//   case 'Saturn': return 6\n//   case 'Uranus': return 7\n//   case 'Neptune': return 8\n//   default: return -1\n//   }\n// }\n// const getProximity = (planet1, planet2) => {\n//   const p = planet(planet1)\n//   const q = planet(planet2)\n//   if (p == q) return 0\n//   if (p == 1 && q == 2) return 0\n//   if (p == 2 && q == 3) return 0\n//   if (p == 3 && q == 4) return 0\n//   if (p == 4 && q == 5) return 0\n//   if (p == 5 && q == 6) return 0\n//   if (p == 6 && q == 7) return 0\n//   if (p == 7 && q == 8) return 0\n//   if (p == 8 && q == 1) return 0\n//   return 1\n// }\n// const closest = (array, x) => {\n//   const min = -1\n//   const minIdx = -1\n//   for (let i = 0; i < array.length; i++) {\n//     if (x < array[i]) {\n//       if (minIdx < 0 || min > getProximity(array[minIdx], x)) {\n//         minIdx = i\n//         min = getProximity(array[minIdx], x)\n//       }\n//     }\n//   }\n//   return minIdx\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// const closestIndex = (array, x) => {\n//   return array.indexOf(x)\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n// }\n\n// // ====================================================================\n\n// const closest = (array, x) => {\n//   return array[closestIndex(array, x)]\n//"}
{"task_id": "JavaScript/149", "prompt": "// Write a function that accepts a list of strings as a parameter,\n//   deletes the strings that have odd lengths from it,\n//   and returns the resulted list with a sorted order,\n//   The list is always a list of strings and never an array of numbers,\n//   and it may contain duplicates.\n//   The order of the list should be ascending by length of each word, and you\n//   should return the list sorted by that rule.\n//   If two words have the same length, sort the list alphabetically.\n//   The function should return a list of strings in sorted order.\n//   You may assume that all words will have the same length.\n//   For example:\n//   assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n//   assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n// const sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n", "canonical_solution": "            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "// Write a function that accepts a list of strings as a parameter,\n//   deletes the strings that have odd lengths from it,\n//   and returns the resulted list with a sorted order,\n//   The list is always a list of strings and never an array of numbers,\n//   and it may contain duplicates.\n//   The order of the list should be ascending by length of each word, and you\n//   should return the list sorted by that rule.\n//   If two words have the same length, sort the list alphabetically.\n//   The function should return a list of strings in sorted order.\n//   You may assume that all words will have the same length.\n//   For example:\n//   assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n//   assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n// const sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        p.splice(k + 1, 1)\n      }\n    }\n  }\n  return p\n}\n\n// const sortedListSum = (lst) => {\n  // let p = []\n  // for (let i = 0; i < lst.length; i++) {\n    // if (lst[i].length % 2 == 0) {\n      // p.push(lst[i])\n    // }\n  // }\n  // for (let j = p.length - 2; j >= 0; j--) {\n    // for (let k = 0; k <= j; k++) {\n      // let f = 0\n      // if (p[k].length > p[k + 1].length) { f = 1 }\n      // if (p[k].length == p[k + 1].length) {\n        // let r = p[k].length\n        // for (let l = 0; l < r; l++) {\n          // if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            // f = 1;\n            // break\n          // }\n        // }\n      // }\n      // if (f == 1) {\n        // p.splice(k + 1, 1)\n      // }\n    // }\n  // }\n  // return p\n// }\n\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break\n          }\n        }\n      }\n      if (f == 1) {\n        p.splice(k + 1, 1)\n      }\n    }\n  }\n  return p\n}\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]))\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "// A simple program which should return the value of x if n is \n//   a prime number and should return the value of y otherwise.\n// \n//   Examples:\n//   for xOrY(7, 34, 12) == 34\n//   for xOrY(15, 8, 5) == 5\n//    \n// const xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "// A simple program which should return the value of x if n is \n//   a prime number and should return the value of y otherwise.\n// \n//   Examples:\n//   for xOrY(7, 34, 12) == 34\n//   for xOrY(15, 8, 5) == 5\n//    \n// const xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i === 0) {\n      return xOrY(len / i, x, y)\n    }\n  }\n  return y\n}\n\nconsole.log(xOrY(5, 'a', 'b'))\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "// Given a list of numbers, return the sum of squares of the numbers\n//   in the list that are odd. Ignore numbers that are negative or not integers.\n//   doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n//   doubleTheDifference([-1, -2, 0]) == 0\n//   doubleTheDifference([9, -2]) == 81\n//   doubleTheDifference([0]) == 0\n//   If the input list is empty, return 0.\n// const doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "// Given a list of numbers, return the sum of squares of the numbers\n//   in the list that are odd. Ignore numbers that are negative or not integers.\n//   doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n//   doubleTheDifference([-1, -2, 0]) == 0\n//   doubleTheDifference([9, -2]) == 81\n//   doubleTheDifference([0]) == 0\n//   If the input list is empty, return 0.\n// const doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n// Given two lists, return the intersection of the two lists.\n//   doubleTheDifference([1, 3, 2, 0]) == [1, 3]\n//   doubleTheDifference([-1, -2, 0]) == []\n//   doubleTheDifference([9, -2]) == [-2]\n//   doubleTheDifference([0]) == []\n//   If the two lists are empty, return an empty list.\n// const doubleTheDifference = (lstA, lstB) => {\n  let r = []\n  for (let i = 0; i < lstA.length; i++) {\n    for (let j = 0; j < lstB.length; j++) {\n      if (lstA[i] == lstB[j]) {\n        r.push(lstA[i])\n      }\n    }\n  }\n  return r\n}\n\n// Given a list, return the difference of the list and its reversed copy.\n//   doubleTheDifference([1, 3, 2, 0]) == [2, 4]\n//   doubleTheDifference([-1, -2, 0]) == [2, 4]\n//   doubleTheDifference([9, -2]) == [-2, -4]\n//   doubleTheDifference([0]) == []\n//   If the input list is empty, return an empty list.\n// const doubleTheDifference = (lst) => {\n  let r = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst.length; j++) {\n      if (lst[i]!= lst[j]) {\n        r.push(lst[i])\n      }\n    }\n  }\n  return r\n}\n\n// Given a list, return the first list without the last element.\n//   doubleTheDifference([1, 3, 2, 0]) == [1, 3]\n//   doubleTheDifference([-1, -2, 0]) == [-1, -2]\n//   doubleTheDifference([9, -2]) == [9]\n//   doubleTheDifference([0]) == []\n//   If the input list is empty, return an empty list.\n// const doubleTheDifference = (lst) => {\n  let r = []\n  for (let i = 0; i < lst.length - 1; i++) {\n    r.push(lst[i])\n  }\n  return r\n}\n\n// Given a list, return the last element of the list without the first element.\n//   doubleTheDifference([1, 3, 2, 0]) == 2\n//   doubleTheDifference([-1, -2, 0]) == -2\n//   doubleTheDifference([9, -2]) == -2\n//   doubleTheDifference([0]) == 0\n//   If the input list is empty, return an empty list.\n// const doubleTheDifference = (lst) => {\n  let r = []\n  for (let i = 1; i < lst.length; i++) {\n    r.push(lst[i])\n  }\n  return r\n}\n\n// Given a list, return the sum of the squares of the elements of the list.\n//   doubleTheDifference([1, 3, 2, 0]) == 9\n//   doubleTheDifference([-1, -2, 0]) == 0\n//   doubleTheDifference([9, -2]) == 81\n//   doubleTheDifference([0]) == 0\n//   If the input list is empty, return 0.\n// const doubleTheDifference = (lst) => {\n  let r = 0\n  for (let i = 0; i < lst.length; i++) {\n    r += lst[i] * lst[i]\n  }\n  return r\n}\n\n// Given a list, return the difference of the elements of the list.\n//   doubleTheDifference([1, 3, 2, 0]) == 2\n//   doubleTheDifference([-1, -2, 0]) == 2\n//   doubleTheDifference([9, -2]) == 9\n//   doubleTheDifference([0]) == 0\n//   If the input list is empty, return 0.\n// const doubleTheDifference = (lst) => {\n  let r = 0\n  for (let i = 0; i < lst.length; i++) {\n    r += lst[i]\n  }\n  return r\n}\n\nmodule.exports = {\n  doubleTheDifference\n}\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "// I think we all remember that feeling when the result of some long-awaited\n//   event is finally known. The feelings and thoughts you have at that moment are\n//   definitely worth noting down and comparing.\n//   Your task is to determine if a person correctly guessed the results of a number of matches.\n//   You are given two arrays of scores and guesses of equal length, where each index shows a match. \n//   Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n//   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n//    \n//    \n//   example:\n// \n//   compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n//   compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n// const compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n", "canonical_solution": " game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "// I think we all remember that feeling when the result of some long-awaited\n//   event is finally known. The feelings and thoughts you have at that moment are\n//   definitely worth noting down and comparing.\n//   Your task is to determine if a person correctly guessed the results of a number of matches.\n//   You are given two arrays of scores and guesses of equal length, where each index shows a match. \n//   Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n//   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n//    \n//    \n//   example:\n// \n//   compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n//   compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n// const compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n   return game\n  }\n  return game\n}\n\nlet compare = (game, guess) => {\n  let game2 = []\n  let guess2 = []\n  for (let i = 0; i < game.length; i++) {\n    game2[i] = game[i]\n    guess2[i] = guess[i]\n  }\n  return compare(game2, guess2)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "// You will be given the name of a class (a string) and a list of extensions.\n//   The extensions are to be used to load additional classes to the class. The\n//   strength of the extension is as follows: Let CAP be the number of the uppercase\n//   letters in the extension's name, and let SM be the number of lowercase letters\n//   in the extension's name, the strength is given by the fraction CAP - SM.\n//   You should find the strongest extension and return a string in this\n//   format: ClassName.StrongestExtensionName.\n//   If there are two or more extensions with the same strength, you should\n//   choose the one that comes first in the list.\n//   For example, if you are given \"Slices\" as the class and a list of the\n//   extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//   return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n//   (its strength is -1).\n//   Example:\n//   for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n// const strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n", "canonical_solution": "    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "// You will be given the name of a class (a string) and a list of extensions.\n//   The extensions are to be used to load additional classes to the class. The\n//   strength of the extension is as follows: Let CAP be the number of the uppercase\n//   letters in the extension's name, and let SM be the number of lowercase letters\n//   in the extension's name, the strength is given by the fraction CAP - SM.\n//   You should find the strongest extension and return a string in this\n//   format: ClassName.StrongestExtensionName.\n//   If there are two or more extensions with the same strength, you should\n//   choose the one that comes first in the list.\n//   For example, if you are given \"Slices\" as the class and a list of the\n//   extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//   return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n//   (its strength is -1).\n//   Example:\n//   for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n// const strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y > s) {\n      s = y\n      u = extensions[i]\n    }\n  }\n  return class_name + '.' + u.substr(0, u.length - 1)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n//   cycpatternCheck(\"abcd\",\"abd\") => false\n//   cycpatternCheck(\"hello\",\"ell\") => true\n//   cycpatternCheck(\"whassup\",\"psus\") => false\n//   cycpatternCheck(\"abab\",\"baa\") => true\n//   cycpatternCheck(\"efef\",\"eeff\") => false\n//   cycpatternCheck(\"himenss\",\"simen\") => true\n// const cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n//   cycpatternCheck(\"abcd\",\"abd\") => false\n//   cycpatternCheck(\"hello\",\"ell\") => true\n//   cycpatternCheck(\"whassup\",\"psus\") => false\n//   cycpatternCheck(\"abab\",\"baa\") => true\n//   cycpatternCheck(\"efef\",\"eeff\") => false\n//   cycpatternCheck(\"himenss\",\"simen\") => true\n// const cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y == 1) { return true }\n    }\n  }\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// \n//    Example:\n//       evenOddCount(-12) ==> (1, 1)\n//       evenOddCount(123) ==> (1, 2)\n// const evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n", "canonical_solution": "    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// \n//    Example:\n//       evenOddCount(-12) ==> (1, 1)\n//       evenOddCount(123) ==> (1, 2)\n// const evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = Math.floor(num / 2)\n  }\n  return (e, o)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "//   Given a positive integer, obtain its roman numeral equivalent as a string,\n//   and return it in lowercase.\n//   Restrictions: 1 <= num <= 1000\n// \n//   Examples:\n//   >>> intToMiniRoman(19) == 'xix'\n//   >>> intToMiniRoman(152) == 'clii'\n//   >>> intToMiniRoman(426) == 'cdxxvi'\n// const intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n", "canonical_solution": "    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "//   Given a positive integer, obtain its roman numeral equivalent as a string,\n//   and return it in lowercase.\n//   Restrictions: 1 <= num <= 1000\n// \n//   Examples:\n//   >>> intToMiniRoman(19) == 'xix'\n//   >>> intToMiniRoman(152) == 'clii'\n//   >>> intToMiniRoman(426) == 'cdxxvi'\n// const intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res = sym[i] + res\n    i -= 1\n    if (div) {\n      res += sym[i]\n    }\n  }\n  return res.toLowerCase()\n}\n\n//   Explanation:\n//   1. 0 is a special case.\n//   2. If number is smaller than 1, return 'i'.\n//   3. If number is smaller than 5, return 'v' and 'i'.\n//   4. If number is smaller than 40, return 'x' and 'i'.\n//   5. If number is smaller than 50, return 'x' and 'v' and 'i'.\n//   6. If number is smaller than 90, return 'c' and 'x' and 'v' and 'i'.\n//   7. If number is smaller than 100, return 'c' and 'd' and 'x' and 'v' and 'i'.\n//   8. If number is smaller than 400, return 'cd' and 'x' and 'v' and 'i'.\n//   9. If number is smaller than 500, return 'cd' and 'x' and 'v' and 'ix'.\n//   10. If number is smaller than 900, return 'cdx' and 'x' and 'v' and 'ix'.\n//   11. If number is smaller than 1000, return 'cdx' and 'x' and 'v' and 'x'.\n//   12. If number is smaller than 4000, return 'cdxx' and 'x' and 'v' and 'x'.\n//   13. If number is smaller than 5000, return 'cdxx' and 'x' and 'v' and 'xl'.\n//   14. If number is smaller than 9999, return 'cdxxv' and 'x' and 'v' and 'xl'.\n//   15. Else return 'cdxxvx' and 'x' and 'v' and 'xl' and 'x'.\n// const intToRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res = sym[i] + res\n    i -= 1\n    if (div) {\n      res += sym[i]\n    }\n  }\n  return res.toLowerCase()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "//  Given the lengths of the three sides of a triangle. Return true if the three\n//   sides form a right-angled triangle, false otherwise.\n//   A right-angled triangle is a triangle in which one angle is right angle or\n//   90 degree.\n//   Example:\n//   rightAngleTriangle(3, 4, 5) == true\n//   rightAngleTriangle(1, 2, 3) == false\n// const rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n", "canonical_solution": "}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "//  Given the lengths of the three sides of a triangle. Return true if the three\n//   sides form a right-angled triangle, false otherwise.\n//   A right-angled triangle is a triangle in which one angle is right angle or\n//   90 degree.\n//   Example:\n//   rightAngleTriangle(3, 4, 5) == true\n//   rightAngleTriangle(1, 2, 3) == false\n// const rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\nconst isRightAngleTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c)\n}\n\n// Given a list of edges in a triangle, return the sum of the area of the\n// triangles. The area of a triangle is half the cross product of the two\n// edges.\nconst triangleArea = (edges) => {\n  const edgesLength = edges.length\n  return edgesLength * edgesLength / 2\n}\n\n// Given a list of three points, return the sum of the area of the triangle\n// defined by the three points.\nconst triangleArea = (points) => {\n  const pointsLength = points.length\n  const area = pointsLength * pointsLength - pointsLength\n  return area\n}\n\n// Given a list of points, return the sum of the area of the triangle defined by\n// the three points.\nconst triangleArea = (points) => {\n  const pointsLength = points.length\n  const area = pointsLength * pointsLength - pointsLength\n  return area\n}\n\n// Given a list of edges, return the area of the triangle defined by the\n// edges.\nconst triangleArea = (edges) => {\n  const edgesLength = edges.length\n  return edgesLength * edgesLength / 2\n}\n\n// Given a list of points, return the area of the triangle defined by the\n// points.\nconst triangleArea = (points) => {\n  const pointsLength = points.length\n  return pointsLength * pointsLength - pointsLength\n}\n\n// Given a list of edges, return the area of the triangle defined by the\n// edges.\nconst triangleArea = (edges) => {\n  const edgesLength = edges.length\n  return edgesLength * edgesLength / 2\n}\n\n// Given a list of points, return the area of the triangle defined by the\n// points.\nconst triangleArea = (points) => {\n  const pointsLength = points.length\n  return pointsLength * pointsLength - pointsLength\n}\n\n// Given a list of edges, return the area of the triangle defined by the\n// edges.\nconst triangleArea = (edges) => {\n  const edgesLength = edges.length\n  return edgesLength * edgesLength / 2\n}\n\n// Given a list of points, return the area of the triangle defined by the\n// points.\nconst triangleArea = (points) => {\n  const pointsLength = points.length\n  return pointsLength * pointsLength - pointsLength\n}\n\n// Given a list of edges, return the area of the triangle defined by the\n// edges.\nconst triangleArea = (edges) => {\n  const edgesLength = edges.length\n  return edgesLength * edgesLength / 2\n}\n\n// Given a list of points, return the area of the triangle defined by the\n// points.\nconst triangleArea = (points) => {\n  const pointsLength = points.length\n  return pointsLength * pointsLength - pointsLength\n}\n\n// Given a list of edges, return the area of the triangle defined by the\n// edges.\nconst triangleArea = (edges) => {\n  const edgesLength = edges.length\n  return edgesLength * edgesLength / 2\n}\n\n// Given a list of points, return the area of the triangle defined by the\n// points.\nconst triangleArea = (points) => {\n  const pointsLength = points.length\n  return pointsLength * pointsLength - pointsLength\n}\n\n// Given a list of edges, return the area of the triangle defined by the\n// edges.\nconst triangleArea = (edges) => {\n  const edgesLength = edges.length\n  return edgesLength * edgesLength / 2\n}\n\n// Given a list of points, return the area of the triangle defined by the\n// points.\nconst triangleArea = (points) => {\n  const pointsLength = points.length\n  return pointsLength * pointsLength - pointsLength\n}\n\n// Given a list of edges, return the area of the triangle defined by the\n// edges.\nconst triangleArea = (edges) => {\n  const edgesLength = edges.length\n  return edgesLength * edgesLength / 2\n}\n\n// Given a list of points, return the area of the triangle defined by the\n// points.\nconst triangleArea = (points) => {\n  const pointsLength = points.length\n  return pointsLength * pointsLength - pointsLength\n}\n\n// Given a list of edges, return the area of the triangle defined by the\n// edges.\nconst triangleArea = (edges) => {\n  const edgesLength = edges.length\n  return edgesLength * edgesLength / 2\n}\n\n// Given a list of points, return the area of the triangle defined by the\n// points.\nconst triangleArea = (points) => {\n  const pointsLength = points.length\n  return pointsLength * pointsLength - pointsLength\n}\n\n// Given a list of edges, return the area of the triangle defined by the\n// edges.\nconst triangleArea = (edges) => {\n  const edgesLength = edges.length\n  return edgesLength * edgesLength / 2\n}\n\n// Given a list of points, return the area of the triangle defined by the\n// points.\nconst triangleArea = (points) => {\n  const pointsLength = points.length\n  return pointsLength * pointsLength - pointsLength\n}\n\n// Given a list of edges, return the area of the triangle defined by the\n// edges.\nconst triangleArea = (edges) => {\n  const edgesLength = edges.length\n  return edgesLength * edgesLength / 2\n}\n\n// Given a list of points, return the area of the triangle defined by the\n// points.\nconst triangleArea = (points) => {\n  const pointsLength = points.length\n  return pointsLength * pointsLength - pointsLength\n}\n\n// Given a list of edges, return the area of the triangle defined by the\n// edges.\nconst triangleArea = (edges) => {\n  const edgesLength = edges.length\n  return edgesLength * edgesLength / 2\n}\n\n// Given a list of"}
{"task_id": "JavaScript/158", "prompt": "// Write a function that accepts a list of strings.\n//   The list contains different words. Return the word with maximum number\n//   of unique characters. If multiple strings have maximum number of unique\n//   characters, return the one which comes first in lexicographical order.\n// \n//   findMax([\"name\", \"of\", \"string\"]) === \"string\"\n//   findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n//   findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n// const findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "// Write a function that accepts a list of strings.\n//   The list contains different words. Return the word with maximum number\n//   of unique characters. If multiple strings have maximum number of unique\n//   characters, return the one which comes first in lexicographical order.\n// \n//   findMax([\"name\", \"of\", \"string\"]) === \"string\"\n//   findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n//   findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n// const findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      p += y\n    }\n    if (p > s) {\n      s = p\n      u = i\n    }\n  }\n  return words[u]\n}\n\nlet words = [\"name\", \"of\", \"string\"]\nconsole.log(findMax(words))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "//   You're a hungry rabbit, and you already have eaten a certain number of carrots,\n//   but now you need to eat more carrots to complete the day's meals.\n//   you should return an array of [ total number of eaten carrots after your meals,\n//                                   the number of carrots left after your meals ]\n//   if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n//    \n//   Example:\n//   * eat(5, 6, 10) -> [11, 4]\n//   * eat(4, 8, 9) -> [12, 1]\n//   * eat(1, 10, 10) -> [11, 0]\n//   * eat(2, 11, 5) -> [7, 0]\n//    \n//   Variables:\n//   @number : integer\n//       the number of carrots that you have eaten.\n//   @need : integer\n//       the number of carrots that you need to eat.\n//   @remaining : integer\n//       the number of remaining carrots thet exist in stock\n//    \n//   Constrain:\n//   * 0 <= number <= 1000\n//   * 0 <= need <= 1000\n//   * 0 <= remaining <= 1000\n// \n//   Have fun :)\n// const eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n", "canonical_solution": "  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "//   You're a hungry rabbit, and you already have eaten a certain number of carrots,\n//   but now you need to eat more carrots to complete the day's meals.\n//   you should return an array of [ total number of eaten carrots after your meals,\n//                                   the number of carrots left after your meals ]\n//   if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n//    \n//   Example:\n//   * eat(5, 6, 10) -> [11, 4]\n//   * eat(4, 8, 9) -> [12, 1]\n//   * eat(1, 10, 10) -> [11, 0]\n//   * eat(2, 11, 5) -> [7, 0]\n//    \n//   Variables:\n//   @number : integer\n//       the number of carrots that you have eaten.\n//   @need : integer\n//       the number of carrots that you need to eat.\n//   @remaining : integer\n//       the number of remaining carrots thet exist in stock\n//    \n//   Constrain:\n//   * 0 <= number <= 1000\n//   * 0 <= need <= 1000\n//   * 0 <= remaining <= 1000\n// \n//   Have fun :)\n// const eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n  } else {\n    return [need, remaining]\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "//   Given two lists operator, and operand. The first list has basic algebra operations, and \n//   the second list is a list of integers. Use the two given lists to build the algebric \n//   expression and return the evaluation of this expression.\n// \n//   The basic algebra operations:\n//   Addition ( + ) \n//   Subtraction ( - ) \n//   Multiplication ( * ) \n//   Floor division ( // ) \n//   Exponentiation ( ** ) \n// \n//   Example:\n//   operator['+', '*', '-']\n//   array = [2, 3, 4, 5]\n//   result = 2 + 3 * 4 - 5\n//   => result = 9\n// \n//   Note:\n//       The length of operator list is equal to the length of operand list minus one.\n//       Operand is a list of of non-negative integers.\n//       Operator list has at least one operator, and operand list has at least two operands.\n// \n// const doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n", "canonical_solution": "        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "//   Given two lists operator, and operand. The first list has basic algebra operations, and \n//   the second list is a list of integers. Use the two given lists to build the algebric \n//   expression and return the evaluation of this expression.\n// \n//   The basic algebra operations:\n//   Addition ( + ) \n//   Subtraction ( - ) \n//   Multiplication ( * ) \n//   Floor division ( // ) \n//   Exponentiation ( ** ) \n// \n//   Example:\n//   operator['+', '*', '-']\n//   array = [2, 3, 4, 5]\n//   result = 2 + 3 * 4 - 5\n//   => result = 9\n// \n//   Note:\n//       The length of operator list is equal to the length of operand list minus one.\n//       Operand is a list of of non-negative integers.\n//       Operator list has at least one operator, and operand list has at least two operands.\n// \n// const doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 0) { break }\n  }\n  let result = 0\n  for (let i = 0; i < operand.length; i++) {\n    result += operand[i]\n  }\n  return result\n}\n// \n//   Test Cases:\n//   operator = ['*', '-', '+', '**']\n//   operand = [2, 3, 4, 5]\n//   => result = 9\n// \n//   operator = ['*', '-', '+', '**']\n//   operand = [2, 3, 4, 5, 6]\n//   => result = 23\n// \n//   operator = ['*', '-', '+', '**']\n//   operand = [2, 3, 4, 5, 6, 7]\n//   => result = 23\n// \n//   operator = ['*', '-', '+', '**']\n//   operand = [2, 3, 4, 5, 6, 7, 8]\n//   => result = 447\n// \n//   operator = ['*', '-', '+', '**']\n//   operand = [2, 3, 4, 5, 6, 7, 8, 9]\n//   => result = 90691\n// \n//   operator = ['*', '-', '+', '**']\n//   operand = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n//   => result = 362160\n// \n//   operator = ['*', '-', '+', '**']\n//   operand = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n//   => result = 805280\n// \n//   operator = ['*', '-', '+', '**']\n//   operand = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n//   => result = 805280\n// \n//   operator = ['*', '-', '+', '**']\n//   operand = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n//   => result = 1623366400\n// \n//   operator = ['*', '-', '+', '**']\n//   operand = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n//   => result = 805280\n// \n//   operator = ['*', '-', '+', '**']\n//   operand = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n//   => result = 1623366400\n// \n//   operator = ['*', '-', '+', '**']\n//   operand = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n//   => result = 1805880160\n// \n//   operator = ['*', '-', '+', '**']\n//   operand = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n//   => result = 1805880160\n// \n//   operator = ['*', '-', '+', '**']\n//   operand = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n//   => result = 1805880160\n// \n//   operator = ['*', '-', '+', '**']\n//   operand = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n//   => result = 1805880160\n// \n//   operator = ['*', '-"}
{"task_id": "JavaScript/161", "prompt": "// You are given a string s.\n//   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//   otherwise keep it as it is.\n//   If the string contains no letters, reverse the string.\n//   The function should return the resulted string.\n//   Examples\n//   solve(\"1234\") = \"4321\"\n//   solve(\"ab\") = \"AB\"\n//   solve(\"#a@C\") = \"#A@c\"\n// const solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n", "canonical_solution": "    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "// You are given a string s.\n//   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//   otherwise keep it as it is.\n//   If the string contains no letters, reverse the string.\n//   The function should return the resulted string.\n//   Examples\n//   solve(\"1234\") = \"4321\"\n//   solve(\"ab\") = \"AB\"\n//   solve(\"#a@C\") = \"#A@c\"\n// const solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t === 0) {\n    return p\n  } else {\n    return p.toUpperCase()\n  }\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "//   Given a string 'text', return its md5 hash equivalent string.\n//   If 'text' is an empty string, return null.\n// \n//   >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n// const stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n", "canonical_solution": "  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "//   Given a string 'text', return its md5 hash equivalent string.\n//   If 'text' is an empty string, return null.\n// \n//   >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n// const stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5.createHash(text)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "//   Given two positive integers a and b, return the even digits between a\n//   and b, in ascending order.\n// \n//   For example:\n//   generateIntegers(2, 8) => [2, 4, 6, 8]\n//   generateIntegers(8, 2) => [2, 4, 6, 8]\n//   generateIntegers(10, 14) => []\n// const generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n", "canonical_solution": "  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "//   Given two positive integers a and b, return the even digits between a\n//   and b, in ascending order.\n// \n//   For example:\n//   generateIntegers(2, 8) => [2, 4, 6, 8]\n//   generateIntegers(8, 2) => [2, 4, 6, 8]\n//   generateIntegers(10, 14) => []\n// const generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let result = [];\n  let i = a;\n  while (i < b) {\n    result.push(i);\n    i += 2;\n  }\n  return result;\n};\n<|endoftext|>"}
