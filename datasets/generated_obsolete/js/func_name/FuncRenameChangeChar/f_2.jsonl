{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasclosEElemEntS", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n    const lst = numbers.sort();\n    for (let i = 0, j = 1, n = lst.length; i < n; i++) {\n        if (Math.abs(lst[i] - lst[j]) <= threshold) {\n            return true;\n        }\n        j++;\n    }\n    return false;\n};\n\nmodule.exports = {\n    isIn,\n    hasclosEElemEntS,\n    getIn\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepAratEPareNGrOups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  let str = paren_string.replace(/\\(/g,'');\n  str = str.replace(/\\)/g,'');\n  const stack = [];\n  let current_token = '';\n  let i = 0;\n  let is_open = false;\n  for (; i < str.length; i++) {\n    const char = str[i];\n    if (is_open) {\n      if (char === ')') {\n        stack.push(current_token);\n        current_token = '';\n        is_open = false;\n      } else if (char === '(') {\n        current_token += char;\n      } else {\n        current_token += char;\n      }\n    } else {\n      if (char === '(') {\n        stack.push(char);\n        current_token = '';\n        is_open = true;\n      } else {\n        current_token += char;\n      }\n    }\n  }\n  if (is_open) {\n    stack.push(current_token);\n  }\n  return stack;\n};\n\nmodule.exports = sepAratEPareNGrOups;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truNcatENumbEr", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  return (Math.floor(number) + \".\" + number % 1)\n}\n\n/* Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.6)\n  1.0\n  */\nconst truNcatENumbEr = (number) => {\n  return (Math.floor(number) + \".\" + number % 1)\n}\n\n/* Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.7)\n  1.0\n  */\nconst truNcatENumbEr = (number) => {\n  return (Math.floor(number) + \".\" + number % 1)\n}\n\n/* Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.8)\n  0.0\n  */\nconst truNcatENumbEr = (number) => {\n  return (Math.floor(number) + \".\" + number % 1)\n}\n\n/* Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.9)\n  0.0\n  */\nconst truNcatENumbEr = (number) => {\n  return (Math.floor(number) + \".\" + number % 1)\n}\n\n/* Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(4.0)\n  0.0\n  */\nconst truNcatENumbEr = (number) => {\n  return (Math.floor(number) + \".\" + number % 1)\n}\n\n/* Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(4.1)\n  0.1\n  */\nconst truNcatENumbEr = (number) => {\n  return (Math.floor(number) + \".\" + number % 1)\n}\n\n/* Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(4.2)\n  0.2\n  */\nconst truNcatENumbEr = (number) => {\n  return (Math.floor(number) + \".\" + number % 1)\n}\n\n/* Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(4.3)\n  0.3\n  */\nconst truNcatENumbEr = (number) => {\n  return (Math.floor(number) + \".\" + number % 1)\n}\n\n/* Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(4.4)\n  0.4\n  */\nconst truNcatENumbEr = (number) => {\n  return (Math.floor(number) + \".\" + number % 1)\n}\n\n/* Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(4.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  return (Math.floor(number) + \".\" + number % 1)\n}\n\n/* Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(4.6)\n  1.0\n  */\nconst truNcatENumbEr = (number) => {\n  return (Math.floor(number) + \".\" + number % 1)\n}\n\n/* Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(4.7)\n  1.0\n  */\nconst truNcatENumbEr = (number) => {\n  return (Math.floor(number) + \".\" + number % 1)\n}\n\n/* Given a positive floating point number, it can be decomposed into and\n  integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(4.8)\n  0.0\n  */\nconst truNcatENumbEr = (number) => {\n  return (Math.floor(number) + \".\" + number % 1)"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belOwZeRo", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  const initial = 0\n  const operations = operations.slice()\n  const operationsLength = operations.length\n  const previous = initial\n\n  const processOperation = (operation) => {\n    if (operation === previous) {\n      return previous\n    }\n\n    previous = operation\n    operations.shift()\n    return processOperation(operations.shift())\n  }\n\n  const hasNegativeAmount = (previous) => previous < 0\n\n  return hasNegativeAmount(processOperation(operations[operationsLength - 1]))\n}\n\nmodule.exports = belOwZeRo\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meaNAbsOlutedevIatioN", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const absDev = (x) => Math.abs(x - Math.mean(numbers));\n  const mean = Math.mean(numbers);\n  return absDev(numbers).map(absDev).reduce((a, b) => a + b);\n};\n\n/**\n  * @param {Array} numbers - An array of numbers\n  * @returns {number} The standard deviation of the given array\n  * For a given list of input numbers, calculate the standard deviation of this dataset.\n  * StdDev = sqrt(variance)\n  * See https://en.wikipedia.org/wiki/Standard_deviation\n  * >>> stdDev( [1.0, 2.0, 3.0, 4.0] )\n  * 2.0\n  */\nconst stdDev = (numbers) => {\n  const mean = Math.mean(numbers);\n  const stdDev = (x) => Math.sqrt(\n    Math.pow(x - mean, 2)\n  );\n  return stdDev(numbers).reduce((a, b) => a + b);\n};\n\n/**\n  * @param {Array} numbers - An array of numbers\n  * @returns {number} The skewness of the given array\n  * For a given list of input numbers, calculate the skewness of this dataset.\n  * Skewness = 3 * (mean(abs(x - mean(x)) / stdDev(x))\n  * See https://en.wikipedia.org/wiki/Skewness\n  * >>> skewness( [1.0, 2.0, 3.0, 4.0] )\n  * 0.0\n  */\nconst skewness = (numbers) => {\n  const mean = Math.mean(numbers);\n  const stdDev = Math.sqrt(\n    Math.pow(\n      Math.pow(numbers.map(Math.abs), 2)\n     .reduce((a, b) => a + b)\n     .div(numbers.length - 1),\n      0.5\n    )\n  );\n  return 3 * (\n    numbers.map(absDev).reduce((a, b) => a + b)\n   .div(stdDev)\n   .div(numbers.length - 1)\n  );\n};\n\n/**\n  * @param {Array} numbers - An array of numbers\n  * @returns {number} The kurtosis of the given array\n  * For a given list of input numbers, calculate the kurtosis of this dataset.\n  * Kurtosis = 4 * (mean(abs(x - mean(x)) / stdDev(x))^2 - 3\n  * See https://en.wikipedia.org/wiki/Kurtosis\n  * >>> kurtosis( [1.0, 2.0, 3.0, 4.0] )\n  * 0.0\n  */\nconst kurtosis = (numbers) => {\n  const mean = Math.mean(numbers);\n  const stdDev = Math.sqrt(\n    Math.pow(\n      Math.pow(numbers.map(Math.abs), 2)\n     .reduce((a, b) => a + b)\n     .div(numbers.length - 1),\n      0.5\n    )\n  );\n  return 4 * (\n    numbers.map(absDev).reduce((a, b) => a + b)\n   .div(stdDev)\n   .div(stdDev)\n   .div(numbers.length - 1)\n  );\n};\n\n/**\n  * @param {Array} numbers - An array of numbers\n  * @returns {number} The geometric mean of the given array\n  * For a given list of input numbers, calculate the geometric mean of this dataset.\n  * Geometric Mean = 1 / sqrt(prod(numbers))\n  * See https://en.wikipedia.org/wiki/Geometric_mean\n  * >>> geomean( [1.0, 2.0, 3.0, 4.0] )\n  * 2.0\n  */\nconst geomean = (numbers) => {\n  const mean = Math.mean(numbers);\n  const stdDev = Math.sqrt(\n    Math.pow(numbers.map(Math.pow), 0.5)\n   .reduce((a, b) => a + b)\n   .div(numbers.length - 1)\n  );\n  return 1 / stdDev;\n};\n\nexport {\n  geomean,\n  meaNAbsOlutedevIatioN,\n  mean,\n  stdDev,\n  skewness,\n  kurtosis\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intErspErse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (!numbers || numbers.length === 0) return [];\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i === 0) {\n      output.push(numbers[i]);\n    } else {\n      output.push(numbers[i]);\n      output.push(delimeter);\n    }\n  }\n  return output;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse2 = (numbers, delimeter) => {\n  if (!numbers || numbers.length === 0) return [];\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i === 0) {\n      output.push(numbers[i]);\n    } else {\n      output.push(numbers[i]);\n      output.push(delimeter);\n    }\n  }\n  return output;\n};\n\n/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse3 = (numbers, delimeter) => {\n  if (!numbers || numbers.length === 0) return [];\n  let output = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (i === 0) {\n      output.push(numbers[i]);\n    } else {\n      output.push(numbers[i]);\n      output.push(delimeter);\n    }\n  }\n  return output;\n};\n\nconst _ = require(\"lodash\");\n\nconst test = require(\"ava\");\n\ntest(\"_\", (t) => {\n  const arr = [1, 2, 3];\n  const obj = {\n    a: 1,\n    b: 2,\n    c: 3\n  };\n  t.is(arr.join(\"\"), \"1 2 3\");\n  t.is(obj.a, 1);\n  t.is(obj.b, 2);\n  t.is(obj.c, 3);\n});\n\nconst test2 = require(\"ava\");\n\ntest(\"test2\", (t) => {\n  const arr = [1, 2, 3];\n  const obj = {\n    a: 1,\n    b: 2,\n    c: 3\n  };\n  const arr2 = [1, 2, 3, 4, 5, 6];\n  const obj2 = {\n    a: 1,\n    b: 2,\n    c: 3,\n    d: 4,\n    e: 5,\n    f: 6\n  };\n  t.is(arr.join(\"\"), \"1 2 3\");\n  t.is(obj.a, 1);\n  t.is(obj.b, 2);\n  t.is(obj.c, 3);\n  t.is(obj2.d, 4);\n  t.is(obj2.e, 5);\n  t.is(obj2.f, 6);\n  t.is(arr2.join(\"\"), \"1 2 3 4 5 6\");\n  t.is(arr2.join(\" \"), \"1 2 3 4 5 6\");\n  t.is(arr2.join(\":\"), \"1:2:3:4:5:6\");\n  t.is(arr2.join(\"-\"), \"1-2-3-4-5-6\");\n  t.is(arr2.join(\"+\"), \"1+2+3+4+5+6\");\n  t.is(arr2.join(\".\"), \"1.2.3.4.5.6\");\n  t.is(arr2.join(\"-.\"), \"1-2-3-4-5-6\");\n  t.is(arr2.join(\"+.\"), \"1+2+3+4+5+6\");\n  t.is(arr2.join(\"*.\"), \"1*2*3*4*5*6\");\n  t.is(arr2.join(\"{*}\"), \"1{*}2{*}3{*}4{*}5{*}6\");\n  t.is(arr2.join(\"[*]\"), \"1[*]2[*]3[*]4[*]5[*]6\");\n  t.is(arr2.join(\"(*)\"), \"1(*)2(*)3(*)4(*)5(*)6\");\n  t.is(arr2.join(\"{(*)}\"), \"1{(*)}2{(*)}3{(*)}4{(*)}5{(*)}6\");\n  t.is(arr2.join(\"[(*)}\"), \"1[(*)}2[(*)}3[(*)}4[(*)}5[(*)}6\");\n  t.is(arr2.join(\"{*}\"), \"1{*}2{*}3{*}4{*}5{*}6\");\n  t.is(arr2.join(\"{(*)}\"), \"1{(*)}2{(*)}3{(*)}4{(*)}5{(*)}6\");\n  t.is(arr2.join(\"{(*)}\"), \"1{(*)}2{(*)}3{(*)}4{(*)}5{(*)}6\");\n  t.is(arr2.join(\"{(*)}\"), \"1{(*)}2{(*)}3{(*)}4{(*)}5{(*)}6\");\n  t.is(arr2.join(\"{(*)}\"), \"1{(*)}2{(*)}3{(*)}4{(*)}5{(*)}6\");\n  t.is(arr2.join(\"{(*)}\"), \"1{(*)}2{(*)}3{(*)}4{(*)}5{("}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parSeNeStedPAreNs", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n  // Use recursion to do the work of the function.\n  // Use the recursion stack to hold the levels of nesting.\n  const stack = []\n  const result = []\n\n  // This is the helper function to make the stack easier to use.\n  const push = (x) => {\n    // If the stack is empty, add the item.\n    if (stack.length === 0) {\n      stack.push(x)\n      return\n    }\n\n    // If the top of the stack is equal to the current item, add the item to the stack\n    // and keep going.\n    if (stack[stack.length - 1] === x) {\n      stack.push(x)\n      return\n    }\n\n    // If the top of the stack is less than the current item, then the stack needs to\n    // be pushed and popped to the correct level.\n    if (stack[stack.length - 1] < x) {\n      stack.push(x)\n      while (stack[stack.length - 1] < x) {\n        stack.pop()\n      }\n      stack.pop()\n      return\n    }\n\n    // If the top of the stack is greater than the current item, then the stack needs\n    // to be popped until it is at the correct level.\n    while (stack[stack.length - 1] > x) {\n      stack.pop()\n    }\n    stack.pop()\n  }\n\n  // This is the helper function to iterate through the string and add the item to the\n  // result array.\n  const add = (x) => {\n    // If the stack is empty, add the item.\n    if (stack.length === 0) {\n      result.push(x)\n      return\n    }\n\n    // If the top of the stack is equal to the current item, add the item to the stack\n    // and keep going.\n    if (stack[stack.length - 1] === x) {\n      stack.push(x)\n      return\n    }\n\n    // If the top of the stack is less than the current item, then the stack needs to\n    // be pushed and popped to the correct level.\n    if (stack[stack.length - 1] < x) {\n      stack.push(x)\n      while (stack[stack.length - 1] < x) {\n        stack.pop()\n      }\n      stack.pop()\n      return\n    }\n\n    // If the top of the stack is greater than the current item, then the stack needs\n    // to be popped until it is at the correct level.\n    while (stack[stack.length - 1] > x) {\n      stack.pop()\n    }\n    stack.pop()\n  }\n\n  // Start the recursion.\n  for (let i = 0; i < paren_string.length; i++) {\n    let paren = paren_string[i]\n    let next = paren_string[i + 1]\n\n    // If the next item in the string is a paren, then recurse.\n    if (next === '(') {\n      push(paren)\n      add(paren)\n      push(next)\n      i++\n      continue\n    }\n\n    // If the next item in the string is a paren, then recurse.\n    if (next === ')') {\n      if (stack.length === 0) {\n        throw new Error('No matching opening parenthesis.')\n      }\n\n      // If the top of the stack is a paren, then recurse.\n      if (stack[stack.length - 1] === paren) {\n        stack.pop()\n        add(paren)\n        push(next)\n        i++\n        continue\n      }\n\n      // If the top of the stack is less than the current paren, then recurse.\n      if (stack[stack.length - 1] < paren) {\n        stack.pop()\n        while (stack[stack.length - 1] < paren) {\n          stack.pop()\n        }\n        stack.pop()\n        push(paren)\n        add(paren)\n        push(next)\n        i++\n        continue\n      }\n\n      // If the top of the stack is greater than the current paren, then recurse.\n      while (stack[stack.length - 1] > paren) {\n        stack.pop()\n      }\n      stack.pop()\n      add(paren)\n      push(next)\n      i++\n      continue\n    }\n  }\n\n  // Once the stack is empty, the recursion is done.\n  if (stack.length > 0) {\n    throw new Error('There are unclosed parentheses.')\n  }\n\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filTerBYSubsTriNg", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n  let index = -1;\n  let result = [];\n  while ((index = strings.indexOf(substring, index + 1))!== -1) {\n    result.push(strings.slice(index, index + len(substring)));\n  }\n  return result;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filTerBYSubsTriNgNot = (strings, substring) => {\n  let index = -1;\n  let result = [];\n  while ((index = strings.indexOf(substring, index + 1))!== -1) {\n    result.push(strings.slice(0, index));\n  }\n  return result;\n};\n\n/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNgNot([], 'a')\n  []\n  >>> filTerBYSubsTriNgNot(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSubsTriNgNotBy = (strings, substring) => {\n  let index = -1;\n  let result = [];\n  while ((index = strings.indexOf(substring, index + 1))!== -1) {\n    result.push(strings.slice(index + 1, index + len(substring) + 1));\n  }\n  return result;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNotBy([], 'a')\n  []\n  >>> filTerBYSubsTriNgNotBy(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filTerBYSubsTriNgNotBy = (strings, substring) => {\n  let index = -1;\n  let result = [];\n  while ((index = strings.indexOf(substring, index + 1))!== -1) {\n    result.push(strings.slice(0, index));\n  }\n  return result;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNotBy([], 'a')\n  []\n  >>> filTerBYSubsTriNgNotBy(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filTerBYSubsTriNgNotBy2 = (strings, substring) => {\n  let index = -1;\n  let result = [];\n  while ((index = strings.indexOf(substring, index + 1))!== -1) {\n    result.push(strings.slice(index + 1, index + len(substring) + 1));\n  }\n  return result;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNotBy2([], 'a')\n  []\n  >>> filTerBYSubsTriNgNotBy2(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSubsTriNgNotBy2 = (strings, substring) => {\n  let index = -1;\n  let result = [];\n  while ((index = strings.indexOf(substring, index + 1))!== -1) {\n    result.push(strings.slice(0, index));\n  }\n  return result;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNotBy2([], 'a')\n  []\n  >>> filTerBYSubsTriNgNotBy2(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filTerBYSubsTriNgNotBy3 = (strings, substring) => {\n  let index = -1;\n  let result = [];\n  while ((index = strings.indexOf(substring, index + 1))!== -1) {\n    result.push(strings.slice(index + 1, index + len(substring) + 1));\n  }\n  return result;\n};\n\n/* Filter an input list of strings only for ones that do not contain given substring\n  >>> filTerBYSubsTriNgNotBy3([], 'a')\n  []\n  >>> filTerBYSubsTriNgNotBy3(['abc', 'bacd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSubsTriNgNotBy3 = (strings, substring) => {\n  let index = -1;\n  let result = [];\n  while ((index = strings.indexOf(substring, index + 1))!== -1) {\n    result.push(strings.slice(0, index));\n  }\n  return result;\n};\n\nexport default {\n  filTerBYSubsTriNg,\n  filTerBYSubsTriNgNot,\n  filTerBYSubsTriNgNotBy,\n  filTerBYSubsTriNgNotBy2,\n  filTerBYSubsTriNgNotBy3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumprodUct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n\n  const sum = numbers.reduce((a, b) => a + b)\n  const prod = numbers.reduce((a, b) => a * b)\n\n  return (sum, prod)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolLingmax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  const l = [];\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      index = i;\n    }\n  }\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      l.push(numbers[index]);\n    }\n  }\n  return l;\n};\n\nmodule.exports = rolLingmax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  return isPAlinDrome(string + string.split('').reverse().join(''));\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Reverse the string prefix and append to the front of the string.\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('catac')\n  'catac'\n  */\nconst makePalindromeReverse = (string) => {\n  return isPAlinDrome(string.split('').reverse().join(string));\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Reverse the string prefix and append to the front of the string.\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('catac')\n  'catac'\n  */\nconst makePalindromeReverseBackward = (string) => {\n  return isPAlinDrome(string.split('').reverse().join(string));\n}\n\nmodule.exports = {\n  isPAlinDrome,\n  makePalindrome,\n  makePalindromeReverse,\n  makePalindromeReverseBackward\n};\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strIngXOr", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  return a ^ b;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngAnd('010', '110')\n  '010'\n  */\nconst strIngAnd = (a, b) => {\n  return a & b;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngOr('010', '110')\n  '110'\n  */\nconst strIngOr = (a, b) => {\n  return a | b;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strIngNot('010', '110')\n  '011'\n  */\nconst strIngNot = (a, b) => {\n  return ~a & b;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary shift left on these inputs and return result also as a string.\n  >>> strIngShiftLeft('010', '110')\n  '0100110'\n  */\nconst strIngShiftLeft = (a, b) => {\n  return a << b;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary shift right on these inputs and return result also as a string.\n  >>> strIngShiftRight('010', '110')\n  '1110110'\n  */\nconst strIngShiftRight = (a, b) => {\n  return a >> b;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary NOT on these inputs and return result also as a string.\n  >>> strIngUnaryNot('010')\n  '011'\n  */\nconst strIngUnaryNot = (a) => {\n  return ~a;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> strIngBinaryAnd('010', '110')\n  '00'\n  */\nconst strIngBinaryAnd = (a, b) => {\n  return a & b;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary OR on these inputs and return result also as a string.\n  >>> strIngBinaryOr('010', '110')\n  '110'\n  */\nconst strIngBinaryOr = (a, b) => {\n  return a | b;\n};\n\n/*\n  Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngBinaryXOr('010', '110')\n  '101'\n  */\nconst strIngBinaryXOr = (a, b) => {\n  return a ^ b;\n};\n\nmodule.exports = {\n  strIngAdd,\n  strIngSubtract,\n  strIngMultiply,\n  strIngDivide,\n  strIngPower,\n  strIngCompare,\n  strIngEqual,\n  strIngNotEqual,\n  strIngLessThan,\n  strIngGreaterThan,\n  strIngLessThanOrEqual,\n  strIngGreaterThanOrEqual,\n  strIngShiftLeft,\n  strIngShiftRight,\n  strIngUnaryNot,\n  strIngBinaryAnd,\n  strIngBinaryOr,\n  strIngBinaryXOr,\n  strIngAnd,\n  strIngOr,\n  strIngXOr,\n  strIngNot,\n  strIngBinaryShiftLeft,\n  strIngBinaryShiftRight\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonGest", "gc": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n  if (strings.length === 0) return null\n  let max = 0\n  let length = 0\n  let maxIndex = 0\n  strings.forEach((str, i) => {\n    if (str.length > length) {\n      length = str.length\n      maxIndex = i\n      max = str\n    }\n  })\n  return max\n}\n\n/*\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc', 'd', 'ee'])\n  'ee'\n  */\nconst longest = (strings) => {\n  let max = 0\n  let maxString = ''\n  strings.forEach((str) => {\n    if (str.length > max) {\n      max = str.length\n      maxString = str\n    }\n  })\n  return maxString\n}\n\n/*\n  >>> lonGest(['a', 'bb', 'ccc', 'd', 'ee'])\n  'ee'\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> lonGest(['a', 'b', 'c', 'd'])\n  'd'\n  */\nconst shortest = (strings) => {\n  let min = strings.length\n  let minString = ''\n  strings.forEach((str) => {\n    if (str.length < min) {\n      min = str.length\n      minString = str\n    }\n  })\n  return minString\n}\n\n/*\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc', 'd', 'ee'])\n  'ee'\n  >>> lonGest(['a', 'b', 'c', 'd'])\n  'a'\n  */\nconst first = (strings) => {\n  let first = strings[0]\n  strings.forEach((str) => {\n    if (first.length < str.length) {\n      first = str\n    }\n  })\n  return first\n}\n\n/*\n  >>> lonGest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc', 'd', 'ee'])\n  'a'\n  >>> lonGest(['a', 'b', 'c', 'd', 'ee'])\n  'a'\n  >>> lonGest(['a', 'b', 'c', 'd', 'ee', 'ff'])\n  'a'\n  */\nconst last = (strings) => {\n  let last = strings[strings.length - 1]\n  strings.forEach((str) => {\n    if (last.length < str.length) {\n      last = str\n    }\n  })\n  return last\n}\n\nmodule.exports = {\n  longest,\n  shortest,\n  first,\n  last,\n  lonGest\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greAtesTCommOnDIvisoR", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n  let r = a;\n  while (b > 0) {\n    if (a % b === 0) {\n      r = b;\n    }\n    b = b % a;\n  }\n  return r;\n};\n\n/**\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  * Return a least common multiple of two integers a and b\n  * For example:\n  * If you have two numbers that are 2 and 4, you can use\n  * lcm(2, 4) to get the least common multiple of these numbers\n  * 2 and 4\n  */\nconst lcm = (a, b) => {\n  return Math.abs(a * b) / greAtesTCommOnDIvisoR(a, b);\n};\n\n/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n * Return the number of permutations of n numbers in k combinations\n */\nconst numberOfPermutations = (n, k) => {\n  if (k === 0 || k === n) {\n    return 1;\n  }\n  const a = n - k;\n  const b = k - 1;\n  return numberOfPermutations(a, b) * numberOfPermutations(a, b + 1) * lcm(a, b);\n};\n\n/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n * Return the number of permutations of n numbers in k combinations\n */\nconst numberOfPermutationsOfCombinations = (n, k) => {\n  if (k === 0 || k === n) {\n    return 1;\n  }\n  const a = n - k;\n  const b = k - 1;\n  return numberOfPermutations(a, b) * numberOfPermutations(a, b + 1) * lcm(a, b) / greAtesTCommOnDIvisoR(a, b);\n};\n\n/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n * Return the number of permutations of n numbers in k combinations\n */\nconst numberOfPermutationsOfCombinations2 = (n, k) => {\n  if (k === 0 || k === n) {\n    return 1;\n  }\n  const a = n - k;\n  const b = k - 1;\n  return numberOfPermutations(a, b) * numberOfPermutations(a, b + 1) * lcm(a, b) / (n * greAtesTCommOnDIvisoR(a, b));\n};\n\n/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n * Return the number of permutations of n numbers in k combinations\n */\nconst numberOfPermutationsOfCombinations3 = (n, k) => {\n  if (k === 0 || k === n) {\n    return 1;\n  }\n  const a = n - k;\n  const b = k - 1;\n  return numberOfPermutations(a, b) * numberOfPermutations(a, b + 1) * lcm(a, b) / (n * (n - 1) / 2);\n};\n\n/**\n * @param {number} n\n * @param {number} k\n * @return {number}\n * Return the number of permutations of n numbers in k combinations\n */\nconst numberOfPermutationsOfCombinations4 = (n, k) => {\n  if (k === 0 || k === n) {\n    return 1;\n  }\n  const a = n - k;\n  const b = k - 1;\n  return numberOfPermutations(a, b) * numberOfPermutations(a, b + 1) * lcm(a, b) / (n * (n - 1) * (n - 2) / 6);\n};\n\nconst test = (n, k) => {\n  const l = numberOfPermutationsOfCombinations(n, k);\n  console.log(`${n} x ${k} = ${l}`);\n};\n\n//test(5, 3);\ntest(15, 3);\ntest(4, 2);\ntest(3, 1);\ntest(4, 3);\ntest(3, 2);\ntest(3, 3);\ntest(3, 4);\ntest(4, 4);\ntest(3, 5);\ntest(4, 5);\ntest(5, 5);\ntest(6, 6);\ntest(7, 7);\ntest(8, 8);\ntest(9, 9);\ntest(10, 10);\ntest(11, 11);\ntest(12, 12);\ntest(13, 13);\ntest(14, 14);\ntest(15, 15);\ntest(16, 16);\ntest(17, 17);\ntest(18, 18);\ntest(19, 19);\ntest(20, 20);\ntest(21, 21);\ntest(22, 22);\ntest(23, 23);\ntest(24, 24);\ntest(25, 25);\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allprefIxes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n  let result = []\n  let index = 0\n  let end = string.length - 1\n  let next = string[index + 1]\n\n  while (index < end) {\n    if (next === string[index]) {\n      result.push(string.slice(index, index + 2))\n      index += 2\n    } else {\n      index += 1\n    }\n\n    next = string[index + 1]\n  }\n\n  return result\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allsuffixes('abc')\n  ['b', 'c', 'd']\n  */\nconst allsuffixes = (string) => {\n  let result = []\n  let index = string.length - 1\n  let next = string[index]\n\n  while (index >= 0) {\n    if (next === string[index]) {\n      result.push(string.slice(index, index + 1))\n      index -= 1\n    } else {\n      index -= 1\n    }\n\n    next = string[index]\n  }\n\n  return result\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allsuffixes('abc')\n  ['b', 'c', 'd']\n  */\nconst allsuffixesIxes = (string) => {\n  let result = []\n  let index = string.length - 1\n  let next = string[index]\n\n  while (index >= 0) {\n    if (next === string[index]) {\n      result.push(string.slice(index, index + 1))\n      index -= 1\n    } else {\n      index -= 1\n    }\n\n    next = string[index]\n  }\n\n  return result\n}\n\nmodule.exports = {\n  allprefIxes,\n  allsuffixes,\n  allsuffixesIxes,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strIngSEquenCe", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = '0';\n  let nn = n;\n  while (nn--) {\n    str +='';\n  }\n  return str;\n};\n\n/**\n  * Return a string containing space-delimited numbers starting from 0 upto n exclusive.\n  * @param {number} n\n  * @returns {string}\n  */\nconst strIngSEquenCeEx = (n) => {\n  let str = '0';\n  let nn = n;\n  while (nn--) {\n    str +='';\n  }\n  return str;\n};\n\nmodule.exports = {\n  strIngSEquenCe,\n  strIngSEquenCeEx,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "couNtDiStincTChAractErs", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n    let arr = string.split('')\n    let dic = {}\n    for (let i = 0; i < arr.length; i++) {\n        if (dic[arr[i]] === undefined) {\n            dic[arr[i]] = 1\n        } else {\n            dic[arr[i]] += 1\n        }\n    }\n    let count = Object.keys(dic).length\n    return count\n}\n\n/*\n  Given a string, check if it contains all the given characters\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZ')\n  True\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZx')\n  False\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZ', 'XY')\n  False\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZ')\n  False\n  */\nconst couNtDiStincTChAractErs = (string, charList) => {\n    let arr = string.split('')\n    for (let i = 0; i < charList.length; i++) {\n        if (arr.indexOf(charList[i]) === -1) {\n            return false\n        }\n    }\n    return true\n}\n\n/*\n  Given a string, return the index of the first non-ascii character\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZ')\n  1\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZx')\n  -1\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZ', 'XY')\n  -1\n  */\nconst couNtDiStincTChAractErs = (string, charList) => {\n    let index = -1\n    for (let i = 0; i < charList.length; i++) {\n        if (string.indexOf(charList[i])!== -1) {\n            index = i\n            break\n        }\n    }\n    return index\n}\n\n/*\n  Given a string, return the index of the last non-ascii character\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZ')\n  3\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZx')\n  3\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZ', 'XY')\n  4\n  */\nconst couNtDiStincTChAractErs = (string, charList) => {\n    let index = -1\n    for (let i = 0; i < charList.length; i++) {\n        if (string.lastIndexOf(charList[i])!== -1) {\n            index = i\n            break\n        }\n    }\n    return index\n}\n\n/*\n  Given a string, return the number of times the given character appears in the string\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZ')\n  2\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZx')\n  1\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZ', 'XY')\n  1\n  */\nconst couNtDiStincTChAractErs = (string, charList) => {\n    let count = 0\n    for (let i = 0; i < string.length; i++) {\n        if (string.indexOf(charList[i])!== -1) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*\n  Given a string, return the number of times the given character appears at the given index\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZ', 0)\n  2\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZ', 1)\n  1\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZ', 2)\n  0\n  >>> couNtDiStincTChAractErs('xyzXYZ', 'XYZ', 3)\n  0\n  */\nconst couNtDiStincTChAractErs = (string, charList, index) => {\n    let count = 0\n    for (let i = 0; i < string.length; i++) {\n        if (string.indexOf(charList[i], index)!== -1) {\n            count += 1\n        }\n    }\n    return count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parSeMuSic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n    // This function has been tested.\n    return music_string.replace(/[o|.]/g, (_) => {\n        if (_ === '.' || _ === 'o') {\n            return 1;\n        } else {\n            return 2;\n        }\n    });\n};\n\nmodule.exports = parSeMuSic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howmanytimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === substring[0]) {\n      let j = 0;\n      while (j < substring.length && string[i + j] === substring[j]) {\n        j += 1;\n      }\n      if (j === substring.length) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\n/**\n  * Return the number of times that a given character can be found in the original string. Count overlaping cases.\n  * @param string\n  * @param character\n  * @returns {number}\n  */\nconst howmanytimes = (string, character) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === character) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/**\n * Return the number of times that a given character can be found in the original string. Count overlaping cases.\n * @param string\n * @param character\n * @returns {number}\n */\nconst howmanytimes = (string, character) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === character) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nmodule.exports = {\n  howmanytimes,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorTNumBers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n  let numbersList = numbers.split(' ');\n  numbersList.sort();\n  return numbersList.join(' ');\n};\n\nmodule.exports = sorTNumBers;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finDCloSestELemEnts", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  const len = numbers.length\n  if (len < 2) {\n    return (numbers)\n  }\n  const mid = len / 2\n  const left = numbers[0]\n  const right = numbers[len - 1]\n  const leftDelta = Math.abs(left - numbers[mid])\n  const rightDelta = Math.abs(right - numbers[mid])\n  if (leftDelta < rightDelta) {\n    return (numbers[0], numbers[mid])\n  } else {\n    return (numbers[mid], numbers[len - 1])\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resCaletoUniT", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n  let res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push((1 - (numbers[i] - 1) / 3) * 3);\n  }\n  return res;\n};\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5]\n  */\nconst resCaletoUniT2 = (numbers) => {\n  let res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push((1 - (numbers[i] - 1) / 3) * 3);\n  }\n  return res;\n};\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5]\n  */\nconst resCaletoUniT3 = (numbers) => {\n  let res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push((1 - (numbers[i] - 1) / 3) * 3);\n  }\n  return res;\n};\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5, 1.75]\n  */\nconst resCaletoUniT4 = (numbers) => {\n  let res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push((1 - (numbers[i] - 1) / 3) * 3);\n  }\n  return res;\n};\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5, 1.75, 2.0]\n  */\nconst resCaletoUniT5 = (numbers) => {\n  let res = [];\n  for (let i = 0; i < numbers.length; i++) {\n    res.push((1 - (numbers[i] - 1) / 3) * 3);\n  }\n  return res;\n};\n\nmodule.exports = {\n  resCaletoUniT,\n  resCaletoUniT2,\n  resCaletoUniT3,\n  resCaletoUniT4,\n  resCaletoUniT5\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filTerINtegeRs", "gc": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n  return values.filter((value) => isInteger(value));\n};\n\nexport default filTerINtegeRs;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strLen", "gc": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n    return string.length;\n}\n\n/**\n  * Return character at given position\n  *\n  * @param {string} string\n  * @param {number} index\n  * @returns {string}\n  */\nconst charAt = (string, index) => {\n    return string.charAt(index);\n}\n\n/**\n  * Returns the first index of a character in a string\n  *\n  * @param {string} string\n  * @param {string} char\n  * @returns {number}\n  */\nconst indexOf = (string, char) => {\n    return string.indexOf(char);\n}\n\n/**\n  * Returns the last index of a character in a string\n  *\n  * @param {string} string\n  * @param {string} char\n  * @returns {number}\n  */\nconst lastIndexOf = (string, char) => {\n    return string.lastIndexOf(char);\n}\n\n/**\n  * Returns a string with all spaces removed\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst trim = (string) => {\n    return string.trim();\n}\n\n/**\n  * Returns a string with leading spaces removed\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst trimLeft = (string) => {\n    return string.replace(/^\\s+/g, '');\n}\n\n/**\n  * Returns a string with trailing spaces removed\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst trimRight = (string) => {\n    return string.replace(/\\s+$/g, '');\n}\n\n/**\n  * Returns a string with all spaces removed\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst trimAll = (string) => {\n    return string.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n  * Return a copy of a string\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst copy = (string) => {\n    return string.slice(0);\n}\n\n/**\n  * Returns a string with all characters in lowercase\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst toLowerCase = (string) => {\n    return string.toLowerCase();\n}\n\n/**\n  * Returns a string with all characters in uppercase\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst toUpperCase = (string) => {\n    return string.toUpperCase();\n}\n\n/**\n  * Return a string with all spaces replaced by a dash\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst toDash = (string) => {\n    return string.replace(/\\s/g, '-');\n}\n\n/**\n  * Returns a string with all characters in lowercase\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst toCamelCase = (string) => {\n    return string.replace(/\\s([a-z])/g, (m, $1) => {\n        return $1.toUpperCase();\n    });\n}\n\n/**\n  * Returns a string with all characters in uppercase\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst toSnakeCase = (string) => {\n    return string.replace(/\\s([A-Z])/g, (m, $1) => {\n        return $1.toLowerCase();\n    });\n}\n\n/**\n  * Returns a string with all characters in uppercase\n  *\n  * @param {string} string\n  * @returns {string}\n  */\nconst toPascalCase = (string) => {\n    return string.replace(/\\s([a-z])/g, (m, $1) => {\n        return $1.toUpperCase();\n    });\n}\n\nmodule.exports = {\n    charAt,\n    indexOf,\n    lastIndexOf,\n    strLen,\n    trim,\n    trimLeft,\n    trimRight,\n    trimAll,\n    copy,\n    toLowerCase,\n    toUpperCase,\n    toDash,\n    toCamelCase,\n    toSnakeCase,\n    toPascalCase\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larGestdivisOr", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n  let largest = 0,\n    div = 1;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      div = i;\n      if (n / i > largest) largest = n / i;\n    }\n  }\n  return largest;\n};\n\n/*\n  What is the largest prime factor of the number n?\n  >>> largestPrimeFactor(10)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let largest = 0,\n    prime = 1;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      prime = i;\n      if (n / i > largest) largest = n / i;\n    }\n  }\n  return largest;\n};\n\n/*\n  What is the largest composite number that contains the prime factor p?\n  >>> largestComposite(6)\n  24\n  */\nconst largestComposite = (p) => {\n  let largest = 0,\n    composite = 1;\n  for (let i = 2; i < p; i++) {\n    if (p % i === 0) {\n      composite = i;\n      if (p / i > largest) largest = p / i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Find the largest composite number with exactly p prime factors\n  >>> largestComposite(6)\n  24\n  */\nconst largestCompositePrime = (p) => {\n  let largest = 0,\n    composite = 1;\n  for (let i = 2; i < p; i++) {\n    if (p % i === 0) {\n      composite = i;\n      if (p / i > largest) largest = p / i;\n    }\n  }\n  return largest;\n};\n\n/*\n  What is the smallest prime factor of the number n?\n  >>> smallestPrimeFactor(10)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  let largest = 0,\n    prime = 1;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      prime = i;\n      if (n / i < largest) largest = n / i;\n    }\n  }\n  return largest;\n};\n\n/*\n  What is the smallest prime factor of the number n?\n  >>> smallestPrimeFactor(15)\n  5\n  */\nconst smallestPrimeFactor2 = (n) => {\n  let largest = 0,\n    prime = 1;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      prime = i;\n      if (n / i < largest) largest = n / i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Find the smallest prime factor of the number n.\n  >>> smallestPrimeFactor(5)\n  5\n  */\nconst smallestPrimeFactor3 = (n) => {\n  let largest = 0,\n    prime = 1;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      prime = i;\n      if (n / i < largest) largest = n / i;\n    }\n  }\n  return largest;\n};\n\n/*\n  What is the smallest prime factor of the number n?\n  >>> smallestPrimeFactor(10)\n  2\n  */\nconst smallestPrimeFactor4 = (n) => {\n  let largest = 0,\n    prime = 1;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      prime = i;\n      if (n / i < largest) largest = n / i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Find the smallest prime factor of the number n.\n  >>> smallestPrimeFactor(15)\n  5\n  */\nconst smallestPrimeFactor5 = (n) => {\n  let largest = 0,\n    prime = 1;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      prime = i;\n      if (n / i < largest) largest = n / i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Find the smallest prime factor of the number n?\n  >>> smallestPrimeFactor(20)\n  5\n  */\nconst smallestPrimeFactor6 = (n) => {\n  let largest = 0,\n    prime = 1;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      prime = i;\n      if (n / i < largest) largest = n / i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Find the smallest prime factor of the number n?\n  >>> smallestPrimeFactor(30)\n  3\n  */\nconst smallestPrimeFactor7 = (n) => {\n  let largest = 0,\n    prime = 1;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      prime = i;\n      if (n / i < largest) largest = n / i;\n    }\n  }\n  return largest;\n};\n\n/*\n  What is the smallest prime factor of the number n?\n  >>> smallestPrimeFactor(10)\n  2\n  */\nconst smallestPrimeFactor8 = (n) => {\n  let largest = 0,\n    prime = 1;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      prime = i;\n      if (n / i < largest) largest = n / i;\n    }\n  }\n  return largest;\n};\n\n/*\n  Find the smallest prime factor of the number n?\n  >>> smallestPrimeFactor(15)\n  5\n  */\nconst smallestPrimeFactor9 = (n) => {\n  let largest = 0,\n    prime = 1;\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      prime = i;\n      if (n / i < largest) largest = n / i;\n    "}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "facToriZe", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const result = [];\n  let p = 2;\n  while (p * p <= n) {\n    while (n % p === 0) {\n      result.push(p);\n      n /= p;\n    }\n    p = p + 1;\n  }\n  if (n > 1) {\n    result.push(n);\n  }\n  return result;\n};\n\n/* Return prime factors of given integer in the order from largest to smallest.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZeReverse = (n) => {\n  const result = [];\n  let p = n;\n  while (p > 1) {\n    while (n % p === 0) {\n      result.push(p);\n      n /= p;\n    }\n    p = p - 1;\n  }\n  if (n > 1) {\n    result.push(n);\n  }\n  return result;\n};\n\n// TEST\n// -----\n// console.log(facToriZe(70));\n// console.log(facToriZeReverse(70));\n// console.log(facToriZe(70));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remOveDUplicAteS", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n  let list = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (list.indexOf(numbers[i]) < 0) {\n      list.push(numbers[i])\n    }\n  }\n  return list\n}\n\nmodule.exports = remOveDUplicAteS\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "fliPCasE", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n  let fli = '';\n  string = string.toLowerCase();\n  for (let i = 0; i < string.length; i++) {\n    fli += string[i].toUpperCase();\n    if (i!= string.length - 1) {\n      fli += string[i].toLowerCase();\n    }\n  }\n  return fli;\n};\n\nmodule.exports = fliPCasE;\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conCateNate", "gc": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n  let result = '';\n\n  for (let i = 0, len = strings.length; i < len; i++) {\n    result += strings[i];\n  }\n\n  return result;\n};\n\n/*\n  >>> toLowerCase('abc')\n  'abc'\n  >>> toLowerCase('ABC')\n  'abc'\n  >>> toLowerCase('Hello World!')\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('HELLO WORLD!', true)\n  'hello world!'\n  >>> toLowerCase('HELLO WORLD!', false)\n  'hello world!'\n  >>> toLowerCase('hello world!', true)\n  'hello world!'\n  >>> toLowerCase('hello world!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> toLowerCase('Hello World!', false)\n  'hello world!'\n  >>> toLowerCase('Hello World!', true)\n  'hello world!'\n  >>> to"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filTerBYPrefIx", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return strings.filter((s) => s.startsWith(prefix));\n};\n\n/**\n  * Returns a list of the longest prefixes of strings that contain the given prefix.\n  *\n  * @param  {List} strings  List of strings.\n  * @param  {String} prefix  Prefix of interest.\n  * @return {List}           List of the longest prefixes.\n  *\n  * @example\n  *\n  * >>> filTerByPrefix([], 'a')\n  * []\n  * >>> filTerByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  * [['abc', 'bcd'], ['cde']]\n  */\nconst filTerByPrefix = (strings, prefix) => {\n  return strings.map((s) => {\n    return s.split(prefix).reduce((acc, e) => {\n      if (acc.length < e.length) acc = e;\n      return acc;\n    }, '');\n  });\n};\n\n/**\n  * Returns a list of the longest prefixes of strings that do not contain the given prefix.\n  *\n  * @param  {List} strings  List of strings.\n  * @param  {String} prefix  Prefix of interest.\n  * @return {List}           List of the longest prefixes.\n  *\n  * @example\n  *\n  * >>> filTerByPrefix([], 'a')\n  * []\n  * >>> filTerByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  * [['abc', 'bcd'], ['cde']]\n  */\nconst filTerByNoPrefix = (strings, prefix) => {\n  return strings.filter((s) =>!s.startsWith(prefix));\n};\n\n/**\n  * Returns a list of the longest suffixes of strings that contain the given suffix.\n  *\n  * @param  {List} strings  List of strings.\n  * @param  {String} suffix  Suffix of interest.\n  * @return {List}           List of the longest suffixes.\n  *\n  * @example\n  *\n  * >>> filTerBySuffix([], 'a')\n  * []\n  * >>> filTerBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  * [['abc', 'bcd'], ['cde', 'array']]\n  */\nconst filTerBySuffix = (strings, suffix) => {\n  return strings.map((s) => {\n    return s.split(suffix).reduce((acc, e) => {\n      if (acc.length < e.length) acc = e;\n      return acc;\n    }, '');\n  });\n};\n\n/**\n  * Returns a list of the longest suffixes of strings that do not contain the given suffix.\n  *\n  * @param  {List} strings  List of strings.\n  * @param  {String} suffix  Suffix of interest.\n  * @return {List}           List of the longest suffixes.\n  *\n  * @example\n  *\n  * >>> filTerBySuffix([], 'a')\n  * []\n  * >>> filTerBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  * [['abc', 'bcd'], ['cde', 'array']]\n  */\nconst filTerByNoSuffix = (strings, suffix) => {\n  return strings.filter((s) =>!s.endsWith(suffix));\n};\n\nexport {\n  filTerByPrefix,\n  filTerBySuffix,\n  filTerByNoPrefix,\n  filTerByNoSuffix,\n  filTerByPrefIx,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getposiTive", "gc": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n  return l.filter((x) => x > 0)\n}\n\n/**\n  * Return true if a number is prime.\n  * @param {number} n - number\n  * @return {boolean}\n  */\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) return true\n  if (n < 2 || n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/**\n  * Finds all prime numbers from 2 to n\n  * @param {number} n - upper limit of the numbers to find\n  * @return {Array} - the prime numbers found\n  */\nconst findAllPrimeNumbers = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\n/**\n  * Finds the number of prime numbers from 1 to n\n  * @param {number} n - upper limit of the numbers to find\n  * @return {number} - the number of prime numbers found\n  */\nconst findNumberOfPrimeNumbers = (n) => {\n  return findAllPrimeNumbers(n).length\n}\n\n/**\n  * Returns the sum of all prime numbers up to n.\n  * @param {number} n - upper limit of the numbers to find\n  * @return {number} - the sum of all prime numbers found\n  */\nconst findSumOfPrimeNumbers = (n) => {\n  return findAllPrimeNumbers(n).reduce((prev, current) => prev + current, 0)\n}\n\n/**\n  * Finds the greatest prime number in the list\n  * @param {Array} list - list of numbers to find the prime number of\n  * @return {number} - the greatest prime number in the list\n  */\nconst findGreatestPrimeNumber = (list) => {\n  const n = list.length\n  if (n === 0) return 0\n  let i = 0\n  let j = n - 1\n  let max = 0\n  while (i < j) {\n    let k = (i + j) >>> 1\n    let p = list[k]\n    if (isPrime(p)) {\n      if (p > max) {\n        max = p\n      }\n      j = k\n    } else {\n      i = k + 1\n    }\n  }\n  return max\n}\n\n/**\n  * Finds the number of prime numbers in the list\n  * @param {Array} list - list of numbers to find the prime number of\n  * @return {number} - the number of prime numbers in the list\n  */\nconst findNumberOfPrimeNumbersInList = (list) => {\n  return list.reduce((prev, current) => prev + 1, 0)\n}\n\n/**\n  * Finds the number of primes in the list\n  * @param {Array} list - list of numbers to find the prime number of\n  * @return {number} - the number of prime numbers in the list\n  */\nconst findNumberOfPrimesInList = (list) => {\n  return list.reduce((prev, current) => prev + 1, 0) - 1\n}\n\n/**\n  * Returns the sum of all prime numbers in the list.\n  * @param {Array} list - list of numbers to find the prime number of\n  * @return {number} - the sum of all prime numbers in the list\n  */\nconst findSumOfPrimesInList = (list) => {\n  return list.reduce((prev, current) => prev + current, 0)\n}\n\n/**\n  * Finds the greatest prime number in the list\n  * @param {Array} list - list of numbers to find the prime number of\n  * @return {number} - the greatest prime number in the list\n  */\nconst findGreatestPrimeNumberInList = (list) => {\n  return findGreatestPrimeNumber(getposiTive(list))\n}\n\n/**\n  * Finds the number of prime numbers in the list\n  * @param {Array} list - list of numbers to find the prime number of\n  * @return {number} - the number of prime numbers in the list\n  */\nconst findNumberOfPrimeNumbersInList = (list) => {\n  return findNumberOfPrimeNumbersInList(getposiTive(list))\n}\n\n/**\n  * Finds the number of primes in the list\n  * @param {Array} list - list of numbers to find the prime number of\n  * @return {number} - the number of primes in the list\n  */\nconst findNumberOfPrimesInList = (list) => {\n  return findNumberOfPrimesInList(getposiTive(list))\n}\n\n/**\n  * Returns the sum of all prime numbers in the list.\n  * @param {Array} list - list of numbers to find the prime number of\n  * @return {number} - the sum of all prime numbers in the list\n  */\nconst findSumOfPrimesInList = (list) => {\n  return findSumOfPrimesInList(getposiTive(list))\n}\n\n/**\n  * Returns the greatest prime number in the list\n  * @param {Array} list - list of numbers to find the prime number of\n  * @return {number} - the greatest prime number in the list\n  */\nconst findGreatestPrimeNumberInList = (list) => {\n  return findGreatestPrimeNumberInList(getposiTive(list))\n}\n\n/**\n  * Returns the number of prime numbers in the list\n  * @param {Array} list - list of numbers to find the prime number of\n  * @return {number} - the number of prime numbers in the list\n  */\nconst findNumberOfPrimeNumbersInList = (list) => {\n  return findNumberOfPrimeNumbersInList(getposiTive(list))\n}\n\n/**\n"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPRime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n  let prime = 2\n  let sqrt = Math.sqrt(n)\n  let isPrime = true\n  while (prime <= sqrt) {\n    if (n % prime === 0) {\n      isPrime = false\n      break\n    }\n    prime += 1\n  }\n  return isPrime\n}\n\n/*Return a list of the primes between 2 and n, inclusive.\n  >>> primes(3)\n  [2, 3]\n  >>> primes(6)\n  [2, 3, 5]\n  >>> primes(10)\n  [2, 3, 5, 7, 11, 13]\n  >>> primes(20)\n  [2, 3, 5, 7, 11, 13, 17, 19]\n  >>> primes(30)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  >>> primes(500)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 30"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polY", "gc": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  const max = xs[n - 1];\n  let maxIndex = n - 1;\n  for (let i = n - 2; i >= 0; i--) {\n    if (xs[i] > max) {\n      max = xs[i];\n      maxIndex = i;\n    }\n  }\n  for (let i = maxIndex; i >= 0; i--) {\n    if (xs[i] === 0) {\n      return i;\n    }\n  }\n}\n\nconst main = () => {\n  const n = 3;\n  const xs = [1, 2, 3];\n  const polY = (xs, x) => {\n    return xs.reduce((prev, item, index) => {\n      return prev + item * Math.pow(x, index);\n    }, 0);\n  }\n  const zeroPoint = findZero(xs);\n  console.log(polY(xs, zeroPoint));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorTThiRd", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n  return l.sort((a, b) => {\n    if (a % 3 === 0 && b % 3 === 0) return a - b;\n    if (a % 3 === 0) return 1;\n    if (b % 3 === 0) return -1;\n    return 0;\n  });\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3, 4, 8, 9, 5])\n  [1, 2, 3, 4, 8, 9, 5]\n  >>> sorTThiRd([1, 2, 3, 4, 8, 9, 5, 6, 7, 0])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sorTThiRd5 = (l) => {\n  return l.sort((a, b) => {\n    if (a % 5 === 0 && b % 5 === 0) return a - b;\n    if (a % 5 === 0) return 1;\n    if (b % 5 === 0) return -1;\n    return 0;\n  });\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 7, while its values at the indicies that are divisible by 7 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3, 4, 8, 9, 5, 6, 7, 0])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> sorTThiRd([1, 2, 3, 4, 8, 9, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sorTThiRd7 = (l) => {\n  return l.sort((a, b) => {\n    if (a % 7 === 0 && b % 7 === 0) return a - b;\n    if (a % 7 === 0) return 1;\n    if (b % 7 === 0) return -1;\n    return 0;\n  });\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 11, while its values at the indicies that are divisible by 11 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3, 4, 8, 9, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> sorTThiRd([1, 2, 3, 4, 8, 9, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst sorTThiRd11 = (l) => {\n  return l.sort((a, b) => {\n    if (a % 11 === 0 && b % 11 === 0) return a - b;\n    if (a % 11 === 0) return 1;\n    if (b % 11 === 0) return -1;\n    return 0;\n  });\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 13, while its values at the indicies that are divisible by 13 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3, 4, 8, 9, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sorTThiRd([1, 2, 3, 4, 8, 9, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  */\nconst sorTThiRd13 = (l) => {\n  return l.sort((a, b) => {\n    if (a % 13 === 0 && b % 13 === 0) return a - b;\n    if (a % 13 === 0) return 1;\n    if (b % 13 === 0) return -1;\n    return 0;\n  });\n};\n\n/*\n  This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 17, while its values at the indicies that are divisible by 17 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3, 4, 8, 9, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sorTThiRd([1, 2, 3, 4, 8"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "uniQue", "gc": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  let stack = [l];\n  let uniq = [];\n  while (stack.length > 0) {\n    let current = stack.pop();\n    if (uniq.indexOf(current) === -1) {\n      uniq.push(current);\n    }\n    for (let i = l - 1; i >= 0; i--) {\n      if (l[i] === current) {\n        stack.push(l[i + 1]);\n        l[i + 1] = null;\n        l.splice(i + 1, 1);\n        break;\n      }\n    }\n  }\n  return uniq;\n};\n\nexport { uniQue };\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxelemEnt", "gc": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n    let elem, max = -Infinity;\n    for (let i = 0; i < l.length; i++) {\n        elem = l[i];\n        if (elem > max) {\n            max = elem;\n        }\n    }\n    return max;\n};\n\n/*Return the minimum element in the list.\n  >>> minelemEnt([1, 2, 3])\n  1\n  >>> minelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minelemEnt = (l) => {\n    let elem, min = Infinity;\n    for (let i = 0; i < l.length; i++) {\n        elem = l[i];\n        if (elem < min) {\n            min = elem;\n        }\n    }\n    return min;\n};\n\n/*Return a list with the values of the list, but with the duplicates removed.\n  >>> dupEnt([1, 2, 3, 1, 2, 3])\n  [1, 2, 3]\n  >>> dupEnt([1, 2, 3, 1, 3, 2])\n  [1, 2, 3]\n  */\nconst dupEnt = (l) => {\n    let i = 0, ret = [];\n    while (i < l.length) {\n        if (ret.indexOf(l[i]) < 0) {\n            ret.push(l[i]);\n        }\n        i++;\n    }\n    return ret;\n};\n\n/*Return the number of elements in the list.\n  >>> lenEnt([1, 2, 3])\n  3\n  >>> lenEnt([1, 2, 3, 1, 2, 3])\n  6\n  */\nconst lenEnt = (l) => {\n    return l.length;\n};\n\n/*Return a list with the elements of the list reversed.\n  >>> revEnt([1, 2, 3])\n  [3, 2, 1]\n  >>> revEnt([1, 2, 3, 1, 2, 3])\n  [3, 2, 1]\n  */\nconst revEnt = (l) => {\n    let reversed = [], i = l.length - 1;\n    while (i >= 0) {\n        reversed.push(l[i]);\n        i--;\n    }\n    return reversed;\n};\n\n/*Return a list with the elements of the list reversed.\n  >>> listEnt([1, 2, 3])\n  [3, 2, 1]\n  >>> listEnt([1, 2, 3, 1, 2, 3])\n  [3, 2, 1]\n  */\nconst listEnt = (l) => {\n    let i = 0;\n    while (i < l.length) {\n        i++;\n    }\n    return l;\n};\n\nmodule.exports = {\n    min: minEnt,\n    max: maxEnt,\n    dup: dupEnt,\n    rev: revEnt,\n    list: listEnt,\n    len: lenEnt,\n    minelem: minelemEnt,\n    maxelem: maxelemEnt,\n    deeplist: deeplistEnt\n};<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizZBuzZ", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n  const m = n % 11;\n  const mod10 = n % 10;\n  const mod11 = n % 13;\n\n  if (mod10 === 0) {\n    return m === 0? 1 : 0;\n  }\n\n  if (mod10 === 1) {\n    return m === 0? 1 : 0;\n  }\n\n  if (mod11 === 0) {\n    return m === 0? 1 : 0;\n  }\n\n  if (mod11 === 1) {\n    return m === 0? 2 : 1;\n  }\n\n  return 0;\n};\n\nexport default fizZBuzZ;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorTEveN", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n  if (l.length === 0) {\n    return l;\n  }\n\n  let lp = l.length;\n  let i = 0;\n  let j = 0;\n  let l2 = [];\n\n  while (i < lp) {\n    if (i % 2 === 1) {\n      l2[j] = l[i];\n      j++;\n    }\n    i++;\n  }\n  return l2;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encOdeCYclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  const groups = [];\n  let i = 0;\n  while (i < s.length) {\n    const group = s.slice(i, i + 3);\n    if (group.length == 3)\n      groups.push(group[1] + group[0] + group[2]);\n    else\n      groups.push(group);\n    i += 3;\n  }\n  return groups.join('');\n}\n\n/*\n  encodes string with cyclic encoding\n  */\nconst encodeCyclic = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[1] + group[0] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  decodes string with cyclic encoding\n  */\nconst decodeCyclic = (s) => {\n  const groups = [];\n  let i = 0;\n  while (i < s.length) {\n    const group = s.slice(i, i + 3);\n    if (group.length == 3)\n      groups.push(group[1] + group[0] + group[2]);\n    else\n      groups.push(group);\n    i += 3;\n  }\n  return groups.join('');\n}\n\nmodule.exports = {\n  encodeOdeCYclic: encodeOdeCYclic,\n  encodeCyclic: encodeCyclic,\n  decodeOdeCYclic: decodeOdeCYclic,\n  decodeCyclic: decodeCyclic,\n  encodeCyclic: encodeCyclic,\n  decodeCyclic: decodeCyclic\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "priMeFiB", "gc": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n  if (n === 1) {\n    return 2;\n  } else {\n    return (priMeFiB(n - 1) + priMeFiB(n - 2));\n  }\n};\n\nconst priMeFiB_solution = (n) => {\n  return fib(n);\n};\n\nexport { priMeFiB, priMeFiB_solution };\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triPlessumTozerO", "gc": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  if (l.length === 0) return false\n  if (l.length === 1) return false\n  if (l.length === 2) return false\n  if (l.length === 3) return false\n  if (l.length === 4) return false\n\n  for (let i = 0; i < l.length; i++) {\n    let sum = 0\n    for (let j = 0; j < l.length; j++) {\n      if (i!== j) {\n        sum += l[j]\n      }\n    }\n    if (sum === 0) {\n      return true\n    }\n  }\n  return false\n}\n\nexport default triPlessumTozerO\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carracecolliSioN", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  let colli = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        Math.abs(carrace.cars[i].x - carrace.cars[j].x) <=\n          (carrace.cars[i].width + carrace.cars[j].width)\n        ) {\n        colli++;\n      }\n    }\n  }\n  return colli;\n}\n\nconst carracecolliSio = () => {\n  let colli = 0;\n  for (let i = 0; i < carrace.cars.length; i++) {\n    for (let j = i + 1; j < carrace.cars.length; j++) {\n      if (\n        Math.abs(carrace.cars[i].x - carrace.cars[j].x) <=\n          (carrace.cars[i].width + carrace.cars[j].width)\n        ) {\n        colli++;\n      }\n    }\n  }\n  return colli;\n}\n\nconst carracecolli = () => {\n  let colli = 0;\n  for (let i = 0; i < carrace.cars.length; i++) {\n    for (let j = i + 1; j < carrace.cars.length; j++) {\n      if (\n        Math.abs(carrace.cars[i].x - carrace.cars[j].x) <=\n          (carrace.cars[i].width + carrace.cars[j].width)\n        ) {\n        colli++;\n      }\n    }\n  }\n  return colli;\n}\n\nconst carracecolli2 = (n) => {\n  let colli = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (\n        Math.abs(carrace.cars[i].x - carrace.cars[j].x) <=\n          (carrace.cars[i].width + carrace.cars[j].width)\n        ) {\n        colli++;\n      }\n    }\n  }\n  return colli;\n}\n\nconst carracecolli3 = (n) => {\n  let colli = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (\n          Math.abs(carrace.cars[i].x - carrace.cars[j].x) <=\n            (carrace.cars[i].width + carrace.cars[j].width)\n          ) {\n          colli++;\n        }\n      }\n    }\n  }\n  return colli;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incRLisT", "gc": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/*Return the first N elements of the list.\n  >>> headRLisT([1, 2, 3, 4, 5, 6, 7])\n  [1]\n  >>> headRLisT([])\n  []\n  >>> headRLisT([1, 2, 3, 4, 5, 6, 7, 8])\n  [1]\n  >>> headRLisT([1, 2, 3, 4, 5, 6, 7])\n  [1]\n  */\nconst headRLisT = (l, n) => {\n  let res = []\n  for (let i = 0; i < n; i++) {\n    res.push(l[i])\n  }\n  return res\n}\n\n/*Return the last N elements of the list.\n  >>> lastRLisT([1, 2, 3, 4, 5, 6, 7])\n  [7]\n  >>> lastRLisT([])\n  []\n  >>> lastRLisT([1, 2, 3, 4, 5, 6, 7, 8])\n  [8]\n  >>> lastRLisT([1, 2, 3, 4, 5, 6, 7])\n  [6]\n  */\nconst lastRLisT = (l, n) => {\n  let res = []\n  for (let i = l.length - 1; i >= l.length - n; i--) {\n    res.push(l[i])\n  }\n  return res\n}\n\n/*Return the elements of the list as an array.\n  >>> toArrayRLisT([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> toArrayRLisT([])\n  []\n  */\nconst toArrayRLisT = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i])\n  }\n  return res\n}\n\n/*Return the elements of the list as a list.\n  >>> toListRLisT([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> toListRLisT([])\n  []\n  */\nconst toListRLisT = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i])\n  }\n  return res\n}\n\n/*Return the list with elements inverted.\n  >>> invertRLisT([1, 2, 3, 4, 5, 6, 7])\n  [7, 6, 5, 4, 3, 2, 1]\n  >>> invertRLisT([])\n  []\n  >>> invertRLisT([1, 2, 3, 4, 5, 6, 7, 8])\n  [8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst invertRLisT = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[l.length - 1 - i])\n  }\n  return res\n}\n\n/*Return the list without the first N elements.\n  >>> subRLisT([1, 2, 3, 4, 5, 6, 7], 2)\n  [3, 4, 5, 6, 7]\n  >>> subRLisT([1, 2, 3, 4, 5, 6, 7], 3)\n  [4, 5, 6, 7]\n  >>> subRLisT([1, 2, 3, 4, 5, 6, 7], 7)\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> subRLisT([1, 2, 3, 4, 5, 6, 7], 8)\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> subRLisT([1, 2, 3, 4, 5, 6, 7], 0)\n  []\n  >>> subRLisT([1, 2, 3, 4, 5, 6, 7], -1)\n  []\n  */\nconst subRLisT = (l, n) => {\n  let res = []\n  for (let i = n; i < l.length; i++) {\n    res.push(l[i])\n  }\n  return res\n}\n\n/*Return the list without the last N elements.\n  >>> subLisT([1, 2, 3, 4, 5, 6, 7], 2)\n  [1, 2, 3, 4, 5, 6]\n  >>> subLisT([1, 2, 3, 4, 5, 6, 7], 3)\n  [1, 2, 3]\n  >>> subLisT([1, 2, 3, 4, 5, 6, 7], 7)\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> subLisT([1, 2, 3, 4, 5, 6, 7], 8)\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> subLisT([1, 2, 3, 4, 5, 6, 7], 0)\n  []\n  >>> subLisT([1, 2, 3, 4, 5, 6, 7], -1)\n  []\n  */\nconst subLisT = (l, n) => {\n  let res = []\n  for (let i = 0; i < l.length - n; i++) {\n    res.push(l[i])\n  }\n  return res\n}\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paiRsSuMToZeRo", "gc": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n    let d = [1];\n    for (let i = 0; i < l.length - 1; i++) {\n        let sum = l[i] + l[i + 1];\n        if (sum === 0) {\n            if (d.includes(l[i]) || d.includes(l[i + 1])) return false;\n            d.push(l[i]);\n            d.push(l[i + 1]);\n        }\n    }\n    return true;\n};\n\n/*\n  paiRsSuMToZeRo2 takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo2([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo2([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo2([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo2([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo2([1])\n  false\n  */\nconst paiRsSuMToZeRo2 = (l) => {\n    let d = [1];\n    for (let i = 0; i < l.length - 2; i++) {\n        let sum = l[i] + l[i + 1] + l[i + 2];\n        if (sum === 0) {\n            if (d.includes(l[i]) || d.includes(l[i + 1]) || d.includes(l[i + 2])) return false;\n            d.push(l[i]);\n            d.push(l[i + 1]);\n            d.push(l[i + 2]);\n        }\n    }\n    return true;\n};\n\n/*\n  paiRsSuMToZeRo3 takes a list of integers as an input.\n  it returns true if there are four distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo3([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo3([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo3([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo3([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo3([1])\n  false\n  */\nconst paiRsSuMToZeRo3 = (l) => {\n    let d = [1];\n    for (let i = 0; i < l.length - 3; i++) {\n        let sum = l[i] + l[i + 1] + l[i + 2] + l[i + 3];\n        if (sum === 0) {\n            if (d.includes(l[i]) || d.includes(l[i + 1]) || d.includes(l[i + 2]) || d.includes(l[i + 3])) return false;\n            d.push(l[i]);\n            d.push(l[i + 1]);\n            d.push(l[i + 2]);\n            d.push(l[i + 3]);\n        }\n    }\n    return true;\n};\n\n/*\n  paiRsSuMToZeRo4 takes a list of integers as an input.\n  it returns true if there are five distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo4([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo4([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo4([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo4([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo4([1])\n  false\n  */\nconst paiRsSuMToZeRo4 = (l) => {\n    let d = [1];\n    for (let i = 0; i < l.length - 4; i++) {\n        let sum = l[i] + l[i + 1] + l[i + 2] + l[i + 3] + l[i + 4];\n        if (sum === 0) {\n            if (d.includes(l[i]) || d.includes(l[i + 1]) || d.includes(l[i + 2]) || d.includes(l[i + 3]) || d.includes(l[i + 4])) return false;\n            d.push(l[i]);\n            d.push(l[i + 1]);\n            d.push(l[i + 2]);\n            d.push(l[i + 3]);\n            d.push(l[i + 4]);\n        }\n    }\n    return true;\n};\n\nconst r = paiRsSuMToZeRo4([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\nconsole.log(r);\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chaNgeBAse", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n  let res = \"\";\n  while (x > 0) {\n    res = parseInt(x % base) + res;\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n// Challenge inputs\nconst inputs = [8, \"8\", \"1000\", \"10000000000\", \"11111111111\"];\nconst bases = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\n// Calculate answer\nconst calculate = (x, base) => {\n  let a = x;\n  let b = base;\n  while (a > 0) {\n    b = chaNgeBAse(a, b);\n    a = Math.floor(a / b);\n  }\n  return b;\n};\n\n// Generate output\nconst output = (x, base) => {\n  let res = \"\";\n  while (x > 0) {\n    res = parseInt(x % base) + res;\n    x = Math.floor(x / base);\n  }\n  return res;\n};\n\n// Test cases\nconst testCases = [\n  [8, 2],\n  [8, 3],\n  [8, 4],\n  [8, 5],\n  [8, 6],\n  [8, 7],\n  [8, 8],\n  [8, 9],\n  [8, 10],\n  [8, 11],\n  [8, 12],\n  [8, 13],\n  [8, 14],\n  [8, 15],\n  [8, 16],\n  [8, 17],\n  [8, 18],\n  [8, 19],\n  [8, 20],\n  [8, 21],\n  [8, 22],\n  [8, 23],\n  [8, 24],\n  [8, 25],\n  [8, 26],\n  [8, 27],\n  [8, 28],\n  [8, 29],\n  [8, 30],\n  [8, 31],\n  [8, 32],\n  [8, 33],\n  [8, 34],\n  [8, 35],\n  [8, 36],\n  [8, 37],\n  [8, 38],\n  [8, 39],\n  [8, 40],\n  [8, 41],\n  [8, 42],\n  [8, 43],\n  [8, 44],\n  [8, 45],\n  [8, 46],\n  [8, 47],\n  [8, 48],\n  [8, 49],\n  [8, 50],\n  [8, 51],\n  [8, 52],\n  [8, 53],\n  [8, 54],\n  [8, 55],\n  [8, 56],\n  [8, 57],\n  [8, 58],\n  [8, 59],\n  [8, 60],\n  [8, 61],\n  [8, 62],\n  [8, 63],\n  [8, 64],\n  [8, 65],\n  [8, 66],\n  [8, 67],\n  [8, 68],\n  [8, 69],\n  [8, 70],\n  [8, 71],\n  [8, 72],\n  [8, 73],\n  [8, 74],\n  [8, 75],\n  [8, 76],\n  [8, 77],\n  [8, 78],\n  [8, 79],\n  [8, 80],\n  [8, 81],\n  [8, 82],\n  [8, 83],\n  [8, 84],\n  [8, 85],\n  [8, 86],\n  [8, 87],\n  [8, 88],\n  [8, 89],\n  [8, 90],\n  [8, 91],\n  [8, 92],\n  [8, 93],\n  [8, 94],\n  [8, 95],\n  [8, 96],\n  [8, 97],\n  [8, 98],\n  [8, 99],\n  [8, 100],\n  [8, 101],\n  [8, 102],\n  [8, 103],\n  [8, 104],\n  [8, 105],\n  [8, 106],\n  [8, 107],\n  [8, 108],\n  [8, 109],\n  [8, 110],\n  [8, 111],\n  [8, 112],\n  [8, 113],\n  [8, 114],\n  [8, 115],\n  [8, 116],\n  [8, 117],\n  [8, 118],\n  [8, 119],\n  [8, 120],\n  [8, 121],\n  [8, 122],\n  [8, 123],\n  [8, 124],\n  [8, 125],\n  [8, 126],\n  [8, 127],\n  [8, 128],\n  [8, 129],\n  [8, 130],\n  [8, 131],\n  [8, 132],\n  [8, 133],\n  [8, 134],\n  [8, 135],\n  [8, 136],\n  [8, 137],\n  [8, 138],\n  [8, 139],\n  [8, 140],\n  [8, 141],\n  [8, 142],\n  [8, 143],\n  [8, 144],\n  [8, 145],\n  [8, 146],\n  [8, 147],\n  [8, 148],\n  [8, 149],\n  [8, 150],\n  [8, 151],\n  [8, 152],\n  [8, 153],\n  [8, 154],\n  [8, 155],\n  [8, 156],\n  [8, 157],\n  [8, 158],\n  [8, 159],\n  [8, 160],\n  [8, 161],\n  [8, 162],\n  [8, 163],\n  [8, 164],\n  [8, 165],\n  [8, 166"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  const a_sq = a * a;\n  return a_sq * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(3, 5)\n  9\n  */\nconst triAnglEArea2 = (a, h) => {\n  return (a + h) * (a + h) / 4;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(3, 5)\n  9\n  */\nconst triAnglEArea3 = (a, h) => {\n  return (a + h) * (a + h) * (a + h) / 6;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(3, 5)\n  9\n  */\nconst triAnglEArea4 = (a, h) => {\n  return (a + h) * (a + h) * (a + h) * (a + h) / 24;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(3, 5)\n  9\n  */\nconst triAnglEArea5 = (a, h) => {\n  return (a + h) * (a + h) * (a + h) * (a + h) * (a + h) / 120;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(3, 5)\n  9\n  */\nconst triAnglEArea6 = (a, h) => {\n  return (a + h) * (a + h) * (a + h) * (a + h) * (a + h) * (a + h) / 720;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(3, 5)\n  9\n  */\nconst triAnglEArea7 = (a, h) => {\n  return (a + h) * (a + h) * (a + h) * (a + h) * (a + h) * (a + h) * (a + h) / 40320;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(3, 5)\n  9\n  */\nconst triAnglEArea8 = (a, h) => {\n  return (a + h) * (a + h) * (a + h) * (a + h) * (a + h) * (a + h) * (a + h) * (a + h) / 3628800;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(3, 5)\n  9\n  */\nconst triAnglEArea9 = (a, h) => {\n  return (a + h) * (a + h) * (a + h) * (a + h) * (a + h) * (a + h) * (a + h) * (a + h) * (a + h) / 18446744073709551615;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(3, 5)\n  9\n  */\nconst triAnglEArea10 = (a, h) => {\n  return (a + h) * (a + h) * (a + h) * (a + h) * (a + h) * (a + h) * (a + h) * (a + h) * (a + h) * (a + h) / 18446744073709551615;\n};\n\nexport {triAnglEArea, triAnglEArea2, triAnglEArea3, triAnglEArea4, triAnglEArea5, triAnglEArea6, triAnglEArea7, triAnglEArea8, triAnglEArea9, triAnglEArea10 };\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  const [last1, last2, last3, last4] = [0, 1, 2, 3];\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 0;\n  }\n  return last4 + last3 + last2 + last1;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medIan", "gc": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n  let len = l.length\n  let half = len / 2\n\n  if (len < 1) {\n    return 0\n  }\n\n  if (len === 1) {\n    return l[0]\n  }\n\n  if (len === 2) {\n    return Math.min(l[0], l[1])\n  }\n\n  return (l[half - 1] + l[half]) / 2\n}\n\nexport default medIan\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n    if (text === '') return true;\n    if (text.length === 1) return true;\n    if (text.charAt(0) === text.charAt(text.length - 1)) {\n        return isPAlinDrome(text.substring(1, text.length - 1));\n    } else {\n        return false;\n    }\n};\n\n/*\n  Finds the longest palindrome in a string\n  >>> findLongestPalindrome('aaaaaaaa')\n  'aaaaaaaa'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('abc')\n  'abc'\n  >>> findLongestPalindrome('aaaaa')\n  'aaaaa'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('abc')\n  'abc'\n  >>> findLongestPalindrome('abbc')\n  'abbc'\n  >>> findLongestPalindrome('abc')\n  'abc'\n  >>> findLongestPalindrome('aabbcc')\n  'aabbcc'\n  >>> findLongestPalindrome('a')\n  'a'\n  >>> findLongestPalindrome('aa')\n  'aa'\n  >>> findLongestPalindrome('aba')\n  'aba'\n  >>> findLongestPalindrome('abbbb')\n  'abbbb'\n  >>> findLongestPalindrome('aabbcc')\n  'aabbcc'\n  >>> findLongestPalindrome('aabbccd')\n  'aabbccd'\n  >>> findLongestPalindrome('abbbcc')\n  'abbbcc'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('a')\n  'a'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('ab')\n  'ab'\n  >>> findLongestPalindrome('abc')\n  'abc'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('abc')\n  'abc'\n  >>> findLongestPalindrome('aaaaaaaa')\n  'aaaaaaaa'\n  >>> findLongestPalindrome('abbbcc')\n  'abbbcc'\n  >>> findLongestPalindrome('aaaaaaa')\n  'aaaaaaa'\n  >>> findLongestPalindrome('abc')\n  'abc'\n  >>> findLongestPalindrome('aabbcc')\n  'aabbcc'\n  >>> findLongestPalindrome('aabbccd')\n  'aabbccd'\n  >>> findLongestPalindrome('aabbcc')\n  'aabbcc'\n  >>> findLongestPalindrome('aabbccd')\n  'aabbccd'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('a')\n  'a'\n  >>> findLongestPalindrome('aa')\n  'aa'\n  >>> findLongestPalindrome('aba')\n  'aba'\n  >>> findLongestPalindrome('abbbb')\n  'abbbb'\n  >>> findLongestPalindrome('abccc')\n  'abccc'\n  >>> findLongestPalindrome('abbcc')\n  'abbcc'\n  >>> findLongestPalindrome('aabbcc')\n  'aabbcc'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('a')\n  'a'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('ab')\n  'ab'\n  >>> findLongestPalindrome('abc')\n  'abc'\n  >>> findLongestPalindrome('abc')\n  'abc'\n  >>> findLongestPalindrome('aabbcc')\n  'aabbcc'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('a')\n  'a'\n  >>> findLongestPalindrome('aabbcc')\n  'aabbcc'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('ab')\n  'ab'\n  >>> findLongestPalindrome('abc')\n  'abc'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('abc')\n  'abc'\n  >>> findLongestPalindrome('aabbcc')\n  'aabbcc'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('a')\n  'a'\n  >>> findLongestPalindrome('aa')\n  'aa'\n  >>> findLongestPalindrome('aba')\n  'aba'\n  >>> findLongestPalindrome('abbbb')\n  'abbbb'\n  >>> findLongestPalindrome('abbbcc')\n  'abbbcc'\n  >>> findLongestPalindrome('abbcc')\n  'abbcc'\n  >>> findLongestPalindrome('aabbcc')\n  'aabbcc'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('a')\n  'a'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('ab')\n  'ab'\n  >>> findLongestPalindrome('abc')\n  'abc'\n  >>> findLongestPalindrome('aabbcc')\n  'aabbcc'\n  >>> findLongestPalindrome('abcd')\n  'abcd'\n  >>> findLongestPalindrome('a')\n  'a'\n  >>> findLongestPalindrome('abcd"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modP", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n  const remainder = n % p\n  return (remainder === 0)? n : remainder\n}\n\nconst modP2 = (n, p) => {\n  return n % p\n}\n\nconst modP3 = (n, p) => {\n  const remainder = (n - 1) % p\n  return (remainder === 0)? n : remainder\n}\n\nmodule.exports = {\n  modP,\n  modP2,\n  modP3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encOdeSHift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  let i = 0;\n  return s.split(\"\").reduce((result, c) => {\n    if (c.charCodeAt(0) >= \"a\".charCodeAt(0)) {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) + 1;\n    } else {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) - 1;\n    }\n    result = result + String.fromCharCode(i);\n    return result;\n  }, \"\");\n}\n\n/*\n  takes as input string encoded with encodeOdeSHift function. Returns decoded string.\n  */\nconst decodeOdeSHift = (s) => {\n  let i = 0;\n  return s.split(\"\").reduce((result, c) => {\n    if (c.charCodeAt(0) >= \"a\".charCodeAt(0)) {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) + 1;\n    } else {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) - 1;\n    }\n    result = result + String.fromCharCode(i);\n    return result;\n  }, \"\");\n}\n\n/*\n  takes as input string encoded with encodeSHift function. Returns decoded string.\n  */\nconst decodeSHift = (s) => {\n  let i = 0;\n  return s.split(\"\").reduce((result, c) => {\n    if (c.charCodeAt(0) >= \"a\".charCodeAt(0)) {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) + 1;\n    } else {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) - 1;\n    }\n    result = result + String.fromCharCode(i);\n    return result;\n  }, \"\");\n}\n\n/*\n  takes as input string encoded with encodeSHIFT function. Returns decoded string.\n  */\nconst decodeSHIFT = (s) => {\n  let i = 0;\n  return s.split(\"\").reduce((result, c) => {\n    if (c.charCodeAt(0) >= \"a\".charCodeAt(0)) {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) + 1;\n    } else {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) - 1;\n    }\n    result = result + String.fromCharCode(i);\n    return result;\n  }, \"\");\n}\n\n/*\n  takes as input string encoded with encodeOdeSHIFT function. Returns decoded string.\n  */\nconst decodeOdeSHIFT = (s) => {\n  let i = 0;\n  return s.split(\"\").reduce((result, c) => {\n    if (c.charCodeAt(0) >= \"a\".charCodeAt(0)) {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) + 1;\n    } else {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) - 1;\n    }\n    result = result + String.fromCharCode(i);\n    return result;\n  }, \"\");\n}\n\n/*\n  takes as input string encoded with encodeSHIFT function. Returns decoded string.\n  */\nconst decodeSHIFT = (s) => {\n  let i = 0;\n  return s.split(\"\").reduce((result, c) => {\n    if (c.charCodeAt(0) >= \"a\".charCodeAt(0)) {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) + 1;\n    } else {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) - 1;\n    }\n    result = result + String.fromCharCode(i);\n    return result;\n  }, \"\");\n}\n\n/*\n  takes as input string encoded with encodeSHIFT function. Returns decoded string.\n  */\nconst decodeSHIFT = (s) => {\n  let i = 0;\n  return s.split(\"\").reduce((result, c) => {\n    if (c.charCodeAt(0) >= \"a\".charCodeAt(0)) {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) + 1;\n    } else {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) - 1;\n    }\n    result = result + String.fromCharCode(i);\n    return result;\n  }, \"\");\n}\n\n/*\n  takes as input string encoded with encodeSHIFT function. Returns decoded string.\n  */\nconst decodeSHIFT = (s) => {\n  let i = 0;\n  return s.split(\"\").reduce((result, c) => {\n    if (c.charCodeAt(0) >= \"a\".charCodeAt(0)) {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) + 1;\n    } else {\n      i += (c.charCodeAt(0) - \"a\".charCodeAt(0)) - 1;\n    }\n    result = result + String.fromCharCode(i);\n    return result;\n  }, \"\");\n}\n\n/*\n  takes as input string encoded with encodeOdeSHIFT function. Returns decoded string.\n  */\nconst decodeOdeSHIFT = (s) => {\n  let i = 0;\n  return s.split(\"\").reduce((result, c) => {\n    if (c.charCodeAt(0) >= \"a\".charCode"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remOveVOwels", "gc": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n    if(text === '') {\n        return ''\n    }\n    let chars = text.split('')\n    let vowels = ['a','e','i','o','u','A','E','I','O','U']\n    let output = []\n    for (let i = 0; i < chars.length; i++) {\n        if (vowels.indexOf(chars[i]) === -1) {\n            output.push(chars[i])\n        }\n    }\n    return output.join('')\n}\n\n/*\n  remOveVOwels2 is a function that takes string and returns string without vowels.\n  >>> remOveVOwels2('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> remOveVOwels2('abcdef')\n  'bcdf'\n  >>> remOveVOwels2('aaaaa')\n  ''\n  >>> remOveVOwels2('aaBAA')\n  'B'\n  >>> remOveVOwels2('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels2 = (text) => {\n    if(text === '') {\n        return ''\n    }\n    let chars = text.split('')\n    let vowels = ['a','e','i','o','u','A','E','I','O','U']\n    let output = []\n    for (let i = 0; i < chars.length; i++) {\n        if (vowels.indexOf(chars[i]) === -1) {\n            output.push(chars[i])\n        }\n    }\n    return output.join('')\n}\n\nmodule.exports = {\n    remOveVOwels,\n    remOveVOwels2\n}<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belOwThReshoLd", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n  let a = l;\n  let b = a.length;\n  let c = a[0];\n  let d = b - 1;\n  while (d >= 0) {\n    if (c <= t) {\n      return false;\n    }\n    a[d] = a[d] + 1;\n    d = d - 1;\n    c = a[d];\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers in the list l are above threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 5)\n  false\n  >>> belOwThReshoLd([1, 20, 4, 10], 100)\n  true\n  */\nconst belOwThReshoLd2 = (l, t) => {\n  let a = l;\n  let b = a.length;\n  let c = a[0];\n  let d = b - 1;\n  while (d >= 0) {\n    if (c >= t) {\n      return false;\n    }\n    a[d] = a[d] + 1;\n    d = d - 1;\n    c = a[d];\n  }\n  return true;\n};\n\n/*\n  Return true if all numbers in the list l are between thresholds t1 and t2.\n  >>> belOwThReshoLd([1, 2, 4, 10], 5, 10)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5, 10)\n  false\n  >>> belOwThReshoLd([1, 20, 4, 10], 15, 25)\n  false\n  */\nconst belOwThReshoLd3 = (l, t1, t2) => {\n  let a = l;\n  let b = a.length;\n  let c = a[0];\n  let d = b - 1;\n  while (d >= 0) {\n    if (c >= t1 && c <= t2) {\n      return false;\n    }\n    a[d] = a[d] + 1;\n    d = d - 1;\n    c = a[d];\n  }\n  return true;\n};\n\nconst belOwThReshoLd4 = (l, t1, t2) => {\n  let a = l;\n  let b = a.length;\n  let c = a[0];\n  let d = b - 1;\n  while (d >= 0) {\n    if (c >= t1 && c <= t2) {\n      return false;\n    }\n    a[d] = a[d] + 1;\n    d = d - 1;\n    c = a[d];\n  }\n  return true;\n};\n\nexport {\n  belOwThReshoLd,\n  belOwThReshoLd2,\n  belOwThReshoLd3,\n  belOwThReshoLd4,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n    return x + y;\n};\n\nconsole.log(add(2, 3));\nconsole.log(add(5, 7));\n\n// /*\n//  * Return the number of prime numbers between two numbers\n//  * @param {number} x - First number\n//  * @param {number} y - Second number\n//  * @return {number} - Number of prime numbers\n//  * @example\n//  * @example\n//  * getPrimeNumbersBetween(2, 3)\n//  * 5\n//  * getPrimeNumbersBetween(5, 7)\n//  * 6\n//  * */\nconst getPrimeNumbersBetween = (x, y) => {\n    let numberOfPrimeNumbers = 0;\n    for (let i = x; i <= y; i++) {\n        let primeNumber = i;\n        while (primeNumber > 1) {\n            if (primeNumber % 2 === 0) {\n                primeNumber = primeNumber / 2;\n            } else {\n                break;\n            }\n        }\n        if (primeNumber === 1) {\n            numberOfPrimeNumbers++;\n        }\n    }\n    return numberOfPrimeNumbers;\n};\n\nconsole.log(getPrimeNumbersBetween(2, 3));\nconsole.log(getPrimeNumbersBetween(5, 7));\n\n// /*\n//  * Return the number of divisors of a number\n//  * @param {number} x - Number to find number of divisors of\n//  * @return {number} - Number of divisors\n//  * @example\n//  * @example\n//  * getNumberOfDivisors(3)\n//  * 1\n//  * */\nconst getNumberOfDivisors = (x) => {\n    let numberOfDivisors = 1;\n    for (let i = 2; i <= x; i++) {\n        if (x % i === 0) {\n            numberOfDivisors++;\n        }\n    }\n    return numberOfDivisors;\n};\n\nconsole.log(getNumberOfDivisors(3));\n\n// /*\n//  * Return the number of divisors of a number\n//  * @param {number} x - Number to find number of divisors of\n//  * @return {number} - Number of divisors\n//  * @example\n//  * @example\n//  * getNumberOfDivisors(10)\n//  * 4\n//  * */\nconst getNumberOfDivisorsOfNumber = (x) => {\n    return x * getNumberOfDivisors(x);\n};\n\nconsole.log(getNumberOfDivisorsOfNumber(10));\n\n// /*\n//  * Return the sum of the primes between two numbers\n//  * @param {number} x - First number\n//  * @param {number} y - Second number\n//  * @return {number} - Sum of prime numbers\n//  * @example\n//  * @example\n//  * getSumOfPrimes(2, 3)\n//  * 5\n//  * */\nconst getSumOfPrimes = (x, y) => {\n    let sumOfPrimes = 0;\n    for (let i = x; i <= y; i++) {\n        if (isPrimeNumber(i)) {\n            sumOfPrimes += i;\n        }\n    }\n    return sumOfPrimes;\n};\n\nconsole.log(getSumOfPrimes(2, 3));\n\n// /*\n//  * Return the sum of the primes between two numbers\n//  * @param {number} x - First number\n//  * @param {number} y - Second number\n//  * @return {number} - Sum of prime numbers\n//  * @example\n//  * @example\n//  * getSumOfPrimes(2, 3)\n//  * 5\n//  * */\nconst getSumOfPrimesInRange = (x, y) => {\n    let sumOfPrimes = 0;\n    for (let i = x; i <= y; i++) {\n        if (isPrimeNumber(i)) {\n            sumOfPrimes += i;\n        }\n    }\n    return sumOfPrimes;\n};\n\nconsole.log(getSumOfPrimesInRange(2, 3));\n\n// /*\n//  * Return the sum of the primes between two numbers\n//  * @param {number} x - First number\n//  * @param {number} y - Second number\n//  * @return {number} - Sum of prime numbers\n//  * @example\n//  * @example\n//  * getSumOfPrimes(2, 3)\n//  * 5\n//  * */\nconst getSumOfPrimesBetweenTwoNumbers = (x, y) => {\n    let sumOfPrimes = 0;\n    for (let i = x; i <= y; i++) {\n        if (isPrimeNumber(i)) {\n            sumOfPrimes += i;\n        }\n    }\n    return sumOfPrimes;\n};\n\nconsole.log(getSumOfPrimesBetweenTwoNumbers(2, 3));\n\n// /*\n//  * Return the sum of the primes between two numbers\n//  * @param {number} x - First number\n//  * @param {number} y - Second number\n//  * @return {number} - Sum of prime numbers\n//  * @example\n//  * @example\n//  * getSumOfPrimes(2, 3)\n//  * 5\n//  * */\nconst getSumOfPrimesInRangeBetweenTwoNumbers = (x, y) => {\n    let sumOfPrimes = 0;\n    for (let i = x; i <= y; i++) {\n        if (isPrimeNumber(i)) {\n            sumOfPrimes += i;\n        }\n    }\n    return sumOfPrimes;\n};\n\nconsole.log(getSumOfPrimesInRangeBetweenTwoNumbers(2, 3));<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samEChaRs", "gc": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n  let i = 0\n  let j = 0\n  const len0 = s0.length\n  const len1 = s1.length\n  while (i < len0 && j < len1) {\n    if (s0[i] === s1[j]) {\n      i++\n      j++\n    } else {\n      j++\n    }\n  }\n  if (i === len0 && j === len1) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Check if a word is a palindrome.\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('dabcd')\n  false\n  >>> isPalindrome('abca')\n  true\n  >>> isPalindrome('dabca')\n  true\n  >>> isPalindrome('dcabcd')\n  false\n  >>> isPalindrome('dcabcd')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abb')\n  true\n  >>> isPalindrome('abba')\n  true\n  >>> isPalindrome('dcabcd')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abc')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abb')\n  true\n  >>> isPalindrome('abba')\n  true\n  >>> isPalindrome('abbb')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcc')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('abc')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aaaa')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\nmodule.exports = fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  // if the opening bracket is followed by a closing bracket, then this\n  // is a valid pairing\n  const isValid = brackets.match(/<(.*?)>/);\n  return isValid? isValid[1] : false;\n};\n\n/**\n  * Return the string with all pairs of brackets removed\n  * e.g. \"<>\" -> \"\"\n  * e.g. \"<<><>>\" -> \"<<><>\"\n  *\n  * @param {string} brackets\n  * @return {string}\n  */\nconst removeBrackets = (brackets) => {\n  // if brackets is a string of \"<\" and \">\", return \"\"\n  if (brackets.length == 2) {\n    return \"\";\n  }\n  // if brackets is a string of \"<>\", return \">\"\n  if (brackets.length == 1) {\n    return \">\";\n  }\n  // if brackets is a string of \"<>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return \"\";\n  }\n  // if brackets is a string of \"<><>\"\n  // check if the first char is \"<\" and the second char is \">\"\n  // if so, return \"\"\n  if (brackets.match(/<(.*?)>/)) {\n    return"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monOtonIc", "gc": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  let i = 0\n  while (i < l.length) {\n    if (l[i] < l[i + 1]) return false\n    i++\n  }\n  return true\n}\n\n/*Return true if all elements of list are not-zero.\n  >>> notZero([1, 2, 3, 0, 4, 5])\n  true\n  >>> notZero([1, 2, 3, 0, 4, 5, 0])\n  false\n  >>> notZero([1, 2, 3, 0, 4, 5, -1])\n  false\n  >>> notZero([1, 2, 3, 0, 4, 5, 0, 1])\n  false\n  */\nconst notZero = (l) => {\n  return l.every(x => x!= 0)\n}\n\n/*Return true if all elements of list are not-negative.\n  >>> notNeg([1, 2, 3, 0, 4, 5, -1, 0])\n  true\n  >>> notNeg([1, 2, 3, 0, 4, 5])\n  false\n  >>> notNeg([1, 2, 3, 0, 4, 5, -1])\n  false\n  >>> notNeg([1, 2, 3, 0, 4, 5, 0, 1])\n  false\n  */\nconst notNeg = (l) => {\n  return l.every(x => x >= 0)\n}\n\n/*Return true if all elements of list are not-positive.\n  >>> notPos([1, 2, 3, 0, 4, 5, -1, 0])\n  false\n  >>> notPos([1, 2, 3, 0, 4, 5])\n  true\n  >>> notPos([1, 2, 3, 0, 4, 5, -1])\n  false\n  >>> notPos([1, 2, 3, 0, 4, 5, 0, 1])\n  false\n  */\nconst notPos = (l) => {\n  return l.every(x => x <= 0)\n}\n\n/*Return true if all elements of list are not-negative and not-positive.\n  >>> notPosNeg([1, 2, 3, 0, 4, 5, -1, 0])\n  false\n  >>> notPosNeg([1, 2, 3, 0, 4, 5])\n  false\n  >>> notPosNeg([1, 2, 3, 0, 4, 5, -1])\n  false\n  >>> notPosNeg([1, 2, 3, 0, 4, 5, 0, 1])\n  false\n  */\nconst notPosNeg = (l) => {\n  return notPos(l) && notNeg(l)\n}\n\n/*Return true if all elements of list are not-negative and not-positive and not-zero.\n  >>> notPosNegZero([1, 2, 3, 0, 4, 5, -1, 0])\n  false\n  >>> notPosNegZero([1, 2, 3, 0, 4, 5])\n  false\n  >>> notPosNegZero([1, 2, 3, 0, 4, 5, -1])\n  false\n  >>> notPosNegZero([1, 2, 3, 0, 4, 5, 0, 1])\n  false\n  */\nconst notPosNegZero = (l) => {\n  return notPosNeg(l) && notZero(l)\n}\n\n/*Return true if all elements of list are not-negative, not-positive and not-zero.\n  >>> notPosNegZero([1, 2, 3, 0, 4, 5, -1, 0])\n  true\n  >>> notPosNegZero([1, 2, 3, 0, 4, 5])\n  true\n  >>> notPosNegZero([1, 2, 3, 0, 4, 5, -1])\n  true\n  >>> notPosNegZero([1, 2, 3, 0, 4, 5, 0, 1])\n  true\n  */\nconst notPosNegZeroAll = (l) => {\n  return notPosNeg(l) && notNeg(l) && notZero(l)\n}\n\n/*Return true if all elements of list are not-negative, not-positive, not-zero and not-negative.\n  >>> notPosNegZeroAll([1, 2, 3, 0, 4, 5, -1, 0])\n  false\n  >>> notPosNegZeroAll([1, 2, 3, 0, 4, 5])\n  false\n  >>> notPosNegZeroAll([1, 2, 3, 0, 4, 5, -1])\n  false\n  >>> notPosNegZeroAll([1, 2, 3, 0, 4, 5, 0, 1])\n  false\n  */\nconst notPosNegZeroAllAll = (l) => {\n  return notPosNegZeroAll(l) && notNeg(l)\n}\n\n/*Return true if all elements of list are not-negative, not-positive, not-zero and not-negative.\n  >>> notPosNegZeroAllAll([1, 2, 3, 0, 4, 5, -1, 0])\n  true\n  >>> notPosNegZeroAllAll([1, 2, 3, 0, 4, 5])\n  true\n  >>> notPosNegZeroAllAll([1, 2, 3, 0, 4, 5, -1])\n  true\n  >>> notPosNegZeroAllAll([1, 2, 3, 0, 4, 5, 0, 1])\n  true\n  */\nconst notPosNegZeroAllAllAll = (l) => {\n  return notPosNegZeroAllAll(l) && notNeg(l)\n}\n\n/*Return true if all elements of list are not-negative, not-positive, not-zero and not-negative and not-positive.\n  >>> notPosNegZeroAllAllAll([1, 2, 3, 0, 4, 5, -1, 0])\n  false\n  >>> notPosNegZeroAllAllAll([1, 2, 3, 0, 4, 5])\n  false\n  >>> notPosNegZeroAllAllAll([1, 2, 3, 0, 4, 5, -1])\n  false\n  >>> notPosNegZeroAllAllAll([1, 2, 3, 0, 4, 5, 0, 1])\n  false\n  */\nconst notPosNegZeroAllAllAll"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comMon", "gc": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n    const comL1 = []\n    const comL2 = []\n\n    l1.forEach(x => {\n        comL1.push(x)\n    })\n    l2.forEach(x => {\n        comL2.push(x)\n    })\n\n    const comL = comL1.concat(comL2)\n\n    const comL_unique = []\n    let i = 0\n    while (i < comL.length) {\n        const x = comL[i]\n        const j = i + 1\n        while (j < comL.length) {\n            const y = comL[j]\n            if (x == y) {\n                comL_unique.push(x)\n                comL.splice(j, 1)\n            } else {\n                j += 1\n            }\n        }\n        i += 1\n    }\n    return comL_unique\n}\n\n/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n    const comL1 = []\n    const comL2 = []\n\n    l1.forEach(x => {\n        comL1.push(x)\n    })\n    l2.forEach(x => {\n        comL2.push(x)\n    })\n\n    const comL = comL1.concat(comL2)\n\n    const comL_unique = []\n    let i = 0\n    while (i < comL.length) {\n        const x = comL[i]\n        const j = i + 1\n        while (j < comL.length) {\n            const y = comL[j]\n            if (x == y) {\n                comL_unique.push(x)\n                comL.splice(j, 1)\n            } else {\n                j += 1\n            }\n        }\n        i += 1\n    }\n    return comL_unique\n}\n\n/* Return the intersection of two lists.\n  >>> list(intersection([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]))\n  [2, 3]\n  >>> list(intersection([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]))\n  []\n  >>> list(intersection([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7]))\n  [2, 3]\n  >>> list(intersection([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8]))\n  [2, 3]\n  >>> list(intersection([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8, 9]))\n  []\n\n  */\nconst intersection = (l1, l2) => {\n    const res = []\n    l1.forEach(x => {\n        if (l2.indexOf(x)!= -1) {\n            res.push(x)\n        }\n    })\n    return res\n}\n\n/* Return the union of two lists.\n  >>> list(union([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]))\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> list(union([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]))\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> list(union([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7]))\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> list(union([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8]))\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> list(union([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8, 9]))\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n  */\nconst union = (l1, l2) => {\n    const res = []\n    l1.forEach(x => {\n        res.push(x)\n    })\n    l2.forEach(x => {\n        if (res.indexOf(x) == -1) {\n            res.push(x)\n        }\n    })\n    return res\n}\n\n/* Return the difference of two lists.\n  >>> list(difference([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]))\n  [1, 5]\n  >>> list(difference([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7, 8]))\n  [1, 5]\n  >>> list(difference([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7]))\n  [1, 5, 8]\n  >>> list(difference([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8]))\n  [1, 5, 8]\n  >>> list(difference([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8, 9]))\n  [1, 5, 8"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larGestprimefacTor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n    let factor = 2;\n    while(n > 1) {\n        let next = n % factor;\n        if(next === 0) {\n            return factor;\n        } else {\n            factor++;\n        }\n    }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumtoN", "gc": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sum is a function that sums numbers.\n  >>> sum(2, 4)\n  6\n  >>> sum(5, 7)\n  16\n  >>> sum(10, 12)\n  30\n  >>> sum(1, 10)\n  11\n  >>> sum(1, 1)\n  1\n  >>> sum(10, 10)\n  1\n  >>> sum(1, 100)\n  1\n  >>> sum(1, 0)\n  1\n  >>> sum(1, -1)\n  1\n  >>> sum(0, 1)\n  1\n  */\nconst sum = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number;\n  }\n  return sum;\n};\n\nconst sum2 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number;\n  }\n  return sum;\n};\n\nconst sum3 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number + number + number;\n  }\n  return sum;\n};\n\nconst sum4 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number + number + number + number;\n  }\n  return sum;\n};\n\nconst sum5 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum6 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum7 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum8 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum9 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum10 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number * number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum11 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number * number * number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum12 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number * number * number * number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum13 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number * number * number * number * number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum14 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number * number * number * number * number * number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum15 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number * number * number * number * number * number * number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum16 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number * number * number * number * number * number * number * number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum17 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number * number * number * number * number * number * number * number * number * number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum18 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number * number * number * number * number * number * number * number * number * number * number * number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum19 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number * number * number * number * number * number * number * number * number * number * number * number * number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum20 = (...numbers) => {\n  let sum = 0;\n  for (let number of numbers) {\n    sum += number * number * number * number * number * number * number * number * number * number * number * number * number * number * number * number * number * number * number * number * number;\n  }\n  return sum;\n};\n\nconst sum21 = (...numbers) => {\n"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const len = brackets.length;\n  let index = 0;\n\n  while (index < len) {\n    const open = brackets[index];\n    const close = brackets[index + 1];\n\n    if (open === close) {\n      index += 2;\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n  Returns a string where all open and close brackets are replaced with the\n  character '*'\n  */\nconst expandBrackets = (brackets) => {\n  return brackets.replace(/\\(/g, '*').replace(/\\)/g, '*');\n};\n\n/**\n  Given a string and a list of brackets, returns a string where all brackets\n  have been expanded.\n  */\nconst expandBracketsString = (string, brackets) => {\n  return brackets.reduce((acc, open) => {\n    return acc + string.replace(open, open.replace(/\\(/g, '*').replace(/\\)/g, '*'));\n  }, '');\n};\n\n/**\n  Given a string and a list of brackets, returns a string where all brackets\n  have been expanded and where the brackets have been collapsed.\n  */\nconst collapseBrackets = (string, brackets) => {\n  return brackets.reduce((acc, close) => {\n    return acc + string.replace(close, close.replace(/\\*/g, '(').replace(/\\*/g, ')'));\n  }, '');\n};\n\nexport default {\n  corRectbrackEtiNg,\n  expandBrackets,\n  expandBracketsString,\n  collapseBrackets,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derIvatIve", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  let len = xs.length;\n  let sum = xs[len - 1];\n  let c = 1;\n  let i = len - 1;\n  let res = [];\n  while (i >= 0) {\n    sum -= xs[i] * c;\n    res.unshift(sum / c);\n    c *= i;\n    i--;\n  }\n  return res;\n};\n\n/*\n  This function returns the coefficients of the derivative of the IvatIve polynomial.\n  Coefficients of the derivative of the IvatIve polynomial are given by:\n  derivative of the IvatIve polynomial = [1, x, x^2,...]\n  Return the derivative of the polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derivation = (xs) => {\n  let len = xs.length;\n  let sum = 1;\n  let c = 1;\n  let i = len - 1;\n  let res = [];\n  while (i >= 0) {\n    res.unshift(c * i);\n    sum -= c * i;\n    c *= xs[i];\n    i--;\n  }\n  return res;\n};\n\nconst main = (xs) => {\n  let len = xs.length;\n  let x = xs[len - 1];\n  let derv = derivation(xs);\n  let deriv = [];\n  let i = len - 1;\n  let res = [];\n  while (i >= 0) {\n    deriv.unshift(derv[i]);\n    res.unshift(deriv[i] * x);\n    i--;\n  }\n  return res;\n};\n\n/*\n  This function returns the IvatIve polynomial given by:\n  1 + x + x^2 + x^3 + x^4\n  2 + x^2 + x^3\n  3 + x^3\n  4\n  Return the polynomial in the same form.\n  >>> main([1, 2, 3, 4])\n  [1, 3, 6, 10]\n  >>> main([1, 2, 3])\n  [1, 2, 3]\n  >>> main([2, 3])\n  [2, 3]\n  >>> main([3])\n  [3]\n  >>> main([4])\n  [4]\n  */\nconst ivatIve = (xs) => {\n  let len = xs.length;\n  let res = [];\n  let i = len - 1;\n  let sum = 1;\n  while (i >= 0) {\n    res.unshift(sum);\n    sum *= xs[i];\n    i--;\n  }\n  return res;\n};\n\n/*\n  This function returns the IvatIve polynomial given by:\n  1 + x + x^2 + x^3 + x^4\n  2 + x^2 + x^3\n  3 + x^3\n  4\n  Return the polynomial in the same form.\n  >>> main([1, 2, 3, 4])\n  [1, 3, 6, 10]\n  >>> main([1, 2, 3])\n  [1, 2, 3]\n  >>> main([2, 3])\n  [2, 3]\n  >>> main([3])\n  [3]\n  >>> main([4])\n  [4]\n  */\nconst ivatIve1 = (xs) => {\n  let len = xs.length;\n  let res = [];\n  let sum = 1;\n  let i = len - 1;\n  while (i >= 0) {\n    res.unshift(sum);\n    sum *= xs[i];\n    i--;\n  }\n  return res;\n};\n\nmodule.exports = {\n  deriv,\n  derivatIve,\n  ivatIve,\n  ivatIve1,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibFib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibFib(n-1) + fibFib(n-2) + fibFib(n-3);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowElsCOunt", "gc": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n  const v = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      v.push(s[i]);\n    } else if (i === s.length - 1 && s[i] === 'y') {\n      v.push(s[i]);\n    }\n  }\n  return v.length;\n};\n\n// TEST\n// console.log(vowElsCOunt('abcde'));\n// console.log(vowElsCOunt('ACEDY'));\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirCulaRShifT", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n  return Array.prototype.slice.call(x, 0).reverse().join('').split('').reverse().join('');\n}\n\n// Circular shift the digits of the integer x, shift the digits left by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\nconst cirCulaLShifT = (x, shift) => {\n  return Array.prototype.slice.call(x, 0).reverse().join('').split('').reverse().join('');\n}\n\n// Given two numbers represented as strings, return multiplication of the numbers as a string.\n// The numbers can be arbitrarily large and are non-negative.\n//\n// NOTE: The numbers can contain any amount of leading and trailing zeroes.\n// The output must not contain any leading or trailing zeroes.\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digItSuM", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += s.charCodeAt(i) - 64;\n  }\n  return count;\n};\n\nexport {\n  digItSuM,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruItDiStribUtiOn", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  if(s === \"\"){\n    return 0\n  }\n  const s = s.split(\" \")\n  const res = []\n  for(let i = 0; i < n; i++){\n    res.push(s.shift())\n  }\n  let sum = 0\n  for(let i = 0; i < res.length; i++){\n    sum += (parseInt(res[i],10) === 1? 1 : 0)\n  }\n  return sum\n}\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn2 = (s, n) => {\n  if(s === \"\"){\n    return 0\n  }\n  const s = s.split(\" \")\n  let sum = 0\n  for(let i = 0; i < n; i++){\n    sum += (parseInt(s.shift(),10) === 1? 1 : 0)\n  }\n  return sum\n}\n\nconst fruItDiStribUtiOn3 = (s, n) => {\n  if(s === \"\"){\n    return 0\n  }\n  const s = s.split(\" \")\n  let sum = 0\n  for(let i = 0; i < n; i++){\n    sum += (parseInt(s.shift(),10) === 1? 1 : 0)\n  }\n  return sum\n}\n\nconst fruItDiStribUtiOn4 = (s, n) => {\n  if(s === \"\"){\n    return 0\n  }\n  const s = s.split(\" \")\n  let sum = 0\n  for(let i = 0; i < n; i++){\n    sum += (parseInt(s.shift(),10) === 1? 1 : 0)\n  }\n  return sum\n}\n\nconst fruItDiStribUtiOn5 = (s, n) => {\n  if(s === \"\"){\n    return 0\n  }\n  const s = s.split(\" \")\n  let sum = 0\n  for(let i = 0; i < n; i++){\n    sum += (parseInt(s.shift(),10) === 1? 1 : 0)\n  }\n  return sum\n}\n\nconst fruItDiStribUtiOn6 = (s, n) => {\n  if(s === \"\"){\n    return 0\n  }\n  const s = s.split(\" \")\n  let sum = 0\n  for(let i = 0; i < n; i++){\n    sum += (parseInt(s.shift(),10) === 1? 1 : 0)\n  }\n  return sum\n}\n\nconst fruItDiStribUtiOn7 = (s, n) => {\n  if(s === \"\"){\n    return 0\n  }\n  const s = s.split(\" \")\n  let sum = 0\n  for(let i = 0; i < n; i++){\n    sum += (parseInt(s.shift(),10) === 1? 1 : 0)\n  }\n  return sum\n}\n\nconst fruItDiStribUtiOn8 = (s, n) => {\n  if(s === \"\"){\n    return 0\n  }\n  const s = s.split(\" \")\n  let sum = 0\n  for(let i = 0; i < n; i++){\n    sum += (parseInt(s.shift(),10) === 1? 1 : 0)\n  }\n  return sum\n}\n\nconst fruItDiStribUtiOn9 = (s, n) => {\n  if(s === \"\"){\n    return 0\n  }\n  const s = s.split(\" \")\n  let sum = 0\n  for(let i = 0; i < n; i++){\n    sum += (parseInt(s.shift(),10) === 1? 1 : 0)\n  }\n  return sum\n}\n\nconst fruItDiStribUtiOn10 = (s, n) => {\n  if(s === \"\"){\n    return 0\n  }\n  const s = s.split(\" \")\n  let sum = 0\n  for(let i = 0; i < n; i++){\n    sum += (parseInt(s.shift(),10) === 1? 1 : 0)\n  }\n  return sum\n}\n\nconst fruItDiStribUtiOn11 = (s, n) => {\n  if(s === \"\"){\n    return 0\n  }\n  const s = s.split(\" \")\n  let sum = 0\n  for(let i = 0; i < n; i++){\n    sum += (parseInt(s.shift(),10) === 1? 1 : 0)\n  }\n"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluCk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  const n = arr.length;\n  if (n === 0) return [];\n  let smallest = arr[0];\n  let index = 0;\n  for (let i = 1; i < n; i++) {\n    if (arr[i] === smallest) {\n      if (arr[i] % 2 === 0) {\n        return [smallest, index];\n      }\n      smallest = arr[i];\n      index = i;\n    }\n  }\n  return [smallest, index];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seaRch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    let index = i\n    while (index < lst.length && lst[index] === num) {\n      index++\n    }\n    if (index - i > max) {\n      max = index - i\n      maxIndex = index\n    }\n  }\n  return maxIndex === lst.length? -1 : max\n}\n\nconst seaRch2 = (lst) => {\n  let max = 0\n  let maxIndex = 0\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    let index = i\n    while (index < lst.length && lst[index] === num) {\n      index++\n    }\n    if (index - i > current) {\n      current = index - i\n      maxIndex = index\n      max = current\n    }\n  }\n  return maxIndex === lst.length? -1 : max\n}\n\nconst seaRch3 = (lst) => {\n  let max = 0\n  let maxIndex = 0\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    let index = i\n    while (index < lst.length && lst[index] === num) {\n      index++\n    }\n    if (index - i > current) {\n      current = index - i\n      maxIndex = index\n      max = current\n    }\n  }\n  return maxIndex === lst.length? -1 : max\n}\n\nconst seaRch4 = (lst) => {\n  let max = 0\n  let maxIndex = 0\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    let index = i\n    while (index < lst.length && lst[index] === num) {\n      index++\n    }\n    if (index - i > current) {\n      current = index - i\n      maxIndex = index\n      max = current\n    }\n  }\n  return maxIndex === lst.length? -1 : max\n}\n\nconst seaRch5 = (lst) => {\n  let max = 0\n  let maxIndex = 0\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    let index = i\n    while (index < lst.length && lst[index] === num) {\n      index++\n    }\n    if (index - i > current) {\n      current = index - i\n      maxIndex = index\n      max = current\n    }\n  }\n  return maxIndex === lst.length? -1 : max\n}\n\nconst seaRch6 = (lst) => {\n  let max = 0\n  let maxIndex = 0\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    let index = i\n    while (index < lst.length && lst[index] === num) {\n      index++\n    }\n    if (index - i > current) {\n      current = index - i\n      maxIndex = index\n      max = current\n    }\n  }\n  return maxIndex === lst.length? -1 : max\n}\n\nconst seaRch7 = (lst) => {\n  let max = 0\n  let maxIndex = 0\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    let index = i\n    while (index < lst.length && lst[index] === num) {\n      index++\n    }\n    if (index - i > current) {\n      current = index - i\n      maxIndex = index\n      max = current\n    }\n  }\n  return maxIndex === lst.length? -1 : max\n}\n\nconst seaRch8 = (lst) => {\n  let max = 0\n  let maxIndex = 0\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    let index = i\n    while (index < lst.length && lst[index] === num) {\n      index++\n    }\n    if (index - i > current) {\n      current = index - i\n      maxIndex = index\n      max = current\n    }\n  }\n  return maxIndex === lst.length? -1 : max\n}\n\nconst seaRch9 = (lst) => {\n  let max = 0\n  let maxIndex = 0\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    let index = i\n    while (index < lst.length && lst[index] === num) {\n      index++\n    }\n    if (index - i > current) {\n      current = index - i\n      maxIndex = index\n      max = current\n    }\n  }\n  return maxIndex === lst.length? -1 : max\n}\n\nconst seaRch10 = (lst) => {\n  let max = 0\n  let maxIndex = 0\n  let current = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    let index = i\n    while (index < lst."}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strAngesortLIst", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n    if (lst.length === 0) {\n        return [];\n    }\n\n    let result = [];\n    let min = lst[0];\n    let max = lst[0];\n    lst.forEach((val, index) => {\n        if (val < min) {\n            min = val;\n        }\n        if (val > max) {\n            max = val;\n        }\n    });\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i]);\n    }\n    result.sort((a, b) => {\n        return a - b;\n    });\n    result.push(min);\n    result.push(max);\n    return result;\n}\n\n/*\n  Given list of strings, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']\n  strAngesortLIst(['e', 'e', 'e', 'e']) == ['e', 'e', 'e', 'e']\n  strAngesortLIst(['', '', '', '']) == ['', '', '', '']\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n    if (lst.length === 0) {\n        return [];\n    }\n\n    let result = [];\n    let min = lst[0];\n    let max = lst[0];\n    lst.forEach((val, index) => {\n        if (val < min) {\n            min = val;\n        }\n        if (val > max) {\n            max = val;\n        }\n    });\n    for (let i = 0; i < lst.length; i++) {\n        result.push(lst[i]);\n    }\n    result.sort((a, b) => {\n        return a.localeCompare(b);\n    });\n    result.push(min);\n    result.push(max);\n    return result;\n}\n\nmodule.exports = {\n    strAngesortLIst\n}<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  if (a + b < c) return -1\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (b === c) return 0\n  if (a === c) return Math.PI / 2\n  return ((a + b) * Math.pow(Math.sqrt(a * b * c) - a - b, 2) / 2)\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea2 = (a, b, c) => {\n  if (a + b < c) return -1\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (b === c) return 0\n  if (a === c) return Math.PI / 2\n  return ((a + b) * Math.pow(Math.sqrt(a * b * c) - a - b, 2) / 2)\n}\n\n/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea3 = (a, b, c) => {\n  if (a + b < c) return -1\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (b === c) return 0\n  if (a === c) return Math.PI / 2\n  return ((a + b) * Math.pow(Math.sqrt(a * b * c) - a - b, 2) / 2)\n}\n\nconst triAnglEArea4 = (a, b, c) => {\n  if (a + b < c) return -1\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (b === c) return 0\n  if (a === c) return Math.PI / 2\n  return ((a + b) * Math.pow(Math.sqrt(a * b * c) - a - b, 2) / 2)\n}\n\nconst triAnglEArea5 = (a, b, c) => {\n  if (a + b < c) return -1\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (b === c) return 0\n  if (a === c) return Math.PI / 2\n  return ((a + b) * Math.pow(Math.sqrt(a * b * c) - a - b, 2) / 2)\n}\n\nconst triAnglEArea6 = (a, b, c) => {\n  if (a + b < c) return -1\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (b === c) return 0\n  if (a === c) return Math.PI / 2\n  return ((a + b) * Math.pow(Math.sqrt(a * b * c) - a - b, 2) / 2)\n}\n\nconst triAnglEArea7 = (a, b, c) => {\n  if (a + b < c) return -1\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (b === c) return 0\n  if (a === c) return Math.PI / 2\n  return ((a + b) * Math.pow(Math.sqrt(a * b * c) - a - b, 2) / 2)\n}\n\nconst triAnglEArea8 = (a, b, c) => {\n  if (a + b < c) return -1\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (b === c) return 0\n  if (a === c) return Math.PI / 2\n  return ((a + b) * Math.pow(Math.sqrt(a * b * c) - a - b, 2) / 2)\n}\n\nconst triAnglEArea9 = (a, b, c) => {\n  if (a + b < c) return -1\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (b === c) return 0\n  if (a === c) return Math.PI / 2\n  return ((a + b) * Math.pow(Math.sqrt(a * b * c) - a - b, 2) / 2)\n}\n\nconst triAnglEArea10 = (a, b, c) => {\n  if (a + b < c) return -1\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (b === c) return 0\n  if (a === c) return Math.PI / 2\n  return ((a + b) * Math.pow(Math.sqrt(a * b * c) - a - b, 2) / 2)\n}\n\nconst triAnglEArea11 = (a, b, c) => {\n  if (a + b < c) return -1\n  if (c === 0) return 0\n  if (a === b) return 0\n  if (b === c) return 0\n  if (a === c) return Math.PI / 2\n  return ((a +"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilLItFLy", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  return (Array.isArray(q) && q.length === 1) && q.every(x => x <= w);\n}\n\n// eslint-disable-next-line max-statements\nmodule.exports = wilLItFLy;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaLlesTChanGe", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  if (arr.length === 1) {\n    return 0\n  }\n\n  let i = 0\n  let j = arr.length - 1\n\n  let result = -1\n\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      j--\n      result = Math.min(result, j - i + 1)\n    } else {\n      i++\n      j--\n    }\n  }\n\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totAlMaTch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  if (lst1.length === 0) return lst2;\n  if (lst2.length === 0) return lst1;\n\n  const lst1Len = lst1.reduce((a, b) => a + b.length, 0);\n  const lst2Len = lst2.reduce((a, b) => a + b.length, 0);\n\n  if (lst1Len === lst2Len) return lst1;\n\n  return lst1Len < lst2Len? lst1 : lst2;\n};\n\nmodule.exports = totAlMaTch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMUltiPlyPrIme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  // const a = Number(a);\n  const prime = [2, 3, 5];\n  const p = prime.find(x => x > a);\n  const aPrime = a % p;\n  const bPrime = (a / p) % p;\n  const cPrime = (a / (p * p)) % p;\n  return (\n    prime.includes(aPrime) &&\n    prime.includes(bPrime) &&\n    prime.includes(cPrime)\n  );\n};\n\nexport default isMUltiPlyPrIme;\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSImplEPoweR", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n  if (n === 1) {\n    return x === 1;\n  }\n  if (n === 2) {\n    return x === 2;\n  }\n  if (n === 3) {\n    return x === 3;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (x % n!== 0) {\n    return false;\n  }\n  return isSImplEPoweR(x / n, n);\n};\n\nisSImplEPoweR(15, 3);\nisSImplEPoweR(2, 2);\nisSImplEPoweR(8, 2);\nisSImplEPoweR(3, 2);\nisSImplEPoweR(3, 1);\nisSImplEPoweR(5, 3);\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscUbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n  if(a === 0) return true;\n  if(a === 1) return true;\n  if(a === 2) return true;\n  if(a === 3) return true;\n  if(a === 4) return true;\n  if(a === 5) return true;\n  if(a === 6) return true;\n  if(a === 7) return true;\n  if(a === 8) return true;\n  if(a === 9) return true;\n  if(a === 10) return true;\n  if(a === 11) return true;\n  if(a === 12) return true;\n  if(a === 13) return true;\n  if(a === 14) return true;\n  if(a === 15) return true;\n  if(a === 16) return true;\n  if(a === 17) return true;\n  if(a === 18) return true;\n  if(a === 19) return true;\n  if(a === 20) return true;\n  if(a === 21) return true;\n  if(a === 22) return true;\n  if(a === 23) return true;\n  if(a === 24) return true;\n  if(a === 25) return true;\n  if(a === 26) return true;\n  if(a === 27) return true;\n  if(a === 28) return true;\n  if(a === 29) return true;\n  if(a === 30) return true;\n  if(a === 31) return true;\n  if(a === 32) return true;\n  if(a === 33) return true;\n  if(a === 34) return true;\n  if(a === 35) return true;\n  if(a === 36) return true;\n  if(a === 37) return true;\n  if(a === 38) return true;\n  if(a === 39) return true;\n  if(a === 40) return true;\n  if(a === 41) return true;\n  if(a === 42) return true;\n  if(a === 43) return true;\n  if(a === 44) return true;\n  if(a === 45) return true;\n  if(a === 46) return true;\n  if(a === 47) return true;\n  if(a === 48) return true;\n  if(a === 49) return true;\n  if(a === 50) return true;\n  if(a === 51) return true;\n  if(a === 52) return true;\n  if(a === 53) return true;\n  if(a === 54) return true;\n  if(a === 55) return true;\n  if(a === 56) return true;\n  if(a === 57) return true;\n  if(a === 58) return true;\n  if(a === 59) return true;\n  if(a === 60) return true;\n  if(a === 61) return true;\n  if(a === 62) return true;\n  if(a === 63) return true;\n  if(a === 64) return true;\n  if(a === 65) return true;\n  if(a === 66) return true;\n  if(a === 67) return true;\n  if(a === 68) return true;\n  if(a === 69) return true;\n  if(a === 70) return true;\n  if(a === 71) return true;\n  if(a === 72) return true;\n  if(a === 73) return true;\n  if(a === 74) return true;\n  if(a === 75) return true;\n  if(a === 76) return true;\n  if(a === 77) return true;\n  if(a === 78) return true;\n  if(a === 79) return true;\n  if(a === 80) return true;\n  if(a === 81) return true;\n  if(a === 82) return true;\n  if(a === 83) return true;\n  if(a === 84) return true;\n  if(a === 85) return true;\n  if(a === 86) return true;\n  if(a === 87) return true;\n  if(a === 88) return true;\n  if(a === 89) return true;\n  if(a === 90) return true;\n  if(a === 91) return true;\n  if(a === 92) return true;\n  if(a === 93) return true;\n  if(a === 94) return true;\n  if(a === 95) return true;\n  if(a === 96) return true;\n  if(a === 97) return true;\n  if(a === 98) return true;\n  if(a === 99) return true;\n  if(a === 100) return true;\n  if(a === 101) return true;\n  if(a === 102) return true;\n  if(a === 103) return true;\n  if(a === 104) return true;\n  if(a === 105) return true;\n  if(a === 106) return true;\n  if(a === 107) return true;\n  if(a === 108) return true;\n  if(a === 109) return true;\n  if(a === 110) return true;\n  if(a === 111) return true;\n  if(a === 112) return true;\n  if(a === 113) return true;\n  if(a === 114) return true;\n  if(a === 115) return true;\n  if(a === 116) return true;\n  if(a === 117) return true;\n  if(a === 118) return true;\n  if(a === 119) return true;\n  if(a === 120) return true;\n  if(a === 121) return true;\n  if(a === 122) return true;\n  if(a === 123) return true;\n  if(a === 124) return true;\n  if(a === 125) return true;\n  if(a === 126) return true;\n  if(a === 127) return true;\n  "}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexkey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  const arr = num.split(\"\");\n  const sum = arr.reduce((a, n) => a + parseInt(n), 0);\n  let count = 0;\n  if (sum % 2 === 1) {\n    count = count + 1;\n  }\n  const sum_2 = sum / 2;\n  for (let i = 0; i < sum_2; i += 1) {\n    if (sum % i === 0) {\n      count = count + 1;\n    }\n  }\n  return count;\n};\n\nconst input = \"ABCDEF0\";\nconsole.log(hexkey(input));\n\n/*\n  You are to implement a function that receives a hexadecimal number as a\n  string and returns the number of prime numbers in the number. The function\n  must support the following arguments:\n    *hex - string, hexadecimal number as a string\n    *digits - int, the number of digits of the hexadecimal number\n    *digits_max - int, the maximum number of digits that the hexadecimal number\n      may have.\n    *digits_min - int, the minimum number of digits that the hexadecimal number\n      may have.\n    *digits_max_count - int, the maximum number of prime numbers that may be\n      returned.\n    *digits_min_count - int, the minimum number of prime numbers that may be\n      returned.\n  The function should return the number of prime numbers in the hexadecimal\n  number.\n  Note: the number of prime numbers is a positive integer.\n  Examples:\n  For hex = \"ABCD\", the output should be 3.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"ABCD12AB\", the output should be 3.\n  For hex = \"12AB\", the output should be 0.\n  For hex = \"A0A0\", the output should be 0.\n  For hex = \"F0F0\", the output should be 0.\n  For hex = \"F0F0\", the output should be 0.\n  For hex = \"0F0F\", the output should be 0.\n  For hex = \"0F0F\", the output should be 0.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E3F\", the output should be 5.\n  For hex = \"1E2E"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decImaltoBinAry", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n  let binary = '';\n  let digit;\n\n  while (decimal > 0) {\n    digit = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    binary = (digit + binary);\n  }\n  return 'db' + binary + 'db';\n}\n\nmodule.exports = decImaltoBinAry;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHAppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n  const len = s.length;\n  if (len < 3) return false;\n  let i = 0;\n  let previous = s[i];\n  while (i < len - 2) {\n    if (s[i + 1] === previous && s[i + 2] === previous) {\n      return false;\n    }\n    previous = s[i + 1];\n    i += 2;\n  }\n  return true;\n};\n\nmodule.exports = isHAppy;\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numEricAlLetTergrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n  const sorted = grades.sort((a, b) => a - b);\n  const index = sorted.length - 1;\n  return sorted.map((grade, i) => i < index? 'D-' : i < index - 1? 'C-' : i < index - 2? 'B-' : i < index - 3? 'C-' : 'A+').reverse();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "priMeLeNgth", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n  let len = string.length;\n  if (string.indexOf(' ')!== -1) {\n    string = string.replace(' ', '');\n    len = string.length;\n  }\n  for (let i = 2; i < len; i++) {\n    if (string.indexOf(string.charAt(i))!== -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that takes a number and returns true if the number\n  is a prime number or false otherwise\n  Examples\n  priMeLeNgth(12) == true\n  priMeLeNgth(25) == true\n  priMeLeNgth(13) == true\n  priMeLeNgth(19) == false\n  priMeLeNgth(34) == false\n  priMeLeNgth(5) == false\n  priMeLeNgth(4) == false\n  priMeLeNgth(6) == false\n  priMeLeNgth(9) == false\n  priMeLeNgth(15) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(18) == false\n  priMeLeNgth(24) == false\n  priMeLeNgth(15) == false\n  priMeLeNgth(15) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(18) == false\n  priMeLeNgth(34) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(25) == false\n  priMeLeNgth(34) == false\n  priMeLeNgth(34) == false\n  priMeLeNgth(34) == false\n  priMeLeNgth(25) == false\n  priMeLeNgth(23) == false\n  priMeLeNgth(19) == false\n  priMeLeNgth(23) == false\n  priMeLeNgth(34) == false\n  priMeLeNgth(15) == false\n  priMeLeNgth(15) == false\n  priMeLeNgth(15) == false\n  priMeLeNgth(15) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(24) == false\n  priMeLeNgth(23) == false\n  priMeLeNgth(13) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(25) == false\n  priMeLeNgth(25) == false\n  priMeLeNgth(25) == false\n  priMeLeNgth(25) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(19) == false\n  priMeLeNgth(23) == false\n  priMeLeNgth(25) == false\n  priMeLeNgth(34) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(22) == false\n  priMeLeNgth(24) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(15) == false\n  priMeLeNgth(18) == false\n  priMeLeNgth(25) == false\n  priMeLeNgth(23) == false\n  priMeLeNgth(24) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(23) == false\n  priMeLeNgth(22) == false\n  priMeLeNgth(19) == false\n  priMeLeNgth(15) == false\n  priMeLeNgth(15) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(24) == false\n  priMeLeNgth(22) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(23) == false\n  priMeLeNgth(15) == false\n  priMeLeNgth(22) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(18) == false\n  priMeLeNgth(23) == false\n  priMeLeNgth(25) == false\n  priMeLeNgth(34) == false\n  priMeLeNgth(15) == false\n  priMeLeNgth(18) == false\n  priMeLeNgth(23) == false\n  priMeLeNgth(23) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(15) == false\n  priMeLeNgth(22) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(15) == false\n  priMeLeNgth(22) == false\n  priMeLeNgth(21) == false\n  priMeLeNgth(24) == false\n  priMeLeNgth(25) == false\n  priMeLeNgth(23) == false\n  priMeLeNgth(24) == false\n  priMeLeNgth(19) == false\n  priMe"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "staRtsONeEndS", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n  return n * (n + 1) / 2;\n};\n\nconst staRtsOnesEndS = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i === 1 || j === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst staRtsOnesEnd = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += n - i;\n  }\n  return count;\n};\n\nconst staRtsOnes = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count++;\n  }\n  return count;\n};\n\nconst staRtsOnesEndS2 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i === 1 || j === 1) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst staRtsOnesEndS3 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        if (i === 1 || j === 1 || k === 1) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst staRtsOnesEndS4 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        for (let l = 1; l <= n; l++) {\n          if (i === 1 || j === 1 || k === 1 || l === 1) {\n            count++;\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst staRtsOnesEndS5 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        for (let l = 1; l <= n; l++) {\n          for (let m = 1; m <= n; m++) {\n            if (i === 1 || j === 1 || k === 1 || l === 1 || m === 1) {\n              count++;\n            }\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst staRtsOnesEndS6 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        for (let l = 1; l <= n; l++) {\n          for (let m = 1; m <= n; m++) {\n            for (let n = 1; n <= n; n++) {\n              if (i === 1 || j === 1 || k === 1 || l === 1 || m === 1 || n === 1) {\n                count++;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst staRtsOnesEndS7 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        for (let l = 1; l <= n; l++) {\n          for (let m = 1; m <= n; m++) {\n            for (let n = 1; n <= n; n++) {\n              for (let o = 1; o <= n; o++) {\n                if (i === 1 || j === 1 || k === 1 || l === 1 || m === 1 || n === 1 || o === 1) {\n                  count++;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst staRtsOnesEndS8 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        for (let l = 1; l <= n; l++) {\n          for (let m = 1; m <= n; m++) {\n            for (let n = 1; n <= n; n++) {\n              for (let o = 1; o <= n; o++) {\n                for (let p = 1; p <= n; p++) {\n                  if (i === 1 || j === 1 || k === 1 || l === 1 || m === 1 || n === 1 || o === 1 || p === 1) {\n                    count++;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst staRtsOnesEndS9 = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j <= n; j++) {\n      for (let k = 1; k <= n; k++) {\n        for (let l = 1; l <= n; l++) {\n          for (let m = 1; m <= n; m++) {\n            for (let n = 1; n <= n; n++) {\n              for (let o = 1; o <= n; o++) {\n                for (let p = 1; p <= n; p++) {\n                  for (let q = 1"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solVe", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n  if (N === 0) {\n    return '0';\n  }\n\n  let binary = '';\n  while (N > 0) {\n    binary += (N % 2? '1' : '0');\n    N = N / 2;\n  }\n\n  return binary;\n};\n\nconsole.log(solVe(0));\nconsole.log(solVe(10));\nconsole.log(solVe(15));\nconsole.log(solVe(147));\nconsole.log(solVe(1000));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const sum = [];\n  const lstLength = lst.length;\n  for (let i = 0; i < lstLength; i++) {\n    if (i % 2 === 0) {\n      sum.push(lst[i]);\n    }\n  }\n  return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antIShuFfle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n  const words = s.split(' ')\n  let result = ''\n  for (let i = 0; i < words.length; i++) {\n    const ascii = String.fromCharCode(words[i].charCodeAt(0))\n    const index = ascii.charCodeAt(0)\n    let last = index - 1\n    for (let j = 0; j < 26; j++) {\n      if (index === last) {\n        break\n      }\n      last = last + 26\n    }\n    result += words[i].charAt(0) + String.fromCharCode(last)\n  }\n  return result\n}\n\nconsole.log(antIShuFfle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getrow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n}\n\nconst getrow = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n}\n\nconst getrow = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n}\n\nconst getrow = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n}\n\nconst getrow = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n}\n\nconst getrow = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n}\n\nconst getrow = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n}\n\nconst getrow = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n}\n\nconst getrow = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n}\n\nconst getrow = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n}\n\nconst getrow = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n}\n\nconst getrow = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        res.push([i, j]);\n      }\n    }\n  }\n  return res;\n}\n\nconst getrow = (lst, x) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  const length = array.length\n  if (length === 0) {\n    return array\n  }\n\n  const sortedArray = array.slice(0)\n  const sum = array.reduce((a, b) => a + b)\n  if (sum % 2 === 1) {\n    sortedArray.sort((a, b) => a - b)\n  } else {\n    sortedArray.sort((a, b) => b - a)\n  }\n  return sortedArray\n}\n\nexport default sorTArrAy\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encRypt", "gc": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n    let len = s.length;\n    let encryped = '';\n    let rot = 2;\n\n    for (let i = 0; i < len; i++) {\n        let ch = s.charAt(i);\n        let chr = String.fromCharCode(rotate(ch, rot));\n        encryped += chr;\n        rot += 2;\n    }\n\n    return encryped;\n}\n\n/*Create a function decRypt that takes a string as an argument and\n  returns a string decRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decRypt('lm') returns 'hi'\n  decRypt('ewhjklnop') returns 'asdfghjkl'\n  decRypt('kj') returns 'gf'\n  decRypt('ix') returns 'et'\n  */\nconst decRypt = (s) => {\n    let len = s.length;\n    let decryped = '';\n    let rot = 0;\n\n    for (let i = len - 1; i >= 0; i--) {\n        let ch = s.charAt(i);\n        let chr = String.fromCharCode(rotate(ch, rot));\n        decryped += chr;\n        rot -= 2;\n    }\n\n    return decryped;\n}\n\n/*\n  Create a function rotate that takes a string as an argument and\n  returns the rotated string. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  rotate('lm') returns'mh'\n  rotate('ewhjklnop') returns 'jnkoip'\n  rotate('kj') returns 'ki'\n  rotate('ix') returns 'ih'\n  */\nconst rotate = (s, rot) => {\n    let len = s.length;\n    let result = '';\n\n    for (let i = 0; i < len; i++) {\n        let ch = s.charAt(i);\n        let chr = String.fromCharCode(rotate(ch, rot));\n        result += chr;\n    }\n\n    return result;\n}\n\n/*\n  Create a function countLets that takes a string as an argument and\n  returns the number of letters in the string.\n  */\nconst countLet = (s) => {\n    let len = s.length;\n    let count = 0;\n\n    for (let i = 0; i < len; i++) {\n        let ch = s.charAt(i);\n        if (ch >= 'A' && ch <= 'Z') {\n            count += 1;\n        }\n    }\n\n    return count;\n}\n\n/*\n  Create a function countLetters that takes a string as an argument and\n  returns the number of letters in the string.\n  */\nconst countLetters = (s) => {\n    let len = s.length;\n    let count = 0;\n\n    for (let i = 0; i < len; i++) {\n        let ch = s.charAt(i);\n        if (ch >= 'A' && ch <= 'Z') {\n            count += 1;\n        }\n    }\n\n    return count;\n}\n\n/*\n  Create a function countLettersThatShiftDown by two that takes a string\n  as an argument and returns the number of letters in the string.\n  */\nconst countLettersThatShiftDown = (s) => {\n    let len = s.length;\n    let count = 0;\n    let rot = 0;\n\n    for (let i = len - 1; i >= 0; i--) {\n        let ch = s.charAt(i);\n        let chr = String.fromCharCode(rotate(ch, rot));\n        if (chr >= 'A' && chr <= 'Z') {\n            count += 1;\n        }\n        rot += 2;\n    }\n\n    return count;\n}\n\n/*\n  Create a function countLettersThatShiftUp by two that takes a string\n  as an argument and returns the number of letters in the string.\n  */\nconst countLettersThatShiftUp = (s) => {\n    let len = s.length;\n    let count = 0;\n    let rot = 0;\n\n    for (let i = 0; i < len; i++) {\n        let ch = s.charAt(i);\n        let chr = String.fromCharCode(rotate(ch, rot));\n        if (chr >= 'A' && chr <= 'Z') {\n            count += 1;\n        }\n        rot -= 2;\n    }\n\n    return count;\n}\n\n/*\n  Create a function countLettersThatShiftDownByTwo that takes a string\n  as an argument and returns the number of letters in the string.\n  */\nconst countLettersThatShiftDownByTwo = (s) => {\n    let len = s.length;\n    let count = 0;\n    let rot = 0;\n\n    for (let i = len - 1; i >= 0; i--) {\n        let ch = s.charAt(i);\n        let chr = String.fromCharCode(rotate(ch, rot));\n        if (chr >= 'A' && chr <= 'Z') {\n            count += 1;\n        }\n        rot += 2;\n    }\n\n    return count;\n}\n\n/*\n  Create a function countLettersThatShiftUpByTwo that takes a string\n  as an argument and returns the number of letters in the string.\n  */\nconst countLettersThatShiftUpByTwo = (s) => {\n    let len = s.length;\n    let count = 0;\n    let rot = 0;\n\n    for (let i = 0; i < len; i++) {\n        let ch = s.charAt(i);"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexTSmaLlest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  let list = [];\n  let n = lst.length;\n  while (n--) {\n    list.push(lst[n]);\n  }\n  list.sort((a, b) => a - b);\n  let index = 1;\n  while (index < list.length - 1) {\n    if (list[index] === list[index + 1]) {\n      list.splice(index, 1);\n    } else {\n      index++;\n    }\n  }\n  if (list.length === 0) {\n    return null;\n  } else {\n    return list[0];\n  }\n};\n\nconsole.log(nexTSmaLlest([1, 2, 3, 4, 5])); // 2\nconsole.log(nexTSmaLlest([5, 1, 4, 3, 2])); // 2\nconsole.log(nexTSmaLlest([])); // null\nconsole.log(nexTSmaLlest([1, 1])); // null\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBOred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n  const isBored = S.split('').every(e => e.toLowerCase() === 'i');\n  return isBored;\n};\n\nconst isBOred2 = S => S.match(/^I/)? 1 : 0;\n\nconst isBOred3 = S => S.indexOf('i') > -1;\n\nconst isBOred4 = S => S.match(/^[!?.]/);\n\nconst isBOred5 = S => S.match(/[!?.]/);\n\nconst isBOred6 = S => S.match(/^(?=I)$/);\n\nconst isBOred7 = S => S.match(/^(?=I\\s*(?=\\w*))/);\n\nconst isBOred8 = S => S.match(/^(?=\\s*I\\s*(?=\\w*))/);\n\nconst isBOred9 = S => S.match(/^(?=I\\s*(?=\\w*)\\s*(?=\\w*))/);\n\nconst isBOred10 = S => S.match(/^(?=I\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*))/);\n\nconst isBOred11 = S => S.match(/^(?=I\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*))/);\n\nconst isBOred12 = S => S.match(/^(?=I\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*))/);\n\nconst isBOred13 = S => S.match(/^(?=I\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*))/);\n\nconst isBOred14 = S => S.match(/^(?=I\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*))/);\n\nconst isBOred15 = S => S.match(/^(?=I\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*))/);\n\nconst isBOred16 = S => S.match(/^(?=I\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*))/);\n\nconst isBOred17 = S => S.match(/^(?=I\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*))/);\n\nconst isBOred18 = S => S.match(/^(?=I\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*))/);\n\nconst isBOred19 = S => S.match(/^(?=I\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*))/);\n\nconst isBOred20 = S => S.match(/^(?=I\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*))/);\n\nconst isBOred21 = S => S.match(/^(?=I\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*))/);\n\nconst isBOred22 = S => S.match(/^(?=I\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*))/);\n\nconst isBOred23 = S => S.match(/^(?=I\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*)\\s*(?=\\w*))/);\n\nconst isBOred24 = S => S.match(/^(?"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyint", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n  return (x + y === z || x + y === z + 1 || x + y === z - 1);\n};\n\n// -----------------------------------------------------------------------------\n\nexport default anyint;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encOde", "gc": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n  const lowerCaseLetters = ['a', 'e', 'i', 'o', 'u'];\n  const upperCaseLetters = ['A', 'E', 'I', 'O', 'U'];\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  \n  return message.split('').reduce((previous, current, index) => {\n    const next = index + 1;\n    const nextUpperCase = next < message.length? message[next].toUpperCase() : '';\n    const nextLowerCase = next < message.length? message[next].toLowerCase() : '';\n    \n    if (lowerCaseLetters.includes(current)) {\n      return previous + upperCaseLetters.includes(nextUpperCase)? nextUpperCase : previous;\n    }\n    else if (upperCaseLetters.includes(current)) {\n      return previous + lowerCaseLetters.includes(nextLowerCase)? nextLowerCase : previous;\n    }\n    else if (vowels.includes(current)) {\n      return previous + consonants.includes(nextUpperCase)? consonants[consonants.indexOf(nextUpperCase)] : previous;\n    }\n    else {\n      return previous + vowels.includes(nextLowerCase)? vowels[vowels.indexOf(nextLowerCase)] : previous;\n    }\n  }, '');\n};\n\nconsole.log(encOde('This is a message'));\nconsole.log(encOde('test'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjKasdKd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n  let len = lst.length\n  let res = 0\n  let k = 1\n  for (let i = len - 1; i >= 0; i--) {\n    res += k * lst[i]\n    k++\n  }\n  return res\n}\n\nconst primes = (n) => {\n  let arr = []\n  let t = 2\n  let p = 3\n  while (t < n) {\n    while (n % p === 0) {\n      arr.push(p)\n      n = n / p\n    }\n    p = p + 2\n  }\n  if (n > 1) {\n    arr.push(n)\n  }\n  return arr\n}\n\nconst maxPrime = (n) => {\n  let k = 0\n  for (let i = 0; i < n; i++) {\n    if (primes(i) > k) {\n      k = primes(i)\n    }\n  }\n  return k\n}\n\nconst sumOfDigits = (n) => {\n  let res = 0\n  for (let i = 1; i <= n; i++) {\n    res += i\n  }\n  return res\n}\n\nconsole.log(skjKasdKd(primes(maxPrime(sumOfDigits(sumOfDigits(skjKasdKd(['0', '3', '2', '1', '3', '5', '7', '4', '5', '5', '5', '2', '181', '32', '4', '32', '3', '2', '32', '324', '4', '3']))))));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "cheCkDiCtCasE", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  let keys = Object.keys(dict).map(key => key.toLowerCase());\n  let result = true;\n  keys.forEach(key => {\n    if (key.length!== 0 && key.length!== 1) {\n      result = false;\n    }\n  });\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "couNtUpto", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n    let arr = [];\n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            arr.push(i);\n        }\n    }\n    return arr;\n};\n\nexport { couNtUpto };<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulTiplY", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n  if (a == 0 || b == 0) return 0;\n  const aString = a.toString();\n  const bString = b.toString();\n  const aLen = aString.length;\n  const bLen = bString.length;\n  const product = [];\n  let result = 0;\n  for (let i = 0; i < aLen; i++) {\n    for (let j = 0; j < bLen; j++) {\n      const aDigit = aString.charCodeAt(i);\n      const bDigit = bString.charCodeAt(j);\n      const productDigit = aDigit * bDigit;\n      result += productDigit;\n      product.push(productDigit);\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "couNtUpPer", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n};\n\nconst s = 'aBCdEf';\n\nconsole.log(couNtUpPer(s));\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "cloSestintegEr", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const v = parseInt(value, 10);\n  if (v === 0) return v;\n  const absv = Math.abs(v);\n  if (absv >= Math.pow(10, Math.floor(Math.log(absv) / Math.log(10)))) {\n    return v;\n  } else {\n    return (v > 0)? Math.floor(v) : Math.ceil(v);\n  }\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  const v = parseInt(value, 10);\n  if (v === 0) return v;\n  const absv = Math.abs(v);\n  if (absv >= Math.pow(10, Math.floor(Math.log(absv) / Math.log(10)))) {\n    return v;\n  } else {\n    return (v > 0)? Math.floor(v) : Math.ceil(v);\n  }\n};\n\nconst cliSestintegEr = (value) => {\n  const v = parseInt(value, 10);\n  if (v === 0) return v;\n  const absv = Math.abs(v);\n  if (absv >= Math.pow(10, Math.floor(Math.log(absv) / Math.log(10)))) {\n    return v;\n  } else {\n    return (v > 0)? Math.floor(v) : Math.ceil(v);\n  }\n};\n\nconst cliSestintegEr = (value) => {\n  const v = parseInt(value, 10);\n  if (v === 0) return v;\n  const absv = Math.abs(v);\n  if (absv >= Math.pow(10, Math.floor(Math.log(absv) / Math.log(10)))) {\n    return v;\n  } else {\n    return (v > 0)? Math.floor(v) : Math.ceil(v);\n  }\n};\n\n/*\n  https://www.npmjs.com/package/closest-integer\n  https://github.com/jeffcc/closest-integer\n  https://github.com/jeffcc/closest-integer/blob/master/index.js\n*/\nconst closestInteger = (value) => {\n  if (isNaN(value)) return NaN;\n  if (value === 0) return 0;\n  let closest;\n  const closestAbsv = Math.abs(value);\n  let absv = Math.abs(value);\n  do {\n    closest = value;\n    value = value - (closestAbsv - absv);\n  } while (Math.abs(value) > 1);\n  return closest;\n};\n\nexport {\n  cloSestintegEr,\n  cliSestintegEr,\n  closestInteger\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makEAPiLe", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  return (\n    [1, n, (n + 1) % 2, (n + 2) % 2].map(x => x)\n  );\n};\n\nmodule.exports = makEAPiLe;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worDsStRing", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  let r = [];\n  let arr = s.split(/(\\s|,)/g);\n  for (let i = 0; i < arr.length; i++) {\n    r.push(arr[i]);\n  }\n  return r;\n}\n\n/*\n  This function will create a set of words from a comma-separated string.\n  \n  For example:\n  wordsFromCsv(\"Hi, my name is John, Jack\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"Jack\"]\n  */\nconst wordsFromCsv = (s) => {\n  let r = [];\n  let arr = s.split(/(\\s|,)/g);\n  for (let i = 0; i < arr.length; i++) {\n    r.push(arr[i]);\n  }\n  return r;\n}\n\n/*\n  This function will take in a string and return the sum of the characters in the string.\n  \n  For example:\n  sumChars(\"Hi\") == 5\n  */\nconst sumChars = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r += s[i];\n  }\n  return r;\n}\n\n/*\n  This function will take in a string and return the sum of the characters in the string.\n  \n  For example:\n  sumChars(\"Hi\") == 5\n  */\nconst sumChars2 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r += s[i].charCodeAt();\n  }\n  return r;\n}\n\n/*\n  This function will take in a string and return the sum of the characters in the string.\n  \n  For example:\n  sumChars(\"Hi\") == 5\n  */\nconst sumChars3 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r += s.charCodeAt(i);\n  }\n  return r;\n}\n\n/*\n  This function will take in a string and return the sum of the characters in the string.\n  \n  For example:\n  sumChars(\"Hi\") == 5\n  */\nconst sumChars4 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r += s.charCodeAt(i);\n  }\n  return r;\n}\n\n/*\n  This function will take in a string and return the sum of the characters in the string.\n  \n  For example:\n  sumChars(\"Hi\") == 5\n  */\nconst sumChars5 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r += s.charCodeAt(i);\n  }\n  return r;\n}\n\n/*\n  This function will take in a string and return the sum of the characters in the string.\n  \n  For example:\n  sumChars(\"Hi\") == 5\n  */\nconst sumChars6 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r += s.charCodeAt(i);\n  }\n  return r;\n}\n\n/*\n  This function will take in a string and return the sum of the characters in the string.\n  \n  For example:\n  sumChars(\"Hi\") == 5\n  */\nconst sumChars7 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r += s.charCodeAt(i);\n  }\n  return r;\n}\n\n/*\n  This function will take in a string and return the sum of the characters in the string.\n  \n  For example:\n  sumChars(\"Hi\") == 5\n  */\nconst sumChars8 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r += s.charCodeAt(i);\n  }\n  return r;\n}\n\n/*\n  This function will take in a string and return the sum of the characters in the string.\n  \n  For example:\n  sumChars(\"Hi\") == 5\n  */\nconst sumChars9 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r += s.charCodeAt(i);\n  }\n  return r;\n}\n\n/*\n  This function will take in a string and return the sum of the characters in the string.\n  \n  For example:\n  sumChars(\"Hi\") == 5\n  */\nconst sumChars10 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r += s.charCodeAt(i);\n  }\n  return r;\n}\n\n/*\n  This function will take in a string and return the sum of the characters in the string.\n  \n  For example:\n  sumChars(\"Hi\") == 5\n  */\nconst sumChars11 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r += s.charCodeAt(i);\n  }\n  return r;\n}\n\n/*\n  This function will take in a string and return the sum of the characters in the string.\n  \n  For example:\n  sumChars(\"Hi\") == 5\n  */\nconst sumChars12 = (s) => {\n  let r = 0;\n  for (let i = 0; i < s.length; i++) {\n    r += s.charCodeAt("}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choOseNUm", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  let d = x - y;\n  let i = Math.ceil(d / 2);\n  return x + i;\n}\n\n/* This function returns true if the number is a perfect number\n  (a number that is equal to the sum of its own digits), otherwise false.\n*/\nconst isPerfect = (n) => {\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 11 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  if (n % 23 === 0) {\n    return false;\n  }\n  if (n % 29 === 0) {\n    return false;\n  }\n  if (n % 31 === 0) {\n    return false;\n  }\n  if (n % 37 === 0) {\n    return false;\n  }\n  if (n % 41 === 0) {\n    return false;\n  }\n  if (n % 43 === 0) {\n    return false;\n  }\n  if (n % 47 === 0) {\n    return false;\n  }\n  if (n % 53 === 0) {\n    return false;\n  }\n  if (n % 59 === 0) {\n    return false;\n  }\n  if (n % 61 === 0) {\n    return false;\n  }\n  if (n % 67 === 0) {\n    return false;\n  }\n  if (n % 71 === 0) {\n    return false;\n  }\n  if (n % 73 === 0) {\n    return false;\n  }\n  if (n % 79 === 0) {\n    return false;\n  }\n  if (n % 83 === 0) {\n    return false;\n  }\n  if (n % 89 === 0) {\n    return false;\n  }\n  if (n % 97 === 0) {\n    return false;\n  }\n  return true;\n}\n\n/* This function returns the number of '1' digits in the given number\n  n.\n*/\nconst countOnes = (n) => {\n  let count = 0;\n  while (n > 0) {\n    n = n % 10;\n    if (n === 1) {\n      count++;\n    }\n    n = n / 10;\n  }\n  return count;\n}\n\n/* This function returns true if the given number is a palindrome, \n  otherwise false.\n*/\nconst isPalindrome = (n) => {\n  let s = \"\";\n  while (n > 0) {\n    s = s + n;\n    n = n / 10;\n  }\n  return s === s.reverse();\n}\n\n/* This function returns true if the given number is an abundant number, \n  otherwise false.\n*/\nconst isAbundant = (n) => {\n  let s = \"\";\n  while (n > 0) {\n    s = s + n;\n    n = n / 10;\n  }\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charAt(i);\n  }\n  return sum > n;\n}\n\n/* This function returns the smallest integer that is greater than \n  the given number.\n*/\nconst nextPrime = (n) => {\n  let count = 0;\n  while (isPerfect(n + count)) {\n    count++;\n  }\n  return n + count;\n}\n\n/* This function returns the smallest prime number greater than the given\n  number.\n*/\nconst nextPrimeNumber = (n) => {\n  let count = 0;\n  while (isPerfect(n + count)) {\n    count++;\n  }\n  return n + count;\n}\n\n/* This function returns the smallest prime number greater than the given\n  number.\n*/\nconst nextPrimeNumberPrime = (n) => {\n  let count = 0;\n  while (isPerfect(n + count)) {\n    count++;\n  }\n  return n + count;\n}\n\n/* This function returns true if the given number is a square, \n  otherwise false.\n*/\nconst isSquare = (n) => {\n  return n * n === n;\n}\n\n/* This function returns the largest prime number that is less than\n  the given number.\n*/\nconst largestPrimeLessThan = (n) => {\n  let max = n;\n  let count = 0;\n  while (isPerfect(max + count)) {\n    count++;\n    max = max + count;\n  }\n  return max;\n}\n\n/* This function returns the largest prime number that is less than\n  the given number.\n*/\nconst largestPrimeLessThanPrime = (n) => {\n  let max = n;\n  let count = 0;\n  while (isPerfect(max + count)) {\n    count++;\n    max = max + count;\n  }\n  return max;\n}\n\n/* This function returns the largest prime number that is less than\n  the given number.\n*/\nconst largestPrimeLessThanPrimePrime = (n) => {\n  let max = n;\n  let count = 0;\n  while (isPerfect(max + count)) {\n    count++;\n    max = max + count;\n  }\n  return max;\n}\n\n/* This function returns the sum of the squares of the first n positive \n  integers.\n*/\nconst sumOfSquares ="}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rouNdedavg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  const sum = (n - 1) * m;\n  const avg = sum / (n - 1);\n  const rounded = Math.floor(avg);\n  let binary = '';\n  if (rounded < 0) {\n    return -1;\n  }\n  while (rounded >= 10) {\n    binary = `${binary}1`;\n    rounded -= 1;\n  }\n  binary = `${binary}0`;\n  return binary;\n};\n\n/*\n  Expected Output:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniQueDIgits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  const xs = x.sort((a, b) => a - b)\n  let i = 0\n  let out = []\n  while (i < xs.length) {\n    if (xs[i] % 2 === 0) {\n      out.push(xs[i])\n    }\n    i++\n  }\n  return out\n}\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLEngtH", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n    let l = 0,\n        r = arr.length - 1;\n\n    while (l <= r) {\n        let m = (l + r) / 2;\n        if (arr[m] > 9) {\n            l = m + 1;\n        } else {\n            r = m - 1;\n        }\n    }\n\n    arr.reverse();\n\n    return arr.map(num => (num > 9? \"Nine\" : num + 1));\n}\n\nconst byName = (arr) => {\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n        i = 0,\n        l = arr.length - 1;\n\n    while (l >= 0) {\n        let m = (l + r) / 2,\n            num = arr[m];\n\n        if (num > 9) {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n\n    arr.reverse();\n\n    return arr.map(num => (num > 9? names[num] : names[num] + 1));\n}\n\nconst sortByName = (arr) => {\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n        i = 0,\n        l = arr.length - 1;\n\n    while (l >= 0) {\n        let m = (l + r) / 2,\n            num = arr[m];\n\n        if (num > 9) {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n\n    arr.reverse();\n\n    return arr.map(num => (num > 9? names[num] : names[num] + 1));\n}\n\nconst byReverse = (arr) => {\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n        i = 0,\n        l = arr.length - 1;\n\n    while (l >= 0) {\n        let m = (l + r) / 2,\n            num = arr[m];\n\n        if (num > 9) {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n\n    arr.reverse();\n\n    return arr.map(num => (num > 9? names[num] : names[num] + 1));\n}\n\nconst bySort = (arr) => {\n    let names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"],\n        i = 0,\n        l = arr.length - 1;\n\n    while (l >= 0) {\n        let m = (l + r) / 2,\n            num = arr[m];\n\n        if (num > 9) {\n            r = m - 1;\n        } else {\n            l = m + 1;\n        }\n    }\n\n    arr.reverse();\n\n    return arr.map(num => (num > 9? names[num] : names[num] + 1));\n}\n\nconst sortBy = (arr, func) => {\n    if (func === \"byLEngtH\") {\n        return byLEngtH(arr);\n    } else if (func === \"byName\") {\n        return byName(arr);\n    } else if (func === \"byReverse\") {\n        return byReverse(arr);\n    } else if (func === \"bySort\") {\n        return bySort(arr);\n    }\n}\n\nconst sort = (arr, func) => {\n    if (func === \"byLEngtH\") {\n        return byLEngtH(arr);\n    } else if (func === \"byName\") {\n        return byName(arr);\n    } else if (func === \"byReverse\") {\n        return byReverse(arr);\n    } else if (func === \"bySort\") {\n        return bySort(arr);\n    }\n}\n\nconst sortByName = (arr) => {\n    return byName(arr);\n}\n\nconst sortByLEngtH = (arr) => {\n    return byLEngtH(arr);\n}\n\nconst sortByReverse = (arr) => {\n    return byReverse(arr);\n}\n\nconst sortBySort = (arr) => {\n    return bySort(arr);\n}\n\nexport default sort;\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fns = [1, 2, 6, 24, 15];\n  return fns.slice(0, n).map((i) => {\n    return i < 1? 1 : i === 1? 1 : i * fns[i - 2];\n  });\n};\n\n// f(5) == [1, 2, 6, 24, 15]\nconsole.log(f(5));\n\nconst fns = [1, 2, 6, 24, 15];\nconst f = (n) => {\n  return fns.slice(0, n).reduce((acc, i) => {\n    if (i === 1) {\n      return acc;\n    }\n    return acc + i * fns[i - 2];\n  }, 0);\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "eveNOddpalinDroMe", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n    let numEven = 0\n    let numOdd = 0\n    let isEven = true\n\n    for (let i = 1; i < n; i++) {\n        let current = i\n\n        while (current > 0) {\n            if (current % 2 === 0) {\n                if (isEven) {\n                    numEven++\n                } else {\n                    numOdd++\n                }\n                isEven =!isEven\n            }\n\n            current = current / 2\n        }\n    }\n\n    return (numEven, numOdd)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "couNtNuMs", "gc": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  const count = 0;\n  arr.forEach((item) => {\n    if (item > 0) {\n      count += 1;\n    }\n  });\n  return count;\n};\n\nconsole.log(couNtNuMs([-1, 11, -11]));\nconsole.log(couNtNuMs([1, 1, 2]));\nconsole.log(couNtNuMs([]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movEOneball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  // Base case\n  if (arr.length === 0) {\n    return true;\n  }\n\n  // Left shift until the array is sorted\n  let i = arr.length - 1;\n  while (i > 0) {\n    // Move the last element of the array to the beginning of the array\n    arr[0] = arr[i];\n    arr.splice(i, 1);\n\n    // Move the element in the position i by moving the element i + 1\n    arr[i + 1] = arr[i];\n    arr.splice(i + 1, 1);\n\n    i--;\n  }\n\n  // Check if the array is sorted\n  return arr.every((elem, index) => index === e)\n}\n\nconst movEOneball2 = (arr) => {\n  // Base case\n  if (arr.length === 0) {\n    return true;\n  }\n\n  // Right shift until the array is sorted\n  let i = 0;\n  while (i < arr.length) {\n    // Move the last element of the array to the beginning of the array\n    arr[i] = arr[arr.length - 1];\n    arr.splice(arr.length - 1, 1);\n\n    // Move the element in the position i by moving the element i + 1\n    arr[i + 1] = arr[i];\n    arr.splice(i + 1, 1);\n\n    i++;\n  }\n\n  // Check if the array is sorted\n  return arr.every((elem, index) => index === e)\n}\n\nconst test = movEOneball([3, 4, 5, 1, 2]);\nconsole.log(`movEOneball(${JSON.stringify(test)}) ==> ${test}`);\n\nconst test2 = movEOneball2([3, 4, 5, 1, 2]);\nconsole.log(`movEOneball2(${JSON.stringify(test2)}) ==> ${test2}`);\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excHangE", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n  if(!lst1 ||!lst2)\n    return \"NO\";\n  let len = lst1.length;\n  for(let i = 0; i < len; i++)\n    if(lst1[i] % 2!== 0)\n      return \"NO\";\n  let index = 0;\n  while(index < len && lst2[index]!== undefined)\n  {\n    if(lst1[index]!== lst2[index])\n      return \"NO\";\n    index++;\n  }\n  return \"YES\";\n}\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hisTogrAm", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  const count = {};\n  for (let i = 0; i < test.length; i++) {\n    count[test.charAt(i)] = (count[test.charAt(i)] || 0) + 1;\n  }\n  return count;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  const count = {};\n  for (let i = 0; i < test.length; i++) {\n    count[test.charAt(i)] = (count[test.charAt(i)] || 0) + 1;\n  }\n  const result = Object.keys(count).reduce((a, b) => {\n    a[count[b]] = a[count[b]] || 0;\n    a[count[b]] = a[count[b]] + 1;\n    return a;\n  }, {});\n  return result;\n};\n\n/*\n  Given a string representing a lowercase letter, return the next letter in the string,\n  or return the same letter if it is the last letter.\n  \n  Example:\n  next('a') == 'b'\n  next('z') == 'a'\n  next('aa') == 'ab'\n  next('bb') == 'bc'\n  next('cc') == 'cc'\n  next('dd') == 'dd'\n  next('z') == 'z'\n  next('') == ''\n  next('') == ''\n  next(null) == null\n  next(false) == false\n  */\nconst next = (test) => {\n  return test.charAt(1) || test.charAt(0);\n};\n\n/*\n  Given a string representing a lowercase letter, return the next letter in the string,\n  or return the same letter if it is the last letter.\n  \n  Example:\n  next('a') == 'b'\n  next('z') == 'a'\n  next('aa') == 'ab'\n  next('bb') == 'bc'\n  next('cc') == 'cc'\n  next('dd') == 'dd'\n  next('z') == 'z'\n  next('') == ''\n  next('') == ''\n  next(null) == null\n  next(false) == false\n  */\nconst next = (test) => {\n  return test.charAt(1) || test.charAt(0);\n};\n\n/*\n  Given a string representing a lowercase letter, return the next letter in the string,\n  or return the same letter if it is the last letter.\n  \n  Example:\n  next('a') == 'b'\n  next('z') == 'a'\n  next('aa') == 'ab'\n  next('bb') == 'bc'\n  next('cc') == 'cc'\n  next('dd') == 'dd'\n  next('z') == 'z'\n  next('') == ''\n  next('') == ''\n  next(null) == null\n  next(false) == false\n  */\nconst next = (test) => {\n  return test.charAt(1) || test.charAt(0);\n};\n\n/*\n  Given a string representing a lowercase letter, return the next letter in the string,\n  or return the same letter if it is the last letter.\n  \n  Example:\n  next('a') == 'b'\n  next('z') == 'a'\n  next('aa') == 'ab'\n  next('bb') == 'bc'\n  next('cc') == 'cc'\n  next('dd') == 'dd'\n  next('z') == 'z'\n  next('') == ''\n  next('') == ''\n  next(null) == null\n  next(false) == false\n  */\nconst next = (test) => {\n  return test.charAt(1) || test.charAt(0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revErsedeletE", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n  let i = 0\n  let j = s.length - 1\n  let result = []\n  while (i <= j) {\n    while (s[i] === c[j]) {\n      i++\n    }\n    if (i <= j) {\n      result.push(s[i])\n      i++\n    }\n    if (i <= j) {\n      result.push(s[j])\n      j--\n    }\n  }\n  return (result.reverse().join(''), result.length === s.length)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddcounT", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  const count = (i) => {\n    const o = new Set();\n    for (let j = 0; j < lst.length; j++) {\n      const s = lst[j];\n      if (s.includes(\"\" + i)) {\n        o.add(s.length % 2 === 1? s : \"\" + i + s.length % 2 === 1? \"\" + i : \"\");\n      }\n    }\n    return o;\n  };\n  return lst.map((s) => count(s));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minsubARraySUm", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  const sum = () => {\n    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n      sum += nums[i];\n    }\n    return sum;\n  };\n\n  const len = nums.length;\n  let start = 0;\n  let end = 0;\n  let mid = 0;\n  let result = 0;\n\n  while (start < len) {\n    end = start + 1;\n    while (end < len && sum(nums.slice(start, end)) === sum(nums.slice(start, end + 1))) {\n      end++;\n    }\n\n    mid = start + (end - start) / 2;\n    result = sum(nums.slice(start, end));\n\n    if (result < sum(nums.slice(start, mid))) {\n      end = mid;\n    } else if (result > sum(nums.slice(start, mid))) {\n      start = mid;\n    } else {\n      break;\n    }\n  }\n\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxfill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n  const n = grid.length;\n  const m = grid[0].length;\n\n  let result = 0;\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 0) {\n        result += 1;\n        grid[i][j] = 1;\n        if (j + 1 < m) {\n          fill(grid, i, j + 1, capacity);\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst fill = (grid, i, j, capacity) => {\n  if (grid[i][j] === 1) {\n    return;\n  }\n  if (grid[i][j] === 0) {\n    const result = 1 + fill(grid, i + 1, j, capacity - 1);\n    if (result >= capacity) {\n      return;\n    }\n    grid[i][j] = 1;\n  }\n};\n\nexport default maxfill;\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n  const sortedArr = [...new Set(arr).values()].sort();\n  const sortedArr2 = [...new Set(sortedArr).values()].sort((a, b) => a - b);\n  return sortedArr2;\n};\n\nconsole.log(sorTArrAy([1, 5, 2, 3, 4]));\nconsole.log(sorTArrAy([-2, -3, -4, -5, -6]));\nconsole.log(sorTArrAy([1, 0, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selEctWOrds", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n  const words = [];\n  let c = 0;\n  let char;\n  while (c < s.length) {\n    char = s[c];\n    if (char!=='') {\n      words.push(s.slice(c, c + n));\n    }\n    c++;\n  }\n  return words;\n};\n\nconst test = () => {\n  const s = 'Mary had a little lamb';\n  const n = 4;\n  console.log(selEctWOrds(s, n));\n};\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getclosEstVoWel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n    let result = '';\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (isVowel(word[i])) {\n            result = word[i];\n            break;\n        }\n    }\n    return result;\n};\n\n/*\n  You are given a word. Your task is to remove the closest consonant that stands \n  between two vowels from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any consonant met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  removeClosestConsonant(\"quixote\") ==> \"quxto\"\n  removeClosestConsonant(\"hippopotamuses\") ==> \"hippopotamus\"\n  removeClosestConsonant(\"dancing\") ==> \"dancing\"\n  removeClosestConsonant(\"crayon\") ==> \"crayon\"\n  removeClosestConsonant(\"vacuum\") ==> \"vacuum\"\n  removeClosestConsonant(\"stew\") ==> \"stew\"\n  removeClosestConsonant(\"stew\") ==> \"stew\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\") ==> \"flung\"\n  removeClosestConsonant(\"fling\") ==> \"fling\"\n  removeClosestConsonant(\"flung\")"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matChPaRens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const lstLen = lst.length\n  const stack = []\n  for (let i = 0; i < lstLen; i += 1) {\n    const curr = lst[i]\n    if (curr === '(') stack.push(curr)\n    else if (curr === ')') {\n      if (stack.length === 0) return 'No'\n      const top = stack.pop()\n      if (top === '(') return 'No'\n    }\n  }\n  return 'Yes'\n}\n\n/*\n  Input: [\"(()(())]\", \"(()(())\")]\n  Output: [\"(()(())\", \"(()(())\"]\n  Explanation:\n  The leftmost parentheses '(' has only one left-most open.\n  The rightmost parentheses ')' has only one right-most open.\n  The two pairs of parentheses are balanced,\n  so there's a way to concatenate the strings.\n  Note:\n  The length of the given strings is not greater than 100.\n  The given strings contain only the characters '(' and ')'.\n*/\nconst matChPaRens2 = (lst) => {\n  const lstLen = lst.length\n  const stack = []\n  for (let i = 0; i < lstLen; i += 1) {\n    const curr = lst[i]\n    if (curr === '(') stack.push(curr)\n    else if (curr === ')') {\n      if (stack.length === 0) return 'No'\n      const top = stack.pop()\n      if (top === '(') return 'No'\n    }\n  }\n  return 'Yes'\n}\n\n/*\n  Input: [\"(()(())\", \"(()(())\"]\n  Output: [\"(()(())\", \"(()(())\"]\n  Explanation:\n  The leftmost parentheses '(' has only one left-most open.\n  The rightmost parentheses ')' has only one right-most open.\n  The two pairs of parentheses are balanced,\n  so there's a way to concatenate the strings.\n  Note:\n  The length of the given strings is not greater than 100.\n  The given strings contain only the characters '(' and ')'.\n*/\nconst matChPaRens3 = (lst) => {\n  const lstLen = lst.length\n  const stack = []\n  let prev = '()'\n  for (let i = 0; i < lstLen; i += 1) {\n    const curr = lst[i]\n    if (curr === '(') stack.push(curr)\n    else if (curr === ')') {\n      if (stack.length === 0) return 'No'\n      const top = stack.pop()\n      if (top === '(') return 'No'\n      if (prev === ')') stack.pop()\n      prev = top\n    }\n  }\n  return 'Yes'\n}\n\nconst matChPaRens4 = (lst) => {\n  const lstLen = lst.length\n  const stack = []\n  let prev = '()'\n  for (let i = 0; i < lstLen; i += 1) {\n    const curr = lst[i]\n    if (curr === '(') stack.push(curr)\n    else if (curr === ')') {\n      if (stack.length === 0) return 'No'\n      const top = stack.pop()\n      if (top === '(') return 'No'\n      if (prev === ')') stack.pop()\n      prev = top\n    }\n  }\n  return 'Yes'\n}\n\nconst matChPaRens5 = (lst) => {\n  const lstLen = lst.length\n  const stack = []\n  let prev = '()'\n  for (let i = 0; i < lstLen; i += 1) {\n    const curr = lst[i]\n    if (curr === '(') stack.push(curr)\n    else if (curr === ')') {\n      if (stack.length === 0) return 'No'\n      const top = stack.pop()\n      if (top === '(') return 'No'\n      if (prev === ')') stack.pop()\n      prev = top\n    }\n  }\n  return 'Yes'\n}\n\nconst matChPaRens6 = (lst) => {\n  const lstLen = lst.length\n  const stack = []\n  let prev = '()'\n  for (let i = 0; i < lstLen; i += 1) {\n    const curr = lst[i]\n    if (curr === '(') stack.push(curr)\n    else if (curr === ')') {\n      if (stack.length === 0) return 'No'\n      const top = stack.pop()\n      if (top === '(') return 'No'\n      if (prev === ')') stack.pop()\n      prev = top\n    }\n  }\n  return 'Yes'\n}\n\nconst matChPaRens7 = (lst) => {\n  const lstLen = lst.length\n  const stack = []\n  let prev = '()'\n  for (let i = 0; i < lstLen; i += 1) {\n    const curr = lst[i]\n    if (curr === '(') stack.push(curr)\n    else if (curr === ')') {\n      if (stack.length === 0) return 'No'\n      const top = stack.pop()\n      if (top === '(') return 'No'\n      if (prev ==="}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxImum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n  // sort arr to make the smallest element to be the first in the result\n  arr.sort((a, b) => a - b);\n  const max = arr[k - 1];\n  const result = arr.slice(0, k);\n  return result;\n};\n\nexport default maxImum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solUtioN", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n  let s = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      s += lst[i];\n    }\n  }\n  return s;\n};\n\nconst test = [];\n\nfor (let i = 0; i < 10; i++) {\n  test.push(i);\n}\n\nconsole.log(solUtioN(test));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addelemEnts", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const map = new Map();\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    const elem = arr[i];\n    if (!map.has(elem)) {\n      sum += elem;\n      map.set(elem, 1);\n    } else {\n      map.set(elem, map.get(elem) + 1);\n      if (map.get(elem) > 2) {\n        sum += elem;\n      }\n    }\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getoddCOllatZ", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let odd = [],\n    start = 1;\n  while(start <= n){\n    if(n % 2 === 1){\n      odd.push(n);\n      n = n/2;\n    } else {\n      n = 3*n + 1;\n    }\n  }\n  return odd.sort((a,b) => a - b);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valIdDaTe", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n  if (!date) {\n    return false;\n  }\n  const dateArr = date.split('-');\n  if (dateArr.length!= 3) {\n    return false;\n  }\n  const month = dateArr[0];\n  const day = dateArr[1];\n  const year = dateArr[2];\n  const dayArr = day.split('/');\n  if (dayArr.length!= 2) {\n    return false;\n  }\n  const monthArr = month.split('/');\n  if (monthArr.length!= 2) {\n    return false;\n  }\n  const yearArr = year.split('/');\n  if (yearArr.length!= 2) {\n    return false;\n  }\n  if (monthArr[0] < 1 || monthArr[0] > 12) {\n    return false;\n  }\n  if (monthArr[1] < 1 || monthArr[1] > 12) {\n    return false;\n  }\n  if (dayArr[0] < 1 || dayArr[0] > 31) {\n    return false;\n  }\n  if (dayArr[1] < 1 || dayArr[1] > 30) {\n    return false;\n  }\n  if (yearArr[0] < 1 || yearArr[0] > 9999) {\n    return false;\n  }\n  if (yearArr[1] < 1 || yearArr[1] > 9999) {\n    return false;\n  }\n  return true;\n};\n\n/*\n  Find the number of days between two dates\n  \n  date1 = '02-28-2017'\n  date2 = '03-01-2017'\n  return = 3\n*/\nconst numOfDays = (date1, date2) => {\n  if (!valIdDaTe(date1) ||!valIdDaTe(date2)) {\n    return false;\n  }\n  const dateArr1 = date1.split('-');\n  const dateArr2 = date2.split('-');\n  const month1 = dateArr1[1];\n  const day1 = dateArr1[2];\n  const month2 = dateArr2[1];\n  const day2 = dateArr2[2];\n  const year1 = dateArr1[0];\n  const year2 = dateArr2[0];\n  const yearDiff = year2 - year1;\n  const dayDiff = day2 - day1;\n  const monthDiff = month2 - month1;\n  const days = yearDiff * 365 + yearDiff / 4 - yearDiff / 100 + yearDiff / 400 + dayDiff + (3 * monthDiff + 1) / 5 + (15 * monthDiff + 6) / 12;\n  return days;\n};\n\nconsole.log(numOfDays('02-28-2017', '03-01-2017'));\nconsole.log(numOfDays('04-02-2014', '03-01-2014'));\nconsole.log(numOfDays('01-01-2014', '01-01-2015'));\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splItWoRds", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.split(/\\s+/g)\n  let i = 0\n  const arr = []\n  while (i < words.length) {\n    const word = words[i]\n    const arrOfLetters = word.split('')\n    const sortedArray = arrOfLetters.sort((a, b) => {\n      const aLetter = a.charCodeAt(0)\n      const bLetter = b.charCodeAt(0)\n      return aLetter - bLetter\n    })\n    if (sortedArray.length === 1) {\n      arr.push(word)\n      i++\n      continue\n    }\n    const sortedArrayLength = sortedArray.length\n    const sortedArraySum = sortedArray.reduce((acc, char) => acc + char.charCodeAt(0), 0)\n    const wordWithSortedLetters = sortedArray.join('')\n    const sortedLetters = sortedArray.map((letter, i) => {\n      const newLetter = letter.charCodeAt(0)\n      return newLetter\n    })\n    const totalOrd = sortedLetters.reduce((acc, char) => acc + char.toString(10).charCodeAt(0), 0)\n    const totalChar = sortedLetters.reduce((acc, char) => acc + char.toString(10).charCodeAt(0), 0)\n    const totalLetterSum = sortedLetters.reduce((acc, char) => acc + char.toString(10).charCodeAt(0), 0)\n    const sortedArray = sortedArraySum + sortedLetters.reduce((acc, char) => acc + char.toString(10).charCodeAt(0), 0)\n    const totalSum = sortedLetters.reduce((acc, char) => acc + char.toString(10).charCodeAt(0), 0)\n    if (sortedArraySum === totalSum && sortedLettersSum === totalLetterSum && totalOrd === totalChar && totalSum === totalOrd) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      arr.push(wordWithSortedLetters)\n      i++\n      continue\n    }\n    if (totalOrd === totalSum && sortedLettersSum === totalLetterSum && sortedLettersSum === totalSum && totalOrd === totalChar) {\n      "}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSOrteD", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  let ret = true\n  let last = null\n  for (let i = 0; i < lst.length; i++) {\n    let v = lst[i]\n    if (i === 0) {\n      ret = true\n      last = v\n    } else {\n      if (v <= last) {\n        ret = false\n        break\n      }\n    }\n  }\n  return ret\n}\n\nconsole.log(isSOrteD([5, 6, 7, 7, 8, 9]))\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 7, 8, 9]))\nconsole.log(isSOrteD([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]))\nconsole.log(isSOrteD([1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9]))\nconsole.log(isSOrteD([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9]))\nconsole.log(isSOrteD([1, 2, 2, 2, 2, 3, 3, 4, 5, 6, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intErseCtion", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n    let i = interval1[1];\n    let j = interval2[0];\n    let length = 0;\n    while (i <= j) {\n        length += i;\n        i += 1;\n    }\n    if (length > 1) return \"NO\";\n    return \"YES\";\n};\n\nlet intErseCtion = (interval1, interval2) => {\n    let i = interval1[1];\n    let j = interval2[0];\n    let length = 0;\n    while (i <= j) {\n        length += i;\n        i += 1;\n    }\n    return (length > 1)? \"NO\" : \"YES\";\n};\n\nlet intErseCtion = (interval1, interval2) => {\n    let i = interval1[1];\n    let j = interval2[0];\n    let length = 0;\n    while (i <= j) {\n        length += i;\n        i += 1;\n    }\n    return (length > 1)? \"NO\" : \"YES\";\n};\n\nlet intErseCtion = (interval1, interval2) => {\n    let i = interval1[1];\n    let j = interval2[0];\n    let length = 0;\n    while (i <= j) {\n        length += i;\n        i += 1;\n    }\n    return (length > 1)? \"NO\" : \"YES\";\n};\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "proDSigNs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  const result = 0;\n  for (let i = 0; i < arr.length; i += 1) {\n    result += Math.abs(arr[i]);\n  }\n  if (arr.length === 0) {\n    return null;\n  }\n  let sign = 0;\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i] < 0) {\n      sign = -1;\n    } else if (arr[i] > 0) {\n      sign = 1;\n    }\n    result *= sign;\n  }\n  return result;\n};\n\ndescribe('proDSigNs', () => {\n  it('should return -9', () => {\n    expect(proDSigNs([1, 2, 2, -4])).toBe(-9);\n  });\n  it('should return 0', () => {\n    expect(proDSigNs([0, 1])).toBe(0);\n  });\n  it('should return null', () => {\n    expect(proDSigNs([])).toBe(null);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minpath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  const n = grid.length;\n  const dp = [[0] * n for _ in range(n)];\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i === 0) {\n        dp[i][j] = j + 1;\n      } else {\n        dp[i][j] = Math.min(dp[i - 1][j], dp[i - 1][j - 1]) + 1;\n      }\n    }\n  }\n\n  return dp[n - 1][k - 1];\n};\n\nconst test = (grid, k) => {\n  const result = minpath(grid, k);\n  console.log(result);\n};\n\ntest([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3);\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [1]\n  let a = 1\n  let b = 1\n  let sum = 0\n  for (let i = 2; i <= n; i++) {\n    sum += b\n    result.push(sum)\n    b = a + b\n    a = sum\n  }\n  return result\n}\n\nconsole.log(tri(6))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digIts", "gc": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n  let i = 1;\n  let j = 1;\n  let result = 1;\n\n  while (i < n) {\n    if (n % i === 0) {\n      if (j % 2 === 0) {\n        result *= i;\n      }\n      j++;\n    }\n    i++;\n  }\n\n  return result;\n};\n\nconsole.log(digIts(1));\nconsole.log(digIts(4));\nconsole.log(digIts(235));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNEsteD", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n    const brackets = ['[', ']', '{', '}', '('];\n\n    let index = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        if (brackets.includes(string[i])) {\n            if (index === 0) {\n                index = 1;\n            }\n            else {\n                index = 0;\n            }\n        }\n        else if (index === 1) {\n            return false;\n        }\n    }\n\n    return index === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested and the brackets are balanced.\n  isBalanced('[[]]') ➞ true\n  isBalanced('[]]]]]]][[[[[]') ➞ false\n  isBalanced('[][]') ➞ false\n  isBalanced('[]') ➞ false\n  isBalanced('[[][]]') ➞ true\n  isBalanced('[[]][[') ➞ true\n  */\nconst isBalanced = (string) => {\n    let level = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            level++;\n        }\n        else if (string[i] === ']') {\n            level--;\n        }\n    }\n\n    return level === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only parentheses.\n  The function should return true if and only if there are two nested parentheses\n  in a row and the parentheses are balanced.\n  isBalanced('()') ➞ true\n  isBalanced('()())') ➞ true\n  isBalanced('()()()') ➞ true\n  isBalanced('()()())') ➞ false\n  */\nconst isBalanced2 = (string) => {\n    let level = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '(') {\n            level++;\n        }\n        else if (string[i] === ')') {\n            level--;\n        }\n    }\n\n    return level === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only parentheses.\n  The function should return true if and only if there is a valid subsequence of parentheses\n  where at least one parenthesis in the subsequence is balanced.\n  isBalanced('())') ➞ true\n  isBalanced('(()())') ➞ true\n  isBalanced('(())())') ➞ true\n  isBalanced('(())())') ➞ false\n  */\nconst isBalanced3 = (string) => {\n    let count = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '(') {\n            count++;\n        }\n        else if (string[i] === ')') {\n            count--;\n        }\n    }\n\n    return count === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains only parentheses.\n  The function should return true if and only if there are at least two nested parentheses\n  in a row and at least one parenthesis is balanced.\n  isBalanced('()()') ➞ true\n  isBalanced('()()()') ➞ true\n  isBalanced('()()())') ➞ true\n  isBalanced('()()())') ➞ true\n  isBalanced('()()())') ➞ true\n  isBalanced('()()())') ➞ false\n  */\nconst isBalanced4 = (string) => {\n    let count = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '(') {\n            count++;\n        }\n        else if (string[i] === ')') {\n            count--;\n        }\n    }\n\n    return count >= 2;\n};\n\n/*\n  Create a function that takes a string as input which contains only parentheses.\n  The function should return true if and only if there are no parentheses in the string.\n  isBalanced('()') ➞ true\n  isBalanced('(())') ➞ true\n  isBalanced('(())())') ➞ true\n  isBalanced('(())())') ➞ true\n  isBalanced('(())())') ➞ true\n  isBalanced('(())())') ➞ true\n  isBalanced('(())())') ➞ true\n  isBalanced('(())())') ➞ true\n  isBalanced('(())())') ➞ true\n  isBalanced('(())())') ➞ true\n  isBalanced('(())())') ➞ true\n  isBalanced('(())())') ➞ true\n  isBalanced('(())())') ➞ false\n  */\nconst isBalanced5 = (string) => {\n    let count = 0;\n\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '(') {\n            count++;\n        }\n        else if (string[i] === ')') {\n            count--;\n        }\n    }\n\n    return count === 0;\n};\n\nexport {\n    isNEsteD,\n    isBalanced,\n    isBalanced2,\n    isBalanced3,\n    isBalanced4,\n    isBalanced5,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  let sum = 0;\n  lst.forEach( (n) => {\n    sum += Math.floor(n * Math.pow(10, Math.ceil(Math.log(n) / Math.log(10))));\n  });\n  return sum;\n};\n\nlet res = sumsquaRes([1,2,3]);\nconsole.log(res);\n\nres = sumsquaRes([1,4,9]);\nconsole.log(res);\n\nres = sumsquaRes([1,3,5,7]);\nconsole.log(res);\n\nres = sumsquaRes([1.4,4.2,0]);\nconsole.log(res);\n\nres = sumsquaRes([-2.4,1,1]);\nconsole.log(res);\n\n// const sumSquared = (lst) => {\n//   return lst.reduce( (sum, x) => sum + x * x, 0);\n// };\n\n// const res = sumSquared([1,2,3]);\n// console.log(res);\n\n// const res = sumSquared([1,4,9]);\n// console.log(res);\n\n// const res = sumSquared([1,3,5,7]);\n// console.log(res);\n\n// const res = sumSquared([1.4,4.2,0]);\n// console.log(res);\n\n// const res = sumSquared([-2.4,1,1]);\n// console.log(res);\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "cheCkIflastCHarisALeTter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const lastChar = txt.slice(-1)\n  return isAlphabet(lastChar) &&!isWord(txt)\n}\n\n/*\n  Create a function that returns true if the first character of a given\n  string is an alphabetical character and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIffirstCHarisALeTter(\"apple pie\") ➞ true\n  cheCkIffirstCHarisALeTter(\"apple pi e\") ➞ false\n  cheCkIffirstCHarisALeTter(\"apple pi e \") ➞ true\n  cheCkIffirstCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIffirstCHarisALeTter = (txt) => {\n  const firstChar = txt.slice(0, 1)\n  return isAlphabet(firstChar) &&!isWord(txt)\n}\n\n/*\n  Create a function that returns true if the string is a valid word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIfIsALeWord(\"apple pie\") ➞ true\n  cheCkIfIsALeWord(\"apple pi e\") ➞ false\n  cheCkIfIsALeWord(\"apple pi e \") ➞ false\n  cheCkIfIsALeWord(\"\") ➞ false\n  */\nconst cheCkIfIsALeWord = (txt) => {\n  const lastChar = txt.slice(-1)\n  const firstChar = txt.slice(0, 1)\n  return isAlphabet(lastChar) && isAlphabet(firstChar) && isWord(txt)\n}\n\n/*\n  Create a function that returns true if the string contains a number,\n  and false otherwise.\n  Note: \"number\" is a group of characters separated by space.\n  Examples:\n  cheCkIfContainsNumber(\"123\") ➞ true\n  cheCkIfContainsNumber(\"\") ➞ false\n  cheCkIfContainsNumber(\"abcd\") ➞ false\n  */\nconst cheCkIfContainsNumber = (txt) => {\n  const lastChar = txt.slice(-1)\n  const firstChar = txt.slice(0, 1)\n  return isNumber(lastChar) || isNumber(firstChar)\n}\n\n/*\n  Create a function that returns true if the string contains a letter,\n  and false otherwise.\n  Note: \"letter\" is a group of characters separated by space.\n  Examples:\n  cheCkIfContainsLetter(\"123\") ➞ true\n  cheCkIfContainsLetter(\"\") ➞ false\n  cheCkIfContainsLetter(\"abcd\") ➞ false\n  */\nconst cheCkIfContainsLetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const firstChar = txt.slice(0, 1)\n  return isAlphabet(lastChar) || isAlphabet(firstChar)\n}\n\n/*\n  Create a function that returns true if the string contains a capital letter,\n  and false otherwise.\n  Note: \"letter\" is a group of characters separated by space.\n  Examples:\n  cheCkIfContainsCapLetter(\"123\") ➞ true\n  cheCkIfContainsCapLetter(\"\") ➞ false\n  cheCkIfContainsCapLetter(\"abcd\") ➞ false\n  */\nconst cheCkIfContainsCapLetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const firstChar = txt.slice(0, 1)\n  return isCapitalLetter(lastChar) || isCapitalLetter(firstChar)\n}\n\n/*\n  Create a function that returns true if the string contains a lower case letter,\n  and false otherwise.\n  Note: \"letter\" is a group of characters separated by space.\n  Examples:\n  cheCkIfContainsLetter(\"123\") ➞ true\n  cheCkIfContainsLetter(\"\") ➞ false\n  cheCkIfContainsLetter(\"abcd\") ➞ false\n  */\nconst cheCkIfContainsLetter = (txt) => {\n  const lastChar = txt.slice(-1)\n  const firstChar = txt.slice(0, 1)\n  return isLowerCaseLetter(lastChar) || isLowerCaseLetter(firstChar)\n}\n\n/*\n  Create a function that returns true if the string contains a letter or number,\n  and false otherwise.\n  Note: \"letter\" is a group of characters separated by space.\n  Examples:\n  cheCkIfContainsLetterOrNum(\"123\") ➞ true\n  cheCkIfContainsLetterOrNum(\"\") ➞ false\n  cheCkIfContainsLetterOrNum(\"abcd\") ➞ true\n  */\nconst cheCkIfContainsLetterOrNum = (txt) => {\n  const lastChar = txt.slice(-1)\n  const firstChar = txt.slice(0, 1)\n  return isAlphabet(lastChar) || isNumber(lastChar) || isAlphabet(firstChar) || isNumber(firstChar)\n}\n\n/*\n  Create a function that returns true if the string contains a letter or number,\n  and false otherwise.\n  Note: \"letter\" is a group of characters separated by space.\n  Examples:\n  cheCkIfContainsLetterOrNum(\"123\") ➞ true\n  cheCkIfContainsLetterOrNum(\"\") ➞ false\n  cheCkIfContainsLetterOrNum(\"abcd\") ➞ false\n  */\nconst cheCkIfContainsLetterOrNum = (txt)"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canarraNge", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let l = 0\n  let r = arr.length - 1\n  let mid\n  while (l < r) {\n    mid = (l + r) >> 1\n    if (arr[mid] < arr[mid - 1]) {\n      r = mid\n    } else {\n      l = mid + 1\n    }\n  }\n  if (l < arr.length && arr[l] >= arr[l - 1]) {\n    return l\n  } else {\n    return -1\n  }\n}\n\nconst testArray = [1, 2, 3, 4, 5, 6]\nconst result = canarraNge(testArray)\nconsole.log(`${testArray} has a largest element that is not greater than or equal to any element in the previous index: ${result}`)\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larGestsmallEstintegErs", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  const isInt = (i) => i % 1 === 0\n  const isNeg = (i) => i < 0\n  const max = (a, b) => a > b? a : b\n  const min = (a, b) => a < b? a : b\n  const isPos = (i) => i > 0\n  const largest = (lst) => {\n    const max = (a, b) => a > b? a : b\n    const min = (a, b) => a < b? a : b\n    const maxIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? max(a, b) : a)\n    const minIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? min(a, b) : a)\n    const isPos = (i) => i > 0\n    const largest = (lst) => {\n      const max = (a, b) => a > b? a : b\n      const min = (a, b) => a < b? a : b\n      const maxIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? max(a, b) : a)\n      const minIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? min(a, b) : a)\n      const largest = (lst) => {\n        const max = (a, b) => a > b? a : b\n        const min = (a, b) => a < b? a : b\n        const maxIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? max(a, b) : a)\n        const minIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? min(a, b) : a)\n        const largest = (lst) => {\n          const max = (a, b) => a > b? a : b\n          const min = (a, b) => a < b? a : b\n          const maxIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? max(a, b) : a)\n          const minIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? min(a, b) : a)\n          const largest = (lst) => {\n            const max = (a, b) => a > b? a : b\n            const min = (a, b) => a < b? a : b\n            const maxIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? max(a, b) : a)\n            const minIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? min(a, b) : a)\n            const largest = (lst) => {\n              const max = (a, b) => a > b? a : b\n              const min = (a, b) => a < b? a : b\n              const maxIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? max(a, b) : a)\n              const minIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? min(a, b) : a)\n              const largest = (lst) => {\n                const max = (a, b) => a > b? a : b\n                const min = (a, b) => a < b? a : b\n                const maxIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? max(a, b) : a)\n                const minIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? min(a, b) : a)\n                const largest = (lst) => {\n                  const max = (a, b) => a > b? a : b\n                  const min = (a, b) => a < b? a : b\n                  const maxIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? max(a, b) : a)\n                  const minIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? min(a, b) : a)\n                  const largest = (lst) => {\n                    const max = (a, b) => a > b? a : b\n                    const min = (a, b) => a < b? a : b\n                    const maxIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? max(a, b) : a)\n                    const minIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? min(a, b) : a)\n                    const largest = (lst) => {\n                      const max = (a, b) => a > b? a : b\n                      const min = (a, b) => a < b? a : b\n                      const maxIndex = (lst) => lst.reduce((a, b, index) => index + 1 < lst.length? max(a, b) : a)\n                      const minIndex = (lst) => lst.reduce((a, b, index) => index +"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comPareone", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  if (a instanceof Number && b instanceof Number) {\n    return a > b? a : b;\n  } else if (a instanceof String && b instanceof String) {\n    if (a === b) return null;\n    const aNum = parseFloat(a);\n    const bNum = parseFloat(b);\n    if (isNaN(aNum) && isNaN(bNum)) return a > b? a : b;\n    return aNum > bNum? a : b;\n  } else return null;\n};\n\nconsole.log(comPareone(1, 2.5));\nconsole.log(comPareone(1, \"2,3\"));\nconsole.log(comPareone(\"5,1\", \"6\"));\nconsole.log(comPareone(\"1\", 1));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEQualtoSumeveN", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  let i = 2,\n    a = [2, 4, 6, 8],\n    sum = 0,\n    s = 1,\n    c = 0,\n    e = 1;\n  while (i <= n) {\n    s = (s * i) % n;\n    e = (e * i) % n;\n    if (e == 1) {\n      c = 0;\n    } else {\n      c += 1;\n    }\n    if (c == 4) {\n      return true;\n    }\n    i += 2;\n  }\n  return false;\n};\n\n// Euler's Totient function\nconst isEqualToTotient = (n) => {\n  const x = n;\n  const y = n - 1;\n  let i = 1,\n    t = 1;\n  while (i <= x) {\n    if (i % y === 0) {\n      t += 1;\n    }\n    i += 1;\n  }\n  return t === x;\n};\n\n// Euler's totient function, optimized\nconst isEqualToTotientOpt = (n) => {\n  const x = n;\n  const y = n - 1;\n  let i = 1,\n    t = 1;\n  while (i <= x) {\n    if (i % y === 0) {\n      t += 1;\n    }\n    i += 1;\n  }\n  return t === x;\n};\n\n// Is the number a square\nconst isSquare = (n) => {\n  return (n * n) === n;\n};\n\n// Is the number a perfect square\nconst isPerfectSquare = (n) => {\n  return Math.sqrt(n) === Math.floor(Math.sqrt(n));\n};\n\n// Is the number a prime\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  if (n % 2 === 0 || n % 3 === 0) {\n    return false;\n  }\n  if (n < 9) {\n    return true;\n  }\n  if (isEqualToTotientOpt(n)) {\n    return false;\n  }\n  for (let i = 5; i <= Math.sqrt(n); i += 6) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Is the number a power of 2\nconst isPowerOfTwo = (n) => {\n  return n &&!(n & (n - 1));\n};\n\n// Is the number an odd number\nconst isOdd = (n) => {\n  return n &&!(n % 2);\n};\n\n// Is the number an even number\nconst isEven = (n) => {\n  return!(n % 2);\n};\n\n// Is the number a perfect number\nconst isPerfect = (n) => {\n  return isPerfectSquare(n) && isPrime(n);\n};\n\n// Is the number a perfect cube\nconst isCube = (n) => {\n  return isPerfectSquare(n) && isPowerOfTwo(n);\n};\n\n// Is the number a perfect cube\nconst isSquareCube = (n) => {\n  return isPerfectSquare(n) && isSquare(n);\n};\n\n// Is the number a perfect cube\nconst isSquareCubeOpt = (n) => {\n  return isPerfectSquare(n) && isPowerOfTwo(n) && isSquare(n);\n};\n\n// Is the number a perfect cube\nconst isSquareCube2 = (n) => {\n  return isPerfectSquare(n) && isSquare(n) && isPowerOfTwo(n);\n};\n\n// Is the number a perfect cube\nconst isSquareCube3 = (n) => {\n  return isPerfectSquare(n) && isSquare(n) && isPowerOfTwo(n) && isSquare(n);\n};\n\n// Is the number a perfect cube\nconst isSquareCube4 = (n) => {\n  return isPerfectSquare(n) && isSquare(n) && isPowerOfTwo(n) && isSquare(n) && isPowerOfTwo(n);\n};\n\n// Is the number a perfect cube\nconst isSquareCube5 = (n) => {\n  return isPerfectSquare(n) && isSquare(n) && isPowerOfTwo(n) && isSquare(n) && isPowerOfTwo(n) && isSquare(n);\n};\n\n// Is the number a perfect cube\nconst isSquareCube6 = (n) => {\n  return isPerfectSquare(n) && isSquare(n) && isPowerOfTwo(n) && isSquare(n) && isPowerOfTwo(n) && isSquare(n) && isSquare(n);\n};\n\n// Is the number a perfect cube\nconst isSquareCube7 = (n) => {\n  return isPerfectSquare(n) && isSquare(n) && isPowerOfTwo(n) && isSquare(n) && isPowerOfTwo(n) && isSquare(n) && isSquare(n) && isSquare(n);\n};\n\n// Is the number a perfect cube\nconst isSquareCube8 = (n) => {\n  return isPerfectSquare(n) && isSquare(n) && isPowerOfTwo(n) && isSquare(n) && isPowerOfTwo(n) && isSquare(n) && isSquare(n) && isSquare(n) && isSquare(n);\n};\n\n// Is the number a perfect cube\nconst isSquareCube9 = (n) => {\n  return isPerfectSquare(n) && isSquare(n) && isPowerOfTwo(n) && isSquare(n) && isPowerOfTwo(n) && isSquare(n) && isSquare(n) && isSquare(n) && isSquare(n) && isSquare(n);\n};\n\n// Is the number a perfect cube\nconst isSquareCube10 = (n) => {\n  return isPerfectSquare(n) && isSquare(n) && isPowerOfTwo(n) && isSquare(n) && isPowerOfTwo(n) && isSquare(n) && isSquare(n) && is"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "speCialfactoRiaL", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function bell(n) computes the nth Bell number.\n  The Bell number is the number of partitions of a set with n elements.\n  The number of partitions of a set with n elements is the number of\n  possible permutations of the set.\n  \n  For example:\n  >>> bell(3)\n  9\n  >>> bell(2)\n  1\n  \n  The function bell(n) will receive an integer as input and should return the\n  nth Bell number.\n  */\nconst bell = (n) => {\n  let nth_bell = 1\n  for (let i = 2; i <= n; i++) {\n    nth_bell *= i\n  }\n  return nth_bell\n}\n\n/*\n  The function fib(n) computes the nth Fibonacci number.\n  The Fibonacci number is the number of integers which sum to n.\n  For example:\n  >>> fib(10)\n  55\n  \n  The function fib(n) will receive an integer as input and should return the\n  nth Fibonacci number.\n  */\nconst fib = (n) => {\n  let fib_number = 1\n  let fib_number_prev = 1\n  for (let i = 2; i <= n; i++) {\n    fib_number_prev += fib_number\n    fib_number = fib_number_prev\n  }\n  return fib_number\n}\n\n/*\n  The function factorial(n) computes the nth factorial.\n  The factorial is the product of all the numbers up to n.\n  For example:\n  >>> factorial(4)\n  24\n  \n  The function factorial(n) will receive an integer as input and should return\n  the nth factorial.\n  */\nconst factorial = (n) => {\n  let factorial = 1\n  for (let i = 1; i <= n; i++) {\n    factorial *= i\n  }\n  return factorial\n}\n\n/*\n  The function factorial(n) computes the nth Catalan number.\n  The Catalan number is the number of ways to partition a set with n elements.\n  For example:\n  >>> catalan(3)\n  3\n  >>> catalan(2)\n  2\n  \n  The function catalan(n) will receive an integer as input and should return\n  the nth Catalan number.\n  */\nconst catalan = (n) => {\n  let catalan_number = 1\n  let catalan_number_prev = 1\n  for (let i = 1; i <= n; i++) {\n    catalan_number_prev *= (n - i + 1)\n    catalan_number *= catalan_number_prev\n  }\n  return catalan_number\n}\n\n/*\n  The function fib(n) computes the nth Fibonacci number.\n  The Fibonacci number is the number of integers which sum to n.\n  For example:\n  >>> fib(10)\n  55\n  \n  The function fib(n) will receive an integer as input and should return the\n  nth Fibonacci number.\n  */\nconst fib = (n) => {\n  let fib_number = 1\n  let fib_number_prev = 1\n  for (let i = 2; i <= n; i++) {\n    fib_number_prev += fib_number\n    fib_number = fib_number_prev\n  }\n  return fib_number\n}\n\n/*\n  The function is_prime(n) tests whether a number is prime or not.\n  The function is_prime(n) will receive an integer as input and should return\n  whether the number is prime or not.\n  */\nconst is_prime = (n) => {\n  if (n % 2 === 0) {\n    return false\n  }\n  let limit = (Math.sqrt(n))\n  for (let i = 3; i <= limit; i += 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  The function prime_factors(n) computes the prime factors of a number.\n  The prime factors of a number are the numbers that divide the number without\n  remainder.\n  For example:\n  >>> prime_factors(24)\n  [2, 3]\n  >>> prime_factors(12)\n  [2, 2, 3]\n  \n  The function prime_factors(n) will receive an integer as input and should\n  return the prime factors of this number.\n  */\nconst prime_factors = (n) => {\n  let prime_factors = []\n  let prime_number = 2\n  let i = 3\n  while (i <= n) {\n    if (n % i === 0) {\n      prime_factors.push(prime_number)\n      i += 1\n    }\n    prime_number += 1\n  }\n  return prime_factors\n}\n\n/*\n  The function prime_count(n) computes the number of prime numbers below n.\n  For example:\n  >>> prime_count(5)\n  3\n  >>> prime_count(10)\n  4\n  \n  The function prime_count(n) will receive an integer as input and should\n  return the number of prime numbers below n.\n  */\nconst prime_count = (n) => {\n  let prime_count = 0\n  let prime_number = 2\n  while (prime_number <= n) {\n    if (is_prime(prime_number)) {\n      prime_count += 1\n    }\n    prime_number += 1\n  }\n  return prime_count\n}\n\n/*\n  The function sum_of_primes(n) computes the sum of all the prime numbers below\n  n.\n  For example:\n  >>> sum_of_primes(5)"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixspacEs", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst fixspacEs2 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs3 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs4 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs5 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs6 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs7 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs8 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs9 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs10 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs11 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs12 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs13 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs14 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs15 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs16 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs17 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs18 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs19 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs20 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs21 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs22 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs23 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs24 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs25 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs26 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs27 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs28 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs29 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs30 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs31 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs32 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs33 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs34 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs35 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs36 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs37 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs38 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs39 = (text) => {\n  return text.replace(/\\s{2,}/g, '-');\n};\n\nconst fixspacEs40 = (text) => {\n  return text.replace(/\\s{2,}/"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filENamEChecK", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n\tlet is_valid = true;\n\n\tif (file_name.length > 3) {\n\t\tis_valid = false;\n\t}\n\n\tif (file_name.indexOf(\".\") == -1) {\n\t\tis_valid = false;\n\t}\n\n\tif (file_name.substr(0, 1).search(\"0\")!= -1) {\n\t\tis_valid = false;\n\t}\n\n\tlet is_valid_extension = false;\n\n\tlet ext = file_name.substr(file_name.lastIndexOf(\".\") + 1, file_name.length);\n\n\tif (ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n\t\tis_valid_extension = true;\n\t}\n\n\tif (file_name.indexOf(\".\")!= 0) {\n\t\tis_valid_extension = false;\n\t}\n\n\tif (is_valid && is_valid_extension) {\n\t\treturn \"Yes\";\n\t} else {\n\t\treturn \"No\";\n\t}\n}\n\nconsole.log(filENamEChecK(\"example.txt\")); // => 'Yes'\nconsole.log(filENamEChecK(\"1example.dll\")); // => 'No' (the name should start with a latin alphapet letter)\nconsole.log(filENamEChecK(\"example\")); // => 'Yes' (the name should not end with a dot)\nconsole.log(filENamEChecK(\"example.\")); // => 'No' (the name should not end with a dot)\nconsole.log(filENamEChecK(\"example.txt.\")); // => 'No' (the name should not end with a dot)\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n  var sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if (i % 3 == 0 && i % 4!= 0) {\n      sum += lst[i];\n    } else if (i % 3 == 0 && i % 4 == 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 == 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worDsInsenteNce", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n  const words = sentence.split(' ')\n  let result = ''\n  words.forEach((word) => {\n    const len = parseInt(word.length, 10)\n    for (let i = 0; i < len; i += 2) {\n      if (word.length % i === 0) {\n        result += word.charAt(i)\n      }\n    }\n  })\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simPlifY", "gc": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  let num = Number(x),\n    den = Number(n);\n  return num % den === 0 && num / den === Math.floor(num / den);\n};\n\nconsole.log(simPlifY(\"1/5\", \"5/1\"));\nconsole.log(simPlifY(\"1/6\", \"2/1\"));\nconsole.log(simPlifY(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordErBypointS", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const map = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (!map[nums[i]]) map[nums[i]] = 1;\n    else map[nums[i]]++;\n  }\n  let keys = Object.keys(map);\n  keys.sort((a, b) => map[b] - map[a]);\n  return keys;\n};\n\nconst ordErBypoint = (nums) => {\n  const map = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (!map[nums[i]]) map[nums[i]] = i;\n    else map[nums[i]] = map[nums[i]] > i? map[nums[i]] : i;\n  }\n  return map;\n};\n\nconst ordErBypoint2 = (nums) => {\n  const map = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (!map[nums[i]]) map[nums[i]] = nums[i];\n    else map[nums[i]] = map[nums[i]] > nums[i]? map[nums[i]] : nums[i];\n  }\n  return map;\n};\n\nconst ordErBypoint3 = (nums) => {\n  const map = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (!map[nums[i]]) map[nums[i]] = i;\n    else map[nums[i]] = map[nums[i]] > i? map[nums[i]] : i;\n  }\n  return map;\n};\n\nconst ordErBypoint4 = (nums) => {\n  const map = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (!map[nums[i]]) map[nums[i]] = i;\n    else map[nums[i]] = map[nums[i]] > i? map[nums[i]] : i;\n  }\n  return map;\n};\n\nconst ordErBypoint5 = (nums) => {\n  const map = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (!map[nums[i]]) map[nums[i]] = i;\n    else map[nums[i]] = map[nums[i]] > i? map[nums[i]] : i;\n  }\n  return map;\n};\n\nconst ordErBypoint6 = (nums) => {\n  const map = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (!map[nums[i]]) map[nums[i]] = i;\n    else map[nums[i]] = map[nums[i]] > i? map[nums[i]] : i;\n  }\n  return map;\n};\n\nconst ordErBypoint7 = (nums) => {\n  const map = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (!map[nums[i]]) map[nums[i]] = i;\n    else map[nums[i]] = map[nums[i]] > i? map[nums[i]] : i;\n  }\n  return map;\n};\n\nconst ordErBypoint8 = (nums) => {\n  const map = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (!map[nums[i]]) map[nums[i]] = i;\n    else map[nums[i]] = map[nums[i]] > i? map[nums[i]] : i;\n  }\n  return map;\n};\n\nconst ordErBypoint9 = (nums) => {\n  const map = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (!map[nums[i]]) map[nums[i]] = i;\n    else map[nums[i]] = map[nums[i]] > i? map[nums[i]] : i;\n  }\n  return map;\n};\n\nconst ordErBypoint10 = (nums) => {\n  const map = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (!map[nums[i]]) map[nums[i]] = i;\n    else map[nums[i]] = map[nums[i]] > i? map[nums[i]] : i;\n  }\n  return map;\n};\n\nconst ordErBypoint11 = (nums) => {\n  const map = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (!map[nums[i]]) map[nums[i]] = i;\n    else map[nums[i]] = map[nums[i]] > i? map[nums[i]] : i;\n  }\n  return map;\n};\n\nconst ordErBypoint12 = (nums) => {\n  const map = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (!map[nums[i]]) map[nums[i]] = i;\n    else map[nums[i]] = map[nums[i]] > i? map[nums[i]] : i;\n  }\n  return map;\n};\n\nconst ordErBypoint13 = (nums) => {\n  const map = {};\n  for (let i = 0; i < nums.length; i++) {\n    if (!map[nums[i]]) map["}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "speCialfilteR", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(speCialfilteR([15, -73, 14, -15]));\nconsole.log(speCialfilteR([33, -2, -3, 45, 21, 109]));\nconsole.log(speCialfilteR([1, 3, 5, 7, 9]));\nconsole.log(speCialfilteR([2, 3, 4, 5, 6, 7, 8, 9]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getmaxTRipleS", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n  let arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1)\n  }\n  let a = arr.filter((v, index) => index < arr.indexOf(v) + 1)\n  let b = arr.filter((v, index) => index < arr.indexOf(v) + 2)\n  let c = arr.filter((v, index) => index < arr.indexOf(v) + 3)\n  let count = 0\n  a.forEach((val, index) => {\n    b.forEach((val, index) => {\n      c.forEach((val, index) => {\n        if (val + val + val == arr[index]) {\n          count += 1\n        }\n      })\n    })\n  })\n  return count\n}\n\nconst getmaxTRiple = (n) => {\n  let arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1)\n  }\n  let a = arr.filter((v, index) => index < arr.indexOf(v) + 1)\n  let b = arr.filter((v, index) => index < arr.indexOf(v) + 2)\n  let c = arr.filter((v, index) => index < arr.indexOf(v) + 3)\n  let count = 0\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      for (let k = 0; k < c.length; k++) {\n        if (a[i] + b[j] + c[k] == arr[i + j + k]) {\n          count += 1\n        }\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple = (n) => {\n  let arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1)\n  }\n  let a = arr.filter((v, index) => index < arr.indexOf(v) + 1)\n  let b = arr.filter((v, index) => index < arr.indexOf(v) + 2)\n  let c = arr.filter((v, index) => index < arr.indexOf(v) + 3)\n  let count = 0\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      for (let k = 0; k < c.length; k++) {\n        if (a[i] + b[j] + c[k] == arr[i + j + k]) {\n          count += 1\n        }\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple = (n) => {\n  let arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1)\n  }\n  let a = arr.filter((v, index) => index < arr.indexOf(v) + 1)\n  let b = arr.filter((v, index) => index < arr.indexOf(v) + 2)\n  let c = arr.filter((v, index) => index < arr.indexOf(v) + 3)\n  let count = 0\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      for (let k = 0; k < c.length; k++) {\n        if (a[i] + b[j] + c[k] == arr[i + j + k]) {\n          count += 1\n        }\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple = (n) => {\n  let arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1)\n  }\n  let a = arr.filter((v, index) => index < arr.indexOf(v) + 1)\n  let b = arr.filter((v, index) => index < arr.indexOf(v) + 2)\n  let c = arr.filter((v, index) => index < arr.indexOf(v) + 3)\n  let count = 0\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      for (let k = 0; k < c.length; k++) {\n        if (a[i] + b[j] + c[k] == arr[i + j + k]) {\n          count += 1\n        }\n      }\n    }\n  }\n  return count\n}\n\nconst getmaxTRiple = (n) => {\n  let arr = []\n  for (let i = 1; i <= n; i++) {\n    arr.push(i * i - i + 1)\n  }\n  let a = arr.filter((v, index) => index < arr.indexOf(v) + 1)\n  let b = arr.filter((v, index) => index < arr.indexOf(v) + 2)\n  let c = arr.filter((v, index) => index < arr.indexOf(v) + 3)\n  let count = 0\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      for (let k = 0; k < c.length; k++) {\n        if (a[i] +"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    const planet = [].concat(\n        [].concat(\n            [].concat(\n                [planet1],\n                [planet2]\n            ),\n            [planet1, planet2]\n        ),\n        [planet2, planet1]\n    );\n\n    return [\n       ...(planet.filter(a => a === \"Earth\") || []),\n       ...(planet.filter(a => a === \"Jupiter\") || []),\n       ...(planet.filter(a => a === \"Saturn\") || []),\n       ...(planet.filter(a => a === \"Uranus\") || []),\n       ...(planet.filter(a => a === \"Neptune\") || []),\n       ...(planet.filter(a => a === \"Mars\") || []),\n       ...(planet.filter(a => a === \"Venus\") || [])\n    ].sort(comparePlanetDistance);\n\n    function comparePlanetDistance(planet1, planet2) {\n        return planet1.index - planet2.index;\n    }\n}\n\nmodule.exports = bf;<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorTedLIstSuM", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n    const arr = lst.slice().sort((a, b) => a.length - b.length)\n    const result = arr.filter(word => word.length % 2 === 0)\n    return result.slice().sort((a, b) => a.length - b.length)\n}\n\n// let d = [\"aa\", \"a\", \"aaa\", \"ab\", \"a\", \"cd\"]\n// assert sorTedLIstSuM(d) === [\"aa\", \"a\", \"ab\", \"cd\"]\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOry", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  }\n  return y;\n};\n\nconsole.log(xOry(15, 8, 5));\nconsole.log(xOry(7, 34, 12));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douBleTHeDifFerEnce", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  const list = lst.slice();\n  if (list.length === 0) {\n    return 0;\n  }\n  return list.reduce((pre, curr) => pre + curr * curr, 0);\n};\n\n/*\n  Given a list of numbers, return the sum of the numbers that are even.\n  If the list is empty, return 0.\n  */\nconst sumOfEven = (lst) => {\n  const list = lst.slice();\n  return list.reduce((pre, curr) => pre + curr, 0);\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  that are even. If the list is empty, return 0.\n  */\nconst sumOfSquares = (lst) => {\n  const list = lst.slice();\n  return list.reduce((pre, curr) => pre + curr * curr, 0);\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers\n  that are odd. If the list is empty, return 0.\n  */\nconst sumOfSquaresOdd = (lst) => {\n  const list = lst.slice();\n  return list.reduce((pre, curr) => pre + curr * curr, 0);\n};\n\n/*\n  Given a list of numbers, return the sum of the numbers that are odd.\n  If the list is empty, return 0.\n  */\nconst sumOfOdd = (lst) => {\n  const list = lst.slice();\n  return list.reduce((pre, curr) => pre + curr, 0);\n};\n\n/*\n  Given a list of numbers, return the difference of the squares of the\n  numbers that are odd. If the list is empty, return 0.\n  */\nconst diffOfSquaresOdd = (lst) => {\n  const list = lst.slice();\n  return list.reduce((pre, curr) => pre + curr * curr, 0);\n};\n\n/*\n  Given a list of numbers, return the difference of the squares of the\n  numbers that are even. If the list is empty, return 0.\n  */\nconst diffOfSquaresEven = (lst) => {\n  const list = lst.slice();\n  return list.reduce((pre, curr) => pre + curr * curr, 0);\n};\n\n/*\n  Given a list of numbers, return the difference of the numbers that are\n  odd. If the list is empty, return 0.\n  */\nconst diffOfOdd = (lst) => {\n  const list = lst.slice();\n  return list.reduce((pre, curr) => pre + curr, 0);\n};\n\n/*\n  Given a list of numbers, return the difference of the numbers that are\n  even. If the list is empty, return 0.\n  */\nconst diffOfEven = (lst) => {\n  const list = lst.slice();\n  return list.reduce((pre, curr) => pre + curr, 0);\n};\n\n/*\n  Given a list of numbers, return the difference of the numbers that are\n  odd. If the list is empty, return 0.\n  */\nconst diffOfSquares = (lst) => {\n  const list = lst.slice();\n  return list.reduce((pre, curr) => pre + curr * curr, 0);\n};\n\n/*\n  Given a list of numbers, return the difference of the numbers that are\n  even. If the list is empty, return 0.\n  */\nconst diff = (lst) => {\n  const list = lst.slice();\n  return list.reduce((pre, curr) => pre + curr, 0);\n};\n\nexport {\n  douBleTHeDifFerEnce,\n  sumOfEven,\n  sumOfSquares,\n  sumOfSquaresOdd,\n  sumOfOdd,\n  diffOfSquares,\n  diffOfSquaresOdd,\n  diffOfOdd,\n  diffOfEven,\n  diff,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comPare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  const [score, guess] = game.sort((a, b) => a - b)\n  const [diff = 0, guess] = guess.sort((a, b) => a - b)\n  return [diff, diff, diff, diff, diff, diff, diff, diff]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strOngeStExtEnsIon", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n  const strength = extensions.reduce((acc, curr) => {\n    const str = curr.replace(/\\s/g, '').toUpperCase();\n    return acc + (str.length - str.replace(/[^A-Z]/g, '').length);\n  }, 0);\n  const class_name_length = class_name.length;\n  const extension_name = class_name.split('.').splice(-1)[0];\n  const extension_name_length = extension_name.length;\n  const diff = strength - extension_name_length;\n  return `${class_name_length}${diff >= 0? `.${extension_name}` : `.${extension_name}${diff}`}`;\n};\n\nmodule.exports = strOngeStExtEnsIon;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycPattErnChEck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  let aR = a.split(\"\").reverse().join(\"\");\n  let bR = b.split(\"\").reverse().join(\"\");\n  return aR.includes(bR) || aR.includes(b) || bR.includes(aR) || bR.includes(a);\n};\n\n/*\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\n\nconsole.log(cycPattErnChEck(\"abcd\",\"abd\"));\nconsole.log(cycPattErnChEck(\"hello\",\"ell\"));\nconsole.log(cycPattErnChEck(\"whassup\",\"psus\"));\nconsole.log(cycPattErnChEck(\"abab\",\"baa\"));\nconsole.log(cycPattErnChEck(\"efef\",\"eeff\"));\nconsole.log(cycPattErnChEck(\"himenss\",\"simen\"));\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "eveNOddcount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n    let count = 0\n    let odd = 0\n    while(num) {\n        if (num % 2 === 0) {\n            count++\n        } else {\n            odd++\n        }\n        num = Math.floor(num / 2)\n    }\n    return [count, odd]\n}\n\n/*\n  Given a tuple with two integers. return the sum of the even and odd digits.\n  Example:\n    sumEvenOdd(eveNOddcount((12))) ==> 30\n*/\nconst sumEvenOdd = (tuple) => {\n    return tuple[0] + tuple[1]\n}\n\n/*\n  Given a tuple with two integers. return the difference of the even and odd digits.\n  Example:\n    diffEvenOdd(eveNOddcount((12))) ==> 8\n*/\nconst diffEvenOdd = (tuple) => {\n    return tuple[0] - tuple[1]\n}\n\n/*\n  Given a tuple with two integers. return the product of the even and odd digits.\n  Example:\n    productEvenOdd(eveNOddcount((12))) ==> 432\n*/\nconst productEvenOdd = (tuple) => {\n    return tuple[0] * tuple[1]\n}\n\n/*\n  Given a tuple with two integers. return the quotient of the even and odd digits.\n  Example:\n    quotientEvenOdd(eveNOddcount((12))) ==> 6\n*/\nconst quotientEvenOdd = (tuple) => {\n    return tuple[0] / tuple[1]\n}\n\n/*\n  Given a tuple with two integers. return the remainder of the even and odd digits.\n  Example:\n    remainderEvenOdd(eveNOddcount((12))) ==> 2\n*/\nconst remainderEvenOdd = (tuple) => {\n    return tuple[0] % tuple[1]\n}\n\n/*\n  Given two tuples with two integers. return the difference of the sum of the even and odd digits.\n  Example:\n    diffSumEvenOdd(sumEvenOdd(eveNOddcount((12))), eveNOddcount((12))) ==> 10\n*/\nconst diffSumEvenOdd = (tuple1, tuple2) => {\n    return tuple1[0] + tuple1[1] - tuple2[0] - tuple2[1]\n}\n\n/*\n  Given two tuples with two integers. return the product of the sum of the even and odd digits.\n  Example:\n    productSumEvenOdd(productEvenOdd(eveNOddcount((12))), eveNOddcount((12))) ==> 288\n*/\nconst productSumEvenOdd = (tuple1, tuple2) => {\n    return tuple1[0] * tuple1[1] + tuple2[0] * tuple2[1]\n}\n\n/*\n  Given two tuples with two integers. return the quotient of the product of the sum of the even and odd digits.\n  Example:\n    quotientProductSumEvenOdd(productSumEvenOdd(eveNOddcount((12))), eveNOddcount((12))) ==> 6\n*/\nconst quotientProductSumEvenOdd = (tuple1, tuple2) => {\n    return tuple1[0] * tuple1[1] / (tuple2[0] * tuple2[1])\n}\n\n/*\n  Given two tuples with two integers. return the remainder of the quotient of the product of the sum of the even and odd digits.\n  Example:\n    remainderQuotientProductSumEvenOdd(quotientProductSumEvenOdd(productSumEvenOdd(eveNOddcount((12))), eveNOddcount((12))), eveNOddcount((12))) ==> 2\n*/\nconst remainderQuotientProductSumEvenOdd = (tuple1, tuple2) => {\n    return remainderEvenOdd(remainderProductEvenOdd(productSumEvenOdd(tuple1, tuple2), tuple2))\n}\n\n/*\n  Given two tuples with two integers. return the remainder of the remainder of the quotient of the product of the sum of the even and odd digits.\n  Example:\n    remainderRemainderQuotientProductSumEvenOdd(remainderQuotientProductSumEvenOdd(quotientProductSumEvenOdd(productSumEvenOdd(eveNOddcount((12))), eveNOddcount((12))), eveNOddcount((12))), eveNOddcount((12))) ==> 2\n*/\nconst remainderRemainderQuotientProductSumEvenOdd = (tuple1, tuple2) => {\n    return remainderRemainderEvenOdd(remainderProductEvenOdd(productSumEvenOdd(tuple1, tuple2), tuple2))\n}\n\n/*\n  Given a tuple with two integers. return the sum of the remainder of the remainder of the quotient of the product of the sum of the even and odd digits.\n  Example:\n    sumRemainderRemainderQuotientProductSumEvenOdd(sumRemainderQuotientProductSumEvenOdd(quotientProductSumEvenOdd(productSumEvenOdd(eveNOddcount((12))), eveNOddcount((12))), eveNOddcount((12))), eveNOddcount((12))) ==> 6\n*/\nconst sumRemainderRemainderQuotientProductSumEvenOdd = (tuple1, tuple2) => {\n    return sumRemainderRemainderEvenOdd(sumProductRemainderEvenOdd(productSumEvenOdd(tuple1, tuple2), tuple2))\n}\n\n/*\n  Given two tuples with two integers. return the sum of the remainder of the remainder of the remainder of the quotient of the product of the sum of the even and odd digits.\n  Example:\n    sumRemainderRemainderRemainderQuotientProductSumEvenOdd(sumRemainderRemainderQuotientProductSumEvenOdd(sumProductRemainderEvenOdd(productSumEvenOdd(eveNOddcount((12))), eveNOddcount((12))), eveNOddcount((12))), eveNOddcount((12))) ==> 12\n*/\nconst sumRemainderRemainderRemainderQuotientProductSumEvenOdd = (tuple1, tuple2) => {"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "inttoMiNiRomAn", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n    if (number === 1) return 'I';\n    if (number === 2) return 'II';\n    if (number === 3) return 'III';\n    if (number === 4) return 'IV';\n    if (number % 10 === 5) {\n        if (number % 100 === 0) return 'VI';\n        else return `VI${inttoMiNiRomAn(number % 100)}`;\n    }\n    if (number % 10 === 9) {\n        if (number % 100 === 0) return 'IX';\n        else return `IX${inttoMiNiRomAn(number % 100)}`;\n    }\n    if (number % 10 === 1) return `X${inttoMiNiRomAn(number % 100)}`;\n    if (number % 10 === 8) return `V${inttoMiNiRomAn(number % 100)}`;\n    if (number % 10 === 7) return `VII${inttoMiNiRomAn(number % 100)}`;\n    if (number % 10 === 6) return `VI${inttoMiNiRomAn(number % 100)}`;\n    if (number % 10 === 5) return `V${inttoMiNiRomAn(number % 100)}`;\n    if (number % 10 === 4) return `IV${inttoMiNiRomAn(number % 100)}`;\n    if (number % 10 === 3) return `III${inttoMiNiRomAn(number % 100)}`;\n    if (number % 10 === 2) return `II${inttoMiNiRomAn(number % 100)}`;\n    return `I${inttoMiNiRomAn(number % 100)}`;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigHtAnGleTrIanGle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n  if (a + b > c && b + c > a && a + c > b) {\n    return true;\n  }\n  return false;\n};\n\nconst test = rigHtAnGleTrIanGle(1, 2, 3);\nconsole.log(test);\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finDMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  let max = 0;\n  const length = words.length;\n  for(let i = 0; i < length; i++){\n    const currentWord = words[i];\n    const count = currentWord.length;\n    if(count > max){\n      max = count;\n    }\n  }\n  let result = \"\";\n  for(let i = 0; i < length; i++){\n    const currentWord = words[i];\n    const count = currentWord.length;\n    if(count == max){\n      result = currentWord;\n    }\n  }\n  return result;\n};\n\nconst words = [\"name\", \"of\", \"string\", \"game\", \"aaaaaaa\", \"bb\", \"cc\"];\nconsole.log(finDMax(words)); // => \"aaaaaaa\"\n\nconst words = [\"name\", \"enam\", \"game\"];\nconsole.log(finDMax(words)); // => \"enam\"\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    const [ number_eaten, remaining_eaten ] = [ 0, number ];\n    while(number_eaten < need) {\n        number_eaten += remaining_eaten;\n        remaining_eaten = remaining;\n    }\n    return [ number_eaten, remaining_eaten ];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doALgebRa", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n    if (typeof operator === 'object' && typeof operand === 'object') {\n        let result = 0;\n        let operators = operator;\n        let operands = operand;\n        while (operators.length > 0 && operands.length > 1) {\n            let currOperator = operators.shift();\n            let currOperand = operands.shift();\n            result += Math[currOperator](currOperand);\n        }\n        return result;\n    }\n    return 0;\n};\n\nmodule.exports = doALgebRa;\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solVe", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n    const len = s.length;\n    let i = 0;\n    let j = len - 1;\n    let ch = '';\n    let ret = '';\n    while(i < j) {\n        ch = s[i];\n        if(ch === 'a' || ch === 'A') {\n            ret += (ch === 'a')? 'A' : 'a';\n            i++;\n            j--;\n        } else {\n            ret += ch;\n            i++;\n        }\n    }\n    if(i === j) {\n        ret = (s[0] === 'a' || s[0] === 'A')? s : s.toUpperCase();\n    }\n    return ret;\n}\n\n// Test\n// console.log(solVe(\"1234\"));\n// console.log(solVe(\"ab\"));\n// console.log(solVe(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strIngTOMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  const str = text.trim()\n\n  if (str.length === 0) {\n    return null\n  }\n\n  const md5 = crypto.createHash('md5')\n  md5.update(str)\n\n  return md5.digest('hex')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genEratEInteGerS", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n  const a = Math.min(a, b);\n  const b = Math.max(a, b);\n  const start = a % 10;\n  const end = (b - 1) % 10 + 1;\n  const digits = [];\n\n  for (let i = start; i < end; i++) {\n    digits.push(i);\n  }\n\n  return digits;\n};\n\nconsole.log(genEratEInteGerS(2, 8));\nconsole.log(genEratEInteGerS(8, 2));\nconsole.log(genEratEInteGerS(10, 14));\n<|endoftext|>"}
